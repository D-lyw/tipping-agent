Directory structure:
└── sporeprotocol-decoder-template-rust/
    ├── README.md
    ├── Cargo.toml
    ├── deploy.sh
    ├── deployment.toml
    ├── migration/
    │   ├── mainnet/
    │   │   └── 2024-04-25-014449.json
    │   └── testnet/
    │       ├── 2024-04-24-013517.json
    │       ├── 2024-05-23-091252.json
    │       └── 2024-05-27-040200.json
    ├── src/
    │   └── main.rs
    └── .cargo/
        └── config.toml

================================================
File: README.md
================================================
A template of writing RISC-V DOBs decoder in Rust.

Install `ckb-vm-runner`:
```sh
$ git clone https://github.com/nervosnetwork/ckb-vm
$ cargo install --path . --example ckb-vm-runner
```

For quick run:

```sh
$ cargo run -- ac7b88 "[[\"Name\",\"string\",0,1,\"options\",[\"Alice\",\"Bob\",\"Charlie\",\"David\",\"Ethan\",\"Florence\",\"Grace\",\"Helen\"]],[\"Age\",\"number\",1,1,\"range\",[0,100]],[\"Score\",\"number\",2,1,\"raw\"]]"

or

$ cargo build --release
$ ckb-vm-runner target/riscv64imac-unknown-none-elf/release/spore-dobs-decoder ac7b88 "[[\"Name\",\"string\",0,1,\"options\",[\"Alice\",\"Bob\",\"Charlie\",\"David\",\"Ethan\",\"Florence\",\"Grace\",\"Helen\"]],[\"Age\",\"number\",1,1,\"range\",[0,100]],[\"Score\",\"number\",2,1,\"raw\"]]"


"[{\"name\":\"Name\",\"traits\":[{\"String\":\"Ethan\"}]},{\"name\":\"Age\",\"traits\":[{\"Number\":23}]},{\"name\":\"Score\",\"traits\":[{\"Number\":136}]}]"
```

How to integrate:
1. install `ckb-vm-runner` into your back server natively
2. call `ckb-vm-runner` with the path of `spore-dobs-decoder` binary, DNA and Pattern parameters in your server code (refer to above quick run)
3. parse the JSON traits result


================================================
File: Cargo.toml
================================================
[package]
name = "spore-dobs-decoder"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
linked_list_allocator = "*"

spore-dob-0 = { git = "https://github.com/sporeprotocol/spore-dob-0", rev = "296de5c" }

[profile.release]
overflow-checks = true
strip = true
opt-level = 's'
lto = true
codegen-units = 1


================================================
File: deploy.sh
================================================
#!/usr/bin/env bash

export network=$3
export name="spore-dobs-decoder"

if [ -z $network ]
then
    export network="testnet"
fi

echo "deploying $name from $2 to $1 on $network"

ckb-cli --url $1 deploy gen-txs --from-address $2 --fee-rate 1000 --deployment-config ./deployment.toml \
    --info-file ./$name.json --migration-dir ./migration/$network --sign-now

echo "ckb transacion file '$name.json' has generated"

ckb-cli --url $1 deploy apply-txs --info-file ./$name.json --migration-dir ./migration/$network

rm ./$name.json

echo "deployment finished"

# usage: ./deploy.sh https://testnet.ckbapp.dev/ ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqfqmf4hphl9jkrw3934mwe6m3a2nx88rzgdlw820


================================================
File: deployment.toml
================================================
# this is a deployment file for ckb testnet

[[cells]]
name = "spore-dob-0"
enable_type_id = true
location = { file = "target/riscv64imac-unknown-none-elf/release/spore-dobs-decoder" }

# The lock script set to output cells
[lock]
code_hash = "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8"
args = "0x20da6b70dfe59586e89635dbb3adc7aa998e7189"
hash_type = "type"


================================================
File: migration/mainnet/2024-04-25-014449.json
================================================
{
  "cell_recipes": [
    {
      "name": "spore-dob-0",
      "tx_hash": "0xa0bb58aa58778d63275e6f77856c30d82c46b9b86785a422e25ac3a362e5b2cd",
      "index": 0,
      "occupied_capacity": 6516500000000,
      "data_hash": "0xb82abd59ade361a014f0abb692f71b0feb880693c3ccb95b9137b73551d872ce",
      "type_id": null
    }
  ],
  "dep_group_recipes": []
}

================================================
File: migration/testnet/2024-04-24-013517.json
================================================
{
  "cell_recipes": [
    {
      "name": "spore-dob-0",
      "tx_hash": "0xb2497dc3e616055125ef8276be7ee21986d2cd4b2ce90992725386cabcb6ea7f",
      "index": 0,
      "occupied_capacity": 6516500000000,
      "data_hash": "0xb82abd59ade361a014f0abb692f71b0feb880693c3ccb95b9137b73551d872ce",
      "type_id": null
    }
  ],
  "dep_group_recipes": []
}

================================================
File: migration/testnet/2024-05-23-091252.json
================================================
{
  "cell_recipes": [
    {
      "name": "spore-dob-0",
      "tx_hash": "0xe5deff07d226fbd88ae9c406b7ba04f6d9f91c0b733b65c78089c55e660a2c1e",
      "index": 0,
      "occupied_capacity": 7417400000000,
      "data_hash": "0xdf2030642f219db0a06f6ee4b160142cc4d668790616b1dc1bdd4e3ff7e3a814",
      "type_id": "0xef5e2e8a41bffbbfabef63e8660be398f760e508a6a09940e4b4c332df936880"
    }
  ],
  "dep_group_recipes": []
}

================================================
File: migration/testnet/2024-05-27-040200.json
================================================
{
  "cell_recipes": [
    {
      "name": "spore-dob-0",
      "tx_hash": "0x987cf95d129a2dcc2cdf7bd387c1bd888fa407e3c5a3d511fd80c80dcf6c6b67",
      "index": 0,
      "occupied_capacity": 7498200000000,
      "data_hash": "0x32f29aba4b17f3d05bec8cec55d50ef86766fd0bf82fdedaa14269f344d3784a",
      "type_id": "0xef5e2e8a41bffbbfabef63e8660be398f760e508a6a09940e4b4c332df936880"
    }
  ],
  "dep_group_recipes": []
}

================================================
File: src/main.rs
================================================
#![no_main]
#![no_std]

extern crate alloc;
use core::ffi::CStr;

use alloc::{format, vec::Vec};
use spore_dob_0::decoder::{dobs_decode, dobs_parse_parameters};

const HEAPS_SIZE: usize = 1024 * 64;

static mut HEAPS: [u8; HEAPS_SIZE] = [0; HEAPS_SIZE];
#[global_allocator]
static ALLOC: linked_list_allocator::LockedHeap = linked_list_allocator::LockedHeap::empty();

#[panic_handler]
fn panic_handler(panic_info: &core::panic::PanicInfo) -> ! {
    // If the main thread panics it will terminate all your threads and end your program with code 101.
    // See: https://github.com/rust-lang/rust/blob/master/library/core/src/macros/panic.md
    syscall_write(format!("{panic_info:?}").as_ptr());
    syscall_exit(101)
}

fn syscall(mut a0: u64, a1: u64, a2: u64, a3: u64, a4: u64, a5: u64, a6: u64, a7: u64) -> u64 {
    unsafe {
        core::arch::asm!(
          "ecall",
          inout("a0") a0,
          in("a1") a1,
          in("a2") a2,
          in("a3") a3,
          in("a4") a4,
          in("a5") a5,
          in("a6") a6,
          in("a7") a7
        )
    }
    a0
}

fn syscall_exit(code: u64) -> ! {
    syscall(code, 0, 0, 0, 0, 0, 0, 93);
    loop {}
}

pub fn syscall_write(buf: *const u8) -> u64 {
    syscall(buf as u64, 0, 0, 0, 0, 0, 0, 2177)
}

#[no_mangle]
pub unsafe extern "C" fn _start() {
    core::arch::asm!(
        "lw a0,0(sp)", // Argc.
        "add a1,sp,8", // Argv.
        "li a2,0",     // Envp.
        "call main",
        "li a7, 93",
        "ecall",
    );
}

#[no_mangle]
unsafe extern "C" fn main(argc: u64, argv: *const *const i8) -> u64 {
    unsafe {
        ALLOC.lock().init(HEAPS.as_mut_ptr(), HEAPS_SIZE);
    }

    let mut args = Vec::new();
    for i in 0..argc {
        let argn = unsafe { CStr::from_ptr(argv.add(i as usize).read()) };
        args.push(argn.to_bytes());
    }
    let dob_params = match dobs_parse_parameters(args) {
        Ok(value) => value,
        Err(err) => return err as u64,
    };
    match dobs_decode(dob_params) {
        Ok(mut bytes) => {
            bytes.push(0);
            syscall_write(bytes.as_ptr() as *const u8);
            return 0;
        }
        Err(error) => return error as u64,
    }
}


================================================
File: .cargo/config.toml
================================================
[build]
target = "riscv64imac-unknown-none-elf"

[target.riscv64imac-unknown-none-elf]
runner = "ckb-vm-runner"


