Directory structure:
└── ckb-devrel-ckb-indexer/
    ├── README.md
    ├── Dockerfile
    ├── docker-compose.yaml
    ├── nest-cli.json
    ├── package.json
    ├── pnpm-lock.yaml
    ├── tsconfig.build.json
    ├── tsconfig.json
    ├── .dockerignore
    ├── .eslintrc.js
    ├── .prettierignore
    ├── .prettierrc
    ├── config/
    │   ├── config.dob-decoder.toml
    │   ├── config.ssri-server.toml
    │   └── config.yaml
    ├── config.mainnet/
    │   ├── config.dob-decoder.toml
    │   ├── config.ssri-server.toml
    │   └── config.yaml
    ├── libs/
    │   ├── asset/
    │   │   ├── tsconfig.lib.json
    │   │   └── src/
    │   │       ├── asset.controller.ts
    │   │       ├── asset.module.ts
    │   │       ├── asset.service.ts
    │   │       ├── index.ts
    │   │       └── repos/
    │   │           ├── cluster.repo.ts
    │   │           ├── index.ts
    │   │           ├── spore.repo.ts
    │   │           └── udtInfo.repo.ts
    │   ├── block/
    │   │   ├── tsconfig.lib.json
    │   │   └── src/
    │   │       ├── block.controller.ts
    │   │       ├── block.module.ts
    │   │       ├── block.service.ts
    │   │       ├── index.ts
    │   │       └── repos/
    │   │           ├── block.repo.ts
    │   │           └── index.ts
    │   ├── cell/
    │   │   ├── tsconfig.lib.json
    │   │   └── src/
    │   │       ├── cell.controller.ts
    │   │       ├── cell.module.ts
    │   │       ├── cell.service.ts
    │   │       ├── index.ts
    │   │       └── repos/
    │   │           ├── index.ts
    │   │           ├── udtBalance.repo.ts
    │   │           └── udtInfo.repo.ts
    │   ├── commons/
    │   │   ├── tsconfig.lib.json
    │   │   └── src/
    │   │       ├── config.ts
    │   │       ├── index.ts
    │   │       ├── ormUtils/
    │   │       │   └── index.ts
    │   │       ├── pick/
    │   │       │   └── index.ts
    │   │       ├── rest/
    │   │       │   └── index.ts
    │   │       └── utils/
    │   │           └── index.ts
    │   ├── schemas/
    │   │   ├── tsconfig.lib.json
    │   │   └── src/
    │   │       ├── index.ts
    │   │       ├── schemas.module.ts
    │   │       └── schemas/
    │   │           ├── block.ts
    │   │           ├── cluster.ts
    │   │           ├── index.ts
    │   │           ├── scriptCode.ts
    │   │           ├── spore.ts
    │   │           ├── syncStatus.ts
    │   │           ├── udtBalance.ts
    │   │           └── udtInfo.ts
    │   ├── spore/
    │   │   ├── tsconfig.lib.json
    │   │   └── src/
    │   │       ├── index.ts
    │   │       ├── spore.controller.ts
    │   │       ├── spore.module.ts
    │   │       ├── spore.service.ts
    │   │       └── repos/
    │   │           ├── cluster.repo.ts
    │   │           ├── index.ts
    │   │           └── spore.repo.ts
    │   ├── sync/
    │   │   ├── tsconfig.lib.json
    │   │   └── src/
    │   │       ├── index.ts
    │   │       ├── sporeParser.ts
    │   │       ├── sync.controller.ts
    │   │       ├── sync.module.ts
    │   │       ├── sync.service.ts
    │   │       ├── udtParser.ts
    │   │       └── repos/
    │   │           ├── block.repo.ts
    │   │           ├── cluster.repo.ts
    │   │           ├── index.ts
    │   │           ├── scriptCode.repo.ts
    │   │           ├── spore.repo.ts
    │   │           ├── syncStatus.repo.ts
    │   │           ├── udtBalance.repo.ts
    │   │           └── udtInfo.repo.ts
    │   └── udt/
    │       ├── tsconfig.lib.json
    │       └── src/
    │           ├── index.ts
    │           ├── udt.controller.ts
    │           ├── udt.module.ts
    │           ├── udt.service.ts
    │           └── repos/
    │               ├── block.repo.ts
    │               ├── index.ts
    │               ├── scriptCode.repo.ts
    │               ├── udtBalance.repo.ts
    │               └── udtInfo.repo.ts
    ├── src/
    │   ├── app.module.ts
    │   └── main.ts
    └── workers/
        └── getBlock.ts

================================================
File: README.md
================================================
<p align="center">
  <a href="http://nestjs.com/" target="blank"><img src="https://nestjs.com/img/logo-small.svg" width="200" alt="Nest Logo" /></a>
</p>

[circleci-image]: https://img.shields.io/circleci/build/github/nestjs/nest/master?token=abc123def456
[circleci-url]: https://circleci.com/gh/nestjs/nest

  <p align="center">A progressive <a href="http://nodejs.org" target="_blank">Node.js</a> framework for building efficient and scalable server-side applications.</p>
    <p align="center">
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/v/@nestjs/core.svg" alt="NPM Version" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/l/@nestjs/core.svg" alt="Package License" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/dm/@nestjs/common.svg" alt="NPM Downloads" /></a>
<a href="https://circleci.com/gh/nestjs/nest" target="_blank"><img src="https://img.shields.io/circleci/build/github/nestjs/nest/master" alt="CircleCI" /></a>
<a href="https://coveralls.io/github/nestjs/nest?branch=master" target="_blank"><img src="https://coveralls.io/repos/github/nestjs/nest/badge.svg?branch=master#9" alt="Coverage" /></a>
<a href="https://discord.gg/G7Qnnhy" target="_blank"><img src="https://img.shields.io/badge/discord-online-brightgreen.svg" alt="Discord"/></a>
<a href="https://opencollective.com/nest#backer" target="_blank"><img src="https://opencollective.com/nest/backers/badge.svg" alt="Backers on Open Collective" /></a>
<a href="https://opencollective.com/nest#sponsor" target="_blank"><img src="https://opencollective.com/nest/sponsors/badge.svg" alt="Sponsors on Open Collective" /></a>
  <a href="https://paypal.me/kamilmysliwiec" target="_blank"><img src="https://img.shields.io/badge/Donate-PayPal-ff3f59.svg"/></a>
    <a href="https://opencollective.com/nest#sponsor"  target="_blank"><img src="https://img.shields.io/badge/Support%20us-Open%20Collective-41B883.svg" alt="Support us"></a>
  <a href="https://twitter.com/nestframework" target="_blank"><img src="https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow"></a>
</p>
  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)
  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->

## Description

[Nest](https://github.com/nestjs/nest) framework TypeScript starter repository.

## Installation

```bash
$ pnpm install
```

## Running the app

```bash
# development
$ pnpm run start

# watch mode
$ pnpm run start:dev

# production mode
$ pnpm run start:prod
```

## Test

```bash
# unit tests
$ pnpm run test

# e2e tests
$ pnpm run test:e2e

# test coverage
$ pnpm run test:cov
```

## Support

Nest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).

## Stay in touch

- Author - [Kamil Myśliwiec](https://kamilmysliwiec.com)
- Website - [https://nestjs.com](https://nestjs.com/)
- Twitter - [@nestframework](https://twitter.com/nestframework)

## License

Nest is [MIT licensed](LICENSE).


================================================
File: Dockerfile
================================================
FROM node:20-alpine AS prod
WORKDIR /app

RUN npm install -g pnpm@9.8.0

RUN --mount=type=bind,source=package.json,target=package.json \
  --mount=type=bind,source=pnpm-lock.yaml,target=pnpm-lock.yaml \
  pnpm install --prod --frozen-lockfile

FROM node:20-alpine AS builder
WORKDIR /app

RUN npm install -g pnpm@9.8.0

RUN --mount=type=bind,source=package.json,target=package.json \
  --mount=type=bind,source=pnpm-lock.yaml,target=pnpm-lock.yaml \
  pnpm install

COPY . .
RUN pnpm run build

FROM node:20-alpine

COPY --link --from=builder /app/dist /app/dist
COPY --link --from=prod /app/node_modules /app/node_modules

WORKDIR /app

CMD [ "node", "./dist/main.js" ]



================================================
File: docker-compose.yaml
================================================
services:
  be:
    build: .
    ports:
      - 8080:8080
    restart: unless-stopped
    volumes:
      - ./config/config.yaml:/app/config/config.yaml
    depends_on:
      - db
      - decoder
      - ssri
    networks:
      - networks

  db:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: appdb
      MYSQL_DATABASE: appdb
      MYSQL_USER: appdb
      MYSQL_PASSWORD: appdb
    command:
      - "--skip-log-bin"
    volumes:
      - ./mysql:/var/lib/mysql
    restart: always
    networks:
      - networks

  decoder:
    image: hanssen0/ckb-dob-decoder-server
    volumes:
      - ./config/config.dob-decoder.toml:/app/settings.toml
    restart: always
    networks:
      - networks

  ssri:
    image: hanssen0/ckb-ssri-server
    volumes:
      - ./config/config.ssri-server.toml:/app/config.toml
    restart: always
    networks:
      - networks

networks:
  networks:
    driver: bridge


================================================
File: nest-cli.json
================================================
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true,
    "webpack": true
  },
  "projects": {
    "commons": {
      "type": "library",
      "root": "libs/commons",
      "entryFile": "index",
      "sourceRoot": "libs/commons/src",
      "compilerOptions": {
        "tsConfigPath": "libs/commons/tsconfig.lib.json"
      }
    },
    "schemas": {
      "type": "library",
      "root": "libs/schemas",
      "entryFile": "index",
      "sourceRoot": "libs/schemas/src",
      "compilerOptions": {
        "tsConfigPath": "libs/schemas/tsconfig.lib.json"
      }
    },
    "sync": {
      "type": "library",
      "root": "libs/sync",
      "entryFile": "index",
      "sourceRoot": "libs/sync/src",
      "compilerOptions": {
        "tsConfigPath": "libs/sync/tsconfig.lib.json"
      }
    }
  }
}

================================================
File: package.json
================================================
{
  "name": "ckb-indexer",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "build": "nest build; tsc -m node16 --outDir dist/workers workers/*.ts",
    "format": "prettier --write \"src/**/*.ts\" \"libs/**/*.ts\" \"workers/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\"",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@ckb-ccc/shell": "^1.1.1",
    "@ckb-ccc/spore": "^1.2.0",
    "@nestjs/common": "^10.0.0",
    "@nestjs/config": "^3.2.3",
    "@nestjs/core": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/swagger": "^8.1.0",
    "@nestjs/typeorm": "^10.0.2",
    "@scure/bip32": "^1.4.0",
    "@scure/bip39": "^1.3.0",
    "axios": "^1.7.9",
    "bitcoin-address-validation": "^2.2.3",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "js-yaml": "^4.1.0",
    "lib": "^5.1.0",
    "mysql2": "^3.11.5",
    "reflect-metadata": "^0.2.0",
    "rxjs": "^7.8.1",
    "typeorm": "^0.3.20"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/express": "^4.17.17",
    "@types/jest": "^29.5.2",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^20.3.1",
    "@types/supertest": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "eslint": "^8.42.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "prettier-plugin-organize-imports": "^4.1.0",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": ".",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "./coverage",
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/src/",
      "<rootDir>/libs/"
    ],
    "moduleNameMapper": {
      "^@app/commons(|/.*)$": "<rootDir>/libs/commons/src/$1",
      "^@app/schemas(|/.*)$": "<rootDir>/libs/schemas/src/$1",
      "^@app/sync(|/.*)$": "<rootDir>/libs/sync/src/$1"
    }
  }
}


================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@ckb-ccc/shell':
        specifier: ^1.1.1
        version: 1.1.1(typescript@5.7.2)
      '@ckb-ccc/spore':
        specifier: ^1.2.0
        version: 1.2.0(typescript@5.7.2)
      '@nestjs/common':
        specifier: ^10.0.0
        version: 10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/config':
        specifier: ^3.2.3
        version: 3.3.0(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(rxjs@7.8.1)
      '@nestjs/core':
        specifier: ^10.0.0
        version: 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/platform-express':
        specifier: ^10.0.0
        version: 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15)
      '@nestjs/swagger':
        specifier: ^8.1.0
        version: 8.1.0(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1))(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)
      '@nestjs/typeorm':
        specifier: ^10.0.2
        version: 10.0.2(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2)(rxjs@7.8.1)(typeorm@0.3.20(mysql2@3.11.5)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)))
      '@scure/bip32':
        specifier: ^1.4.0
        version: 1.6.0
      '@scure/bip39':
        specifier: ^1.3.0
        version: 1.5.0
      axios:
        specifier: ^1.7.9
        version: 1.7.9
      bitcoin-address-validation:
        specifier: ^2.2.3
        version: 2.2.3
      class-transformer:
        specifier: ^0.5.1
        version: 0.5.1
      class-validator:
        specifier: ^0.14.1
        version: 0.14.1
      js-yaml:
        specifier: ^4.1.0
        version: 4.1.0
      lib:
        specifier: ^5.1.0
        version: 5.1.0
      mysql2:
        specifier: ^3.11.5
        version: 3.11.5
      reflect-metadata:
        specifier: ^0.2.0
        version: 0.2.2
      rxjs:
        specifier: ^7.8.1
        version: 7.8.1
      typeorm:
        specifier: ^0.3.20
        version: 0.3.20(mysql2@3.11.5)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
    devDependencies:
      '@nestjs/cli':
        specifier: ^10.0.0
        version: 10.4.9
      '@nestjs/schematics':
        specifier: ^10.0.0
        version: 10.2.3(chokidar@3.6.0)(typescript@5.7.2)
      '@nestjs/testing':
        specifier: ^10.0.0
        version: 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15))
      '@types/express':
        specifier: ^4.17.17
        version: 4.17.21
      '@types/jest':
        specifier: ^29.5.2
        version: 29.5.14
      '@types/js-yaml':
        specifier: ^4.0.9
        version: 4.0.9
      '@types/node':
        specifier: ^20.3.1
        version: 20.17.10
      '@types/supertest':
        specifier: ^6.0.0
        version: 6.0.2
      '@typescript-eslint/eslint-plugin':
        specifier: ^7.0.0
        version: 7.18.0(@typescript-eslint/parser@7.18.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/parser':
        specifier: ^7.0.0
        version: 7.18.0(eslint@8.57.1)(typescript@5.7.2)
      eslint:
        specifier: ^8.42.0
        version: 8.57.1
      eslint-config-prettier:
        specifier: ^9.0.0
        version: 9.1.0(eslint@8.57.1)
      eslint-plugin-prettier:
        specifier: ^5.0.0
        version: 5.2.1(@types/eslint@9.6.1)(eslint-config-prettier@9.1.0(eslint@8.57.1))(eslint@8.57.1)(prettier@3.4.2)
      jest:
        specifier: ^29.5.0
        version: 29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      prettier:
        specifier: ^3.0.0
        version: 3.4.2
      prettier-plugin-organize-imports:
        specifier: ^4.1.0
        version: 4.1.0(prettier@3.4.2)(typescript@5.7.2)
      source-map-support:
        specifier: ^0.5.21
        version: 0.5.21
      supertest:
        specifier: ^7.0.0
        version: 7.0.0
      ts-jest:
        specifier: ^29.1.0
        version: 29.2.5(@babel/core@7.26.0)(@jest/transform@29.7.0)(@jest/types@29.6.3)(babel-jest@29.7.0(@babel/core@7.26.0))(jest@29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)))(typescript@5.7.2)
      ts-loader:
        specifier: ^9.4.3
        version: 9.5.1(typescript@5.7.2)(webpack@5.97.1)
      ts-node:
        specifier: ^10.9.1
        version: 10.9.2(@types/node@20.17.10)(typescript@5.7.2)
      tsconfig-paths:
        specifier: ^4.2.0
        version: 4.2.0
      typescript:
        specifier: ^5.1.3
        version: 5.7.2

packages:

  '@adraffy/ens-normalize@1.10.1':
    resolution: {integrity: sha512-96Z2IP3mYmF1Xg2cDm8f1gWGf/HUVedQ3FMifV4kG/PQ4yEP51xDtRAEfhVNt5f/uzpNkZHwWQuUcu6D6K+Ekw==}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@angular-devkit/core@17.3.11':
    resolution: {integrity: sha512-vTNDYNsLIWpYk2I969LMQFH29GTsLzxNk/0cLw5q56ARF0v5sIWfHYwGTS88jdDqIpuuettcSczbxeA7EuAmqQ==}
    engines: {node: ^18.13.0 || >=20.9.0, npm: ^6.11.0 || ^7.5.6 || >=8.0.0, yarn: '>= 1.13.0'}
    peerDependencies:
      chokidar: ^3.5.2
    peerDependenciesMeta:
      chokidar:
        optional: true

  '@angular-devkit/schematics-cli@17.3.11':
    resolution: {integrity: sha512-kcOMqp+PHAKkqRad7Zd7PbpqJ0LqLaNZdY1+k66lLWmkEBozgq8v4ASn/puPWf9Bo0HpCiK+EzLf0VHE8Z/y6Q==}
    engines: {node: ^18.13.0 || >=20.9.0, npm: ^6.11.0 || ^7.5.6 || >=8.0.0, yarn: '>= 1.13.0'}
    hasBin: true

  '@angular-devkit/schematics@17.3.11':
    resolution: {integrity: sha512-I5wviiIqiFwar9Pdk30Lujk8FczEEc18i22A5c6Z9lbmhPQdTroDnEQdsfXjy404wPe8H62s0I15o4pmMGfTYQ==}
    engines: {node: ^18.13.0 || >=20.9.0, npm: ^6.11.0 || ^7.5.6 || >=8.0.0, yarn: '>= 1.13.0'}

  '@babel/code-frame@7.26.2':
    resolution: {integrity: sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.26.3':
    resolution: {integrity: sha512-nHIxvKPniQXpmQLb0vhY3VaFb3S0YrTAwpOWJZh1wn3oJPjJk9Asva204PsBdmAE8vpzfHudT8DB0scYvy9q0g==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.26.0':
    resolution: {integrity: sha512-i1SLeK+DzNnQ3LL/CswPCa/E5u4lh1k6IAEphON8F+cXt0t9euTshDru0q7/IqMa1PMPz5RnHuHscF8/ZJsStg==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.26.3':
    resolution: {integrity: sha512-6FF/urZvD0sTeO7k6/B15pMLC4CHUv1426lzr3N01aHJTl046uCAh9LXW/fzeXXjPNCJ6iABW5XaWOsIZB93aQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.25.9':
    resolution: {integrity: sha512-j9Db8Suy6yV/VHa4qzrj9yZfZxhLWQdVnRlXxmKLYlhWUVB1sB2G5sxuWYXk/whHD9iW76PmNzxZ4UCnTQTVEQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.25.9':
    resolution: {integrity: sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.26.0':
    resolution: {integrity: sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-plugin-utils@7.25.9':
    resolution: {integrity: sha512-kSMlyUVdWe25rEsRGviIgOWnoT/nfABVWlqt9N19/dIPWViAOW2s9wznP5tURbs/IDuNk4gPy3YdYRgH3uxhBw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.25.9':
    resolution: {integrity: sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.25.9':
    resolution: {integrity: sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.25.9':
    resolution: {integrity: sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.26.0':
    resolution: {integrity: sha512-tbhNuIxNcVb21pInl3ZSjksLCvgdZy9KwJ8brv993QtIVKJBBkYXz4q4ZbAv31GdnC+R90np23L5FbEBlthAEw==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.26.3':
    resolution: {integrity: sha512-WJ/CvmY8Mea8iDXo6a7RK2wbmJITT5fN3BEkRuFlxVyNx8jOKIIhmC4fSkTcPcf8JyavbBwIe6OpiCOBXt/IcA==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-syntax-async-generators@7.8.4':
    resolution: {integrity: sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-bigint@7.8.3':
    resolution: {integrity: sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-class-properties@7.12.13':
    resolution: {integrity: sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-class-static-block@7.14.5':
    resolution: {integrity: sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-attributes@7.26.0':
    resolution: {integrity: sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-meta@7.10.4':
    resolution: {integrity: sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-json-strings@7.8.3':
    resolution: {integrity: sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-jsx@7.25.9':
    resolution: {integrity: sha512-ld6oezHQMZsZfp6pWtbjaNDF2tiiCYYDqQszHt5VV437lewP9aSi2Of99CK0D0XB21k7FLgnLcmQKyKzynfeAA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4':
    resolution: {integrity: sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3':
    resolution: {integrity: sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-numeric-separator@7.10.4':
    resolution: {integrity: sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-object-rest-spread@7.8.3':
    resolution: {integrity: sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-catch-binding@7.8.3':
    resolution: {integrity: sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-chaining@7.8.3':
    resolution: {integrity: sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-private-property-in-object@7.14.5':
    resolution: {integrity: sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-top-level-await@7.14.5':
    resolution: {integrity: sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-typescript@7.25.9':
    resolution: {integrity: sha512-hjMgRy5hb8uJJjUcdWunWVcoi9bGpJp8p5Ol1229PoN6aytsLwNMgmdftO23wnCLMfVmTwZDWMPNq/D1SY60JQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/template@7.25.9':
    resolution: {integrity: sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.26.4':
    resolution: {integrity: sha512-fH+b7Y4p3yqvApJALCPJcwb0/XaOSgtK4pzV6WVjPR5GLFQBRI7pfoX2V2iM48NXvX07NUxxm1Vw98YjqTcU5w==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.26.3':
    resolution: {integrity: sha512-vN5p+1kl59GVKMvTHt55NzzmYVxprfJD+ql7U9NFIfKCBkYE55LYtS+WtPlaYOyzydrKI8Nezd+aZextrd+FMA==}
    engines: {node: '>=6.9.0'}

  '@bcoe/v8-coverage@0.2.3':
    resolution: {integrity: sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==}

  '@ckb-ccc/core@1.3.1':
    resolution: {integrity: sha512-av9d+bGsCauwr5CAckyKwmGofGeDMC7PAJPVz0weeHNYgkqIf0pbYyMMDya8NAFmwNgESptBN3skkVPo8HfdCg==}

  '@ckb-ccc/core@1.4.0':
    resolution: {integrity: sha512-uM27KxTPhdDke0c5j/ENbBLPnEwehgIL5Y831kIlYIqqX9Vlw1afdaBt3vaCCKoDXY20m779sMgwtWl4Kka1kw==}

  '@ckb-ccc/shell@1.1.1':
    resolution: {integrity: sha512-jtfsgy6rg8zr4pVGbSnvlNIm5NQB01wC9gbOww4zHi7+ojhgKADuEOpRCeoRWiCYxTCXqcylSZ0QDpHh0T7p6Q==}

  '@ckb-ccc/spore@1.1.1':
    resolution: {integrity: sha512-zkSj0UEWHGgMkD/8opIqyh+aMokN7GjnUknFU7zY512kA8w92w+Uq5frSsQBcnOzENR6wf0si0TVnW5rwGXQ+Q==}

  '@ckb-ccc/spore@1.2.0':
    resolution: {integrity: sha512-i/8WYbN3JAus8ER93JylHGL9sGeGHfs2+XpmxqkC5m2ZnrXkIwzVCGimyq5KCTXD/+8pT5lqGaLo7HM1/jhowg==}

  '@ckb-ccc/ssri@0.1.1':
    resolution: {integrity: sha512-yslvnZzscOqcExBBgaansZaKfn5sVd+QCNzWl103Re8ZKNpH+2KdQEZVMV/g4q7pFPS7Ylc33izRp/dVa4lumA==}

  '@ckb-ccc/udt@0.1.1':
    resolution: {integrity: sha512-krWku7NM21rHJ1P1rX0uxxBlA1fAYucTa8J9sucWnsGvt6DeYHtZfHMHfG8vJA1gNfae0qjE6ZkXVmBkeo5IFg==}

  '@colors/colors@1.5.0':
    resolution: {integrity: sha512-ooWCrlZP11i8GImSjTHYHLkvFDP48nS4+204nGb1RiX/WXYHmJA2III9/e2DWVabCESdW7hBAEzHRqUn9OUVvQ==}
    engines: {node: '>=0.1.90'}

  '@cspotcode/source-map-support@0.8.1':
    resolution: {integrity: sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==}
    engines: {node: '>=12'}

  '@eslint-community/eslint-utils@4.4.1':
    resolution: {integrity: sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/eslintrc@2.1.4':
    resolution: {integrity: sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@eslint/js@8.57.1':
    resolution: {integrity: sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@humanwhocodes/config-array@0.13.0':
    resolution: {integrity: sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==}
    engines: {node: '>=10.10.0'}
    deprecated: Use @eslint/config-array instead

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/object-schema@2.0.3':
    resolution: {integrity: sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==}
    deprecated: Use @eslint/object-schema instead

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@istanbuljs/load-nyc-config@1.1.0':
    resolution: {integrity: sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==}
    engines: {node: '>=8'}

  '@istanbuljs/schema@0.1.3':
    resolution: {integrity: sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==}
    engines: {node: '>=8'}

  '@jest/console@29.7.0':
    resolution: {integrity: sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/core@29.7.0':
    resolution: {integrity: sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/environment@29.7.0':
    resolution: {integrity: sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect-utils@29.7.0':
    resolution: {integrity: sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect@29.7.0':
    resolution: {integrity: sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/fake-timers@29.7.0':
    resolution: {integrity: sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/globals@29.7.0':
    resolution: {integrity: sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/reporters@29.7.0':
    resolution: {integrity: sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/schemas@29.6.3':
    resolution: {integrity: sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/source-map@29.6.3':
    resolution: {integrity: sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-result@29.7.0':
    resolution: {integrity: sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-sequencer@29.7.0':
    resolution: {integrity: sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/transform@29.7.0':
    resolution: {integrity: sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/types@29.6.3':
    resolution: {integrity: sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@joyid/ckb@1.1.0':
    resolution: {integrity: sha512-idexvr4sY28ij1RfVkIZ46EVbeOqnmrxsWj1YV6H/AAv+tM/fT2ODh3ETaN4EE0FRvJMulZppMXPDiPVuiVBUg==}

  '@joyid/common@0.2.0':
    resolution: {integrity: sha512-WBZtgdEccWxjiGHIoDgRFIbnC42ZvmfvFRCTxmx9D4BLvtiFdhAa+g70lUmiHwO28GjgHIHgzHRGNRdLuk81xw==}

  '@jridgewell/gen-mapping@0.3.8':
    resolution: {integrity: sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/source-map@0.3.6':
    resolution: {integrity: sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@jridgewell/trace-mapping@0.3.9':
    resolution: {integrity: sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==}

  '@ljharb/through@2.3.13':
    resolution: {integrity: sha512-/gKJun8NNiWGZJkGzI/Ragc53cOdcLNdzjLaIa+GEjguQs0ulsurx8WN0jijdK9yPqDvziX995sMRLyLt1uZMQ==}
    engines: {node: '>= 0.4'}

  '@lukeed/csprng@1.1.0':
    resolution: {integrity: sha512-Z7C/xXCiGWsg0KuKsHTKJxbWhpI3Vs5GwLfOean7MGyVFGqdRgBbAjOCh6u4bbjPc/8MJ2pZmK/0DLdCbivLDA==}
    engines: {node: '>=8'}

  '@microsoft/tsdoc@0.15.1':
    resolution: {integrity: sha512-4aErSrCR/On/e5G2hDP0wjooqDdauzEbIq8hIkIe5pXV0rtWJZvdCEKL0ykZxex+IxIwBp0eGeV48hQN07dXtw==}

  '@nervosnetwork/ckb-sdk-utils@0.109.4':
    resolution: {integrity: sha512-Td/vGKHMQ2zxumt1ViFLqMGBws/G2j5XvcOdXAqhKV4vKIdzhmR18ve6fNhdIjE7xGWH5bHO/dbXVbgVGUsPNQ==}

  '@nervosnetwork/ckb-types@0.109.4':
    resolution: {integrity: sha512-paA5URfnR58enL3OvT/Bv0ZuQpAZGlk5pjvzly4Q/pkRAeJVA0ks94zf4y8hTcvBCjSlEG8KCt0fI4r/sAylTg==}

  '@nestjs/cli@10.4.9':
    resolution: {integrity: sha512-s8qYd97bggqeK7Op3iD49X2MpFtW4LVNLAwXFkfbRxKME6IYT7X0muNTJ2+QfI8hpbNx9isWkrLWIp+g5FOhiA==}
    engines: {node: '>= 16.14'}
    hasBin: true
    peerDependencies:
      '@swc/cli': ^0.1.62 || ^0.3.0 || ^0.4.0 || ^0.5.0
      '@swc/core': ^1.3.62
    peerDependenciesMeta:
      '@swc/cli':
        optional: true
      '@swc/core':
        optional: true

  '@nestjs/common@10.4.15':
    resolution: {integrity: sha512-vaLg1ZgwhG29BuLDxPA9OAcIlgqzp9/N8iG0wGapyUNTf4IY4O6zAHgN6QalwLhFxq7nOI021vdRojR1oF3bqg==}
    peerDependencies:
      class-transformer: '*'
      class-validator: '*'
      reflect-metadata: ^0.1.12 || ^0.2.0
      rxjs: ^7.1.0
    peerDependenciesMeta:
      class-transformer:
        optional: true
      class-validator:
        optional: true

  '@nestjs/config@3.3.0':
    resolution: {integrity: sha512-pdGTp8m9d0ZCrjTpjkUbZx6gyf2IKf+7zlkrPNMsJzYZ4bFRRTpXrnj+556/5uiI6AfL5mMrJc2u7dB6bvM+VA==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      rxjs: ^7.1.0

  '@nestjs/core@10.4.15':
    resolution: {integrity: sha512-UBejmdiYwaH6fTsz2QFBlC1cJHM+3UDeLZN+CiP9I1fRv2KlBZsmozGLbV5eS1JAVWJB4T5N5yQ0gjN8ZvcS2w==}
    peerDependencies:
      '@nestjs/common': ^10.0.0
      '@nestjs/microservices': ^10.0.0
      '@nestjs/platform-express': ^10.0.0
      '@nestjs/websockets': ^10.0.0
      reflect-metadata: ^0.1.12 || ^0.2.0
      rxjs: ^7.1.0
    peerDependenciesMeta:
      '@nestjs/microservices':
        optional: true
      '@nestjs/platform-express':
        optional: true
      '@nestjs/websockets':
        optional: true

  '@nestjs/mapped-types@2.0.6':
    resolution: {integrity: sha512-84ze+CPfp1OWdpRi1/lOu59hOhTz38eVzJvRKrg9ykRFwDz+XleKfMsG0gUqNZYFa6v53XYzeD+xItt8uDW7NQ==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      class-transformer: ^0.4.0 || ^0.5.0
      class-validator: ^0.13.0 || ^0.14.0
      reflect-metadata: ^0.1.12 || ^0.2.0
    peerDependenciesMeta:
      class-transformer:
        optional: true
      class-validator:
        optional: true

  '@nestjs/platform-express@10.4.15':
    resolution: {integrity: sha512-63ZZPkXHjoDyO7ahGOVcybZCRa7/Scp6mObQKjcX/fTEq1YJeU75ELvMsuQgc8U2opMGOBD7GVuc4DV0oeDHoA==}
    peerDependencies:
      '@nestjs/common': ^10.0.0
      '@nestjs/core': ^10.0.0

  '@nestjs/schematics@10.2.3':
    resolution: {integrity: sha512-4e8gxaCk7DhBxVUly2PjYL4xC2ifDFexCqq1/u4TtivLGXotVk0wHdYuPYe1tHTHuR1lsOkRbfOCpkdTnigLVg==}
    peerDependencies:
      typescript: '>=4.8.2'

  '@nestjs/swagger@8.1.0':
    resolution: {integrity: sha512-8hzH+r/31XshzXHC9vww4T0xjDAxMzvOaT1xAOvvY1LtXTWyNRCUP2iQsCYJOnnMrR+vydWjvRZiuB3hdvaHxA==}
    peerDependencies:
      '@fastify/static': ^6.0.0 || ^7.0.0
      '@nestjs/common': ^9.0.0 || ^10.0.0
      '@nestjs/core': ^9.0.0 || ^10.0.0
      class-transformer: '*'
      class-validator: '*'
      reflect-metadata: ^0.1.12 || ^0.2.0
    peerDependenciesMeta:
      '@fastify/static':
        optional: true
      class-transformer:
        optional: true
      class-validator:
        optional: true

  '@nestjs/testing@10.4.15':
    resolution: {integrity: sha512-eGlWESkACMKti+iZk1hs6FUY/UqObmMaa8HAN9JLnaYkoLf1Jeh+EuHlGnfqo/Rq77oznNLIyaA3PFjrFDlNUg==}
    peerDependencies:
      '@nestjs/common': ^10.0.0
      '@nestjs/core': ^10.0.0
      '@nestjs/microservices': ^10.0.0
      '@nestjs/platform-express': ^10.0.0
    peerDependenciesMeta:
      '@nestjs/microservices':
        optional: true
      '@nestjs/platform-express':
        optional: true

  '@nestjs/typeorm@10.0.2':
    resolution: {integrity: sha512-H738bJyydK4SQkRCTeh1aFBxoO1E9xdL/HaLGThwrqN95os5mEyAtK7BLADOS+vldP4jDZ2VQPLj4epWwRqCeQ==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/core': ^8.0.0 || ^9.0.0 || ^10.0.0
      reflect-metadata: ^0.1.13 || ^0.2.0
      rxjs: ^7.2.0
      typeorm: ^0.3.0

  '@noble/ciphers@0.5.3':
    resolution: {integrity: sha512-B0+6IIHiqEs3BPMT0hcRmHvEj2QHOLu+uwt+tqDDeVd0oyVzh7BPrDcPjRnV1PV/5LaknXJJQvOuRGR0zQJz+w==}

  '@noble/curves@1.2.0':
    resolution: {integrity: sha512-oYclrNgRaM9SsBUBVbb8M6DTV7ZHRTKugureoYEncY5c65HOmRzvSiTE3y5CYaPYJA/GVkrhXEoF0M3Ya9PMnw==}

  '@noble/curves@1.7.0':
    resolution: {integrity: sha512-UTMhXK9SeDhFJVrHeUJ5uZlI6ajXg10O6Ddocf9S6GjbSBVZsJo88HzKwXznNfGpMTRDyJkqMjNDPYgf0qFWnw==}
    engines: {node: ^14.21.3 || >=16}

  '@noble/hashes@1.3.2':
    resolution: {integrity: sha512-MVC8EAQp7MvEcm30KWENFjgR+Mkmf+D189XJTkFIlwohU5hcBbn1ZkKq7KVTi2Hme3PMGF390DaL52beVrIihQ==}
    engines: {node: '>= 16'}

  '@noble/hashes@1.6.0':
    resolution: {integrity: sha512-YUULf0Uk4/mAA89w+k3+yUYh6NrEvxZa5T6SY3wlMvE2chHkxFUUIDI8/XW1QSC357iA5pSnqt7XEhvFOqmDyQ==}
    engines: {node: ^14.21.3 || >=16}

  '@noble/hashes@1.6.1':
    resolution: {integrity: sha512-pq5D8h10hHBjyqX+cfBm0i8JUXJ0UhczFc4r74zbuT9XgewFo2E3J1cOaGtdZynILNmQ685YWGzGE1Zv6io50w==}
    engines: {node: ^14.21.3 || >=16}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nuxtjs/opencollective@0.3.2':
    resolution: {integrity: sha512-um0xL3fO7Mf4fDxcqx9KryrB7zgRM5JSlvGN5AGkP6JLM5XEKyjeAiPbNxdXVXQ16isuAhYpvP88NgL2BGd6aA==}
    engines: {node: '>=8.0.0', npm: '>=5.0.0'}
    hasBin: true

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@pkgr/core@0.1.1':
    resolution: {integrity: sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==}
    engines: {node: ^12.20.0 || ^14.18.0 || >=16.0.0}

  '@scarf/scarf@1.4.0':
    resolution: {integrity: sha512-xxeapPiUXdZAE3che6f3xogoJPeZgig6omHEy1rIY5WVsB3H2BHNnZH+gHG6x91SCWyQCzWGsuL2Hh3ClO5/qQ==}

  '@scure/base@1.2.1':
    resolution: {integrity: sha512-DGmGtC8Tt63J5GfHgfl5CuAXh96VF/LD8K9Hr/Gv0J2lAoRGlPOMpqMpMbCTOoOJMZCk2Xt+DskdDyn6dEFdzQ==}

  '@scure/bip32@1.6.0':
    resolution: {integrity: sha512-82q1QfklrUUdXJzjuRU7iG7D7XiFx5PHYVS0+oeNKhyDLT7WPqs6pBcM2W5ZdwOwKCwoE1Vy1se+DHjcXwCYnA==}

  '@scure/bip39@1.5.0':
    resolution: {integrity: sha512-Dop+ASYhnrwm9+HA/HwXg7j2ZqM6yk2fyLWb5znexjctFY3+E+eU8cIWI0Pql0Qx4hPZCijlGq4OL71g+Uz30A==}

  '@sinclair/typebox@0.27.8':
    resolution: {integrity: sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==}

  '@sinonjs/commons@3.0.1':
    resolution: {integrity: sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==}

  '@sinonjs/fake-timers@10.3.0':
    resolution: {integrity: sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==}

  '@sqltools/formatter@1.2.5':
    resolution: {integrity: sha512-Uy0+khmZqUrUGm5dmMqVlnvufZRSK0FbYzVgp0UMstm+F5+W2/jnEEQyc9vo1ZR/E5ZI/B1WjjoTqBqwJL6Krw==}

  '@tsconfig/node10@1.0.11':
    resolution: {integrity: sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==}

  '@tsconfig/node12@1.0.11':
    resolution: {integrity: sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==}

  '@tsconfig/node14@1.0.3':
    resolution: {integrity: sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==}

  '@tsconfig/node16@1.0.4':
    resolution: {integrity: sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==}

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.6.8':
    resolution: {integrity: sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.6':
    resolution: {integrity: sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==}

  '@types/body-parser@1.19.5':
    resolution: {integrity: sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==}

  '@types/connect@3.4.38':
    resolution: {integrity: sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==}

  '@types/cookiejar@2.1.5':
    resolution: {integrity: sha512-he+DHOWReW0nghN24E1WUqM0efK4kI9oTqDm6XmK8ZPe2djZ90BSNdGnIyCLzCPw7/pogPlGbzI2wHGGmi4O/Q==}

  '@types/eslint-scope@3.7.7':
    resolution: {integrity: sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==}

  '@types/eslint@9.6.1':
    resolution: {integrity: sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==}

  '@types/estree@1.0.6':
    resolution: {integrity: sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==}

  '@types/express-serve-static-core@4.19.6':
    resolution: {integrity: sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==}

  '@types/express@4.17.21':
    resolution: {integrity: sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==}

  '@types/graceful-fs@4.1.9':
    resolution: {integrity: sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==}

  '@types/http-errors@2.0.4':
    resolution: {integrity: sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==}

  '@types/istanbul-lib-coverage@2.0.6':
    resolution: {integrity: sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==}

  '@types/istanbul-lib-report@3.0.3':
    resolution: {integrity: sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==}

  '@types/istanbul-reports@3.0.4':
    resolution: {integrity: sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==}

  '@types/jest@29.5.14':
    resolution: {integrity: sha512-ZN+4sdnLUbo8EVvVc2ao0GFW6oVrQRPn4K2lglySj7APvSrgzxHiNNK99us4WDMi57xxA2yggblIAMNhXOotLQ==}

  '@types/js-yaml@4.0.9':
    resolution: {integrity: sha512-k4MGaQl5TGo/iipqb2UDG2UwjXziSWkh0uysQelTlJpX1qGlpUZYm8PnO4DxG1qBomtJUdYJ6qR6xdIah10JLg==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/methods@1.1.4':
    resolution: {integrity: sha512-ymXWVrDiCxTBE3+RIrrP533E70eA+9qu7zdWoHuOmGujkYtzf4HQF96b8nwHLqhuf4ykX61IGRIB38CC6/sImQ==}

  '@types/mime@1.3.5':
    resolution: {integrity: sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==}

  '@types/node@20.17.10':
    resolution: {integrity: sha512-/jrvh5h6NXhEauFFexRin69nA0uHJ5gwk4iDivp/DeoEua3uwCUto6PC86IpRITBOs4+6i2I56K5x5b6WYGXHA==}

  '@types/node@22.7.5':
    resolution: {integrity: sha512-jML7s2NAzMWc//QSJ1a3prpk78cOPchGvXJsC3C6R6PSMoooztvRVQEz89gmBTBY1SPMaqo5teB4uNHPdetShQ==}

  '@types/qs@6.9.17':
    resolution: {integrity: sha512-rX4/bPcfmvxHDv0XjfJELTTr+iB+tn032nPILqHm5wbthUUUuVtNGGqzhya9XUxjTP8Fpr0qYgSZZKxGY++svQ==}

  '@types/range-parser@1.2.7':
    resolution: {integrity: sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==}

  '@types/send@0.17.4':
    resolution: {integrity: sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==}

  '@types/serve-static@1.15.7':
    resolution: {integrity: sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==}

  '@types/stack-utils@2.0.3':
    resolution: {integrity: sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==}

  '@types/superagent@8.1.9':
    resolution: {integrity: sha512-pTVjI73witn+9ILmoJdajHGW2jkSaOzhiFYF1Rd3EQ94kymLqB9PjD9ISg7WaALC7+dCHT0FGe9T2LktLq/3GQ==}

  '@types/supertest@6.0.2':
    resolution: {integrity: sha512-137ypx2lk/wTQbW6An6safu9hXmajAifU/s7szAHLN/FeIm5w7yR0Wkl9fdJMRSHwOn4HLAI0DaB2TOORuhPDg==}

  '@types/validator@13.12.2':
    resolution: {integrity: sha512-6SlHBzUW8Jhf3liqrGGXyTJSIFe4nqlJ5A5KaMZ2l/vbM3Wh3KSybots/wfWVzNLK4D1NZluDlSQIbIEPx6oyA==}

  '@types/yargs-parser@21.0.3':
    resolution: {integrity: sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==}

  '@types/yargs@17.0.33':
    resolution: {integrity: sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==}

  '@typescript-eslint/eslint-plugin@7.18.0':
    resolution: {integrity: sha512-94EQTWZ40mzBc42ATNIBimBEDltSJ9RQHCC8vc/PDbxi4k8dVwUAv4o98dk50M1zB+JGFxp43FP7f8+FP8R6Sw==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      '@typescript-eslint/parser': ^7.0.0
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@7.18.0':
    resolution: {integrity: sha512-4Z+L8I2OqhZV8qA132M4wNL30ypZGYOQVBfMgxDH/K5UX0PNqTu1c6za9ST5r9+tavvHiTWmBnKzpCJ/GlVFtg==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/scope-manager@7.18.0':
    resolution: {integrity: sha512-jjhdIE/FPF2B7Z1uzc6i3oWKbGcHb87Qw7AWj6jmEqNOfDFbJWtjt/XfwCpvNkpGWlcJaog5vTR+VV8+w9JflA==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@typescript-eslint/type-utils@7.18.0':
    resolution: {integrity: sha512-XL0FJXuCLaDuX2sYqZUUSOJ2sG5/i1AAze+axqmLnSkNEVMVYLF+cbwlB2w8D1tinFuSikHmFta+P+HOofrLeA==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/types@7.18.0':
    resolution: {integrity: sha512-iZqi+Ds1y4EDYUtlOOC+aUmxnE9xS/yCigkjA7XpTKV6nCBd3Hp/PRGGmdwnfkV2ThMyYldP1wRpm/id99spTQ==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@typescript-eslint/typescript-estree@7.18.0':
    resolution: {integrity: sha512-aP1v/BSPnnyhMHts8cf1qQ6Q1IFwwRvAQGRvBFkWlo3/lH29OXA3Pts+c10nxRxIBrDnoMqzhgdwVe5f2D6OzA==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/utils@7.18.0':
    resolution: {integrity: sha512-kK0/rNa2j74XuHVcoCZxdFBMF+aq/vH83CXAOHieC+2Gis4mF8jJXT5eAfyD3K0sAxtPuwxaIOIOvhwzVDt/kw==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0

  '@typescript-eslint/visitor-keys@7.18.0':
    resolution: {integrity: sha512-cDF0/Gf81QpY3xYyJKDV14Zwdmid5+uuENhjH2EqFaF0ni+yAyq/LzMaIJdhNJXZI7uLzwIlA+V7oWoyn6Curg==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@ungap/structured-clone@1.2.1':
    resolution: {integrity: sha512-fEzPV3hSkSMltkw152tJKNARhOupqbH96MZWyRjNaYZOMIzbrTeQDG+MTc6Mr2pgzFQzFxAfmhGDNP5QK++2ZA==}

  '@webassemblyjs/ast@1.14.1':
    resolution: {integrity: sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==}

  '@webassemblyjs/floating-point-hex-parser@1.13.2':
    resolution: {integrity: sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==}

  '@webassemblyjs/helper-api-error@1.13.2':
    resolution: {integrity: sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==}

  '@webassemblyjs/helper-buffer@1.14.1':
    resolution: {integrity: sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==}

  '@webassemblyjs/helper-numbers@1.13.2':
    resolution: {integrity: sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==}

  '@webassemblyjs/helper-wasm-bytecode@1.13.2':
    resolution: {integrity: sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==}

  '@webassemblyjs/helper-wasm-section@1.14.1':
    resolution: {integrity: sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==}

  '@webassemblyjs/ieee754@1.13.2':
    resolution: {integrity: sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==}

  '@webassemblyjs/leb128@1.13.2':
    resolution: {integrity: sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==}

  '@webassemblyjs/utf8@1.13.2':
    resolution: {integrity: sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==}

  '@webassemblyjs/wasm-edit@1.14.1':
    resolution: {integrity: sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==}

  '@webassemblyjs/wasm-gen@1.14.1':
    resolution: {integrity: sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==}

  '@webassemblyjs/wasm-opt@1.14.1':
    resolution: {integrity: sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==}

  '@webassemblyjs/wasm-parser@1.14.1':
    resolution: {integrity: sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==}

  '@webassemblyjs/wast-printer@1.14.1':
    resolution: {integrity: sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==}

  '@xtuc/ieee754@1.2.0':
    resolution: {integrity: sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==}

  '@xtuc/long@4.2.2':
    resolution: {integrity: sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==}

  abitype@0.8.7:
    resolution: {integrity: sha512-wQ7hV8Yg/yKmGyFpqrNZufCxbszDe5es4AZGYPBitocfSqXtjrTG9JMWFcc4N30ukl2ve48aBTwt7NJxVQdU3w==}
    peerDependencies:
      typescript: '>=5.0.4'
      zod: ^3 >=3.19.1
    peerDependenciesMeta:
      zod:
        optional: true

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  accepts@1.3.8:
    resolution: {integrity: sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==}
    engines: {node: '>= 0.6'}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn-walk@8.3.4:
    resolution: {integrity: sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==}
    engines: {node: '>=0.4.0'}

  acorn@8.14.0:
    resolution: {integrity: sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  aes-js@4.0.0-beta.5:
    resolution: {integrity: sha512-G965FqalsNyrPqgEGON7nIx1e/OVENSgiEIzyC63haUMuvNnwIgIjMs52hlTCKhkBny7A2ORNlfY9Zu+jmGk1Q==}

  ajv-formats@2.1.1:
    resolution: {integrity: sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-keywords@3.5.2:
    resolution: {integrity: sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==}
    peerDependencies:
      ajv: ^6.9.1

  ajv-keywords@5.1.0:
    resolution: {integrity: sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==}
    peerDependencies:
      ajv: ^8.8.2

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ajv@8.12.0:
    resolution: {integrity: sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==}

  ajv@8.17.1:
    resolution: {integrity: sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==}

  ansi-colors@4.1.3:
    resolution: {integrity: sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==}
    engines: {node: '>=6'}

  ansi-escapes@4.3.2:
    resolution: {integrity: sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==}
    engines: {node: '>=8'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  app-root-path@3.1.0:
    resolution: {integrity: sha512-biN3PwB2gUtjaYy/isrU3aNWI5w+fAfvHkSvCKeQGxhmYpwKFUxudR3Yya+KqVRHBmEDYh+/lTozYCFbmzX4nA==}
    engines: {node: '>= 6.0.0'}

  append-field@1.0.0:
    resolution: {integrity: sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==}

  arg@4.1.3:
    resolution: {integrity: sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==}

  argparse@1.0.10:
    resolution: {integrity: sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  array-flatten@1.1.1:
    resolution: {integrity: sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==}

  array-timsort@1.0.3:
    resolution: {integrity: sha512-/+3GRL7dDAGEfM6TseQk/U+mi18TU2Ms9I3UlLdUMhz2hbvGNTKdj9xniwXfUqgYhHxRx0+8UnKkvlNwVU+cWQ==}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  asap@2.0.6:
    resolution: {integrity: sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==}

  async@3.2.6:
    resolution: {integrity: sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  aws-ssl-profiles@1.1.2:
    resolution: {integrity: sha512-NZKeq9AfyQvEeNlN0zSYAaWrmBffJh3IELMZfRpJVWgrpEbtEpnjvzqBPf+mxoI287JohRDoa+/nsfqqiZmF6g==}
    engines: {node: '>= 6.0.0'}

  axios@1.7.9:
    resolution: {integrity: sha512-LhLcE7Hbiryz8oMDdDptSrWowmB4Bl6RCt6sIJKpRB4XtVf0iEgewX3au/pJqm+Py1kCASkb/FFKjxQaLtxJvw==}

  babel-jest@29.7.0:
    resolution: {integrity: sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.8.0

  babel-plugin-istanbul@6.1.1:
    resolution: {integrity: sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==}
    engines: {node: '>=8'}

  babel-plugin-jest-hoist@29.6.3:
    resolution: {integrity: sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  babel-preset-current-node-syntax@1.1.0:
    resolution: {integrity: sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==}
    peerDependencies:
      '@babel/core': ^7.0.0

  babel-preset-jest@29.6.3:
    resolution: {integrity: sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.0.0

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base-x@3.0.10:
    resolution: {integrity: sha512-7d0s06rR9rYaIWHkpfLIFICM/tkSVdoPC9qYAQRpxn9DdKNWNsKC0uk++akckyLq16Tx2WIinnZ6WRriAt6njQ==}

  base-x@5.0.0:
    resolution: {integrity: sha512-sMW3VGSX1QWVFA6l8U62MLKz29rRfpTlYdCqLdpLo1/Yd4zZwSbnUaDfciIAowAqvq7YFnWq9hrhdg1KYgc1lQ==}

  base58-js@1.0.5:
    resolution: {integrity: sha512-LkkAPP8Zu+c0SVNRTRVDyMfKVORThX+rCViget00xdgLRrKkClCTz1T7cIrpr69ShwV5XJuuoZvMvJ43yURwkA==}
    engines: {node: '>= 8'}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  bech32@1.1.4:
    resolution: {integrity: sha512-s0IrSOzLlbvX7yp4WBfPITzpAU8sqQcpsmwXDiKwrG4r491vwCO/XpejasRNl0piBMe/DvP4Tz0mIS/X1DPJBQ==}

  bech32@2.0.0:
    resolution: {integrity: sha512-LcknSilhIGatDAsY1ak2I8VtGaHNhgMSYVxFrGLXv+xLHytaKZKcaUJJUE7qmBr7h33o5YQwP55pMI0xmkpJwg==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  bindings@1.5.0:
    resolution: {integrity: sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==}

  bip66@1.1.5:
    resolution: {integrity: sha512-nemMHz95EmS38a26XbbdxIYj5csHd3RMP3H5bwQknX0WYHF01qhpufP42mLOwVICuH2JmhIhXiWs89MfUGL7Xw==}

  bitcoin-address-validation@2.2.3:
    resolution: {integrity: sha512-1uGCGl26Ye8JG5qcExtFLQfuib6qEZWNDo1ZlLlwp/z7ygUFby3IxolgEfgMGaC+LG9csbVASLcH8fRLv7DIOg==}

  bitcoinjs-message@2.2.0:
    resolution: {integrity: sha512-103Wy3xg8Y9o+pdhGP4M3/mtQQuUWs6sPuOp1mYphSUoSMHjHTlkj32K4zxU8qMH0Ckv23emfkGlFWtoWZ7YFA==}
    engines: {node: '>=0.10'}

  bl@4.1.0:
    resolution: {integrity: sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==}

  bn.js@4.12.1:
    resolution: {integrity: sha512-k8TVBiPkPJT9uHLdOKfFpqcfprwBFOAAXXozRubr7R7PfIuKvQlzcI4M0pALeqXN09vdaMbUdUj+pass+uULAg==}

  body-parser@1.20.3:
    resolution: {integrity: sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  brorand@1.1.0:
    resolution: {integrity: sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==}

  browserify-aes@1.2.0:
    resolution: {integrity: sha512-+7CHXqGuspUn/Sl5aO7Ea0xWGAtETPXNSAjHo48JfLdPWcMng33Xe4znFvQweqc/uzk5zSOI3H52CYnjCfb5hA==}

  browserslist@4.24.3:
    resolution: {integrity: sha512-1CPmv8iobE2fyRMV97dAcMVegvvWKxmq94hkLiAkUGwKVTyDLw33K+ZxiFrREKmmps4rIw6grcCFCnTMSZ/YiA==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  bs-logger@0.2.6:
    resolution: {integrity: sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==}
    engines: {node: '>= 6'}

  bs58@4.0.1:
    resolution: {integrity: sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==}

  bs58@6.0.0:
    resolution: {integrity: sha512-PD0wEnEYg6ijszw/u8s+iI3H17cTymlrwkKhDhPZq+Sokl3AU4htyBFTjAeNAlCCmg0f53g6ih3jATyCKftTfw==}

  bs58check@2.1.2:
    resolution: {integrity: sha512-0TS1jicxdU09dwJMNZtVAfzPi6Q6QeN0pM1Fkzrjn+XYHvzMKPU3pHVpva+769iNVSfIYWf7LJ6WR+BuuMf8cA==}

  bs58check@4.0.0:
    resolution: {integrity: sha512-FsGDOnFg9aVI9erdriULkd/JjEWONV/lQE5aYziB5PoBsXRind56lh8doIZIc9X4HoxT5x4bLjMWN1/NB8Zp5g==}

  bser@2.1.1:
    resolution: {integrity: sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==}

  buffer-equals@1.0.4:
    resolution: {integrity: sha512-99MsCq0j5+RhubVEtKQgKaD6EM+UP3xJgIvQqwJ3SOLDUekzxMX1ylXBng+Wa2sh7mGT0W6RUly8ojjr1Tt6nA==}
    engines: {node: '>=0.10.0'}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  buffer-xor@1.0.3:
    resolution: {integrity: sha512-571s0T7nZWK6vB67HI5dyUF7wXiNcfaPPPTl6zYCNApANjIvYJTg7hlud/+cJpdAhS7dVzqMLmfhfHR3rAcOjQ==}

  buffer@5.7.1:
    resolution: {integrity: sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==}

  buffer@6.0.3:
    resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  bytes@3.1.2:
    resolution: {integrity: sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==}
    engines: {node: '>= 0.8'}

  call-bind-apply-helpers@1.0.1:
    resolution: {integrity: sha512-BhYE+WDaywFg2TBWYNXAE+8B1ATnThNBqXHP5nQu0jWJdVvY2hvkpyB3qOmtmDePiS5/BDQ8wASEWGMWRG148g==}
    engines: {node: '>= 0.4'}

  call-bind@1.0.8:
    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.3:
    resolution: {integrity: sha512-YTd+6wGlNlPxSuri7Y6X8tY2dmm12UMH66RpKMhiX6rsk5wXXnYgbUcOt8kiS31/AjfoTOvCsE+w8nZQLQnzHA==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase@5.3.1:
    resolution: {integrity: sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==}
    engines: {node: '>=6'}

  camelcase@6.3.0:
    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
    engines: {node: '>=10'}

  caniuse-lite@1.0.30001690:
    resolution: {integrity: sha512-5ExiE3qQN6oF8Clf8ifIDcMRCRE/dMGcETG/XGMD8/XiXm6HXQgQTh1yZYLXXpSOsEUlJm1Xr7kGULZTuGtP/w==}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.4.0:
    resolution: {integrity: sha512-ZkD35Mx92acjB2yNJgziGqT9oKHEOxjTBTDRpOsRWtdecL/0jM3z5kM/CTzHWvHIen1GvkM85p6TuFfDGfc8/Q==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  char-regex@1.0.2:
    resolution: {integrity: sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==}
    engines: {node: '>=10'}

  chardet@0.7.0:
    resolution: {integrity: sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  chrome-trace-event@1.0.4:
    resolution: {integrity: sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==}
    engines: {node: '>=6.0'}

  ci-info@3.9.0:
    resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}
    engines: {node: '>=8'}

  cipher-base@1.0.6:
    resolution: {integrity: sha512-3Ek9H3X6pj5TgenXYtNWdaBon1tgYCaebd+XPg0keyjEbEfkD4KkmAxkQ/i1vYvxdcT5nscLBfq9VJRmCBcFSw==}
    engines: {node: '>= 0.10'}

  cjs-module-lexer@1.4.1:
    resolution: {integrity: sha512-cuSVIHi9/9E/+821Qjdvngor+xpnlwnuwIyZOaLmHBVdXL+gP+I6QQB9VkO7RI77YIcTV+S1W9AreJ5eN63JBA==}

  class-transformer@0.5.1:
    resolution: {integrity: sha512-SQa1Ws6hUbfC98vKGxZH3KFY0Y1lm5Zm0SY8XX9zbK7FJCyVEac3ATW0RIpwzW+oOfmHE5PMPufDG9hCfoEOMw==}

  class-validator@0.14.1:
    resolution: {integrity: sha512-2VEG9JICxIqTpoK1eMzZqaV+u/EiwEJkMGzTrZf6sU/fwsnOITVgYJ8yojSy6CaXtO9V0Cc6ZQZ8h8m4UBuLwQ==}

  cli-cursor@3.1.0:
    resolution: {integrity: sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==}
    engines: {node: '>=8'}

  cli-highlight@2.1.11:
    resolution: {integrity: sha512-9KDcoEVwyUXrjcJNvHD0NFc/hiwe/WPVYIleQh2O1N2Zro5gWJZ/K+3DGn8w8P/F6FxOgzyC5bxDyHIgCSPhGg==}
    engines: {node: '>=8.0.0', npm: '>=5.0.0'}
    hasBin: true

  cli-spinners@2.9.2:
    resolution: {integrity: sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==}
    engines: {node: '>=6'}

  cli-table3@0.6.5:
    resolution: {integrity: sha512-+W/5efTR7y5HRD7gACw9yQjqMVvEMLBHmboM/kPWam+H+Hmyrgjh6YncVKK122YZkXrLudzTuAukUw9FnMf7IQ==}
    engines: {node: 10.* || >= 12.*}

  cli-width@3.0.0:
    resolution: {integrity: sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==}
    engines: {node: '>= 10'}

  cli-width@4.1.0:
    resolution: {integrity: sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==}
    engines: {node: '>= 12'}

  cliui@7.0.4:
    resolution: {integrity: sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==}

  cliui@8.0.1:
    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
    engines: {node: '>=12'}

  clone@1.0.4:
    resolution: {integrity: sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==}
    engines: {node: '>=0.8'}

  co@4.6.0:
    resolution: {integrity: sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==}
    engines: {iojs: '>= 1.0.0', node: '>= 0.12.0'}

  collect-v8-coverage@1.0.2:
    resolution: {integrity: sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@2.20.3:
    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  comment-json@4.2.5:
    resolution: {integrity: sha512-bKw/r35jR3HGt5PEPm1ljsQQGyCrR8sFGNiN5L+ykDHdpO8Smxkrkla9Yi6NkQyUrb8V54PGhfMs6NrIwtxtdw==}
    engines: {node: '>= 6'}

  component-emitter@1.3.1:
    resolution: {integrity: sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  concat-stream@1.6.2:
    resolution: {integrity: sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==}
    engines: {'0': node >= 0.8}

  consola@2.15.3:
    resolution: {integrity: sha512-9vAdYbHj6x2fLKC4+oPH0kFzY/orMZyG2Aj+kNylHxKGJ/Ed4dpNyAQYwJOdqO4zdM7XpVHmyejQDcQHrnuXbw==}

  content-disposition@0.5.4:
    resolution: {integrity: sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==}
    engines: {node: '>= 0.6'}

  content-type@1.0.5:
    resolution: {integrity: sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==}
    engines: {node: '>= 0.6'}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cookie-signature@1.0.6:
    resolution: {integrity: sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==}

  cookie@0.7.1:
    resolution: {integrity: sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==}
    engines: {node: '>= 0.6'}

  cookiejar@2.1.4:
    resolution: {integrity: sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==}

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  cors@2.8.5:
    resolution: {integrity: sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==}
    engines: {node: '>= 0.10'}

  cosmiconfig@8.3.6:
    resolution: {integrity: sha512-kcZ6+W5QzcJ3P1Mt+83OUv/oHFqZHIx8DuxG6eZ5RGMERoLqp4BuGjhHLYGK+Kf5XVkQvqBSmAy/nGWN3qDgEA==}
    engines: {node: '>=14'}
    peerDependencies:
      typescript: '>=4.9.5'
    peerDependenciesMeta:
      typescript:
        optional: true

  create-hash@1.2.0:
    resolution: {integrity: sha512-z00bCGNHDG8mHAkP7CtT1qVu+bFQUPjYq/4Iv3C3kWjTFV10zIjfSoeqXo9Asws8gwSHDGj/hl2u4OGIjapeCg==}

  create-hmac@1.1.7:
    resolution: {integrity: sha512-MJG9liiZ+ogc4TzUwuvbER1JRdgvUFSB5+VR/g5h82fGaIRWMWddtKBHi7/sVhfjQZ6SehlyhvQYrcYkaUIpLg==}

  create-jest@29.7.0:
    resolution: {integrity: sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true

  create-require@1.1.1:
    resolution: {integrity: sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==}

  cross-fetch@4.0.0:
    resolution: {integrity: sha512-e4a5N8lVvuLgAWgnCrLr2PP0YyDOTHa9H/Rj54dirp61qXnNq46m82bRhNqIA5VccJtWBvPTFRV3TtvHUKPB1g==}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  dayjs@1.11.13:
    resolution: {integrity: sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==}

  debug@2.6.9:
    resolution: {integrity: sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.0:
    resolution: {integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  dedent@1.5.3:
    resolution: {integrity: sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ==}
    peerDependencies:
      babel-plugin-macros: ^3.1.0
    peerDependenciesMeta:
      babel-plugin-macros:
        optional: true

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  deepmerge@4.3.1:
    resolution: {integrity: sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==}
    engines: {node: '>=0.10.0'}

  defaults@1.0.4:
    resolution: {integrity: sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  denque@2.1.0:
    resolution: {integrity: sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==}
    engines: {node: '>=0.10'}

  depd@2.0.0:
    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}
    engines: {node: '>= 0.8'}

  destroy@1.2.0:
    resolution: {integrity: sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  detect-newline@3.1.0:
    resolution: {integrity: sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==}
    engines: {node: '>=8'}

  dezalgo@1.0.4:
    resolution: {integrity: sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==}

  diff-sequences@29.6.3:
    resolution: {integrity: sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  diff@4.0.2:
    resolution: {integrity: sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==}
    engines: {node: '>=0.3.1'}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  doctrine@3.0.0:
    resolution: {integrity: sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==}
    engines: {node: '>=6.0.0'}

  dotenv-expand@10.0.0:
    resolution: {integrity: sha512-GopVGCpVS1UKH75VKHGuQFqS1Gusej0z4FyQkPdwjil2gNIv+LNsqBlboOzpJFZKVT95GkCyWJbBSdFEFUWI2A==}
    engines: {node: '>=12'}

  dotenv@16.4.5:
    resolution: {integrity: sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==}
    engines: {node: '>=12'}

  drbg.js@1.0.1:
    resolution: {integrity: sha512-F4wZ06PvqxYLFEZKkFxTDcns9oFNk34hvmJSEwdzsxVQ8YI5YaxtACgQatkYgv2VI2CFkUd2Y+xosPQnHv809g==}
    engines: {node: '>=0.10'}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  ee-first@1.1.1:
    resolution: {integrity: sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==}

  ejs@3.1.10:
    resolution: {integrity: sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==}
    engines: {node: '>=0.10.0'}
    hasBin: true

  electron-to-chromium@1.5.75:
    resolution: {integrity: sha512-Lf3++DumRE/QmweGjU+ZcKqQ+3bKkU/qjaKYhIJKEOhgIO9Xs6IiAQFkfFoj+RhgDk4LUeNsLo6plExHqSyu6Q==}

  elliptic@6.6.0:
    resolution: {integrity: sha512-dpwoQcLc/2WLQvJvLRHKZ+f9FgOdjnq11rurqwekGQygGPsYSK29OMMD2WalatiqQ+XGFDglTNixpPfI+lpaAA==}

  elliptic@6.6.1:
    resolution: {integrity: sha512-RaddvvMatK2LJHqFJ+YA4WysVN5Ita9E35botqIYspQ4TkRAlCicdzKOjlyv/1Za5RyTNn7di//eEV0uTAfe3g==}

  emittery@0.13.1:
    resolution: {integrity: sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==}
    engines: {node: '>=12'}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  encodeurl@1.0.2:
    resolution: {integrity: sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==}
    engines: {node: '>= 0.8'}

  encodeurl@2.0.0:
    resolution: {integrity: sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==}
    engines: {node: '>= 0.8'}

  enhanced-resolve@5.18.0:
    resolution: {integrity: sha512-0/r0MySGYG8YqlayBZ6MuCfECmHFdJ5qyPh8s8wa5Hnm6SaFLSK1VYCbj+NKp090Nm1caZhD+QTnmxO7esYGyQ==}
    engines: {node: '>=10.13.0'}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.5.4:
    resolution: {integrity: sha512-MVNK56NiMrOwitFB7cqDwq0CQutbw+0BvLshJSse0MUNU+y1FC3bUS/AQg7oUng+/wKrrki7JfmwtVHkVfPLlw==}

  es-object-atoms@1.0.0:
    resolution: {integrity: sha512-MZ4iQ6JwHOBQjahnjwaC1ZtIBH+2ohjamzAO3oaHcXYup7qxjF2fixyH+Q71voWHeOkI2q/TnJao/KfXYIZWbw==}
    engines: {node: '>= 0.4'}

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-html@1.0.3:
    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}

  escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}

  escape-string-regexp@2.0.0:
    resolution: {integrity: sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==}
    engines: {node: '>=8'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-prettier@9.1.0:
    resolution: {integrity: sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==}
    hasBin: true
    peerDependencies:
      eslint: '>=7.0.0'

  eslint-plugin-prettier@5.2.1:
    resolution: {integrity: sha512-gH3iR3g4JfF+yYPaJYkN7jEl9QbweL/YfkoRlNnuIEHEz1vHVlCmWOS+eGGiRuzHQXdJFCOTxRgvju9b8VUmrw==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      '@types/eslint': '>=8.0.0'
      eslint: '>=8.0.0'
      eslint-config-prettier: '*'
      prettier: '>=3.0.0'
    peerDependenciesMeta:
      '@types/eslint':
        optional: true
      eslint-config-prettier:
        optional: true

  eslint-scope@5.1.1:
    resolution: {integrity: sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==}
    engines: {node: '>=8.0.0'}

  eslint-scope@7.2.2:
    resolution: {integrity: sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint@8.57.1:
    resolution: {integrity: sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    deprecated: This version is no longer supported. Please see https://eslint.org/version-support for other options.
    hasBin: true

  espree@9.6.1:
    resolution: {integrity: sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  esprima@4.0.1:
    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
    engines: {node: '>=4'}
    hasBin: true

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@4.3.0:
    resolution: {integrity: sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  etag@1.8.1:
    resolution: {integrity: sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==}
    engines: {node: '>= 0.6'}

  ethers@6.13.4:
    resolution: {integrity: sha512-21YtnZVg4/zKkCQPjrDj38B1r4nQvTZLopUGMLQ1ePU2zV/joCfDC3t3iKQjWRzjjjbzR+mdAIoikeBRNkdllA==}
    engines: {node: '>=14.0.0'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  evp_bytestokey@1.0.3:
    resolution: {integrity: sha512-/f2Go4TognH/KvCISP7OUsHn85hT9nUkxxA9BEWxFn+Oj9o8ZNLm/40hdlgSLyuOimsrTKLUMEorQexp/aPQeA==}

  execa@5.1.1:
    resolution: {integrity: sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==}
    engines: {node: '>=10'}

  exit@0.1.2:
    resolution: {integrity: sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==}
    engines: {node: '>= 0.8.0'}

  expect@29.7.0:
    resolution: {integrity: sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  express@4.21.2:
    resolution: {integrity: sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==}
    engines: {node: '>= 0.10.0'}

  external-editor@3.1.0:
    resolution: {integrity: sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==}
    engines: {node: '>=4'}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-diff@1.3.0:
    resolution: {integrity: sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fast-safe-stringify@2.1.1:
    resolution: {integrity: sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==}

  fast-uri@3.0.3:
    resolution: {integrity: sha512-aLrHthzCjH5He4Z2H9YZ+v6Ujb9ocRuW6ZzkJQOrTxleEijANq4v1TsaPaVG1PZcuurEzrLcWRyYBYXD5cEiaw==}

  fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}

  fb-watchman@2.0.2:
    resolution: {integrity: sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==}

  figures@3.2.0:
    resolution: {integrity: sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==}
    engines: {node: '>=8'}

  file-entry-cache@6.0.1:
    resolution: {integrity: sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==}
    engines: {node: ^10.12.0 || >=12.0.0}

  file-uri-to-path@1.0.0:
    resolution: {integrity: sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==}

  filelist@1.0.4:
    resolution: {integrity: sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  finalhandler@1.3.1:
    resolution: {integrity: sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==}
    engines: {node: '>= 0.8'}

  find-up@4.1.0:
    resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@3.2.0:
    resolution: {integrity: sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==}
    engines: {node: ^10.12.0 || >=12.0.0}

  flatted@3.3.2:
    resolution: {integrity: sha512-AiwGJM8YcNOaobumgtng+6NHuOqC3A7MixFeDafM3X9cIUM+xUXoS5Vfgf+OihAYe20fxqNM9yPBXJzRtZ/4eA==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  foreground-child@3.3.0:
    resolution: {integrity: sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==}
    engines: {node: '>=14'}

  fork-ts-checker-webpack-plugin@9.0.2:
    resolution: {integrity: sha512-Uochze2R8peoN1XqlSi/rGUkDQpRogtLFocP9+PGu68zk1BDAKXfdeCdyVZpgTk8V8WFVQXdEz426VKjXLO1Gg==}
    engines: {node: '>=12.13.0', yarn: '>=1.0.0'}
    peerDependencies:
      typescript: '>3.6.0'
      webpack: ^5.11.0

  form-data@4.0.1:
    resolution: {integrity: sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==}
    engines: {node: '>= 6'}

  formidable@3.5.2:
    resolution: {integrity: sha512-Jqc1btCy3QzRbJaICGwKcBfGWuLADRerLzDqi2NwSt/UkXLsHJw2TVResiaoBufHVHy9aSgClOHCeJsSsFLTbg==}

  forwarded@0.2.0:
    resolution: {integrity: sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==}
    engines: {node: '>= 0.6'}

  fresh@0.5.2:
    resolution: {integrity: sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==}
    engines: {node: '>= 0.6'}

  fs-extra@10.1.0:
    resolution: {integrity: sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==}
    engines: {node: '>=12'}

  fs-monkey@1.0.6:
    resolution: {integrity: sha512-b1FMfwetIKymC0eioW7mTywihSQE4oLzQn1dB6rZB5fx/3NpNEdAWeCSMB+60/AeT0TCXsxzAlcYVEFCTAksWg==}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  generate-function@2.3.1:
    resolution: {integrity: sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-caller-file@2.0.5:
    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
    engines: {node: 6.* || 8.* || >= 10.*}

  get-intrinsic@1.2.6:
    resolution: {integrity: sha512-qxsEs+9A+u85HhllWJJFicJfPDhRmjzoYdl64aMWW9yRIJmSyxdn8IEkuIM530/7T+lv0TIHd8L6Q/ra0tEoeA==}
    engines: {node: '>= 0.4'}

  get-package-type@0.1.0:
    resolution: {integrity: sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==}
    engines: {node: '>=8.0.0'}

  get-stream@6.0.1:
    resolution: {integrity: sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==}
    engines: {node: '>=10'}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob-to-regexp@0.4.1:
    resolution: {integrity: sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  globals@13.24.0:
    resolution: {integrity: sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==}
    engines: {node: '>=8'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-own-prop@2.0.0:
    resolution: {integrity: sha512-Pq0h+hvsVm6dDEa8x82GnLSYHOzNDt7f0ddFa3FqcQlgzEiptPqL+XrOJNavjOzSYiYWIrgeVYYgGlLmnxwilQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  hash-base@3.1.0:
    resolution: {integrity: sha512-1nmYp/rhMDiE7AYkDw+lLwlAzz0AntGIe51F3RfFfEqyQ3feY2eI/NcwC6umIQVOASPMsWJLJScWKSSvzL9IVA==}
    engines: {node: '>=4'}

  hash.js@1.1.7:
    resolution: {integrity: sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hexoid@2.0.0:
    resolution: {integrity: sha512-qlspKUK7IlSQv2o+5I7yhUd7TxlOG2Vr5LTa3ve2XSNVKAL/n/u/7KLvKmFNimomDIKvZFXWHv0T12mv7rT8Aw==}
    engines: {node: '>=8'}

  highlight.js@10.7.3:
    resolution: {integrity: sha512-tzcUFauisWKNHaRkN4Wjl/ZA07gENAjFl3J/c480dprkGTg5EQstgaNFqBfUqCq54kZRIEcreTsAgF/m2quD7A==}

  hmac-drbg@1.0.1:
    resolution: {integrity: sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  http-errors@2.0.0:
    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}
    engines: {node: '>= 0.8'}

  human-signals@2.1.0:
    resolution: {integrity: sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==}
    engines: {node: '>=10.17.0'}

  iconv-lite@0.4.24:
    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}
    engines: {node: '>=0.10.0'}

  iconv-lite@0.6.3:
    resolution: {integrity: sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==}
    engines: {node: '>=0.10.0'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}

  import-local@3.2.0:
    resolution: {integrity: sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==}
    engines: {node: '>=8'}
    hasBin: true

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  inquirer@8.2.6:
    resolution: {integrity: sha512-M1WuAmb7pn9zdFRtQYk26ZBoY043Sse0wVDdk4Bppr+JOXyQYybdtvK+l9wUibhtjdjvtoiNy8tk+EgsYIUqKg==}
    engines: {node: '>=12.0.0'}

  inquirer@9.2.15:
    resolution: {integrity: sha512-vI2w4zl/mDluHt9YEQ/543VTCwPKWiHzKtm9dM2V0NdFcqEexDAjUHzO1oA60HRNaVifGXXM1tRRNluLVHa0Kg==}
    engines: {node: '>=18'}

  ipaddr.js@1.9.1:
    resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}
    engines: {node: '>= 0.10'}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-core-module@2.16.0:
    resolution: {integrity: sha512-urTSINYfAYgcbLb0yDQ6egFm6h3Mo1DcF9EkyXSRjjzdHbsulg01qhwWuXdOoUBuTkbQ80KDboXa0vFJ+BDH+g==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-fn@2.1.0:
    resolution: {integrity: sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==}
    engines: {node: '>=6'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-interactive@1.0.0:
    resolution: {integrity: sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==}
    engines: {node: '>=8'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  is-property@1.0.2:
    resolution: {integrity: sha512-Ks/IoX00TtClbGQr4TWXemAnktAQvYB7HzcCxDGqEZU6oCmb2INHuOoKxbtR+HFkmYWBKv/dOZtGRiAjDhj92g==}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-unicode-supported@0.1.0:
    resolution: {integrity: sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==}
    engines: {node: '>=10'}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  isomorphic-ws@5.0.0:
    resolution: {integrity: sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==}
    peerDependencies:
      ws: '*'

  istanbul-lib-coverage@3.2.2:
    resolution: {integrity: sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@5.2.1:
    resolution: {integrity: sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@6.0.3:
    resolution: {integrity: sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==}
    engines: {node: '>=10'}

  istanbul-lib-report@3.0.1:
    resolution: {integrity: sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==}
    engines: {node: '>=10'}

  istanbul-lib-source-maps@4.0.1:
    resolution: {integrity: sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==}
    engines: {node: '>=10'}

  istanbul-reports@3.1.7:
    resolution: {integrity: sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==}
    engines: {node: '>=8'}

  iterare@1.2.1:
    resolution: {integrity: sha512-RKYVTCjAnRthyJes037NX/IiqeidgN1xc3j1RjFfECFp28A1GVwK9nA+i0rJPaHqSZwygLzRnFlzUuHFoWWy+Q==}
    engines: {node: '>=6'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jake@10.9.2:
    resolution: {integrity: sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA==}
    engines: {node: '>=10'}
    hasBin: true

  jest-changed-files@29.7.0:
    resolution: {integrity: sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-circus@29.7.0:
    resolution: {integrity: sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-cli@29.7.0:
    resolution: {integrity: sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  jest-config@29.7.0:
    resolution: {integrity: sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@types/node': '*'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      '@types/node':
        optional: true
      ts-node:
        optional: true

  jest-diff@29.7.0:
    resolution: {integrity: sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-docblock@29.7.0:
    resolution: {integrity: sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-each@29.7.0:
    resolution: {integrity: sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-environment-node@29.7.0:
    resolution: {integrity: sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-get-type@29.6.3:
    resolution: {integrity: sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-haste-map@29.7.0:
    resolution: {integrity: sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-leak-detector@29.7.0:
    resolution: {integrity: sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-matcher-utils@29.7.0:
    resolution: {integrity: sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-message-util@29.7.0:
    resolution: {integrity: sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-mock@29.7.0:
    resolution: {integrity: sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-pnp-resolver@1.2.3:
    resolution: {integrity: sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==}
    engines: {node: '>=6'}
    peerDependencies:
      jest-resolve: '*'
    peerDependenciesMeta:
      jest-resolve:
        optional: true

  jest-regex-util@29.6.3:
    resolution: {integrity: sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve-dependencies@29.7.0:
    resolution: {integrity: sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve@29.7.0:
    resolution: {integrity: sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runner@29.7.0:
    resolution: {integrity: sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runtime@29.7.0:
    resolution: {integrity: sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-snapshot@29.7.0:
    resolution: {integrity: sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-util@29.7.0:
    resolution: {integrity: sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-validate@29.7.0:
    resolution: {integrity: sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-watcher@29.7.0:
    resolution: {integrity: sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-worker@27.5.1:
    resolution: {integrity: sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==}
    engines: {node: '>= 10.13.0'}

  jest-worker@29.7.0:
    resolution: {integrity: sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest@29.7.0:
    resolution: {integrity: sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-yaml@3.14.1:
    resolution: {integrity: sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==}
    hasBin: true

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsbi@3.1.3:
    resolution: {integrity: sha512-nBJqA0C6Qns+ZxurbEoIR56wyjiUszpNy70FHvxO5ervMoCbZVE3z3kxr5nKGhlxr/9MhKTSUBs7cAwwuf3g9w==}

  jsesc@3.1.0:
    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema-traverse@1.0.0:
    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsonc-parser@3.2.1:
    resolution: {integrity: sha512-AilxAyFOAcK5wA1+LeaySVBrHsGQvUFCDWXKpZjzaL0PqW+xfBOttn8GNtWKFWqneyMZj41MWF9Kl6iPWLwgOA==}

  jsonc-parser@3.3.1:
    resolution: {integrity: sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==}

  jsonfile@6.1.0:
    resolution: {integrity: sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kleur@3.0.3:
    resolution: {integrity: sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==}
    engines: {node: '>=6'}

  leven@3.1.0:
    resolution: {integrity: sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==}
    engines: {node: '>=6'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lib@5.1.0:
    resolution: {integrity: sha512-RqaGSpLSf6vtSls86+kUqMuQkNiXLtUFbKrh/mKOuZmi3ENJOXHsScw8/grKOLzDgYTgOvpFPGgmNsEh5f2yuA==}
    engines: {node: '>=4.0.0'}

  libphonenumber-js@1.11.17:
    resolution: {integrity: sha512-Jr6v8thd5qRlOlc6CslSTzGzzQW03uiscab7KHQZX1Dfo4R6n6FDhZ0Hri6/X7edLIDv9gl4VMZXhxTjLnl0VQ==}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  loader-runner@4.3.0:
    resolution: {integrity: sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==}
    engines: {node: '>=6.11.5'}

  locate-path@5.0.0:
    resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
    engines: {node: '>=8'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.memoize@4.1.2:
    resolution: {integrity: sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  log-symbols@4.1.0:
    resolution: {integrity: sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==}
    engines: {node: '>=10'}

  long@5.2.3:
    resolution: {integrity: sha512-lcHwpNoggQTObv5apGNCTdJrO69eHOZMi4BNC+rTLER8iHAqGrUVeLh/irVIM7zTw2bOXA8T6uNPeujwOLg/2Q==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lru-cache@7.18.3:
    resolution: {integrity: sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==}
    engines: {node: '>=12'}

  lru.min@1.1.1:
    resolution: {integrity: sha512-FbAj6lXil6t8z4z3j0E5mfRlPzxkySotzUHwRXjlpRh10vc6AI6WN62ehZj82VG7M20rqogJ0GLwar2Xa05a8Q==}
    engines: {bun: '>=1.0.0', deno: '>=1.30.0', node: '>=8.0.0'}

  magic-string@0.30.8:
    resolution: {integrity: sha512-ISQTe55T2ao7XtlAStud6qwYPZjE4GK1S/BeVPus4jrq6JuOnQ00YKQC581RWhR122W7msZV263KzVeLoqidyQ==}
    engines: {node: '>=12'}

  make-dir@4.0.0:
    resolution: {integrity: sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==}
    engines: {node: '>=10'}

  make-error@1.3.6:
    resolution: {integrity: sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==}

  makeerror@1.0.12:
    resolution: {integrity: sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==}

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  md5.js@1.3.5:
    resolution: {integrity: sha512-xitP+WxNPcTTOgnTJcrhM0xvdPepipPSf3I8EIpGKeFLjt3PlJLIDG3u8EX53ZIubkb+5U2+3rELYpEhHhzdkg==}

  media-typer@0.3.0:
    resolution: {integrity: sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==}
    engines: {node: '>= 0.6'}

  memfs@3.5.3:
    resolution: {integrity: sha512-UERzLsxzllchadvbPs5aolHh65ISpKpM+ccLbOJ8/vvpBKmAWf+la7dXFy7Mr0ySHbdHrFv5kGFCUHHe6GFEmw==}
    engines: {node: '>= 4.0.0'}

  merge-descriptors@1.0.3:
    resolution: {integrity: sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  methods@1.1.2:
    resolution: {integrity: sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==}
    engines: {node: '>= 0.6'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mime@1.6.0:
    resolution: {integrity: sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==}
    engines: {node: '>=4'}
    hasBin: true

  mime@2.6.0:
    resolution: {integrity: sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==}
    engines: {node: '>=4.0.0'}
    hasBin: true

  mimic-fn@2.1.0:
    resolution: {integrity: sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==}
    engines: {node: '>=6'}

  minimalistic-assert@1.0.1:
    resolution: {integrity: sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==}

  minimalistic-crypto-utils@1.0.1:
    resolution: {integrity: sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg==}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@5.1.6:
    resolution: {integrity: sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==}
    engines: {node: '>=10'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  mkdirp@0.5.6:
    resolution: {integrity: sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==}
    hasBin: true

  mkdirp@2.1.6:
    resolution: {integrity: sha512-+hEnITedc8LAtIP9u3HJDFIdcLV2vXP33sqLLIzkv1Db1zO/1OxbvYf0Y1OC/S/Qo5dxHXepofhmxL02PsKe+A==}
    engines: {node: '>=10'}
    hasBin: true

  ms@2.0.0:
    resolution: {integrity: sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  multer@1.4.4-lts.1:
    resolution: {integrity: sha512-WeSGziVj6+Z2/MwQo3GvqzgR+9Uc+qt8SwHKh3gvNPiISKfsMfG4SvCOFYlxxgkXt7yIV2i1yczehm0EOKIxIg==}
    engines: {node: '>= 6.0.0'}

  mute-stream@0.0.8:
    resolution: {integrity: sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==}

  mute-stream@1.0.0:
    resolution: {integrity: sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  mysql2@3.11.5:
    resolution: {integrity: sha512-0XFu8rUmFN9vC0ME36iBvCUObftiMHItrYFhlCRvFWbLgpNqtC4Br/NmZX1HNCszxT0GGy5QtP+k3Q3eCJPaYA==}
    engines: {node: '>= 8.0'}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  named-placeholders@1.1.3:
    resolution: {integrity: sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==}
    engines: {node: '>=12.0.0'}

  nan@2.22.0:
    resolution: {integrity: sha512-nbajikzWTMwsW+eSsNm3QwlOs7het9gGJU5dDZzRTQGk03vyBOauxgI4VakDzE0PtsGTmXPsXTbbjVhRwR5mpw==}

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  negotiator@0.6.3:
    resolution: {integrity: sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==}
    engines: {node: '>= 0.6'}

  neo-async@2.6.2:
    resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}

  node-abort-controller@3.1.1:
    resolution: {integrity: sha512-AGK2yQKIjRuqnc6VkX2Xj5d+QW8xZ87pa1UK6yA6ouUyuxfHuMP6umE5QK7UmTeOAymo+Zx1Fxiuw9rVx8taHQ==}

  node-emoji@1.11.0:
    resolution: {integrity: sha512-wo2DpQkQp7Sjm2A0cq+sN7EHKO6Sl0ctXeBdFZrL9T9+UywORbufTcTZxom8YqpLQt/FqNMUkOpkZrJVYSKD3A==}

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-int64@0.4.0:
    resolution: {integrity: sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==}

  node-releases@2.0.19:
    resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  npm-run-path@4.0.1:
    resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
    engines: {node: '>=8'}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-inspect@1.13.3:
    resolution: {integrity: sha512-kDCGIbxkDSXE3euJZZXzc6to7fCrKHNI/hSRQnRuQ+BWjFNzZwiFF8fj/6o2t2G9/jTj8PSIYTfCLelLZEeRpA==}
    engines: {node: '>= 0.4'}

  on-finished@2.4.1:
    resolution: {integrity: sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==}
    engines: {node: '>= 0.8'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  onetime@5.1.2:
    resolution: {integrity: sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==}
    engines: {node: '>=6'}

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  ora@5.4.1:
    resolution: {integrity: sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==}
    engines: {node: '>=10'}

  os-tmpdir@1.0.2:
    resolution: {integrity: sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==}
    engines: {node: '>=0.10.0'}

  p-limit@2.3.0:
    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
    engines: {node: '>=6'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@4.1.0:
    resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
    engines: {node: '>=8'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-try@2.2.0:
    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
    engines: {node: '>=6'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  parse5-htmlparser2-tree-adapter@6.0.1:
    resolution: {integrity: sha512-qPuWvbLgvDGilKc5BoicRovlT4MtYT6JfJyBOMDsKoiT+GiuP5qyrPCnR9HcPECIJJmZh5jRndyNThnhhb/vlA==}

  parse5@5.1.1:
    resolution: {integrity: sha512-ugq4DFI0Ptb+WWjAdOK16+u/nHfiIrcE+sh8kZMaM0WllQKLI9rOUq6c2b7cwPkXdzfQESqvoqK6ug7U/Yyzug==}

  parse5@6.0.1:
    resolution: {integrity: sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==}

  parseurl@1.3.3:
    resolution: {integrity: sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==}
    engines: {node: '>= 0.8'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-to-regexp@0.1.12:
    resolution: {integrity: sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==}

  path-to-regexp@3.3.0:
    resolution: {integrity: sha512-qyCH421YQPS2WFDxDjftfc1ZR5WKQzVzqsp4n9M2kQhVOo/ByahFoUNJfl58kOcEGfQ//7weFTDhm+ss8Ecxgw==}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  picomatch@4.0.1:
    resolution: {integrity: sha512-xUXwsxNjwTQ8K3GnT4pCJm+xq3RUPQbmkYJTP5aFIfNIvbcc/4MUxgBaaRSZJ6yGJZiGSyYlM6MzwTsRk8SYCg==}
    engines: {node: '>=12'}

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  pkg-dir@4.2.0:
    resolution: {integrity: sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==}
    engines: {node: '>=8'}

  pluralize@8.0.0:
    resolution: {integrity: sha512-Nc3IT5yHzflTfbjgqWcCPpo7DaKy4FnpB0l/zCAW0Tc7jxAiuqSxHasntB3D7887LSrA93kDJ9IXovxJYxyLCA==}
    engines: {node: '>=4'}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier-linter-helpers@1.0.0:
    resolution: {integrity: sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==}
    engines: {node: '>=6.0.0'}

  prettier-plugin-organize-imports@4.1.0:
    resolution: {integrity: sha512-5aWRdCgv645xaa58X8lOxzZoiHAldAPChljr/MT0crXVOWTZ+Svl4hIWlz+niYSlO6ikE5UXkN1JrRvIP2ut0A==}
    peerDependencies:
      prettier: '>=2.0'
      typescript: '>=2.9'
      vue-tsc: ^2.1.0
    peerDependenciesMeta:
      vue-tsc:
        optional: true

  prettier@3.4.2:
    resolution: {integrity: sha512-e9MewbtFo+Fevyuxn/4rrcDAaq0IYxPGLvObpQjiZBMAzB9IGmzlnG9RZy3FFas+eBMu2vA0CszMeduow5dIuQ==}
    engines: {node: '>=14'}
    hasBin: true

  pretty-format@29.7.0:
    resolution: {integrity: sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  prompts@2.4.2:
    resolution: {integrity: sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==}
    engines: {node: '>= 6'}

  proxy-addr@2.0.7:
    resolution: {integrity: sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==}
    engines: {node: '>= 0.10'}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  pure-rand@6.1.0:
    resolution: {integrity: sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==}

  qs@6.13.0:
    resolution: {integrity: sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==}
    engines: {node: '>=0.6'}

  qs@6.13.1:
    resolution: {integrity: sha512-EJPeIn0CYrGu+hli1xilKAPXODtJ12T0sP63Ijx2/khC2JtuaN3JyNIpvmnkmaEtha9ocbG4A4cMcr+TvqvwQg==}
    engines: {node: '>=0.6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  randombytes@2.1.0:
    resolution: {integrity: sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==}

  range-parser@1.2.1:
    resolution: {integrity: sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==}
    engines: {node: '>= 0.6'}

  raw-body@2.5.2:
    resolution: {integrity: sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==}
    engines: {node: '>= 0.8'}

  react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  reflect-metadata@0.2.2:
    resolution: {integrity: sha512-urBwgfrvVP/eAyXx4hluJivBKzuEbSQs9rKWCrCkbSxNv8mxPcUZKeuoF3Uy4mJl3Lwprp6yy5/39VWigZ4K6Q==}

  repeat-string@1.6.1:
    resolution: {integrity: sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==}
    engines: {node: '>=0.10'}

  require-directory@2.1.1:
    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
    engines: {node: '>=0.10.0'}

  require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}

  resolve-cwd@3.0.0:
    resolution: {integrity: sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==}
    engines: {node: '>=8'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve.exports@2.0.3:
    resolution: {integrity: sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A==}
    engines: {node: '>=10'}

  resolve@1.22.10:
    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
    engines: {node: '>= 0.4'}
    hasBin: true

  restore-cursor@3.1.0:
    resolution: {integrity: sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==}
    engines: {node: '>=8'}

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rimraf@3.0.2:
    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}
    deprecated: Rimraf versions prior to v4 are no longer supported
    hasBin: true

  ripemd160@2.0.2:
    resolution: {integrity: sha512-ii4iagi25WusVoiC4B4lq7pbXfAp3D9v5CwfkY33vffw2+pkDjY1D8GaN7spsxvCSx8dkPqOZCEZyfxcmJG2IA==}

  run-async@2.4.1:
    resolution: {integrity: sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==}
    engines: {node: '>=0.12.0'}

  run-async@3.0.0:
    resolution: {integrity: sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==}
    engines: {node: '>=0.12.0'}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  rxjs@7.8.1:
    resolution: {integrity: sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  schema-utils@3.3.0:
    resolution: {integrity: sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==}
    engines: {node: '>= 10.13.0'}

  schema-utils@4.3.0:
    resolution: {integrity: sha512-Gf9qqc58SpCA/xdziiHz35F4GNIWYWZrEshUc/G/r5BnLph6xpKuLeoJoQuj5WfBIx/eQLf+hmVPYHaxJu7V2g==}
    engines: {node: '>= 10.13.0'}

  secp256k1@3.8.1:
    resolution: {integrity: sha512-tArjQw2P0RTdY7QmkNehgp6TVvQXq6ulIhxv8gaH6YubKG/wxxAoNKcbuXjDhybbc+b2Ihc7e0xxiGN744UIiQ==}
    engines: {node: '>=4.0.0'}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.6.3:
    resolution: {integrity: sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==}
    engines: {node: '>=10'}
    hasBin: true

  send@0.19.0:
    resolution: {integrity: sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==}
    engines: {node: '>= 0.8.0'}

  seq-queue@0.0.5:
    resolution: {integrity: sha512-hr3Wtp/GZIc/6DAGPDcV4/9WoZhjrkXsi5B/07QgX8tsdc6ilr7BFM6PM6rbdAX1kFSDYeZGLipIZZKyQP0O5Q==}

  serialize-javascript@6.0.2:
    resolution: {integrity: sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==}

  serve-static@1.16.2:
    resolution: {integrity: sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==}
    engines: {node: '>= 0.8.0'}

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  setprototypeof@1.2.0:
    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}

  sha.js@2.4.11:
    resolution: {integrity: sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==}
    hasBin: true

  sha256-uint8array@0.10.7:
    resolution: {integrity: sha512-1Q6JQU4tX9NqsDGodej6pkrUVQVNapLZnvkwIhddH/JqzBZF1fSaxSWNY6sziXBE8aEa2twtGkXUrwzGeZCMpQ==}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel-list@1.0.0:
    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
    engines: {node: '>= 0.4'}

  side-channel-map@1.0.1:
    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
    engines: {node: '>= 0.4'}

  side-channel-weakmap@1.0.2:
    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
    engines: {node: '>= 0.4'}

  side-channel@1.1.0:
    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
    engines: {node: '>= 0.4'}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  sisteransi@1.0.5:
    resolution: {integrity: sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  source-map-support@0.5.13:
    resolution: {integrity: sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==}

  source-map-support@0.5.21:
    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  source-map@0.7.4:
    resolution: {integrity: sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==}
    engines: {node: '>= 8'}

  sprintf-js@1.0.3:
    resolution: {integrity: sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==}

  sqlstring@2.3.3:
    resolution: {integrity: sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==}
    engines: {node: '>= 0.6'}

  stack-utils@2.0.6:
    resolution: {integrity: sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==}
    engines: {node: '>=10'}

  statuses@2.0.1:
    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}
    engines: {node: '>= 0.8'}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  string-length@4.0.2:
    resolution: {integrity: sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==}
    engines: {node: '>=10'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-bom@4.0.0:
    resolution: {integrity: sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==}
    engines: {node: '>=8'}

  strip-final-newline@2.0.0:
    resolution: {integrity: sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==}
    engines: {node: '>=6'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  superagent@9.0.2:
    resolution: {integrity: sha512-xuW7dzkUpcJq7QnhOsnNUgtYp3xRwpt2F7abdRYIpCsAt0hhUqia0EdxyXZQQpNmGtsCzYHryaKSV3q3GJnq7w==}
    engines: {node: '>=14.18.0'}

  supertest@7.0.0:
    resolution: {integrity: sha512-qlsr7fIC0lSddmA3tzojvzubYxvlGtzumcdHgPwbFWMISQwL22MhM2Y3LNt+6w9Yyx7559VW5ab70dgphm8qQA==}
    engines: {node: '>=14.18.0'}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  swagger-ui-dist@5.18.2:
    resolution: {integrity: sha512-J+y4mCw/zXh1FOj5wGJvnAajq6XgHOyywsa9yITmwxIlJbMqITq3gYRZHaeqLVH/eV/HOPphE6NjF+nbSNC5Zw==}

  symbol-observable@4.0.0:
    resolution: {integrity: sha512-b19dMThMV4HVFynSAM1++gBHAbk2Tc/osgLIBZMKsyqh34jb2e8Os7T6ZW/Bt3pJFdBTd2JwAnAAEQV7rSNvcQ==}
    engines: {node: '>=0.10'}

  synckit@0.9.2:
    resolution: {integrity: sha512-vrozgXDQwYO72vHjUb/HnFbQx1exDjoKzqx23aXEg2a9VIg2TSFZ8FmeZpTjUCFMYw7mpX4BE2SFu8wI7asYsw==}
    engines: {node: ^14.18.0 || >=16.0.0}

  tapable@2.2.1:
    resolution: {integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==}
    engines: {node: '>=6'}

  terser-webpack-plugin@5.3.11:
    resolution: {integrity: sha512-RVCsMfuD0+cTt3EwX8hSl2Ks56EbFHWmhluwcqoPKtBnfjiT6olaq7PRIRfhyU8nnC2MrnDrBLfrD/RGE+cVXQ==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      '@swc/core': '*'
      esbuild: '*'
      uglify-js: '*'
      webpack: ^5.1.0
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      esbuild:
        optional: true
      uglify-js:
        optional: true

  terser@5.37.0:
    resolution: {integrity: sha512-B8wRRkmre4ERucLM/uXx4MOV5cbnOlVAqUst+1+iLKPI0dOgFO28f84ptoQt9HEI537PMzfYa/d+GEPKTRXmYA==}
    engines: {node: '>=10'}
    hasBin: true

  test-exclude@6.0.0:
    resolution: {integrity: sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==}
    engines: {node: '>=8'}

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  through@2.3.8:
    resolution: {integrity: sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==}

  tmp@0.0.33:
    resolution: {integrity: sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==}
    engines: {node: '>=0.6.0'}

  tmpl@1.0.5:
    resolution: {integrity: sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  toidentifier@1.0.1:
    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}
    engines: {node: '>=0.6'}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  tree-kill@1.2.2:
    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
    hasBin: true

  ts-api-utils@1.4.3:
    resolution: {integrity: sha512-i3eMG77UTMD0hZhgRS562pv83RC6ukSAC2GMNWc+9dieh/+jDM5u5YG+NHX6VNDRHQcHwmsTHctP9LhbC3WxVw==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'

  ts-jest@29.2.5:
    resolution: {integrity: sha512-KD8zB2aAZrcKIdGk4OwpJggeLcH1FgrICqDSROWqlnJXGCXK4Mn6FcdK2B6670Xr73lHMG1kHw8R87A0ecZ+vA==}
    engines: {node: ^14.15.0 || ^16.10.0 || ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@babel/core': '>=7.0.0-beta.0 <8'
      '@jest/transform': ^29.0.0
      '@jest/types': ^29.0.0
      babel-jest: ^29.0.0
      esbuild: '*'
      jest: ^29.0.0
      typescript: '>=4.3 <6'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      '@jest/transform':
        optional: true
      '@jest/types':
        optional: true
      babel-jest:
        optional: true
      esbuild:
        optional: true

  ts-loader@9.5.1:
    resolution: {integrity: sha512-rNH3sK9kGZcH9dYzC7CewQm4NtxJTjSEVRJ2DyBZR7f8/wcta+iV44UPCXc5+nzDzivKtlzV6c9P4e+oFhDLYg==}
    engines: {node: '>=12.0.0'}
    peerDependencies:
      typescript: '*'
      webpack: ^5.0.0

  ts-node@10.9.2:
    resolution: {integrity: sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==}
    hasBin: true
    peerDependencies:
      '@swc/core': '>=1.2.50'
      '@swc/wasm': '>=1.2.50'
      '@types/node': '*'
      typescript: '>=2.7'
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      '@swc/wasm':
        optional: true

  tsconfig-paths-webpack-plugin@4.2.0:
    resolution: {integrity: sha512-zbem3rfRS8BgeNK50Zz5SIQgXzLafiHjOwUAvk/38/o1jHn/V5QAgVUcz884or7WYcPaH3N2CIfUc2u0ul7UcA==}
    engines: {node: '>=10.13.0'}

  tsconfig-paths@4.2.0:
    resolution: {integrity: sha512-NoZ4roiN7LnbKn9QqE1amc9DJfzvZXxF4xDavcOWt1BPkdx+m+0gJuPM+S0vCe7zTJMYUP0R8pO2XMr+Y8oLIg==}
    engines: {node: '>=6'}

  tslib@2.3.1:
    resolution: {integrity: sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw==}

  tslib@2.7.0:
    resolution: {integrity: sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==}

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-detect@4.0.8:
    resolution: {integrity: sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==}
    engines: {node: '>=4'}

  type-fest@0.20.2:
    resolution: {integrity: sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==}
    engines: {node: '>=10'}

  type-fest@0.21.3:
    resolution: {integrity: sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==}
    engines: {node: '>=10'}

  type-fest@4.6.0:
    resolution: {integrity: sha512-rLjWJzQFOq4xw7MgJrCZ6T1jIOvvYElXT12r+y0CC6u67hegDHaxcPqb2fZHOGlqxugGQPNB1EnTezjBetkwkw==}
    engines: {node: '>=16'}

  type-is@1.6.18:
    resolution: {integrity: sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==}
    engines: {node: '>= 0.6'}

  typedarray@0.0.6:
    resolution: {integrity: sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==}

  typeorm@0.3.20:
    resolution: {integrity: sha512-sJ0T08dV5eoZroaq9uPKBoNcGslHBR4E4y+EBHs//SiGbblGe7IeduP/IH4ddCcj0qp3PHwDwGnuvqEAnKlq/Q==}
    engines: {node: '>=16.13.0'}
    hasBin: true
    peerDependencies:
      '@google-cloud/spanner': ^5.18.0
      '@sap/hana-client': ^2.12.25
      better-sqlite3: ^7.1.2 || ^8.0.0 || ^9.0.0
      hdb-pool: ^0.1.6
      ioredis: ^5.0.4
      mongodb: ^5.8.0
      mssql: ^9.1.1 || ^10.0.1
      mysql2: ^2.2.5 || ^3.0.1
      oracledb: ^6.3.0
      pg: ^8.5.1
      pg-native: ^3.0.0
      pg-query-stream: ^4.0.0
      redis: ^3.1.1 || ^4.0.0
      sql.js: ^1.4.0
      sqlite3: ^5.0.3
      ts-node: ^10.7.0
      typeorm-aurora-data-api-driver: ^2.0.0
    peerDependenciesMeta:
      '@google-cloud/spanner':
        optional: true
      '@sap/hana-client':
        optional: true
      better-sqlite3:
        optional: true
      hdb-pool:
        optional: true
      ioredis:
        optional: true
      mongodb:
        optional: true
      mssql:
        optional: true
      mysql2:
        optional: true
      oracledb:
        optional: true
      pg:
        optional: true
      pg-native:
        optional: true
      pg-query-stream:
        optional: true
      redis:
        optional: true
      sql.js:
        optional: true
      sqlite3:
        optional: true
      ts-node:
        optional: true
      typeorm-aurora-data-api-driver:
        optional: true

  typescript@5.7.2:
    resolution: {integrity: sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==}
    engines: {node: '>=14.17'}
    hasBin: true

  uid@2.0.2:
    resolution: {integrity: sha512-u3xV3X7uzvi5b1MncmZo3i2Aw222Zk1keqLA1YkHldREkAhAqi65wuPfe7lHx8H/Wzy+8CE7S7uS3jekIM5s8g==}
    engines: {node: '>=8'}

  uncrypto@0.1.3:
    resolution: {integrity: sha512-Ql87qFHB3s/De2ClA9e0gsnS6zXG27SkTiSJwjCc9MebbfapQfuPzumMIUMi38ezPZVNFcHI9sUIepeQfw8J8Q==}

  undici-types@6.19.8:
    resolution: {integrity: sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==}

  universalify@2.0.1:
    resolution: {integrity: sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==}
    engines: {node: '>= 10.0.0'}

  unpipe@1.0.0:
    resolution: {integrity: sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==}
    engines: {node: '>= 0.8'}

  update-browserslist-db@1.1.1:
    resolution: {integrity: sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  utils-merge@1.0.1:
    resolution: {integrity: sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==}
    engines: {node: '>= 0.4.0'}

  uuid@9.0.1:
    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
    hasBin: true

  v8-compile-cache-lib@3.0.1:
    resolution: {integrity: sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==}

  v8-to-istanbul@9.3.0:
    resolution: {integrity: sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==}
    engines: {node: '>=10.12.0'}

  validator@13.12.0:
    resolution: {integrity: sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==}
    engines: {node: '>= 0.10'}

  varuint-bitcoin@1.1.2:
    resolution: {integrity: sha512-4EVb+w4rx+YfVM32HQX42AbbT7/1f5zwAYhIujKXKk8NQK+JfRVl3pqT3hjNn/L+RstigmGGKVwHA/P0wgITZw==}

  vary@1.1.2:
    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}
    engines: {node: '>= 0.8'}

  walker@1.0.8:
    resolution: {integrity: sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==}

  watchpack@2.4.2:
    resolution: {integrity: sha512-TnbFSbcOCcDgjZ4piURLCbJ3nJhznVh9kw6F6iokjiFPl8ONxe9A6nMDVXDiNbrSfLILs6vB07F7wLBrwPYzJw==}
    engines: {node: '>=10.13.0'}

  wcwidth@1.0.1:
    resolution: {integrity: sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  webpack-node-externals@3.0.0:
    resolution: {integrity: sha512-LnL6Z3GGDPht/AigwRh2dvL9PQPFQ8skEpVrWZXLWBYmqcaojHNN0onvHzie6rq7EWKrrBfPYqNEzTJgiwEQDQ==}
    engines: {node: '>=6'}

  webpack-sources@3.2.3:
    resolution: {integrity: sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==}
    engines: {node: '>=10.13.0'}

  webpack@5.97.1:
    resolution: {integrity: sha512-EksG6gFY3L1eFMROS/7Wzgrii5mBAFe4rIr3r2BTfo7bcc+DWwFZ4OJ/miOuHJO/A85HwyI4eQ0F6IKXesO7Fg==}
    engines: {node: '>=10.13.0'}
    hasBin: true
    peerDependencies:
      webpack-cli: '*'
    peerDependenciesMeta:
      webpack-cli:
        optional: true

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@6.2.0:
    resolution: {integrity: sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==}
    engines: {node: '>=8'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  write-file-atomic@4.0.2:
    resolution: {integrity: sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==}
    engines: {node: ^12.13.0 || ^14.15.0 || >=16.0.0}

  ws@8.17.1:
    resolution: {integrity: sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  ws@8.18.0:
    resolution: {integrity: sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  xtend@4.0.2:
    resolution: {integrity: sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==}
    engines: {node: '>=0.4'}

  y18n@5.0.8:
    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
    engines: {node: '>=10'}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yargs-parser@20.2.9:
    resolution: {integrity: sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==}
    engines: {node: '>=10'}

  yargs-parser@21.1.1:
    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
    engines: {node: '>=12'}

  yargs@16.2.0:
    resolution: {integrity: sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==}
    engines: {node: '>=10'}

  yargs@17.7.2:
    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
    engines: {node: '>=12'}

  yn@3.1.1:
    resolution: {integrity: sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==}
    engines: {node: '>=6'}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

snapshots:

  '@adraffy/ens-normalize@1.10.1': {}

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25

  '@angular-devkit/core@17.3.11(chokidar@3.6.0)':
    dependencies:
      ajv: 8.12.0
      ajv-formats: 2.1.1(ajv@8.12.0)
      jsonc-parser: 3.2.1
      picomatch: 4.0.1
      rxjs: 7.8.1
      source-map: 0.7.4
    optionalDependencies:
      chokidar: 3.6.0

  '@angular-devkit/schematics-cli@17.3.11(chokidar@3.6.0)':
    dependencies:
      '@angular-devkit/core': 17.3.11(chokidar@3.6.0)
      '@angular-devkit/schematics': 17.3.11(chokidar@3.6.0)
      ansi-colors: 4.1.3
      inquirer: 9.2.15
      symbol-observable: 4.0.0
      yargs-parser: 21.1.1
    transitivePeerDependencies:
      - chokidar

  '@angular-devkit/schematics@17.3.11(chokidar@3.6.0)':
    dependencies:
      '@angular-devkit/core': 17.3.11(chokidar@3.6.0)
      jsonc-parser: 3.2.1
      magic-string: 0.30.8
      ora: 5.4.1
      rxjs: 7.8.1
    transitivePeerDependencies:
      - chokidar

  '@babel/code-frame@7.26.2':
    dependencies:
      '@babel/helper-validator-identifier': 7.25.9
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/compat-data@7.26.3': {}

  '@babel/core@7.26.0':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.3
      '@babel/helper-compilation-targets': 7.25.9
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.0)
      '@babel/helpers': 7.26.0
      '@babel/parser': 7.26.3
      '@babel/template': 7.25.9
      '@babel/traverse': 7.26.4
      '@babel/types': 7.26.3
      convert-source-map: 2.0.0
      debug: 4.4.0
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.26.3':
    dependencies:
      '@babel/parser': 7.26.3
      '@babel/types': 7.26.3
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 3.1.0

  '@babel/helper-compilation-targets@7.25.9':
    dependencies:
      '@babel/compat-data': 7.26.3
      '@babel/helper-validator-option': 7.25.9
      browserslist: 4.24.3
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-module-imports@7.25.9':
    dependencies:
      '@babel/traverse': 7.26.4
      '@babel/types': 7.26.3
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9
      '@babel/traverse': 7.26.4
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-plugin-utils@7.25.9': {}

  '@babel/helper-string-parser@7.25.9': {}

  '@babel/helper-validator-identifier@7.25.9': {}

  '@babel/helper-validator-option@7.25.9': {}

  '@babel/helpers@7.26.0':
    dependencies:
      '@babel/template': 7.25.9
      '@babel/types': 7.26.3

  '@babel/parser@7.26.3':
    dependencies:
      '@babel/types': 7.26.3

  '@babel/plugin-syntax-async-generators@7.8.4(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-bigint@7.8.3(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-class-properties@7.12.13(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-class-static-block@7.14.5(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-import-attributes@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-import-meta@7.10.4(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-json-strings@7.8.3(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-jsx@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-numeric-separator@7.10.4(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-object-rest-spread@7.8.3(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-optional-catch-binding@7.8.3(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-optional-chaining@7.8.3(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-private-property-in-object@7.14.5(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-top-level-await@7.14.5(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-typescript@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/template@7.25.9':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/parser': 7.26.3
      '@babel/types': 7.26.3

  '@babel/traverse@7.26.4':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.3
      '@babel/parser': 7.26.3
      '@babel/template': 7.25.9
      '@babel/types': 7.26.3
      debug: 4.4.0
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.26.3':
    dependencies:
      '@babel/helper-string-parser': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9

  '@bcoe/v8-coverage@0.2.3': {}

  '@ckb-ccc/core@1.3.1(typescript@5.7.2)':
    dependencies:
      '@joyid/ckb': 1.1.0(typescript@5.7.2)
      '@noble/ciphers': 0.5.3
      '@noble/curves': 1.7.0
      '@noble/hashes': 1.6.1
      abort-controller: 3.0.0
      bech32: 2.0.0
      bitcoinjs-message: 2.2.0
      bs58check: 4.0.0
      buffer: 6.0.3
      cross-fetch: 4.0.0
      ethers: 6.13.4
      isomorphic-ws: 5.0.0(ws@8.18.0)
      ws: 8.18.0
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/core@1.4.0(typescript@5.7.2)':
    dependencies:
      '@joyid/ckb': 1.1.0(typescript@5.7.2)
      '@noble/ciphers': 0.5.3
      '@noble/curves': 1.7.0
      '@noble/hashes': 1.6.1
      abort-controller: 3.0.0
      bech32: 2.0.0
      bitcoinjs-message: 2.2.0
      bs58check: 4.0.0
      buffer: 6.0.3
      cross-fetch: 4.0.0
      ethers: 6.13.4
      isomorphic-ws: 5.0.0(ws@8.18.0)
      ws: 8.18.0
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/shell@1.1.1(typescript@5.7.2)':
    dependencies:
      '@ckb-ccc/core': 1.3.1(typescript@5.7.2)
      '@ckb-ccc/spore': 1.1.1(typescript@5.7.2)
      '@ckb-ccc/ssri': 0.1.1(typescript@5.7.2)
      '@ckb-ccc/udt': 0.1.1(typescript@5.7.2)
    transitivePeerDependencies:
      - bufferutil
      - debug
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/spore@1.1.1(typescript@5.7.2)':
    dependencies:
      '@ckb-ccc/core': 1.3.1(typescript@5.7.2)
      axios: 1.7.9
    transitivePeerDependencies:
      - bufferutil
      - debug
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/spore@1.2.0(typescript@5.7.2)':
    dependencies:
      '@ckb-ccc/core': 1.4.0(typescript@5.7.2)
      axios: 1.7.9
    transitivePeerDependencies:
      - bufferutil
      - debug
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/ssri@0.1.1(typescript@5.7.2)':
    dependencies:
      '@ckb-ccc/core': 1.3.1(typescript@5.7.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/udt@0.1.1(typescript@5.7.2)':
    dependencies:
      '@ckb-ccc/core': 1.3.1(typescript@5.7.2)
      '@ckb-ccc/ssri': 0.1.1(typescript@5.7.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@colors/colors@1.5.0':
    optional: true

  '@cspotcode/source-map-support@0.8.1':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.9

  '@eslint-community/eslint-utils@4.4.1(eslint@8.57.1)':
    dependencies:
      eslint: 8.57.1
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/eslintrc@2.1.4':
    dependencies:
      ajv: 6.12.6
      debug: 4.4.0
      espree: 9.6.1
      globals: 13.24.0
      ignore: 5.3.2
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@8.57.1': {}

  '@humanwhocodes/config-array@0.13.0':
    dependencies:
      '@humanwhocodes/object-schema': 2.0.3
      debug: 4.4.0
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/object-schema@2.0.3': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@istanbuljs/load-nyc-config@1.1.0':
    dependencies:
      camelcase: 5.3.1
      find-up: 4.1.0
      get-package-type: 0.1.0
      js-yaml: 3.14.1
      resolve-from: 5.0.0

  '@istanbuljs/schema@0.1.3': {}

  '@jest/console@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      chalk: 4.1.2
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0

  '@jest/core@29.7.0(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/reporters': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      ci-info: 3.9.0
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-changed-files: 29.7.0
      jest-config: 29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-resolve-dependencies: 29.7.0
      jest-runner: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      jest-watcher: 29.7.0
      micromatch: 4.0.8
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-ansi: 6.0.1
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color
      - ts-node

  '@jest/environment@29.7.0':
    dependencies:
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      jest-mock: 29.7.0

  '@jest/expect-utils@29.7.0':
    dependencies:
      jest-get-type: 29.6.3

  '@jest/expect@29.7.0':
    dependencies:
      expect: 29.7.0
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/fake-timers@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@sinonjs/fake-timers': 10.3.0
      '@types/node': 20.17.10
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-util: 29.7.0

  '@jest/globals@29.7.0':
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/types': 29.6.3
      jest-mock: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/reporters@29.7.0':
    dependencies:
      '@bcoe/v8-coverage': 0.2.3
      '@jest/console': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.25
      '@types/node': 20.17.10
      chalk: 4.1.2
      collect-v8-coverage: 1.0.2
      exit: 0.1.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      istanbul-lib-coverage: 3.2.2
      istanbul-lib-instrument: 6.0.3
      istanbul-lib-report: 3.0.1
      istanbul-lib-source-maps: 4.0.1
      istanbul-reports: 3.1.7
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      jest-worker: 29.7.0
      slash: 3.0.0
      string-length: 4.0.2
      strip-ansi: 6.0.1
      v8-to-istanbul: 9.3.0
    transitivePeerDependencies:
      - supports-color

  '@jest/schemas@29.6.3':
    dependencies:
      '@sinclair/typebox': 0.27.8

  '@jest/source-map@29.6.3':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      callsites: 3.1.0
      graceful-fs: 4.2.11

  '@jest/test-result@29.7.0':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/types': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      collect-v8-coverage: 1.0.2

  '@jest/test-sequencer@29.7.0':
    dependencies:
      '@jest/test-result': 29.7.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      slash: 3.0.0

  '@jest/transform@29.7.0':
    dependencies:
      '@babel/core': 7.26.0
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.25
      babel-plugin-istanbul: 6.1.1
      chalk: 4.1.2
      convert-source-map: 2.0.0
      fast-json-stable-stringify: 2.1.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      micromatch: 4.0.8
      pirates: 4.0.6
      slash: 3.0.0
      write-file-atomic: 4.0.2
    transitivePeerDependencies:
      - supports-color

  '@jest/types@29.6.3':
    dependencies:
      '@jest/schemas': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      '@types/istanbul-reports': 3.0.4
      '@types/node': 20.17.10
      '@types/yargs': 17.0.33
      chalk: 4.1.2

  '@joyid/ckb@1.1.0(typescript@5.7.2)':
    dependencies:
      '@joyid/common': 0.2.0(typescript@5.7.2)
      '@nervosnetwork/ckb-sdk-utils': 0.109.4
      cross-fetch: 4.0.0
      uncrypto: 0.1.3
    transitivePeerDependencies:
      - encoding
      - typescript
      - zod

  '@joyid/common@0.2.0(typescript@5.7.2)':
    dependencies:
      abitype: 0.8.7(typescript@5.7.2)
      type-fest: 4.6.0
    transitivePeerDependencies:
      - typescript
      - zod

  '@jridgewell/gen-mapping@0.3.8':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/source-map@0.3.6':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@jridgewell/trace-mapping@0.3.9':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@ljharb/through@2.3.13':
    dependencies:
      call-bind: 1.0.8

  '@lukeed/csprng@1.1.0': {}

  '@microsoft/tsdoc@0.15.1': {}

  '@nervosnetwork/ckb-sdk-utils@0.109.4':
    dependencies:
      '@nervosnetwork/ckb-types': 0.109.4
      bech32: 2.0.0
      elliptic: 6.6.0
      jsbi: 3.1.3
      tslib: 2.3.1

  '@nervosnetwork/ckb-types@0.109.4': {}

  '@nestjs/cli@10.4.9':
    dependencies:
      '@angular-devkit/core': 17.3.11(chokidar@3.6.0)
      '@angular-devkit/schematics': 17.3.11(chokidar@3.6.0)
      '@angular-devkit/schematics-cli': 17.3.11(chokidar@3.6.0)
      '@nestjs/schematics': 10.2.3(chokidar@3.6.0)(typescript@5.7.2)
      chalk: 4.1.2
      chokidar: 3.6.0
      cli-table3: 0.6.5
      commander: 4.1.1
      fork-ts-checker-webpack-plugin: 9.0.2(typescript@5.7.2)(webpack@5.97.1)
      glob: 10.4.5
      inquirer: 8.2.6
      node-emoji: 1.11.0
      ora: 5.4.1
      tree-kill: 1.2.2
      tsconfig-paths: 4.2.0
      tsconfig-paths-webpack-plugin: 4.2.0
      typescript: 5.7.2
      webpack: 5.97.1
      webpack-node-externals: 3.0.0
    transitivePeerDependencies:
      - esbuild
      - uglify-js
      - webpack-cli

  '@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)':
    dependencies:
      iterare: 1.2.1
      reflect-metadata: 0.2.2
      rxjs: 7.8.1
      tslib: 2.8.1
      uid: 2.0.2
    optionalDependencies:
      class-transformer: 0.5.1
      class-validator: 0.14.1

  '@nestjs/config@3.3.0(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(rxjs@7.8.1)':
    dependencies:
      '@nestjs/common': 10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      dotenv: 16.4.5
      dotenv-expand: 10.0.0
      lodash: 4.17.21
      rxjs: 7.8.1

  '@nestjs/core@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1)':
    dependencies:
      '@nestjs/common': 10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nuxtjs/opencollective': 0.3.2
      fast-safe-stringify: 2.1.1
      iterare: 1.2.1
      path-to-regexp: 3.3.0
      reflect-metadata: 0.2.2
      rxjs: 7.8.1
      tslib: 2.8.1
      uid: 2.0.2
    optionalDependencies:
      '@nestjs/platform-express': 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15)
    transitivePeerDependencies:
      - encoding

  '@nestjs/mapped-types@2.0.6(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)':
    dependencies:
      '@nestjs/common': 10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      reflect-metadata: 0.2.2
    optionalDependencies:
      class-transformer: 0.5.1
      class-validator: 0.14.1

  '@nestjs/platform-express@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15)':
    dependencies:
      '@nestjs/common': 10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      body-parser: 1.20.3
      cors: 2.8.5
      express: 4.21.2
      multer: 1.4.4-lts.1
      tslib: 2.8.1
    transitivePeerDependencies:
      - supports-color

  '@nestjs/schematics@10.2.3(chokidar@3.6.0)(typescript@5.7.2)':
    dependencies:
      '@angular-devkit/core': 17.3.11(chokidar@3.6.0)
      '@angular-devkit/schematics': 17.3.11(chokidar@3.6.0)
      comment-json: 4.2.5
      jsonc-parser: 3.3.1
      pluralize: 8.0.0
      typescript: 5.7.2
    transitivePeerDependencies:
      - chokidar

  '@nestjs/swagger@8.1.0(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1))(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)':
    dependencies:
      '@microsoft/tsdoc': 0.15.1
      '@nestjs/common': 10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/mapped-types': 2.0.6(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)
      js-yaml: 4.1.0
      lodash: 4.17.21
      path-to-regexp: 3.3.0
      reflect-metadata: 0.2.2
      swagger-ui-dist: 5.18.2
    optionalDependencies:
      class-transformer: 0.5.1
      class-validator: 0.14.1

  '@nestjs/testing@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15))':
    dependencies:
      '@nestjs/common': 10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      tslib: 2.8.1
    optionalDependencies:
      '@nestjs/platform-express': 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15)

  '@nestjs/typeorm@10.0.2(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2)(rxjs@7.8.1)(typeorm@0.3.20(mysql2@3.11.5)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)))':
    dependencies:
      '@nestjs/common': 10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.4.15(@nestjs/common@10.4.15(class-transformer@0.5.1)(class-validator@0.14.1)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.4.15)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      reflect-metadata: 0.2.2
      rxjs: 7.8.1
      typeorm: 0.3.20(mysql2@3.11.5)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      uuid: 9.0.1

  '@noble/ciphers@0.5.3': {}

  '@noble/curves@1.2.0':
    dependencies:
      '@noble/hashes': 1.3.2

  '@noble/curves@1.7.0':
    dependencies:
      '@noble/hashes': 1.6.0

  '@noble/hashes@1.3.2': {}

  '@noble/hashes@1.6.0': {}

  '@noble/hashes@1.6.1': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1

  '@nuxtjs/opencollective@0.3.2':
    dependencies:
      chalk: 4.1.2
      consola: 2.15.3
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@pkgr/core@0.1.1': {}

  '@scarf/scarf@1.4.0': {}

  '@scure/base@1.2.1': {}

  '@scure/bip32@1.6.0':
    dependencies:
      '@noble/curves': 1.7.0
      '@noble/hashes': 1.6.1
      '@scure/base': 1.2.1

  '@scure/bip39@1.5.0':
    dependencies:
      '@noble/hashes': 1.6.1
      '@scure/base': 1.2.1

  '@sinclair/typebox@0.27.8': {}

  '@sinonjs/commons@3.0.1':
    dependencies:
      type-detect: 4.0.8

  '@sinonjs/fake-timers@10.3.0':
    dependencies:
      '@sinonjs/commons': 3.0.1

  '@sqltools/formatter@1.2.5': {}

  '@tsconfig/node10@1.0.11': {}

  '@tsconfig/node12@1.0.11': {}

  '@tsconfig/node14@1.0.3': {}

  '@tsconfig/node16@1.0.4': {}

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.26.3
      '@babel/types': 7.26.3
      '@types/babel__generator': 7.6.8
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.6

  '@types/babel__generator@7.6.8':
    dependencies:
      '@babel/types': 7.26.3

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.26.3
      '@babel/types': 7.26.3

  '@types/babel__traverse@7.20.6':
    dependencies:
      '@babel/types': 7.26.3

  '@types/body-parser@1.19.5':
    dependencies:
      '@types/connect': 3.4.38
      '@types/node': 20.17.10

  '@types/connect@3.4.38':
    dependencies:
      '@types/node': 20.17.10

  '@types/cookiejar@2.1.5': {}

  '@types/eslint-scope@3.7.7':
    dependencies:
      '@types/eslint': 9.6.1
      '@types/estree': 1.0.6

  '@types/eslint@9.6.1':
    dependencies:
      '@types/estree': 1.0.6
      '@types/json-schema': 7.0.15

  '@types/estree@1.0.6': {}

  '@types/express-serve-static-core@4.19.6':
    dependencies:
      '@types/node': 20.17.10
      '@types/qs': 6.9.17
      '@types/range-parser': 1.2.7
      '@types/send': 0.17.4

  '@types/express@4.17.21':
    dependencies:
      '@types/body-parser': 1.19.5
      '@types/express-serve-static-core': 4.19.6
      '@types/qs': 6.9.17
      '@types/serve-static': 1.15.7

  '@types/graceful-fs@4.1.9':
    dependencies:
      '@types/node': 20.17.10

  '@types/http-errors@2.0.4': {}

  '@types/istanbul-lib-coverage@2.0.6': {}

  '@types/istanbul-lib-report@3.0.3':
    dependencies:
      '@types/istanbul-lib-coverage': 2.0.6

  '@types/istanbul-reports@3.0.4':
    dependencies:
      '@types/istanbul-lib-report': 3.0.3

  '@types/jest@29.5.14':
    dependencies:
      expect: 29.7.0
      pretty-format: 29.7.0

  '@types/js-yaml@4.0.9': {}

  '@types/json-schema@7.0.15': {}

  '@types/methods@1.1.4': {}

  '@types/mime@1.3.5': {}

  '@types/node@20.17.10':
    dependencies:
      undici-types: 6.19.8

  '@types/node@22.7.5':
    dependencies:
      undici-types: 6.19.8

  '@types/qs@6.9.17': {}

  '@types/range-parser@1.2.7': {}

  '@types/send@0.17.4':
    dependencies:
      '@types/mime': 1.3.5
      '@types/node': 20.17.10

  '@types/serve-static@1.15.7':
    dependencies:
      '@types/http-errors': 2.0.4
      '@types/node': 20.17.10
      '@types/send': 0.17.4

  '@types/stack-utils@2.0.3': {}

  '@types/superagent@8.1.9':
    dependencies:
      '@types/cookiejar': 2.1.5
      '@types/methods': 1.1.4
      '@types/node': 20.17.10
      form-data: 4.0.1

  '@types/supertest@6.0.2':
    dependencies:
      '@types/methods': 1.1.4
      '@types/superagent': 8.1.9

  '@types/validator@13.12.2': {}

  '@types/yargs-parser@21.0.3': {}

  '@types/yargs@17.0.33':
    dependencies:
      '@types/yargs-parser': 21.0.3

  '@typescript-eslint/eslint-plugin@7.18.0(@typescript-eslint/parser@7.18.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1)(typescript@5.7.2)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 7.18.0(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/scope-manager': 7.18.0
      '@typescript-eslint/type-utils': 7.18.0(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/utils': 7.18.0(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/visitor-keys': 7.18.0
      eslint: 8.57.1
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      ts-api-utils: 1.4.3(typescript@5.7.2)
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@7.18.0(eslint@8.57.1)(typescript@5.7.2)':
    dependencies:
      '@typescript-eslint/scope-manager': 7.18.0
      '@typescript-eslint/types': 7.18.0
      '@typescript-eslint/typescript-estree': 7.18.0(typescript@5.7.2)
      '@typescript-eslint/visitor-keys': 7.18.0
      debug: 4.4.0
      eslint: 8.57.1
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@7.18.0':
    dependencies:
      '@typescript-eslint/types': 7.18.0
      '@typescript-eslint/visitor-keys': 7.18.0

  '@typescript-eslint/type-utils@7.18.0(eslint@8.57.1)(typescript@5.7.2)':
    dependencies:
      '@typescript-eslint/typescript-estree': 7.18.0(typescript@5.7.2)
      '@typescript-eslint/utils': 7.18.0(eslint@8.57.1)(typescript@5.7.2)
      debug: 4.4.0
      eslint: 8.57.1
      ts-api-utils: 1.4.3(typescript@5.7.2)
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@7.18.0': {}

  '@typescript-eslint/typescript-estree@7.18.0(typescript@5.7.2)':
    dependencies:
      '@typescript-eslint/types': 7.18.0
      '@typescript-eslint/visitor-keys': 7.18.0
      debug: 4.4.0
      globby: 11.1.0
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.6.3
      ts-api-utils: 1.4.3(typescript@5.7.2)
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@7.18.0(eslint@8.57.1)(typescript@5.7.2)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@8.57.1)
      '@typescript-eslint/scope-manager': 7.18.0
      '@typescript-eslint/types': 7.18.0
      '@typescript-eslint/typescript-estree': 7.18.0(typescript@5.7.2)
      eslint: 8.57.1
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@typescript-eslint/visitor-keys@7.18.0':
    dependencies:
      '@typescript-eslint/types': 7.18.0
      eslint-visitor-keys: 3.4.3

  '@ungap/structured-clone@1.2.1': {}

  '@webassemblyjs/ast@1.14.1':
    dependencies:
      '@webassemblyjs/helper-numbers': 1.13.2
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2

  '@webassemblyjs/floating-point-hex-parser@1.13.2': {}

  '@webassemblyjs/helper-api-error@1.13.2': {}

  '@webassemblyjs/helper-buffer@1.14.1': {}

  '@webassemblyjs/helper-numbers@1.13.2':
    dependencies:
      '@webassemblyjs/floating-point-hex-parser': 1.13.2
      '@webassemblyjs/helper-api-error': 1.13.2
      '@xtuc/long': 4.2.2

  '@webassemblyjs/helper-wasm-bytecode@1.13.2': {}

  '@webassemblyjs/helper-wasm-section@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/wasm-gen': 1.14.1

  '@webassemblyjs/ieee754@1.13.2':
    dependencies:
      '@xtuc/ieee754': 1.2.0

  '@webassemblyjs/leb128@1.13.2':
    dependencies:
      '@xtuc/long': 4.2.2

  '@webassemblyjs/utf8@1.13.2': {}

  '@webassemblyjs/wasm-edit@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/helper-wasm-section': 1.14.1
      '@webassemblyjs/wasm-gen': 1.14.1
      '@webassemblyjs/wasm-opt': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1
      '@webassemblyjs/wast-printer': 1.14.1

  '@webassemblyjs/wasm-gen@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/ieee754': 1.13.2
      '@webassemblyjs/leb128': 1.13.2
      '@webassemblyjs/utf8': 1.13.2

  '@webassemblyjs/wasm-opt@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/wasm-gen': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1

  '@webassemblyjs/wasm-parser@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-api-error': 1.13.2
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/ieee754': 1.13.2
      '@webassemblyjs/leb128': 1.13.2
      '@webassemblyjs/utf8': 1.13.2

  '@webassemblyjs/wast-printer@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@xtuc/long': 4.2.2

  '@xtuc/ieee754@1.2.0': {}

  '@xtuc/long@4.2.2': {}

  abitype@0.8.7(typescript@5.7.2):
    dependencies:
      typescript: 5.7.2

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  accepts@1.3.8:
    dependencies:
      mime-types: 2.1.35
      negotiator: 0.6.3

  acorn-jsx@5.3.2(acorn@8.14.0):
    dependencies:
      acorn: 8.14.0

  acorn-walk@8.3.4:
    dependencies:
      acorn: 8.14.0

  acorn@8.14.0: {}

  aes-js@4.0.0-beta.5: {}

  ajv-formats@2.1.1(ajv@8.12.0):
    optionalDependencies:
      ajv: 8.12.0

  ajv-formats@2.1.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-keywords@3.5.2(ajv@6.12.6):
    dependencies:
      ajv: 6.12.6

  ajv-keywords@5.1.0(ajv@8.17.1):
    dependencies:
      ajv: 8.17.1
      fast-deep-equal: 3.1.3

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ajv@8.12.0:
    dependencies:
      fast-deep-equal: 3.1.3
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2
      uri-js: 4.4.1

  ajv@8.17.1:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-uri: 3.0.3
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2

  ansi-colors@4.1.3: {}

  ansi-escapes@4.3.2:
    dependencies:
      type-fest: 0.21.3

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  app-root-path@3.1.0: {}

  append-field@1.0.0: {}

  arg@4.1.3: {}

  argparse@1.0.10:
    dependencies:
      sprintf-js: 1.0.3

  argparse@2.0.1: {}

  array-flatten@1.1.1: {}

  array-timsort@1.0.3: {}

  array-union@2.1.0: {}

  asap@2.0.6: {}

  async@3.2.6: {}

  asynckit@0.4.0: {}

  aws-ssl-profiles@1.1.2: {}

  axios@1.7.9:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.1
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  babel-jest@29.7.0(@babel/core@7.26.0):
    dependencies:
      '@babel/core': 7.26.0
      '@jest/transform': 29.7.0
      '@types/babel__core': 7.20.5
      babel-plugin-istanbul: 6.1.1
      babel-preset-jest: 29.6.3(@babel/core@7.26.0)
      chalk: 4.1.2
      graceful-fs: 4.2.11
      slash: 3.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-istanbul@6.1.1:
    dependencies:
      '@babel/helper-plugin-utils': 7.25.9
      '@istanbuljs/load-nyc-config': 1.1.0
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-instrument: 5.2.1
      test-exclude: 6.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-jest-hoist@29.6.3:
    dependencies:
      '@babel/template': 7.25.9
      '@babel/types': 7.26.3
      '@types/babel__core': 7.20.5
      '@types/babel__traverse': 7.20.6

  babel-preset-current-node-syntax@1.1.0(@babel/core@7.26.0):
    dependencies:
      '@babel/core': 7.26.0
      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.26.0)
      '@babel/plugin-syntax-bigint': 7.8.3(@babel/core@7.26.0)
      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.26.0)
      '@babel/plugin-syntax-class-static-block': 7.14.5(@babel/core@7.26.0)
      '@babel/plugin-syntax-import-attributes': 7.26.0(@babel/core@7.26.0)
      '@babel/plugin-syntax-import-meta': 7.10.4(@babel/core@7.26.0)
      '@babel/plugin-syntax-json-strings': 7.8.3(@babel/core@7.26.0)
      '@babel/plugin-syntax-logical-assignment-operators': 7.10.4(@babel/core@7.26.0)
      '@babel/plugin-syntax-nullish-coalescing-operator': 7.8.3(@babel/core@7.26.0)
      '@babel/plugin-syntax-numeric-separator': 7.10.4(@babel/core@7.26.0)
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.26.0)
      '@babel/plugin-syntax-optional-catch-binding': 7.8.3(@babel/core@7.26.0)
      '@babel/plugin-syntax-optional-chaining': 7.8.3(@babel/core@7.26.0)
      '@babel/plugin-syntax-private-property-in-object': 7.14.5(@babel/core@7.26.0)
      '@babel/plugin-syntax-top-level-await': 7.14.5(@babel/core@7.26.0)

  babel-preset-jest@29.6.3(@babel/core@7.26.0):
    dependencies:
      '@babel/core': 7.26.0
      babel-plugin-jest-hoist: 29.6.3
      babel-preset-current-node-syntax: 1.1.0(@babel/core@7.26.0)

  balanced-match@1.0.2: {}

  base-x@3.0.10:
    dependencies:
      safe-buffer: 5.2.1

  base-x@5.0.0: {}

  base58-js@1.0.5: {}

  base64-js@1.5.1: {}

  bech32@1.1.4: {}

  bech32@2.0.0: {}

  binary-extensions@2.3.0: {}

  bindings@1.5.0:
    dependencies:
      file-uri-to-path: 1.0.0

  bip66@1.1.5:
    dependencies:
      safe-buffer: 5.2.1

  bitcoin-address-validation@2.2.3:
    dependencies:
      base58-js: 1.0.5
      bech32: 2.0.0
      sha256-uint8array: 0.10.7

  bitcoinjs-message@2.2.0:
    dependencies:
      bech32: 1.1.4
      bs58check: 2.1.2
      buffer-equals: 1.0.4
      create-hash: 1.2.0
      secp256k1: 3.8.1
      varuint-bitcoin: 1.1.2

  bl@4.1.0:
    dependencies:
      buffer: 5.7.1
      inherits: 2.0.4
      readable-stream: 3.6.2

  bn.js@4.12.1: {}

  body-parser@1.20.3:
    dependencies:
      bytes: 3.1.2
      content-type: 1.0.5
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      on-finished: 2.4.1
      qs: 6.13.0
      raw-body: 2.5.2
      type-is: 1.6.18
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  brorand@1.1.0: {}

  browserify-aes@1.2.0:
    dependencies:
      buffer-xor: 1.0.3
      cipher-base: 1.0.6
      create-hash: 1.2.0
      evp_bytestokey: 1.0.3
      inherits: 2.0.4
      safe-buffer: 5.2.1

  browserslist@4.24.3:
    dependencies:
      caniuse-lite: 1.0.30001690
      electron-to-chromium: 1.5.75
      node-releases: 2.0.19
      update-browserslist-db: 1.1.1(browserslist@4.24.3)

  bs-logger@0.2.6:
    dependencies:
      fast-json-stable-stringify: 2.1.0

  bs58@4.0.1:
    dependencies:
      base-x: 3.0.10

  bs58@6.0.0:
    dependencies:
      base-x: 5.0.0

  bs58check@2.1.2:
    dependencies:
      bs58: 4.0.1
      create-hash: 1.2.0
      safe-buffer: 5.2.1

  bs58check@4.0.0:
    dependencies:
      '@noble/hashes': 1.6.1
      bs58: 6.0.0

  bser@2.1.1:
    dependencies:
      node-int64: 0.4.0

  buffer-equals@1.0.4: {}

  buffer-from@1.1.2: {}

  buffer-xor@1.0.3: {}

  buffer@5.7.1:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  buffer@6.0.3:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  bytes@3.1.2: {}

  call-bind-apply-helpers@1.0.1:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bind@1.0.8:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      es-define-property: 1.0.1
      get-intrinsic: 1.2.6
      set-function-length: 1.2.2

  call-bound@1.0.3:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      get-intrinsic: 1.2.6

  callsites@3.1.0: {}

  camelcase@5.3.1: {}

  camelcase@6.3.0: {}

  caniuse-lite@1.0.30001690: {}

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.4.0: {}

  char-regex@1.0.2: {}

  chardet@0.7.0: {}

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  chrome-trace-event@1.0.4: {}

  ci-info@3.9.0: {}

  cipher-base@1.0.6:
    dependencies:
      inherits: 2.0.4
      safe-buffer: 5.2.1

  cjs-module-lexer@1.4.1: {}

  class-transformer@0.5.1: {}

  class-validator@0.14.1:
    dependencies:
      '@types/validator': 13.12.2
      libphonenumber-js: 1.11.17
      validator: 13.12.0

  cli-cursor@3.1.0:
    dependencies:
      restore-cursor: 3.1.0

  cli-highlight@2.1.11:
    dependencies:
      chalk: 4.1.2
      highlight.js: 10.7.3
      mz: 2.7.0
      parse5: 5.1.1
      parse5-htmlparser2-tree-adapter: 6.0.1
      yargs: 16.2.0

  cli-spinners@2.9.2: {}

  cli-table3@0.6.5:
    dependencies:
      string-width: 4.2.3
    optionalDependencies:
      '@colors/colors': 1.5.0

  cli-width@3.0.0: {}

  cli-width@4.1.0: {}

  cliui@7.0.4:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  cliui@8.0.1:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  clone@1.0.4: {}

  co@4.6.0: {}

  collect-v8-coverage@1.0.2: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@2.20.3: {}

  commander@4.1.1: {}

  comment-json@4.2.5:
    dependencies:
      array-timsort: 1.0.3
      core-util-is: 1.0.3
      esprima: 4.0.1
      has-own-prop: 2.0.0
      repeat-string: 1.6.1

  component-emitter@1.3.1: {}

  concat-map@0.0.1: {}

  concat-stream@1.6.2:
    dependencies:
      buffer-from: 1.1.2
      inherits: 2.0.4
      readable-stream: 2.3.8
      typedarray: 0.0.6

  consola@2.15.3: {}

  content-disposition@0.5.4:
    dependencies:
      safe-buffer: 5.2.1

  content-type@1.0.5: {}

  convert-source-map@2.0.0: {}

  cookie-signature@1.0.6: {}

  cookie@0.7.1: {}

  cookiejar@2.1.4: {}

  core-util-is@1.0.3: {}

  cors@2.8.5:
    dependencies:
      object-assign: 4.1.1
      vary: 1.1.2

  cosmiconfig@8.3.6(typescript@5.7.2):
    dependencies:
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      parse-json: 5.2.0
      path-type: 4.0.0
    optionalDependencies:
      typescript: 5.7.2

  create-hash@1.2.0:
    dependencies:
      cipher-base: 1.0.6
      inherits: 2.0.4
      md5.js: 1.3.5
      ripemd160: 2.0.2
      sha.js: 2.4.11

  create-hmac@1.1.7:
    dependencies:
      cipher-base: 1.0.6
      create-hash: 1.2.0
      inherits: 2.0.4
      ripemd160: 2.0.2
      safe-buffer: 5.2.1
      sha.js: 2.4.11

  create-jest@29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)):
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-config: 29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      jest-util: 29.7.0
      prompts: 2.4.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  create-require@1.1.1: {}

  cross-fetch@4.0.0:
    dependencies:
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  dayjs@1.11.13: {}

  debug@2.6.9:
    dependencies:
      ms: 2.0.0

  debug@4.4.0:
    dependencies:
      ms: 2.1.3

  dedent@1.5.3: {}

  deep-is@0.1.4: {}

  deepmerge@4.3.1: {}

  defaults@1.0.4:
    dependencies:
      clone: 1.0.4

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  delayed-stream@1.0.0: {}

  denque@2.1.0: {}

  depd@2.0.0: {}

  destroy@1.2.0: {}

  detect-newline@3.1.0: {}

  dezalgo@1.0.4:
    dependencies:
      asap: 2.0.6
      wrappy: 1.0.2

  diff-sequences@29.6.3: {}

  diff@4.0.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  doctrine@3.0.0:
    dependencies:
      esutils: 2.0.3

  dotenv-expand@10.0.0: {}

  dotenv@16.4.5: {}

  drbg.js@1.0.1:
    dependencies:
      browserify-aes: 1.2.0
      create-hash: 1.2.0
      create-hmac: 1.1.7

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  eastasianwidth@0.2.0: {}

  ee-first@1.1.1: {}

  ejs@3.1.10:
    dependencies:
      jake: 10.9.2

  electron-to-chromium@1.5.75: {}

  elliptic@6.6.0:
    dependencies:
      bn.js: 4.12.1
      brorand: 1.1.0
      hash.js: 1.1.7
      hmac-drbg: 1.0.1
      inherits: 2.0.4
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  elliptic@6.6.1:
    dependencies:
      bn.js: 4.12.1
      brorand: 1.1.0
      hash.js: 1.1.7
      hmac-drbg: 1.0.1
      inherits: 2.0.4
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  emittery@0.13.1: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  encodeurl@1.0.2: {}

  encodeurl@2.0.0: {}

  enhanced-resolve@5.18.0:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.1

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-module-lexer@1.5.4: {}

  es-object-atoms@1.0.0:
    dependencies:
      es-errors: 1.3.0

  escalade@3.2.0: {}

  escape-html@1.0.3: {}

  escape-string-regexp@1.0.5: {}

  escape-string-regexp@2.0.0: {}

  escape-string-regexp@4.0.0: {}

  eslint-config-prettier@9.1.0(eslint@8.57.1):
    dependencies:
      eslint: 8.57.1

  eslint-plugin-prettier@5.2.1(@types/eslint@9.6.1)(eslint-config-prettier@9.1.0(eslint@8.57.1))(eslint@8.57.1)(prettier@3.4.2):
    dependencies:
      eslint: 8.57.1
      prettier: 3.4.2
      prettier-linter-helpers: 1.0.0
      synckit: 0.9.2
    optionalDependencies:
      '@types/eslint': 9.6.1
      eslint-config-prettier: 9.1.0(eslint@8.57.1)

  eslint-scope@5.1.1:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 4.3.0

  eslint-scope@7.2.2:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint@8.57.1:
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@8.57.1)
      '@eslint-community/regexpp': 4.12.1
      '@eslint/eslintrc': 2.1.4
      '@eslint/js': 8.57.1
      '@humanwhocodes/config-array': 0.13.0
      '@humanwhocodes/module-importer': 1.0.1
      '@nodelib/fs.walk': 1.2.8
      '@ungap/structured-clone': 1.2.1
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.0
      doctrine: 3.0.0
      escape-string-regexp: 4.0.0
      eslint-scope: 7.2.2
      eslint-visitor-keys: 3.4.3
      espree: 9.6.1
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 6.0.1
      find-up: 5.0.0
      glob-parent: 6.0.2
      globals: 13.24.0
      graphemer: 1.4.0
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      is-path-inside: 3.0.3
      js-yaml: 4.1.0
      json-stable-stringify-without-jsonify: 1.0.1
      levn: 0.4.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
      strip-ansi: 6.0.1
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color

  espree@9.6.1:
    dependencies:
      acorn: 8.14.0
      acorn-jsx: 5.3.2(acorn@8.14.0)
      eslint-visitor-keys: 3.4.3

  esprima@4.0.1: {}

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@4.3.0: {}

  estraverse@5.3.0: {}

  esutils@2.0.3: {}

  etag@1.8.1: {}

  ethers@6.13.4:
    dependencies:
      '@adraffy/ens-normalize': 1.10.1
      '@noble/curves': 1.2.0
      '@noble/hashes': 1.3.2
      '@types/node': 22.7.5
      aes-js: 4.0.0-beta.5
      tslib: 2.7.0
      ws: 8.17.1
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  event-target-shim@5.0.1: {}

  events@3.3.0: {}

  evp_bytestokey@1.0.3:
    dependencies:
      md5.js: 1.3.5
      safe-buffer: 5.2.1

  execa@5.1.1:
    dependencies:
      cross-spawn: 7.0.6
      get-stream: 6.0.1
      human-signals: 2.1.0
      is-stream: 2.0.1
      merge-stream: 2.0.0
      npm-run-path: 4.0.1
      onetime: 5.1.2
      signal-exit: 3.0.7
      strip-final-newline: 2.0.0

  exit@0.1.2: {}

  expect@29.7.0:
    dependencies:
      '@jest/expect-utils': 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0

  express@4.21.2:
    dependencies:
      accepts: 1.3.8
      array-flatten: 1.1.1
      body-parser: 1.20.3
      content-disposition: 0.5.4
      content-type: 1.0.5
      cookie: 0.7.1
      cookie-signature: 1.0.6
      debug: 2.6.9
      depd: 2.0.0
      encodeurl: 2.0.0
      escape-html: 1.0.3
      etag: 1.8.1
      finalhandler: 1.3.1
      fresh: 0.5.2
      http-errors: 2.0.0
      merge-descriptors: 1.0.3
      methods: 1.1.2
      on-finished: 2.4.1
      parseurl: 1.3.3
      path-to-regexp: 0.1.12
      proxy-addr: 2.0.7
      qs: 6.13.0
      range-parser: 1.2.1
      safe-buffer: 5.2.1
      send: 0.19.0
      serve-static: 1.16.2
      setprototypeof: 1.2.0
      statuses: 2.0.1
      type-is: 1.6.18
      utils-merge: 1.0.1
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  external-editor@3.1.0:
    dependencies:
      chardet: 0.7.0
      iconv-lite: 0.4.24
      tmp: 0.0.33

  fast-deep-equal@3.1.3: {}

  fast-diff@1.3.0: {}

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fast-safe-stringify@2.1.1: {}

  fast-uri@3.0.3: {}

  fastq@1.17.1:
    dependencies:
      reusify: 1.0.4

  fb-watchman@2.0.2:
    dependencies:
      bser: 2.1.1

  figures@3.2.0:
    dependencies:
      escape-string-regexp: 1.0.5

  file-entry-cache@6.0.1:
    dependencies:
      flat-cache: 3.2.0

  file-uri-to-path@1.0.0: {}

  filelist@1.0.4:
    dependencies:
      minimatch: 5.1.6

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  finalhandler@1.3.1:
    dependencies:
      debug: 2.6.9
      encodeurl: 2.0.0
      escape-html: 1.0.3
      on-finished: 2.4.1
      parseurl: 1.3.3
      statuses: 2.0.1
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  find-up@4.1.0:
    dependencies:
      locate-path: 5.0.0
      path-exists: 4.0.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@3.2.0:
    dependencies:
      flatted: 3.3.2
      keyv: 4.5.4
      rimraf: 3.0.2

  flatted@3.3.2: {}

  follow-redirects@1.15.9: {}

  foreground-child@3.3.0:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  fork-ts-checker-webpack-plugin@9.0.2(typescript@5.7.2)(webpack@5.97.1):
    dependencies:
      '@babel/code-frame': 7.26.2
      chalk: 4.1.2
      chokidar: 3.6.0
      cosmiconfig: 8.3.6(typescript@5.7.2)
      deepmerge: 4.3.1
      fs-extra: 10.1.0
      memfs: 3.5.3
      minimatch: 3.1.2
      node-abort-controller: 3.1.1
      schema-utils: 3.3.0
      semver: 7.6.3
      tapable: 2.2.1
      typescript: 5.7.2
      webpack: 5.97.1

  form-data@4.0.1:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  formidable@3.5.2:
    dependencies:
      dezalgo: 1.0.4
      hexoid: 2.0.0
      once: 1.4.0

  forwarded@0.2.0: {}

  fresh@0.5.2: {}

  fs-extra@10.1.0:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 6.1.0
      universalify: 2.0.1

  fs-monkey@1.0.6: {}

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  generate-function@2.3.1:
    dependencies:
      is-property: 1.0.2

  gensync@1.0.0-beta.2: {}

  get-caller-file@2.0.5: {}

  get-intrinsic@1.2.6:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      dunder-proto: 1.0.1
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      function-bind: 1.1.2
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-package-type@0.1.0: {}

  get-stream@6.0.1: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob-to-regexp@0.4.1: {}

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  globals@11.12.0: {}

  globals@13.24.0:
    dependencies:
      type-fest: 0.20.2

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.2
      ignore: 5.3.2
      merge2: 1.4.1
      slash: 3.0.0

  gopd@1.2.0: {}

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  has-flag@4.0.0: {}

  has-own-prop@2.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.1

  has-symbols@1.1.0: {}

  hash-base@3.1.0:
    dependencies:
      inherits: 2.0.4
      readable-stream: 3.6.2
      safe-buffer: 5.2.1

  hash.js@1.1.7:
    dependencies:
      inherits: 2.0.4
      minimalistic-assert: 1.0.1

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hexoid@2.0.0: {}

  highlight.js@10.7.3: {}

  hmac-drbg@1.0.1:
    dependencies:
      hash.js: 1.1.7
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  html-escaper@2.0.2: {}

  http-errors@2.0.0:
    dependencies:
      depd: 2.0.0
      inherits: 2.0.4
      setprototypeof: 1.2.0
      statuses: 2.0.1
      toidentifier: 1.0.1

  human-signals@2.1.0: {}

  iconv-lite@0.4.24:
    dependencies:
      safer-buffer: 2.1.2

  iconv-lite@0.6.3:
    dependencies:
      safer-buffer: 2.1.2

  ieee754@1.2.1: {}

  ignore@5.3.2: {}

  import-fresh@3.3.0:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  import-local@3.2.0:
    dependencies:
      pkg-dir: 4.2.0
      resolve-cwd: 3.0.0

  imurmurhash@0.1.4: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.4: {}

  inquirer@8.2.6:
    dependencies:
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      cli-cursor: 3.1.0
      cli-width: 3.0.0
      external-editor: 3.1.0
      figures: 3.2.0
      lodash: 4.17.21
      mute-stream: 0.0.8
      ora: 5.4.1
      run-async: 2.4.1
      rxjs: 7.8.1
      string-width: 4.2.3
      strip-ansi: 6.0.1
      through: 2.3.8
      wrap-ansi: 6.2.0

  inquirer@9.2.15:
    dependencies:
      '@ljharb/through': 2.3.13
      ansi-escapes: 4.3.2
      chalk: 5.4.0
      cli-cursor: 3.1.0
      cli-width: 4.1.0
      external-editor: 3.1.0
      figures: 3.2.0
      lodash: 4.17.21
      mute-stream: 1.0.0
      ora: 5.4.1
      run-async: 3.0.0
      rxjs: 7.8.1
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 6.2.0

  ipaddr.js@1.9.1: {}

  is-arrayish@0.2.1: {}

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-core-module@2.16.0:
    dependencies:
      hasown: 2.0.2

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-generator-fn@2.1.0: {}

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-interactive@1.0.0: {}

  is-number@7.0.0: {}

  is-path-inside@3.0.3: {}

  is-property@1.0.2: {}

  is-stream@2.0.1: {}

  is-unicode-supported@0.1.0: {}

  isarray@1.0.0: {}

  isexe@2.0.0: {}

  isomorphic-ws@5.0.0(ws@8.18.0):
    dependencies:
      ws: 8.18.0

  istanbul-lib-coverage@3.2.2: {}

  istanbul-lib-instrument@5.2.1:
    dependencies:
      '@babel/core': 7.26.0
      '@babel/parser': 7.26.3
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-instrument@6.0.3:
    dependencies:
      '@babel/core': 7.26.0
      '@babel/parser': 7.26.3
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 7.6.3
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-report@3.0.1:
    dependencies:
      istanbul-lib-coverage: 3.2.2
      make-dir: 4.0.0
      supports-color: 7.2.0

  istanbul-lib-source-maps@4.0.1:
    dependencies:
      debug: 4.4.0
      istanbul-lib-coverage: 3.2.2
      source-map: 0.6.1
    transitivePeerDependencies:
      - supports-color

  istanbul-reports@3.1.7:
    dependencies:
      html-escaper: 2.0.2
      istanbul-lib-report: 3.0.1

  iterare@1.2.1: {}

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jake@10.9.2:
    dependencies:
      async: 3.2.6
      chalk: 4.1.2
      filelist: 1.0.4
      minimatch: 3.1.2

  jest-changed-files@29.7.0:
    dependencies:
      execa: 5.1.1
      jest-util: 29.7.0
      p-limit: 3.1.0

  jest-circus@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      chalk: 4.1.2
      co: 4.6.0
      dedent: 1.5.3
      is-generator-fn: 2.1.0
      jest-each: 29.7.0
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      p-limit: 3.1.0
      pretty-format: 29.7.0
      pure-rand: 6.1.0
      slash: 3.0.0
      stack-utils: 2.0.6
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-cli@29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)):
    dependencies:
      '@jest/core': 29.7.0(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      chalk: 4.1.2
      create-jest: 29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      exit: 0.1.2
      import-local: 3.2.0
      jest-config: 29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      jest-util: 29.7.0
      jest-validate: 29.7.0
      yargs: 17.7.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  jest-config@29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)):
    dependencies:
      '@babel/core': 7.26.0
      '@jest/test-sequencer': 29.7.0
      '@jest/types': 29.6.3
      babel-jest: 29.7.0(@babel/core@7.26.0)
      chalk: 4.1.2
      ci-info: 3.9.0
      deepmerge: 4.3.1
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-circus: 29.7.0
      jest-environment-node: 29.7.0
      jest-get-type: 29.6.3
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-runner: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      micromatch: 4.0.8
      parse-json: 5.2.0
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-json-comments: 3.1.1
    optionalDependencies:
      '@types/node': 20.17.10
      ts-node: 10.9.2(@types/node@20.17.10)(typescript@5.7.2)
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-diff@29.7.0:
    dependencies:
      chalk: 4.1.2
      diff-sequences: 29.6.3
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-docblock@29.7.0:
    dependencies:
      detect-newline: 3.1.0

  jest-each@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      jest-get-type: 29.6.3
      jest-util: 29.7.0
      pretty-format: 29.7.0

  jest-environment-node@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      jest-mock: 29.7.0
      jest-util: 29.7.0

  jest-get-type@29.6.3: {}

  jest-haste-map@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/graceful-fs': 4.1.9
      '@types/node': 20.17.10
      anymatch: 3.1.3
      fb-watchman: 2.0.2
      graceful-fs: 4.2.11
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      jest-worker: 29.7.0
      micromatch: 4.0.8
      walker: 1.0.8
    optionalDependencies:
      fsevents: 2.3.3

  jest-leak-detector@29.7.0:
    dependencies:
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-matcher-utils@29.7.0:
    dependencies:
      chalk: 4.1.2
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-message-util@29.7.0:
    dependencies:
      '@babel/code-frame': 7.26.2
      '@jest/types': 29.6.3
      '@types/stack-utils': 2.0.3
      chalk: 4.1.2
      graceful-fs: 4.2.11
      micromatch: 4.0.8
      pretty-format: 29.7.0
      slash: 3.0.0
      stack-utils: 2.0.6

  jest-mock@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      jest-util: 29.7.0

  jest-pnp-resolver@1.2.3(jest-resolve@29.7.0):
    optionalDependencies:
      jest-resolve: 29.7.0

  jest-regex-util@29.6.3: {}

  jest-resolve-dependencies@29.7.0:
    dependencies:
      jest-regex-util: 29.6.3
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  jest-resolve@29.7.0:
    dependencies:
      chalk: 4.1.2
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-pnp-resolver: 1.2.3(jest-resolve@29.7.0)
      jest-util: 29.7.0
      jest-validate: 29.7.0
      resolve: 1.22.10
      resolve.exports: 2.0.3
      slash: 3.0.0

  jest-runner@29.7.0:
    dependencies:
      '@jest/console': 29.7.0
      '@jest/environment': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      chalk: 4.1.2
      emittery: 0.13.1
      graceful-fs: 4.2.11
      jest-docblock: 29.7.0
      jest-environment-node: 29.7.0
      jest-haste-map: 29.7.0
      jest-leak-detector: 29.7.0
      jest-message-util: 29.7.0
      jest-resolve: 29.7.0
      jest-runtime: 29.7.0
      jest-util: 29.7.0
      jest-watcher: 29.7.0
      jest-worker: 29.7.0
      p-limit: 3.1.0
      source-map-support: 0.5.13
    transitivePeerDependencies:
      - supports-color

  jest-runtime@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/globals': 29.7.0
      '@jest/source-map': 29.6.3
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      chalk: 4.1.2
      cjs-module-lexer: 1.4.1
      collect-v8-coverage: 1.0.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0
      strip-bom: 4.0.0
    transitivePeerDependencies:
      - supports-color

  jest-snapshot@29.7.0:
    dependencies:
      '@babel/core': 7.26.0
      '@babel/generator': 7.26.3
      '@babel/plugin-syntax-jsx': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-syntax-typescript': 7.25.9(@babel/core@7.26.0)
      '@babel/types': 7.26.3
      '@jest/expect-utils': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      babel-preset-current-node-syntax: 1.1.0(@babel/core@7.26.0)
      chalk: 4.1.2
      expect: 29.7.0
      graceful-fs: 4.2.11
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      natural-compare: 1.4.0
      pretty-format: 29.7.0
      semver: 7.6.3
    transitivePeerDependencies:
      - supports-color

  jest-util@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      chalk: 4.1.2
      ci-info: 3.9.0
      graceful-fs: 4.2.11
      picomatch: 2.3.1

  jest-validate@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      camelcase: 6.3.0
      chalk: 4.1.2
      jest-get-type: 29.6.3
      leven: 3.1.0
      pretty-format: 29.7.0

  jest-watcher@29.7.0:
    dependencies:
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.17.10
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      emittery: 0.13.1
      jest-util: 29.7.0
      string-length: 4.0.2

  jest-worker@27.5.1:
    dependencies:
      '@types/node': 20.17.10
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jest-worker@29.7.0:
    dependencies:
      '@types/node': 20.17.10
      jest-util: 29.7.0
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jest@29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)):
    dependencies:
      '@jest/core': 29.7.0(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      '@jest/types': 29.6.3
      import-local: 3.2.0
      jest-cli: 29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  js-tokens@4.0.0: {}

  js-yaml@3.14.1:
    dependencies:
      argparse: 1.0.10
      esprima: 4.0.1

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsbi@3.1.3: {}

  jsesc@3.1.0: {}

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-schema-traverse@0.4.1: {}

  json-schema-traverse@1.0.0: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@2.2.3: {}

  jsonc-parser@3.2.1: {}

  jsonc-parser@3.3.1: {}

  jsonfile@6.1.0:
    dependencies:
      universalify: 2.0.1
    optionalDependencies:
      graceful-fs: 4.2.11

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kleur@3.0.3: {}

  leven@3.1.0: {}

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lib@5.1.0: {}

  libphonenumber-js@1.11.17: {}

  lines-and-columns@1.2.4: {}

  loader-runner@4.3.0: {}

  locate-path@5.0.0:
    dependencies:
      p-locate: 4.1.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.memoize@4.1.2: {}

  lodash.merge@4.6.2: {}

  lodash@4.17.21: {}

  log-symbols@4.1.0:
    dependencies:
      chalk: 4.1.2
      is-unicode-supported: 0.1.0

  long@5.2.3: {}

  lru-cache@10.4.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lru-cache@7.18.3: {}

  lru.min@1.1.1: {}

  magic-string@0.30.8:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0

  make-dir@4.0.0:
    dependencies:
      semver: 7.6.3

  make-error@1.3.6: {}

  makeerror@1.0.12:
    dependencies:
      tmpl: 1.0.5

  math-intrinsics@1.1.0: {}

  md5.js@1.3.5:
    dependencies:
      hash-base: 3.1.0
      inherits: 2.0.4
      safe-buffer: 5.2.1

  media-typer@0.3.0: {}

  memfs@3.5.3:
    dependencies:
      fs-monkey: 1.0.6

  merge-descriptors@1.0.3: {}

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  methods@1.1.2: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mime@1.6.0: {}

  mime@2.6.0: {}

  mimic-fn@2.1.0: {}

  minimalistic-assert@1.0.1: {}

  minimalistic-crypto-utils@1.0.1: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@5.1.6:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  mkdirp@0.5.6:
    dependencies:
      minimist: 1.2.8

  mkdirp@2.1.6: {}

  ms@2.0.0: {}

  ms@2.1.3: {}

  multer@1.4.4-lts.1:
    dependencies:
      append-field: 1.0.0
      busboy: 1.6.0
      concat-stream: 1.6.2
      mkdirp: 0.5.6
      object-assign: 4.1.1
      type-is: 1.6.18
      xtend: 4.0.2

  mute-stream@0.0.8: {}

  mute-stream@1.0.0: {}

  mysql2@3.11.5:
    dependencies:
      aws-ssl-profiles: 1.1.2
      denque: 2.1.0
      generate-function: 2.3.1
      iconv-lite: 0.6.3
      long: 5.2.3
      lru.min: 1.1.1
      named-placeholders: 1.1.3
      seq-queue: 0.0.5
      sqlstring: 2.3.3

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  named-placeholders@1.1.3:
    dependencies:
      lru-cache: 7.18.3

  nan@2.22.0: {}

  natural-compare@1.4.0: {}

  negotiator@0.6.3: {}

  neo-async@2.6.2: {}

  node-abort-controller@3.1.1: {}

  node-emoji@1.11.0:
    dependencies:
      lodash: 4.17.21

  node-fetch@2.7.0:
    dependencies:
      whatwg-url: 5.0.0

  node-int64@0.4.0: {}

  node-releases@2.0.19: {}

  normalize-path@3.0.0: {}

  npm-run-path@4.0.1:
    dependencies:
      path-key: 3.1.1

  object-assign@4.1.1: {}

  object-inspect@1.13.3: {}

  on-finished@2.4.1:
    dependencies:
      ee-first: 1.1.1

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  onetime@5.1.2:
    dependencies:
      mimic-fn: 2.1.0

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  ora@5.4.1:
    dependencies:
      bl: 4.1.0
      chalk: 4.1.2
      cli-cursor: 3.1.0
      cli-spinners: 2.9.2
      is-interactive: 1.0.0
      is-unicode-supported: 0.1.0
      log-symbols: 4.1.0
      strip-ansi: 6.0.1
      wcwidth: 1.0.1

  os-tmpdir@1.0.2: {}

  p-limit@2.3.0:
    dependencies:
      p-try: 2.2.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@4.1.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-try@2.2.0: {}

  package-json-from-dist@1.0.1: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.26.2
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  parse5-htmlparser2-tree-adapter@6.0.1:
    dependencies:
      parse5: 6.0.1

  parse5@5.1.1: {}

  parse5@6.0.1: {}

  parseurl@1.3.3: {}

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-to-regexp@0.1.12: {}

  path-to-regexp@3.3.0: {}

  path-type@4.0.0: {}

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  picomatch@4.0.1: {}

  pirates@4.0.6: {}

  pkg-dir@4.2.0:
    dependencies:
      find-up: 4.1.0

  pluralize@8.0.0: {}

  prelude-ls@1.2.1: {}

  prettier-linter-helpers@1.0.0:
    dependencies:
      fast-diff: 1.3.0

  prettier-plugin-organize-imports@4.1.0(prettier@3.4.2)(typescript@5.7.2):
    dependencies:
      prettier: 3.4.2
      typescript: 5.7.2

  prettier@3.4.2: {}

  pretty-format@29.7.0:
    dependencies:
      '@jest/schemas': 29.6.3
      ansi-styles: 5.2.0
      react-is: 18.3.1

  process-nextick-args@2.0.1: {}

  prompts@2.4.2:
    dependencies:
      kleur: 3.0.3
      sisteransi: 1.0.5

  proxy-addr@2.0.7:
    dependencies:
      forwarded: 0.2.0
      ipaddr.js: 1.9.1

  proxy-from-env@1.1.0: {}

  punycode@2.3.1: {}

  pure-rand@6.1.0: {}

  qs@6.13.0:
    dependencies:
      side-channel: 1.1.0

  qs@6.13.1:
    dependencies:
      side-channel: 1.1.0

  queue-microtask@1.2.3: {}

  randombytes@2.1.0:
    dependencies:
      safe-buffer: 5.2.1

  range-parser@1.2.1: {}

  raw-body@2.5.2:
    dependencies:
      bytes: 3.1.2
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      unpipe: 1.0.0

  react-is@18.3.1: {}

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  reflect-metadata@0.2.2: {}

  repeat-string@1.6.1: {}

  require-directory@2.1.1: {}

  require-from-string@2.0.2: {}

  resolve-cwd@3.0.0:
    dependencies:
      resolve-from: 5.0.0

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve.exports@2.0.3: {}

  resolve@1.22.10:
    dependencies:
      is-core-module: 2.16.0
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  restore-cursor@3.1.0:
    dependencies:
      onetime: 5.1.2
      signal-exit: 3.0.7

  reusify@1.0.4: {}

  rimraf@3.0.2:
    dependencies:
      glob: 7.2.3

  ripemd160@2.0.2:
    dependencies:
      hash-base: 3.1.0
      inherits: 2.0.4

  run-async@2.4.1: {}

  run-async@3.0.0: {}

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  rxjs@7.8.1:
    dependencies:
      tslib: 2.8.1

  safe-buffer@5.1.2: {}

  safe-buffer@5.2.1: {}

  safer-buffer@2.1.2: {}

  schema-utils@3.3.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      ajv-keywords: 3.5.2(ajv@6.12.6)

  schema-utils@4.3.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 8.17.1
      ajv-formats: 2.1.1(ajv@8.17.1)
      ajv-keywords: 5.1.0(ajv@8.17.1)

  secp256k1@3.8.1:
    dependencies:
      bindings: 1.5.0
      bip66: 1.1.5
      bn.js: 4.12.1
      create-hash: 1.2.0
      drbg.js: 1.0.1
      elliptic: 6.6.1
      nan: 2.22.0
      safe-buffer: 5.2.1

  semver@6.3.1: {}

  semver@7.6.3: {}

  send@0.19.0:
    dependencies:
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      encodeurl: 1.0.2
      escape-html: 1.0.3
      etag: 1.8.1
      fresh: 0.5.2
      http-errors: 2.0.0
      mime: 1.6.0
      ms: 2.1.3
      on-finished: 2.4.1
      range-parser: 1.2.1
      statuses: 2.0.1
    transitivePeerDependencies:
      - supports-color

  seq-queue@0.0.5: {}

  serialize-javascript@6.0.2:
    dependencies:
      randombytes: 2.1.0

  serve-static@1.16.2:
    dependencies:
      encodeurl: 2.0.0
      escape-html: 1.0.3
      parseurl: 1.3.3
      send: 0.19.0
    transitivePeerDependencies:
      - supports-color

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.6
      gopd: 1.2.0
      has-property-descriptors: 1.0.2

  setprototypeof@1.2.0: {}

  sha.js@2.4.11:
    dependencies:
      inherits: 2.0.4
      safe-buffer: 5.2.1

  sha256-uint8array@0.10.7: {}

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel-list@1.0.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.3

  side-channel-map@1.0.1:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.6
      object-inspect: 1.13.3

  side-channel-weakmap@1.0.2:
    dependencies:
      call-bound: 1.0.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.6
      object-inspect: 1.13.3
      side-channel-map: 1.0.1

  side-channel@1.1.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.3
      side-channel-list: 1.0.0
      side-channel-map: 1.0.1
      side-channel-weakmap: 1.0.2

  signal-exit@3.0.7: {}

  signal-exit@4.1.0: {}

  sisteransi@1.0.5: {}

  slash@3.0.0: {}

  source-map-support@0.5.13:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map-support@0.5.21:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.6.1: {}

  source-map@0.7.4: {}

  sprintf-js@1.0.3: {}

  sqlstring@2.3.3: {}

  stack-utils@2.0.6:
    dependencies:
      escape-string-regexp: 2.0.0

  statuses@2.0.1: {}

  streamsearch@1.1.0: {}

  string-length@4.0.2:
    dependencies:
      char-regex: 1.0.2
      strip-ansi: 6.0.1

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-bom@3.0.0: {}

  strip-bom@4.0.0: {}

  strip-final-newline@2.0.0: {}

  strip-json-comments@3.1.1: {}

  superagent@9.0.2:
    dependencies:
      component-emitter: 1.3.1
      cookiejar: 2.1.4
      debug: 4.4.0
      fast-safe-stringify: 2.1.1
      form-data: 4.0.1
      formidable: 3.5.2
      methods: 1.1.2
      mime: 2.6.0
      qs: 6.13.1
    transitivePeerDependencies:
      - supports-color

  supertest@7.0.0:
    dependencies:
      methods: 1.1.2
      superagent: 9.0.2
    transitivePeerDependencies:
      - supports-color

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  swagger-ui-dist@5.18.2:
    dependencies:
      '@scarf/scarf': 1.4.0

  symbol-observable@4.0.0: {}

  synckit@0.9.2:
    dependencies:
      '@pkgr/core': 0.1.1
      tslib: 2.8.1

  tapable@2.2.1: {}

  terser-webpack-plugin@5.3.11(webpack@5.97.1):
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      jest-worker: 27.5.1
      schema-utils: 4.3.0
      serialize-javascript: 6.0.2
      terser: 5.37.0
      webpack: 5.97.1

  terser@5.37.0:
    dependencies:
      '@jridgewell/source-map': 0.3.6
      acorn: 8.14.0
      commander: 2.20.3
      source-map-support: 0.5.21

  test-exclude@6.0.0:
    dependencies:
      '@istanbuljs/schema': 0.1.3
      glob: 7.2.3
      minimatch: 3.1.2

  text-table@0.2.0: {}

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  through@2.3.8: {}

  tmp@0.0.33:
    dependencies:
      os-tmpdir: 1.0.2

  tmpl@1.0.5: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  toidentifier@1.0.1: {}

  tr46@0.0.3: {}

  tree-kill@1.2.2: {}

  ts-api-utils@1.4.3(typescript@5.7.2):
    dependencies:
      typescript: 5.7.2

  ts-jest@29.2.5(@babel/core@7.26.0)(@jest/transform@29.7.0)(@jest/types@29.6.3)(babel-jest@29.7.0(@babel/core@7.26.0))(jest@29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)))(typescript@5.7.2):
    dependencies:
      bs-logger: 0.2.6
      ejs: 3.1.10
      fast-json-stable-stringify: 2.1.0
      jest: 29.7.0(@types/node@20.17.10)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2))
      jest-util: 29.7.0
      json5: 2.2.3
      lodash.memoize: 4.1.2
      make-error: 1.3.6
      semver: 7.6.3
      typescript: 5.7.2
      yargs-parser: 21.1.1
    optionalDependencies:
      '@babel/core': 7.26.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      babel-jest: 29.7.0(@babel/core@7.26.0)

  ts-loader@9.5.1(typescript@5.7.2)(webpack@5.97.1):
    dependencies:
      chalk: 4.1.2
      enhanced-resolve: 5.18.0
      micromatch: 4.0.8
      semver: 7.6.3
      source-map: 0.7.4
      typescript: 5.7.2
      webpack: 5.97.1

  ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2):
    dependencies:
      '@cspotcode/source-map-support': 0.8.1
      '@tsconfig/node10': 1.0.11
      '@tsconfig/node12': 1.0.11
      '@tsconfig/node14': 1.0.3
      '@tsconfig/node16': 1.0.4
      '@types/node': 20.17.10
      acorn: 8.14.0
      acorn-walk: 8.3.4
      arg: 4.1.3
      create-require: 1.1.1
      diff: 4.0.2
      make-error: 1.3.6
      typescript: 5.7.2
      v8-compile-cache-lib: 3.0.1
      yn: 3.1.1

  tsconfig-paths-webpack-plugin@4.2.0:
    dependencies:
      chalk: 4.1.2
      enhanced-resolve: 5.18.0
      tapable: 2.2.1
      tsconfig-paths: 4.2.0

  tsconfig-paths@4.2.0:
    dependencies:
      json5: 2.2.3
      minimist: 1.2.8
      strip-bom: 3.0.0

  tslib@2.3.1: {}

  tslib@2.7.0: {}

  tslib@2.8.1: {}

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-detect@4.0.8: {}

  type-fest@0.20.2: {}

  type-fest@0.21.3: {}

  type-fest@4.6.0: {}

  type-is@1.6.18:
    dependencies:
      media-typer: 0.3.0
      mime-types: 2.1.35

  typedarray@0.0.6: {}

  typeorm@0.3.20(mysql2@3.11.5)(ts-node@10.9.2(@types/node@20.17.10)(typescript@5.7.2)):
    dependencies:
      '@sqltools/formatter': 1.2.5
      app-root-path: 3.1.0
      buffer: 6.0.3
      chalk: 4.1.2
      cli-highlight: 2.1.11
      dayjs: 1.11.13
      debug: 4.4.0
      dotenv: 16.4.5
      glob: 10.4.5
      mkdirp: 2.1.6
      reflect-metadata: 0.2.2
      sha.js: 2.4.11
      tslib: 2.8.1
      uuid: 9.0.1
      yargs: 17.7.2
    optionalDependencies:
      mysql2: 3.11.5
      ts-node: 10.9.2(@types/node@20.17.10)(typescript@5.7.2)
    transitivePeerDependencies:
      - supports-color

  typescript@5.7.2: {}

  uid@2.0.2:
    dependencies:
      '@lukeed/csprng': 1.1.0

  uncrypto@0.1.3: {}

  undici-types@6.19.8: {}

  universalify@2.0.1: {}

  unpipe@1.0.0: {}

  update-browserslist-db@1.1.1(browserslist@4.24.3):
    dependencies:
      browserslist: 4.24.3
      escalade: 3.2.0
      picocolors: 1.1.1

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  util-deprecate@1.0.2: {}

  utils-merge@1.0.1: {}

  uuid@9.0.1: {}

  v8-compile-cache-lib@3.0.1: {}

  v8-to-istanbul@9.3.0:
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      '@types/istanbul-lib-coverage': 2.0.6
      convert-source-map: 2.0.0

  validator@13.12.0: {}

  varuint-bitcoin@1.1.2:
    dependencies:
      safe-buffer: 5.2.1

  vary@1.1.2: {}

  walker@1.0.8:
    dependencies:
      makeerror: 1.0.12

  watchpack@2.4.2:
    dependencies:
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11

  wcwidth@1.0.1:
    dependencies:
      defaults: 1.0.4

  webidl-conversions@3.0.1: {}

  webpack-node-externals@3.0.0: {}

  webpack-sources@3.2.3: {}

  webpack@5.97.1:
    dependencies:
      '@types/eslint-scope': 3.7.7
      '@types/estree': 1.0.6
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/wasm-edit': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1
      acorn: 8.14.0
      browserslist: 4.24.3
      chrome-trace-event: 1.0.4
      enhanced-resolve: 5.18.0
      es-module-lexer: 1.5.4
      eslint-scope: 5.1.1
      events: 3.3.0
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11
      json-parse-even-better-errors: 2.3.1
      loader-runner: 4.3.0
      mime-types: 2.1.35
      neo-async: 2.6.2
      schema-utils: 3.3.0
      tapable: 2.2.1
      terser-webpack-plugin: 5.3.11(webpack@5.97.1)
      watchpack: 2.4.2
      webpack-sources: 3.2.3
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - uglify-js

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  word-wrap@1.2.5: {}

  wrap-ansi@6.2.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  write-file-atomic@4.0.2:
    dependencies:
      imurmurhash: 0.1.4
      signal-exit: 3.0.7

  ws@8.17.1: {}

  ws@8.18.0: {}

  xtend@4.0.2: {}

  y18n@5.0.8: {}

  yallist@3.1.1: {}

  yargs-parser@20.2.9: {}

  yargs-parser@21.1.1: {}

  yargs@16.2.0:
    dependencies:
      cliui: 7.0.4
      escalade: 3.2.0
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 20.2.9

  yargs@17.7.2:
    dependencies:
      cliui: 8.0.1
      escalade: 3.2.0
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 21.1.1

  yn@3.1.1: {}

  yocto-queue@0.1.0: {}


================================================
File: tsconfig.build.json
================================================
{
  "extends": "./tsconfig.json",
  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"]
}


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "module": "NodeNext",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "noImplicitAny": true,
    "strictBindCallApply": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "paths": {
      "@app/commons": [
        "libs/commons/src"
      ],
      "@app/commons/*": [
        "libs/commons/src/*"
      ],
      "@app/schemas": [
        "libs/schemas/src"
      ],
      "@app/schemas/*": [
        "libs/schemas/src/*"
      ],
      "@app/sync": [
        "libs/sync/src"
      ],
      "@app/sync/*": [
        "libs/sync/src/*"
      ]
    }
  }
}


================================================
File: .dockerignore
================================================
.git*

*docker-compose*
*Dockerfile*
.dockerignore

node_modules

README.md

dist
mysql
redis
config


================================================
File: .eslintrc.js
================================================
module.exports = {
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: "tsconfig.json",
    tsconfigRootDir: __dirname,
    sourceType: "module",
  },
  plugins: ["@typescript-eslint/eslint-plugin"],
  extends: [
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended",
  ],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: [".eslintrc.js"],
  rules: {
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
  },
};


================================================
File: .prettierignore
================================================
node_modules/

dist/
dist.commonjs/

.npmignore
.prettierrc
tsconfig.json
eslint.config.mjs
.prettierrc

tsconfig.tsbuildinfo
.github/


================================================
File: .prettierrc
================================================
{
  "singleQuote": false,
  "trailingComma": "all",
  "plugins": ["prettier-plugin-organize-imports"]
}


================================================
File: config/config.dob-decoder.toml
================================================
# identifier of specific DOB protocol versions
protocol_versions = [
    "dob/0",
    "dob/1",
]

# connect to the RPC of CKB node
ckb_rpc = "https://testnet.ckb.dev/"

# address that rpc server running at in case of standalone server mode
rpc_server_address = "0.0.0.0:8090"

# directory that stores decoders on hard-disk, including on-chain and off-chain binary files
decoders_cache_directory = "cache/decoders"

# directory that stores DOBs rendering results on hard-disk
dobs_cache_directory = "cache/dobs"

# expiration time indicator for cleaning whole dobs cache, zero means never clean
dobs_cache_expiration_sec = 300

# all deployed on-chain Spore contracts binary hash (order from new to old)
# refer to: https://github.com/sporeprotocol/spore-contract/blob/master/docs/VERSIONS.md
[[available_spores]]
code_hash = "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d"
hash_type = "data1"

[[available_spores]]
code_hash = "0x5e063b4c0e7abeaa6a428df3b693521a3050934cf3b0ae97a800d1bc31449398"
hash_type = "data1"

[[available_spores]]
code_hash = "0x0b1f412fbae26853ff7d082d422c2bdd9e2ff94ee8aaec11240a5b34cc6e890f"
hash_type = "type"

# all deployed on-chain Cluster contracts binary hash (order from new to old)
# refer to: https://github.com/sporeprotocol/spore-contract/blob/master/docs/VERSIONS.md
[[available_clusters]]
code_hash = "0x0bbe768b519d8ea7b96d58f1182eb7e6ef96c541fbd9526975077ee09f049058"
hash_type = "data1"

[[available_clusters]]
code_hash = "0x7366a61534fa7c7e6225ecc0d828ea3b5366adec2b58206f2ee84995fe030075"
hash_type = "data1"

# associate `code_hash` with the corresponding onchain information about `tx_hash` and `out_index`
# server will firstly search onchain decoders by `code_hash` in this configuration, if not found, cache will be used instead
[[onchain_decoder_deployment]]
code_hash = "0xb82abd59ade361a014f0abb692f71b0feb880693c3ccb95b9137b73551d872ce"
tx_hash = "0xb2497dc3e616055125ef8276be7ee21986d2cd4b2ce90992725386cabcb6ea7f"
out_index = 0

[[onchain_decoder_deployment]]
code_hash = "0x32f29aba4b17f3d05bec8cec55d50ef86766fd0bf82fdedaa14269f344d3784a"
tx_hash = "0x8725f0c9a1c634acfd783749c6bdd394c9085aaf4bd2b1ed88f5eb7ed11dfe95"
out_index = 0

[[onchain_decoder_deployment]]
code_hash = "0x1c84212ebd817e9de09d2a79f85cc421b684eda63409cfa75688f98716e77b5f"
tx_hash = "0xc877aca405da6a3038054cb5da20f2db0ed46bb643007d4e0b1d3fe7da155bf0"
out_index = 0

# DOB/0
[[onchain_decoder_deployment]]
code_hash = "0x13cac78ad8482202f18f9df4ea707611c35f994375fa03ae79121312dda9925c"
tx_hash = "0x4a8a0d079f8438bed89e0ece1b14e67ab68e2aa7688a5f4917a59a185e0f8fd5"
out_index = 0

# DOB/1 commit:0bbbfd74966a7d3d4dcadc3d70979855b9e478de
[[onchain_decoder_deployment]]
code_hash = "0xda3525549b72970b4c95f5b5749357f20d1293d335710b674f09c32f7d54b6dc"
tx_hash = "0x18c8f1d55906cf9932c5a72ae4dc039e51e41089db6829edb3f92078c6520bc8"
out_index = 0

================================================
File: config/config.ssri-server.toml
================================================
ckb_rpc = "https://testnet.ckb.dev/"
server_addr = "0.0.0.0:9090"

script_debug = false

================================================
File: config/config.yaml
================================================
port: 8080

mysql:
  host: db
  port: 3306
  username: appdb
  password: appdb
  database: appdb

sync:
  interval: 10000
  threads: 8
  blockChunk: 100
  blockLimitPerInterval: 50000
  blockSyncStart: 10228288

  clearInterval: 1800000
  confirmations: 100

  rgbppBtcCodeHash: "0xd07598deec7ce7b5665310386b4abd06a6d48843e953c5cc2112ad0d5a220364"
  rgbppBtcHashType: "type"

  rgbppBtcTimelockCodeHash: "0x80a09eca26d77cea1f5a69471c59481be7404febf40ee90f886c36a948385b55"
  rgbppBtcTimelockHashType: "type"

  udtTypes:
    # sUDT
    - codeHash: "0x48dbf59b4c7ee1547238021b4869bceedf4eea6b43772e5d66ef8865b6ae7212"
      hashType: "data"
      cellDep:
        outPoint:
          txHash: "0xc1b2ae129fad7465aaa9acc9785f842ba3e6e8b8051d899defa89f5508a77958"
          index: 0
        depType: "code"
    # sUDT
    - codeHash: "0xc5e5dcf215925f7ef4dfaf5f4b4f105bc321c02776d6e7d52a1db3fcd9d011a4"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0xe12877ebd2c3c364dc46c5c992bcfaf4fee33fa13eebdf82c591fc9825aab769"
          index: 0
        depType: "code"
    # xUDT
    - codeHash: "0x50bd8d6680b8b9cf98b73f3c08faf8b2a21914311954118ad6609be6e78a1b95"
      hashType: "data1"
      cellDep:
        outPoint:
          txHash: "0x2267aca4b355d17683f4f74deb37b619c2038805dfd272afbdf63cb50175aa7b"
          index: 0
        depType: "code"
    # xUDT Compatible 1
    - codeHash: "0x98701eaf939113606a8a70013fd2e8f27b8f1e234acdc329f3d71f9e9d3d3233"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0x877c4c3c6f7159f29ea711f0cd21a54f93dcf950642c6a3a5abc9c070051372e"
          index: 0
        depType: "code"
    # xUDT Compatible 2
    - codeHash: "0x1142755a044bf2ee358cba9f2da187ce928c91cd4dc8692ded0337efa677d21a"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0xed7d65b9ad3d99657e37c4285d585fea8a5fcaf58165d54dacf90243f911548b"
          index: 0
        depType: "code"
    # xUDT Compatible 3
    - codeHash: "0xcc9dc33ef234e14bc788c43a4848556a5fb16401a04662fc55db9bb201987037"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0xaec423c2af7fe844b476333190096b10fc5726e6d9ac58a9b71f71ffac204fee"
          index: 0
        depType: "code"
    # xUDT(final_rls)
    - codeHash: "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f"
          index: 0
        depType: "code"

  isMainnet: false
  maxConcurrent: 1024
  ckbRpcTimeout: 60000
  ckbRpcUri: wss://testnet.ckb.dev/ws
  decoderServerUri: http://decoder:8090
  ssriServerUri: http://ssri:9090

  btcRpcs:
    - uri: https://rpc.ankr.com/btc_signet
      # username: username
      # password: password


================================================
File: config.mainnet/config.dob-decoder.toml
================================================
# identifier of specific DOB protocol versions
protocol_versions = [
    "dob/0",
    "dob/1",
]

# connect to the RPC of CKB node
ckb_rpc = "https://mainnet.ckb.dev/"

# address that rpc server running at in case of standalone server mode
rpc_server_address = "0.0.0.0:8090"

# directory that stores decoders on hard-disk, including on-chain and off-chain binary files
decoders_cache_directory = "cache/decoders"

# directory that stores DOBs rendering results on hard-disk
dobs_cache_directory = "cache/dobs"

# expiration time indicator for cleaning whole dobs cache, zero means never clean
dobs_cache_expiration_sec = 300

# all deployed on-chain Spore contracts binary hash (order from new to old)
# refer to: https://github.com/sporeprotocol/spore-contract/blob/master/docs/VERSIONS.md
[[available_spores]]
code_hash = "0x4a4dce1df3dffff7f8b2cd7dff7303df3b6150c9788cb75dcf6747247132b9f5"
hash_type = "data1"

[[available_spores]]
code_hash = "0xcfba73b58b6f30e70caed8a999748781b164ef9a1e218424a6fb55ebf641cb33"
hash_type = "type"

# all deployed on-chain Cluster contracts binary hash (order from new to old)
# refer to: https://github.com/sporeprotocol/spore-contract/blob/master/docs/VERSIONS.md
[[available_clusters]]
code_hash = "0x7366a61534fa7c7e6225ecc0d828ea3b5366adec2b58206f2ee84995fe030075"
hash_type = "data1"

# associate `code_hash` with the corresponding onchain information about `tx_hash` and `out_index`
# server will firstly search onchain decoders by `code_hash` in this configuration, if not found, cache will be used instead
[[onchain_decoder_deployment]]
code_hash = "0xb82abd59ade361a014f0abb692f71b0feb880693c3ccb95b9137b73551d872ce"
tx_hash = "0xa0bb58aa58778d63275e6f77856c30d82c46b9b86785a422e25ac3a362e5b2cd"
out_index = 0

[[onchain_decoder_deployment]]
code_hash = "0x1c84212ebd817e9de09d2a79f85cc421b684eda63409cfa75688f98716e77b5f"
tx_hash = "0xa84f9426f378109dfa717cb3a29fb79b764bf466a7c2588aebcdecc874bcc984"
out_index = 0

# DOB/0
[[onchain_decoder_deployment]]
code_hash = "0x13cac78ad8482202f18f9df4ea707611c35f994375fa03ae79121312dda9925c"
tx_hash = "0x71023885a2178648be6a7f138ee49379000a82cda98dd8adabee99eaaca42fde"
out_index = 0

# DOB/1 commit:0bbbfd74966a7d3d4dcadc3d70979855b9e478de
[[onchain_decoder_deployment]]
code_hash = "0xda3525549b72970b4c95f5b5749357f20d1293d335710b674f09c32f7d54b6dc"
tx_hash = "0x99cc81b5e4c311519173f3f6f771dff64a2f64c97f5f724877c4352cd1b3b32c"
out_index = 0

================================================
File: config.mainnet/config.ssri-server.toml
================================================
ckb_rpc = "https://mainnet.ckb.dev/"
server_addr = "0.0.0.0:9090"

script_debug = false

================================================
File: config.mainnet/config.yaml
================================================
logger:
  - fatal
  - error
  - warn
  - log

port: 8080

mysql:
  host: db
  port: 3306
  username: appdb
  password: appdb
  database: appdb

sync:
  interval: 10000
  threads: 8
  blockChunk: 100
  blockLimitPerInterval: 50000
  blockSyncStart: 11922670

  clearInterval: 1800000
  confirmations: 100

  rgbppBtcCodeHash: "0xbc6c568a1a0d0a09f6844dc9d74ddb4343c32143ff25f727c59edf4fb72d6936"
  rgbppBtcHashType: "type"

  rgbppBtcTimelockCodeHash: "0x70d64497a075bd651e98ac030455ea200637ee325a12ad08aff03f1a117e5a62"
  rgbppBtcTimelockHashType: "type"

  udtTypes:
    # sUDT
    - codeHash: "0x5e7a36a77e68eecc013dfa2fe6a23f3b6c344b04005808694ae6dd45eea4cfd5"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0xc7813f6a415144643970c2e88e0bb6ca6a8edc5dd7c1022746f628284a9936d5"
          index: 0
        depType: "code"
    # xUDT
    - codeHash: "0x50bd8d6680b8b9cf98b73f3c08faf8b2a21914311954118ad6609be6e78a1b95"
      hashType: "data1"
      cellDep:
        outPoint:
          txHash: "0xf6a5eef65101899db9709c8de1cc28f23c1bee90d857ebe176f6647ef109e20d"
          index: 0
        depType: "code"
    # xUDT Compatible 1
    - codeHash: "0x092c2c4a26ea475a8e860c29cf00502103add677705e2ccd8d6fe5af3caa5ae3"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0x3ceb520f240b168e0bddf0d89b4bcabbe7d4fa69751057cbe8e4f27239fad0e9"
          index: 0
        depType: "code"
    # xUDT Compatible 2
    - codeHash: "0x26a33e0815888a4a0614a0b7d09fa951e0993ff21e55905510104a0b1312032b"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0x8ec1081bd03e5417bb4467e96f4cec841acdd35924538a35e7547fe320118977"
          index: 0
        depType: "code"
    # xUDT Compatible 3
    - codeHash: "0x42a0b2aacc836c0fc2bbd421a9020de42b8411584190f30be547fdf54214acc3"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0x8dae0c83d77b7349f390d967b254e8329177b5c8c0e6da97c4a51efcca958ef5"
          index: 4
        depType: "code"
    # xUDT Compatible 4
    - codeHash: "0xbfa35a9c38a676682b65ade8f02be164d48632281477e36f8dc2f41f79e56bfc"
      hashType: "type"
      cellDep:
        outPoint:
          txHash: "0xf6a5eef65101899db9709c8de1cc28f23c1bee90d857ebe176f6647ef109e20d"
          index: 0
        depType: "code"

  isMainnet: true
  maxConcurrent: 1024
  ckbRpcTimeout: 60000
  ckbRpcUri: wss://mainnet.ckb.dev/ws
  decoderServerUri: http://decoder:8090
  ssriServerUri: http://ssri:9090

  btcRpcs:
    - uri: https://rpc.ankr.com/btc
      # username: username
      # password: password
    - uri: https://bitcoin.publicnode.com


================================================
File: libs/asset/tsconfig.lib.json
================================================
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../../dist/libs/sync"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "test", "**/*spec.ts"]
}


================================================
File: libs/asset/src/asset.controller.ts
================================================
import {
  ApiError,
  assert,
  asyncMap,
  Chain,
  EventType,
  extractIsomorphicInfo,
  IsomorphicBinding,
  LeapType,
  RpcError,
  RpcResponse,
  ScriptMode,
  TxAssetCellData,
  TxAssetCellDetail,
} from "@app/commons";
import { ccc } from "@ckb-ccc/shell";
import { Controller, Get, Param } from "@nestjs/common";
import { ApiOkResponse } from "@nestjs/swagger";
import { AssetService } from "./asset.service";

(BigInt.prototype as unknown as { toJSON: () => string }).toJSON = function () {
  return this.toString();
};

interface InputCell {
  cell: ccc.Cell;
  spender?: ccc.OutPointLike;
}

@Controller()
export class AssetController {
  constructor(private readonly service: AssetService) {}

  async cellDetailWithoutAssets(
    cell: ccc.Cell,
    index: number,
    eventType: EventType,
    lockMode: ScriptMode,
    typeMode: ScriptMode,
  ): Promise<TxAssetCellDetail> {
    const isomorphicInfo = extractIsomorphicInfo(cell.cellOutput.lock);
    let isomorphicBinding: IsomorphicBinding | undefined = undefined;
    if (isomorphicInfo) {
      switch (lockMode) {
        case ScriptMode.RgbppBtc:
          {
            isomorphicBinding = {
              chain: Chain.Btc,
              txHash: ccc.hexFrom(isomorphicInfo.txHash),
              vout: Number(isomorphicInfo.index),
              leapType: LeapType.None, // default is none
            };
          }
          break;
        case ScriptMode.RgbppDoge: {
          isomorphicBinding = {
            chain: Chain.Doge,
            txHash: ccc.hexFrom(isomorphicInfo.txHash),
            vout: Number(isomorphicInfo.index),
            leapType: LeapType.None, // default is none
          };
        }
      }
    }
    const cellAsset: TxAssetCellDetail = {
      index,
      capacity: cell.cellOutput.capacity,
      eventType,
      address: await this.service.scriptToAddress(cell.cellOutput.lock),
      typeCodeName: typeMode,
      rgbppBinding: isomorphicBinding,
    };
    return cellAsset;
  }

  async extractCellAssetFromCell(
    cell: ccc.Cell,
    index: number,
    eventType: EventType,
  ): Promise<TxAssetCellDetail> {
    const typeScript = assert(cell.cellOutput.type, RpcError.CellNotAsset);
    const lockMode = await this.service.scriptMode(cell.cellOutput.lock);
    const typeMode = await this.service.scriptMode(typeScript);

    const cellAsset = await this.cellDetailWithoutAssets(
      cell,
      index,
      eventType,
      lockMode,
      typeMode,
    );

    const token = await this.service.getTokenFromCell(cell, lockMode, typeMode);
    if (token) {
      const { tokenInfo, balance, mintable } = token;
      cellAsset.tokenData = {
        tokenId: ccc.hexFrom(tokenInfo.hash),
        mintable,
        name: tokenInfo.name ?? undefined,
        symbol: tokenInfo.symbol ?? undefined,
        decimal: tokenInfo.decimals ?? undefined,
        amount: balance,
      };
    }

    const cluster = await this.service.getClusterInfoFromCell(cell, typeMode);
    if (cluster) {
      cellAsset.nftData = {
        clusterId: ccc.hexFrom(cluster.clusterId),
        clusterName: cluster.name,
        clusterDescription: cluster.description,
      };
      // cluster mint event should be replaced with issue event
      if (eventType === EventType.Mint) {
        cellAsset.eventType = EventType.Issue;
      }
    }

    const spore = await this.service.getSporeFromCell(cell, typeMode);
    if (spore) {
      cellAsset.nftData = {
        tokenId: ccc.hexFrom(spore.sporeId),
        clusterId: spore.clusterId ? ccc.hexFrom(spore.clusterId) : undefined,
        content: spore.content,
        contentType: spore.contentType,
      };
    }
    return cellAsset;
  }

  async extractTxAssetFromTx(
    tx: ccc.Transaction,
    inputCells: InputCell[],
    blockHash?: ccc.Hex,
    blockHeight?: ccc.Num,
  ): Promise<TxAssetCellData> {
    const txAssetData: TxAssetCellData = {
      txId: tx.hash(),
      blockHash,
      blockHeight,
      inputs: [],
      outputs: [],
    };

    const tokenGroups: Record<
      ccc.Hex,
      {
        input: {
          totalBalance: ccc.Num;
          indices: Array<number>;
        };
        output: {
          totalBalance: ccc.Num;
          mintable: boolean;
          indices: Array<number>;
        };
      }
    > = {};

    // extract and parse inputs
    for (const [index, input] of inputCells.entries()) {
      if (input.cell.cellOutput.type === undefined) {
        continue;
      }
      const cellAsset = await this.extractCellAssetFromCell(
        input.cell,
        index,
        EventType.Burn,
      );
      if (cellAsset.typeCodeName === ScriptMode.Unknown) {
        continue;
      }
      if (cellAsset.tokenData) {
        const tokenId = cellAsset.tokenData.tokenId;
        if (tokenGroups[tokenId]) {
          tokenGroups[tokenId].input.totalBalance += cellAsset.tokenData.amount;
          tokenGroups[tokenId].input.indices.push(txAssetData.inputs.length);
        } else {
          tokenGroups[tokenId] = {
            input: {
              totalBalance: cellAsset.tokenData.amount,
              indices: [txAssetData.inputs.length],
            },
            output: {
              totalBalance: ccc.numFrom(0),
              mintable: cellAsset.tokenData.mintable,
              indices: [],
            },
          };
        }
      }
      txAssetData.inputs.push(cellAsset);
    }

    // extract and parse outputs
    const outputCells = this.service.extractCellsFromTxOutputs(tx);
    for (const [index, output] of outputCells.entries()) {
      if (output.cell.cellOutput.type === undefined) {
        continue;
      }
      const cellAsset = await this.extractCellAssetFromCell(
        output.cell,
        index,
        EventType.Mint,
      );
      if (cellAsset.typeCodeName === ScriptMode.Unknown) {
        continue;
      }
      if (cellAsset.nftData) {
        const nftIndex = txAssetData.inputs.findIndex(
          (input) =>
            input.nftData?.tokenId === cellAsset.nftData?.tokenId &&
            input.nftData?.clusterId === cellAsset.nftData?.clusterId,
        );
        if (nftIndex >= 0) {
          txAssetData.inputs[nftIndex].eventType = EventType.Transfer;
          cellAsset.eventType = EventType.Transfer;
        }
      }
      if (cellAsset.tokenData) {
        const tokenId = cellAsset.tokenData.tokenId;
        if (tokenGroups[tokenId]) {
          tokenGroups[tokenId].output.totalBalance +=
            cellAsset.tokenData.amount;
          tokenGroups[tokenId].output.indices.push(txAssetData.outputs.length);
        } else {
          tokenGroups[tokenId] = {
            input: {
              totalBalance: ccc.numFrom(0),
              indices: [],
            },
            output: {
              totalBalance: cellAsset.tokenData.amount,
              mintable: cellAsset.tokenData.mintable,
              indices: [txAssetData.outputs.length],
            },
          };
        }
      }
      txAssetData.outputs.push(cellAsset);
    }

    // re-manage token events based on the calculation of token diffs
    for (const group of Object.values(tokenGroups)) {
      if (group.input.totalBalance === 0n || group.output.totalBalance === 0n) {
        continue;
      }
      if (group.input.totalBalance > group.output.totalBalance) {
        group.input.indices.forEach(
          (index) =>
            (txAssetData.inputs[index].eventType = EventType.BurnAndTransfer),
        );
        group.output.indices.forEach(
          (index) =>
            (txAssetData.outputs[index].eventType = EventType.BurnAndTransfer),
        );
        continue;
      }
      if (group.input.totalBalance === group.output.totalBalance) {
        group.input.indices.forEach(
          (index) => (txAssetData.inputs[index].eventType = EventType.Transfer),
        );
        group.output.indices.forEach(
          (index) =>
            (txAssetData.outputs[index].eventType = EventType.Transfer),
        );
        continue;
      }
      if (group.input.totalBalance < group.output.totalBalance) {
        group.input.indices.forEach(
          (index) =>
            (txAssetData.inputs[index].eventType = EventType.MintAndTransfer),
        );
        group.output.indices.forEach(
          (index) =>
            (txAssetData.outputs[index].eventType = EventType.MintAndTransfer),
        );
        continue;
      }
    }

    // filter and append token metadata which uses unique type as identifier
    const groupKeys = Object.keys(tokenGroups);
    if (groupKeys.length > 0) {
      const firstTokenId = groupKeys[0];
      for (const [index, output] of txAssetData.outputs.entries()) {
        if (output.typeCodeName === ScriptMode.UniqueType) {
          const tokenMetadata = await this.service.getUniqueInfoFromCell(
            outputCells[index].cell,
          );
          if (tokenMetadata) {
            const tokenId = ccc.hexFrom(firstTokenId);
            txAssetData.outputs[index].tokenData = {
              tokenId,
              mintable: tokenGroups[tokenId].output.mintable,
              name: tokenMetadata.name ?? undefined,
              symbol: tokenMetadata.symbol ?? undefined,
              decimal: tokenMetadata.decimals ?? undefined,
              amount: tokenGroups[tokenId].output.totalBalance,
            };
            txAssetData.outputs[index].eventType = EventType.Issue;
          }
        }
      }
    }

    return this.filterAndChangeLeapTypes(txAssetData);
  }

  filterAndChangeLeapTypes(txAssetData: TxAssetCellData): TxAssetCellData {
    for (const rgbppChain of [Chain.Btc, Chain.Doge]) {
      const hasRgbppModeInInputs = txAssetData.inputs.some(
        (input) => input.rgbppBinding?.chain === rgbppChain,
      );
      const hasRgbppModeInOutputs = txAssetData.outputs.some(
        (output) => output.rgbppBinding?.chain === rgbppChain,
      );
      if (hasRgbppModeInInputs && !hasRgbppModeInOutputs) {
        for (let i = 0; i < txAssetData.inputs.length; i++) {
          if (txAssetData.inputs[i].rgbppBinding?.chain === rgbppChain) {
            txAssetData.inputs[i].rgbppBinding!.leapType = LeapType.FromUtxo;
          }
        }
      }
      if (!hasRgbppModeInInputs && hasRgbppModeInOutputs) {
        for (let i = 0; i < txAssetData.outputs.length; i++) {
          if (txAssetData.outputs[i].rgbppBinding?.chain === rgbppChain) {
            txAssetData.outputs[i].rgbppBinding!.leapType = LeapType.ToUtxo;
          }
        }
      }
    }
    return txAssetData;
  }

  @ApiOkResponse({
    type: TxAssetCellData,
    description:
      "Query a list of assets in the cell from a transaction by TxHash",
  })
  @Get("/assetCells/by-transaction/:txHash")
  async queryTxAssetCellDataByTxHash(
    @Param("txHash") txHash: string,
  ): Promise<RpcResponse<TxAssetCellData>> {
    try {
      const { tx, blockHash, blockNumber } = assert(
        await this.service.getTransactionWithBlockByTxHash(txHash),
        RpcError.TxNotFound,
      );
      const inputCells = await this.service.extractCellsFromTxInputs(tx);
      return {
        code: 0,
        data: await this.extractTxAssetFromTx(
          tx,
          inputCells,
          blockHash,
          blockNumber,
        ),
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }

  @ApiOkResponse({
    type: TxAssetCellData,
    description: "Query a list of assets in the cell from a block by BlockHash",
  })
  @Get("/assetCells/by-block/:blockHash")
  async queryTxAssetCellDataListByBlockHash(
    @Param("blockHash") blockHash: string,
  ): Promise<RpcResponse<TxAssetCellData[]>> {
    try {
      const block = assert(
        await this.service.getBlockByBlockHash(blockHash),
        RpcError.BlockNotFound,
      );
      const txAssetCellDataList: TxAssetCellData[] = [];
      await asyncMap(block.transactions, async (tx) => {
        const inputCells = await this.service.extractCellsFromTxInputs(tx);
        const txAssetCellData = await this.extractTxAssetFromTx(
          tx,
          inputCells,
          block.header.hash,
          block.header.number,
        );
        if (
          txAssetCellData.inputs.length > 0 ||
          txAssetCellData.outputs.length > 0
        ) {
          txAssetCellDataList.push(txAssetCellData);
        }
      });
      return {
        code: 0,
        data: txAssetCellDataList,
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }
}


================================================
File: libs/asset/src/asset.module.ts
================================================
import { Module } from "@nestjs/common";
import { AssetController } from "./asset.controller";
import { AssetService } from "./asset.service";
import { ClusterRepo, SporeRepo, UdtInfoRepo } from "./repos";

@Module({
  providers: [AssetService, UdtInfoRepo, SporeRepo, ClusterRepo],
  exports: [AssetService],
  controllers: [AssetController],
})
export class AssetModule {}


================================================
File: libs/asset/src/asset.service.ts
================================================
import {
  assertConfig,
  mintableScriptMode,
  parseBtcAddress,
  parseScriptMode,
  ScriptMode,
} from "@app/commons";
import { Cluster, Spore, UdtInfo } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { cccA } from "@ckb-ccc/shell/advanced";
import { Inject, Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { AxiosInstance } from "axios";
import { ClusterRepo, SporeRepo, UdtInfoRepo } from "./repos";

@Injectable()
export class AssetService {
  private readonly logger = new Logger(AssetService.name);

  private readonly client: ccc.Client;
  private readonly rgbppBtcCodeHash: ccc.Hex;
  private readonly rgbppBtcHashType: ccc.HashType;
  private readonly rgbppBtcTimelockCodeHash: ccc.Hex;
  private readonly rgbppBtcTimelockHashType: ccc.HashType;
  private readonly udtTypes: {
    codeHash: ccc.HexLike;
    hashType: ccc.HashTypeLike;
  }[];

  constructor(
    private readonly configService: ConfigService,
    private readonly udtInfoRepo: UdtInfoRepo,
    private readonly sporeRepo: SporeRepo,
    private readonly clusterRepo: ClusterRepo,
    @Inject("BTC_REQUESTERS") private readonly btcRequesters: AxiosInstance[],
  ) {
    const isMainnet = configService.get<boolean>("sync.isMainnet");
    const ckbRpcUri = configService.get<string>("sync.ckbRpcUri");
    this.client = isMainnet
      ? new ccc.ClientPublicMainnet({ url: ckbRpcUri })
      : new ccc.ClientPublicTestnet({ url: ckbRpcUri });

    this.rgbppBtcCodeHash = ccc.hexFrom(
      assertConfig(configService, "sync.rgbppBtcCodeHash"),
    );
    this.rgbppBtcHashType = ccc.hashTypeFrom(
      assertConfig(configService, "sync.rgbppBtcHashType"),
    );
    this.rgbppBtcTimelockCodeHash = ccc.hexFrom(
      assertConfig(configService, "sync.rgbppBtcTimelockCodeHash"),
    );
    this.rgbppBtcTimelockHashType = ccc.hashTypeFrom(
      assertConfig(configService, "sync.rgbppBtcTimelockHashType"),
    );

    const udtTypes =
      configService.get<
        { codeHash: ccc.HexLike; hashType: ccc.HashTypeLike }[]
      >("sync.udtTypes") ?? [];
    this.udtTypes = udtTypes.map((t) => ccc.Script.from({ ...t, args: "" }));
  }

  async scriptMode(script: ccc.ScriptLike): Promise<ScriptMode> {
    const extension = this.udtTypes.map((t) => ({
      codeHash: ccc.hexFrom(t.codeHash),
      hashType: ccc.hashTypeFrom(t.hashType),
      mode: ScriptMode.Udt,
    }));
    extension.push({
      codeHash: this.rgbppBtcCodeHash,
      hashType: this.rgbppBtcHashType,
      mode: ScriptMode.RgbppBtc,
    });
    extension.push({
      codeHash: this.rgbppBtcTimelockCodeHash,
      hashType: this.rgbppBtcTimelockHashType,
      mode: ScriptMode.RgbppBtcTimelock,
    });
    return await parseScriptMode(script, this.client, extension);
  }

  async scriptToAddress(scriptLike: ccc.ScriptLike): Promise<string> {
    if (
      scriptLike.codeHash === this.rgbppBtcCodeHash &&
      scriptLike.hashType === this.rgbppBtcHashType
    ) {
      return parseBtcAddress({
        client: this.client,
        rgbppScript: scriptLike,
        requesters: this.btcRequesters,
        logger: this.logger,
      });
    }
    const script = ccc.Script.from(scriptLike);
    return ccc.Address.fromScript(script, this.client).toString();
  }

  async getTransactionWithBlockByTxHash(txHash: string): Promise<
    | {
        tx: ccc.Transaction;
        blockHash?: ccc.Hex;
        blockNumber?: ccc.Num;
      }
    | undefined
  > {
    const response = await this.client.getTransaction(txHash);
    return response
      ? {
          tx: response.transaction,
          blockHash: response.blockHash,
          blockNumber: response.blockNumber,
        }
      : undefined;
  }

  async getBlockByBlockHash(
    blockHash: string,
  ): Promise<ccc.ClientBlock | undefined> {
    return await this.client.getBlockByHash(blockHash);
  }

  async checkCellConsumed(cell: ccc.Cell): Promise<ccc.Hex | undefined> {
    // If the cell is not an asset, skip finding the spender
    if (cell.cellOutput.type === undefined) {
      return;
    }
    const liveCell = await this.client.getCellLive(cell.outPoint);
    if (liveCell) {
      return;
    }
    const cellTx = await this.client.getTransaction(cell.outPoint.txHash);
    if (cellTx === undefined) {
      return;
    }
    const spentTxs = this.client.findTransactions(
      {
        script: cell.cellOutput.lock,
        scriptType: "lock",
        scriptSearchMode: "exact",
        filter: {
          script: cell.cellOutput.type,
        },
      },
      "desc",
      10,
    );
    for await (const tx of spentTxs) {
      if (!tx.isInput || tx.blockNumber < (cellTx.blockNumber ?? 0n)) {
        continue;
      }
      const maybeConsumerTx = await this.client.getTransaction(tx.txHash);
      if (
        maybeConsumerTx &&
        maybeConsumerTx.transaction.inputs.some((input) =>
          input.previousOutput.eq(cell.outPoint),
        )
      ) {
        return tx.txHash;
      }
    }
  }

  async extractCellsFromTxInputs(tx: ccc.Transaction): Promise<
    {
      cell: ccc.Cell;
      spender?: ccc.OutPointLike;
    }[]
  > {
    const promises = tx.inputs.map((input) =>
      this.client.getCell(input.previousOutput),
    );
    const cells = (await Promise.all(promises)).filter(
      (cell) => cell !== undefined,
    );

    return cells.map((cell, index) => ({
      cell,
      spender: {
        txHash: tx.hash(),
        index,
      },
    }));
  }

  extractCellsFromTxOutputs(tx: ccc.Transaction): {
    cell: ccc.Cell;
    spenderTx?: ccc.Hex;
  }[] {
    const cells: ccc.Cell[] = [];
    for (const [index, output] of tx.outputs.entries()) {
      cells.push(
        ccc.Cell.from({
          outPoint: {
            txHash: tx.hash(),
            index: ccc.numFrom(index),
          },
          cellOutput: output,
          outputData: tx.outputsData[index],
        }),
      );
    }
    return cells.map((cell) => {
      return {
        cell,
        spenderTx: undefined, //await this.checkCellConsumed(cell),
      };
    });
  }

  async getTokenFromCell(
    cell: ccc.Cell,
    lockMode: ScriptMode,
    typeMode: ScriptMode,
  ): Promise<
    | {
        tokenInfo: UdtInfo;
        mintable: boolean;
        balance: ccc.Num;
      }
    | undefined
  > {
    if (typeMode !== ScriptMode.Udt || !cell.cellOutput.type) {
      return;
    }
    const tokenHash = cell.cellOutput.type.hash();
    const tokenInfo =
      (await this.udtInfoRepo.getTokenInfo(tokenHash)) ??
      this.udtInfoRepo.create({
        hash: tokenHash,
        typeCodeHash: cell.cellOutput.type.codeHash,
        typeHashType: cell.cellOutput.type.hashType,
        typeArgs: cell.cellOutput.type.args,
      });
    const tokenAmount =
      cell.outputData.length >= 16 ? ccc.udtBalanceFrom(cell.outputData) : 0n;
    return {
      tokenInfo,
      mintable: mintableScriptMode(lockMode),
      balance: tokenAmount,
    };
  }

  async getUniqueInfoFromCell(cell: ccc.Cell): Promise<UdtInfo | undefined> {
    if (!cell.cellOutput.type) {
      return;
    }
    const mode = await this.scriptMode(cell.cellOutput.type);
    if (mode !== ScriptMode.UniqueType) {
      return;
    }
    const outputData = ccc.bytesFrom(cell.outputData);
    // | decimals | name len |  ... name ...  | symbol len |  ... symbol ...  |
    // | 1 bytes  | 1 bytes  | name len bytes | 1 bytes    | symbol len bytes |
    if (outputData.length < 1) {
      return;
    }
    const decimals = Number(ccc.numFromBytes(outputData.slice(0, 1)));

    const udtInfo = this.udtInfoRepo.create({
      decimals,
    });

    if (outputData.length < 2) {
      return udtInfo;
    }
    const nameLen = Number(ccc.numFromBytes(outputData.slice(1, 2)));
    if (outputData.length < 2 + nameLen) {
      return udtInfo;
    }
    udtInfo.name = ccc.bytesTo(outputData.slice(2, 2 + nameLen), "utf8");

    if (outputData.length < 3 + nameLen) {
      return udtInfo;
    }
    const symbolLen = Number(
      ccc.numFromBytes(outputData.slice(2 + nameLen, 3 + nameLen)),
    );
    if (outputData.length < 3 + nameLen + symbolLen) {
      return udtInfo;
    }
    udtInfo.symbol = ccc.bytesTo(
      outputData.slice(3 + nameLen, 3 + nameLen + symbolLen),
      "utf8",
    );
    return udtInfo;
  }

  async getClusterInfoFromCell(
    cell: ccc.Cell,
    typeMode: ScriptMode,
  ): Promise<Cluster | undefined> {
    if (typeMode !== ScriptMode.Cluster || !cell.cellOutput.type) {
      return;
    }
    const clusterId = cell.cellOutput.type.args;
    return (
      (await this.clusterRepo.getCluster(clusterId)) ??
      this.clusterRepo.create({
        clusterId,
        ...cccA.sporeA.unpackToRawClusterData(cell.outputData),
      })
    );
  }

  async getSporeFromCell(
    cell: ccc.Cell,
    typeMode: ScriptMode,
  ): Promise<Spore | undefined> {
    if (typeMode !== ScriptMode.Spore || !cell.cellOutput.type) {
      return;
    }
    const sporeId = cell.cellOutput.type.args;
    const spore = await this.sporeRepo.getSpore(sporeId);
    if (spore) {
      return spore;
    } else {
      const sporeData = cccA.sporeA.unpackToRawSporeData(cell.outputData);
      return this.sporeRepo.create({
        sporeId,
        contentType: sporeData.contentType,
        content: ccc.hexFrom(sporeData.content),
        clusterId: sporeData.clusterId
          ? ccc.hexFrom(sporeData.clusterId)
          : undefined,
      });
    }
  }
}


================================================
File: libs/asset/src/index.ts
================================================
export * from "./asset.module";
export * from "./asset.service";


================================================
File: libs/asset/src/repos/cluster.repo.ts
================================================
import { Cluster } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class ClusterRepo extends Repository<Cluster> {
  constructor(manager: EntityManager) {
    super(Cluster, manager);
  }

  async getCluster(clusterId: ccc.HexLike): Promise<Cluster | null> {
    return await this.findOne({
      where: {
        clusterId: ccc.hexFrom(clusterId),
      },
      order: {
        updatedAtHeight: "DESC",
      },
    });
  }
}


================================================
File: libs/asset/src/repos/index.ts
================================================
export * from "./cluster.repo";
export * from "./spore.repo";
export * from "./udtInfo.repo";


================================================
File: libs/asset/src/repos/spore.repo.ts
================================================
import { Spore } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class SporeRepo extends Repository<Spore> {
  constructor(manager: EntityManager) {
    super(Spore, manager);
  }

  async getSporeCountByClusterId(clusterId: ccc.HexLike): Promise<number> {
    return await this.manager
      .createQueryBuilder(Spore, "spore")
      .select("max(updatedAtHeight)")
      .where("spore.clusterId = :clusterId", {
        clusterId: ccc.hexFrom(clusterId),
      })
      .groupBy("spore.sporeId")
      .getCount();
  }

  async getHolderCountByClusterId(clusterId: ccc.HexLike): Promise<number> {
    return await this.manager
      .createQueryBuilder(Spore, "spore")
      .select("max(updatedAtHeight)")
      .where("spore.clusterId = :clusterId", {
        clusterId: ccc.hexFrom(clusterId),
      })
      .groupBy("spore.ownerAddress")
      .getCount();
  }

  async getSpore(sporeId: ccc.HexLike): Promise<Spore | null> {
    return await this.findOne({
      where: {
        sporeId: ccc.hexFrom(sporeId),
      },
      order: {
        updatedAtHeight: "DESC",
      },
    });
  }
}


================================================
File: libs/asset/src/repos/udtInfo.repo.ts
================================================
import { UdtInfo } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class UdtInfoRepo extends Repository<UdtInfo> {
  constructor(manager: EntityManager) {
    super(UdtInfo, manager);
  }

  async getTokenInfo(tokenHash: ccc.HexLike): Promise<UdtInfo | undefined> {
    return (
      (await this.findOne({
        where: {
          hash: ccc.hexFrom(tokenHash),
        },
        order: {
          updatedAtHeight: "DESC",
        },
      })) ?? undefined
    );
  }
}


================================================
File: libs/block/tsconfig.lib.json
================================================
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../../dist/libs/sync"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "test", "**/*spec.ts"]
}


================================================
File: libs/block/src/block.controller.ts
================================================
import {
  ApiError,
  assert,
  BlockHeader,
  parseSortableInt,
  RpcError,
  RpcResponse,
} from "@app/commons";
import { ccc } from "@ckb-ccc/shell";
import { Controller, Get, Param, Query } from "@nestjs/common";
import { ApiOkResponse, ApiQuery } from "@nestjs/swagger";
import { BlockService } from "./block.service";

(BigInt.prototype as unknown as { toJSON: () => string }).toJSON = function () {
  return this.toString();
};

@Controller()
export class BlockController {
  constructor(private readonly service: BlockService) {}

  @ApiOkResponse({
    type: BlockHeader,
    description: "Get tip block",
  })
  @ApiQuery({
    name: "fromDb",
    required: false,
    default: true,
    description:
      "Determine whether to get the block from the database or from the CKB node",
  })
  @Get("/blocks/latest")
  async getLatestBlock(
    @Query("fromDb") fromDb: boolean = true,
  ): Promise<RpcResponse<BlockHeader>> {
    try {
      const tipHeader = assert(
        await this.service.getBlockHeader({
          fromDb,
        }),
        RpcError.BlockNotFound,
      );
      return {
        code: 0,
        data: {
          version: 0,
          preHash: ccc.hexFrom(tipHeader.parentHash),
          height: ccc.numFrom(tipHeader.height),
          blockTime: tipHeader.timestamp,
          hash: ccc.hexFrom(tipHeader.hash),
        },
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }

  @ApiOkResponse({
    type: BlockHeader,
    description: "Get block by block number",
  })
  @ApiQuery({
    name: "fromDb",
    required: false,
    default: true,
    description:
      "Determine whether to get the block from the database or from the CKB node",
  })
  @Get("/blocks/by-number/:blockNumber")
  async getBlockHeaderByNumber(
    @Param("blockNumber") blockNumber: number,
    @Query("fromDb") fromDb: boolean = true,
  ): Promise<RpcResponse<BlockHeader>> {
    try {
      const blockHeader = assert(
        await this.service.getBlockHeader({
          blockNumber,
          fromDb,
        }),
        RpcError.BlockNotFound,
      );
      return {
        code: 0,
        data: {
          version: 0,
          preHash: ccc.hexFrom(blockHeader.parentHash),
          height: parseSortableInt(blockHeader.height),
          blockTime: blockHeader.timestamp,
          hash: ccc.hexFrom(blockHeader.hash),
        },
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }
}


================================================
File: libs/block/src/block.module.ts
================================================
import { Module } from "@nestjs/common";
import { BlockController } from "./block.controller";
import { BlockService } from "./block.service";
import { BlockRepo } from "./repos";

@Module({
  providers: [BlockService, BlockRepo],
  exports: [BlockService],
  controllers: [BlockController],
})
export class BlockModule {}


================================================
File: libs/block/src/block.service.ts
================================================
import { headerToRepoBlock } from "@app/commons";
import { Block } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { BlockRepo } from "./repos/block.repo";

@Injectable()
export class BlockService {
  private readonly client: ccc.Client;

  constructor(
    private readonly configService: ConfigService,
    private readonly blockRepo: BlockRepo,
  ) {
    const isMainnet = configService.get<boolean>("sync.isMainnet");
    const ckbRpcUri = configService.get<string>("sync.ckbRpcUri");
    this.client = isMainnet
      ? new ccc.ClientPublicMainnet({ url: ckbRpcUri })
      : new ccc.ClientPublicTestnet({ url: ckbRpcUri });
  }

  async getBlockHeader(params: {
    blockNumber?: number;
    fromDb: boolean;
  }): Promise<Block | undefined> {
    const { blockNumber, fromDb } = params;
    if (blockNumber) {
      if (fromDb) {
        return await this.blockRepo.getBlockByNumber(ccc.numFrom(blockNumber));
      } else {
        const header = await this.client.getHeaderByNumber(blockNumber);
        return headerToRepoBlock(header);
      }
    } else {
      if (fromDb) {
        return await this.blockRepo.getTipBlock();
      } else {
        const header = await this.client.getTipHeader();
        return headerToRepoBlock(header);
      }
    }
  }
}


================================================
File: libs/block/src/index.ts
================================================
export * from "./block.module";
export * from "./block.service";


================================================
File: libs/block/src/repos/block.repo.ts
================================================
import { formatSortableInt } from "@app/commons";
import { Block } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class BlockRepo extends Repository<Block> {
  constructor(manager: EntityManager) {
    super(Block, manager);
  }

  async getBlockByHash(hash: ccc.Hex): Promise<Block | undefined> {
    return (await this.findOneBy({ hash })) ?? undefined;
  }

  async getBlockByNumber(number: ccc.Num): Promise<Block | undefined> {
    const height = formatSortableInt(number);
    return (await this.findOneBy({ height })) ?? undefined;
  }

  async getTipBlock(): Promise<Block | undefined> {
    const blocks = await this.find({
      order: { height: "DESC" },
      take: 1,
    });
    return blocks[0];
  }

  async getBlockByHashOrNumber(params: {
    hash?: ccc.Hex;
    number?: ccc.Num;
  }): Promise<Block | undefined> {
    const { hash, number } = params;
    if (hash) {
      return await this.getBlockByHash(hash);
    } else if (number) {
      return await this.getBlockByNumber(number);
    } else {
      throw new Error("One of the block hash or number should be provided");
    }
  }
}


================================================
File: libs/block/src/repos/index.ts
================================================
export * from "./block.repo";


================================================
File: libs/cell/tsconfig.lib.json
================================================
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../../dist/libs/sync"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "test", "**/*spec.ts"]
}


================================================
File: libs/cell/src/cell.controller.ts
================================================
import {
  ApiError,
  assert,
  asyncMap,
  CellSpendInfo,
  Chain,
  extractIsomorphicInfo,
  IsomorphicBinding,
  LeapType,
  PagedTokenResult,
  RpcError,
  RpcResponse,
  ScriptMode,
  TokenCell,
} from "@app/commons";
import { ccc } from "@ckb-ccc/shell";
import { Controller, Get, Param, Query } from "@nestjs/common";
import { ApiOkResponse, ApiQuery } from "@nestjs/swagger";
import { CellService } from "./cell.service";

(BigInt.prototype as unknown as { toJSON: () => string }).toJSON = function () {
  return this.toString();
};

@Controller()
export class CellController {
  constructor(private readonly service: CellService) {}

  async parseIsomorphicBinding(
    cell: ccc.Cell,
  ): Promise<IsomorphicBinding | undefined> {
    let isomorphicBinding: IsomorphicBinding | undefined = undefined;
    const lockScriptMode = await this.service.scriptMode(cell.cellOutput.lock);
    const tx = assert(
      await this.service.getTxByCell(cell),
      RpcError.TxNotFound,
    );
    // rgbpp lock related modes
    for (const { mode, chain } of [
      { mode: ScriptMode.RgbppBtc, chain: Chain.Btc },
      { mode: ScriptMode.RgbppDoge, chain: Chain.Doge },
    ]) {
      if (lockScriptMode === mode) {
        const isomorphicInfo = assert(
          extractIsomorphicInfo(cell.cellOutput.lock),
          RpcError.IsomorphicBindingNotFound,
        );
        const rgbppMode = await this.service.getScriptByModeFromTxInputs(
          tx,
          mode,
        );
        isomorphicBinding = {
          chain,
          txHash: ccc.hexFrom(isomorphicInfo.txHash),
          vout: Number(isomorphicInfo.index),
          leapType: rgbppMode ? LeapType.None : LeapType.ToUtxo,
        };
        break;
      }
    }
    // rgbpp timelock related modes
    for (const { mode, premode, chain } of [
      {
        mode: ScriptMode.RgbppBtcTimelock,
        premode: ScriptMode.RgbppBtc,
        chain: Chain.Btc,
      },
      {
        mode: ScriptMode.RgbppDogeTimelock,
        premode: ScriptMode.RgbppDoge,
        chain: Chain.Doge,
      },
    ]) {
      if (lockScriptMode === mode) {
        const rgbppScript = assert(
          await this.service.getScriptByModeFromTxInputs(tx, premode),
          RpcError.RgbppCellNotFound,
        );
        const isomorphicInfo = assert(
          extractIsomorphicInfo(rgbppScript),
          RpcError.IsomorphicBindingNotFound,
        );
        isomorphicBinding = {
          chain,
          txHash: ccc.hexFrom(isomorphicInfo.txHash),
          vout: Number(isomorphicInfo.index),
          leapType: LeapType.FromUtxo,
        };
        break;
      }
    }
    return isomorphicBinding;
  }

  async cellToTokenCell(
    cell: ccc.Cell,
    spent: boolean,
    spender?: ccc.OutPoint,
  ): Promise<TokenCell> {
    const address = await this.service.scriptToAddress(cell.cellOutput.lock);
    const lockScriptMode = await this.service.scriptMode(cell.cellOutput.lock);
    const isomorphicBinding = await this.parseIsomorphicBinding(cell);
    const typeScript = assert(cell.cellOutput.type, RpcError.CellNotAsset);
    const typeScriptType = await this.service.scriptMode(typeScript);
    return {
      txId: cell.outPoint.txHash,
      vout: Number(cell.outPoint.index),
      lockScript: {
        ...cell.cellOutput.lock,
        codeHashType: lockScriptMode,
      },
      typeScript: {
        ...typeScript,
        codeHashType: typeScriptType,
      },
      ownerAddress: address,
      capacity: ccc.numFrom(cell.cellOutput.capacity),
      data: cell.outputData,
      tokenAmount:
        typeScriptType === ScriptMode.Udt
          ? ccc.udtBalanceFrom(cell.outputData)
          : undefined,
      spent,
      spenderTx: spender ? spender.txHash : undefined,
      inputIndex: spender ? Number(spender.index) : undefined,
      rgbppBinding: isomorphicBinding,
    };
  }

  @ApiOkResponse({
    type: TokenCell,
    description: "Get an on-chain cell by CKB OutPoint",
  })
  @ApiQuery({
    name: "containSpender",
    required: false,
    description:
      "Whether to include the spender information of the cell, default is false (optional)",
  })
  @Get("/cells/by-outpoint/:txHash/:index")
  async getCellByOutpoint(
    @Param("txHash") txHash: string,
    @Param("index") index: number,
    @Query("containSpender") containSpender?: boolean,
  ): Promise<RpcResponse<TokenCell>> {
    try {
      const { cell, spent, spender } = assert(
        await this.service.getCellByOutpoint(
          txHash,
          index,
          containSpender ?? false,
        ),
        RpcError.CkbCellNotFound,
      );
      assert(cell.cellOutput.type, RpcError.CellNotAsset);
      return {
        code: 0,
        data: await this.cellToTokenCell(cell, spent, spender),
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }

  @ApiOkResponse({
    type: TokenCell,
    description: "Get an on-chain cell by isomorphic UTXO",
  })
  @Get("/cells/by-isomorphic/:btcTxHash/:index")
  async getIsomorphicCellByUtxo(
    @Param("btcTxHash") btcTxHash: string,
    @Param("index") index: number,
  ): Promise<RpcResponse<TokenCell>> {
    try {
      const { cell, spent, spender } = assert(
        await this.service.getRgbppCellByUtxo(btcTxHash, index),
        RpcError.RgbppCellNotFound,
      );
      assert(cell.cellOutput.type, RpcError.CellNotAsset);
      return {
        code: 0,
        data: await this.cellToTokenCell(cell, spent, spender),
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }

  @ApiOkResponse({
    type: [PagedTokenResult],
    description: "Get paged tokens under a user CKB address",
  })
  @ApiQuery({
    name: "cursor",
    required: false,
    description: "The cursor of the last cell returned (optional)",
  })
  @ApiQuery({
    name: "limit",
    required: false,
    description:
      "The maximum number of tokens to return, or 10 as default value (optional)",
  })
  @Get("/cells/:tokenId/:address")
  async getUserTokenCells(
    @Param("tokenId") tokenId: string,
    @Param("address") address: string,
    @Query("limit") limit: number,
    @Query("cursor") cursor?: string,
  ): Promise<RpcResponse<PagedTokenResult>> {
    const { cells, cursor: lastCursor } =
      await this.service.getPagedTokenCellsByCursor(
        tokenId,
        address,
        isNaN(limit) ? 10 : limit,
        cursor,
      );
    return {
      code: 0,
      data: {
        cells: await asyncMap(cells, (cell) => {
          return this.cellToTokenCell(cell, false);
        }),
        cursor: lastCursor,
      },
    };
  }

  @ApiOkResponse({
    type: CellSpendInfo,
    description: "Get the spend info of a cell",
  })
  @Get("/cells/spend-info/:txHash/:index")
  async getCellSpendInfo(
    @Param("txHash") txHash: string,
    @Param("index") index: number,
  ): Promise<RpcResponse<CellSpendInfo>> {
    const { cell, spent, spender, spenderHeight } = assert(
      await this.service.getCellByOutpoint(txHash, index, true),
      RpcError.CkbCellNotFound,
    );
    return {
      code: 0,
      data: {
        txId: cell.outPoint.txHash,
        vout: cell.outPoint.index,
        address: await this.service.scriptToAddress(cell.cellOutput.lock),
        capacity: ccc.numFrom(cell.cellOutput.capacity),
        spent,
        spenderTx: spender?.txHash,
        spenderIndex: spender?.index,
        spenderHeight,
      },
    };
  }
}


================================================
File: libs/cell/src/cell.module.ts
================================================
import { Module } from "@nestjs/common";
import { CellController } from "./cell.controller";
import { CellService } from "./cell.service";
import { UdtBalanceRepo, UdtInfoRepo } from "./repos";

@Module({
  providers: [CellService, UdtInfoRepo, UdtBalanceRepo],
  exports: [CellService],
  controllers: [CellController],
})
export class CellModule {}


================================================
File: libs/cell/src/cell.service.ts
================================================
import {
  assert,
  assertConfig,
  parseBtcAddress,
  parseScriptMode,
  RgbppLockArgs,
  RpcError,
  ScriptMode,
} from "@app/commons";
import { ccc } from "@ckb-ccc/shell";
import { Inject, Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { AxiosInstance } from "axios";
import { UdtInfoRepo } from "./repos";

@Injectable()
export class CellService {
  private readonly logger = new Logger(CellService.name);

  private readonly client: ccc.Client;
  private readonly rgbppBtcCodeHash: ccc.Hex;
  private readonly rgbppBtcHashType: ccc.HashType;
  private readonly rgbppBtcTimelockCodeHash: ccc.Hex;
  private readonly rgbppBtcTimelockHashType: ccc.HashType;
  private readonly udtTypes: {
    codeHash: ccc.HexLike;
    hashType: ccc.HashTypeLike;
  }[];

  constructor(
    private readonly configService: ConfigService,
    private readonly udtInfoRepo: UdtInfoRepo,
    @Inject("BTC_REQUESTERS") private readonly btcRequesters: AxiosInstance[],
  ) {
    const isMainnet = configService.get<boolean>("sync.isMainnet");
    const ckbRpcUri = configService.get<string>("sync.ckbRpcUri");
    this.client = isMainnet
      ? new ccc.ClientPublicMainnet({ url: ckbRpcUri })
      : new ccc.ClientPublicTestnet({ url: ckbRpcUri });

    this.rgbppBtcCodeHash = ccc.hexFrom(
      assertConfig(configService, "sync.rgbppBtcCodeHash"),
    );
    this.rgbppBtcHashType = ccc.hashTypeFrom(
      assertConfig(configService, "sync.rgbppBtcHashType"),
    );

    this.rgbppBtcTimelockCodeHash = ccc.hexFrom(
      assertConfig(configService, "sync.rgbppBtcTimelockCodeHash"),
    );
    this.rgbppBtcTimelockHashType = ccc.hashTypeFrom(
      assertConfig(configService, "sync.rgbppBtcTimelockHashType"),
    );

    const udtTypes =
      configService.get<
        { codeHash: ccc.HexLike; hashType: ccc.HashTypeLike }[]
      >("sync.udtTypes") ?? [];
    this.udtTypes = udtTypes.map((t) => ccc.Script.from({ ...t, args: "" }));
  }

  async scriptMode(script: ccc.ScriptLike): Promise<ScriptMode> {
    const extension = this.udtTypes.map((t) => ({
      codeHash: ccc.hexFrom(t.codeHash),
      hashType: ccc.hashTypeFrom(t.hashType),
      mode: ScriptMode.Udt,
    }));
    extension.push({
      codeHash: this.rgbppBtcCodeHash,
      hashType: this.rgbppBtcHashType,
      mode: ScriptMode.RgbppBtc,
    });
    extension.push({
      codeHash: this.rgbppBtcTimelockCodeHash,
      hashType: this.rgbppBtcTimelockHashType,
      mode: ScriptMode.RgbppBtcTimelock,
    });
    return await parseScriptMode(script, this.client, extension);
  }

  async scriptToAddress(scriptLike: ccc.ScriptLike): Promise<string> {
    if (
      scriptLike.codeHash === this.rgbppBtcCodeHash &&
      scriptLike.hashType === this.rgbppBtcHashType
    ) {
      return parseBtcAddress({
        client: this.client,
        rgbppScript: scriptLike,
        requesters: this.btcRequesters,
        logger: this.logger,
      });
    }
    const script = ccc.Script.from(scriptLike);
    return ccc.Address.fromScript(script, this.client).toString();
  }

  async getTxByCell(cell: ccc.Cell): Promise<ccc.Transaction | undefined> {
    return await this.client
      .getTransaction(cell.outPoint.txHash)
      .then((tx) => tx?.transaction);
  }

  async getScriptByModeFromTxInputs(
    tx: ccc.Transaction,
    scriptMode: ScriptMode,
  ): Promise<ccc.Script | undefined> {
    for (const input of tx.inputs) {
      await input.completeExtraInfos(this.client);
      const script = input.cellOutput?.lock;
      if (script) {
        const lockScriptMode = await this.scriptMode(script);
        if (scriptMode === lockScriptMode) {
          return script;
        }
      }
    }
  }

  async getCellByOutpoint(
    txHash: ccc.HexLike,
    index: number,
    containSpender: boolean,
  ): Promise<
    | {
        cell: ccc.Cell;
        spent: boolean;
        spender?: ccc.OutPoint;
        spenderHeight?: ccc.Num;
      }
    | undefined
  > {
    const cell = await this.client.getCell({ txHash, index });
    if (cell) {
      // If the cell is not an asset, skip finding the spender
      // if (cell.cellOutput.type === undefined) {
      //   return {
      //     cell,
      //     spent: false,
      //   };
      // }
      const liveCell = await this.client.getCellLive({ txHash, index }, true);
      if (liveCell) {
        return {
          cell: liveCell,
          spent: false,
        };
      } else if (!containSpender) {
        return {
          cell,
          spent: true,
        };
      }
      const cellTx = await this.client.getTransaction(cell.outPoint.txHash);
      if (cellTx === undefined) {
        return;
      }
      const spentTxs = this.client.findTransactions(
        {
          script: cell.cellOutput.lock,
          scriptType: "lock",
          scriptSearchMode: "exact",
          filter: {
            script: cell.cellOutput.type,
          },
        },
        "desc",
        10,
      );
      for await (const tx of spentTxs) {
        if (!tx.isInput || tx.blockNumber < (cellTx.blockNumber ?? 0n)) {
          continue;
        }
        const maybeConsumerTx = await this.client.getTransaction(tx.txHash);
        if (
          maybeConsumerTx &&
          maybeConsumerTx.transaction.inputs.some((input) =>
            input.previousOutput.eq(cell.outPoint),
          )
        ) {
          return {
            cell,
            spent: true,
            spender: ccc.OutPoint.from({
              txHash: tx.txHash,
              index: tx.cellIndex,
            }),
            spenderHeight: tx.blockNumber,
          };
        }
      }
      return {
        cell,
        spent: true,
      };
    }
  }

  async getRgbppCellByUtxo(
    btcTxHash: string,
    index: number,
  ): Promise<
    | {
        cell: ccc.Cell;
        spent: boolean;
        spender?: ccc.OutPoint;
      }
    | undefined
  > {
    const encoded = RgbppLockArgs.encode({ txId: btcTxHash, outIndex: index });
    const rgbppCells = this.client.findCellsByLock(
      {
        codeHash: this.rgbppBtcCodeHash,
        hashType: this.rgbppBtcHashType,
        args: encoded,
      },
      null,
      true,
    );
    for await (const cell of rgbppCells) {
      return { cell, spent: false };
    }
    const rgbppTxs = this.client.findTransactionsByLock(
      {
        codeHash: this.rgbppBtcCodeHash,
        hashType: this.rgbppBtcHashType,
        args: encoded,
      },
      null,
      false,
    );
    let spentCell: ccc.Cell | undefined;
    let spender: ccc.OutPoint | undefined;
    for await (const tx of rgbppTxs) {
      if (tx.isInput) {
        spender = ccc.OutPoint.from({
          txHash: tx.txHash,
          index: tx.cellIndex,
        });
      } else {
        spentCell = await this.client.getCell({
          txHash: tx.txHash,
          index: tx.cellIndex,
        });
      }
    }
    return spentCell ? { cell: spentCell, spent: true, spender } : undefined;
  }

  // async getPagedTokenCells(
  //   tokenId: string,
  //   address: string,
  //   offset: number,
  //   limit: number,
  // ): Promise<ccc.Cell[]> {
  //   const udtInfo = await this.udtInfoRepo.getTokenInfoByTokenId(tokenId);
  //   if (!udtInfo) {
  //     return [];
  //   }

  //   const lockScript = (await ccc.Address.fromString(address, this.client))
  //     .script;
  //   const typeScript: ccc.ScriptLike = {
  //     codeHash: udtInfo.typeCodeHash,
  //     hashType: udtInfo.typeCodeHash,
  //     args: udtInfo.typeArgs,
  //   };

  //   const searchLimit = 30;
  //   const cells: ccc.Cell[] = [];
  //   let lastCursor: string | undefined;
  //   while (offset > 0) {
  //     const result = await this.client.findCellsPaged(
  //       {
  //         script: lockScript,
  //         scriptType: "lock",
  //         scriptSearchMode: "exact",
  //         filter: {
  //           script: typeScript,
  //         },
  //       },
  //       "asc",
  //       searchLimit,
  //       lastCursor,
  //     );
  //     lastCursor = result.lastCursor;
  //     if (result.cells.length <= offset) {
  //       offset -= result.cells.length;
  //       continue;
  //     } else {
  //       cells.push(...result.cells.slice(offset));
  //       offset = 0;
  //       if (cells.length >= limit) {
  //         break;
  //       }
  //     }
  //     if (result.cells.length < searchLimit) {
  //       break;
  //     }
  //   }
  //   return cells.slice(0, limit);
  // }

  async getPagedTokenCellsByCursor(
    tokenId: string,
    address: string,
    limit: number,
    cursor?: string,
  ): Promise<{
    cells: ccc.Cell[];
    cursor: string;
  }> {
    const udtInfo = assert(
      await this.udtInfoRepo.getTokenInfoByTokenId(tokenId),
      RpcError.TokenNotFound,
    );
    const lockScript = (await ccc.Address.fromString(address, this.client))
      .script;
    const typeScript: ccc.ScriptLike = {
      codeHash: udtInfo.typeCodeHash,
      hashType: udtInfo.typeHashType,
      args: udtInfo.typeArgs,
    };

    const result = await this.client.findCellsPaged(
      {
        script: lockScript,
        scriptType: "lock",
        scriptSearchMode: "exact",
        filter: {
          script: typeScript,
        },
      },
      "asc",
      limit,
      cursor,
    );
    return {
      cells: result.cells,
      cursor: result.cells.length < limit ? "" : result.lastCursor,
    };
  }
}


================================================
File: libs/cell/src/index.ts
================================================
export * from "./cell.module";
export * from "./cell.service";


================================================
File: libs/cell/src/repos/index.ts
================================================
export * from "./udtBalance.repo";
export * from "./udtInfo.repo";


================================================
File: libs/cell/src/repos/udtBalance.repo.ts
================================================
import { UdtBalance } from "@app/schemas";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class UdtBalanceRepo extends Repository<UdtBalance> {
  constructor(manager: EntityManager) {
    super(UdtBalance, manager);
  }
}


================================================
File: libs/cell/src/repos/udtInfo.repo.ts
================================================
import { UdtInfo } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class UdtInfoRepo extends Repository<UdtInfo> {
  constructor(manager: EntityManager) {
    super(UdtInfo, manager);
  }

  async getTokenInfoByTokenId(
    tokenHash: ccc.HexLike,
  ): Promise<UdtInfo | undefined> {
    return (
      (await this.findOne({
        where: {
          hash: ccc.hexFrom(tokenHash),
        },
        order: {
          updatedAtHeight: "DESC",
        },
      })) ?? undefined
    );
  }
}


================================================
File: libs/commons/tsconfig.lib.json
================================================
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../../dist/libs/commons"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "test", "**/*spec.ts"]
}


================================================
File: libs/commons/src/config.ts
================================================
import { readFileSync } from "fs";
import * as yaml from "js-yaml";
import { join } from "path";

function configPath() {
  switch (process.env.NODE_ENV) {
    case "production":
      return "/config/config.production.yaml";
    case "development":
      return "/config/config.development.yaml";
    case "local":
      return "/config/config.local.yaml";
    default:
      return "/config/config.yaml";
  }
}

export function loadConfig() {
  return yaml.load(
    readFileSync(join(process.cwd(), configPath()), "utf8"),
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  ) as Record<string, any>;
}


================================================
File: libs/commons/src/index.ts
================================================
export * from "./config";
export * from "./ormUtils";
export * from "./pick";
export * from "./rest";
export * from "./utils";


================================================
File: libs/commons/src/ormUtils/index.ts
================================================
import { ccc } from "@ckb-ccc/shell";
import {
  EntityManager,
  FindOptionsOrder,
  FindOptionsSelect,
  FindOptionsWhere,
  MoreThan,
  Repository,
} from "typeorm";

export async function foreachInRepo<T>({
  repo,
  handler,
  criteria,
  order,
  isSerial,
  chunkSize,
  select,
}: {
  repo: Repository<T & { id: number }>;
  handler: (entity: T) => Promise<unknown>;
  criteria?: FindOptionsWhere<T>;
  order?: FindOptionsOrder<T & { id: number }>;
  isSerial?: boolean;
  chunkSize?: number;
  select?: FindOptionsSelect<T & { id: number }>;
}) {
  let lastId: number | null = null;

  while (true) {
    const entities = await repo.find({
      where: lastId
        ? /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
          ({ ...(criteria ?? {}), id: MoreThan(lastId) } as any)
        : criteria,
      order,
      take: chunkSize ?? 100,
      select,
    });
    if (entities.length === 0) {
      break;
    }
    lastId = entities[entities.length - 1].id;

    if (isSerial) {
      for (let i = 0; i < entities.length; i += 1) {
        await handler(entities[i]);
      }
    } else {
      await Promise.all(entities.map((entity) => handler(entity)));
    }
  }
}

// Will start transaction if not specified
export async function withTransaction<T>(
  defaultManager: EntityManager,
  txManager: EntityManager | null | undefined,
  handler: (manager: EntityManager) => Promise<T>,
): Promise<T> {
  if (txManager) {
    return await handler(txManager);
  }

  return await defaultManager.transaction(handler);
}

export function formatSortableInt(numLike: ccc.NumLike, digits = 80) {
  const str = ccc.numFrom(numLike).toString();

  if (str.charAt(0) === "-") {
    return `-${str.substring(1).padStart(digits, "0")}`;
  }
  return str.padStart(digits, "0");
}

export function parseSortableInt(str: string): ccc.Num {
  if (str.charAt(0) === "-") {
    const val = str.substring(1).replace(/^0*/, "");
    if (val === "") {
      return ccc.Zero;
    }
    return ccc.numFrom(`-${val}`);
  }
  const val = str.replace(/^0*/, "");
  if (val === "") {
    return ccc.Zero;
  }
  return ccc.numFrom(val);
}

export function formatSortable(numLike: ccc.NumLike, digits = 80) {
  const str =
    typeof numLike === "string" ? numLike : ccc.numFrom(numLike).toString();
  const [l, r] = str.split(".");

  const lRes = formatSortableInt(l, digits);
  if (r === undefined) {
    return lRes;
  }

  return `${lRes}.${r}`;
}

export function parseSortable(str: string): string {
  const [l, r] = str.split(".");

  const lRes = parseSortableInt(l);
  if (r === undefined) {
    return lRes.toString();
  }

  return `${lRes}.${r}`;
}


================================================
File: libs/commons/src/pick/index.ts
================================================
import {
  CallHandler,
  ExecutionContext,
  Injectable,
  NestInterceptor,
} from "@nestjs/common";
import { Observable, map } from "rxjs";

export class PickOptions {
  type?: any;

  typeFactory?: ((data: any) => any) | Array<(data: any) => any>;

  isOptional?: boolean;
}

export function pick<T>(oType: T | undefined, data: any): T | undefined {
  const type = oType as any;

  if (!type) {
    // No type, returns directly
    return;
  }

  if (Array.isArray(data)) {
    // If the data is an array, we need to pick each item
    if (!Array.isArray(type)) {
      // Invalid type
      return;
    }
    if (!type[0]?.prototype?.pick) {
      // The type can not be picked
      return data as T;
    }
    return data.map((v) => type[0].prototype.pick(v)) as T;
  }

  if (!type?.prototype?.pick) {
    // The type can not be picked
    return data as T;
  }
  return type.prototype.pick(data);
}

export function pickWithFactory<T>(
  factory: ((data: any) => T) | Array<(data: any) => any>,
  data: any,
): T | undefined {
  if (Array.isArray(factory)) {
    if (Array.isArray(data)) {
      return data.map((v) => pick(factory[0](v), v)) as T;
    }
  } else {
    return pick(factory(data), data);
  }
}

export function Pick(options?: PickOptions) {
  const type = options?.type;
  const typeFactory = options?.typeFactory;
  const isOptional = options?.isOptional;

  return function (target: any, key: string) {
    const oPick = target.pick;
    target.pick = function (v: any) {
      // Even the data is invalid, we still need to pick the properties
      const data = typeof v === "object" ? v : {};
      const res = oPick ? oPick(data) : {};
      if (typeof res !== "object") {
        // The type explicitly disabled pick
        return;
      }
      if (typeFactory && !(isOptional && data == null)) {
        // If the typeFactory is specified, pick the data recursively
        res[key] = pickWithFactory(typeFactory, data[key]);
      } else if (type && !(isOptional && data == null)) {
        // If the type is specified, pick the data recursively
        res[key] = pick(type, data[key]);
      } else if (data[key] === undefined) {
        // Preserve undefined properties
        res[key] = null;
      } else {
        // Preserve properties without type
        res[key] = data[key];
      }
      return res;
    };
  };
}

@Injectable()
export class PickInterceptor implements NestInterceptor {
  constructor(private readonly options?: PickOptions) {}

  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    return next.handle().pipe(
      map((data: any) => {
        if (data == null && this.options?.isOptional) {
          return null;
        }
        if (this.options?.typeFactory) {
          return pickWithFactory(this.options.typeFactory, data);
        } else {
          return pick(this.options?.type, data);
        }
      }),
    );
  }
}


================================================
File: libs/commons/src/rest/index.ts
================================================
import { ccc } from "@ckb-ccc/shell";
import { ApiProperty, ApiPropertyOptional } from "@nestjs/swagger";

export enum Chain {
  Ckb = "ckb",
  Btc = "btc",
  Doge = "doge",
}

export enum ScriptMode {
  RgbppBtc = "rgbppBtc",
  RgbppDoge = "rgbppDoge",
  RgbppBtcTimelock = "rgbppBtcTimelock",
  RgbppDogeTimelock = "rgbppDogeTimelock",
  SingleUseLock = "singleUseLock",
  OmniLock = "omniLock",
  Udt = "udt",
  Spore = "spore",
  Cluster = "cluster",
  Acp = "acp",
  Secp256k1 = "secp256k1",
  JoyId = "joyId",
  UniqueType = "uniqueType",
  Unknown = "unknown",
}

enum ApiHashType {
  Data = "data",
  Type = "type",
  Data1 = "data1",
  Data2 = "data2",
}

export enum LeapType {
  None = 0,
  FromUtxo = 1,
  ToUtxo = 2,
}

export class RpcResponse<T> {
  code: number;
  msg?: string;
  data?: T;
}

export class CellScript {
  @ApiProperty({ type: String })
  codeHash: ccc.Hex;
  @ApiProperty({ enum: ApiHashType })
  hashType: ccc.HashType;
  @ApiProperty({ type: String })
  args: ccc.Hex;
  @ApiPropertyOptional({ enum: ScriptMode })
  codeHashType?: ScriptMode;
}

export enum UdtDepType {
  Code = "code",
  DepGroup = "depGroup",
}

export class UdtOutpoint {
  @ApiProperty({ type: String })
  txHash: ccc.Hex;
  @ApiProperty({ type: Number })
  index: ccc.Num;
}

export class UdtCelldep {
  @ApiProperty({ type: UdtOutpoint })
  outPoint: UdtOutpoint;
  @ApiProperty({ enum: UdtDepType })
  depType: UdtDepType;
}

export class TokenInfo {
  @ApiProperty({ type: String })
  tokenId: ccc.Hex;
  @ApiPropertyOptional()
  name?: string;
  @ApiPropertyOptional()
  symbol?: string;
  @ApiPropertyOptional()
  decimal?: number;
  @ApiPropertyOptional()
  owner?: string;
  @ApiProperty({ type: Number })
  totalAmount: ccc.Num;
  @ApiProperty()
  mintable: boolean;
  @ApiProperty({ type: Number })
  holderCount: ccc.Num;
  @ApiProperty({ enum: Chain })
  issueChain: Chain;
  @ApiProperty({ type: String })
  issueTxId: ccc.Hex;
  @ApiProperty({ type: Number })
  issueTxHeight: ccc.Num;
  @ApiProperty()
  issueTime: number;
  @ApiPropertyOptional({ type: UdtCelldep })
  celldep?: UdtCelldep;
}

export class TokenBalance {
  @ApiProperty({ type: String })
  tokenId: ccc.Hex;
  @ApiPropertyOptional()
  name?: string;
  @ApiPropertyOptional()
  symbol?: string;
  @ApiPropertyOptional()
  decimal?: number;
  @ApiProperty()
  address: string;
  @ApiProperty({ type: Number })
  balance: ccc.Num;
  @ApiProperty({ type: Number })
  height: ccc.Num;
}

export class BlockHeader {
  @ApiProperty({ type: Number })
  height: ccc.Num;
  @ApiProperty({ type: String })
  hash: ccc.Hex;
  @ApiProperty({ type: String })
  preHash: ccc.Hex;
  @ApiProperty()
  blockTime: number;
  @ApiProperty()
  version: number;
}

export class TrackerInfo {
  @ApiProperty({ type: Number })
  trackerBlockHeight: ccc.Num;
  @ApiProperty({ type: String })
  trackerBestBlockHash: ccc.Hex;
  @ApiProperty({ type: Number })
  nodeBlockHeight: ccc.Num;
  @ApiProperty({ type: String })
  nodeBestBlockHash: ccc.Hex;
}

export class ClusterData {
  @ApiProperty()
  name: string;
  @ApiProperty()
  description: string;
  @ApiProperty({ type: String })
  clusterId: ccc.Hex;
}

export class ClusterInfo {
  @ApiProperty()
  name: string;
  @ApiPropertyOptional()
  description?: string;
  @ApiProperty({ type: String })
  clusterId: ccc.Hex;
  @ApiProperty()
  owner: string;
  @ApiProperty()
  creator: string;
  @ApiProperty()
  itemCount: number;
  @ApiProperty()
  holderCount: number;
  @ApiProperty({ enum: Chain })
  issueChain: Chain;
  @ApiProperty({ type: String })
  issueTxId: ccc.Hex;
  @ApiProperty({ type: Number })
  issueTxHeight: ccc.Num;
  @ApiProperty()
  issueTime: number;
  @ApiProperty()
  rgbppTag: boolean;
}

export class SporeData {
  @ApiProperty({ type: String })
  tokenId: ccc.Hex;
  @ApiProperty()
  contentType: string;
  @ApiProperty()
  content: string;
  @ApiPropertyOptional()
  clusterId?: ccc.Hex;
}

export class NFTInfo {
  @ApiProperty({ type: String })
  tokenId: ccc.Hex;
  @ApiPropertyOptional({ type: String })
  clusterId?: ccc.Hex;
  @ApiPropertyOptional({ type: ClusterInfo })
  clusterInfo?: ClusterInfo;
  @ApiProperty()
  contentType: string;
  @ApiProperty()
  content: string;
  @ApiProperty()
  creator: string;
  @ApiPropertyOptional()
  owner?: string;
  @ApiPropertyOptional()
  dobDetails?: string;
  @ApiProperty({ type: String })
  createTxId: ccc.Hex;
  @ApiProperty()
  createTime: number;
}

export enum EventType {
  Issue = "issue",
  Mint = "mint",
  Transfer = "transfer",
  MintAndTransfer = "mint&transfer",
  Burn = "burn",
  BurnAndTransfer = "burn&transfer",
}

export class NFTData {
  @ApiPropertyOptional({ type: String })
  tokenId?: ccc.Hex;
  @ApiPropertyOptional()
  contentType?: string;
  @ApiPropertyOptional()
  content?: string;
  @ApiPropertyOptional({ type: String })
  clusterId?: ccc.Hex;
  @ApiPropertyOptional()
  clusterName?: string;
  @ApiPropertyOptional()
  clusterDescription?: string;
}

export class TokenData {
  @ApiProperty({ type: String })
  tokenId: ccc.Hex;
  @ApiProperty({ type: Number })
  amount: ccc.Num;
  @ApiProperty()
  mintable: boolean;
  @ApiPropertyOptional()
  name?: string;
  @ApiPropertyOptional()
  symbol?: string;
  @ApiPropertyOptional()
  decimal?: number;
}

export class IsomorphicBinding {
  @ApiProperty({ enum: Chain })
  chain: Chain;
  @ApiProperty({ type: String })
  txHash: ccc.Hex;
  @ApiProperty({ type: Number })
  vout: number;
  @ApiProperty({ enum: LeapType })
  leapType: LeapType;
}

export class TxAssetCellDetail {
  @ApiProperty()
  index: number;
  @ApiProperty({ type: Number })
  capacity: ccc.Num;
  @ApiProperty({ enum: EventType })
  eventType: EventType;
  @ApiProperty()
  address: string;
  @ApiProperty({ enum: ScriptMode })
  typeCodeName: ScriptMode;
  @ApiPropertyOptional({ type: TokenData })
  tokenData?: TokenData;
  @ApiPropertyOptional({ type: NFTData })
  nftData?: NFTData;
  @ApiPropertyOptional({ type: IsomorphicBinding })
  rgbppBinding?: IsomorphicBinding;
}

export class TxAssetCellData {
  @ApiProperty({ type: String })
  txId: ccc.Hex;
  @ApiPropertyOptional({ type: String })
  blockHash?: ccc.Hex;
  @ApiPropertyOptional({ type: Number })
  blockHeight?: ccc.Num;
  @ApiProperty({ type: TxAssetCellDetail, isArray: true })
  inputs: TxAssetCellDetail[];
  @ApiProperty({ type: TxAssetCellDetail, isArray: true })
  outputs: TxAssetCellDetail[];
}

export class TokenCell {
  @ApiProperty({ type: String })
  txId: ccc.Hex;
  @ApiProperty()
  vout: number;
  @ApiProperty({ type: CellScript })
  lockScript: CellScript;
  @ApiProperty({ type: CellScript })
  typeScript: CellScript;
  @ApiProperty()
  ownerAddress: string;
  @ApiProperty({ type: Number })
  capacity: ccc.Num;
  @ApiProperty({ type: String })
  data: ccc.Hex;
  @ApiPropertyOptional({ type: Number })
  tokenAmount?: ccc.Num;
  @ApiProperty()
  spent: boolean;
  @ApiPropertyOptional({ type: String })
  spenderTx?: ccc.Hex;
  @ApiPropertyOptional()
  inputIndex?: number;
  @ApiPropertyOptional({ type: IsomorphicBinding })
  rgbppBinding?: IsomorphicBinding;
}

export class PagedTokenResult {
  @ApiProperty({ type: TokenCell, isArray: true })
  cells: TokenCell[];
  @ApiProperty()
  cursor: string;
}

export class TokenHolders {
  @ApiProperty()
  total: number;
  @ApiProperty({ type: TokenBalance, isArray: true })
  list: TokenBalance[];
}

export class CellSpendInfo {
  @ApiProperty({ type: String })
  txId: ccc.Hex;
  @ApiProperty()
  vout: ccc.Num;
  @ApiProperty()
  address: string;
  @ApiProperty()
  capacity: ccc.Num;
  @ApiProperty()
  spent: boolean;
  @ApiPropertyOptional({ type: String })
  spenderTx?: ccc.Hex;
  @ApiPropertyOptional({ type: Number })
  spenderIndex?: ccc.Num;
  @ApiPropertyOptional({ type: Number })
  spenderHeight?: ccc.Num;
}


================================================
File: libs/commons/src/utils/index.ts
================================================
import { Block } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { cccA } from "@ckb-ccc/shell/advanced";
import { Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { AxiosInstance } from "axios";
import { validate } from "bitcoin-address-validation";
import { formatSortableInt } from "../ormUtils";
import { ScriptMode } from "../rest";

export function sleep(time: number) {
  return new Promise<void>((resolve) => setTimeout(resolve, time));
}

export function deduplicate<T>(arr: T[]) {
  return Array.from(new Set(arr));
}

export function autoRun(
  logger: Logger,
  autoIntervalMsRaw: string | number,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  handler: () => any,
) {
  const autoIntervalMs = Number(autoIntervalMsRaw);
  if (
    autoIntervalMs &&
    Number.isSafeInteger(autoIntervalMs) &&
    autoIntervalMs > 0
  ) {
    (async () => {
      while (true) {
        try {
          await handler();
        } catch (err) {
          logger.error(err.message, err.stack, err.context);
        }
        await sleep(autoIntervalMs);
      }
    })();
  }
}

export async function asyncSome<T>(
  arr: T[],
  predicate: (item: T) => Promise<boolean>,
) {
  for (const item of arr) {
    if (await predicate(item)) {
      return true;
    }
  }
  return false;
}

export async function asyncMap<T, R>(
  arr: T[],
  mapper: (item: T) => Promise<R>,
) {
  return Promise.all(arr.map(mapper));
}

export enum RpcError {
  TokenNotFound,
  TxNotFound,
  BlockNotFound,
  CkbCellNotFound,
  RgbppCellNotFound,
  CellNotAsset,
  ClusterNotFound,
  SporeNotFound,
  IsomorphicBindingNotFound,
  HeightCropped,
  InvalidAddress,
  InvalidTokenId,
}

export const RpcErrorMessage: Record<RpcError, string> = {
  [RpcError.TokenNotFound]: "Token not found",
  [RpcError.TxNotFound]: "Tx not found",
  [RpcError.BlockNotFound]: "Block not found",
  [RpcError.CkbCellNotFound]: "Cell on ckb not found",
  [RpcError.RgbppCellNotFound]: "Rgbpp cell on ckb not found",
  [RpcError.CellNotAsset]: "Cell is not an asset",
  [RpcError.ClusterNotFound]: "Cluster not found",
  [RpcError.SporeNotFound]: "Spore not found",
  [RpcError.IsomorphicBindingNotFound]: "Isomorphic binding not found",
  [RpcError.HeightCropped]: "Record on height cropped",
  [RpcError.InvalidAddress]: "Invalid address",
  [RpcError.InvalidTokenId]: "Invalid token id",
};

export class ApiError {
  message: string;

  constructor(message: string) {
    this.message = message;
  }

  static fromRpcError(error: RpcError) {
    return new ApiError(RpcErrorMessage[error]);
  }
}

export function assert<T>(
  expression: T | undefined | null,
  message: string | RpcError,
): T {
  if (!expression) {
    if (typeof message === "string") {
      throw new ApiError(message);
    } else {
      throw new ApiError(RpcErrorMessage[message]);
    }
  }
  return expression;
}

export function assertConfig<T>(config: ConfigService, key: string): T {
  return assert(config.get<T>(key), `Missing config: ${key}`);
}

export const RgbppLockArgs = ccc.mol.struct({
  outIndex: ccc.mol.Uint32,
  // No idea why the txId is reversed
  txId: ccc.mol.Byte32.map({
    inMap: (v: ccc.HexLike) => ccc.bytesFrom(v).reverse(),
    outMap: (v) => ccc.hexFrom(ccc.bytesFrom(v).reverse()),
  }),
});

export function headerToRepoBlock(
  header: ccc.ClientBlockHeader | undefined,
): Block | undefined {
  if (!header) {
    return header;
  }
  const block = new Block();
  block.hash = header.hash;
  block.height = formatSortableInt(header.number);
  block.parentHash = header.parentHash;
  block.timestamp = Number(header.timestamp);
  return block;
}

export async function parseScriptModeFromAddress(
  address: string,
  client: ccc.Client,
): Promise<ScriptMode> {
  if (address.startsWith("ck")) {
    const ckbAddress = await ccc.Address.fromString(address, client);
    return await parseScriptMode(ckbAddress.script, client);
  } else {
    return ScriptMode.RgbppBtc;
  }
}

export async function parseScriptMode(
  script: ccc.ScriptLike,
  client: ccc.Client,
  extension?: {
    codeHash: ccc.Hex;
    hashType: ccc.HashType;
    mode: ScriptMode;
  }[],
): Promise<ScriptMode> {
  if (extension) {
    for (const { codeHash, hashType, mode } of extension) {
      if (script.codeHash === codeHash && script.hashType === hashType) {
        return mode;
      }
    }
  }
  const paris = {
    [ccc.KnownScript.SingleUseLock]: ScriptMode.SingleUseLock,
    [ccc.KnownScript.XUdt]: ScriptMode.Udt,
    [ccc.KnownScript.OmniLock]: ScriptMode.OmniLock,
    [ccc.KnownScript.AnyoneCanPay]: ScriptMode.Acp,
    [ccc.KnownScript.Secp256k1Blake160]: ScriptMode.Secp256k1,
    [ccc.KnownScript.JoyId]: ScriptMode.JoyId,
    [ccc.KnownScript.UniqueType]: ScriptMode.UniqueType,
  };
  for (const [knownScript, mode] of Object.entries(paris)) {
    const expectedScript = await client.getKnownScript(
      knownScript as ccc.KnownScript,
    );
    if (
      script.codeHash === expectedScript.codeHash &&
      script.hashType === expectedScript.hashType
    ) {
      return mode;
    }
  }
  for (const clusterInfo of Object.values(
    ccc.spore.getClusterScriptInfos(client),
  )) {
    if (
      script.codeHash === clusterInfo?.codeHash &&
      script.hashType === clusterInfo?.hashType
    ) {
      return ScriptMode.Cluster;
    }
  }
  for (const sporeInfo of Object.values(
    ccc.spore.getSporeScriptInfos(client),
  )) {
    if (
      script.codeHash === sporeInfo?.codeHash &&
      script.hashType === sporeInfo?.hashType
    ) {
      return ScriptMode.Spore;
    }
  }
  return ScriptMode.Unknown;
}

export async function parseDogeAddress() {
  throw new Error("Not implemented");
}

export async function parseBtcAddress(params: {
  client: ccc.Client;
  rgbppScript: ccc.ScriptLike;
  requesters: AxiosInstance[];
  logger: Logger;
}): Promise<string> {
  const { client, rgbppScript, requesters, logger } = params;
  const script = ccc.Script.from(rgbppScript);
  const ckbAddress = ccc.Address.fromScript(script, client).toString();

  const decoded = (() => {
    try {
      return RgbppLockArgs.decode(script.args);
    } catch (err) {
      return undefined;
    }
  })();
  if (!decoded) {
    return ckbAddress;
  }
  const { outIndex, txId } = decoded;

  let fallbackToCkb = false;
  for (const requester of requesters) {
    logger?.debug(
      `[parseBtcAddress] Getting ${txId} from ${requester.getUri()}`,
    );
    const { data, skip } = await (async () => {
      try {
        return await requester.post("/", {
          method: "getrawtransaction",
          params: [txId.slice(2), true],
        });
      } catch (err) {
        if (err?.response?.data?.error !== undefined) {
          return err.response;
        }
        logger?.error(
          `Failed to request ${txId}:${outIndex} from ${requester.getUri()}: ${err.message}`,
        );
        return {
          skip: true,
        };
      }
    })();

    if (skip) {
      continue;
    }

    const rpcError = data?.error ? JSON.stringify(data?.error) : undefined;
    if (rpcError) {
      // Which means the btc outpoint parsed from ckb has been dropped by btc nodes, so
      // fallback to ckb address is fine
      if (
        rpcError?.includes("No such mempool or blockchain transaction.") ||
        rpcError?.includes(
          "Retry failed, reason: Node responded with non success status code",
        )
      ) {
        fallbackToCkb = true;
        break;
      } else {
        logger?.error(
          `Failed to get ${txId}:${outIndex} from ${requester.getUri()}: ${rpcError}`,
        );
        continue;
      }
    }

    // Which means the btc tx pattern is not valid for rgbpp, so fallback to ckb address is fine
    if (data?.result?.vout?.[outIndex]?.scriptPubKey?.address == null) {
      logger?.warn(
        `Failed to parse address from ${txId}:${outIndex} from ${requester.getUri()}: ${JSON.stringify(data)}`,
      );
      fallbackToCkb = true;
      break;
    }
    return data?.result?.vout?.[outIndex]?.scriptPubKey?.address;
  }

  if (fallbackToCkb) {
    return ckbAddress;
  }

  throw new Error("Failed to get from all btc nodes, please try other nodes.");
}

export function extractIsomorphicInfo(
  rgbppScript: ccc.ScriptLike,
): ccc.OutPointLike | undefined {
  const decoded = (() => {
    try {
      return RgbppLockArgs.decode(rgbppScript.args);
    } catch (err) {
      return undefined;
    }
  })();
  if (!decoded) {
    return undefined;
  }

  const { outIndex, txId } = decoded;
  return { txHash: txId, index: outIndex };
}

export function mintableScriptMode(scriptMode: ScriptMode): boolean {
  const unmintable = [
    ScriptMode.SingleUseLock,
    ScriptMode.RgbppBtc,
    ScriptMode.RgbppDoge,
    ScriptMode.RgbppBtcTimelock,
    ScriptMode.RgbppDogeTimelock,
  ].includes(scriptMode);
  return !unmintable;
}

export function examineAddress(address: string): boolean {
  if (address.startsWith("ck")) {
    try {
      cccA.addressPayloadFromString(address);
      return true;
    } catch (_) {}
  } else {
    return validate(address);
  }
  return false;
}

export function examineTokenId(tokenId: string): boolean {
  return /^(0x)?[0-9a-fA-F]{64}$/.test(tokenId);
}


================================================
File: libs/schemas/tsconfig.lib.json
================================================
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../../dist/libs/schemas"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "test", "**/*spec.ts"]
}


================================================
File: libs/schemas/src/index.ts
================================================
export * from "./schemas";
export * from "./schemas.module";


================================================
File: libs/schemas/src/schemas.module.ts
================================================
import { Module } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { TypeOrmModule } from "@nestjs/typeorm";
import {
  Block,
  Cluster,
  ScriptCode,
  Spore,
  SyncStatus,
  UdtBalance,
  UdtInfo,
} from "./schemas";

@Module({
  imports: [
    TypeOrmModule.forRootAsync({
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => ({
        type: "mysql",
        host: configService.get("mysql.host"),
        port: Number(configService.get("mysql.port")),
        username: configService.get("mysql.username"),
        password: configService.get("mysql.password"),
        database: configService.get("mysql.database"),
        synchronize: true,
        entities: [
          Block,
          ScriptCode,
          SyncStatus,
          UdtInfo,
          UdtBalance,
          Spore,
          Cluster,
        ],
      }),
    }),
  ],
})
export class SchemasModule {}


================================================
File: libs/schemas/src/schemas/block.ts
================================================
import {
  Column,
  CreateDateColumn,
  Entity,
  Index,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from "typeorm";

@Entity()
export class Block {
  @PrimaryGeneratedColumn("increment")
  id: number;

  @Column({ type: "varchar" })
  @Index({ unique: true })
  hash: string;

  @Column({ type: "varchar" })
  parentHash: string;

  @Column({ type: "varchar" })
  @Index()
  height: string;

  @Column({ type: "int" })
  timestamp: number;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}


================================================
File: libs/schemas/src/schemas/cluster.ts
================================================
import {
  Column,
  CreateDateColumn,
  Entity,
  Index,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from "typeorm";

@Entity()
@Index(["clusterId", "updatedAtHeight"], { unique: true })
export class Cluster {
  @PrimaryGeneratedColumn("increment")
  id: number;

  @Column({ type: "varchar" })
  @Index()
  clusterId: string;

  @Column({ type: "mediumtext" })
  name: string;

  @Column({ type: "mediumtext" })
  description: string;

  @Column({ type: "varchar" })
  createTxHash: string;

  @Column({ type: "mediumtext" })
  creatorAddress: string;

  @Column({ type: "mediumtext" })
  ownerAddress: string;

  // To roll back on re-org
  @Column({ type: "varchar" })
  @Index()
  updatedAtHeight: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}


================================================
File: libs/schemas/src/schemas/index.ts
================================================
export * from "./block";
export * from "./cluster";
export * from "./scriptCode";
export * from "./spore";
export * from "./syncStatus";
export * from "./udtBalance";
export * from "./udtInfo";


================================================
File: libs/schemas/src/schemas/scriptCode.ts
================================================
import {
  Column,
  CreateDateColumn,
  Entity,
  Index,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from "typeorm";

@Entity()
export class ScriptCode {
  @PrimaryGeneratedColumn("increment")
  id: number;

  @Column({ type: "varchar" })
  @Index({ unique: true })
  outPoint: string;

  @Column({ type: "varchar" })
  @Index()
  updatedAtHeight: string;

  @Column({ type: "varchar" })
  @Index()
  dataHash: string;

  @Column({ type: "varchar", nullable: true })
  @Index()
  typeHash: string | null;

  @Column({ type: "int" })
  size: number;

  @Column({ type: "int" })
  isSsri: boolean;

  @Column({ type: "int" })
  isSsriUdt: boolean;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}


================================================
File: libs/schemas/src/schemas/spore.ts
================================================
import {
  Column,
  CreateDateColumn,
  Entity,
  Index,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from "typeorm";

@Entity()
@Index(["sporeId", "updatedAtHeight"], { unique: true })
export class Spore {
  @PrimaryGeneratedColumn("increment")
  id: number;

  @Column({ type: "varchar" })
  @Index()
  sporeId: string;

  @Column({ type: "varchar", nullable: true })
  clusterId?: string;

  @Column({ type: "mediumtext" })
  content: string;

  @Column({ type: "mediumtext" })
  contentType: string;

  @Column({ type: "mediumtext", nullable: true })
  dobDecoded?: string;

  @Column({ type: "varchar" })
  createTxHash: string;

  @Column({ type: "mediumtext" })
  creatorAddress: string;

  @Column({ type: "mediumtext", nullable: true })
  ownerAddress?: string;

  // To roll back on re-org
  @Column({ type: "varchar" })
  @Index()
  updatedAtHeight: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}


================================================
File: libs/schemas/src/schemas/syncStatus.ts
================================================
import {
  Column,
  CreateDateColumn,
  Entity,
  Index,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from "typeorm";

@Entity()
export class SyncStatus {
  @PrimaryGeneratedColumn("increment")
  id: number;

  @Column({ type: "varchar" })
  @Index({ unique: true })
  key: string;

  @Column({ type: "varchar" })
  value: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}


================================================
File: libs/schemas/src/schemas/udtBalance.ts
================================================
import {
  Column,
  CreateDateColumn,
  Entity,
  Index,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from "typeorm";

@Entity()
@Index(["addressHash", "tokenHash", "updatedAtHeight"], { unique: true })
export class UdtBalance {
  @PrimaryGeneratedColumn("increment")
  id: number;

  @Column({ type: "varchar" })
  @Index()
  addressHash: string;

  @Column({ type: "varchar" })
  @Index()
  tokenHash: string;

  // To roll back on re-org
  @Column({ type: "varchar" })
  @Index()
  updatedAtHeight: string;

  @Column({ type: "mediumtext" })
  address: string;

  /* === Statistic fields === */
  @Column({ type: "varchar" })
  capacity: string;

  @Column({ type: "varchar" })
  balance: string;
  /* === Statistic fields === */

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}


================================================
File: libs/schemas/src/schemas/udtInfo.ts
================================================
import {
  Column,
  CreateDateColumn,
  Entity,
  Index,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from "typeorm";

@Entity()
@Index(["hash", "updatedAtHeight"], { unique: true })
export class UdtInfo {
  @PrimaryGeneratedColumn("increment")
  id: number;

  @Column({ type: "varchar" })
  @Index()
  hash: string;

  // To roll back on re-org
  @Column({ type: "varchar" })
  @Index()
  updatedAtHeight: string;

  /* === Token type script === */
  @Column({ type: "varchar" })
  typeCodeHash: string;

  @Column({ type: "varchar" })
  typeHashType: string;

  @Column({ type: "text" })
  typeArgs: string;
  /* === Token type script === */

  @Column({ type: "mediumtext", nullable: true })
  name: string | null;

  @Column({ type: "mediumtext", nullable: true })
  symbol: string | null;

  @Column({ type: "int", nullable: true })
  decimals: number | null;

  @Column({ type: "text", nullable: true })
  icon: string | null;

  @Column({ type: "mediumtext", nullable: true })
  owner: string | null;

  /* === Statistic fields === */
  @Column({ type: "varchar" })
  firstIssuanceTxHash: string;

  @Column({ type: "varchar" })
  totalSupply: string;

  @Column({ type: "varchar" })
  capacity: string;
  /* === Statistic fields === */

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}


================================================
File: libs/spore/tsconfig.lib.json
================================================
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../../dist/libs/sync"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "test", "**/*spec.ts"]
}


================================================
File: libs/spore/src/index.ts
================================================
export * from "./spore.module";
export * from "./spore.service";


================================================
File: libs/spore/src/spore.controller.ts
================================================
import {
  ApiError,
  assert,
  Chain,
  ClusterInfo,
  NFTInfo,
  RpcError,
  RpcResponse,
} from "@app/commons";
import { ccc } from "@ckb-ccc/shell";
import { Controller, Get, Param, Query } from "@nestjs/common";
import { ApiOkResponse, ApiQuery } from "@nestjs/swagger";
import { SporeService } from "./spore.service";

(BigInt.prototype as unknown as { toJSON: () => string }).toJSON = function () {
  return this.toString();
};

@Controller()
export class SporeController {
  constructor(private readonly service: SporeService) {}

  @ApiOkResponse({
    type: ClusterInfo,
    description: "Get an on-chain cluster by the clusterId",
  })
  @ApiQuery({
    name: "withDesc",
    required: false,
  })
  @Get("/clusters/:clusterId")
  async getSporeClusterById(
    @Param("clusterId") clusterId: string,
    @Query("withDesc") withDesc?: boolean,
  ): Promise<RpcResponse<ClusterInfo>> {
    try {
      const cluster = assert(
        await this.service.getCluster(clusterId),
        RpcError.ClusterNotFound,
      );
      const itemsCount = await this.service.getItemsCountOfCluster(clusterId);
      const holdersCount =
        await this.service.getHoldersCountOfCluster(clusterId);
      const { height, timestamp } = assert(
        await this.service.getBlockInfoFromTx(cluster.createTxHash),
        RpcError.TxNotFound,
      );
      const rgbppTag = !cluster.ownerAddress.startsWith("ck");
      return {
        code: 0,
        data: {
          name: cluster.name,
          description: withDesc ? cluster.description : "",
          clusterId: ccc.hexFrom(clusterId),
          itemCount: itemsCount,
          holderCount: holdersCount,
          owner: cluster.ownerAddress,
          creator: cluster.creatorAddress,
          issueTxHeight: height,
          issueTxId: ccc.hexFrom(cluster.createTxHash),
          issueTime: timestamp,
          issueChain: rgbppTag ? Chain.Btc : Chain.Ckb,
          rgbppTag,
        },
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }

  @ApiOkResponse({
    type: NFTInfo,
    description: "Get an on-chain spore by the sporeId",
  })
  @ApiQuery({
    name: "withClusterDesc",
    required: false,
  })
  @Get("/spores/:sporeId")
  async getSporeById(
    @Param("sporeId") sporeId: string,
    @Query("withClusterDesc") withClusterDesc?: boolean,
  ): Promise<RpcResponse<NFTInfo>> {
    try {
      const spore = assert(
        await this.service.getSpore(sporeId),
        RpcError.SporeNotFound,
      );
      const { timestamp } = assert(
        await this.service.getBlockInfoFromTx(spore.createTxHash),
        RpcError.TxNotFound,
      );
      let clusterInfo: ClusterInfo | undefined = undefined;
      if (spore.clusterId) {
        const cluster = await this.getSporeClusterById(
          spore.clusterId,
          withClusterDesc,
        );
        if (cluster instanceof ClusterInfo) {
          clusterInfo = cluster;
        }
      }
      return {
        code: 0,
        data: {
          tokenId: ccc.hexFrom(sporeId),
          clusterId: spore.clusterId ? ccc.hexFrom(spore.clusterId) : undefined,
          clusterInfo,
          contentType: spore.contentType,
          content: spore.content,
          creator: spore.creatorAddress,
          owner: spore.ownerAddress,
          dobDetails: spore.dobDecoded,
          createTxId: ccc.hexFrom(spore.createTxHash),
          createTime: timestamp,
        },
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }
}


================================================
File: libs/spore/src/spore.module.ts
================================================
import { Module } from "@nestjs/common";
import { ClusterRepo, SporeRepo } from "./repos";
import { SporeController } from "./spore.controller";
import { SporeService } from "./spore.service";

@Module({
  providers: [SporeService, SporeRepo, ClusterRepo],
  exports: [SporeService],
  controllers: [SporeController],
})
export class SporeModule {}


================================================
File: libs/spore/src/spore.service.ts
================================================
import { assertConfig, parseBtcAddress } from "@app/commons";
import { Cluster, Spore } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Inject, Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { AxiosInstance } from "axios";
import { ClusterRepo, SporeRepo } from "./repos";

@Injectable()
export class SporeService {
  private readonly logger = new Logger(SporeService.name);
  private readonly client: ccc.Client;
  private readonly rgbppBtcCodeHash: ccc.Hex;
  private readonly rgbppBtcHashType: ccc.HashType;

  constructor(
    private readonly configService: ConfigService,
    private readonly clusterRepo: ClusterRepo,
    private readonly sporeRepo: SporeRepo,
    @Inject("BTC_REQUESTERS") private readonly btcRequesters: AxiosInstance[],
  ) {
    const isMainnet = configService.get<boolean>("sync.isMainnet");
    const ckbRpcUri = configService.get<string>("sync.ckbRpcUri");
    this.client = isMainnet
      ? new ccc.ClientPublicMainnet({ url: ckbRpcUri })
      : new ccc.ClientPublicTestnet({ url: ckbRpcUri });

    this.rgbppBtcCodeHash = ccc.hexFrom(
      assertConfig(configService, "sync.rgbppBtcCodeHash"),
    );
    this.rgbppBtcHashType = ccc.hashTypeFrom(
      assertConfig(configService, "sync.rgbppBtcHashType"),
    );
  }

  async scriptToAddress(scriptLike: ccc.ScriptLike): Promise<string> {
    if (
      scriptLike.codeHash === this.rgbppBtcCodeHash &&
      scriptLike.hashType === this.rgbppBtcHashType
    ) {
      return parseBtcAddress({
        client: this.client,
        rgbppScript: scriptLike,
        requesters: this.btcRequesters,
        logger: this.logger,
      });
    }
    const script = ccc.Script.from(scriptLike);
    return ccc.Address.fromScript(script, this.client).toString();
  }

  async getItemsCountOfCluster(clusterId: ccc.HexLike): Promise<number> {
    return await this.sporeRepo.getSporeCountByClusterId(clusterId);
  }

  async getHoldersCountOfCluster(clusterId: ccc.HexLike): Promise<number> {
    return await this.sporeRepo.getHolderCountByClusterId(clusterId);
  }

  async getCluster(clusterId: ccc.HexLike): Promise<Cluster | null> {
    return await this.clusterRepo.getClusterById(clusterId);
  }

  async getBlockInfoFromTx(txHash: string): Promise<{
    height: ccc.Num;
    timestamp: number;
  } | null> {
    const tx = await this.client.getTransaction(txHash);
    if (tx === undefined || tx.blockNumber === undefined) {
      return null;
    }
    const header = await this.client.getHeaderByNumber(tx.blockNumber);
    if (header === undefined) {
      return null;
    }
    return {
      height: header.number,
      timestamp: Number(header.timestamp / 1000n),
    };
  }

  async getSpore(sporeId: ccc.HexLike): Promise<Spore | null> {
    return await this.sporeRepo.getSpore(sporeId);
  }
}


================================================
File: libs/spore/src/repos/cluster.repo.ts
================================================
import { Cluster } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class ClusterRepo extends Repository<Cluster> {
  constructor(manager: EntityManager) {
    super(Cluster, manager);
  }

  async getClusterById(clusterId: ccc.HexLike): Promise<Cluster | null> {
    return await this.findOne({
      where: {
        clusterId: ccc.hexFrom(clusterId),
      },
      order: {
        updatedAtHeight: "DESC",
      },
    });
  }
}


================================================
File: libs/spore/src/repos/index.ts
================================================
export * from "./cluster.repo";
export * from "./spore.repo";


================================================
File: libs/spore/src/repos/spore.repo.ts
================================================
import { Spore } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class SporeRepo extends Repository<Spore> {
  constructor(manager: EntityManager) {
    super(Spore, manager);
  }

  async getSporeCountByClusterId(clusterId: ccc.HexLike): Promise<number> {
    return await this.manager
      .createQueryBuilder(Spore, "spore")
      .select("max(id)")
      .where("spore.clusterId = :clusterId", {
        clusterId: ccc.hexFrom(clusterId),
      })
      .groupBy("spore.sporeId")
      .getCount();
  }

  async getHolderCountByClusterId(clusterId: ccc.HexLike): Promise<number> {
    return await this.manager
      .createQueryBuilder(Spore, "spore")
      .select("max(id)")
      .where("spore.clusterId = :clusterId", {
        clusterId: ccc.hexFrom(clusterId),
      })
      .groupBy("spore.ownerAddress")
      .getCount();
  }

  async getSpore(sporeId: ccc.HexLike): Promise<Spore | null> {
    return await this.findOne({
      where: {
        sporeId: ccc.hexFrom(sporeId),
      },
      order: {
        updatedAtHeight: "DESC",
      },
    });
  }
}


================================================
File: libs/sync/tsconfig.lib.json
================================================
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../../dist/libs/sync"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "test", "**/*spec.ts"]
}


================================================
File: libs/sync/src/index.ts
================================================
export * from "./sync.module";
export * from "./sync.service";


================================================
File: libs/sync/src/sporeParser.ts
================================================
import {
  assertConfig,
  formatSortableInt,
  parseBtcAddress,
  parseScriptMode,
  ScriptMode,
  withTransaction,
} from "@app/commons";
import { ccc } from "@ckb-ccc/shell";
import { cccA } from "@ckb-ccc/shell/advanced";
import { spore } from "@ckb-ccc/spore";
import { Inject, Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { AxiosInstance } from "axios";
import { EntityManager } from "typeorm";
import { ClusterRepo } from "./repos/cluster.repo";
import { SporeRepo } from "./repos/spore.repo";

@Injectable()
export class SporeParserBuilder {
  public readonly logger = new Logger(SporeParserBuilder.name);
  public readonly client: ccc.Client;
  public readonly decoderUri: string;

  public readonly rgbppBtcCodeHash: ccc.Hex;
  public readonly rgbppBtcHashType: ccc.HashType;

  constructor(
    configService: ConfigService,
    public readonly entityManager: EntityManager,
    public readonly sporeRepo: SporeRepo,
    @Inject("BTC_REQUESTERS") private readonly btcRequesters: AxiosInstance[],
  ) {
    const isMainnet = configService.get<boolean>("sync.isMainnet");
    const ckbRpcUri = configService.get<string>("sync.ckbRpcUri");
    this.client = isMainnet
      ? new ccc.ClientPublicMainnet({ url: ckbRpcUri })
      : new ccc.ClientPublicTestnet({ url: ckbRpcUri });

    this.decoderUri = assertConfig(configService, "sync.decoderServerUri");
    this.rgbppBtcCodeHash = ccc.hexFrom(
      assertConfig(configService, "sync.rgbppBtcCodeHash"),
    );
    this.rgbppBtcHashType = ccc.hashTypeFrom(
      assertConfig(configService, "sync.rgbppBtcHashType"),
    );
  }

  build(blockHeight: ccc.NumLike): SporeParser {
    return new SporeParser(this, ccc.numFrom(blockHeight));
  }

  async scriptToAddress(scriptLike: ccc.ScriptLike): Promise<string> {
    if (
      scriptLike.codeHash === this.rgbppBtcCodeHash &&
      scriptLike.hashType === this.rgbppBtcHashType
    ) {
      return parseBtcAddress({
        client: this.client,
        rgbppScript: scriptLike,
        requesters: this.btcRequesters,
        logger: this.logger,
      });
    }
    const script = ccc.Script.from(scriptLike);
    return ccc.Address.fromScript(script, this.client).toString();
  }

  async getDobDecodedBySporeId(sporeId: ccc.Hex): Promise<string | undefined> {
    return await this.sporeRepo.getDobBySporeId(sporeId);
  }
}

interface SporeDetail {
  content: string;
  contentType: string;
  clusterId?: string;
  dobDecoded?: string;
}

interface ClusterDetial {
  name: string;
  description: string;
}

interface Flow {
  asset: {
    ownerScript: ccc.Script;
    data: ccc.Hex;
    spore?: SporeDetail;
    cluster?: ClusterDetial;
  };
  mint?: {
    to: string;
  };
  transfer?: {
    from: string;
    to: string;
  };
  burn?: {
    from: string;
  };
}

class SporeParser {
  constructor(
    public readonly context: SporeParserBuilder,
    public readonly blockHeight: ccc.Num,
  ) {}

  async analyzeFlow(
    tx: ccc.Transaction,
    mode: ScriptMode,
  ): Promise<Record<string, Flow>> {
    const flows: Record<string, Flow> = {};

    // Collect all spore or cluster in the inputs
    for (const input of tx.inputs) {
      const { cellOutput, outputData } = input;
      if (!cellOutput || !outputData || !cellOutput.type) {
        continue;
      }
      const expectedMode = await parseScriptMode(
        cellOutput.type,
        this.context.client,
      );
      if (expectedMode !== mode) {
        continue;
      }
      const address = await this.context.scriptToAddress(cellOutput.lock);
      const sporeOrClusterId = cellOutput.type.args;
      flows[sporeOrClusterId] = {
        asset: {
          ownerScript: cellOutput.lock,
          data: outputData,
        },
        burn: {
          from: address,
        },
      };
    }

    // Collect and update all spore or cluster from the outputs
    for (const [index, output] of tx.outputs.entries()) {
      if (!output.type) {
        continue;
      }
      const expectedMode = await parseScriptMode(
        output.type,
        this.context.client,
      );
      if (expectedMode !== mode) {
        continue;
      }
      const address = await this.context.scriptToAddress(output.lock);
      const sporeOrClusterId = output.type.args;
      const burnSpore = flows[sporeOrClusterId];
      if (burnSpore) {
        flows[sporeOrClusterId] = {
          asset: burnSpore.asset,
          transfer: {
            from: burnSpore.burn!.from,
            to: address,
          },
        };
      } else {
        flows[sporeOrClusterId] = {
          asset: {
            ownerScript: output.lock,
            data: tx.outputsData[index],
          },
          mint: {
            to: address,
          },
        };
      }
    }

    // Parse spore or cluster data before the persistence
    for (const [id, flow] of Object.entries(flows)) {
      if (mode === ScriptMode.Spore) {
        try {
          flow.asset.spore = await this.parseSporeData(
            ccc.hexFrom(id),
            flow.asset.data,
          );
        } catch (err) {
          this.context.logger.warn(
            `Failed to parse spore data ${ccc.hexFrom(id)}: ${err.toString()}`,
          );
        }
      } else {
        try {
          flow.asset.cluster = this.parseClusterData(flow.asset.data);
        } catch (err) {
          this.context.logger.warn(
            `Failed to parse cluster data ${ccc.hexFrom(id)}: ${err.toString()}`,
          );
        }
      }
      flows[id] = flow;
    }

    return flows;
  }

  async parseSporeData(sporeId: ccc.Hex, data: ccc.Hex): Promise<SporeDetail> {
    const sporeData = cccA.sporeA.unpackToRawSporeData(data);
    const decoded = {
      contentType: sporeData.contentType,
      content: ccc.hexFrom(sporeData.content),
      clusterId: sporeData.clusterId
        ? ccc.hexFrom(sporeData.clusterId)
        : undefined,
    };
    if (decoded.clusterId) {
      const cluster = await ccc.spore.findCluster(
        this.context.client,
        decoded.clusterId,
      );
      if (cluster === undefined) {
        throw new Error(
          `Spore data broken, cluster not found: ${decoded.clusterId}`,
        );
      }
      try {
        let dobDecoded = await this.context.getDobDecodedBySporeId(sporeId);
        if (dobDecoded === undefined) {
          const dobRenderOutput = await spore.dob.decodeDobByRawData(
            data,
            cluster.cell.outputData,
            this.context.decoderUri,
          );
          dobDecoded = JSON.stringify(dobRenderOutput);
        }
        Object.assign(decoded, { dobDecoded });
      } catch (error) {
        this.context.logger.warn(`Spore ${sporeId}: ${error}`);
      }
    }
    return decoded;
  }

  parseClusterData(data: ccc.Hex): ClusterDetial {
    return cccA.sporeA.unpackToRawClusterData(data);
  }

  async handleSporeFlow(
    txHash: ccc.Hex,
    sporeId: ccc.Hex,
    flow: Flow,
    sporeRepo: SporeRepo,
    clusterRepo: ClusterRepo,
  ) {
    const { asset, mint, transfer, burn } = flow;
    if (!flow.asset.spore) {
      return;
    }
    const prevSpore = await sporeRepo.findOne({
      where: { sporeId },
      order: { updatedAtHeight: "DESC" },
    });

    if (mint) {
      if (prevSpore) {
        throw new Error(
          `Spore already exists when minting ${sporeId}, at tx ${txHash}`,
        );
      }
      let creatorAddress = mint.to;
      if (asset.spore?.clusterId !== undefined) {
        const cluster = await clusterRepo.findOne({
          where: { clusterId: asset.spore?.clusterId },
          order: { updatedAtHeight: "DESC" },
        });
        if (cluster === null) {
          this.context.logger.warn(
            `Cluster not found when minting spore ${sporeId} at tx ${txHash}`,
          );
        } else {
          creatorAddress = cluster.ownerAddress;
        }
      }
      const spore = sporeRepo.create({
        sporeId,
        ...asset.spore,
        creatorAddress,
        ownerAddress: mint.to,
        createTxHash: txHash,
        updatedAtHeight: formatSortableInt(this.blockHeight),
      });
      await sporeRepo.save(spore);
      this.context.logger.log(`Mint Spore ${sporeId} at tx ${txHash}`);
    }

    if (transfer) {
      if (prevSpore && prevSpore.ownerAddress !== transfer.from) {
        this.context.logger.error(
          `Spore owner mismatch when transferring ${sporeId}, expected: ${prevSpore.ownerAddress}, actual: ${transfer.from}, at tx ${txHash}`,
        );
      }
      if (!prevSpore) {
        this.context.logger.warn(
          `Spore not found when transferring ${sporeId} at tx ${txHash}`,
        );
      }
      const spore = sporeRepo.create({
        ...(prevSpore ?? {
          sporeId,
          ...asset.spore,
          creatorAddress: transfer.from,
          createTxHash: txHash,
        }),
        ownerAddress: transfer.to,
        updatedAtHeight: formatSortableInt(this.blockHeight),
        id:
          prevSpore?.updatedAtHeight === formatSortableInt(this.blockHeight)
            ? prevSpore.id
            : undefined,
      });
      await sporeRepo.save(spore);
    }

    if (burn) {
      if (prevSpore && prevSpore.ownerAddress !== burn.from) {
        this.context.logger.error(
          `Spore owner mismatch when burning ${sporeId}, expected: ${prevSpore.ownerAddress}, actual: ${burn.from}, at tx ${txHash}`,
        );
      }
      if (!prevSpore) {
        this.context.logger.warn(
          `Spore not found when burning ${sporeId} at tx ${txHash}`,
        );
      }
      const spore = sporeRepo.create({
        ...(prevSpore ?? {
          sporeId,
          ...asset.spore,
          creatorAddress: burn.from,
          createTxHash: txHash,
        }),
        ownerAddress: undefined,
        updatedAtHeight: formatSortableInt(this.blockHeight),
        id:
          prevSpore?.updatedAtHeight === formatSortableInt(this.blockHeight)
            ? prevSpore.id
            : undefined,
      });
      await sporeRepo.save(spore);
    }
  }

  async handleClusterFlow(
    txHash: ccc.Hex,
    clusterId: ccc.Hex,
    flow: Flow,
    clusterRepo: ClusterRepo,
  ) {
    const { asset, mint, transfer, burn } = flow;
    if (!flow.asset.cluster) {
      return;
    }
    const prevCluster = await clusterRepo.findOne({
      where: { clusterId },
      order: { updatedAtHeight: "DESC" },
    });

    if (mint) {
      if (prevCluster) {
        throw new Error(`Cluster already exists when minting: ${clusterId}`);
      }
      const cluster = clusterRepo.create({
        clusterId,
        ...asset.cluster,
        creatorAddress: mint.to,
        ownerAddress: mint.to,
        createTxHash: txHash,
        updatedAtHeight: formatSortableInt(this.blockHeight),
      });
      await clusterRepo.save(cluster);
      this.context.logger.log(
        `Mint Cluster ${asset.cluster?.name}(${clusterId}) at tx ${txHash}`,
      );
    }

    if (transfer) {
      if (prevCluster && prevCluster.ownerAddress !== transfer.from) {
        this.context.logger.error(
          `Cluster owner mismatch when transferring: ${clusterId}, expected: ${prevCluster.ownerAddress}, actual: ${transfer.from}`,
        );
      }
      if (!prevCluster) {
        this.context.logger.warn(
          `Cluster not found when transferring: ${clusterId}`,
        );
      }
      const cluster = clusterRepo.create({
        ...(prevCluster ?? {
          clusterId,
          ...asset.cluster,
          creatorAddress: transfer.from,
          createTxHash: txHash,
        }),
        ownerAddress: transfer.to,
        updatedAtHeight: formatSortableInt(this.blockHeight),
        id:
          prevCluster?.updatedAtHeight === formatSortableInt(this.blockHeight)
            ? prevCluster.id
            : undefined,
      });
      await clusterRepo.save(cluster);
    }

    if (burn) {
      throw new Error(
        `Cluster burn is not supported: ${clusterId}, at tx ${txHash}`,
      );
    }
  }

  async analyzeTxFlow(tx: ccc.Transaction): Promise<{
    sporeFlows: Record<string, Flow>;
    clusterFlows: Record<string, Flow>;
  }> {
    const sporeFlows = await this.analyzeFlow(tx, ScriptMode.Spore);
    const clusterFlows = await this.analyzeFlow(tx, ScriptMode.Cluster);
    return { sporeFlows, clusterFlows };
  }

  async handleFlows(
    entityManager: EntityManager,
    tx: ccc.Transaction,
    flows: {
      sporeFlows: Record<string, Flow>;
      clusterFlows: Record<string, Flow>;
    },
  ) {
    await withTransaction(
      this.context.entityManager,
      entityManager,
      async (entityManager) => {
        const sporeRepo = new SporeRepo(entityManager);
        const clusterRepo = new ClusterRepo(entityManager);

        for (const [sporeId, flow] of Object.entries(flows.sporeFlows)) {
          await this.handleSporeFlow(
            tx.hash(),
            ccc.hexFrom(sporeId),
            flow,
            sporeRepo,
            clusterRepo,
          );
        }

        for (const [clusterId, flow] of Object.entries(flows.clusterFlows)) {
          await this.handleClusterFlow(
            tx.hash(),
            ccc.hexFrom(clusterId),
            flow,
            clusterRepo,
          );
        }
      },
    );
  }
}


================================================
File: libs/sync/src/sync.controller.ts
================================================
import {
  ApiError,
  assert,
  parseSortableInt,
  RpcError,
  RpcResponse,
  TrackerInfo,
} from "@app/commons";
import { ccc } from "@ckb-ccc/shell";
import { Controller, Get } from "@nestjs/common";
import { ApiOkResponse } from "@nestjs/swagger";
import { SyncService } from "./sync.service";

(BigInt.prototype as unknown as { toJSON: () => string }).toJSON = function () {
  return this.toString();
};

@Controller()
export class SyncController {
  constructor(private readonly service: SyncService) {}

  @ApiOkResponse({
    type: TrackerInfo,
    description: "Get current tracker running status quo",
  })
  @Get("/trackerInfo")
  async getTrackerInfo(): Promise<RpcResponse<TrackerInfo>> {
    try {
      const dbTip = assert(
        await this.service.getBlockHeader({
          fromDb: true,
        }),
        RpcError.BlockNotFound,
      );
      const nodeTip = assert(
        await this.service.getBlockHeader({
          fromDb: false,
        }),
        RpcError.BlockNotFound,
      );
      return {
        code: 0,
        data: {
          trackerBlockHeight: parseSortableInt(dbTip.height),
          trackerBestBlockHash: ccc.hexFrom(dbTip.hash),
          nodeBlockHeight: parseSortableInt(nodeTip.height),
          nodeBestBlockHash: ccc.hexFrom(nodeTip.hash),
        },
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }
}


================================================
File: libs/sync/src/sync.module.ts
================================================
import { Module } from "@nestjs/common";
import {
  ScriptCodeRepo,
  SyncStatusRepo,
  UdtBalanceRepo,
  UdtInfoRepo,
} from "./repos";
import { BlockRepo } from "./repos/block.repo";
import { ClusterRepo } from "./repos/cluster.repo";
import { SporeRepo } from "./repos/spore.repo";
import { SporeParserBuilder } from "./sporeParser";
import { SyncController } from "./sync.controller";
import { SyncService } from "./sync.service";
import { UdtParser } from "./udtParser";

@Module({
  providers: [
    SyncService,
    SporeParserBuilder,
    UdtParser,
    BlockRepo,
    ScriptCodeRepo,
    SyncStatusRepo,
    UdtBalanceRepo,
    UdtInfoRepo,
    SporeRepo,
    ClusterRepo,
  ],
  exports: [SyncService, UdtParser, SporeParserBuilder],
  controllers: [SyncController],
})
export class SyncModule {}


================================================
File: libs/sync/src/sync.service.ts
================================================
import {
  assertConfig,
  autoRun,
  formatSortableInt,
  headerToRepoBlock,
  parseSortableInt,
  withTransaction,
} from "@app/commons";
import { Block } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import {
  And,
  EntityManager,
  LessThan,
  LessThanOrEqual,
  MoreThan,
  MoreThanOrEqual,
} from "typeorm";
import {
  ScriptCodeRepo,
  SyncStatusRepo,
  UdtBalanceRepo,
  UdtInfoRepo,
} from "./repos";
import { BlockRepo } from "./repos/block.repo";
import { ClusterRepo } from "./repos/cluster.repo";
import { SporeRepo } from "./repos/spore.repo";
import { SporeParserBuilder } from "./sporeParser";

import { Worker } from "worker_threads";
import { UdtParser } from "./udtParser";

const SYNC_KEY = "SYNCED";
const PENDING_KEY = "PENDING";
const PENDING_HASH_KEY = "PENDING_HASH";

function getBlocksOnWorker(
  worker: Worker,
  start: ccc.NumLike,
  end: ccc.NumLike,
): Promise<
  {
    height: ccc.Num;
    block: ccc.ClientBlock;
    scriptCodes: {
      outPoint: ccc.OutPointLike;
      size: number;
      dataHash: ccc.Hex;
      typeHash?: ccc.Hex;
      isSsri: boolean;
      isSsriUdt: boolean;
    }[];
  }[]
> {
  return new Promise((resolve, reject) => {
    worker.removeAllListeners("message");
    worker.removeAllListeners("error");

    worker.postMessage({
      start,
      end,
    });

    worker.addListener("message", resolve);
    worker.addListener("error", reject);
  });
}

async function* getBlocks(props: {
  start: ccc.NumLike;
  end: ccc.NumLike;
  ssriServerUri: string;
  workers?: number;
  chunkSize?: number;
  isMainnet?: boolean;
  rpcUri?: string;
  rpcTimeout?: number;
  maxConcurrent?: number;
}) {
  const start = ccc.numFrom(props.start);
  const end = ccc.numFrom(props.end);
  const workers = props.workers ?? 8;
  const chunkSize = ccc.numFrom(props.chunkSize ?? 5);

  const queries: ReturnType<typeof getBlocksOnWorker>[] = [];
  const freeWorkers = Array.from(
    new Array(workers),
    () =>
      new Worker("./dist/workers/getBlock.js", {
        workerData: {
          isMainnet: props.isMainnet,
          rpcUri: props.rpcUri,
          ssriServerUri: props.ssriServerUri,
          rpcTimeout: props.rpcTimeout,
          maxConcurrent: props.maxConcurrent,
        },
      }),
  );

  let offset = start;
  while (true) {
    const workerEnd = ccc.numMin(offset + chunkSize, end);
    if (freeWorkers.length === 0 || offset === workerEnd) {
      const query = queries.shift();
      if (!query) {
        break;
      }
      for (const block of await query) {
        yield block;
      }
      continue;
    }

    const worker = freeWorkers.shift()!;
    queries.push(
      getBlocksOnWorker(worker, offset, workerEnd).then((res) => {
        freeWorkers.push(worker);
        return res;
      }),
    );
    offset = workerEnd;
  }

  freeWorkers.forEach((worker) => worker.terminate());
}

@Injectable()
export class SyncService {
  private readonly logger = new Logger(SyncService.name);

  private readonly isMainnet: boolean | undefined;
  private readonly ssriServerUri: string;
  private readonly ckbRpcUri: string | undefined;
  private readonly ckbRpcTimeout: number | undefined;
  private readonly maxConcurrent: number | undefined;
  private readonly client: ccc.Client;

  private readonly threads: number | undefined;
  private readonly blockChunk: number | undefined;
  private readonly blockLimitPerInterval: number | undefined;
  private readonly blockSyncStart: number | undefined;
  private readonly confirmations: number | undefined;

  private startTip?: ccc.Num;
  private startTipTime?: number;
  private syncedBlocks: number = 0;
  private syncedBlockTime: number = 0;

  constructor(
    configService: ConfigService,
    private readonly sporeParserBuilder: SporeParserBuilder,
    private readonly udtParser: UdtParser,
    private readonly entityManager: EntityManager,
    private readonly syncStatusRepo: SyncStatusRepo,
    private readonly udtInfoRepo: UdtInfoRepo,
    private readonly udtBalanceRepo: UdtBalanceRepo,
    private readonly sporeRepo: SporeRepo,
    private readonly clusterRepo: ClusterRepo,
    private readonly blockRepo: BlockRepo,
    private readonly scriptCodeRepo: ScriptCodeRepo,
  ) {
    this.isMainnet = configService.get<boolean>("sync.isMainnet");
    this.ssriServerUri = assertConfig<string>(
      configService,
      "sync.ssriServerUri",
    );
    this.ckbRpcUri = configService.get<string>("sync.ckbRpcUri");
    this.ckbRpcTimeout = configService.get<number>("sync.ckbRpcTimeout");
    this.maxConcurrent = configService.get<number>("sync.maxConcurrent");
    this.client = this.isMainnet
      ? new ccc.ClientPublicMainnet({
          url: this.ckbRpcUri,
          maxConcurrent: this.maxConcurrent,
        })
      : new ccc.ClientPublicTestnet({
          url: this.ckbRpcUri,
          maxConcurrent: this.maxConcurrent,
        });
    this.threads = configService.get<number>("sync.threads");
    this.blockChunk = configService.get<number>("sync.blockChunk");

    this.blockLimitPerInterval = configService.get<number>(
      "sync.blockLimitPerInterval",
    );
    this.blockSyncStart = configService.get<number>("sync.blockSyncStart");
    this.confirmations = configService.get<number>("sync.confirmations");

    const syncInterval = configService.get<number>("sync.interval");
    if (syncInterval !== undefined) {
      autoRun(this.logger, syncInterval, () => this.sync());
    }

    const clearInterval = configService.get<number>("sync.clearInterval");
    if (this.confirmations !== undefined && clearInterval !== undefined) {
      autoRun(this.logger, clearInterval, () => this.clear());
    }
  }

  async sync() {
    // Will break when endBlock === tip
    while (true) {
      const pendingStatus = await this.syncStatusRepo.syncHeight(
        PENDING_KEY,
        this.blockSyncStart,
      );
      const pendingHeight = parseSortableInt(pendingStatus.value);

      const tipTime = Date.now();
      const tip = await this.client.getTip();
      const tipCost =
        this.startTip !== undefined && this.startTipTime !== undefined
          ? (tipTime - this.startTipTime) / Number(tip - this.startTip)
          : undefined;
      if (this.startTip === undefined || this.startTipTime === undefined) {
        this.startTip = tip;
        this.startTipTime = tipTime;
      }

      const endBlock =
        this.blockLimitPerInterval === undefined
          ? tip
          : ccc.numMin(
              pendingHeight + ccc.numFrom(this.blockLimitPerInterval),
              tip,
            );

      let txsCount = 0;
      for await (const { height, block, scriptCodes } of getBlocks({
        start: pendingHeight,
        end: endBlock,
        ssriServerUri: this.ssriServerUri,
        workers: this.threads,
        chunkSize: this.blockChunk,
        rpcUri: this.ckbRpcUri,
        rpcTimeout: this.ckbRpcTimeout,
        isMainnet: this.isMainnet,
        maxConcurrent: this.maxConcurrent,
      })) {
        if (!block) {
          this.logger.error(`Failed to get block ${height}`);
          break;
        }

        const pendingHash = await this.syncStatusRepo.findOneBy({
          key: PENDING_HASH_KEY,
        });
        if (pendingHash && pendingHash.value !== block.header.parentHash) {
          this.logger.warn("Blockchain reorg detected, rolling back data");
          await withTransaction(
            this.entityManager,
            undefined,
            async (entityManager) => {
              /* === Rollback block status === */
              const blockRepo = new BlockRepo(entityManager);
              const syncStatusRepo = new SyncStatusRepo(entityManager);

              const block = await blockRepo.findOneBy({
                hash: pendingHash.value,
              });
              if (!block) {
                throw new Error(
                  `Failed to find block to rollback ${pendingHash.value}`,
                );
              }
              const rolledBackHeight = formatSortableInt(block.height);
              await blockRepo.delete({ hash: block.hash });

              const updateHash = await syncStatusRepo.update(
                {
                  key: pendingHash.key,
                  value: pendingHash.value,
                },
                {
                  value: block.parentHash,
                },
              );
              const updateNumber = await syncStatusRepo.update(
                {
                  key: pendingStatus.key,
                  value: pendingStatus.value,
                },
                {
                  value: formatSortableInt(
                    parseSortableInt(block.height) - ccc.numFrom(1),
                  ),
                },
              );
              if (
                (updateHash.affected ?? 0) === 0 ||
                (updateNumber.affected ?? 0) === 0
              ) {
                throw new Error(
                  `Failed to rollback pending block hash from ${pendingStatus.value}(${pendingHash.value}) to ${block.height}(${block.parentHash})`,
                );
              }
              /* === Rollback block status === */

              /* === Rollback records === */
              const clusterRepo = new ClusterRepo(entityManager);
              const sporeRepo = new SporeRepo(entityManager);
              const udtInfoRepo = new UdtInfoRepo(entityManager);
              const udtBalanceRepo = new UdtBalanceRepo(entityManager);

              await Promise.all([
                clusterRepo.delete({
                  updatedAtHeight: MoreThanOrEqual(rolledBackHeight),
                }),
                sporeRepo.delete({
                  updatedAtHeight: MoreThanOrEqual(rolledBackHeight),
                }),
                udtInfoRepo.delete({
                  updatedAtHeight: MoreThanOrEqual(rolledBackHeight),
                }),
                udtBalanceRepo.delete({
                  updatedAtHeight: MoreThanOrEqual(rolledBackHeight),
                }),
              ]);
              /* === Rollback records === */
            },
          );
          return;
        }

        txsCount += block.transactions.length;
        await Promise.all(
          scriptCodes.map(async (scriptCode) => {
            const outPoint = ccc.hexFrom(
              ccc.OutPoint.encode(scriptCode.outPoint),
            );
            const existed = await this.scriptCodeRepo.findOneBy({ outPoint });
            if (!existed) {
              await this.scriptCodeRepo.save({
                outPoint,
                updatedAtHeight: formatSortableInt(height),
                dataHash: scriptCode.dataHash,
                typeHash: scriptCode.typeHash,
                size: scriptCode.size,
                isSsri: scriptCode.isSsri,
                isSsriUdt: scriptCode.isSsriUdt,
              });
            }
          }),
        );

        const sporeParser = this.sporeParserBuilder.build(height);

        const txDiffs = await Promise.all(
          block.transactions.map(async (txLike) => {
            const tx = ccc.Transaction.from(txLike);
            const diffs = await this.udtParser.udtInfoHandleTx(tx);
            const flows = await sporeParser.analyzeTxFlow(tx);
            return { tx, diffs, flows };
          }),
        );

        await withTransaction(
          this.entityManager,
          undefined,
          async (entityManager) => {
            const blockRepo = new BlockRepo(entityManager);
            const syncStatusRepo = new SyncStatusRepo(entityManager);
            await blockRepo.insert({
              hash: block.header.hash,
              parentHash: block.header.parentHash,
              height: formatSortableInt(block.header.number),
              timestamp: Number(block.header.timestamp / 1000n),
            });
            if (pendingHash) {
              const update = await syncStatusRepo.update(
                {
                  key: PENDING_HASH_KEY,
                  value: pendingHash.value,
                },
                { value: block.header.hash },
              );
              if (update.affected === 0) {
                throw new Error(
                  `Failed to update pending block hash from ${pendingHash.value} to ${block.header.hash}`,
                );
              }
            } else {
              await syncStatusRepo.save({
                key: PENDING_HASH_KEY,
                value: block.header.hash,
              });
            }

            for (const { tx, diffs, flows } of txDiffs) {
              await sporeParser.handleFlows(entityManager, tx, flows);
              await this.udtParser.saveDiffs(entityManager, tx, height, diffs);
            }

            await syncStatusRepo.updateSyncHeight(pendingStatus, height);
          },
        );

        this.syncedBlocks += 1;

        if (this.syncedBlocks % 1000 === 0 || height === endBlock) {
          const syncedBlockTime = this.syncedBlockTime + Date.now() - tipTime;
          const blocksDiff = Number(tip - endBlock);
          const syncCost = syncedBlockTime / this.syncedBlocks;
          const estimatedTime = tipCost
            ? (blocksDiff * syncCost * tipCost) / (tipCost - syncCost)
            : blocksDiff * syncCost;
          this.logger.log(
            `Tip ${tip} ${tipCost ? (tipCost / 1000).toFixed(1) : "-"} s/block, synced block ${height}, ${(
              (this.syncedBlocks * 1000) /
              syncedBlockTime
            ).toFixed(1)} blocks/s (~${
              estimatedTime !== undefined
                ? (estimatedTime / 1000 / 60).toFixed(1)
                : "-"
            } mins left). ${txsCount} transactions processed`,
          );
          txsCount = 0;
        }
      }
      this.syncedBlockTime += Date.now() - tipTime;

      if (endBlock === tip) {
        break;
      }
    }
  }

  async clear() {
    if (this.confirmations === undefined) {
      return;
    }
    if (!(await this.syncStatusRepo.hasKeys([SYNC_KEY, PENDING_KEY]))) {
      return;
    }

    const pendingHeight = parseSortableInt(
      (await this.syncStatusRepo.assertSyncHeight(PENDING_KEY)).value,
    );
    const confirmedHeight = pendingHeight - ccc.numFrom(this.confirmations);

    const syncedStatus = await this.syncStatusRepo.assertSyncHeight(SYNC_KEY);
    if (parseSortableInt(syncedStatus.value) >= confirmedHeight) {
      return;
    }
    await this.syncStatusRepo.updateSyncHeight(syncedStatus, confirmedHeight);
    this.logger.log(`Clearing up to height ${confirmedHeight}`);

    let deleteUdtInfoCount = 0;
    while (true) {
      const udtInfo = await this.udtInfoRepo.findOne({
        where: {
          updatedAtHeight: And(
            LessThanOrEqual(formatSortableInt(confirmedHeight)),
            MoreThan(formatSortableInt("-1")),
          ),
        },
        order: {
          updatedAtHeight: "DESC",
        },
      });
      if (!udtInfo) {
        // No more confirmed data
        break;
      }

      await withTransaction(
        this.entityManager,
        undefined,
        async (entityManager) => {
          const udtInfoRepo = new UdtInfoRepo(entityManager);

          // Delete all history data, and set the latest confirmed data as permanent data
          const deleted = await udtInfoRepo.delete({
            hash: udtInfo.hash,
            updatedAtHeight: LessThan(udtInfo.updatedAtHeight),
          });
          deleteUdtInfoCount += deleted.affected ?? 0;

          await udtInfoRepo.update(
            { id: udtInfo.id },
            { updatedAtHeight: formatSortableInt("-1") },
          );
        },
      );
    }

    let deleteUdtBalanceCount = 0;
    while (true) {
      const udtBalance = await this.udtBalanceRepo.findOne({
        where: {
          updatedAtHeight: And(
            LessThanOrEqual(formatSortableInt(confirmedHeight)),
            MoreThan(formatSortableInt("-1")),
          ),
        },
        order: {
          updatedAtHeight: "DESC",
        },
      });
      if (!udtBalance) {
        // No more confirmed data
        break;
      }

      await withTransaction(
        this.entityManager,
        undefined,
        async (entityManager) => {
          const udtBalanceRepo = new UdtBalanceRepo(entityManager);

          // Delete all history data, and set the latest confirmed data as permanent data
          const deleted = await udtBalanceRepo.delete({
            addressHash: udtBalance.addressHash,
            tokenHash: udtBalance.tokenHash,
            updatedAtHeight: LessThan(udtBalance.updatedAtHeight),
          });
          deleteUdtBalanceCount += deleted.affected ?? 0;

          await udtBalanceRepo.update(
            { id: udtBalance.id },
            { updatedAtHeight: formatSortableInt("-1") },
          );
        },
      );
    }

    let deleteSporeCount = 0;
    while (true) {
      const spore = await this.sporeRepo.findOne({
        where: {
          updatedAtHeight: And(
            LessThanOrEqual(formatSortableInt(confirmedHeight)),
            MoreThan(formatSortableInt("-1")),
          ),
        },
        order: {
          updatedAtHeight: "DESC",
        },
      });
      if (!spore) {
        // No more confirmed data
        break;
      }

      await withTransaction(
        this.entityManager,
        undefined,
        async (entityManager) => {
          const sporeRepo = new SporeRepo(entityManager);

          // Delete all history data, and set the latest confirmed data as permanent data
          const deleted = await sporeRepo.delete({
            sporeId: spore.sporeId,
            updatedAtHeight: LessThan(spore.updatedAtHeight),
          });
          deleteSporeCount += deleted.affected ?? 0;

          await sporeRepo.update(
            { id: spore.id },
            { updatedAtHeight: formatSortableInt("-1") },
          );
        },
      );
    }

    let deleteClusterCount = 0;
    while (true) {
      const cluster = await this.clusterRepo.findOne({
        where: {
          updatedAtHeight: And(
            LessThanOrEqual(formatSortableInt(confirmedHeight)),
            MoreThan(formatSortableInt("-1")),
          ),
        },
        order: {
          updatedAtHeight: "DESC",
        },
      });
      if (!cluster) {
        // No more confirmed data
        break;
      }

      await withTransaction(
        this.entityManager,
        undefined,
        async (entityManager) => {
          const clusterRepo = new ClusterRepo(entityManager);

          // Delete all history data, and set the latest confirmed data as permanent data
          const deleted = await clusterRepo.delete({
            clusterId: cluster.clusterId,
            updatedAtHeight: LessThan(cluster.updatedAtHeight),
          });
          deleteClusterCount += deleted.affected ?? 0;

          await clusterRepo.update(
            { id: cluster.id },
            { updatedAtHeight: formatSortableInt("-1") },
          );
        },
      );
    }

    this.logger.log(
      `Cleared ${deleteUdtInfoCount} confirmed UDT info, ${deleteUdtBalanceCount} confirmed UDT balance, ${deleteSporeCount} confirmed Spore, ${deleteClusterCount} confirmed Cluster`,
    );
  }

  async getBlockHeader(params: {
    blockNumber?: number;
    fromDb: boolean;
  }): Promise<Block | undefined> {
    const { blockNumber, fromDb } = params;
    if (blockNumber) {
      if (fromDb) {
        return await this.blockRepo.getBlockByNumber(ccc.numFrom(blockNumber));
      } else {
        const header = await this.client.getHeaderByNumber(blockNumber);
        return headerToRepoBlock(header);
      }
    } else {
      if (fromDb) {
        return await this.blockRepo.getTipBlock();
      } else {
        const header = await this.client.getTipHeader();
        return headerToRepoBlock(header);
      }
    }
  }
}


================================================
File: libs/sync/src/udtParser.ts
================================================
import {
  assertConfig,
  formatSortable,
  formatSortableInt,
  parseBtcAddress,
  parseSortableInt,
  withTransaction,
} from "@app/commons";
import { ScriptCode } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Inject, Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { AxiosInstance } from "axios";
import { EntityManager } from "typeorm";
import { ScriptCodeRepo, UdtBalanceRepo, UdtInfoRepo } from "./repos";

enum UdtType {
  SUdt = "sUdt",
  Ssri = "Ssri",
}

type UdtTypeInfo =
  | { type: UdtType.Ssri; scriptCode: ScriptCode }
  | { type: UdtType.SUdt };

type TokenInfo = {
  name?: string;
  symbol?: string;
  decimals?: number;
  icon?: string;
};

async function trySsriMethod<T>(
  fn: () => Promise<ccc.ssri.ExecutorResponse<T>>,
): Promise<ccc.ssri.ExecutorResponse<T | undefined>> {
  try {
    return await fn();
  } catch (err) {
    if (
      !(err instanceof ccc.ssri.ExecutorErrorExecutionFailed) &&
      !(err instanceof ccc.ssri.ExecutorErrorExecutionFailed)
    ) {
      throw err;
    }
    return ccc.ssri.ExecutorResponse.new(undefined);
  }
}

@Injectable()
export class UdtParser {
  public readonly logger = new Logger(UdtParser.name);
  public readonly client: ccc.Client;
  public readonly executor: ccc.ssri.Executor;

  public readonly udtTypes: ccc.Script[];

  public readonly rgbppBtcCodeHash: ccc.Hex;
  public readonly rgbppBtcHashType: ccc.HashType;

  constructor(
    configService: ConfigService,
    public readonly entityManager: EntityManager,
    public readonly udtInfoRepo: UdtInfoRepo,
    public readonly scriptCodeRepo: ScriptCodeRepo,
    @Inject("BTC_REQUESTERS") private readonly btcRequesters: AxiosInstance[],
  ) {
    const isMainnet = configService.get<boolean>("sync.isMainnet");
    const ssriServerUri = assertConfig<string>(
      configService,
      "sync.ssriServerUri",
    );
    this.executor = new ccc.ssri.ExecutorJsonRpc(ssriServerUri);
    const ckbRpcTimeout = configService.get<number>("sync.ckbRpcTimeout");
    const maxConcurrent = configService.get<number>("sync.maxConcurrent");
    const ckbRpcUri = configService.get<string>("sync.ckbRpcUri");
    this.client = isMainnet
      ? new ccc.ClientPublicMainnet({
          url: ckbRpcUri,
          timeout: ckbRpcTimeout,
          maxConcurrent,
        })
      : new ccc.ClientPublicTestnet({
          url: ckbRpcUri,
          timeout: ckbRpcTimeout,
          maxConcurrent,
        });

    this.rgbppBtcCodeHash = ccc.hexFrom(
      assertConfig(configService, "sync.rgbppBtcCodeHash"),
    );
    this.rgbppBtcHashType = ccc.hashTypeFrom(
      assertConfig(configService, "sync.rgbppBtcHashType"),
    );

    const udtTypes =
      configService.get<
        { codeHash: ccc.HexLike; hashType: ccc.HashTypeLike }[]
      >("sync.udtTypes") ?? [];
    this.udtTypes = udtTypes.map((t) => ccc.Script.from({ ...t, args: "" }));
  }

  async udtInfoHandleTx(tx: ccc.Transaction) {
    return Promise.all(
      (await this.getUdtTypesInTx(tx)).map(async (udtType) => ({
        ...(await this.getBalanceDiffInTx(tx, udtType)),
        udtType,
      })),
    );
  }

  async saveDiffs(
    entityManager: EntityManager,
    tx: ccc.Transaction,
    blockHeight: ccc.Num,
    udtDiffs: {
      udtType: { script: ccc.Script; typeInfo: UdtTypeInfo };
      info: TokenInfo;
      diffs: { address: string; balance: ccc.Num; capacity: ccc.Num }[];
      netBalance: ccc.Num;
      netCapacity: ccc.Num;
    }[],
  ) {
    const txHash = tx.hash();
    await withTransaction(
      this.entityManager,
      entityManager,
      async (entityManager) => {
        const udtInfoRepo = new UdtInfoRepo(entityManager);
        const udtBalanceRepo = new UdtBalanceRepo(entityManager);

        for (const {
          udtType,
          info,
          diffs,
          netBalance,
          netCapacity,
        } of udtDiffs) {
          const tokenHash = udtType.script.hash();

          /* === Update UDT Info === */
          const existedUdtInfo = await udtInfoRepo.findOne({
            where: {
              hash: tokenHash,
            },
            order: {
              updatedAtHeight: "DESC",
            },
          });

          const udtInfo = udtInfoRepo.create({
            ...(existedUdtInfo ?? {
              hash: tokenHash,

              updatedAtHeight: formatSortable(blockHeight),

              typeCodeHash: udtType.script.codeHash,
              typeHashType: udtType.script.hashType,
              typeArgs: udtType.script.args,

              firstIssuanceTxHash: txHash,
              totalSupply: formatSortable("0"),
              capacity: formatSortable("0"),
            }),
            id:
              existedUdtInfo &&
              parseSortableInt(existedUdtInfo.updatedAtHeight) === blockHeight
                ? existedUdtInfo.id
                : undefined,
          });

          udtInfo.totalSupply = formatSortableInt(
            parseSortableInt(udtInfo.totalSupply) + netBalance,
          );
          udtInfo.capacity = formatSortableInt(
            parseSortableInt(udtInfo.capacity) + netCapacity,
          );

          if (
            udtInfo.name == null &&
            udtInfo.symbol == null &&
            udtInfo.decimals == null &&
            udtInfo.icon == null
          ) {
            udtInfo.name = info.name ?? null;
            udtInfo.symbol = info.symbol ?? null;
            udtInfo.decimals = info.decimals ?? null;
            udtInfo.icon = info.icon ?? null;
          }

          udtInfo.updatedAtHeight = formatSortableInt(blockHeight);
          await udtInfoRepo.save(udtInfo);

          if (!existedUdtInfo) {
            this.logger.log(
              `New token ${tokenHash} ${udtInfo.name}(${udtInfo.symbol}) found at tx ${txHash}`,
            );
          }
          /* === Update UDT Info === */

          /* === Update UDT Balance === */
          await Promise.all(
            diffs.map(async (diff) => {
              const addressHash = ccc.hashCkb(
                ccc.bytesFrom(diff.address, "utf8"),
              );

              const existedUdtBalance = await udtBalanceRepo.findOne({
                where: {
                  addressHash,
                  tokenHash,
                },
                order: {
                  updatedAtHeight: "DESC",
                },
              });
              const udtBalance = udtBalanceRepo.create({
                ...(existedUdtBalance ?? {
                  addressHash,
                  tokenHash,

                  updatedAtHeight: formatSortable(blockHeight),

                  address: diff.address,
                  balance: formatSortable("0"),
                  capacity: formatSortable("0"),
                }),
                id:
                  existedUdtBalance &&
                  parseSortableInt(existedUdtBalance.updatedAtHeight) ===
                    blockHeight
                    ? existedUdtBalance.id
                    : undefined,
              });

              udtBalance.balance = formatSortableInt(
                parseSortableInt(udtBalance.balance) + diff.balance,
              );
              udtBalance.capacity = formatSortableInt(
                parseSortableInt(udtBalance.capacity) + diff.capacity,
              );

              udtBalance.updatedAtHeight = formatSortableInt(blockHeight);
              await udtBalanceRepo.save(udtBalance);
            }),
          );
          /* === Update UDT Balance === */
        }
      },
    );
  }

  async getUdtTypesInTx(
    tx: ccc.Transaction,
  ): Promise<{ script: ccc.Script; typeInfo: UdtTypeInfo }[]> {
    const scripts: ccc.Bytes[] = [];
    await Promise.all(
      tx.inputs.map(async (input) => {
        if (!input.cellOutput?.type) {
          return;
        }
        const rawType = input.cellOutput.type.toBytes();

        if (!scripts.some((s) => ccc.bytesEq(s, rawType))) {
          scripts.push(rawType);
        }
      }),
    );
    for (const output of tx.outputs) {
      if (!output.type) {
        continue;
      }
      const rawType = output.type.toBytes();

      if (!scripts.some((s) => ccc.bytesEq(s, rawType))) {
        scripts.push(rawType);
      }
    }

    return (
      await Promise.all(
        scripts.map(async (raw) => {
          const script = ccc.Script.fromBytes(raw);
          const typeInfo = await this.isTypeUdt(script);
          if (!typeInfo) {
            return;
          }
          return { script, typeInfo };
        }),
      )
    ).filter((s) => s !== undefined);
  }

  async isTypeUdt(script: ccc.Script): Promise<UdtTypeInfo | undefined> {
    const scriptCode = await (() => {
      if (script.hashType === "type") {
        return this.scriptCodeRepo.findOne({
          where: { typeHash: script.codeHash },
          order: { updatedAtHeight: "DESC" },
        });
      }
      return this.scriptCodeRepo.findOne({
        where: { dataHash: script.codeHash },
        order: { updatedAtHeight: "DESC" },
      });
    })();

    if (scriptCode && scriptCode.isSsri && scriptCode.isSsriUdt) {
      return { type: UdtType.Ssri, scriptCode };
    }

    if (
      this.udtTypes.some(
        ({ codeHash, hashType }) =>
          script.codeHash === codeHash && script.hashType === hashType,
      )
    ) {
      return { type: UdtType.SUdt };
    }

    return undefined;
  }

  async getBalanceDiffInTx(
    tx: ccc.Transaction,
    udtType: { script: ccc.Script; typeInfo: UdtTypeInfo },
  ): Promise<{
    info: TokenInfo;
    diffs: { address: string; balance: ccc.Num; capacity: ccc.Num }[];
    netBalance: ccc.Num;
    netCapacity: ccc.Num;
  }> {
    const diffs: { address: string; balance: ccc.Num; capacity: ccc.Num }[] =
      [];
    let netBalance = ccc.Zero;
    let netCapacity = ccc.Zero;

    await Promise.all(
      tx.inputs.map(async (input) => {
        if (
          !input.cellOutput?.type ||
          !input.cellOutput.type.eq(udtType.script)
        ) {
          return;
        }
        const address = await this.scriptToAddress(input.cellOutput.lock);

        const diff =
          diffs.find((d) => d.address === address) ??
          diffs[
            diffs.push({
              address,
              balance: ccc.Zero,
              capacity: ccc.Zero,
            }) - 1
          ];

        const balance = ccc.udtBalanceFrom(
          (input.outputData ?? "") + "00".repeat(16),
        );
        diff.balance -= balance;
        diff.capacity -= input.cellOutput.capacity;

        netBalance -= balance;
        netCapacity -= input.cellOutput.capacity;
      }),
    );

    await Promise.all(
      tx.outputs.map(async (output, i) => {
        const outputData = tx.outputsData[i];

        if (!output.type || !output.type.eq(udtType.script)) {
          return;
        }

        const address = await this.scriptToAddress(output.lock);
        const diff =
          diffs.find((d) => d.address === address) ??
          diffs[
            diffs.push({
              address,
              balance: ccc.Zero,
              capacity: ccc.Zero,
            }) - 1
          ];

        const balance = ccc.udtBalanceFrom(
          (outputData ?? "") + "00".repeat(16),
        );
        diff.balance += balance;
        diff.capacity += output.capacity;

        netBalance += balance;
        netCapacity += output.capacity;
      }),
    );

    const info: TokenInfo = {};
    const existed = await this.udtInfoRepo.findOneBy({
      hash: udtType.script.hash(),
    });
    if (
      !existed ||
      (existed.name == null &&
        existed.symbol == null &&
        existed.decimals == null &&
        existed.icon == null)
    ) {
      if (udtType.typeInfo.type === UdtType.Ssri) {
        const udt = new ccc.udt.Udt(
          ccc.OutPoint.fromBytes(udtType.typeInfo.scriptCode.outPoint),
          udtType.script,
          { executor: this.executor },
        );

        const [
          { res: name },
          { res: symbol },
          { res: decimals },
          { res: icon },
        ] = await Promise.all([
          trySsriMethod(() => udt.name()),
          trySsriMethod(() => udt.symbol()),
          trySsriMethod(() => udt.decimals()),
          trySsriMethod(() => udt.icon()),
        ]);

        info.name = name;
        info.symbol = symbol;
        info.decimals = Number(decimals);
        info.icon = icon;
      } else if (
        udtType.typeInfo.type === UdtType.SUdt &&
        netBalance > ccc.Zero
      ) {
        const { name, symbol, decimals } = await this.getTokenInfoInTx(tx);
        info.name = name;
        info.symbol = symbol;
        info.decimals = decimals;
      }
    }

    return {
      info,
      diffs,
      netBalance,
      netCapacity,
    };
  }

  async getTokenInfoInTx(tx: ccc.Transaction): Promise<TokenInfo> {
    const uniqueType = await this.client.getKnownScript(
      ccc.KnownScript.UniqueType,
    );

    for (const i in tx.outputs) {
      const output = tx.outputs[i];
      const outputData = ccc.bytesFrom(tx.outputsData[i]);

      if (
        !output.type ||
        output.type.codeHash !== uniqueType.codeHash ||
        output.type.hashType !== uniqueType.hashType
      ) {
        continue;
      }

      // | decimals | name len |  ... name ...  | symbol len |  ... symbol ...  |
      // | 1 bytes  | 1 bytes  | name len bytes | 1 bytes    | symbol len bytes |
      if (outputData.length < 1) {
        break;
      }
      const decimals = Number(ccc.numFromBytes(outputData.slice(0, 1)));

      if (outputData.length < 2) {
        return { decimals };
      }
      const nameLen = Number(ccc.numFromBytes(outputData.slice(1, 2)));
      if (outputData.length < 2 + nameLen) {
        return { decimals };
      }
      const name = ccc.bytesTo(outputData.slice(2, 2 + nameLen), "utf8");

      if (outputData.length < 3 + nameLen) {
        return { decimals, name };
      }
      const symbolLen = Number(
        ccc.numFromBytes(outputData.slice(2 + nameLen, 3 + nameLen)),
      );
      if (outputData.length < 3 + nameLen + symbolLen) {
        return { decimals, name };
      }
      const symbol = ccc.bytesTo(
        outputData.slice(3 + nameLen, 3 + nameLen + symbolLen),
        "utf8",
      );

      return {
        decimals,
        name,
        symbol,
      };
    }

    return {};
  }

  async scriptToAddress(scriptLike: ccc.ScriptLike): Promise<string> {
    if (
      scriptLike.codeHash === this.rgbppBtcCodeHash &&
      scriptLike.hashType === this.rgbppBtcHashType
    ) {
      return parseBtcAddress({
        client: this.client,
        rgbppScript: scriptLike,
        requesters: this.btcRequesters,
        logger: this.logger,
      });
    }
    const script = ccc.Script.from(scriptLike);
    return ccc.Address.fromScript(script, this.client).toString();
  }
}


================================================
File: libs/sync/src/repos/block.repo.ts
================================================
import { formatSortableInt } from "@app/commons";
import { Block } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class BlockRepo extends Repository<Block> {
  constructor(manager: EntityManager) {
    super(Block, manager);
  }

  async getBlockByHash(hash: ccc.Hex): Promise<Block | undefined> {
    return (await this.findOneBy({ hash })) ?? undefined;
  }

  async getBlockByNumber(number: ccc.Num): Promise<Block | undefined> {
    const height = formatSortableInt(number);
    return (await this.findOneBy({ height })) ?? undefined;
  }

  async getTipBlock(): Promise<Block | undefined> {
    const blocks = await this.find({
      order: { height: "DESC" },
      take: 1,
    });
    return blocks[0];
  }

  async getBlockByHashOrNumber(params: {
    hash?: ccc.Hex;
    number?: ccc.Num;
  }): Promise<Block | undefined> {
    const { hash, number } = params;
    if (hash) {
      return await this.getBlockByHash(hash);
    } else if (number) {
      return await this.getBlockByNumber(number);
    } else {
      throw new Error("One of the block hash or number should be provided");
    }
  }
}


================================================
File: libs/sync/src/repos/cluster.repo.ts
================================================
import { Cluster } from "@app/schemas";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class ClusterRepo extends Repository<Cluster> {
  constructor(manager: EntityManager) {
    super(Cluster, manager);
  }
}


================================================
File: libs/sync/src/repos/index.ts
================================================
export * from "./block.repo";
export * from "./cluster.repo";
export * from "./scriptCode.repo";
export * from "./spore.repo";
export * from "./syncStatus.repo";
export * from "./udtBalance.repo";
export * from "./udtInfo.repo";


================================================
File: libs/sync/src/repos/scriptCode.repo.ts
================================================
import { ScriptCode } from "@app/schemas";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class ScriptCodeRepo extends Repository<ScriptCode> {
  constructor(manager: EntityManager) {
    super(ScriptCode, manager);
  }
}


================================================
File: libs/sync/src/repos/spore.repo.ts
================================================
import { Spore } from "@app/schemas";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class SporeRepo extends Repository<Spore> {
  constructor(manager: EntityManager) {
    super(Spore, manager);
  }

  async getDobBySporeId(sporeId: string): Promise<string | undefined> {
    const spore = await this.findOne({ where: { sporeId } });
    return spore?.dobDecoded;
  }
}


================================================
File: libs/sync/src/repos/syncStatus.repo.ts
================================================
import { formatSortableInt } from "@app/commons";
import { SyncStatus } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class SyncStatusRepo extends Repository<SyncStatus> {
  constructor(manager: EntityManager) {
    super(SyncStatus, manager);
  }

  async hasKeys(keys: Array<string>): Promise<boolean> {
    for (const key of keys) {
      const count = await this.countBy({ key });
      if (count === 0) {
        return false;
      }
    }
    return true;
  }

  async syncHeight(
    key: string,
    defaultValue?: ccc.NumLike,
  ): Promise<SyncStatus> {
    const found = await this.findOneBy({ key });
    if (found) {
      return found;
    }
    const status = this.create({
      key,
      value: formatSortableInt(defaultValue ?? 0),
    });
    return await this.save(status);
  }

  async assertSyncHeight(key: string): Promise<SyncStatus> {
    const found = await this.findOneBy({ key });
    if (!found) {
      throw Error(`Sync status not found: ${key}`);
    }
    return found;
  }

  async updateSyncHeight(
    status: SyncStatus,
    height: ccc.NumLike,
  ): Promise<void> {
    const value = formatSortableInt(height);
    if (status.value === value) {
      return;
    }

    const updated = await this.update(
      { key: status.key, value: status.value },
      { value: formatSortableInt(height) },
    );
    if (!updated.affected) {
      throw Error(
        `Failed to update sync height from ${status.value} to ${value}`,
      );
    }
    status.value = value;
  }
}


================================================
File: libs/sync/src/repos/udtBalance.repo.ts
================================================
import { UdtBalance } from "@app/schemas";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class UdtBalanceRepo extends Repository<UdtBalance> {
  constructor(manager: EntityManager) {
    super(UdtBalance, manager);
  }
}


================================================
File: libs/sync/src/repos/udtInfo.repo.ts
================================================
import { UdtInfo } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class UdtInfoRepo extends Repository<UdtInfo> {
  constructor(manager: EntityManager) {
    super(UdtInfo, manager);
  }

  async getTokenInfoByTokenId(tokenHash: ccc.HexLike): Promise<UdtInfo | null> {
    return await this.findOneBy({ hash: ccc.hexFrom(tokenHash) });
  }
}


================================================
File: libs/udt/tsconfig.lib.json
================================================
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../../dist/libs/sync"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "test", "**/*spec.ts"]
}


================================================
File: libs/udt/src/index.ts
================================================
export * from "./udt.controller";
export * from "./udt.module";
export * from "./udt.service";


================================================
File: libs/udt/src/udt.controller.ts
================================================
import {
  ApiError,
  assert,
  asyncMap,
  Chain,
  examineAddress,
  examineTokenId,
  parseSortableInt,
  RpcError,
  RpcResponse,
  ScriptMode,
  TokenBalance,
  TokenHolders,
  TokenInfo,
  UdtCelldep,
  UdtDepType,
} from "@app/commons";
import { UdtBalance, UdtInfo } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Body, Controller, Get, Param, Post, Query } from "@nestjs/common";
import {
  ApiOkResponse,
  ApiProperty,
  ApiPropertyOptional,
  ApiQuery,
} from "@nestjs/swagger";
import { UdtService } from "./udt.service";

(BigInt.prototype as unknown as { toJSON: () => string }).toJSON = function () {
  return this.toString();
};

class BatchGetTokenBalancesDto {
  @ApiProperty({ description: "Token ID" })
  tokenId: string;

  @ApiProperty({
    isArray: true,
    description: "Array of addresses",
    type: String,
  })
  addresses: string[];

  @ApiPropertyOptional({
    description: "The height of the block to query",
  })
  height?: number;
}

@Controller()
export class UdtController {
  constructor(private readonly service: UdtService) {}

  udtBalanceToTokenBalance(
    udtBalance: UdtBalance,
    udtInfo: UdtInfo,
  ): TokenBalance {
    return {
      tokenId: ccc.hexFrom(udtBalance.tokenHash),
      name: udtInfo.name ?? undefined,
      symbol: udtInfo.symbol ?? undefined,
      decimal: udtInfo.decimals ?? undefined,
      address: udtBalance.address,
      balance: parseSortableInt(udtBalance.balance),
      height: parseSortableInt(udtBalance.updatedAtHeight),
    };
  }

  celldepToUdtCelldep(celldep: ccc.CellDep): UdtCelldep {
    return {
      outPoint: {
        txHash: ccc.hexFrom(celldep.outPoint.txHash),
        index: celldep.outPoint.index,
      },
      depType:
        celldep.depType === "code" ? UdtDepType.Code : UdtDepType.DepGroup,
    };
  }

  @ApiOkResponse({
    type: TokenInfo,
    description: "Get the information of a token by the tokenId",
  })
  @Get("/tokens/:tokenId")
  async getTokenInfo(
    @Param("tokenId") tokenId: string,
  ): Promise<RpcResponse<TokenInfo>> {
    try {
      assert(examineTokenId(tokenId), RpcError.InvalidTokenId);
      const { udtInfo, tx, block } = assert(
        await this.service.getTokenInfo(tokenId, true),
        RpcError.TokenNotFound,
      );
      const issueTx = assert(tx, RpcError.TxNotFound);
      const issueBlock = assert(block, RpcError.BlockNotFound);
      const holderCount = await this.service.getTokenHoldersCount(tokenId);
      const lockScriptModes = await asyncMap(
        issueTx.outputs,
        async (output) => {
          return await this.service.scriptMode(output.lock);
        },
      );
      let issueChain = Chain.Ckb;
      for (const mode of lockScriptModes) {
        if (mode === ScriptMode.RgbppBtc) {
          issueChain = Chain.Btc;
          break;
        }
        if (mode === ScriptMode.RgbppDoge) {
          issueChain = Chain.Doge;
          break;
        }
      }
      const unmintable = lockScriptModes.some(
        (mode) =>
          mode === ScriptMode.RgbppBtc ||
          mode === ScriptMode.RgbppDoge ||
          mode === ScriptMode.SingleUseLock,
      );
      const celldep = await this.service.getUdtCelldep(
        udtInfo.typeCodeHash,
        udtInfo.typeHashType,
      );
      return {
        code: 0,
        data: {
          tokenId: ccc.hexFrom(udtInfo.hash),
          name: udtInfo.name ?? undefined,
          symbol: udtInfo.symbol ?? undefined,
          decimal: udtInfo.decimals ?? undefined,
          owner: udtInfo.owner ?? undefined,
          totalAmount: parseSortableInt(udtInfo.totalSupply),
          mintable: !unmintable,
          holderCount: ccc.numFrom(holderCount),
          issueChain,
          issueTxId: ccc.hexFrom(udtInfo.firstIssuanceTxHash),
          issueTxHeight: parseSortableInt(issueBlock.height),
          issueTime: issueBlock.timestamp,
          celldep: celldep ? this.celldepToUdtCelldep(celldep) : undefined,
        },
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }

  @ApiOkResponse({
    type: [TokenBalance],
    description:
      "Get detailed token balances of an address, filtered by tokenId if provided",
  })
  @ApiQuery({
    name: "tokenId",
    required: false,
    description: "The ID of the token to filter balances (optional)",
  })
  @ApiQuery({
    name: "height",
    required: false,
    description: "The height of the block to query (optional)",
  })
  @Get("/tokens/balances/:address")
  async getTokenBalances(
    @Param("address") address: string,
    @Query("tokenId") tokenId?: string,
    @Query("height") height?: number,
  ): Promise<RpcResponse<TokenBalance[]>> {
    try {
      assert(examineAddress(address), RpcError.InvalidAddress);
      assert(tokenId ? examineTokenId(tokenId) : true, RpcError.InvalidTokenId);
      const udtBalances = await this.service.getTokenBalanceByAddress(
        address,
        tokenId,
        height ? ccc.numFrom(height) : undefined,
      );
      const data: TokenBalance[] = [];
      const udtInfos: Record<string, UdtInfo> = {};
      for (const udtBalance of udtBalances) {
        let udtInfo = udtInfos[udtBalance.tokenHash];
        if (udtInfo === undefined) {
          const { udtInfo: newUdtInfo } = assert(
            await this.service.getTokenInfo(udtBalance.tokenHash),
            RpcError.TokenNotFound,
          );
          udtInfo = newUdtInfo;
          udtInfos[udtBalance.tokenHash] = udtInfo;
        }
        const token = this.udtBalanceToTokenBalance(udtBalance, udtInfo);
        data.push(token);
      }
      // Always response with 0 if tokenId is provided but no balance found
      if (tokenId && data.length === 0) {
        const { udtInfo } = assert(
          await this.service.getTokenInfo(tokenId),
          RpcError.TokenNotFound,
        );
        data.push({
          tokenId: ccc.hexFrom(tokenId),
          name: udtInfo.name ?? undefined,
          symbol: udtInfo.symbol ?? undefined,
          decimal: udtInfo.decimals ?? undefined,
          address,
          balance: 0n,
          height: await this.service.getTipBlockNumber(),
        });
      }
      return {
        code: 0,
        data,
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }

  @ApiOkResponse({
    type: [TokenBalance],
    description:
      "Get detailed token balances under a token id, filtered by addresses",
  })
  @Post("/tokens/balances")
  async batchGetTokenBalances(
    @Body() dto: BatchGetTokenBalancesDto,
  ): Promise<RpcResponse<TokenBalance[]>> {
    try {
      assert(examineTokenId(dto.tokenId), RpcError.InvalidTokenId);
      assert(
        dto.addresses.every((address) => examineAddress(address)),
        RpcError.InvalidAddress,
      );
      const udtBalances = await this.service.getTokenBalanceByTokenId(
        dto.tokenId,
        dto.addresses,
        dto.height ? ccc.numFrom(dto.height) : undefined,
      );
      const { udtInfo } = assert(
        await this.service.getTokenInfo(dto.tokenId),
        RpcError.TokenNotFound,
      );
      const tokens = udtBalances.map((value) =>
        this.udtBalanceToTokenBalance(value, udtInfo),
      );
      // Mark missing addresses as 0 balance
      const tipBlockNumber = await this.service.getTipBlockNumber();
      dto.addresses.forEach((address) => {
        if (!tokens.some((value) => value.address === address)) {
          tokens.push({
            tokenId: ccc.hexFrom(udtInfo.hash),
            name: udtInfo.name ?? undefined,
            symbol: udtInfo.symbol ?? undefined,
            decimal: udtInfo.decimals ?? undefined,
            address,
            balance: 0n,
            height: tipBlockNumber,
          });
        }
      });
      return {
        code: 0,
        data: tokens,
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }

  @ApiOkResponse({
    type: TokenHolders,
    description: "Filter all token holders by tokenId",
  })
  @ApiQuery({
    name: "offset",
    required: false,
    description: "The offset of the first holder to return (optional)",
  })
  @ApiQuery({
    name: "limit",
    required: false,
    description:
      "The maximum number of holders to return, or 10 as default value (optional)",
  })
  @Get("/tokens/:tokenId/holders")
  async getTokenHolders(
    @Param("tokenId") tokenId: string,
    @Query("offset") offset: number,
    @Query("limit") limit: number,
  ): Promise<RpcResponse<TokenHolders>> {
    try {
      assert(examineTokenId(tokenId), RpcError.InvalidTokenId);
      const udtBalances = await this.service.getTokenAllBalances(
        tokenId,
        isNaN(offset) ? 0 : offset,
        isNaN(limit) ? 10 : limit,
      );
      const udtBalanceTotal = await this.service.getTokenHoldersCount(tokenId);
      const { udtInfo } = assert(
        await this.service.getTokenInfo(tokenId),
        RpcError.TokenNotFound,
      );
      return {
        code: 0,
        data: {
          total: udtBalanceTotal,
          list: udtBalances.map((value) =>
            this.udtBalanceToTokenBalance(value, udtInfo),
          ),
        },
      };
    } catch (e) {
      if (e instanceof ApiError) {
        return {
          code: -1,
          msg: e.message,
        };
      }
      throw e;
    }
  }
}


================================================
File: libs/udt/src/udt.module.ts
================================================
import { Module } from "@nestjs/common";
import {
  BlockRepo,
  ScriptCodeRepo,
  UdtBalanceRepo,
  UdtInfoRepo,
} from "./repos";
import { UdtController } from "./udt.controller";
import { UdtService } from "./udt.service";

@Module({
  providers: [
    UdtService,
    UdtInfoRepo,
    UdtBalanceRepo,
    BlockRepo,
    ScriptCodeRepo,
  ],
  exports: [UdtService],
  controllers: [UdtController],
})
export class UdtModule {}


================================================
File: libs/udt/src/udt.service.ts
================================================
import {
  assert,
  assertConfig,
  headerToRepoBlock,
  parseScriptMode,
  parseSortableInt,
  RpcError,
  ScriptMode,
} from "@app/commons";
import { Block, UdtBalance, UdtInfo } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { UdtBalanceRepo, UdtInfoRepo } from "./repos";
import { BlockRepo } from "./repos/block.repo";
import { ScriptCodeRepo } from "./repos/scriptCode.repo";

@Injectable()
export class UdtService {
  private readonly client: ccc.Client;
  private readonly rgbppBtcCodeHash: ccc.Hex;
  private readonly rgbppBtcHashType: ccc.HashType;
  private readonly udtTypes: Record<ccc.Hex, ccc.CellDepLike>;

  constructor(
    private readonly configService: ConfigService,
    private readonly udtInfoRepo: UdtInfoRepo,
    private readonly udtBalanceRepo: UdtBalanceRepo,
    private readonly blockRepo: BlockRepo,
    private readonly scriptCodeRepo: ScriptCodeRepo,
  ) {
    const isMainnet = configService.get<boolean>("sync.isMainnet");
    const ckbRpcUri = configService.get<string>("sync.ckbRpcUri");
    this.client = isMainnet
      ? new ccc.ClientPublicMainnet({ url: ckbRpcUri })
      : new ccc.ClientPublicTestnet({ url: ckbRpcUri });

    this.rgbppBtcCodeHash = ccc.hexFrom(
      assertConfig(configService, "sync.rgbppBtcCodeHash"),
    );
    this.rgbppBtcHashType = ccc.hashTypeFrom(
      assertConfig(configService, "sync.rgbppBtcHashType"),
    );

    const udtTypes =
      configService.get<
        {
          codeHash: ccc.HexLike;
          hashType: ccc.HashTypeLike;
          cellDep: ccc.CellDepLike;
        }[]
      >("sync.udtTypes") ?? [];
    this.udtTypes = udtTypes.reduce(
      (acc, t) => {
        acc[ccc.hexFrom(t.codeHash)] = t.cellDep;
        return acc;
      },
      {} as Record<ccc.Hex, ccc.CellDepLike>,
    );
  }

  async getUdtCelldep(
    codeHash: ccc.HexLike,
    hashType: ccc.HashTypeLike,
  ): Promise<ccc.CellDep | undefined> {
    const celldep = this.udtTypes[ccc.hexFrom(codeHash)];
    if (!celldep) {
      return await this.scriptCodeRepo.generateCelldep(codeHash, hashType);
    }
    return ccc.CellDep.from(celldep);
  }

  async getTipBlockNumber(): Promise<ccc.Num> {
    const tipBlock = await this.blockRepo.getTipBlock();
    return tipBlock ? parseSortableInt(tipBlock.height) : 0n;
  }

  async getTokenInfo(
    tokenId: ccc.HexLike,
    withTxAndBlock: boolean = false,
  ): Promise<
    | {
        udtInfo: UdtInfo;
        tx?: ccc.Transaction;
        block?: Block;
      }
    | undefined
  > {
    const udtInfo = await this.udtInfoRepo.getTokenInfoByTokenId(tokenId);
    if (!udtInfo) {
      return;
    }
    if (!withTxAndBlock) {
      return { udtInfo };
    }
    const issueTx = await this.client.getTransaction(
      udtInfo.firstIssuanceTxHash,
    );
    if (!issueTx) {
      return { udtInfo };
    }
    const issueBlock = await this.blockRepo.getBlockByHashOrNumber({
      hash: issueTx.blockHash,
      number: issueTx.blockNumber,
    });
    if (issueBlock) {
      return {
        udtInfo,
        tx: issueTx.transaction,
        block: issueBlock,
      };
    }
    if (issueTx.blockHash) {
      const header = await this.client.getHeaderByHash(issueTx.blockHash);
      return {
        udtInfo,
        tx: issueTx.transaction,
        block: headerToRepoBlock(header),
      };
    } else if (issueTx.blockNumber) {
      const header = await this.client.getHeaderByNumber(issueTx.blockNumber);
      return {
        udtInfo,
        tx: issueTx.transaction,
        block: headerToRepoBlock(header),
      };
    } else {
      throw new Error(
        "issueTx.blockHash or issueTx.blockNumber should be provided",
      );
    }
  }

  async getTokenHoldersCount(tokenId: ccc.HexLike): Promise<number> {
    return this.udtBalanceRepo.getItemCountByTokenHash(tokenId);
  }

  async getTokenBalanceByAddress(
    address: string,
    tokenId?: ccc.HexLike,
    height?: ccc.Num,
  ): Promise<UdtBalance[]> {
    if (height) {
      assert(
        await this.udtBalanceRepo.hasHeight(height),
        RpcError.HeightCropped,
      );
    }

    return await this.udtBalanceRepo.getTokenItemsByAddress(
      [address],
      tokenId,
      height,
    );
  }

  async getTokenBalanceByTokenId(
    tokenId: ccc.HexLike,
    addresses: string[],
    height?: ccc.Num,
  ): Promise<UdtBalance[]> {
    if (height) {
      assert(
        await this.udtBalanceRepo.hasHeight(height),
        RpcError.HeightCropped,
      );
    }

    return await this.udtBalanceRepo.getTokenItemsByAddress(
      addresses,
      tokenId,
      height,
    );
  }

  async getTokenAllBalances(
    tokenId: ccc.HexLike,
    offset: number,
    limit: number,
  ): Promise<UdtBalance[]> {
    return await this.udtBalanceRepo.getNonZeroTokenItemsByTokenId(
      tokenId,
      offset,
      limit,
    );
  }

  async scriptMode(script: ccc.ScriptLike): Promise<ScriptMode> {
    return await parseScriptMode(script, this.client, [
      {
        codeHash: this.rgbppBtcCodeHash,
        hashType: this.rgbppBtcHashType,
        mode: ScriptMode.RgbppBtc,
      },
    ]);
  }
}


================================================
File: libs/udt/src/repos/block.repo.ts
================================================
import { formatSortableInt } from "@app/commons";
import { Block } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class BlockRepo extends Repository<Block> {
  constructor(manager: EntityManager) {
    super(Block, manager);
  }

  async getBlockByHash(hash: ccc.Hex): Promise<Block | null> {
    return await this.findOneBy({ hash });
  }

  async getBlockByNumber(number: ccc.Num): Promise<Block | null> {
    const height = formatSortableInt(number);
    return await this.findOneBy({ height });
  }

  async getTipBlock(): Promise<Block | undefined> {
    const blocks = await this.find({
      order: { height: "DESC" },
      take: 1,
    });
    return blocks[0];
  }

  async getBlockByHashOrNumber(params: {
    hash?: ccc.Hex;
    number?: ccc.Num;
  }): Promise<Block | null> {
    const { hash, number } = params;
    if (hash) {
      return await this.getBlockByHash(hash);
    } else if (number) {
      return await this.getBlockByNumber(number);
    } else {
      throw new Error("One of the block hash or number should be provided");
    }
  }
}


================================================
File: libs/udt/src/repos/index.ts
================================================
export * from "./block.repo";
export * from "./scriptCode.repo";
export * from "./udtBalance.repo";
export * from "./udtInfo.repo";


================================================
File: libs/udt/src/repos/scriptCode.repo.ts
================================================
import { ScriptCode } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class ScriptCodeRepo extends Repository<ScriptCode> {
  constructor(manager: EntityManager) {
    super(ScriptCode, manager);
  }

  async generateCelldep(
    codeHash: ccc.HexLike,
    hashType: ccc.HashTypeLike,
  ): Promise<ccc.CellDep | undefined> {
    let scriptCode: ScriptCode | null;
    if (hashType === "type") {
      scriptCode = await this.findOne({
        where: { typeHash: ccc.hexFrom(codeHash) },
        order: { updatedAtHeight: "DESC" },
      });
    } else {
      scriptCode = await this.findOne({
        where: { dataHash: ccc.hexFrom(codeHash) },
        order: { updatedAtHeight: "DESC" },
      });
    }
    if (!scriptCode) {
      return undefined;
    }
    return ccc.CellDep.from({
      outPoint: ccc.OutPoint.decode(scriptCode.outPoint),
      depType: "code",
    });
  }
}


================================================
File: libs/udt/src/repos/udtBalance.repo.ts
================================================
import { formatSortable } from "@app/commons";
import { UdtBalance } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, In, Repository } from "typeorm";

@Injectable()
export class UdtBalanceRepo extends Repository<UdtBalance> {
  constructor(manager: EntityManager) {
    super(UdtBalance, manager);
  }

  async hasHeight(height: ccc.Num): Promise<boolean> {
    const count = await this.countBy({
      updatedAtHeight: formatSortable(height),
    });
    return count > 0;
  }

  async getTokenItemsByAddress(
    addresses: string[],
    tokenHash?: ccc.HexLike,
    height?: ccc.Num,
  ): Promise<UdtBalance[]> {
    if (addresses.length === 0) {
      return [];
    }
    const addressHashes = addresses.map((address) =>
      ccc.hashCkb(ccc.bytesFrom(address, "utf8")),
    );
    if (tokenHash) {
      if (height) {
        return await this.find({
          where: {
            addressHash: In(addressHashes),
            tokenHash: ccc.hexFrom(tokenHash),
            updatedAtHeight: formatSortable(height),
          },
        });
      } else {
        const rawSql = `
          WITH LatestRecords AS (
            SELECT addressHash, MAX(updatedAtHeight) as maxHeight
            FROM udt_balance
            WHERE addressHash IN (?) AND tokenHash = ?
            GROUP BY addressHash
          )
          SELECT ub.*
          FROM udt_balance ub
          INNER JOIN LatestRecords lr 
            ON ub.addressHash = lr.addressHash 
            AND ub.updatedAtHeight = lr.maxHeight
          WHERE ub.tokenHash = ?;
        `;
        return await this.manager.query(rawSql, [
          addressHashes,
          ccc.hexFrom(tokenHash),
          ccc.hexFrom(tokenHash),
        ]);
      }
    } else {
      if (height) {
        return await this.find({
          where: {
            addressHash: In(addressHashes),
            updatedAtHeight: formatSortable(height),
          },
        });
      } else {
        const rawSql = `
          WITH LatestRecords AS (
            SELECT 
              *,
              ROW_NUMBER() OVER (
                PARTITION BY addressHash, tokenHash
                ORDER BY updatedAtHeight DESC
              ) AS rn
            FROM udt_balance
            WHERE addressHash IN (?)
          )
          SELECT *
          FROM LatestRecords
          WHERE rn = 1;
        `;
        return await this.manager.query(rawSql, [addressHashes]);
      }
    }
  }

  async getNonZeroTokenItemsByTokenId(
    tokenHash: ccc.HexLike,
    offset: number,
    limit: number,
  ): Promise<UdtBalance[]> {
    const hexToken = ccc.hexFrom(tokenHash);
    const rawSql = `
      WITH LatestBalances AS (
        SELECT 
          addressHash,
          MAX(updatedAtHeight) AS max_height
        FROM udt_balance
        WHERE tokenHash = ? 
          AND balance > 0
        GROUP BY addressHash
        LIMIT ? OFFSET ?
      )
      SELECT ub.*
      FROM udt_balance ub
      INNER JOIN LatestBalances lb 
        ON ub.addressHash = lb.addressHash 
        AND ub.updatedAtHeight = lb.max_height
      WHERE ub.tokenHash = ?;
    `;
    return this.manager.query(rawSql, [hexToken, limit, offset, hexToken]);
  }

  async getItemCountByTokenHash(tokenHash: ccc.HexLike): Promise<number> {
    const rawSql = `
      WITH LatestBalances AS (
        SELECT 
          addressHash,
          ROW_NUMBER() OVER (
            PARTITION BY addressHash 
            ORDER BY updatedAtHeight DESC
          ) AS rn,
          balance
        FROM udt_balance
        WHERE tokenHash = ?
      )
      SELECT COUNT(DISTINCT addressHash) AS holderCount
      FROM LatestBalances
      WHERE rn = 1 AND balance > 0;
    `;
    const result = await this.manager.query(rawSql, [ccc.hexFrom(tokenHash)]);
    return parseInt(result[0].holderCount, 10) || 0;
  }
}


================================================
File: libs/udt/src/repos/udtInfo.repo.ts
================================================
import { UdtInfo } from "@app/schemas";
import { ccc } from "@ckb-ccc/shell";
import { Injectable } from "@nestjs/common";
import { EntityManager, Repository } from "typeorm";

@Injectable()
export class UdtInfoRepo extends Repository<UdtInfo> {
  constructor(manager: EntityManager) {
    super(UdtInfo, manager);
  }

  async getTokenInfoByTokenId(
    tokenHash: ccc.HexLike,
  ): Promise<UdtInfo | undefined> {
    return (
      (await this.findOne({
        where: {
          hash: ccc.hexFrom(tokenHash),
        },
        order: {
          updatedAtHeight: "DESC",
        },
      })) ?? undefined
    );
  }
}


================================================
File: src/app.module.ts
================================================
import { loadConfig } from "@app/commons/config";
import { SchemasModule } from "@app/schemas";
import { SyncModule } from "@app/sync";
import { Global, Module } from "@nestjs/common";
import { ConfigModule } from "@nestjs/config";
import axios from "axios";
import { AssetModule } from "libs/asset/src";
import { BlockModule } from "libs/block/src";
import { CellModule } from "libs/cell/src";
import { SporeModule } from "libs/spore/src";
import { UdtModule } from "libs/udt/src";

const config = loadConfig();

if (!Array.isArray(config.sync.btcRpcs)) {
  throw new Error("Invalid sync.btcRpcs. It should be an array");
}

const btcRequestersProvider = {
  provide: "BTC_REQUESTERS",
  useValue: config.sync.btcRpcs.map(
    ({
      uri,
      username,
      password,
    }: {
      uri: string;
      username?: string;
      password?: string;
    }) =>
      axios.create({
        baseURL: uri,
        auth: username && password ? { username, password } : undefined,
      }),
  ),
};

@Global()
@Module({
  providers: [btcRequestersProvider],
  exports: [btcRequestersProvider],
})
export class ContextModule {}

@Module({
  imports: [
    ContextModule,
    ConfigModule.forRoot({
      isGlobal: true,
      load: [loadConfig],
    }),
    SchemasModule,
    SyncModule,
    CellModule,
    UdtModule,
    SporeModule,
    AssetModule,
    BlockModule,
  ],
})
export class AppModule {}


================================================
File: src/main.ts
================================================
import { loadConfig } from "@app/commons";
import { Logger, ValidationPipe } from "@nestjs/common";
import { NestFactory } from "@nestjs/core";
import { DocumentBuilder, SwaggerModule } from "@nestjs/swagger";
import { AppModule } from "./app.module";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function handleRoot(req: any, res: any, next: any) {
  if (req.url === "/") {
    return res.send("OK!");
  }

  next();
}

async function bootstrap() {
  const config = loadConfig();

  const app = await NestFactory.create(AppModule, { logger: config.logger });
  app.useGlobalPipes(new ValidationPipe({ transform: true }));
  app.use(handleRoot);
  app.enableCors({
    origin: "*",
    methods: ["GET", "HEAD", "PUT", "PATCH", "POST", "DELETE", "OPTIONS"],
    credentials: true,
  });
  const swaggerConfig = new DocumentBuilder()
    .setTitle("CKB Indexer API")
    .setDescription("The CKB Indexer API description")
    .setVersion("0.0.1")
    .build();
  const document = SwaggerModule.createDocument(app, swaggerConfig);
  SwaggerModule.setup("docs", app, document);

  await app.listen(config.port, () =>
    Logger.log(`listening on ${config.port}`),
  );
}
bootstrap();


================================================
File: workers/getBlock.ts
================================================
import { ccc } from "@ckb-ccc/shell";
import { parentPort, workerData } from "worker_threads";

// get block in range (start, end]
export async function* getBlocks(
  client: ccc.Client,
  startLike: ccc.NumLike,
  endLike: ccc.NumLike,
): AsyncGenerator<{
  height: ccc.Num;
  block?: ccc.ClientBlock;
}> {
  const start = ccc.numFrom(startLike);
  const end = ccc.numFrom(endLike);

  const blocksLength = Number(end - start);
  const blocks = [];
  for (let i = 0; i < blocksLength; i++) {
    blocks.push(
      (async () => {
        const height = ccc.numFrom(i + 1) + start;
        const block = await client.getBlockByNumber(height);
        if (i) {
          await blocks[i - 1];
        }

        return {
          height,
          block,
          parsing: Promise.all(
            (block?.transactions ?? [])
              .map((tx) => {
                tx.witnesses = [];
                return tx.inputs.map(async (i) => {
                  if (
                    i.previousOutput.txHash ===
                    "0x0000000000000000000000000000000000000000000000000000000000000000"
                  ) {
                    return;
                  }
                  await i.completeExtraInfos(client);
                });
              })
              .flat(),
          ),
        };
      })(),
    );
  }

  for (const pending of blocks) {
    const { height, block, parsing } = await pending;
    await parsing;
    yield { height, block };
  }
}

const { isMainnet, rpcUri, ssriServerUri, rpcTimeout, maxConcurrent } =
  workerData;
const client = isMainnet
  ? new ccc.ClientPublicMainnet({
      url: rpcUri,
      maxConcurrent,
      timeout: rpcTimeout,
    })
  : new ccc.ClientPublicTestnet({
      url: rpcUri,
      maxConcurrent,
      timeout: rpcTimeout,
    });
const executor = ssriServerUri
  ? new ccc.ssri.ExecutorJsonRpc(ssriServerUri, {
      maxConcurrent,
      timeout: rpcTimeout,
    })
  : undefined;

class Trait extends ccc.ssri.Trait {
  constructor(outPoint: ccc.OutPointLike, executor?: ccc.ssri.Executor) {
    super(outPoint, executor);
  }
}

parentPort?.addListener("message", ({ start, end }) =>
  (async () => {
    const blocks = [];
    for await (const block of getBlocks(client, start, end)) {
      const scriptCodes: {
        outPoint: ccc.OutPointLike;
        size: number;
        dataHash: ccc.Hex;
        typeHash?: ccc.Hex;
        isSsri: boolean;
        isSsriUdt: boolean;
      }[] = [];
      for (const tx of block.block?.transactions ?? []) {
        await Promise.all(
          tx.outputs.map(async (output, i) => {
            const data = tx.outputsData[i];
            // ELF magic number is ".ELF" => 0x7f454c46
            // ELF header has at least 64bytes
            if (!data || !data.startsWith("0x7f454c46") || data.length <= 130) {
              return;
            }

            const outPoint = {
              txHash: tx.hash(),
              index: i,
            };

            const trait = new Trait(outPoint, executor);
            let isSsri = false;
            let isSsriUdt = false;
            try {
              const { res } = await trait.hasMethods([
                "UDT.name",
                "UDT.symbol",
                "UDT.decimals",
                "UDT.icon",
              ]);
              isSsri = true;
              isSsriUdt = res.some((v) => v);
            } catch (err) {
              if (
                !(err instanceof ccc.ssri.ExecutorErrorExecutionFailed) &&
                !(err instanceof ccc.ssri.ExecutorErrorDecode)
              ) {
                throw err;
              }
            }

            scriptCodes.push({
              outPoint: {
                txHash: tx.hash(),
                index: i,
              },
              size: data.length / 2 - 1,
              dataHash: ccc.hashCkb(data),
              typeHash: output.type?.hash(),
              isSsri,
              isSsriUdt,
            });
          }),
        );
      }

      blocks.push({ ...block, scriptCodes });
    }
    parentPort?.postMessage(blocks);
  })().catch((err) => {
    console.error(err);
    throw err;
  }),
);


