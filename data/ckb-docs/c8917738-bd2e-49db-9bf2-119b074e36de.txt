Directory structure:
└── utxostack-utxo-stack-sdk/
    ├── README.md
    ├── LICENSE
    ├── package.json
    ├── pnpm-lock.yaml
    ├── pnpm-workspace.yaml
    ├── tsup-base.config.ts
    ├── .editorconfig
    ├── .eslintrc.json
    ├── .prettierrc
    ├── examples/
    │   ├── branch/
    │   │   ├── README.md
    │   │   ├── env.ts
    │   │   ├── indexer.ts
    │   │   ├── package.json
    │   │   ├── transfer.ts
    │   │   ├── tsconfig.json
    │   │   └── .env.example
    │   └── leap/
    │       ├── README.md
    │       ├── env.ts
    │       ├── leap-capacity-to-ckb.ts
    │       ├── leap-to-branch.ts
    │       ├── leap-to-ckb.ts
    │       ├── package.json
    │       ├── tsconfig.json
    │       ├── unlock-ckb-request-cells.ts
    │       └── .env.example
    ├── packages/
    │   ├── branch/
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   └── src/
    │   │       ├── index.ts
    │   │       ├── __test__/
    │   │       │   ├── __mocks__/
    │   │       │   │   ├── CellCollector.js
    │   │       │   │   ├── rpc.js
    │   │       │   │   └── data/
    │   │       │   │       ├── genesisBlock.json
    │   │       │   │       └── liveCell.json
    │   │       │   ├── rpc/
    │   │       │   │   ├── branch-rpc-helpers.js
    │   │       │   │   ├── branch-rpc.test.js
    │   │       │   │   └── method.test.js
    │   │       │   ├── signer/
    │   │       │   │   ├── fixtures.json
    │   │       │   │   ├── index.test.js
    │   │       │   │   ├── multisig/
    │   │       │   │   │   ├── fixtures.json
    │   │       │   │   │   └── index.test.js
    │   │       │   │   ├── signWitnessGroup/
    │   │       │   │   │   ├── fixtures.json
    │   │       │   │   │   └── index.test.js
    │   │       │   │   └── signWitnesses/
    │   │       │   │       ├── fixtures.json
    │   │       │   │       └── index.test.js
    │   │       │   └── utils/
    │   │       │       ├── const.test.js
    │   │       │       ├── address/
    │   │       │       │   ├── fixtures.json
    │   │       │       │   └── index.test.js
    │   │       │       ├── calculateTransactionFee/
    │   │       │       │   ├── fixtures.json
    │   │       │       │   └── index.test.js
    │   │       │       ├── convertors/
    │   │       │       │   ├── fixtures.json
    │   │       │       │   └── index.test.js
    │   │       │       ├── crypto/
    │   │       │       │   ├── bech32.fixtures.json
    │   │       │       │   ├── bech32.test.js
    │   │       │       │   ├── blake160.test.js
    │   │       │       │   ├── blake2b.fixtures.json
    │   │       │       │   └── blake2b.test.js
    │   │       │       ├── ecpair/
    │   │       │       │   ├── ecpare.fixtures.json
    │   │       │       │   ├── index.test.js
    │   │       │       │   └── signature.fixtures.json
    │   │       │       ├── epochs/
    │   │       │       │   ├── fixtures.json
    │   │       │       │   └── index.test.js
    │   │       │       ├── serialization/
    │   │       │       │   ├── basic/
    │   │       │       │   │   ├── fixtures.json
    │   │       │       │   │   └── index.test.js
    │   │       │       │   ├── script/
    │   │       │       │   │   ├── fixtures.json
    │   │       │       │   │   └── index.test.js
    │   │       │       │   └── transaction/
    │   │       │       │       ├── fixtures.json
    │   │       │       │       └── index.test.js
    │   │       │       ├── sizes/
    │   │       │       │   ├── fixtures.json
    │   │       │       │   └── index.test.js
    │   │       │       ├── systemScripts/
    │   │       │       │   ├── fixtures.json
    │   │       │       │   └── index.test.js
    │   │       │       ├── utils/
    │   │       │       │   ├── index.test.js
    │   │       │       │   ├── occupiedCapacity.test.js
    │   │       │       │   └── rawTransactionToHash.fixtures.json
    │   │       │       └── validators/
    │   │       │           ├── fixtures.json
    │   │       │           └── index.test.js
    │   │       ├── collector/
    │   │       │   └── index.ts
    │   │       ├── indexer/
    │   │       │   └── index.ts
    │   │       ├── rpc/
    │   │       │   ├── index.ts
    │   │       │   ├── method.ts
    │   │       │   ├── paramsFormatter.ts
    │   │       │   ├── resultFormatter.ts
    │   │       │   ├── base/
    │   │       │   │   ├── chain.ts
    │   │       │   │   ├── experimental.ts
    │   │       │   │   ├── index.ts
    │   │       │   │   ├── net.ts
    │   │       │   │   ├── pool.ts
    │   │       │   │   └── stats.ts
    │   │       │   └── exceptions/
    │   │       │       ├── ErrorCode.ts
    │   │       │       ├── batch.ts
    │   │       │       ├── formatter.ts
    │   │       │       ├── index.ts
    │   │       │       └── rpc.ts
    │   │       ├── signer/
    │   │       │   ├── branch.ts
    │   │       │   ├── index.ts
    │   │       │   ├── multisig.ts
    │   │       │   ├── signWitnessGroup.ts
    │   │       │   └── signWitnesses.ts
    │   │       ├── types/
    │   │       │   ├── blockchain.ts
    │   │       │   ├── collector.ts
    │   │       │   ├── index.ts
    │   │       │   ├── indexer.ts
    │   │       │   └── rpc.ts
    │   │       └── utils/
    │   │           ├── caseParser.ts
    │   │           ├── const.ts
    │   │           ├── epochs.ts
    │   │           ├── index.ts
    │   │           ├── systemScripts.ts
    │   │           ├── validators.ts
    │   │           ├── address/
    │   │           │   └── index.ts
    │   │           ├── convertors/
    │   │           │   └── index.ts
    │   │           ├── crypto/
    │   │           │   ├── blake160.ts
    │   │           │   ├── blake2b.ts
    │   │           │   ├── ecpair.ts
    │   │           │   └── index.ts
    │   │           ├── exceptions/
    │   │           │   ├── ErrorCode.ts
    │   │           │   ├── address.ts
    │   │           │   ├── blake2b.ts
    │   │           │   ├── common.ts
    │   │           │   ├── index.ts
    │   │           │   ├── privateKey.ts
    │   │           │   ├── string.ts
    │   │           │   └── transaction.ts
    │   │           ├── serialization/
    │   │           │   ├── basic.ts
    │   │           │   ├── index.ts
    │   │           │   ├── script.ts
    │   │           │   └── transaction.ts
    │   │           └── size/
    │   │               └── index.ts
    │   └── leap/
    │       ├── package.json
    │       ├── tsconfig.json
    │       ├── tsup.config.ts
    │       ├── vitest.config.mts
    │       └── src/
    │           ├── index.ts
    │           ├── constants/
    │           │   ├── branch.ts
    │           │   ├── ckb.ts
    │           │   └── index.ts
    │           ├── molecule/
    │           │   ├── customized.ts
    │           │   ├── lumos-molecule-codegen.json
    │           │   ├── generated/
    │           │   │   ├── blockchain.ts
    │           │   │   └── leap.ts
    │           │   └── schemas/
    │           │       ├── blockchain.mol
    │           │       └── leap.mol
    │           ├── request/
    │           │   ├── branch.ts
    │           │   ├── ckb.ts
    │           │   ├── index.ts
    │           │   ├── lock-args.ts
    │           │   └── request.spec.ts
    │           ├── types/
    │           │   └── index.ts
    │           └── utils/
    │               ├── hex.ts
    │               ├── index.ts
    │               └── size.ts
    └── .github/
        └── workflows/
            └── tests.yml

================================================
File: README.md
================================================
# UTXO Stack SDK JavaScript

JavaScript SDK for [UTXO Stack](https://www.utxostack.network/en-us).

The utxo-stack-sdk is still under development and aim for providing low-level APIs of data construction. You should get familiar with Branch chain transaction structure and RPCs before using it and design your own DApp SDK based on this one.

# Development Process

```sh
$ pnpm install
$ pnpm build
$ pnpm test
```


================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2019 - 2022 UTXO Stack

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: package.json
================================================
{
  "name": "utxo-stack-sdk",
  "scripts": {
    "build": "pnpm run --r --filter \"./packages/**\" build",
    "test": "pnpm run --r --filter \"./packages/**\" test",
    "format": "eslint --fix --ext .ts,.js && prettier --write './**/*.{ts, js}'",
    "lint": "eslint --ext .ts,.js"
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "engines": {
    "node": ">=18"
  },
  "lint-staged": {
    "*/**/*.{ts,js}": [
      "eslint --fix",
      "git add"
    ]
  },
  "devDependencies": {
    "@types/node": "20.14.10",
    "@typescript-eslint/eslint-plugin": "7.16.0",
    "@typescript-eslint/parser": "7.16.0",
    "commitizen": "4.3.0",
    "cz-conventional-changelog": "3.3.0",
    "eslint": "^8.57.0",
    "eslint-config-airbnb-base": "15.0.0",
    "eslint-config-prettier": "9.1.0",
    "eslint-plugin-import": "2.29.1",
    "eslint-plugin-jest": "28.6.0",
    "eslint-plugin-prettier": "5.1.3",
    "husky": "9.0.11",
    "jest": "29.7.0",
    "vitest": "1.6.0",
    "tsup": "^8.1.0",
    "lint-staged": "15.2.7",
    "ts-node": "10.9.2",
    "prettier": "3.3.2",
    "typescript": "5.5.3",
    "dotenv": "^16.4.5",
    "@types/dotenv": "^8.2.0"
  },
  "packageManager": "pnpm@9.0.0",
  "volta": {
    "node": "18.20.2"
  }
}


================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    devDependencies:
      '@types/dotenv':
        specifier: ^8.2.0
        version: 8.2.0
      '@types/node':
        specifier: 20.14.10
        version: 20.14.10
      '@typescript-eslint/eslint-plugin':
        specifier: 7.16.0
        version: 7.16.0(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/parser':
        specifier: 7.16.0
        version: 7.16.0(eslint@8.57.0)(typescript@5.5.3)
      commitizen:
        specifier: 4.3.0
        version: 4.3.0(@types/node@20.14.10)(typescript@5.5.3)
      cz-conventional-changelog:
        specifier: 3.3.0
        version: 3.3.0(@types/node@20.14.10)(typescript@5.5.3)
      dotenv:
        specifier: ^16.4.5
        version: 16.4.5
      eslint:
        specifier: ^8.57.0
        version: 8.57.0
      eslint-config-airbnb-base:
        specifier: 15.0.0
        version: 15.0.0(eslint-plugin-import@2.29.1(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0)
      eslint-config-prettier:
        specifier: 9.1.0
        version: 9.1.0(eslint@8.57.0)
      eslint-plugin-import:
        specifier: 2.29.1
        version: 2.29.1(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)
      eslint-plugin-jest:
        specifier: 28.6.0
        version: 28.6.0(@typescript-eslint/eslint-plugin@7.16.0(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(jest@29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)))(typescript@5.5.3)
      eslint-plugin-prettier:
        specifier: 5.1.3
        version: 5.1.3(eslint-config-prettier@9.1.0(eslint@8.57.0))(eslint@8.57.0)(prettier@3.3.2)
      husky:
        specifier: 9.0.11
        version: 9.0.11
      jest:
        specifier: 29.7.0
        version: 29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      lint-staged:
        specifier: 15.2.7
        version: 15.2.7
      prettier:
        specifier: 3.3.2
        version: 3.3.2
      ts-node:
        specifier: 10.9.2
        version: 10.9.2(@types/node@20.14.10)(typescript@5.5.3)
      tsup:
        specifier: ^8.1.0
        version: 8.1.0(postcss@8.4.40)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))(typescript@5.5.3)
      typescript:
        specifier: 5.5.3
        version: 5.5.3
      vitest:
        specifier: 1.6.0
        version: 1.6.0(@types/node@20.14.10)

  examples/branch:
    dependencies:
      '@utxo-stack/branch':
        specifier: workspace:*
        version: link:../../packages/branch

  examples/leap:
    dependencies:
      '@utxo-stack/branch':
        specifier: workspace:*
        version: link:../../packages/branch
      '@utxo-stack/leap':
        specifier: workspace:*
        version: link:../../packages/leap

  packages/branch:
    dependencies:
      axios:
        specifier: 1.7.2
        version: 1.7.2
      bech32:
        specifier: 2.0.0
        version: 2.0.0
      camelcase-keys:
        specifier: ^7.0.2
        version: 7.0.2
      convert-keys:
        specifier: 1.3.4
        version: 1.3.4
      elliptic:
        specifier: 6.5.5
        version: 6.5.5
      jsbi:
        specifier: 4.3.0
        version: 4.3.0
    devDependencies:
      '@types/bitcoinjs-lib':
        specifier: 5.0.0
        version: 5.0.0
      '@types/elliptic':
        specifier: 6.4.18
        version: 6.4.18

  packages/leap:
    dependencies:
      '@ckb-lumos/base':
        specifier: ^0.23.0
        version: 0.23.0
      '@ckb-lumos/codec':
        specifier: ^0.23.0
        version: 0.23.0
      '@utxo-stack/branch':
        specifier: workspace:*
        version: link:../branch
      axios:
        specifier: 1.7.2
        version: 1.7.2
    devDependencies:
      '@ckb-lumos/molecule':
        specifier: 0.0.0-canary-66bbbfd-20240805132534
        version: 0.0.0-canary-66bbbfd-20240805132534

packages:

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@babel/code-frame@7.24.7':
    resolution: {integrity: sha512-BcYH1CVJBO9tvyIZ2jVeXgSIMvGZ2FDRvDdOIVQyuklNKSsx+eppDEBq/g47Ayw+RqNFE+URvOShmf+f/qwAlA==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.24.7':
    resolution: {integrity: sha512-qJzAIcv03PyaWqxRgO4mSU3lihncDT296vnyuE2O8uA4w3UHWI4S3hgeZd1L8W1Bft40w9JxJ2b412iDUFFRhw==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.24.7':
    resolution: {integrity: sha512-nykK+LEK86ahTkX/3TgauT0ikKoNCfKHEaZYTUVupJdTLzGNvrblu4u6fa7DhZONAltdf8e662t/abY8idrd/g==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.24.7':
    resolution: {integrity: sha512-oipXieGC3i45Y1A41t4tAqpnEZWgB/lC6Ehh6+rOviR5XWpTtMmLN+fGjz9vOiNRt0p6RtO6DtD0pdU3vpqdSA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.24.7':
    resolution: {integrity: sha512-ctSdRHBi20qWOfy27RUb4Fhp07KSJ3sXcuSvTrXrc4aG8NSYDo1ici3Vhg9bg69y5bj0Mr1lh0aeEgTvc12rMg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-environment-visitor@7.24.7':
    resolution: {integrity: sha512-DoiN84+4Gnd0ncbBOM9AZENV4a5ZiL39HYMyZJGZ/AZEykHYdJw0wW3kdcsh9/Kn+BRXHLkkklZ51ecPKmI1CQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-function-name@7.24.7':
    resolution: {integrity: sha512-FyoJTsj/PEUWu1/TYRiXTIHc8lbw+TDYkZuoE43opPS5TrI7MyONBE1oNvfguEXAD9yhQRrVBnXdXzSLQl9XnA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-hoist-variables@7.24.7':
    resolution: {integrity: sha512-MJJwhkoGy5c4ehfoRyrJ/owKeMl19U54h27YYftT0o2teQ3FJ3nQUf/I3LlJsX4l3qlw7WRXUmiyajvHXoTubQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.24.7':
    resolution: {integrity: sha512-8AyH3C+74cgCVVXow/myrynrAGv+nTVg5vKu2nZph9x7RcRwzmh0VFallJuFTZ9mx6u4eSdXZfcOzSqTUm0HCA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.24.7':
    resolution: {integrity: sha512-1fuJEwIrp+97rM4RWdO+qrRsZlAeL1lQJoPqtCYWv0NL115XM93hIH4CSRln2w52SqvmY5hqdtauB6QFCDiZNQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-plugin-utils@7.24.7':
    resolution: {integrity: sha512-Rq76wjt7yz9AAc1KnlRKNAi/dMSVWgDRx43FHoJEbcYU6xOWaE2dVPwcdTukJrjxS65GITyfbvEYHvkirZ6uEg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-simple-access@7.24.7':
    resolution: {integrity: sha512-zBAIvbCMh5Ts+b86r/CjU+4XGYIs+R1j951gxI3KmmxBMhCg4oQMsv6ZXQ64XOm/cvzfU1FmoCyt6+owc5QMYg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-split-export-declaration@7.24.7':
    resolution: {integrity: sha512-oy5V7pD+UvfkEATUKvIjvIAH/xCzfsFVw7ygW2SI6NClZzquT+mwdTfgfdbUiceh6iQO0CHtCPsyze/MZ2YbAA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.24.7':
    resolution: {integrity: sha512-7MbVt6xrwFQbunH2DNQsAP5sTGxfqQtErvBIvIMi6EQnbgUOuVYanvREcmFrOPhoXBrTtjhhP+lW+o5UfK+tDg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.24.7':
    resolution: {integrity: sha512-rR+PBcQ1SMQDDyF6X0wxtG8QyLCgUB0eRAGguqRLfkCA87l7yAP7ehq8SNj96OOGTO8OBV70KhuFYcIkHXOg0w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.24.7':
    resolution: {integrity: sha512-yy1/KvjhV/ZCL+SM7hBrvnZJ3ZuT9OuZgIJAGpPEToANvc3iM6iDvBnRjtElWibHU6n8/LPR/EjX9EtIEYO3pw==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.24.7':
    resolution: {integrity: sha512-NlmJJtvcw72yRJRcnCmGvSi+3jDEg8qFu3z0AFoymmzLx5ERVWyzd9kVXr7Th9/8yIJi2Zc6av4Tqz3wFs8QWg==}
    engines: {node: '>=6.9.0'}

  '@babel/highlight@7.24.7':
    resolution: {integrity: sha512-EStJpq4OuY8xYfhGVXngigBJRWxftKX9ksiGDnmlY3o7B/V7KIAc9X4oiK87uPJSc/vs5L869bem5fhZa8caZw==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.24.7':
    resolution: {integrity: sha512-9uUYRm6OqQrCqQdG1iCBwBPZgN8ciDBro2nIOFaiRz1/BCxaI7CNvQbDHvsArAC7Tw9Hda/B3U+6ui9u4HWXPw==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-syntax-async-generators@7.8.4':
    resolution: {integrity: sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-bigint@7.8.3':
    resolution: {integrity: sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-class-properties@7.12.13':
    resolution: {integrity: sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-meta@7.10.4':
    resolution: {integrity: sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-json-strings@7.8.3':
    resolution: {integrity: sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-jsx@7.24.7':
    resolution: {integrity: sha512-6ddciUPe/mpMnOKv/U+RSd2vvVy+Yw/JfBB0ZHYjEZt9NLHmCUylNYlsbqCCS1Bffjlb0fCwC9Vqz+sBz6PsiQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4':
    resolution: {integrity: sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3':
    resolution: {integrity: sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-numeric-separator@7.10.4':
    resolution: {integrity: sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-object-rest-spread@7.8.3':
    resolution: {integrity: sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-catch-binding@7.8.3':
    resolution: {integrity: sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-chaining@7.8.3':
    resolution: {integrity: sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-top-level-await@7.14.5':
    resolution: {integrity: sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-typescript@7.24.7':
    resolution: {integrity: sha512-c/+fVeJBB0FeKsFvwytYiUD+LBvhHjGSI0g446PRGdSVGZLRNArBUno2PETbAly3tpiNAQR5XaZ+JslxkotsbA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/template@7.24.7':
    resolution: {integrity: sha512-jYqfPrU9JTF0PmPy1tLYHW4Mp4KlgxJD9l2nP9fD6yT/ICi554DmrWBAEYpIelzjHf1msDP3PxJIRt/nFNfBig==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.24.7':
    resolution: {integrity: sha512-yb65Ed5S/QAcewNPh0nZczy9JdYXkkAbIsEo+P7BE7yO3txAY30Y/oPa3QkQ5It3xVG2kpKMg9MsdxZaO31uKA==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.24.7':
    resolution: {integrity: sha512-XEFXSlxiG5td2EJRe8vOmRbaXVgfcBlszKujvVmWIK/UpywWljQCfzAv3RQCGujWQ1RD4YYWEAqDXfuJiy8f5Q==}
    engines: {node: '>=6.9.0'}

  '@bcoe/v8-coverage@0.2.3':
    resolution: {integrity: sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==}

  '@ckb-lumos/base@0.23.0':
    resolution: {integrity: sha512-8aLFsUyWIK0rT7GQlYFuXyiG5lQ2bLRK2GvUsxv5G7I3nJ1UyxjwvVOdtlsR/cwhzOam3ujwqASqBIayBL6GLA==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/bi@0.0.0-canary-66bbbfd-20240805132534':
    resolution: {integrity: sha512-0eEPkaZ7WOXIkHbRx/vD2kynn4b5TRT8Xo3DGFPKDd/9ZQJX07fPvaCRdCV9/fyEZXC4aVv0XskWySKbrWDDLw==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/bi@0.23.0':
    resolution: {integrity: sha512-KAy+lyVpL+Al4XD+c9tHrA9DSpHkMusyXtTS81aNZi5MyL6F9jrVmFcqLorhfyfl8Fsv2sEjMe5Neo2Y+w/RJQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/codec@0.0.0-canary-66bbbfd-20240805132534':
    resolution: {integrity: sha512-/9RY2SfviZtWkSQbmgNxMHoora0vv6hCFB09n/RXF1jyfmmVNKuhtcbDKAiTl4WwWmxdJd1DhgPP0ARvM7VKfg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/codec@0.23.0':
    resolution: {integrity: sha512-FwYooXnsFDjlHHnlFnCTB1UbBzV72I0VjkRpeauFk5nQ4+/75xl28ywK3J14M+0aHTnYU9msXUTRDAGqC0CaNQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/molecule@0.0.0-canary-66bbbfd-20240805132534':
    resolution: {integrity: sha512-YvUQUctRuRWoeiohjq+KNpXQ3FAuJHpiJxlFNbn+WoBX7TlIgIR69B/cRRvoa7gD5QuoA8q5zf9+0l4eYmm1Qw==}
    engines: {node: '>=12.0.0'}
    hasBin: true

  '@ckb-lumos/toolkit@0.23.0':
    resolution: {integrity: sha512-7LTsUFfoNCBWJLgh+V/QFnemjGw+y4mmLeQvubwYuJqIPIhIpwKUuKRzkvVG8snA8xVQSfjSSQOs5m3mKp66Kg==}
    engines: {node: '>=12.0.0'}

  '@commitlint/config-validator@19.0.3':
    resolution: {integrity: sha512-2D3r4PKjoo59zBc2auodrSCaUnCSALCx54yveOFwwP/i2kfEAQrygwOleFWswLqK0UL/F9r07MFi5ev2ohyM4Q==}
    engines: {node: '>=v18'}

  '@commitlint/execute-rule@19.0.0':
    resolution: {integrity: sha512-mtsdpY1qyWgAO/iOK0L6gSGeR7GFcdW7tIjcNFxcWkfLDF5qVbPHKuGATFqRMsxcO8OUKNj0+3WOHB7EHm4Jdw==}
    engines: {node: '>=v18'}

  '@commitlint/load@19.2.0':
    resolution: {integrity: sha512-XvxxLJTKqZojCxaBQ7u92qQLFMMZc4+p9qrIq/9kJDy8DOrEa7P1yx7Tjdc2u2JxIalqT4KOGraVgCE7eCYJyQ==}
    engines: {node: '>=v18'}

  '@commitlint/resolve-extends@19.1.0':
    resolution: {integrity: sha512-z2riI+8G3CET5CPgXJPlzftH+RiWYLMYv4C9tSLdLXdr6pBNimSKukYP9MS27ejmscqCTVA4almdLh0ODD2KYg==}
    engines: {node: '>=v18'}

  '@commitlint/types@19.0.3':
    resolution: {integrity: sha512-tpyc+7i6bPG9mvaBbtKUeghfyZSDgWquIDfMgqYtTbmZ9Y9VzEm2je9EYcQ0aoz5o7NvGS+rcDec93yO08MHYA==}
    engines: {node: '>=v18'}

  '@cspotcode/source-map-support@0.8.1':
    resolution: {integrity: sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==}
    engines: {node: '>=12'}

  '@esbuild/aix-ppc64@0.21.5':
    resolution: {integrity: sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.21.5':
    resolution: {integrity: sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.21.5':
    resolution: {integrity: sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.21.5':
    resolution: {integrity: sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.21.5':
    resolution: {integrity: sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.21.5':
    resolution: {integrity: sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.21.5':
    resolution: {integrity: sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.21.5':
    resolution: {integrity: sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.21.5':
    resolution: {integrity: sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.21.5':
    resolution: {integrity: sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.21.5':
    resolution: {integrity: sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.21.5':
    resolution: {integrity: sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.21.5':
    resolution: {integrity: sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.21.5':
    resolution: {integrity: sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.21.5':
    resolution: {integrity: sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.21.5':
    resolution: {integrity: sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.21.5':
    resolution: {integrity: sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-x64@0.21.5':
    resolution: {integrity: sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-x64@0.21.5':
    resolution: {integrity: sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.21.5':
    resolution: {integrity: sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.21.5':
    resolution: {integrity: sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.21.5':
    resolution: {integrity: sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.21.5':
    resolution: {integrity: sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.4.0':
    resolution: {integrity: sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.11.0':
    resolution: {integrity: sha512-G/M/tIiMrTAxEWRfLfQJMmGNX28IxBg4PBz8XqQhqUHLFI6TL2htpIB1iQCj144V5ee/JaKyT9/WZ0MGZWfA7A==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/eslintrc@2.1.4':
    resolution: {integrity: sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@eslint/js@8.57.0':
    resolution: {integrity: sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@humanwhocodes/config-array@0.11.14':
    resolution: {integrity: sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==}
    engines: {node: '>=10.10.0'}
    deprecated: Use @eslint/config-array instead

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/object-schema@2.0.3':
    resolution: {integrity: sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==}
    deprecated: Use @eslint/object-schema instead

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@istanbuljs/load-nyc-config@1.1.0':
    resolution: {integrity: sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==}
    engines: {node: '>=8'}

  '@istanbuljs/schema@0.1.3':
    resolution: {integrity: sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==}
    engines: {node: '>=8'}

  '@jest/console@29.7.0':
    resolution: {integrity: sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/core@29.7.0':
    resolution: {integrity: sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/environment@29.7.0':
    resolution: {integrity: sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect-utils@29.7.0':
    resolution: {integrity: sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect@29.7.0':
    resolution: {integrity: sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/fake-timers@29.7.0':
    resolution: {integrity: sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/globals@29.7.0':
    resolution: {integrity: sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/reporters@29.7.0':
    resolution: {integrity: sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/schemas@29.6.3':
    resolution: {integrity: sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/source-map@29.6.3':
    resolution: {integrity: sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-result@29.7.0':
    resolution: {integrity: sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-sequencer@29.7.0':
    resolution: {integrity: sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/transform@29.7.0':
    resolution: {integrity: sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/types@29.6.3':
    resolution: {integrity: sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jridgewell/gen-mapping@0.3.5':
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@jridgewell/trace-mapping@0.3.9':
    resolution: {integrity: sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==}

  '@noble/hashes@1.4.0':
    resolution: {integrity: sha512-V1JJ1WTRUqHHrOSh597hURcMqVKVGL/ea3kv0gSnEdsEZ0/+VyPghM1lMNGc00z7CIQorSvbKpuJkxvuHbvdbg==}
    engines: {node: '>= 16'}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@pkgr/core@0.1.1':
    resolution: {integrity: sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==}
    engines: {node: ^12.20.0 || ^14.18.0 || >=16.0.0}

  '@rollup/rollup-android-arm-eabi@4.18.1':
    resolution: {integrity: sha512-lncuC4aHicncmbORnx+dUaAgzee9cm/PbIqgWz1PpXuwc+sa1Ct83tnqUDy/GFKleLiN7ZIeytM6KJ4cAn1SxA==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.18.1':
    resolution: {integrity: sha512-F/tkdw0WSs4ojqz5Ovrw5r9odqzFjb5LIgHdHZG65dFI1lWTWRVy32KDJLKRISHgJvqUeUhdIvy43fX41znyDg==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.18.1':
    resolution: {integrity: sha512-vk+ma8iC1ebje/ahpxpnrfVQJibTMyHdWpOGZ3JpQ7Mgn/3QNHmPq7YwjZbIE7km73dH5M1e6MRRsnEBW7v5CQ==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.18.1':
    resolution: {integrity: sha512-IgpzXKauRe1Tafcej9STjSSuG0Ghu/xGYH+qG6JwsAUxXrnkvNHcq/NL6nz1+jzvWAnQkuAJ4uIwGB48K9OCGA==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-linux-arm-gnueabihf@4.18.1':
    resolution: {integrity: sha512-P9bSiAUnSSM7EmyRK+e5wgpqai86QOSv8BwvkGjLwYuOpaeomiZWifEos517CwbG+aZl1T4clSE1YqqH2JRs+g==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.18.1':
    resolution: {integrity: sha512-5RnjpACoxtS+aWOI1dURKno11d7krfpGDEn19jI8BuWmSBbUC4ytIADfROM1FZrFhQPSoP+KEa3NlEScznBTyQ==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.18.1':
    resolution: {integrity: sha512-8mwmGD668m8WaGbthrEYZ9CBmPug2QPGWxhJxh/vCgBjro5o96gL04WLlg5BA233OCWLqERy4YUzX3bJGXaJgQ==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.18.1':
    resolution: {integrity: sha512-dJX9u4r4bqInMGOAQoGYdwDP8lQiisWb9et+T84l2WXk41yEej8v2iGKodmdKimT8cTAYt0jFb+UEBxnPkbXEQ==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.18.1':
    resolution: {integrity: sha512-V72cXdTl4EI0x6FNmho4D502sy7ed+LuVW6Ym8aI6DRQ9hQZdp5sj0a2usYOlqvFBNKQnLQGwmYnujo2HvjCxQ==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.18.1':
    resolution: {integrity: sha512-f+pJih7sxoKmbjghrM2RkWo2WHUW8UbfxIQiWo5yeCaCM0TveMEuAzKJte4QskBp1TIinpnRcxkquY+4WuY/tg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.18.1':
    resolution: {integrity: sha512-qb1hMMT3Fr/Qz1OKovCuUM11MUNLUuHeBC2DPPAWUYYUAOFWaxInaTwTQmc7Fl5La7DShTEpmYwgdt2hG+4TEg==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.18.1':
    resolution: {integrity: sha512-7O5u/p6oKUFYjRbZkL2FLbwsyoJAjyeXHCU3O4ndvzg2OFO2GinFPSJFGbiwFDaCFc+k7gs9CF243PwdPQFh5g==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.18.1':
    resolution: {integrity: sha512-pDLkYITdYrH/9Cv/Vlj8HppDuLMDUBmgsM0+N+xLtFd18aXgM9Nyqupb/Uw+HeidhfYg2lD6CXvz6CjoVOaKjQ==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.18.1':
    resolution: {integrity: sha512-W2ZNI323O/8pJdBGil1oCauuCzmVd9lDmWBBqxYZcOqWD6aWqJtVBQ1dFrF4dYpZPks6F+xCZHfzG5hYlSHZ6g==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.18.1':
    resolution: {integrity: sha512-ELfEX1/+eGZYMaCIbK4jqLxO1gyTSOIlZr6pbC4SRYFaSIDVKOnZNMdoZ+ON0mrFDp4+H5MhwNC1H/AhE3zQLg==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.18.1':
    resolution: {integrity: sha512-yjk2MAkQmoaPYCSu35RLJ62+dz358nE83VfTePJRp8CG7aMg25mEJYpXFiD+NcevhX8LxD5OP5tktPXnXN7GDw==}
    cpu: [x64]
    os: [win32]

  '@sinclair/typebox@0.27.8':
    resolution: {integrity: sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==}

  '@sinonjs/commons@3.0.1':
    resolution: {integrity: sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==}

  '@sinonjs/fake-timers@10.3.0':
    resolution: {integrity: sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==}

  '@tsconfig/node10@1.0.11':
    resolution: {integrity: sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==}

  '@tsconfig/node12@1.0.11':
    resolution: {integrity: sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==}

  '@tsconfig/node14@1.0.3':
    resolution: {integrity: sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==}

  '@tsconfig/node16@1.0.4':
    resolution: {integrity: sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==}

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.6.8':
    resolution: {integrity: sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.6':
    resolution: {integrity: sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==}

  '@types/bitcoinjs-lib@5.0.0':
    resolution: {integrity: sha512-9zXjgmH2E8qEZ9gQ9GH+I6Cze3bweQbyXtR/X4RD3SdR5I4jdRPvmBrKmjegV3HZG03KNricjEoq+lQUtIXCKQ==}
    deprecated: This is a stub types definition. bitcoinjs-lib provides its own type definitions, so you do not need this installed.

  '@types/blake2b@2.1.3':
    resolution: {integrity: sha512-MFCdX0MNxFBP/xEILO5Td0kv6nI7+Q2iRWZbTL/yzH2/eDVZS5Wd1LHdsmXClvsCyzqaZfHFzZaN6BUeUCfSDA==}

  '@types/bn.js@5.1.5':
    resolution: {integrity: sha512-V46N0zwKRF5Q00AZ6hWtN0T8gGmDUaUzLWQvHFo5yThtVwK/VCenFY3wXVbOvNfajEpsTfQM4IN9k/d6gUVX3A==}

  '@types/conventional-commits-parser@5.0.0':
    resolution: {integrity: sha512-loB369iXNmAZglwWATL+WRe+CRMmmBPtpolYzIebFaX4YA3x+BEfLqhUAV9WanycKI3TG1IMr5bMJDajDKLlUQ==}

  '@types/dotenv@8.2.0':
    resolution: {integrity: sha512-ylSC9GhfRH7m1EUXBXofhgx4lUWmFeQDINW5oLuS+gxWdfUeW4zJdeVTYVkexEW+e2VUvlZR2kGnGGipAWR7kw==}
    deprecated: This is a stub types definition. dotenv provides its own type definitions, so you do not need this installed.

  '@types/elliptic@6.4.18':
    resolution: {integrity: sha512-UseG6H5vjRiNpQvrhy4VF/JXdA3V/Fp5amvveaL+fs28BZ6xIKJBPnUPRlEaZpysD9MbpfaLi8lbl7PGUAkpWw==}

  '@types/estree@1.0.5':
    resolution: {integrity: sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==}

  '@types/graceful-fs@4.1.9':
    resolution: {integrity: sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==}

  '@types/istanbul-lib-coverage@2.0.6':
    resolution: {integrity: sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==}

  '@types/istanbul-lib-report@3.0.3':
    resolution: {integrity: sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==}

  '@types/istanbul-reports@3.0.4':
    resolution: {integrity: sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==}

  '@types/json5@0.0.29':
    resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}

  '@types/lodash.isequal@4.5.8':
    resolution: {integrity: sha512-uput6pg4E/tj2LGxCZo9+y27JNyB2OZuuI/T5F+ylVDYuqICLG2/ktjxx0v6GvVntAf8TvEzeQLcV0ffRirXuA==}

  '@types/lodash@4.17.7':
    resolution: {integrity: sha512-8wTvZawATi/lsmNu10/j2hk1KEP0IvjubqPE3cu1Xz7xfXXt5oCq3SNUz4fMIP4XGF9Ky+Ue2tBA3hcS7LSBlA==}

  '@types/moo@0.5.9':
    resolution: {integrity: sha512-ZsFVecFi66jGQ6L41TonEaBhsIVeVftTz6iQKWTctzacHhzYHWvv9S0IyAJi4BhN7vb9qCQ3+kpStP2vbZqmDg==}

  '@types/nearley@2.11.5':
    resolution: {integrity: sha512-dM7TrN0bVxGGXTYGx4YhGear8ysLO5SOuouAWM9oltjQ3m9oYa13qi8Z1DJp5zxVMPukvQdsrnZmgzpeuTSEQA==}

  '@types/node@20.14.10':
    resolution: {integrity: sha512-MdiXf+nDuMvY0gJKxyfZ7/6UFsETO7mGKF54MVD/ekJS6HdFtpZFBgrh6Pseu64XTb2MLyFPlbW6hj8HYRQNOQ==}

  '@types/stack-utils@2.0.3':
    resolution: {integrity: sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==}

  '@types/yargs-parser@21.0.3':
    resolution: {integrity: sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==}

  '@types/yargs@17.0.32':
    resolution: {integrity: sha512-xQ67Yc/laOG5uMfX/093MRlGGCIBzZMarVa+gfNKJxWAIgykYpVGkBdbqEzGDDfCrVUj6Hiff4mTZ5BA6TmAog==}

  '@typescript-eslint/eslint-plugin@7.16.0':
    resolution: {integrity: sha512-py1miT6iQpJcs1BiJjm54AMzeuMPBSPuKPlnT8HlfudbcS5rYeX5jajpLf3mrdRh9dA/Ec2FVUY0ifeVNDIhZw==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      '@typescript-eslint/parser': ^7.0.0
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@7.16.0':
    resolution: {integrity: sha512-ar9E+k7CU8rWi2e5ErzQiC93KKEFAXA2Kky0scAlPcxYblLt8+XZuHUZwlyfXILyQa95P6lQg+eZgh/dDs3+Vw==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/scope-manager@7.16.0':
    resolution: {integrity: sha512-8gVv3kW6n01Q6TrI1cmTZ9YMFi3ucDT7i7aI5lEikk2ebk1AEjrwX8MDTdaX5D7fPXMBLvnsaa0IFTAu+jcfOw==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@typescript-eslint/type-utils@7.16.0':
    resolution: {integrity: sha512-j0fuUswUjDHfqV/UdW6mLtOQQseORqfdmoBNDFOqs9rvNVR2e+cmu6zJu/Ku4SDuqiJko6YnhwcL8x45r8Oqxg==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/types@7.16.0':
    resolution: {integrity: sha512-fecuH15Y+TzlUutvUl9Cc2XJxqdLr7+93SQIbcZfd4XRGGKoxyljK27b+kxKamjRkU7FYC6RrbSCg0ALcZn/xw==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@typescript-eslint/typescript-estree@7.16.0':
    resolution: {integrity: sha512-a5NTvk51ZndFuOLCh5OaJBELYc2O3Zqxfl3Js78VFE1zE46J2AaVuW+rEbVkQznjkmlzWsUI15BG5tQMixzZLw==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/utils@7.16.0':
    resolution: {integrity: sha512-PqP4kP3hb4r7Jav+NiRCntlVzhxBNWq6ZQ+zQwII1y/G/1gdIPeYDCKr2+dH6049yJQsWZiHU6RlwvIFBXXGNA==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0

  '@typescript-eslint/visitor-keys@7.16.0':
    resolution: {integrity: sha512-rMo01uPy9C7XxG7AFsxa8zLnWXTF8N3PYclekWSrurvhwiw1eW88mrKiAYe6s53AUY57nTRz8dJsuuXdkAhzCg==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@ungap/structured-clone@1.2.0':
    resolution: {integrity: sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==}

  '@vitest/expect@1.6.0':
    resolution: {integrity: sha512-ixEvFVQjycy/oNgHjqsL6AZCDduC+tflRluaHIzKIsdbzkLn2U/iBnVeJwB6HsIjQBdfMR8Z0tRxKUsvFJEeWQ==}

  '@vitest/runner@1.6.0':
    resolution: {integrity: sha512-P4xgwPjwesuBiHisAVz/LSSZtDjOTPYZVmNAnpHHSR6ONrf8eCJOFRvUwdHn30F5M1fxhqtl7QZQUk2dprIXAg==}

  '@vitest/snapshot@1.6.0':
    resolution: {integrity: sha512-+Hx43f8Chus+DCmygqqfetcAZrDJwvTj0ymqjQq4CvmpKFSTVteEOBzCusu1x2tt4OJcvBflyHUE0DZSLgEMtQ==}

  '@vitest/spy@1.6.0':
    resolution: {integrity: sha512-leUTap6B/cqi/bQkXUu6bQV5TZPx7pmMBKBQiI0rJA8c3pB56ZsaTbREnF7CJfmvAS4V2cXIBAh/3rVwrrCYgw==}

  '@vitest/utils@1.6.0':
    resolution: {integrity: sha512-21cPiuGMoMZwiOHa2i4LXkMkMkCGzA+MVFV70jRwHo95dL4x/ts5GZhML1QWuy7yfp3WzK3lRvZi3JnXTYqrBw==}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn-walk@8.3.3:
    resolution: {integrity: sha512-MxXdReSRhGO7VlFe1bRG/oI7/mdLV9B9JJT0N8vZOhF7gFRR5l3M8W9G8JxmKV+JC5mGqJ0QvqfSOLsCPa4nUw==}
    engines: {node: '>=0.4.0'}

  acorn@8.12.1:
    resolution: {integrity: sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ajv@8.16.0:
    resolution: {integrity: sha512-F0twR8U1ZU67JIEtekUcLkXkoO5mMMmgGD8sK/xUFzJ805jxHQl92hImFAqqXMyMYjSPOyUPAwHYhB72g5sTXw==}

  ansi-escapes@4.3.2:
    resolution: {integrity: sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==}
    engines: {node: '>=8'}

  ansi-escapes@6.2.1:
    resolution: {integrity: sha512-4nJ3yixlEthEJ9Rk4vPcdBRkZvQZlYyu8j4/Mqz5sgIkddmEnH2Yj2ZrnP9S3tQOvSNRUIgVNF/1yPpRAGNRig==}
    engines: {node: '>=14.16'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.0.1:
    resolution: {integrity: sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==}
    engines: {node: '>=12'}

  ansi-styles@3.2.1:
    resolution: {integrity: sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==}
    engines: {node: '>=4'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arg@4.1.3:
    resolution: {integrity: sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==}

  argparse@1.0.10:
    resolution: {integrity: sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  array-buffer-byte-length@1.0.1:
    resolution: {integrity: sha512-ahC5W1xgou+KTXix4sAO8Ki12Q+jf4i0+tmk3sC+zgcynshkHxzpXdImBehiUYKKKDwvfFiJl1tZt6ewscS1Mg==}
    engines: {node: '>= 0.4'}

  array-includes@3.1.8:
    resolution: {integrity: sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==}
    engines: {node: '>= 0.4'}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  array.prototype.findlastindex@1.2.5:
    resolution: {integrity: sha512-zfETvRFA8o7EiNn++N5f/kaCw221hrpGsDmcpndVupkPzEc1Wuf3VgC0qby1BbHs7f5DVYjgtEU2LLh5bqeGfQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.2:
    resolution: {integrity: sha512-djYB+Zx2vLewY8RWlNCUdHjDXs2XOgm602S9E7P/UpHgfeHL00cRiIF+IN/G/aUJ7kGPb6yO/ErDI5V2s8iycA==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.2:
    resolution: {integrity: sha512-Ewyx0c9PmpcsByhSW4r+9zDU7sGjFc86qf/kKtuSCRdhfbk0SNLLkaT5qvcHnRGgc5NP/ly/y+qkXkqONX54CQ==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.3:
    resolution: {integrity: sha512-bMxMKAjg13EBSVscxTaYA4mRc5t1UAXa2kXiGTNfZ079HIWXEkKmkgFrh/nJqamaLSrXO5H4WFFkPEaLJWbs3A==}
    engines: {node: '>= 0.4'}

  assertion-error@1.1.0:
    resolution: {integrity: sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  at-least-node@1.0.0:
    resolution: {integrity: sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==}
    engines: {node: '>= 4.0.0'}

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  axios@1.7.2:
    resolution: {integrity: sha512-2A8QhOMrbomlDuiLeK9XibIBzuHeRcqqNOHp0Cyp5EoJ1IFDh+XZH3A6BkXtv0K4gFGCI0Y4BM7B1wOEi0Rmgw==}

  b4a@1.6.6:
    resolution: {integrity: sha512-5Tk1HLk6b6ctmjIkAcU/Ujv/1WqiDl0F0JdRCR80VsOcUlHcu7pWeWRlOqQLHfDEsVx9YH/aif5AG4ehoCtTmg==}

  babel-jest@29.7.0:
    resolution: {integrity: sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.8.0

  babel-plugin-istanbul@6.1.1:
    resolution: {integrity: sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==}
    engines: {node: '>=8'}

  babel-plugin-jest-hoist@29.6.3:
    resolution: {integrity: sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  babel-preset-current-node-syntax@1.0.1:
    resolution: {integrity: sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==}
    peerDependencies:
      '@babel/core': ^7.0.0

  babel-preset-jest@29.6.3:
    resolution: {integrity: sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.0.0

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base-x@4.0.0:
    resolution: {integrity: sha512-FuwxlW4H5kh37X/oW59pwTzzTKRzfrrQwhmyspRM7swOEZcHtDZSCt45U6oKgtuFE+WYPblePMVIPR4RZrh/hw==}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  bech32@2.0.0:
    resolution: {integrity: sha512-LcknSilhIGatDAsY1ak2I8VtGaHNhgMSYVxFrGLXv+xLHytaKZKcaUJJUE7qmBr7h33o5YQwP55pMI0xmkpJwg==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  bip174@2.1.1:
    resolution: {integrity: sha512-mdFV5+/v0XyNYXjBS6CQPLo9ekCx4gtKZFnJm5PMto7Fs9hTTDpkkzOB7/FtluRI6JbUUAu+snTYfJRgHLZbZQ==}
    engines: {node: '>=8.0.0'}

  bitcoinjs-lib@6.1.6:
    resolution: {integrity: sha512-Fk8+Vc+e2rMoDU5gXkW9tD+313rhkm5h6N9HfZxXvYU9LedttVvmXKTgd9k5rsQJjkSfsv6XRM8uhJv94SrvcA==}
    engines: {node: '>=8.0.0'}

  bl@4.1.0:
    resolution: {integrity: sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==}

  blake2b-wasm@2.4.0:
    resolution: {integrity: sha512-S1kwmW2ZhZFFFOghcx73+ZajEfKBqhP82JMssxtLVMxlaPea1p9uoLiUZ5WYyHn0KddwbLc+0vh4wR0KBNoT5w==}

  blake2b@2.1.4:
    resolution: {integrity: sha512-AyBuuJNI64gIvwx13qiICz6H6hpmjvYS5DGkG6jbXMOT8Z3WUJ3V1X0FlhIoT1b/5JtHE3ki+xjtMvu1nn+t9A==}

  bn.js@4.12.0:
    resolution: {integrity: sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA==}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  brorand@1.1.0:
    resolution: {integrity: sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==}

  browserslist@4.23.2:
    resolution: {integrity: sha512-qkqSyistMYdxAcw+CzbZwlBy8AGmS/eEWs+sEV5TnLRGDOL+C5M2EnH6tlZyg0YoAxGJAFKh61En9BR941GnHA==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  bs58@5.0.0:
    resolution: {integrity: sha512-r+ihvQJvahgYT50JD05dyJNKlmmSlMoOGwn1lCcEzanPglg7TxYjioQUYehQ9mAR/+hOSd2jRc/Z2y5UxBymvQ==}

  bs58check@3.0.1:
    resolution: {integrity: sha512-hjuuJvoWEybo7Hn/0xOrczQKKEKD63WguEjlhLExYs2wUBcebDC1jDNK17eEAD2lYfw82d5ASC1d7K3SWszjaQ==}

  bser@2.1.1:
    resolution: {integrity: sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  buffer@5.7.1:
    resolution: {integrity: sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==}

  bundle-require@4.2.1:
    resolution: {integrity: sha512-7Q/6vkyYAwOmQNRw75x+4yRtZCZJXUDmHHlFdkiV0wgv/reNjtJwpu1jPJ0w2kbEpIM0uoKI3S4/f39dU7AjSA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
    peerDependencies:
      esbuild: '>=0.17'

  cac@6.7.14:
    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
    engines: {node: '>=8'}

  cachedir@2.3.0:
    resolution: {integrity: sha512-A+Fezp4zxnit6FanDmv9EqXNAi3vt9DWp51/71UEhXukb7QUuvtv9344h91dyAxuTLoSYJFU299qzR3tzwPAhw==}
    engines: {node: '>=6'}

  call-bind@1.0.7:
    resolution: {integrity: sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase-keys@7.0.2:
    resolution: {integrity: sha512-Rjs1H+A9R+Ig+4E/9oyB66UC5Mj9Xq3N//vcLf2WzgdTi/3gUu3Z9KoqmlrEG4VuuLK8wJHofxzdQXz/knhiYg==}
    engines: {node: '>=12'}

  camelcase@5.3.1:
    resolution: {integrity: sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==}
    engines: {node: '>=6'}

  camelcase@6.3.0:
    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
    engines: {node: '>=10'}

  caniuse-lite@1.0.30001641:
    resolution: {integrity: sha512-Phv5thgl67bHYo1TtMY/MurjkHhV4EDaCosezRXgZ8jzA/Ub+wjxAvbGvjoFENStinwi5kCyOYV3mi5tOGykwA==}

  chai@4.5.0:
    resolution: {integrity: sha512-RITGBfijLkBddZvnn8jdqoTypxvqbOLYQkGGxXzeFjVHvudaPw0HNFD9x928/eUwYWd2dPCugVqspGALTZZQKw==}
    engines: {node: '>=4'}

  chalk@2.4.2:
    resolution: {integrity: sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==}
    engines: {node: '>=4'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.3.0:
    resolution: {integrity: sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  char-regex@1.0.2:
    resolution: {integrity: sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==}
    engines: {node: '>=10'}

  chardet@0.7.0:
    resolution: {integrity: sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==}

  check-error@1.0.3:
    resolution: {integrity: sha512-iKEoDYaRmd1mxM90a2OEfWhjsjPpYPuQ+lMYsoxB126+t8fw7ySEO48nmDg5COTjxDI65/Y2OWpeEHk3ZOe8zg==}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  ci-info@3.9.0:
    resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}
    engines: {node: '>=8'}

  cjs-module-lexer@1.3.1:
    resolution: {integrity: sha512-a3KdPAANPbNE4ZUv9h6LckSl9zLsYOP4MBmhIPkRaeyybt+r4UghLvq+xw/YwUcC1gqylCkL4rdVs3Lwupjm4Q==}

  cli-cursor@3.1.0:
    resolution: {integrity: sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==}
    engines: {node: '>=8'}

  cli-cursor@4.0.0:
    resolution: {integrity: sha512-VGtlMu3x/4DOtIUwEkRezxUZ2lBacNJCHash0N0WeZDBS+7Ux1dm3XWAgWYxLJFMMdOeXMHXorshEFhbMSGelg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  cli-spinners@2.9.2:
    resolution: {integrity: sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==}
    engines: {node: '>=6'}

  cli-truncate@4.0.0:
    resolution: {integrity: sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==}
    engines: {node: '>=18'}

  cli-width@3.0.0:
    resolution: {integrity: sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==}
    engines: {node: '>= 10'}

  cliui@8.0.1:
    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
    engines: {node: '>=12'}

  clone@1.0.4:
    resolution: {integrity: sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==}
    engines: {node: '>=0.8'}

  co@4.6.0:
    resolution: {integrity: sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==}
    engines: {iojs: '>= 1.0.0', node: '>= 0.12.0'}

  collect-v8-coverage@1.0.2:
    resolution: {integrity: sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==}

  color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  colorette@2.0.20:
    resolution: {integrity: sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@12.1.0:
    resolution: {integrity: sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==}
    engines: {node: '>=18'}

  commander@2.20.3:
    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  commitizen@4.3.0:
    resolution: {integrity: sha512-H0iNtClNEhT0fotHvGV3E9tDejDeS04sN1veIebsKYGMuGscFaswRoYJKmT3eW85eIJAs0F28bG2+a/9wCOfPw==}
    engines: {node: '>= 12'}
    hasBin: true

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  confbox@0.1.7:
    resolution: {integrity: sha512-uJcB/FKZtBMCJpK8MQji6bJHgu1tixKPxRLeGkNzBoOZzpnZUJm0jm2/sBDWcuBx1dYgxV4JU+g5hmNxCyAmdA==}

  confusing-browser-globals@1.0.11:
    resolution: {integrity: sha512-JsPKdmh8ZkmnHxDk55FZ1TqVLvEQTvoByJZRN9jzI0UjxK/QgAmsphz7PGtqgPieQZ/CQcHWXCR7ATDNhGe+YA==}

  conventional-commit-types@3.0.0:
    resolution: {integrity: sha512-SmmCYnOniSsAa9GqWOeLqc179lfr5TRu5b4QFDkbsrJ5TZjPJx85wtOr3zn+1dbeNiXDKGPbZ72IKbPhLXh/Lg==}

  convert-keys@1.3.4:
    resolution: {integrity: sha512-+ltki+EUagotW/x7r+15nuHyk4nzcSkBk1lZpmbHjscF2E9ZmNErgV7K18LNshB0qglECcsnwy29ODlJ0pI0KA==}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cosmiconfig-typescript-loader@5.0.0:
    resolution: {integrity: sha512-+8cK7jRAReYkMwMiG+bxhcNKiHJDM6bR9FD/nGBXOWdMLuYawjF5cGrtLilJ+LGd3ZjCXnJjR5DkfWPoIVlqJA==}
    engines: {node: '>=v16'}
    peerDependencies:
      '@types/node': '*'
      cosmiconfig: '>=8.2'
      typescript: '>=4'

  cosmiconfig@9.0.0:
    resolution: {integrity: sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==}
    engines: {node: '>=14'}
    peerDependencies:
      typescript: '>=4.9.5'
    peerDependenciesMeta:
      typescript:
        optional: true

  create-jest@29.7.0:
    resolution: {integrity: sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true

  create-require@1.1.1:
    resolution: {integrity: sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==}

  cross-spawn@7.0.3:
    resolution: {integrity: sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==}
    engines: {node: '>= 8'}

  cz-conventional-changelog@3.3.0:
    resolution: {integrity: sha512-U466fIzU5U22eES5lTNiNbZ+d8dfcHcssH4o7QsdWaCcRs/feIPCxKYSWkYBNs5mny7MvEfwpTLWjvbm94hecw==}
    engines: {node: '>= 10'}

  data-view-buffer@1.0.1:
    resolution: {integrity: sha512-0lht7OugA5x3iJLOWFhWK/5ehONdprk0ISXqVFn/NFrDu+cuc8iADFrGQz5BnRK7LLU3JmkbXSxaqX+/mXYtUA==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.1:
    resolution: {integrity: sha512-4J7wRJD3ABAzr8wP+OcIcqq2dlUKp4DVflx++hs5h5ZKydWMI6/D/fAot+yh6g2tHh8fLFTvNOaVN357NvSrOQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.0:
    resolution: {integrity: sha512-t/Ygsytq+R995EJ5PZlD4Cu56sWa8InXySaViRzw9apusqsOO2bQP+SbYzAhR0pFKoB+43lYy8rWban9JSuXnA==}
    engines: {node: '>= 0.4'}

  debug@3.2.7:
    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.3.5:
    resolution: {integrity: sha512-pt0bNEmneDIvdL1Xsd9oDQ/wrQRkXDT4AUWlNZNPKvW5x/jyO9VFXkJUP07vQ2upmw5PlaITaPKc31jK13V+jg==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  dedent@0.7.0:
    resolution: {integrity: sha512-Q6fKUPqnAHAyhiUgFU7BUzLiv0kd8saH9al7tnu5Q/okj6dnupxyTgFIBjVzJATdfIAm9NAsvXNzjaKa+bxVyA==}

  dedent@1.5.3:
    resolution: {integrity: sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ==}
    peerDependencies:
      babel-plugin-macros: ^3.1.0
    peerDependenciesMeta:
      babel-plugin-macros:
        optional: true

  deep-eql@4.1.4:
    resolution: {integrity: sha512-SUwdGfqdKOwxCPeVYjwSyRpJ7Z+fhpwIAtmCUdZIWZ/YP5R9WAsyuSgpLVDi9bjWoN2LXHNss/dk3urXtdQxGg==}
    engines: {node: '>=6'}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  deepmerge@4.3.1:
    resolution: {integrity: sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==}
    engines: {node: '>=0.10.0'}

  defaults@1.0.4:
    resolution: {integrity: sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  detect-file@1.0.0:
    resolution: {integrity: sha512-DtCOLG98P007x7wiiOmfI0fi3eIKyWiLTGJ2MDnVi/E04lWGbf+JzrRHMm0rgIIZJGtHpKpbVgLWHrv8xXpc3Q==}
    engines: {node: '>=0.10.0'}

  detect-indent@6.1.0:
    resolution: {integrity: sha512-reYkTUJAZb9gUuZ2RvVCNhVHdg62RHnJ7WJl8ftMi4diZ6NWlciOzQN88pUhSELEwflJht4oQDv0F0BMlwaYtA==}
    engines: {node: '>=8'}

  detect-newline@3.1.0:
    resolution: {integrity: sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==}
    engines: {node: '>=8'}

  diff-sequences@29.6.3:
    resolution: {integrity: sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  diff@4.0.2:
    resolution: {integrity: sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==}
    engines: {node: '>=0.3.1'}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  discontinuous-range@1.0.0:
    resolution: {integrity: sha512-c68LpLbO+7kP/b1Hr1qs8/BJ09F5khZGTxqxZuhzxpmwJKOgRFHJWIb9/KmqnqHhLdO55aOxFH/EGBvUQbL/RQ==}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  doctrine@3.0.0:
    resolution: {integrity: sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==}
    engines: {node: '>=6.0.0'}

  dotenv@16.4.5:
    resolution: {integrity: sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==}
    engines: {node: '>=12'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  electron-to-chromium@1.4.825:
    resolution: {integrity: sha512-OCcF+LwdgFGcsYPYC5keEEFC2XT0gBhrYbeGzHCx7i9qRFbzO/AqTmc/C/1xNhJj+JA7rzlN7mpBuStshh96Cg==}

  elliptic@6.5.5:
    resolution: {integrity: sha512-7EjbcmUm17NQFu4Pmgmq2olYMj8nwMnpcddByChSUjArp8F5DQWcIcpriwO4ZToLNAJig0yiyjswfyGNje/ixw==}

  emittery@0.13.1:
    resolution: {integrity: sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==}
    engines: {node: '>=12'}

  emoji-regex@10.3.0:
    resolution: {integrity: sha512-QpLs9D9v9kArv4lfDEgg1X/gN5XLnf/A6l9cs8SPZLRZR3ZkY9+kwIQTxm+fsSej5UMYGE8fdoaZVIBlqG0XTw==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  env-paths@2.2.1:
    resolution: {integrity: sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==}
    engines: {node: '>=6'}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  es-abstract@1.23.3:
    resolution: {integrity: sha512-e+HfNH61Bj1X9/jLc5v1owaLYuHdeHHSQlkhCBiTK8rBvKaULl/beGMxwrMXjpYrv4pz22BlY570vVePA2ho4A==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.0:
    resolution: {integrity: sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-object-atoms@1.0.0:
    resolution: {integrity: sha512-MZ4iQ6JwHOBQjahnjwaC1ZtIBH+2ohjamzAO3oaHcXYup7qxjF2fixyH+Q71voWHeOkI2q/TnJao/KfXYIZWbw==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.0.3:
    resolution: {integrity: sha512-3T8uNMC3OQTHkFUsFq8r/BwAXLHvU/9O9mE0fBc/MY5iq/8H7ncvO947LmYA6ldWw9Uh8Yhf25zu6n7nML5QWQ==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.0.2:
    resolution: {integrity: sha512-J3yBRXCzDu4ULnQwxyToo/OjdMx6akgVC7K6few0a7F/0wLtmKKN7I73AH5T2836UuXRqN7Qg+IIUw/+YJksRw==}

  es-to-primitive@1.2.1:
    resolution: {integrity: sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==}
    engines: {node: '>= 0.4'}

  esbuild@0.21.5:
    resolution: {integrity: sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==}
    engines: {node: '>=12'}
    hasBin: true

  escalade@3.1.2:
    resolution: {integrity: sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==}
    engines: {node: '>=6'}

  escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}

  escape-string-regexp@2.0.0:
    resolution: {integrity: sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==}
    engines: {node: '>=8'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-airbnb-base@15.0.0:
    resolution: {integrity: sha512-xaX3z4ZZIcFLvh2oUNvcX5oEofXda7giYmuplVxoOg5A7EXJMrUyqRgR+mhDhPK8LZ4PttFOBvCYDbX3sUoUig==}
    engines: {node: ^10.12.0 || >=12.0.0}
    peerDependencies:
      eslint: ^7.32.0 || ^8.2.0
      eslint-plugin-import: ^2.25.2

  eslint-config-prettier@9.1.0:
    resolution: {integrity: sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==}
    hasBin: true
    peerDependencies:
      eslint: '>=7.0.0'

  eslint-import-resolver-node@0.3.9:
    resolution: {integrity: sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==}

  eslint-module-utils@2.8.1:
    resolution: {integrity: sha512-rXDXR3h7cs7dy9RNpUlQf80nX31XWJEyGq1tRMo+6GsO5VmTe4UTwtmonAD4ZkAsrfMVDA2wlGJ3790Ys+D49Q==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: '*'
      eslint-import-resolver-node: '*'
      eslint-import-resolver-typescript: '*'
      eslint-import-resolver-webpack: '*'
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true
      eslint:
        optional: true
      eslint-import-resolver-node:
        optional: true
      eslint-import-resolver-typescript:
        optional: true
      eslint-import-resolver-webpack:
        optional: true

  eslint-plugin-import@2.29.1:
    resolution: {integrity: sha512-BbPC0cuExzhiMo4Ff1BTVwHpjjv28C5R+btTOGaCRC7UEz801up0JadwkeSk5Ued6TG34uaczuVuH6qyy5YUxw==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: ^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true

  eslint-plugin-jest@28.6.0:
    resolution: {integrity: sha512-YG28E1/MIKwnz+e2H7VwYPzHUYU4aMa19w0yGcwXnnmJH6EfgHahTJ2un3IyraUxNfnz/KUhJAFXNNwWPo12tg==}
    engines: {node: ^16.10.0 || ^18.12.0 || >=20.0.0}
    peerDependencies:
      '@typescript-eslint/eslint-plugin': ^6.0.0 || ^7.0.0
      eslint: ^7.0.0 || ^8.0.0 || ^9.0.0
      jest: '*'
    peerDependenciesMeta:
      '@typescript-eslint/eslint-plugin':
        optional: true
      jest:
        optional: true

  eslint-plugin-prettier@5.1.3:
    resolution: {integrity: sha512-C9GCVAs4Eq7ZC/XFQHITLiHJxQngdtraXaM+LoUFoFp/lHNl2Zn8f3WQbe9HvTBBQ9YnKFB0/2Ajdqwo5D1EAw==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      '@types/eslint': '>=8.0.0'
      eslint: '>=8.0.0'
      eslint-config-prettier: '*'
      prettier: '>=3.0.0'
    peerDependenciesMeta:
      '@types/eslint':
        optional: true
      eslint-config-prettier:
        optional: true

  eslint-scope@7.2.2:
    resolution: {integrity: sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint@8.57.0:
    resolution: {integrity: sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    hasBin: true

  espree@9.6.1:
    resolution: {integrity: sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  esprima@4.0.1:
    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
    engines: {node: '>=4'}
    hasBin: true

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-walker@3.0.3:
    resolution: {integrity: sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  eventemitter3@5.0.1:
    resolution: {integrity: sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==}

  execa@5.1.1:
    resolution: {integrity: sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==}
    engines: {node: '>=10'}

  execa@8.0.1:
    resolution: {integrity: sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==}
    engines: {node: '>=16.17'}

  exit@0.1.2:
    resolution: {integrity: sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==}
    engines: {node: '>= 0.8.0'}

  expand-tilde@2.0.2:
    resolution: {integrity: sha512-A5EmesHW6rfnZ9ysHQjPdJRni0SRar0tjtG5MNtm9n5TUvsYU8oozprtRD4AqHxcZWWlVuAmQo2nWKfN9oyjTw==}
    engines: {node: '>=0.10.0'}

  expect@29.7.0:
    resolution: {integrity: sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  external-editor@3.1.0:
    resolution: {integrity: sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==}
    engines: {node: '>=4'}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-diff@1.3.0:
    resolution: {integrity: sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}

  fb-watchman@2.0.2:
    resolution: {integrity: sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==}

  figures@3.2.0:
    resolution: {integrity: sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==}
    engines: {node: '>=8'}

  file-entry-cache@6.0.1:
    resolution: {integrity: sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==}
    engines: {node: ^10.12.0 || >=12.0.0}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-node-modules@2.1.3:
    resolution: {integrity: sha512-UC2I2+nx1ZuOBclWVNdcnbDR5dlrOdVb7xNjmT/lHE+LsgztWks3dG7boJ37yTS/venXw84B/mAW9uHVoC5QRg==}

  find-root@1.1.0:
    resolution: {integrity: sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==}

  find-up@4.1.0:
    resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  findup-sync@4.0.0:
    resolution: {integrity: sha512-6jvvn/12IC4quLBL1KNokxC7wWTvYncaVUYSoxWw7YykPLuRrnv4qdHcSOywOI5RpkOVGeQRtWM8/q+G6W6qfQ==}
    engines: {node: '>= 8'}

  flat-cache@3.2.0:
    resolution: {integrity: sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==}
    engines: {node: ^10.12.0 || >=12.0.0}

  flatted@3.3.1:
    resolution: {integrity: sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==}

  follow-redirects@1.15.6:
    resolution: {integrity: sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.3:
    resolution: {integrity: sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==}

  foreground-child@3.2.1:
    resolution: {integrity: sha512-PXUUyLqrR2XCWICfv6ukppP96sdFwWbNEnfEMt7jNsISjMsvaLNinAHNDYyvkyU+SZG2BTSbT5NjG+vZslfGTA==}
    engines: {node: '>=14'}

  form-data@4.0.0:
    resolution: {integrity: sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==}
    engines: {node: '>= 6'}

  fs-extra@9.1.0:
    resolution: {integrity: sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==}
    engines: {node: '>=10'}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.6:
    resolution: {integrity: sha512-Z5kx79swU5P27WEayXM1tBi5Ze/lbIyiNgU3qyXUOf9b2rgXYyF9Dy9Cx+IQv/Lc8WCG6L82zwUPpSS9hGehIg==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-caller-file@2.0.5:
    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
    engines: {node: 6.* || 8.* || >= 10.*}

  get-east-asian-width@1.2.0:
    resolution: {integrity: sha512-2nk+7SIVb14QrgXFHcm84tD4bKQz0RxPuMT8Ag5KPOq7J5fEmAg0UbXdTOSHqNuHSU28k55qnceesxXRZGzKWA==}
    engines: {node: '>=18'}

  get-func-name@2.0.2:
    resolution: {integrity: sha512-8vXOvuE167CtIc3OyItco7N/dpRtBbYOsPsXCz7X/PMnlGjYjSGuZJgM1Y7mmew7BKf9BqvLX2tnOVy1BBUsxQ==}

  get-intrinsic@1.2.4:
    resolution: {integrity: sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==}
    engines: {node: '>= 0.4'}

  get-package-type@0.1.0:
    resolution: {integrity: sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==}
    engines: {node: '>=8.0.0'}

  get-stream@6.0.1:
    resolution: {integrity: sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==}
    engines: {node: '>=10'}

  get-stream@8.0.1:
    resolution: {integrity: sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==}
    engines: {node: '>=16'}

  get-symbol-description@1.0.2:
    resolution: {integrity: sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==}
    engines: {node: '>= 0.4'}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  global-directory@4.0.1:
    resolution: {integrity: sha512-wHTUcDUoZ1H5/0iVqEudYW4/kAlN5cZ3j/bXn0Dpbizl9iaUVeWSHqiOjsgk6OW2bkLclbBjzewBz6weQ1zA2Q==}
    engines: {node: '>=18'}

  global-modules@1.0.0:
    resolution: {integrity: sha512-sKzpEkf11GpOFuw0Zzjzmt4B4UZwjOcG757PPvrfhxcLFbq0wpsgpOqxpxtxFiCG4DtG93M6XRVbF2oGdev7bg==}
    engines: {node: '>=0.10.0'}

  global-prefix@1.0.2:
    resolution: {integrity: sha512-5lsx1NUDHtSjfg0eHlmYvZKv8/nVqX4ckFbM+FrGcQ+04KWcWFo9P5MxPZYSzUvyzmdTbI7Eix8Q4IbELDqzKg==}
    engines: {node: '>=0.10.0'}

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  globals@13.24.0:
    resolution: {integrity: sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==}
    engines: {node: '>=8'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  gopd@1.0.1:
    resolution: {integrity: sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-bigints@1.0.2:
    resolution: {integrity: sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==}

  has-flag@3.0.0:
    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
    engines: {node: '>=4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.0.3:
    resolution: {integrity: sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==}
    engines: {node: '>= 0.4'}

  has-symbols@1.0.3:
    resolution: {integrity: sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hash.js@1.1.7:
    resolution: {integrity: sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hmac-drbg@1.0.1:
    resolution: {integrity: sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==}

  homedir-polyfill@1.0.3:
    resolution: {integrity: sha512-eSmmWE5bZTK2Nou4g0AI3zZ9rswp7GRKoKXS1BLUkvPviOqs4YTN1djQIqrXy9k5gEtdLPy86JjRwsNM9tnDcA==}
    engines: {node: '>=0.10.0'}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  human-signals@2.1.0:
    resolution: {integrity: sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==}
    engines: {node: '>=10.17.0'}

  human-signals@5.0.0:
    resolution: {integrity: sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==}
    engines: {node: '>=16.17.0'}

  husky@9.0.11:
    resolution: {integrity: sha512-AB6lFlbwwyIqMdHYhwPe+kjOC3Oc5P3nThEoW/AaO2BX3vJDjWPFxYLxokUZOo6RNX20He3AaT8sESs9NJcmEw==}
    engines: {node: '>=18'}
    hasBin: true

  iconv-lite@0.4.24:
    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}
    engines: {node: '>=0.10.0'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.1:
    resolution: {integrity: sha512-5Fytz/IraMjqpwfd34ke28PTVMjZjJG2MPn5t7OE4eUCUNf8BAa7b5WUS9/Qvr6mwOQS7Mk6vdsMno5he+T8Xw==}
    engines: {node: '>= 4'}

  import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}

  import-local@3.1.0:
    resolution: {integrity: sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==}
    engines: {node: '>=8'}
    hasBin: true

  import-meta-resolve@4.1.0:
    resolution: {integrity: sha512-I6fiaX09Xivtk+THaMfAwnA3MVA5Big1WHF1Dfx9hFuvNIWpXnorlkzhcQf6ehrqQiiZECRt1poOAkPmer3ruw==}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ini@1.3.8:
    resolution: {integrity: sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==}

  ini@4.1.1:
    resolution: {integrity: sha512-QQnnxNyfvmHFIsj7gkPcYymR8Jdw/o7mp5ZFihxn6h8Ci6fh3Dx4E1gPjpQEpIuPo9XVNY/ZUwh4BPMjGyL01g==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  inquirer@8.2.5:
    resolution: {integrity: sha512-QAgPDQMEgrDssk1XiwwHoOGYF9BAbUcc1+j+FhEvaOt8/cKRqyLn0U5qA6F74fGhTMGxf92pOvPBeh29jQJDTQ==}
    engines: {node: '>=12.0.0'}

  internal-slot@1.0.7:
    resolution: {integrity: sha512-NGnrKwXzSms2qUUih/ILZ5JBqNTSa1+ZmP6flaIp6KmSElgE9qdndzS3cqjrDovwFdmwsGsLdeFgB6suw+1e9g==}
    engines: {node: '>= 0.4'}

  is-array-buffer@3.0.4:
    resolution: {integrity: sha512-wcjaerHw0ydZwfhiKbXJWLDY8A7yV7KhjQOpb83hGgGfId/aQa4TOvwyzn2PuswW2gPCYEL/nEAiSVpdOj1lXw==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-bigint@1.0.4:
    resolution: {integrity: sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-boolean-object@1.1.2:
    resolution: {integrity: sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==}
    engines: {node: '>= 0.4'}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.14.0:
    resolution: {integrity: sha512-a5dFJih5ZLYlRtDc0dZWP7RiKr6xIKzmn/oAYCDvdLThadVgyJwlaoQPmRtMSpz+rk0OGAgIu+TcM9HUF0fk1A==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.1:
    resolution: {integrity: sha512-AHkaJrsUVW6wq6JS8y3JnM/GJF/9cf+k20+iDzlSaJrinEo5+7vRiteOSwBhHRiAyQATN1AmY4hwzxJKPmYf+w==}
    engines: {node: '>= 0.4'}

  is-date-object@1.0.5:
    resolution: {integrity: sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-fullwidth-code-point@4.0.0:
    resolution: {integrity: sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==}
    engines: {node: '>=12'}

  is-fullwidth-code-point@5.0.0:
    resolution: {integrity: sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==}
    engines: {node: '>=18'}

  is-generator-fn@2.1.0:
    resolution: {integrity: sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==}
    engines: {node: '>=6'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-interactive@1.0.0:
    resolution: {integrity: sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==}
    engines: {node: '>=8'}

  is-negative-zero@2.0.3:
    resolution: {integrity: sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==}
    engines: {node: '>= 0.4'}

  is-number-object@1.0.7:
    resolution: {integrity: sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  is-regex@1.1.4:
    resolution: {integrity: sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.3:
    resolution: {integrity: sha512-nA2hv5XIhLR3uVzDDfCIknerhx8XUKnstuOERPNNIinXG7v9u+ohXF67vxm4TPTEPU6lm61ZkwP3c9PCB97rhg==}
    engines: {node: '>= 0.4'}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-stream@3.0.0:
    resolution: {integrity: sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  is-string@1.0.7:
    resolution: {integrity: sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==}
    engines: {node: '>= 0.4'}

  is-symbol@1.0.4:
    resolution: {integrity: sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.13:
    resolution: {integrity: sha512-uZ25/bUAlUY5fR4OKT4rZQEBrzQWYV9ZJYGGsUmEJ6thodVJ1HX64ePQ6Z0qPWP+m+Uq6e9UugrE38jeYsDSMw==}
    engines: {node: '>= 0.4'}

  is-unicode-supported@0.1.0:
    resolution: {integrity: sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==}
    engines: {node: '>=10'}

  is-utf8@0.2.1:
    resolution: {integrity: sha512-rMYPYvCzsXywIsldgLaSoPlw5PfoB/ssr7hY4pLfcodrA5M/eArza1a9VmTiNIBNMjOGr1Ow9mTyU2o69U6U9Q==}

  is-weakref@1.0.2:
    resolution: {integrity: sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==}

  is-windows@1.0.2:
    resolution: {integrity: sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==}
    engines: {node: '>=0.10.0'}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  isobject@2.1.0:
    resolution: {integrity: sha512-+OUdGJlgjOBZDfxnDjYYG6zp487z0JGNQq3cYQYg5f5hKR+syHMsaztzGeml/4kGG55CSpKSpWTY+jYGgsHLgA==}
    engines: {node: '>=0.10.0'}

  istanbul-lib-coverage@3.2.2:
    resolution: {integrity: sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@5.2.1:
    resolution: {integrity: sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@6.0.3:
    resolution: {integrity: sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==}
    engines: {node: '>=10'}

  istanbul-lib-report@3.0.1:
    resolution: {integrity: sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==}
    engines: {node: '>=10'}

  istanbul-lib-source-maps@4.0.1:
    resolution: {integrity: sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==}
    engines: {node: '>=10'}

  istanbul-reports@3.1.7:
    resolution: {integrity: sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==}
    engines: {node: '>=8'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jest-changed-files@29.7.0:
    resolution: {integrity: sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-circus@29.7.0:
    resolution: {integrity: sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-cli@29.7.0:
    resolution: {integrity: sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  jest-config@29.7.0:
    resolution: {integrity: sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@types/node': '*'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      '@types/node':
        optional: true
      ts-node:
        optional: true

  jest-diff@29.7.0:
    resolution: {integrity: sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-docblock@29.7.0:
    resolution: {integrity: sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-each@29.7.0:
    resolution: {integrity: sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-environment-node@29.7.0:
    resolution: {integrity: sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-get-type@29.6.3:
    resolution: {integrity: sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-haste-map@29.7.0:
    resolution: {integrity: sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-leak-detector@29.7.0:
    resolution: {integrity: sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-matcher-utils@29.7.0:
    resolution: {integrity: sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-message-util@29.7.0:
    resolution: {integrity: sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-mock@29.7.0:
    resolution: {integrity: sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-pnp-resolver@1.2.3:
    resolution: {integrity: sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==}
    engines: {node: '>=6'}
    peerDependencies:
      jest-resolve: '*'
    peerDependenciesMeta:
      jest-resolve:
        optional: true

  jest-regex-util@29.6.3:
    resolution: {integrity: sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve-dependencies@29.7.0:
    resolution: {integrity: sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve@29.7.0:
    resolution: {integrity: sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runner@29.7.0:
    resolution: {integrity: sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runtime@29.7.0:
    resolution: {integrity: sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-snapshot@29.7.0:
    resolution: {integrity: sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-util@29.7.0:
    resolution: {integrity: sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-validate@29.7.0:
    resolution: {integrity: sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-watcher@29.7.0:
    resolution: {integrity: sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-worker@29.7.0:
    resolution: {integrity: sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest@29.7.0:
    resolution: {integrity: sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  jiti@1.21.6:
    resolution: {integrity: sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==}
    hasBin: true

  joycon@3.1.1:
    resolution: {integrity: sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==}
    engines: {node: '>=10'}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-tokens@9.0.0:
    resolution: {integrity: sha512-WriZw1luRMlmV3LGJaR6QOJjWwgLUTf89OwT2lUOyjX2dJGBwgmIkbcz+7WFZjrZM635JOIR517++e/67CP9dQ==}

  js-xxhash@1.0.4:
    resolution: {integrity: sha512-S/6Oo7ruxx5k8m4qlMnbpwQdJjRsvvfcIhIk1dA9c5y5GNhYHKYKu9krEK3QgBax6CxJuf4gRL2opgLkdzWIKg==}
    engines: {node: '>=8.0.0'}

  js-yaml@3.14.1:
    resolution: {integrity: sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==}
    hasBin: true

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsbi@4.3.0:
    resolution: {integrity: sha512-SnZNcinB4RIcnEyZqFPdGPVgrg2AcnykiBy0sHVJQKHYeaLUvi3Exj+iaPpLnFVkDPZIV4U0yvgC9/R4uEAZ9g==}

  jsesc@2.5.2:
    resolution: {integrity: sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==}
    engines: {node: '>=4'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema-traverse@1.0.0:
    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@1.0.2:
    resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsonfile@6.1.0:
    resolution: {integrity: sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kleur@3.0.3:
    resolution: {integrity: sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==}
    engines: {node: '>=6'}

  leven@3.1.0:
    resolution: {integrity: sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==}
    engines: {node: '>=6'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lilconfig@3.1.2:
    resolution: {integrity: sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  lint-staged@15.2.7:
    resolution: {integrity: sha512-+FdVbbCZ+yoh7E/RosSdqKJyUM2OEjTciH0TFNkawKgvFp1zbGlEC39RADg+xKBG1R4mhoH2j85myBQZ5wR+lw==}
    engines: {node: '>=18.12.0'}
    hasBin: true

  listr2@8.2.3:
    resolution: {integrity: sha512-Lllokma2mtoniUOS94CcOErHWAug5iu7HOmDrvWgpw8jyQH2fomgB+7lZS4HWZxytUuQwkGOwe49FvwVaA85Xw==}
    engines: {node: '>=18.0.0'}

  load-tsconfig@0.2.5:
    resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  local-pkg@0.5.0:
    resolution: {integrity: sha512-ok6z3qlYyCDS4ZEU27HaU6x/xZa9Whf8jD4ptH5UZTQYZVYeb9bnZ3ojVhiJNLiXK1Hfc0GNbLXcmZ5plLDDBg==}
    engines: {node: '>=14'}

  locate-path@5.0.0:
    resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
    engines: {node: '>=8'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.camelcase@4.3.0:
    resolution: {integrity: sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==}

  lodash.forown@4.4.0:
    resolution: {integrity: sha512-xcpca6BCshoe5SFSrQOoV8FBEbNzcBa6QQYmtv48eEFNzdwQLkHkcWSaBlecHhyHb1BUk1xqFdXoiSLJkt/w5w==}

  lodash.isequal@4.5.0:
    resolution: {integrity: sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==}

  lodash.isplainobject@4.0.6:
    resolution: {integrity: sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==}

  lodash.map@4.6.0:
    resolution: {integrity: sha512-worNHGKLDetmcEYDvh2stPCrrQRkP20E4l0iIS7F8EvzMqBBi7ltvFN5m1HvTf1P7Jk1txKhvFcmYsCr8O2F1Q==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash.mergewith@4.6.2:
    resolution: {integrity: sha512-GK3g5RPZWTRSeLSpgP8Xhra+pnjBC56q9FZYe1d5RN3TJ35dbkGy3YqBSMbyCrlbi+CM9Z3Jk5yTL7RCsqboyQ==}

  lodash.snakecase@4.1.1:
    resolution: {integrity: sha512-QZ1d4xoBHYUeuouhEq3lk3Uq7ldgyFXGBhg04+oRLnIz8o9T65Eh+8YdroUwn846zchkA9yDsDl5CVVaV2nqYw==}

  lodash.sortby@4.7.0:
    resolution: {integrity: sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==}

  lodash.uniq@4.5.0:
    resolution: {integrity: sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  log-symbols@4.1.0:
    resolution: {integrity: sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==}
    engines: {node: '>=10'}

  log-update@6.0.0:
    resolution: {integrity: sha512-niTvB4gqvtof056rRIrTZvjNYE4rCUzO6X/X+kYjd7WFxXeJ0NwEFnRxX6ehkvv3jTwrXnNdtAak5XYZuIyPFw==}
    engines: {node: '>=18'}

  longest@2.0.1:
    resolution: {integrity: sha512-Ajzxb8CM6WAnFjgiloPsI3bF+WCxcvhdIG3KNA2KN962+tdBsHcuQ4k4qX/EcS/2CRkcc0iAkR956Nib6aXU/Q==}
    engines: {node: '>=0.10.0'}

  loupe@2.3.7:
    resolution: {integrity: sha512-zSMINGVYkdpYSOBmLi0D1Uo7JU9nVdQKrHxC8eYlV+9YKK9WePqAlL7lSlorG/U2Fw1w0hTBmaa/jrQ3UbPHtA==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  magic-string@0.30.11:
    resolution: {integrity: sha512-+Wri9p0QHMy+545hKww7YAu5NyzF8iomPL/RQazugQ9+Ez4Ic3mERMd8ZTX5rfK944j+560ZJi8iAwgak1Ac7A==}

  make-dir@4.0.0:
    resolution: {integrity: sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==}
    engines: {node: '>=10'}

  make-error@1.3.6:
    resolution: {integrity: sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==}

  makeerror@1.0.12:
    resolution: {integrity: sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==}

  map-obj@4.3.0:
    resolution: {integrity: sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ==}
    engines: {node: '>=8'}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  merge@2.1.1:
    resolution: {integrity: sha512-jz+Cfrg9GWOZbQAnDQ4hlVnQky+341Yk5ru8bZSe6sIDTCIg8n9i/u7hSQGSVOF3C7lH6mGtqjkiT9G4wFLL0w==}

  micromatch@4.0.7:
    resolution: {integrity: sha512-LPP/3KorzCwBxfeUuZmaR6bG2kdeHSbe0P2tY3FLRU4vYrjYz5hI4QZwV0njUx3jeuKe67YukQ1LSPZBKDqO/Q==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mimic-fn@2.1.0:
    resolution: {integrity: sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==}
    engines: {node: '>=6'}

  mimic-fn@4.0.0:
    resolution: {integrity: sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==}
    engines: {node: '>=12'}

  minimalistic-assert@1.0.1:
    resolution: {integrity: sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==}

  minimalistic-crypto-utils@1.0.1:
    resolution: {integrity: sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg==}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.7:
    resolution: {integrity: sha512-bzfL1YUZsP41gmu/qjrEk0Q6i2ix/cVeAhbCbqH9u3zYutS1cLg00qhrD0M2MVdCcx4Sc0UpP2eBWo9rotpq6g==}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  mlly@1.7.1:
    resolution: {integrity: sha512-rrVRZRELyQzrIUAVMHxP97kv+G786pHmOKzuFII8zDYahFBS7qnHh2AlYSl1GAHhaMPCz6/oHjVMcfFYgFYHgA==}

  moo@0.5.2:
    resolution: {integrity: sha512-iSAJLHYKnX41mKcJKjqvnAN9sf0LMDTXDEvFv+ffuRR9a1MIuXLjMNL6EsnDHSkKLTWNqQQ5uo61P4EbU4NU+Q==}

  ms@2.1.2:
    resolution: {integrity: sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  mute-stream@0.0.8:
    resolution: {integrity: sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoassert@2.0.0:
    resolution: {integrity: sha512-7vO7n28+aYO4J+8w96AzhmU8G+Y/xpPDJz/se19ICsqj/momRbb9mh9ZUtkoJ5X3nTnPdhEJyc0qnM6yAsHBaA==}

  nanoid@3.3.7:
    resolution: {integrity: sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  nearley@2.20.1:
    resolution: {integrity: sha512-+Mc8UaAebFzgV+KpI5n7DasuuQCHA89dmwm7JXw3TV43ukfNQ9DnBH3Mdb2g/I4Fdxc26pwimBWvjIw0UAILSQ==}
    hasBin: true

  node-int64@0.4.0:
    resolution: {integrity: sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==}

  node-releases@2.0.14:
    resolution: {integrity: sha512-y10wOWt8yZpqXmOgRo77WaHEmhYQYGNA6y421PKsKYWEK8aW+cqAphborZDhqfyKrbZEN92CN1X2KbafY2s7Yw==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  npm-run-path@4.0.1:
    resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
    engines: {node: '>=8'}

  npm-run-path@5.3.0:
    resolution: {integrity: sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-inspect@1.13.2:
    resolution: {integrity: sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.5:
    resolution: {integrity: sha512-byy+U7gp+FVwmyzKPYhW2h5l3crpmGsxl7X2s8y43IgxvG4g3QZ6CffDtsNQy1WsmZpQbO+ybo0AlW7TY6DcBQ==}
    engines: {node: '>= 0.4'}

  object.entries@1.1.8:
    resolution: {integrity: sha512-cmopxi8VwRIAw/fkijJohSfpef5PdN0pMQJN6VC/ZKvn0LIknWD8KtgY6KlQdEc4tIjcQ3HxSMmnvtzIscdaYQ==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.groupby@1.0.3:
    resolution: {integrity: sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.0:
    resolution: {integrity: sha512-yBYjY9QX2hnRmZHAjG/f13MzmBzxzYgQhFrke06TTyKY5zSTEqkOeukBzIdVA3j3ulu8Qa3MbVFShV7T2RmGtQ==}
    engines: {node: '>= 0.4'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  onetime@5.1.2:
    resolution: {integrity: sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==}
    engines: {node: '>=6'}

  onetime@6.0.0:
    resolution: {integrity: sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==}
    engines: {node: '>=12'}

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  ora@5.4.1:
    resolution: {integrity: sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==}
    engines: {node: '>=10'}

  os-tmpdir@1.0.2:
    resolution: {integrity: sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==}
    engines: {node: '>=0.10.0'}

  p-limit@2.3.0:
    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
    engines: {node: '>=6'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-limit@5.0.0:
    resolution: {integrity: sha512-/Eaoq+QyLSiXQ4lyYV23f14mZRQcXnxfHrN0vCai+ak9G0pp9iEQukIIZq5NccEvwRB8PUnZT0KsOoDCINS1qQ==}
    engines: {node: '>=18'}

  p-locate@4.1.0:
    resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
    engines: {node: '>=8'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-try@2.2.0:
    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
    engines: {node: '>=6'}

  package-json-from-dist@1.0.0:
    resolution: {integrity: sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  parse-passwd@1.0.0:
    resolution: {integrity: sha512-1Y1A//QUXEZK7YKz+rD9WydcE1+EuPr6ZBgKecAB8tmoW6UFv0NREVJe1p+jRxtThkcbbKkfwIbWJe/IeE6m2Q==}
    engines: {node: '>=0.10.0'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-key@4.0.0:
    resolution: {integrity: sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==}
    engines: {node: '>=12'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  pathe@1.1.2:
    resolution: {integrity: sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==}

  pathval@1.1.1:
    resolution: {integrity: sha512-Dp6zGqpTdETdR63lehJYPeIOqpiNBNtc7BpWSLrOje7UaIsE5aY92r/AunQA7rsXvet3lrJ3JnZX29UPTKXyKQ==}

  picocolors@1.0.1:
    resolution: {integrity: sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pidtree@0.6.0:
    resolution: {integrity: sha512-eG2dWTVw5bzqGRztnHExczNxt5VGsE6OwTeCG3fdUf9KBsZzO3R5OIIIzWR+iZA0NtZ+RDVdaoE2dK1cn6jH4g==}
    engines: {node: '>=0.10'}
    hasBin: true

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  pkg-dir@4.2.0:
    resolution: {integrity: sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==}
    engines: {node: '>=8'}

  pkg-types@1.1.3:
    resolution: {integrity: sha512-+JrgthZG6m3ckicaOB74TwQ+tBWsFl3qVQg7mN8ulwSOElJ7gBhKzj2VkCPnZ4NlF6kEquYU+RIYNVAvzd54UA==}

  possible-typed-array-names@1.0.0:
    resolution: {integrity: sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==}
    engines: {node: '>= 0.4'}

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss@8.4.40:
    resolution: {integrity: sha512-YF2kKIUzAofPMpfH6hOi2cGnv/HrUlfucspc7pDyvv7kGdqXrfj8SCl/t8owkEgKEuu8ZcRjSOxFxVLqwChZ2Q==}
    engines: {node: ^10 || ^12 || >=14}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier-linter-helpers@1.0.0:
    resolution: {integrity: sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==}
    engines: {node: '>=6.0.0'}

  prettier@3.3.2:
    resolution: {integrity: sha512-rAVeHYMcv8ATV5d508CFdn+8/pHPpXeIid1DdrPwXnaAdH7cqjVbpJaT5eq4yRAFU/lsbwYwSF/n5iNrdJHPQA==}
    engines: {node: '>=14'}
    hasBin: true

  pretty-format@29.7.0:
    resolution: {integrity: sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  prompts@2.4.2:
    resolution: {integrity: sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==}
    engines: {node: '>= 6'}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  pure-rand@6.1.0:
    resolution: {integrity: sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  quick-lru@5.1.1:
    resolution: {integrity: sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==}
    engines: {node: '>=10'}

  railroad-diagrams@1.0.0:
    resolution: {integrity: sha512-cz93DjNeLY0idrCNOH6PviZGRN9GJhsdm9hpn1YCS879fj4W+x5IFJhhkRZcwVgMmFF7R82UA/7Oh+R8lLZg6A==}

  randexp@0.4.6:
    resolution: {integrity: sha512-80WNmd9DA0tmZrw9qQa62GPPWfuXJknrmVmLcxvq4uZBdYqb1wYoKTmnlGUchvVWe0XiLupYkBoXVOxz3C8DYQ==}
    engines: {node: '>=0.12'}

  react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  regexp.prototype.flags@1.5.2:
    resolution: {integrity: sha512-NcDiDkTLuPR+++OCKB0nWafEmhg/Da8aUPLPMQbK+bxKKCm1/S5he+AqYa4PlMCVBalb4/yxIRub6qkEx5yJbw==}
    engines: {node: '>= 0.4'}

  relative@3.0.2:
    resolution: {integrity: sha512-Q5W2qeYtY9GbiR8z1yHNZ1DGhyjb4AnLEjt8iE6XfcC1QIu+FAtj3HQaO0wH28H1mX6cqNLvAqWhP402dxJGyA==}
    engines: {node: '>= 0.8.0'}

  require-directory@2.1.1:
    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
    engines: {node: '>=0.10.0'}

  require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}

  resolve-cwd@3.0.0:
    resolution: {integrity: sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==}
    engines: {node: '>=8'}

  resolve-dir@1.0.1:
    resolution: {integrity: sha512-R7uiTjECzvOsWSfdM0QKFNBVFcK27aHOUwdvK53BcW8zqnGdYp0Fbj82cy54+2A4P2tFM22J5kRfe1R+lM/1yg==}
    engines: {node: '>=0.10.0'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve.exports@2.0.2:
    resolution: {integrity: sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==}
    engines: {node: '>=10'}

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  restore-cursor@3.1.0:
    resolution: {integrity: sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==}
    engines: {node: '>=8'}

  restore-cursor@4.0.0:
    resolution: {integrity: sha512-I9fPXU9geO9bHOt9pHHOhOkYerIMsmVaWB0rA2AI9ERh/+x/i7MV5HKBNrg+ljO5eoPVgCcnFuRjJ9uH6I/3eg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  ret@0.1.15:
    resolution: {integrity: sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==}
    engines: {node: '>=0.12'}

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rfdc@1.4.1:
    resolution: {integrity: sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==}

  rimraf@3.0.2:
    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}
    deprecated: Rimraf versions prior to v4 are no longer supported
    hasBin: true

  rollup@4.18.1:
    resolution: {integrity: sha512-Elx2UT8lzxxOXMpy5HWQGZqkrQOtrVDDa/bm9l10+U4rQnVzbL/LgZ4NOM1MPIDyHk69W4InuYDF5dzRh4Kw1A==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  run-async@2.4.1:
    resolution: {integrity: sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==}
    engines: {node: '>=0.12.0'}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  rxjs@7.8.1:
    resolution: {integrity: sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==}

  safe-array-concat@1.1.2:
    resolution: {integrity: sha512-vj6RsCsWBCf19jIeHEfkRMw8DPiBb+DMXklQ/1SGDHOMlHdPUkZXFQ2YdplS23zESTijAcurb1aSgJA3AgMu1Q==}
    engines: {node: '>=0.4'}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-regex-test@1.0.3:
    resolution: {integrity: sha512-CdASjNJPvRa7roO6Ra/gLYBTzYzzPyyBXxIMdGW3USQLyjWEls2RgW5UBTXaQVp+OrpeCK3bLem8smtmheoRuw==}
    engines: {node: '>= 0.4'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.6.2:
    resolution: {integrity: sha512-FNAIBWCx9qcRhoHcgcJ0gvU7SN1lYU2ZXuSfl04bSC5OpvDHFyJCjdNHomPXxjQlCBU67YW64PzY7/VIEH7F2w==}
    engines: {node: '>=10'}
    hasBin: true

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel@1.0.6:
    resolution: {integrity: sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==}
    engines: {node: '>= 0.4'}

  siginfo@2.0.0:
    resolution: {integrity: sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  sisteransi@1.0.5:
    resolution: {integrity: sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  slice-ansi@5.0.0:
    resolution: {integrity: sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==}
    engines: {node: '>=12'}

  slice-ansi@7.1.0:
    resolution: {integrity: sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==}
    engines: {node: '>=18'}

  source-map-js@1.2.0:
    resolution: {integrity: sha512-itJW8lvSA0TXEphiRoawsCksnlf8SyvmFzIhltqAHluXd88pkCd+cXJVHTDwdCr0IzwptSm035IHQktUu1QUMg==}
    engines: {node: '>=0.10.0'}

  source-map-support@0.5.13:
    resolution: {integrity: sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  source-map@0.8.0-beta.0:
    resolution: {integrity: sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==}
    engines: {node: '>= 8'}

  sprintf-js@1.0.3:
    resolution: {integrity: sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==}

  stack-utils@2.0.6:
    resolution: {integrity: sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==}
    engines: {node: '>=10'}

  stackback@0.0.2:
    resolution: {integrity: sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==}

  std-env@3.7.0:
    resolution: {integrity: sha512-JPbdCEQLj1w5GilpiHAx3qJvFndqybBysA3qUOnznweH4QbNYUsW/ea8QzSrnh0vNsezMMw5bcVool8lM0gwzg==}

  string-argv@0.3.2:
    resolution: {integrity: sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==}
    engines: {node: '>=0.6.19'}

  string-length@4.0.2:
    resolution: {integrity: sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==}
    engines: {node: '>=10'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string-width@7.2.0:
    resolution: {integrity: sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==}
    engines: {node: '>=18'}

  string.prototype.trim@1.2.9:
    resolution: {integrity: sha512-klHuCNxiMZ8MlsOihJhJEBJAiMVqU3Z2nEXWfWnIqjN0gEFS9J9+IxKozWWtQGcgoa1WUZzLjKPTr4ZHNFTFxw==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.8:
    resolution: {integrity: sha512-p73uL5VCHCO2BZZ6krwwQE3kCzM7NKmis8S//xEC6fQonchbum4eP6kR4DLEjQFO3Wnj3Fuo8NM0kOSjVdHjZQ==}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-bom@4.0.0:
    resolution: {integrity: sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==}
    engines: {node: '>=8'}

  strip-final-newline@2.0.0:
    resolution: {integrity: sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==}
    engines: {node: '>=6'}

  strip-final-newline@3.0.0:
    resolution: {integrity: sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==}
    engines: {node: '>=12'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  strip-literal@2.1.0:
    resolution: {integrity: sha512-Op+UycaUt/8FbN/Z2TWPBLge3jWrP3xj10f3fnYxf052bKuS3EKs1ZQcVGjnEMdsNVAM+plXRdmjrZ/KgG3Skw==}

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@5.5.0:
    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}
    engines: {node: '>=4'}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  synckit@0.8.8:
    resolution: {integrity: sha512-HwOKAP7Wc5aRGYdKH+dw0PRRpbO841v2DENBtjnR5HFWoiNByAl7vrx3p0G/rCyYXQsrxqtX48TImFtPcIHSpQ==}
    engines: {node: ^14.18.0 || >=16.0.0}

  test-exclude@6.0.0:
    resolution: {integrity: sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==}
    engines: {node: '>=8'}

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  through@2.3.8:
    resolution: {integrity: sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==}

  tinybench@2.9.0:
    resolution: {integrity: sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==}

  tinypool@0.8.4:
    resolution: {integrity: sha512-i11VH5gS6IFeLY3gMBQ00/MmLncVP7JLXOw1vlgkytLmJK7QnEr7NXf0LBdxfmNPAeyetukOk0bOYrJrFGjYJQ==}
    engines: {node: '>=14.0.0'}

  tinyspy@2.2.1:
    resolution: {integrity: sha512-KYad6Vy5VDWV4GH3fjpseMQ/XU2BhIYP7Vzd0LG44qRWm/Yt2WCOTicFdvmgo6gWaqooMQCawTtILVQJupKu7A==}
    engines: {node: '>=14.0.0'}

  tmp@0.0.33:
    resolution: {integrity: sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==}
    engines: {node: '>=0.6.0'}

  tmpl@1.0.5:
    resolution: {integrity: sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==}

  to-fast-properties@2.0.0:
    resolution: {integrity: sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==}
    engines: {node: '>=4'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  tr46@1.0.1:
    resolution: {integrity: sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==}

  tree-kill@1.2.2:
    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
    hasBin: true

  ts-api-utils@1.3.0:
    resolution: {integrity: sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  ts-node@10.9.2:
    resolution: {integrity: sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==}
    hasBin: true
    peerDependencies:
      '@swc/core': '>=1.2.50'
      '@swc/wasm': '>=1.2.50'
      '@types/node': '*'
      typescript: '>=2.7'
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      '@swc/wasm':
        optional: true

  tsconfig-paths@3.15.0:
    resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}

  tslib@2.6.3:
    resolution: {integrity: sha512-xNvxJEOUiWPGhUuUdQgAJPKOOJfGnIyKySOc09XkKsgdUV/3E2zvwZYdejjmRgPCgcym1juLH3226yA7sEFJKQ==}

  tsup@8.1.0:
    resolution: {integrity: sha512-UFdfCAXukax+U6KzeTNO2kAARHcWxmKsnvSPXUcfA1D+kU05XDccCrkffCQpFaWDsZfV0jMyTsxU39VfCp6EOg==}
    engines: {node: '>=18'}
    hasBin: true
    peerDependencies:
      '@microsoft/api-extractor': ^7.36.0
      '@swc/core': ^1
      postcss: ^8.4.12
      typescript: '>=4.5.0'
    peerDependenciesMeta:
      '@microsoft/api-extractor':
        optional: true
      '@swc/core':
        optional: true
      postcss:
        optional: true
      typescript:
        optional: true

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-detect@4.0.8:
    resolution: {integrity: sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==}
    engines: {node: '>=4'}

  type-detect@4.1.0:
    resolution: {integrity: sha512-Acylog8/luQ8L7il+geoSxhEkazvkslg7PSNKOX59mbB9cOveP5aq9h74Y7YU8yDpJwetzQQrfIwtf4Wp4LKcw==}
    engines: {node: '>=4'}

  type-fest@0.20.2:
    resolution: {integrity: sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==}
    engines: {node: '>=10'}

  type-fest@0.21.3:
    resolution: {integrity: sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==}
    engines: {node: '>=10'}

  type-fest@1.4.0:
    resolution: {integrity: sha512-yGSza74xk0UG8k+pLh5oeoYirvIiWo5t0/o3zHHAO2tRDiZcxWP7fywNlXhqb6/r6sWvwi+RsyQMWhVLe4BVuA==}
    engines: {node: '>=10'}

  typed-array-buffer@1.0.2:
    resolution: {integrity: sha512-gEymJYKZtKXzzBzM4jqa9w6Q1Jjm7x2d+sh19AdsD4wqnMPDYyvwpsIc2Q/835kHuo3BEQ7CjelGhfTsoBb2MQ==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.1:
    resolution: {integrity: sha512-3iMJ9q0ao7WE9tWcaYKIptkNBuOIcZCCT0d4MRvuuH88fEoEH62IuQe0OtraD3ebQEoTRk8XCBoknUNc1Y67pw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.2:
    resolution: {integrity: sha512-Ous0vodHa56FviZucS2E63zkgtgrACj7omjwd/8lTEMEPFFyjfixMZ1ZXenpgCFBBt4EC1J2XsyVS2gkG0eTFA==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.6:
    resolution: {integrity: sha512-/OxDN6OtAk5KBpGb28T+HZc2M+ADtvRxXrKKbUwtsLgdoxgX13hyy7ek6bFRl5+aBs2yZzB0c4CnQfAtVypW/g==}
    engines: {node: '>= 0.4'}

  typeforce@1.18.0:
    resolution: {integrity: sha512-7uc1O8h1M1g0rArakJdf0uLRSSgFcYexrVoKo+bzJd32gd4gDy2L/Z+8/FjPnU9ydY3pEnVPtr9FyscYY60K1g==}

  typescript@5.5.3:
    resolution: {integrity: sha512-/hreyEujaB0w76zKo6717l3L0o/qEUtRgdvUBvlkhoWeOVMjMuHNHk0BRBzikzuGDqNmPQbg5ifMEqsHLiIUcQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  ufo@1.5.4:
    resolution: {integrity: sha512-UsUk3byDzKd04EyoZ7U4DOlxQaD14JUKQl6/P7wiX4FNvUfm3XL246n9W5AmqwW5RSFJ27NAuM0iLscAOYUiGQ==}

  unbox-primitive@1.0.2:
    resolution: {integrity: sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==}

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  universalify@2.0.1:
    resolution: {integrity: sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==}
    engines: {node: '>= 10.0.0'}

  update-browserslist-db@1.1.0:
    resolution: {integrity: sha512-EdRAaAyk2cUE1wOf2DkEhzxqOQvFOoRJFNS6NeyJ01Gp2beMRpBAINjM2iDXE3KCuKhwnvHIQCJm6ThL2Z+HzQ==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  v8-compile-cache-lib@3.0.1:
    resolution: {integrity: sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==}

  v8-to-istanbul@9.3.0:
    resolution: {integrity: sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==}
    engines: {node: '>=10.12.0'}

  varuint-bitcoin@1.1.2:
    resolution: {integrity: sha512-4EVb+w4rx+YfVM32HQX42AbbT7/1f5zwAYhIujKXKk8NQK+JfRVl3pqT3hjNn/L+RstigmGGKVwHA/P0wgITZw==}

  vite-node@1.6.0:
    resolution: {integrity: sha512-de6HJgzC+TFzOu0NTC4RAIsyf/DY/ibWDYQUcuEA84EMHhcefTUGkjFHKKEJhQN4A+6I0u++kr3l36ZF2d7XRw==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true

  vite@5.3.5:
    resolution: {integrity: sha512-MdjglKR6AQXQb9JGiS7Rc2wC6uMjcm7Go/NHNO63EwiJXfuk9PgqiP/n5IDJCziMkfw9n4Ubp7lttNwz+8ZVKA==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^18.0.0 || >=20.0.0
      less: '*'
      lightningcss: ^1.21.0
      sass: '*'
      stylus: '*'
      sugarss: '*'
      terser: ^5.4.0
    peerDependenciesMeta:
      '@types/node':
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true

  vitest@1.6.0:
    resolution: {integrity: sha512-H5r/dN06swuFnzNFhq/dnz37bPXnq8xB2xB5JOVk8K09rUtoeNN+LHWkoQ0A/i3hvbUKKcCei9KpbxqHMLhLLA==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@edge-runtime/vm': '*'
      '@types/node': ^18.0.0 || >=20.0.0
      '@vitest/browser': 1.6.0
      '@vitest/ui': 1.6.0
      happy-dom: '*'
      jsdom: '*'
    peerDependenciesMeta:
      '@edge-runtime/vm':
        optional: true
      '@types/node':
        optional: true
      '@vitest/browser':
        optional: true
      '@vitest/ui':
        optional: true
      happy-dom:
        optional: true
      jsdom:
        optional: true

  walker@1.0.8:
    resolution: {integrity: sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==}

  wcwidth@1.0.1:
    resolution: {integrity: sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==}

  webidl-conversions@4.0.2:
    resolution: {integrity: sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==}

  whatwg-url@7.1.0:
    resolution: {integrity: sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==}

  which-boxed-primitive@1.0.2:
    resolution: {integrity: sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==}

  which-typed-array@1.1.15:
    resolution: {integrity: sha512-oV0jmFtUky6CXfkqehVvBP/LSWJ2sy4vWMioiENyJLePrBO/yKyV9OyJySfAKosh+RYkIl5zJCNZ8/4JncrpdA==}
    engines: {node: '>= 0.4'}

  which@1.3.1:
    resolution: {integrity: sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==}
    hasBin: true

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  why-is-node-running@2.3.0:
    resolution: {integrity: sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==}
    engines: {node: '>=8'}
    hasBin: true

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrap-ansi@9.0.0:
    resolution: {integrity: sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==}
    engines: {node: '>=18'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  write-file-atomic@4.0.2:
    resolution: {integrity: sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==}
    engines: {node: ^12.13.0 || ^14.15.0 || >=16.0.0}

  y18n@5.0.8:
    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
    engines: {node: '>=10'}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yaml@2.4.5:
    resolution: {integrity: sha512-aBx2bnqDzVOyNKfsysjA2ms5ZlnjSAW2eG3/L5G/CSujfjLJTJsEw1bGw8kCf04KodQWk1pxlGnZ56CRxiawmg==}
    engines: {node: '>= 14'}
    hasBin: true

  yargs-parser@21.1.1:
    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
    engines: {node: '>=12'}

  yargs@17.7.2:
    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
    engines: {node: '>=12'}

  yn@3.1.1:
    resolution: {integrity: sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==}
    engines: {node: '>=6'}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  yocto-queue@1.1.1:
    resolution: {integrity: sha512-b4JR1PFR10y1mKjhHY9LaGo6tmrgjit7hxVIeAmyMw3jegXR4dhYqLaQF5zMXZxY7tLpMyJeLjr1C4rLmkVe8g==}
    engines: {node: '>=12.20'}

snapshots:

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25

  '@babel/code-frame@7.24.7':
    dependencies:
      '@babel/highlight': 7.24.7
      picocolors: 1.0.1

  '@babel/compat-data@7.24.7': {}

  '@babel/core@7.24.7':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.24.7
      '@babel/helper-compilation-targets': 7.24.7
      '@babel/helper-module-transforms': 7.24.7(@babel/core@7.24.7)
      '@babel/helpers': 7.24.7
      '@babel/parser': 7.24.7
      '@babel/template': 7.24.7
      '@babel/traverse': 7.24.7
      '@babel/types': 7.24.7
      convert-source-map: 2.0.0
      debug: 4.3.5
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.24.7':
    dependencies:
      '@babel/types': 7.24.7
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 2.5.2

  '@babel/helper-compilation-targets@7.24.7':
    dependencies:
      '@babel/compat-data': 7.24.7
      '@babel/helper-validator-option': 7.24.7
      browserslist: 4.23.2
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-environment-visitor@7.24.7':
    dependencies:
      '@babel/types': 7.24.7

  '@babel/helper-function-name@7.24.7':
    dependencies:
      '@babel/template': 7.24.7
      '@babel/types': 7.24.7

  '@babel/helper-hoist-variables@7.24.7':
    dependencies:
      '@babel/types': 7.24.7

  '@babel/helper-module-imports@7.24.7':
    dependencies:
      '@babel/traverse': 7.24.7
      '@babel/types': 7.24.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-environment-visitor': 7.24.7
      '@babel/helper-module-imports': 7.24.7
      '@babel/helper-simple-access': 7.24.7
      '@babel/helper-split-export-declaration': 7.24.7
      '@babel/helper-validator-identifier': 7.24.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-plugin-utils@7.24.7': {}

  '@babel/helper-simple-access@7.24.7':
    dependencies:
      '@babel/traverse': 7.24.7
      '@babel/types': 7.24.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-split-export-declaration@7.24.7':
    dependencies:
      '@babel/types': 7.24.7

  '@babel/helper-string-parser@7.24.7': {}

  '@babel/helper-validator-identifier@7.24.7': {}

  '@babel/helper-validator-option@7.24.7': {}

  '@babel/helpers@7.24.7':
    dependencies:
      '@babel/template': 7.24.7
      '@babel/types': 7.24.7

  '@babel/highlight@7.24.7':
    dependencies:
      '@babel/helper-validator-identifier': 7.24.7
      chalk: 2.4.2
      js-tokens: 4.0.0
      picocolors: 1.0.1

  '@babel/parser@7.24.7':
    dependencies:
      '@babel/types': 7.24.7

  '@babel/plugin-syntax-async-generators@7.8.4(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-bigint@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-class-properties@7.12.13(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-import-meta@7.10.4(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-json-strings@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-jsx@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-numeric-separator@7.10.4(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-object-rest-spread@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-optional-catch-binding@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-optional-chaining@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-top-level-await@7.14.5(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-typescript@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/template@7.24.7':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/parser': 7.24.7
      '@babel/types': 7.24.7

  '@babel/traverse@7.24.7':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.24.7
      '@babel/helper-environment-visitor': 7.24.7
      '@babel/helper-function-name': 7.24.7
      '@babel/helper-hoist-variables': 7.24.7
      '@babel/helper-split-export-declaration': 7.24.7
      '@babel/parser': 7.24.7
      '@babel/types': 7.24.7
      debug: 4.3.5
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.24.7':
    dependencies:
      '@babel/helper-string-parser': 7.24.7
      '@babel/helper-validator-identifier': 7.24.7
      to-fast-properties: 2.0.0

  '@bcoe/v8-coverage@0.2.3': {}

  '@ckb-lumos/base@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      '@types/blake2b': 2.1.3
      '@types/lodash.isequal': 4.5.8
      blake2b: 2.1.4
      js-xxhash: 1.0.4
      lodash.isequal: 4.5.0

  '@ckb-lumos/bi@0.0.0-canary-66bbbfd-20240805132534':
    dependencies:
      jsbi: 4.3.0

  '@ckb-lumos/bi@0.23.0':
    dependencies:
      jsbi: 4.3.0

  '@ckb-lumos/codec@0.0.0-canary-66bbbfd-20240805132534':
    dependencies:
      '@ckb-lumos/bi': 0.0.0-canary-66bbbfd-20240805132534

  '@ckb-lumos/codec@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0

  '@ckb-lumos/molecule@0.0.0-canary-66bbbfd-20240805132534':
    dependencies:
      '@ckb-lumos/bi': 0.0.0-canary-66bbbfd-20240805132534
      '@ckb-lumos/codec': 0.0.0-canary-66bbbfd-20240805132534
      '@types/moo': 0.5.9
      '@types/nearley': 2.11.5
      glob: 10.4.5
      minimist: 1.2.8
      moo: 0.5.2
      nearley: 2.20.1
      relative: 3.0.2

  '@ckb-lumos/toolkit@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0

  '@commitlint/config-validator@19.0.3':
    dependencies:
      '@commitlint/types': 19.0.3
      ajv: 8.16.0
    optional: true

  '@commitlint/execute-rule@19.0.0':
    optional: true

  '@commitlint/load@19.2.0(@types/node@20.14.10)(typescript@5.5.3)':
    dependencies:
      '@commitlint/config-validator': 19.0.3
      '@commitlint/execute-rule': 19.0.0
      '@commitlint/resolve-extends': 19.1.0
      '@commitlint/types': 19.0.3
      chalk: 5.3.0
      cosmiconfig: 9.0.0(typescript@5.5.3)
      cosmiconfig-typescript-loader: 5.0.0(@types/node@20.14.10)(cosmiconfig@9.0.0(typescript@5.5.3))(typescript@5.5.3)
      lodash.isplainobject: 4.0.6
      lodash.merge: 4.6.2
      lodash.uniq: 4.5.0
    transitivePeerDependencies:
      - '@types/node'
      - typescript
    optional: true

  '@commitlint/resolve-extends@19.1.0':
    dependencies:
      '@commitlint/config-validator': 19.0.3
      '@commitlint/types': 19.0.3
      global-directory: 4.0.1
      import-meta-resolve: 4.1.0
      lodash.mergewith: 4.6.2
      resolve-from: 5.0.0
    optional: true

  '@commitlint/types@19.0.3':
    dependencies:
      '@types/conventional-commits-parser': 5.0.0
      chalk: 5.3.0
    optional: true

  '@cspotcode/source-map-support@0.8.1':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.9

  '@esbuild/aix-ppc64@0.21.5':
    optional: true

  '@esbuild/android-arm64@0.21.5':
    optional: true

  '@esbuild/android-arm@0.21.5':
    optional: true

  '@esbuild/android-x64@0.21.5':
    optional: true

  '@esbuild/darwin-arm64@0.21.5':
    optional: true

  '@esbuild/darwin-x64@0.21.5':
    optional: true

  '@esbuild/freebsd-arm64@0.21.5':
    optional: true

  '@esbuild/freebsd-x64@0.21.5':
    optional: true

  '@esbuild/linux-arm64@0.21.5':
    optional: true

  '@esbuild/linux-arm@0.21.5':
    optional: true

  '@esbuild/linux-ia32@0.21.5':
    optional: true

  '@esbuild/linux-loong64@0.21.5':
    optional: true

  '@esbuild/linux-mips64el@0.21.5':
    optional: true

  '@esbuild/linux-ppc64@0.21.5':
    optional: true

  '@esbuild/linux-riscv64@0.21.5':
    optional: true

  '@esbuild/linux-s390x@0.21.5':
    optional: true

  '@esbuild/linux-x64@0.21.5':
    optional: true

  '@esbuild/netbsd-x64@0.21.5':
    optional: true

  '@esbuild/openbsd-x64@0.21.5':
    optional: true

  '@esbuild/sunos-x64@0.21.5':
    optional: true

  '@esbuild/win32-arm64@0.21.5':
    optional: true

  '@esbuild/win32-ia32@0.21.5':
    optional: true

  '@esbuild/win32-x64@0.21.5':
    optional: true

  '@eslint-community/eslint-utils@4.4.0(eslint@8.57.0)':
    dependencies:
      eslint: 8.57.0
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.11.0': {}

  '@eslint/eslintrc@2.1.4':
    dependencies:
      ajv: 6.12.6
      debug: 4.3.5
      espree: 9.6.1
      globals: 13.24.0
      ignore: 5.3.1
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@8.57.0': {}

  '@humanwhocodes/config-array@0.11.14':
    dependencies:
      '@humanwhocodes/object-schema': 2.0.3
      debug: 4.3.5
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/object-schema@2.0.3': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@istanbuljs/load-nyc-config@1.1.0':
    dependencies:
      camelcase: 5.3.1
      find-up: 4.1.0
      get-package-type: 0.1.0
      js-yaml: 3.14.1
      resolve-from: 5.0.0

  '@istanbuljs/schema@0.1.3': {}

  '@jest/console@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0

  '@jest/core@29.7.0(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/reporters': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      ci-info: 3.9.0
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-changed-files: 29.7.0
      jest-config: 29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-resolve-dependencies: 29.7.0
      jest-runner: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      jest-watcher: 29.7.0
      micromatch: 4.0.7
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-ansi: 6.0.1
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color
      - ts-node

  '@jest/environment@29.7.0':
    dependencies:
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-mock: 29.7.0

  '@jest/expect-utils@29.7.0':
    dependencies:
      jest-get-type: 29.6.3

  '@jest/expect@29.7.0':
    dependencies:
      expect: 29.7.0
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/fake-timers@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@sinonjs/fake-timers': 10.3.0
      '@types/node': 20.14.10
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-util: 29.7.0

  '@jest/globals@29.7.0':
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/types': 29.6.3
      jest-mock: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/reporters@29.7.0':
    dependencies:
      '@bcoe/v8-coverage': 0.2.3
      '@jest/console': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.25
      '@types/node': 20.14.10
      chalk: 4.1.2
      collect-v8-coverage: 1.0.2
      exit: 0.1.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      istanbul-lib-coverage: 3.2.2
      istanbul-lib-instrument: 6.0.3
      istanbul-lib-report: 3.0.1
      istanbul-lib-source-maps: 4.0.1
      istanbul-reports: 3.1.7
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      jest-worker: 29.7.0
      slash: 3.0.0
      string-length: 4.0.2
      strip-ansi: 6.0.1
      v8-to-istanbul: 9.3.0
    transitivePeerDependencies:
      - supports-color

  '@jest/schemas@29.6.3':
    dependencies:
      '@sinclair/typebox': 0.27.8

  '@jest/source-map@29.6.3':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      callsites: 3.1.0
      graceful-fs: 4.2.11

  '@jest/test-result@29.7.0':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/types': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      collect-v8-coverage: 1.0.2

  '@jest/test-sequencer@29.7.0':
    dependencies:
      '@jest/test-result': 29.7.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      slash: 3.0.0

  '@jest/transform@29.7.0':
    dependencies:
      '@babel/core': 7.24.7
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.25
      babel-plugin-istanbul: 6.1.1
      chalk: 4.1.2
      convert-source-map: 2.0.0
      fast-json-stable-stringify: 2.1.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      micromatch: 4.0.7
      pirates: 4.0.6
      slash: 3.0.0
      write-file-atomic: 4.0.2
    transitivePeerDependencies:
      - supports-color

  '@jest/types@29.6.3':
    dependencies:
      '@jest/schemas': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      '@types/istanbul-reports': 3.0.4
      '@types/node': 20.14.10
      '@types/yargs': 17.0.32
      chalk: 4.1.2

  '@jridgewell/gen-mapping@0.3.5':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@jridgewell/trace-mapping@0.3.9':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@noble/hashes@1.4.0': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@pkgr/core@0.1.1': {}

  '@rollup/rollup-android-arm-eabi@4.18.1':
    optional: true

  '@rollup/rollup-android-arm64@4.18.1':
    optional: true

  '@rollup/rollup-darwin-arm64@4.18.1':
    optional: true

  '@rollup/rollup-darwin-x64@4.18.1':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.18.1':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.18.1':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.18.1':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.18.1':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.18.1':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.18.1':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.18.1':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.18.1':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.18.1':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.18.1':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.18.1':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.18.1':
    optional: true

  '@sinclair/typebox@0.27.8': {}

  '@sinonjs/commons@3.0.1':
    dependencies:
      type-detect: 4.0.8

  '@sinonjs/fake-timers@10.3.0':
    dependencies:
      '@sinonjs/commons': 3.0.1

  '@tsconfig/node10@1.0.11': {}

  '@tsconfig/node12@1.0.11': {}

  '@tsconfig/node14@1.0.3': {}

  '@tsconfig/node16@1.0.4': {}

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.24.7
      '@babel/types': 7.24.7
      '@types/babel__generator': 7.6.8
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.6

  '@types/babel__generator@7.6.8':
    dependencies:
      '@babel/types': 7.24.7

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.24.7
      '@babel/types': 7.24.7

  '@types/babel__traverse@7.20.6':
    dependencies:
      '@babel/types': 7.24.7

  '@types/bitcoinjs-lib@5.0.0':
    dependencies:
      bitcoinjs-lib: 6.1.6

  '@types/blake2b@2.1.3': {}

  '@types/bn.js@5.1.5':
    dependencies:
      '@types/node': 20.14.10

  '@types/conventional-commits-parser@5.0.0':
    dependencies:
      '@types/node': 20.14.10
    optional: true

  '@types/dotenv@8.2.0':
    dependencies:
      dotenv: 16.4.5

  '@types/elliptic@6.4.18':
    dependencies:
      '@types/bn.js': 5.1.5

  '@types/estree@1.0.5': {}

  '@types/graceful-fs@4.1.9':
    dependencies:
      '@types/node': 20.14.10

  '@types/istanbul-lib-coverage@2.0.6': {}

  '@types/istanbul-lib-report@3.0.3':
    dependencies:
      '@types/istanbul-lib-coverage': 2.0.6

  '@types/istanbul-reports@3.0.4':
    dependencies:
      '@types/istanbul-lib-report': 3.0.3

  '@types/json5@0.0.29': {}

  '@types/lodash.isequal@4.5.8':
    dependencies:
      '@types/lodash': 4.17.7

  '@types/lodash@4.17.7': {}

  '@types/moo@0.5.9': {}

  '@types/nearley@2.11.5': {}

  '@types/node@20.14.10':
    dependencies:
      undici-types: 5.26.5

  '@types/stack-utils@2.0.3': {}

  '@types/yargs-parser@21.0.3': {}

  '@types/yargs@17.0.32':
    dependencies:
      '@types/yargs-parser': 21.0.3

  '@typescript-eslint/eslint-plugin@7.16.0(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@eslint-community/regexpp': 4.11.0
      '@typescript-eslint/parser': 7.16.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/scope-manager': 7.16.0
      '@typescript-eslint/type-utils': 7.16.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/utils': 7.16.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/visitor-keys': 7.16.0
      eslint: 8.57.0
      graphemer: 1.4.0
      ignore: 5.3.1
      natural-compare: 1.4.0
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 7.16.0
      '@typescript-eslint/types': 7.16.0
      '@typescript-eslint/typescript-estree': 7.16.0(typescript@5.5.3)
      '@typescript-eslint/visitor-keys': 7.16.0
      debug: 4.3.5
      eslint: 8.57.0
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@7.16.0':
    dependencies:
      '@typescript-eslint/types': 7.16.0
      '@typescript-eslint/visitor-keys': 7.16.0

  '@typescript-eslint/type-utils@7.16.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 7.16.0(typescript@5.5.3)
      '@typescript-eslint/utils': 7.16.0(eslint@8.57.0)(typescript@5.5.3)
      debug: 4.3.5
      eslint: 8.57.0
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@7.16.0': {}

  '@typescript-eslint/typescript-estree@7.16.0(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/types': 7.16.0
      '@typescript-eslint/visitor-keys': 7.16.0
      debug: 4.3.5
      globby: 11.1.0
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.6.2
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@7.16.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.0)
      '@typescript-eslint/scope-manager': 7.16.0
      '@typescript-eslint/types': 7.16.0
      '@typescript-eslint/typescript-estree': 7.16.0(typescript@5.5.3)
      eslint: 8.57.0
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@typescript-eslint/visitor-keys@7.16.0':
    dependencies:
      '@typescript-eslint/types': 7.16.0
      eslint-visitor-keys: 3.4.3

  '@ungap/structured-clone@1.2.0': {}

  '@vitest/expect@1.6.0':
    dependencies:
      '@vitest/spy': 1.6.0
      '@vitest/utils': 1.6.0
      chai: 4.5.0

  '@vitest/runner@1.6.0':
    dependencies:
      '@vitest/utils': 1.6.0
      p-limit: 5.0.0
      pathe: 1.1.2

  '@vitest/snapshot@1.6.0':
    dependencies:
      magic-string: 0.30.11
      pathe: 1.1.2
      pretty-format: 29.7.0

  '@vitest/spy@1.6.0':
    dependencies:
      tinyspy: 2.2.1

  '@vitest/utils@1.6.0':
    dependencies:
      diff-sequences: 29.6.3
      estree-walker: 3.0.3
      loupe: 2.3.7
      pretty-format: 29.7.0

  acorn-jsx@5.3.2(acorn@8.12.1):
    dependencies:
      acorn: 8.12.1

  acorn-walk@8.3.3:
    dependencies:
      acorn: 8.12.1

  acorn@8.12.1: {}

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ajv@8.16.0:
    dependencies:
      fast-deep-equal: 3.1.3
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2
      uri-js: 4.4.1
    optional: true

  ansi-escapes@4.3.2:
    dependencies:
      type-fest: 0.21.3

  ansi-escapes@6.2.1: {}

  ansi-regex@5.0.1: {}

  ansi-regex@6.0.1: {}

  ansi-styles@3.2.1:
    dependencies:
      color-convert: 1.9.3

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arg@4.1.3: {}

  argparse@1.0.10:
    dependencies:
      sprintf-js: 1.0.3

  argparse@2.0.1: {}

  array-buffer-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      is-array-buffer: 3.0.4

  array-includes@3.1.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0
      get-intrinsic: 1.2.4
      is-string: 1.0.7

  array-union@2.1.0: {}

  array.prototype.findlastindex@1.2.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-shim-unscopables: 1.0.2

  array.prototype.flat@1.3.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-shim-unscopables: 1.0.2

  array.prototype.flatmap@1.3.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-shim-unscopables: 1.0.2

  arraybuffer.prototype.slice@1.0.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      is-array-buffer: 3.0.4
      is-shared-array-buffer: 1.0.3

  assertion-error@1.1.0: {}

  asynckit@0.4.0: {}

  at-least-node@1.0.0: {}

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.0.0

  axios@1.7.2:
    dependencies:
      follow-redirects: 1.15.6
      form-data: 4.0.0
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  b4a@1.6.6: {}

  babel-jest@29.7.0(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      '@jest/transform': 29.7.0
      '@types/babel__core': 7.20.5
      babel-plugin-istanbul: 6.1.1
      babel-preset-jest: 29.6.3(@babel/core@7.24.7)
      chalk: 4.1.2
      graceful-fs: 4.2.11
      slash: 3.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-istanbul@6.1.1:
    dependencies:
      '@babel/helper-plugin-utils': 7.24.7
      '@istanbuljs/load-nyc-config': 1.1.0
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-instrument: 5.2.1
      test-exclude: 6.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-jest-hoist@29.6.3:
    dependencies:
      '@babel/template': 7.24.7
      '@babel/types': 7.24.7
      '@types/babel__core': 7.20.5
      '@types/babel__traverse': 7.20.6

  babel-preset-current-node-syntax@1.0.1(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-bigint': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.24.7)
      '@babel/plugin-syntax-import-meta': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-json-strings': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-logical-assignment-operators': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-nullish-coalescing-operator': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-numeric-separator': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-optional-catch-binding': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-optional-chaining': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-top-level-await': 7.14.5(@babel/core@7.24.7)

  babel-preset-jest@29.6.3(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      babel-plugin-jest-hoist: 29.6.3
      babel-preset-current-node-syntax: 1.0.1(@babel/core@7.24.7)

  balanced-match@1.0.2: {}

  base-x@4.0.0: {}

  base64-js@1.5.1: {}

  bech32@2.0.0: {}

  binary-extensions@2.3.0: {}

  bip174@2.1.1: {}

  bitcoinjs-lib@6.1.6:
    dependencies:
      '@noble/hashes': 1.4.0
      bech32: 2.0.0
      bip174: 2.1.1
      bs58check: 3.0.1
      typeforce: 1.18.0
      varuint-bitcoin: 1.1.2

  bl@4.1.0:
    dependencies:
      buffer: 5.7.1
      inherits: 2.0.4
      readable-stream: 3.6.2

  blake2b-wasm@2.4.0:
    dependencies:
      b4a: 1.6.6
      nanoassert: 2.0.0

  blake2b@2.1.4:
    dependencies:
      blake2b-wasm: 2.4.0
      nanoassert: 2.0.0

  bn.js@4.12.0: {}

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  brorand@1.1.0: {}

  browserslist@4.23.2:
    dependencies:
      caniuse-lite: 1.0.30001641
      electron-to-chromium: 1.4.825
      node-releases: 2.0.14
      update-browserslist-db: 1.1.0(browserslist@4.23.2)

  bs58@5.0.0:
    dependencies:
      base-x: 4.0.0

  bs58check@3.0.1:
    dependencies:
      '@noble/hashes': 1.4.0
      bs58: 5.0.0

  bser@2.1.1:
    dependencies:
      node-int64: 0.4.0

  buffer-from@1.1.2: {}

  buffer@5.7.1:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  bundle-require@4.2.1(esbuild@0.21.5):
    dependencies:
      esbuild: 0.21.5
      load-tsconfig: 0.2.5

  cac@6.7.14: {}

  cachedir@2.3.0: {}

  call-bind@1.0.7:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      set-function-length: 1.2.2

  callsites@3.1.0: {}

  camelcase-keys@7.0.2:
    dependencies:
      camelcase: 6.3.0
      map-obj: 4.3.0
      quick-lru: 5.1.1
      type-fest: 1.4.0

  camelcase@5.3.1: {}

  camelcase@6.3.0: {}

  caniuse-lite@1.0.30001641: {}

  chai@4.5.0:
    dependencies:
      assertion-error: 1.1.0
      check-error: 1.0.3
      deep-eql: 4.1.4
      get-func-name: 2.0.2
      loupe: 2.3.7
      pathval: 1.1.1
      type-detect: 4.1.0

  chalk@2.4.2:
    dependencies:
      ansi-styles: 3.2.1
      escape-string-regexp: 1.0.5
      supports-color: 5.5.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.3.0: {}

  char-regex@1.0.2: {}

  chardet@0.7.0: {}

  check-error@1.0.3:
    dependencies:
      get-func-name: 2.0.2

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  ci-info@3.9.0: {}

  cjs-module-lexer@1.3.1: {}

  cli-cursor@3.1.0:
    dependencies:
      restore-cursor: 3.1.0

  cli-cursor@4.0.0:
    dependencies:
      restore-cursor: 4.0.0

  cli-spinners@2.9.2: {}

  cli-truncate@4.0.0:
    dependencies:
      slice-ansi: 5.0.0
      string-width: 7.2.0

  cli-width@3.0.0: {}

  cliui@8.0.1:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  clone@1.0.4: {}

  co@4.6.0: {}

  collect-v8-coverage@1.0.2: {}

  color-convert@1.9.3:
    dependencies:
      color-name: 1.1.3

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.3: {}

  color-name@1.1.4: {}

  colorette@2.0.20: {}

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@12.1.0: {}

  commander@2.20.3: {}

  commander@4.1.1: {}

  commitizen@4.3.0(@types/node@20.14.10)(typescript@5.5.3):
    dependencies:
      cachedir: 2.3.0
      cz-conventional-changelog: 3.3.0(@types/node@20.14.10)(typescript@5.5.3)
      dedent: 0.7.0
      detect-indent: 6.1.0
      find-node-modules: 2.1.3
      find-root: 1.1.0
      fs-extra: 9.1.0
      glob: 7.2.3
      inquirer: 8.2.5
      is-utf8: 0.2.1
      lodash: 4.17.21
      minimist: 1.2.7
      strip-bom: 4.0.0
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - '@types/node'
      - typescript

  concat-map@0.0.1: {}

  confbox@0.1.7: {}

  confusing-browser-globals@1.0.11: {}

  conventional-commit-types@3.0.0: {}

  convert-keys@1.3.4:
    dependencies:
      lodash.camelcase: 4.3.0
      lodash.forown: 4.4.0
      lodash.isplainobject: 4.0.6
      lodash.snakecase: 4.1.1

  convert-source-map@2.0.0: {}

  cosmiconfig-typescript-loader@5.0.0(@types/node@20.14.10)(cosmiconfig@9.0.0(typescript@5.5.3))(typescript@5.5.3):
    dependencies:
      '@types/node': 20.14.10
      cosmiconfig: 9.0.0(typescript@5.5.3)
      jiti: 1.21.6
      typescript: 5.5.3
    optional: true

  cosmiconfig@9.0.0(typescript@5.5.3):
    dependencies:
      env-paths: 2.2.1
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      parse-json: 5.2.0
    optionalDependencies:
      typescript: 5.5.3
    optional: true

  create-jest@29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-config: 29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      jest-util: 29.7.0
      prompts: 2.4.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  create-require@1.1.1: {}

  cross-spawn@7.0.3:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  cz-conventional-changelog@3.3.0(@types/node@20.14.10)(typescript@5.5.3):
    dependencies:
      chalk: 2.4.2
      commitizen: 4.3.0(@types/node@20.14.10)(typescript@5.5.3)
      conventional-commit-types: 3.0.0
      lodash.map: 4.6.0
      longest: 2.0.1
      word-wrap: 1.2.5
    optionalDependencies:
      '@commitlint/load': 19.2.0(@types/node@20.14.10)(typescript@5.5.3)
    transitivePeerDependencies:
      - '@types/node'
      - typescript

  data-view-buffer@1.0.1:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  data-view-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  data-view-byte-offset@1.0.0:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  debug@3.2.7:
    dependencies:
      ms: 2.1.3

  debug@4.3.5:
    dependencies:
      ms: 2.1.2

  dedent@0.7.0: {}

  dedent@1.5.3: {}

  deep-eql@4.1.4:
    dependencies:
      type-detect: 4.1.0

  deep-is@0.1.4: {}

  deepmerge@4.3.1: {}

  defaults@1.0.4:
    dependencies:
      clone: 1.0.4

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      gopd: 1.0.1

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  delayed-stream@1.0.0: {}

  detect-file@1.0.0: {}

  detect-indent@6.1.0: {}

  detect-newline@3.1.0: {}

  diff-sequences@29.6.3: {}

  diff@4.0.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  discontinuous-range@1.0.0: {}

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  doctrine@3.0.0:
    dependencies:
      esutils: 2.0.3

  dotenv@16.4.5: {}

  eastasianwidth@0.2.0: {}

  electron-to-chromium@1.4.825: {}

  elliptic@6.5.5:
    dependencies:
      bn.js: 4.12.0
      brorand: 1.1.0
      hash.js: 1.1.7
      hmac-drbg: 1.0.1
      inherits: 2.0.4
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  emittery@0.13.1: {}

  emoji-regex@10.3.0: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  env-paths@2.2.1:
    optional: true

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  es-abstract@1.23.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      arraybuffer.prototype.slice: 1.0.3
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      data-view-buffer: 1.0.1
      data-view-byte-length: 1.0.1
      data-view-byte-offset: 1.0.0
      es-define-property: 1.0.0
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-set-tostringtag: 2.0.3
      es-to-primitive: 1.2.1
      function.prototype.name: 1.1.6
      get-intrinsic: 1.2.4
      get-symbol-description: 1.0.2
      globalthis: 1.0.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2
      internal-slot: 1.0.7
      is-array-buffer: 3.0.4
      is-callable: 1.2.7
      is-data-view: 1.0.1
      is-negative-zero: 2.0.3
      is-regex: 1.1.4
      is-shared-array-buffer: 1.0.3
      is-string: 1.0.7
      is-typed-array: 1.1.13
      is-weakref: 1.0.2
      object-inspect: 1.13.2
      object-keys: 1.1.1
      object.assign: 4.1.5
      regexp.prototype.flags: 1.5.2
      safe-array-concat: 1.1.2
      safe-regex-test: 1.0.3
      string.prototype.trim: 1.2.9
      string.prototype.trimend: 1.0.8
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.2
      typed-array-byte-length: 1.0.1
      typed-array-byte-offset: 1.0.2
      typed-array-length: 1.0.6
      unbox-primitive: 1.0.2
      which-typed-array: 1.1.15

  es-define-property@1.0.0:
    dependencies:
      get-intrinsic: 1.2.4

  es-errors@1.3.0: {}

  es-object-atoms@1.0.0:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.0.3:
    dependencies:
      get-intrinsic: 1.2.4
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.0.2:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.2.1:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.0.5
      is-symbol: 1.0.4

  esbuild@0.21.5:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.21.5
      '@esbuild/android-arm': 0.21.5
      '@esbuild/android-arm64': 0.21.5
      '@esbuild/android-x64': 0.21.5
      '@esbuild/darwin-arm64': 0.21.5
      '@esbuild/darwin-x64': 0.21.5
      '@esbuild/freebsd-arm64': 0.21.5
      '@esbuild/freebsd-x64': 0.21.5
      '@esbuild/linux-arm': 0.21.5
      '@esbuild/linux-arm64': 0.21.5
      '@esbuild/linux-ia32': 0.21.5
      '@esbuild/linux-loong64': 0.21.5
      '@esbuild/linux-mips64el': 0.21.5
      '@esbuild/linux-ppc64': 0.21.5
      '@esbuild/linux-riscv64': 0.21.5
      '@esbuild/linux-s390x': 0.21.5
      '@esbuild/linux-x64': 0.21.5
      '@esbuild/netbsd-x64': 0.21.5
      '@esbuild/openbsd-x64': 0.21.5
      '@esbuild/sunos-x64': 0.21.5
      '@esbuild/win32-arm64': 0.21.5
      '@esbuild/win32-ia32': 0.21.5
      '@esbuild/win32-x64': 0.21.5

  escalade@3.1.2: {}

  escape-string-regexp@1.0.5: {}

  escape-string-regexp@2.0.0: {}

  escape-string-regexp@4.0.0: {}

  eslint-config-airbnb-base@15.0.0(eslint-plugin-import@2.29.1(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0):
    dependencies:
      confusing-browser-globals: 1.0.11
      eslint: 8.57.0
      eslint-plugin-import: 2.29.1(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)
      object.assign: 4.1.5
      object.entries: 1.1.8
      semver: 6.3.1

  eslint-config-prettier@9.1.0(eslint@8.57.0):
    dependencies:
      eslint: 8.57.0

  eslint-import-resolver-node@0.3.9:
    dependencies:
      debug: 3.2.7
      is-core-module: 2.14.0
      resolve: 1.22.8
    transitivePeerDependencies:
      - supports-color

  eslint-module-utils@2.8.1(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint@8.57.0):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 7.16.0(eslint@8.57.0)(typescript@5.5.3)
      eslint: 8.57.0
      eslint-import-resolver-node: 0.3.9
    transitivePeerDependencies:
      - supports-color

  eslint-plugin-import@2.29.1(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0):
    dependencies:
      array-includes: 3.1.8
      array.prototype.findlastindex: 1.2.5
      array.prototype.flat: 1.3.2
      array.prototype.flatmap: 1.3.2
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 8.57.0
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.8.1(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint@8.57.0)
      hasown: 2.0.2
      is-core-module: 2.14.0
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.0
      semver: 6.3.1
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 7.16.0(eslint@8.57.0)(typescript@5.5.3)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-jest@28.6.0(@typescript-eslint/eslint-plugin@7.16.0(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(jest@29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)))(typescript@5.5.3):
    dependencies:
      '@typescript-eslint/utils': 7.16.0(eslint@8.57.0)(typescript@5.5.3)
      eslint: 8.57.0
    optionalDependencies:
      '@typescript-eslint/eslint-plugin': 7.16.0(@typescript-eslint/parser@7.16.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3)
      jest: 29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
    transitivePeerDependencies:
      - supports-color
      - typescript

  eslint-plugin-prettier@5.1.3(eslint-config-prettier@9.1.0(eslint@8.57.0))(eslint@8.57.0)(prettier@3.3.2):
    dependencies:
      eslint: 8.57.0
      prettier: 3.3.2
      prettier-linter-helpers: 1.0.0
      synckit: 0.8.8
    optionalDependencies:
      eslint-config-prettier: 9.1.0(eslint@8.57.0)

  eslint-scope@7.2.2:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint@8.57.0:
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.0)
      '@eslint-community/regexpp': 4.11.0
      '@eslint/eslintrc': 2.1.4
      '@eslint/js': 8.57.0
      '@humanwhocodes/config-array': 0.11.14
      '@humanwhocodes/module-importer': 1.0.1
      '@nodelib/fs.walk': 1.2.8
      '@ungap/structured-clone': 1.2.0
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.3
      debug: 4.3.5
      doctrine: 3.0.0
      escape-string-regexp: 4.0.0
      eslint-scope: 7.2.2
      eslint-visitor-keys: 3.4.3
      espree: 9.6.1
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 6.0.1
      find-up: 5.0.0
      glob-parent: 6.0.2
      globals: 13.24.0
      graphemer: 1.4.0
      ignore: 5.3.1
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      is-path-inside: 3.0.3
      js-yaml: 4.1.0
      json-stable-stringify-without-jsonify: 1.0.1
      levn: 0.4.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
      strip-ansi: 6.0.1
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color

  espree@9.6.1:
    dependencies:
      acorn: 8.12.1
      acorn-jsx: 5.3.2(acorn@8.12.1)
      eslint-visitor-keys: 3.4.3

  esprima@4.0.1: {}

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  estree-walker@3.0.3:
    dependencies:
      '@types/estree': 1.0.5

  esutils@2.0.3: {}

  eventemitter3@5.0.1: {}

  execa@5.1.1:
    dependencies:
      cross-spawn: 7.0.3
      get-stream: 6.0.1
      human-signals: 2.1.0
      is-stream: 2.0.1
      merge-stream: 2.0.0
      npm-run-path: 4.0.1
      onetime: 5.1.2
      signal-exit: 3.0.7
      strip-final-newline: 2.0.0

  execa@8.0.1:
    dependencies:
      cross-spawn: 7.0.3
      get-stream: 8.0.1
      human-signals: 5.0.0
      is-stream: 3.0.0
      merge-stream: 2.0.0
      npm-run-path: 5.3.0
      onetime: 6.0.0
      signal-exit: 4.1.0
      strip-final-newline: 3.0.0

  exit@0.1.2: {}

  expand-tilde@2.0.2:
    dependencies:
      homedir-polyfill: 1.0.3

  expect@29.7.0:
    dependencies:
      '@jest/expect-utils': 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0

  external-editor@3.1.0:
    dependencies:
      chardet: 0.7.0
      iconv-lite: 0.4.24
      tmp: 0.0.33

  fast-deep-equal@3.1.3: {}

  fast-diff@1.3.0: {}

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.7

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fastq@1.17.1:
    dependencies:
      reusify: 1.0.4

  fb-watchman@2.0.2:
    dependencies:
      bser: 2.1.1

  figures@3.2.0:
    dependencies:
      escape-string-regexp: 1.0.5

  file-entry-cache@6.0.1:
    dependencies:
      flat-cache: 3.2.0

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-node-modules@2.1.3:
    dependencies:
      findup-sync: 4.0.0
      merge: 2.1.1

  find-root@1.1.0: {}

  find-up@4.1.0:
    dependencies:
      locate-path: 5.0.0
      path-exists: 4.0.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  findup-sync@4.0.0:
    dependencies:
      detect-file: 1.0.0
      is-glob: 4.0.3
      micromatch: 4.0.7
      resolve-dir: 1.0.1

  flat-cache@3.2.0:
    dependencies:
      flatted: 3.3.1
      keyv: 4.5.4
      rimraf: 3.0.2

  flatted@3.3.1: {}

  follow-redirects@1.15.6: {}

  for-each@0.3.3:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.2.1:
    dependencies:
      cross-spawn: 7.0.3
      signal-exit: 4.1.0

  form-data@4.0.0:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  fs-extra@9.1.0:
    dependencies:
      at-least-node: 1.0.0
      graceful-fs: 4.2.11
      jsonfile: 6.1.0
      universalify: 2.0.1

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  function.prototype.name@1.1.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      functions-have-names: 1.2.3

  functions-have-names@1.2.3: {}

  gensync@1.0.0-beta.2: {}

  get-caller-file@2.0.5: {}

  get-east-asian-width@1.2.0: {}

  get-func-name@2.0.2: {}

  get-intrinsic@1.2.4:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2

  get-package-type@0.1.0: {}

  get-stream@6.0.1: {}

  get-stream@8.0.1: {}

  get-symbol-description@1.0.2:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.2.1
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.0
      path-scurry: 1.11.1

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  global-directory@4.0.1:
    dependencies:
      ini: 4.1.1
    optional: true

  global-modules@1.0.0:
    dependencies:
      global-prefix: 1.0.2
      is-windows: 1.0.2
      resolve-dir: 1.0.1

  global-prefix@1.0.2:
    dependencies:
      expand-tilde: 2.0.2
      homedir-polyfill: 1.0.3
      ini: 1.3.8
      is-windows: 1.0.2
      which: 1.3.1

  globals@11.12.0: {}

  globals@13.24.0:
    dependencies:
      type-fest: 0.20.2

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.0.1

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.2
      ignore: 5.3.1
      merge2: 1.4.1
      slash: 3.0.0

  gopd@1.0.1:
    dependencies:
      get-intrinsic: 1.2.4

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  has-bigints@1.0.2: {}

  has-flag@3.0.0: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.0

  has-proto@1.0.3: {}

  has-symbols@1.0.3: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.0.3

  hash.js@1.1.7:
    dependencies:
      inherits: 2.0.4
      minimalistic-assert: 1.0.1

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hmac-drbg@1.0.1:
    dependencies:
      hash.js: 1.1.7
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  homedir-polyfill@1.0.3:
    dependencies:
      parse-passwd: 1.0.0

  html-escaper@2.0.2: {}

  human-signals@2.1.0: {}

  human-signals@5.0.0: {}

  husky@9.0.11: {}

  iconv-lite@0.4.24:
    dependencies:
      safer-buffer: 2.1.2

  ieee754@1.2.1: {}

  ignore@5.3.1: {}

  import-fresh@3.3.0:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  import-local@3.1.0:
    dependencies:
      pkg-dir: 4.2.0
      resolve-cwd: 3.0.0

  import-meta-resolve@4.1.0:
    optional: true

  imurmurhash@0.1.4: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.4: {}

  ini@1.3.8: {}

  ini@4.1.1:
    optional: true

  inquirer@8.2.5:
    dependencies:
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      cli-cursor: 3.1.0
      cli-width: 3.0.0
      external-editor: 3.1.0
      figures: 3.2.0
      lodash: 4.17.21
      mute-stream: 0.0.8
      ora: 5.4.1
      run-async: 2.4.1
      rxjs: 7.8.1
      string-width: 4.2.3
      strip-ansi: 6.0.1
      through: 2.3.8
      wrap-ansi: 7.0.0

  internal-slot@1.0.7:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.0.6

  is-array-buffer@3.0.4:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4

  is-arrayish@0.2.1: {}

  is-bigint@1.0.4:
    dependencies:
      has-bigints: 1.0.2

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-boolean-object@1.1.2:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-callable@1.2.7: {}

  is-core-module@2.14.0:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.1:
    dependencies:
      is-typed-array: 1.1.13

  is-date-object@1.0.5:
    dependencies:
      has-tostringtag: 1.0.2

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-fullwidth-code-point@4.0.0: {}

  is-fullwidth-code-point@5.0.0:
    dependencies:
      get-east-asian-width: 1.2.0

  is-generator-fn@2.1.0: {}

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-interactive@1.0.0: {}

  is-negative-zero@2.0.3: {}

  is-number-object@1.0.7:
    dependencies:
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-path-inside@3.0.3: {}

  is-regex@1.1.4:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-shared-array-buffer@1.0.3:
    dependencies:
      call-bind: 1.0.7

  is-stream@2.0.1: {}

  is-stream@3.0.0: {}

  is-string@1.0.7:
    dependencies:
      has-tostringtag: 1.0.2

  is-symbol@1.0.4:
    dependencies:
      has-symbols: 1.0.3

  is-typed-array@1.1.13:
    dependencies:
      which-typed-array: 1.1.15

  is-unicode-supported@0.1.0: {}

  is-utf8@0.2.1: {}

  is-weakref@1.0.2:
    dependencies:
      call-bind: 1.0.7

  is-windows@1.0.2: {}

  isarray@1.0.0: {}

  isarray@2.0.5: {}

  isexe@2.0.0: {}

  isobject@2.1.0:
    dependencies:
      isarray: 1.0.0

  istanbul-lib-coverage@3.2.2: {}

  istanbul-lib-instrument@5.2.1:
    dependencies:
      '@babel/core': 7.24.7
      '@babel/parser': 7.24.7
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-instrument@6.0.3:
    dependencies:
      '@babel/core': 7.24.7
      '@babel/parser': 7.24.7
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 7.6.2
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-report@3.0.1:
    dependencies:
      istanbul-lib-coverage: 3.2.2
      make-dir: 4.0.0
      supports-color: 7.2.0

  istanbul-lib-source-maps@4.0.1:
    dependencies:
      debug: 4.3.5
      istanbul-lib-coverage: 3.2.2
      source-map: 0.6.1
    transitivePeerDependencies:
      - supports-color

  istanbul-reports@3.1.7:
    dependencies:
      html-escaper: 2.0.2
      istanbul-lib-report: 3.0.1

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jest-changed-files@29.7.0:
    dependencies:
      execa: 5.1.1
      jest-util: 29.7.0
      p-limit: 3.1.0

  jest-circus@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      co: 4.6.0
      dedent: 1.5.3
      is-generator-fn: 2.1.0
      jest-each: 29.7.0
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      p-limit: 3.1.0
      pretty-format: 29.7.0
      pure-rand: 6.1.0
      slash: 3.0.0
      stack-utils: 2.0.6
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-cli@29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      '@jest/core': 29.7.0(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      chalk: 4.1.2
      create-jest: 29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      exit: 0.1.2
      import-local: 3.1.0
      jest-config: 29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      jest-util: 29.7.0
      jest-validate: 29.7.0
      yargs: 17.7.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  jest-config@29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      '@babel/core': 7.24.7
      '@jest/test-sequencer': 29.7.0
      '@jest/types': 29.6.3
      babel-jest: 29.7.0(@babel/core@7.24.7)
      chalk: 4.1.2
      ci-info: 3.9.0
      deepmerge: 4.3.1
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-circus: 29.7.0
      jest-environment-node: 29.7.0
      jest-get-type: 29.6.3
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-runner: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      micromatch: 4.0.7
      parse-json: 5.2.0
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-json-comments: 3.1.1
    optionalDependencies:
      '@types/node': 20.14.10
      ts-node: 10.9.2(@types/node@20.14.10)(typescript@5.5.3)
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-diff@29.7.0:
    dependencies:
      chalk: 4.1.2
      diff-sequences: 29.6.3
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-docblock@29.7.0:
    dependencies:
      detect-newline: 3.1.0

  jest-each@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      jest-get-type: 29.6.3
      jest-util: 29.7.0
      pretty-format: 29.7.0

  jest-environment-node@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-mock: 29.7.0
      jest-util: 29.7.0

  jest-get-type@29.6.3: {}

  jest-haste-map@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/graceful-fs': 4.1.9
      '@types/node': 20.14.10
      anymatch: 3.1.3
      fb-watchman: 2.0.2
      graceful-fs: 4.2.11
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      jest-worker: 29.7.0
      micromatch: 4.0.7
      walker: 1.0.8
    optionalDependencies:
      fsevents: 2.3.3

  jest-leak-detector@29.7.0:
    dependencies:
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-matcher-utils@29.7.0:
    dependencies:
      chalk: 4.1.2
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-message-util@29.7.0:
    dependencies:
      '@babel/code-frame': 7.24.7
      '@jest/types': 29.6.3
      '@types/stack-utils': 2.0.3
      chalk: 4.1.2
      graceful-fs: 4.2.11
      micromatch: 4.0.7
      pretty-format: 29.7.0
      slash: 3.0.0
      stack-utils: 2.0.6

  jest-mock@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-util: 29.7.0

  jest-pnp-resolver@1.2.3(jest-resolve@29.7.0):
    optionalDependencies:
      jest-resolve: 29.7.0

  jest-regex-util@29.6.3: {}

  jest-resolve-dependencies@29.7.0:
    dependencies:
      jest-regex-util: 29.6.3
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  jest-resolve@29.7.0:
    dependencies:
      chalk: 4.1.2
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-pnp-resolver: 1.2.3(jest-resolve@29.7.0)
      jest-util: 29.7.0
      jest-validate: 29.7.0
      resolve: 1.22.8
      resolve.exports: 2.0.2
      slash: 3.0.0

  jest-runner@29.7.0:
    dependencies:
      '@jest/console': 29.7.0
      '@jest/environment': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      emittery: 0.13.1
      graceful-fs: 4.2.11
      jest-docblock: 29.7.0
      jest-environment-node: 29.7.0
      jest-haste-map: 29.7.0
      jest-leak-detector: 29.7.0
      jest-message-util: 29.7.0
      jest-resolve: 29.7.0
      jest-runtime: 29.7.0
      jest-util: 29.7.0
      jest-watcher: 29.7.0
      jest-worker: 29.7.0
      p-limit: 3.1.0
      source-map-support: 0.5.13
    transitivePeerDependencies:
      - supports-color

  jest-runtime@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/globals': 29.7.0
      '@jest/source-map': 29.6.3
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      cjs-module-lexer: 1.3.1
      collect-v8-coverage: 1.0.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0
      strip-bom: 4.0.0
    transitivePeerDependencies:
      - supports-color

  jest-snapshot@29.7.0:
    dependencies:
      '@babel/core': 7.24.7
      '@babel/generator': 7.24.7
      '@babel/plugin-syntax-jsx': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-syntax-typescript': 7.24.7(@babel/core@7.24.7)
      '@babel/types': 7.24.7
      '@jest/expect-utils': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      babel-preset-current-node-syntax: 1.0.1(@babel/core@7.24.7)
      chalk: 4.1.2
      expect: 29.7.0
      graceful-fs: 4.2.11
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      natural-compare: 1.4.0
      pretty-format: 29.7.0
      semver: 7.6.2
    transitivePeerDependencies:
      - supports-color

  jest-util@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      ci-info: 3.9.0
      graceful-fs: 4.2.11
      picomatch: 2.3.1

  jest-validate@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      camelcase: 6.3.0
      chalk: 4.1.2
      jest-get-type: 29.6.3
      leven: 3.1.0
      pretty-format: 29.7.0

  jest-watcher@29.7.0:
    dependencies:
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      emittery: 0.13.1
      jest-util: 29.7.0
      string-length: 4.0.2

  jest-worker@29.7.0:
    dependencies:
      '@types/node': 20.14.10
      jest-util: 29.7.0
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jest@29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      '@jest/core': 29.7.0(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      '@jest/types': 29.6.3
      import-local: 3.1.0
      jest-cli: 29.7.0(@types/node@20.14.10)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  jiti@1.21.6:
    optional: true

  joycon@3.1.1: {}

  js-tokens@4.0.0: {}

  js-tokens@9.0.0: {}

  js-xxhash@1.0.4: {}

  js-yaml@3.14.1:
    dependencies:
      argparse: 1.0.10
      esprima: 4.0.1

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsbi@4.3.0: {}

  jsesc@2.5.2: {}

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-schema-traverse@0.4.1: {}

  json-schema-traverse@1.0.0:
    optional: true

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@1.0.2:
    dependencies:
      minimist: 1.2.8

  json5@2.2.3: {}

  jsonfile@6.1.0:
    dependencies:
      universalify: 2.0.1
    optionalDependencies:
      graceful-fs: 4.2.11

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kleur@3.0.3: {}

  leven@3.1.0: {}

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lilconfig@3.1.2: {}

  lines-and-columns@1.2.4: {}

  lint-staged@15.2.7:
    dependencies:
      chalk: 5.3.0
      commander: 12.1.0
      debug: 4.3.5
      execa: 8.0.1
      lilconfig: 3.1.2
      listr2: 8.2.3
      micromatch: 4.0.7
      pidtree: 0.6.0
      string-argv: 0.3.2
      yaml: 2.4.5
    transitivePeerDependencies:
      - supports-color

  listr2@8.2.3:
    dependencies:
      cli-truncate: 4.0.0
      colorette: 2.0.20
      eventemitter3: 5.0.1
      log-update: 6.0.0
      rfdc: 1.4.1
      wrap-ansi: 9.0.0

  load-tsconfig@0.2.5: {}

  local-pkg@0.5.0:
    dependencies:
      mlly: 1.7.1
      pkg-types: 1.1.3

  locate-path@5.0.0:
    dependencies:
      p-locate: 4.1.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.camelcase@4.3.0: {}

  lodash.forown@4.4.0: {}

  lodash.isequal@4.5.0: {}

  lodash.isplainobject@4.0.6: {}

  lodash.map@4.6.0: {}

  lodash.merge@4.6.2: {}

  lodash.mergewith@4.6.2:
    optional: true

  lodash.snakecase@4.1.1: {}

  lodash.sortby@4.7.0: {}

  lodash.uniq@4.5.0:
    optional: true

  lodash@4.17.21: {}

  log-symbols@4.1.0:
    dependencies:
      chalk: 4.1.2
      is-unicode-supported: 0.1.0

  log-update@6.0.0:
    dependencies:
      ansi-escapes: 6.2.1
      cli-cursor: 4.0.0
      slice-ansi: 7.1.0
      strip-ansi: 7.1.0
      wrap-ansi: 9.0.0

  longest@2.0.1: {}

  loupe@2.3.7:
    dependencies:
      get-func-name: 2.0.2

  lru-cache@10.4.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  magic-string@0.30.11:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0

  make-dir@4.0.0:
    dependencies:
      semver: 7.6.2

  make-error@1.3.6: {}

  makeerror@1.0.12:
    dependencies:
      tmpl: 1.0.5

  map-obj@4.3.0: {}

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  merge@2.1.1: {}

  micromatch@4.0.7:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mimic-fn@2.1.0: {}

  mimic-fn@4.0.0: {}

  minimalistic-assert@1.0.1: {}

  minimalistic-crypto-utils@1.0.1: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.7: {}

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  mlly@1.7.1:
    dependencies:
      acorn: 8.12.1
      pathe: 1.1.2
      pkg-types: 1.1.3
      ufo: 1.5.4

  moo@0.5.2: {}

  ms@2.1.2: {}

  ms@2.1.3: {}

  mute-stream@0.0.8: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoassert@2.0.0: {}

  nanoid@3.3.7: {}

  natural-compare@1.4.0: {}

  nearley@2.20.1:
    dependencies:
      commander: 2.20.3
      moo: 0.5.2
      railroad-diagrams: 1.0.0
      randexp: 0.4.6

  node-int64@0.4.0: {}

  node-releases@2.0.14: {}

  normalize-path@3.0.0: {}

  npm-run-path@4.0.1:
    dependencies:
      path-key: 3.1.1

  npm-run-path@5.3.0:
    dependencies:
      path-key: 4.0.0

  object-assign@4.1.1: {}

  object-inspect@1.13.2: {}

  object-keys@1.1.1: {}

  object.assign@4.1.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      has-symbols: 1.0.3
      object-keys: 1.1.1

  object.entries@1.1.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0

  object.groupby@1.0.3:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3

  object.values@1.2.0:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  onetime@5.1.2:
    dependencies:
      mimic-fn: 2.1.0

  onetime@6.0.0:
    dependencies:
      mimic-fn: 4.0.0

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  ora@5.4.1:
    dependencies:
      bl: 4.1.0
      chalk: 4.1.2
      cli-cursor: 3.1.0
      cli-spinners: 2.9.2
      is-interactive: 1.0.0
      is-unicode-supported: 0.1.0
      log-symbols: 4.1.0
      strip-ansi: 6.0.1
      wcwidth: 1.0.1

  os-tmpdir@1.0.2: {}

  p-limit@2.3.0:
    dependencies:
      p-try: 2.2.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-limit@5.0.0:
    dependencies:
      yocto-queue: 1.1.1

  p-locate@4.1.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-try@2.2.0: {}

  package-json-from-dist@1.0.0: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.24.7
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  parse-passwd@1.0.0: {}

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-key@4.0.0: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-type@4.0.0: {}

  pathe@1.1.2: {}

  pathval@1.1.1: {}

  picocolors@1.0.1: {}

  picomatch@2.3.1: {}

  pidtree@0.6.0: {}

  pirates@4.0.6: {}

  pkg-dir@4.2.0:
    dependencies:
      find-up: 4.1.0

  pkg-types@1.1.3:
    dependencies:
      confbox: 0.1.7
      mlly: 1.7.1
      pathe: 1.1.2

  possible-typed-array-names@1.0.0: {}

  postcss-load-config@4.0.2(postcss@8.4.40)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      lilconfig: 3.1.2
      yaml: 2.4.5
    optionalDependencies:
      postcss: 8.4.40
      ts-node: 10.9.2(@types/node@20.14.10)(typescript@5.5.3)

  postcss@8.4.40:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.0.1
      source-map-js: 1.2.0

  prelude-ls@1.2.1: {}

  prettier-linter-helpers@1.0.0:
    dependencies:
      fast-diff: 1.3.0

  prettier@3.3.2: {}

  pretty-format@29.7.0:
    dependencies:
      '@jest/schemas': 29.6.3
      ansi-styles: 5.2.0
      react-is: 18.3.1

  prompts@2.4.2:
    dependencies:
      kleur: 3.0.3
      sisteransi: 1.0.5

  proxy-from-env@1.1.0: {}

  punycode@2.3.1: {}

  pure-rand@6.1.0: {}

  queue-microtask@1.2.3: {}

  quick-lru@5.1.1: {}

  railroad-diagrams@1.0.0: {}

  randexp@0.4.6:
    dependencies:
      discontinuous-range: 1.0.0
      ret: 0.1.15

  react-is@18.3.1: {}

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  regexp.prototype.flags@1.5.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-errors: 1.3.0
      set-function-name: 2.0.2

  relative@3.0.2:
    dependencies:
      isobject: 2.1.0

  require-directory@2.1.1: {}

  require-from-string@2.0.2:
    optional: true

  resolve-cwd@3.0.0:
    dependencies:
      resolve-from: 5.0.0

  resolve-dir@1.0.1:
    dependencies:
      expand-tilde: 2.0.2
      global-modules: 1.0.0

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve.exports@2.0.2: {}

  resolve@1.22.8:
    dependencies:
      is-core-module: 2.14.0
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  restore-cursor@3.1.0:
    dependencies:
      onetime: 5.1.2
      signal-exit: 3.0.7

  restore-cursor@4.0.0:
    dependencies:
      onetime: 5.1.2
      signal-exit: 3.0.7

  ret@0.1.15: {}

  reusify@1.0.4: {}

  rfdc@1.4.1: {}

  rimraf@3.0.2:
    dependencies:
      glob: 7.2.3

  rollup@4.18.1:
    dependencies:
      '@types/estree': 1.0.5
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.18.1
      '@rollup/rollup-android-arm64': 4.18.1
      '@rollup/rollup-darwin-arm64': 4.18.1
      '@rollup/rollup-darwin-x64': 4.18.1
      '@rollup/rollup-linux-arm-gnueabihf': 4.18.1
      '@rollup/rollup-linux-arm-musleabihf': 4.18.1
      '@rollup/rollup-linux-arm64-gnu': 4.18.1
      '@rollup/rollup-linux-arm64-musl': 4.18.1
      '@rollup/rollup-linux-powerpc64le-gnu': 4.18.1
      '@rollup/rollup-linux-riscv64-gnu': 4.18.1
      '@rollup/rollup-linux-s390x-gnu': 4.18.1
      '@rollup/rollup-linux-x64-gnu': 4.18.1
      '@rollup/rollup-linux-x64-musl': 4.18.1
      '@rollup/rollup-win32-arm64-msvc': 4.18.1
      '@rollup/rollup-win32-ia32-msvc': 4.18.1
      '@rollup/rollup-win32-x64-msvc': 4.18.1
      fsevents: 2.3.3

  run-async@2.4.1: {}

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  rxjs@7.8.1:
    dependencies:
      tslib: 2.6.3

  safe-array-concat@1.1.2:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      isarray: 2.0.5

  safe-buffer@5.2.1: {}

  safe-regex-test@1.0.3:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-regex: 1.1.4

  safer-buffer@2.1.2: {}

  semver@6.3.1: {}

  semver@7.6.2: {}

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel@1.0.6:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      object-inspect: 1.13.2

  siginfo@2.0.0: {}

  signal-exit@3.0.7: {}

  signal-exit@4.1.0: {}

  sisteransi@1.0.5: {}

  slash@3.0.0: {}

  slice-ansi@5.0.0:
    dependencies:
      ansi-styles: 6.2.1
      is-fullwidth-code-point: 4.0.0

  slice-ansi@7.1.0:
    dependencies:
      ansi-styles: 6.2.1
      is-fullwidth-code-point: 5.0.0

  source-map-js@1.2.0: {}

  source-map-support@0.5.13:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.6.1: {}

  source-map@0.8.0-beta.0:
    dependencies:
      whatwg-url: 7.1.0

  sprintf-js@1.0.3: {}

  stack-utils@2.0.6:
    dependencies:
      escape-string-regexp: 2.0.0

  stackback@0.0.2: {}

  std-env@3.7.0: {}

  string-argv@0.3.2: {}

  string-length@4.0.2:
    dependencies:
      char-regex: 1.0.2
      strip-ansi: 6.0.1

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string-width@7.2.0:
    dependencies:
      emoji-regex: 10.3.0
      get-east-asian-width: 1.2.0
      strip-ansi: 7.1.0

  string.prototype.trim@1.2.9:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0

  string.prototype.trimend@1.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.0.1

  strip-bom@3.0.0: {}

  strip-bom@4.0.0: {}

  strip-final-newline@2.0.0: {}

  strip-final-newline@3.0.0: {}

  strip-json-comments@3.1.1: {}

  strip-literal@2.1.0:
    dependencies:
      js-tokens: 9.0.0

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.6
      ts-interface-checker: 0.1.13

  supports-color@5.5.0:
    dependencies:
      has-flag: 3.0.0

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  synckit@0.8.8:
    dependencies:
      '@pkgr/core': 0.1.1
      tslib: 2.6.3

  test-exclude@6.0.0:
    dependencies:
      '@istanbuljs/schema': 0.1.3
      glob: 7.2.3
      minimatch: 3.1.2

  text-table@0.2.0: {}

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  through@2.3.8: {}

  tinybench@2.9.0: {}

  tinypool@0.8.4: {}

  tinyspy@2.2.1: {}

  tmp@0.0.33:
    dependencies:
      os-tmpdir: 1.0.2

  tmpl@1.0.5: {}

  to-fast-properties@2.0.0: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  tr46@1.0.1:
    dependencies:
      punycode: 2.3.1

  tree-kill@1.2.2: {}

  ts-api-utils@1.3.0(typescript@5.5.3):
    dependencies:
      typescript: 5.5.3

  ts-interface-checker@0.1.13: {}

  ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3):
    dependencies:
      '@cspotcode/source-map-support': 0.8.1
      '@tsconfig/node10': 1.0.11
      '@tsconfig/node12': 1.0.11
      '@tsconfig/node14': 1.0.3
      '@tsconfig/node16': 1.0.4
      '@types/node': 20.14.10
      acorn: 8.12.1
      acorn-walk: 8.3.3
      arg: 4.1.3
      create-require: 1.1.1
      diff: 4.0.2
      make-error: 1.3.6
      typescript: 5.5.3
      v8-compile-cache-lib: 3.0.1
      yn: 3.1.1

  tsconfig-paths@3.15.0:
    dependencies:
      '@types/json5': 0.0.29
      json5: 1.0.2
      minimist: 1.2.8
      strip-bom: 3.0.0

  tslib@2.6.3: {}

  tsup@8.1.0(postcss@8.4.40)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))(typescript@5.5.3):
    dependencies:
      bundle-require: 4.2.1(esbuild@0.21.5)
      cac: 6.7.14
      chokidar: 3.6.0
      debug: 4.3.5
      esbuild: 0.21.5
      execa: 5.1.1
      globby: 11.1.0
      joycon: 3.1.1
      postcss-load-config: 4.0.2(postcss@8.4.40)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      resolve-from: 5.0.0
      rollup: 4.18.1
      source-map: 0.8.0-beta.0
      sucrase: 3.35.0
      tree-kill: 1.2.2
    optionalDependencies:
      postcss: 8.4.40
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color
      - ts-node

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-detect@4.0.8: {}

  type-detect@4.1.0: {}

  type-fest@0.20.2: {}

  type-fest@0.21.3: {}

  type-fest@1.4.0: {}

  typed-array-buffer@1.0.2:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-typed-array: 1.1.13

  typed-array-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13

  typed-array-byte-offset@1.0.2:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13

  typed-array-length@1.0.6:
    dependencies:
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13
      possible-typed-array-names: 1.0.0

  typeforce@1.18.0: {}

  typescript@5.5.3: {}

  ufo@1.5.4: {}

  unbox-primitive@1.0.2:
    dependencies:
      call-bind: 1.0.7
      has-bigints: 1.0.2
      has-symbols: 1.0.3
      which-boxed-primitive: 1.0.2

  undici-types@5.26.5: {}

  universalify@2.0.1: {}

  update-browserslist-db@1.1.0(browserslist@4.23.2):
    dependencies:
      browserslist: 4.23.2
      escalade: 3.1.2
      picocolors: 1.0.1

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  util-deprecate@1.0.2: {}

  v8-compile-cache-lib@3.0.1: {}

  v8-to-istanbul@9.3.0:
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      '@types/istanbul-lib-coverage': 2.0.6
      convert-source-map: 2.0.0

  varuint-bitcoin@1.1.2:
    dependencies:
      safe-buffer: 5.2.1

  vite-node@1.6.0(@types/node@20.14.10):
    dependencies:
      cac: 6.7.14
      debug: 4.3.5
      pathe: 1.1.2
      picocolors: 1.0.1
      vite: 5.3.5(@types/node@20.14.10)
    transitivePeerDependencies:
      - '@types/node'
      - less
      - lightningcss
      - sass
      - stylus
      - sugarss
      - supports-color
      - terser

  vite@5.3.5(@types/node@20.14.10):
    dependencies:
      esbuild: 0.21.5
      postcss: 8.4.40
      rollup: 4.18.1
    optionalDependencies:
      '@types/node': 20.14.10
      fsevents: 2.3.3

  vitest@1.6.0(@types/node@20.14.10):
    dependencies:
      '@vitest/expect': 1.6.0
      '@vitest/runner': 1.6.0
      '@vitest/snapshot': 1.6.0
      '@vitest/spy': 1.6.0
      '@vitest/utils': 1.6.0
      acorn-walk: 8.3.3
      chai: 4.5.0
      debug: 4.3.5
      execa: 8.0.1
      local-pkg: 0.5.0
      magic-string: 0.30.11
      pathe: 1.1.2
      picocolors: 1.0.1
      std-env: 3.7.0
      strip-literal: 2.1.0
      tinybench: 2.9.0
      tinypool: 0.8.4
      vite: 5.3.5(@types/node@20.14.10)
      vite-node: 1.6.0(@types/node@20.14.10)
      why-is-node-running: 2.3.0
    optionalDependencies:
      '@types/node': 20.14.10
    transitivePeerDependencies:
      - less
      - lightningcss
      - sass
      - stylus
      - sugarss
      - supports-color
      - terser

  walker@1.0.8:
    dependencies:
      makeerror: 1.0.12

  wcwidth@1.0.1:
    dependencies:
      defaults: 1.0.4

  webidl-conversions@4.0.2: {}

  whatwg-url@7.1.0:
    dependencies:
      lodash.sortby: 4.7.0
      tr46: 1.0.1
      webidl-conversions: 4.0.2

  which-boxed-primitive@1.0.2:
    dependencies:
      is-bigint: 1.0.4
      is-boolean-object: 1.1.2
      is-number-object: 1.0.7
      is-string: 1.0.7
      is-symbol: 1.0.4

  which-typed-array@1.1.15:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-tostringtag: 1.0.2

  which@1.3.1:
    dependencies:
      isexe: 2.0.0

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  why-is-node-running@2.3.0:
    dependencies:
      siginfo: 2.0.0
      stackback: 0.0.2

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrap-ansi@9.0.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 7.2.0
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  write-file-atomic@4.0.2:
    dependencies:
      imurmurhash: 0.1.4
      signal-exit: 3.0.7

  y18n@5.0.8: {}

  yallist@3.1.1: {}

  yaml@2.4.5: {}

  yargs-parser@21.1.1: {}

  yargs@17.7.2:
    dependencies:
      cliui: 8.0.1
      escalade: 3.1.2
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 21.1.1

  yn@3.1.1: {}

  yocto-queue@0.1.0: {}

  yocto-queue@1.1.1: {}


================================================
File: pnpm-workspace.yaml
================================================
packages:
  - 'packages/*'
  - 'examples/*'


================================================
File: tsup-base.config.ts
================================================
import { defineConfig } from 'tsup'

export default defineConfig({
  splitting: true,
  clean: true,
  bundle: true,
  dts: true,
  sourcemap: true,
  target: 'es2021',
  format: ['esm', 'cjs'],
  entry: ['src/index.ts'],
  platform: 'browser',
})


================================================
File: .editorconfig
================================================
# http://editorconfig.org
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
quota_type = single
spaces_around_operators = true

# Use 4 spaces for the Python files
[*.py]
indent_size = 4
max_line_length = 120

# The JSON files contain newlines inconsistently
[*.json]
insert_final_newline = ignore

# Minified JavaScript files shouldn't be changed
[**.min.js]
indent_style = ignore
insert_final_newline = ignore

# Makefiles always use tabs for indentation
[Makefile]
indent_style = tab

# Batch files use tabs for indentation
[*.bat]
indent_style = tab

[*.md]
trim_trailing_whitespace = false


================================================
File: .eslintrc.json
================================================
{
  "env": {
    "browser": true,
    "es2021": true
  },
  "ignorePatterns": ["dist/"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "rules": {
  }
}


================================================
File: .prettierrc
================================================
{
  "printWidth": 120,
  "tabWidth": 2,
  "useTabs": false,
  "semi": false,
  "singleQuote": true,
  "trailingComma": "all",
  "arrowParens": "avoid"
}


================================================
File: examples/branch/README.md
================================================
# Examples of Branch chain

## How to Start

Copy the `.env.example` file to `.env`:

```shell
cd examples/branch && cp .env.example .env
```

Update the configuration values:

```yaml
# True for Branch chain Mainnet and false for Branch chain Testnet, the default value is false
IS_MAINNET=false

# The Branch chain secp256k1 private key whose format is 32bytes hex string with 0x prefix
BRANCH_SECP256K1_PRIVATE_KEY=0x-private-key

# Branch chain node url which should be matched with IS_MAINNET
BRANCH_NODE_URL=https://branch0.dev.utxostack.network 

```

### Get cells and transactions with Indexer RPCs on Branch chain

```shell
npx ts-node indexer.ts 
```

### Transfer Satoshi on Branch chain


```shell
npx ts-node transfer.ts 
```


================================================
File: examples/branch/env.ts
================================================
import dotenv from 'dotenv'
import { AddressPrefix, Collector, privateKeyToAddress } from '@utxo-stack/branch'

dotenv.config({ path: __dirname + '/.env' })

export const isMainnet = process.env.IS_MAINNET === 'true' ? true : false

export const BRANCH_NODE_URL = process.env.BRANCH_NODE_URL!
export const collector = new Collector(process.env.BRANCH_NODE_URL!)

export const BRANCH_PRIVATE_KEY = process.env.BRANCH_SECP256K1_PRIVATE_KEY!
export const branchAddress = privateKeyToAddress(BRANCH_PRIVATE_KEY, {
  prefix: isMainnet ? AddressPrefix.Mainnet : AddressPrefix.Testnet,
})


================================================
File: examples/branch/indexer.ts
================================================
import { BranchComponents, CellIndexer } from '@utxo-stack/branch'
import { BRANCH_NODE_URL } from './env'

const run = async () => {
  const lock: BranchComponents.Script = {
    codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
    hashType: 'type',
    args: '0xf9a9ad51ed14936d33f7bb854aaefa5f47a3ccbd',
  }
  const indexer = new CellIndexer(BRANCH_NODE_URL)

  const balance = await indexer.getCellsCapacity({ script: lock, scriptType: 'lock' })
  console.log('balance capacity', BigInt(balance.capacity).toString())

  const cells = await indexer.getCells({ script: lock, scriptType: 'lock' }, { limit: 3 })
  console.log('cells', JSON.stringify(cells))

  const transactions = await indexer.getTransactions({ script: lock, scriptType: 'lock' }, { limit: 3 })
  console.log('transactions', JSON.stringify(transactions))
}

run()


================================================
File: examples/branch/package.json
================================================
{
  "name": "branch-chain-examples",
  "version": "0.1.0",
  "description": "Branch chain examples of UTXO Stack",
  "type": "commonjs",
  "dependencies": {
    "@utxo-stack/branch": "workspace:*"
  }
}


================================================
File: examples/branch/transfer.ts
================================================
import { addressToScript, BranchComponents, EMPTY_WITNESS_ARGS } from '@utxo-stack/branch'
import { BRANCH_PRIVATE_KEY, branchAddress, collector } from './env'

const TRANSFER_SATOSHI = BigInt(10000)
const Fee = BigInt(600)

const transferSatoshi = async () => {
  const lock = addressToScript(branchAddress)

  const cells = await collector.getCells({ lock })
  if (cells.length === 0) {
    throw new Error('No empty cells found')
  }
  const { inputs, sumInputsCapacity } = collector.collectInputs(cells, TRANSFER_SATOSHI, Fee)

  const outputs: BranchComponents.CellOutput[] = [
    {
      lock,
      capacity: `0x${(TRANSFER_SATOSHI - Fee).toString(16)}`,
    },
    {
      lock,
      capacity: `0x${(sumInputsCapacity - TRANSFER_SATOSHI).toString(16)}`,
    },
  ]
  const cellDeps = [await collector.branch.loadSecp256k1Dep()]
  const witnesses = inputs.map((_, index) => (index === 0 ? EMPTY_WITNESS_ARGS : '0x'))

  const rawTx: BranchComponents.RawTransactionToSign = {
    version: '0x0',
    cellDeps,
    headerDeps: [],
    inputs,
    outputs,
    outputsData: ['0x', '0x'],
    witnesses,
  }
  const signedTx = collector.branch.signTransaction(BRANCH_PRIVATE_KEY)(rawTx)
  const txHash = await collector.branch.rpc.sendTransaction(signedTx)

  console.log('Transfer satoshi on Branch chain successfully and tx hash is', txHash)
}

transferSatoshi()


================================================
File: examples/branch/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2021",
    "lib": ["dom", "esnext"],
    "module": "NodeNext",
    "composite": false,
    "resolveJsonModule": true,
    "strictNullChecks": true,
    "noEmit": true,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "NodeNext",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}


================================================
File: examples/branch/.env.example
================================================
# True for Branch chain Mainnet and false for Branch chain Testnet, the default value is false
IS_MAINNET=false

# The Branch chain secp256k1 private key whose format is 32bytes hex string with 0x prefix
BRANCH_SECP256K1_PRIVATE_KEY=0x-private-key

# Branch chain node url which should be matched with IS_MAINNET
BRANCH_NODE_URL=https://branch0.dev.utxostack.network 


================================================
File: examples/leap/README.md
================================================
# Examples of leaping between CKB and Branch chain

## How to Start

Copy the `.env.example` file to `.env`:

```shell
cd examples/leap && cp .env.example .env
```

Update the configuration values:

```yaml
# True for CKB Mainnet and false for CKB Testnet, the default value is false
IS_MAINNET=false

# The CKB secp256k1 private key whose format is 32bytes hex string with 0x prefix
CKB_SECP256K1_PRIVATE_KEY=0x-private-key

# CKB node url which should match IS_MAINNET
CKB_NODE_URL=https://testnet.ckb.dev/rpc

```

### Leap xUDT from CKB to Branch chain

```shell
npx ts-node leap-to-branch.ts 
```

### Unlock Request cells after timeout

You can unlock request cells after timeout to cancel leaping from CKB to Branch chain

```shell
npx ts-node unlock-request-cells.ts 
```


================================================
File: examples/leap/env.ts
================================================
import dotenv from 'dotenv'
import { AddressPrefix, Collector, privateKeyToAddress } from '@utxo-stack/branch'

dotenv.config({ path: __dirname + '/.env' })

export const isMainnet = process.env.IS_MAINNET === 'true' ? true : false

export const ckbCollector = new Collector(process.env.CKB_NODE_URL!)
export const CKB_PRIVATE_KEY = process.env.CKB_SECP256K1_PRIVATE_KEY!
export const ckbAddress = privateKeyToAddress(CKB_PRIVATE_KEY, {
  prefix: isMainnet ? AddressPrefix.Mainnet : AddressPrefix.Testnet,
})

export const branchCollector = new Collector(process.env.BRANCH_NODE_URL!)
export const BRANCH_PRIVATE_KEY = process.env.BRANCH_SECP256K1_PRIVATE_KEY!
export const branchAddress = privateKeyToAddress(BRANCH_PRIVATE_KEY, {
  prefix: isMainnet ? AddressPrefix.Mainnet : AddressPrefix.Testnet,
})

console.log('ckb address', ckbAddress)


================================================
File: examples/leap/leap-capacity-to-ckb.ts
================================================
import { scriptToHash } from '@utxo-stack/branch'
import { generateTimeout, genLeapingCapacityToCkbRequestTx, getCkbXudtTypeScript } from '@utxo-stack/leap'
import { branchCollector, isMainnet, branchAddress, BRANCH_PRIVATE_KEY, ckbAddress } from './env'

const leapCapacityToCkb = async () => {
  // The following variables can be updated by developers, and it is recommended to use 48 block numbers as a minimum timeout
  const timeoutBlockNumber = BigInt(48)
  const transferAmount = BigInt(80 * 10 ** 8)

  // owner can unlock request cell after 48 ckb blocks
  const timeout = generateTimeout({ relative: true, type: 'blockNumber', value: timeoutBlockNumber })
  // The request type hash is from the Message Queue cell of CKB
  const requestTypeHash = scriptToHash({
    codeHash: '0x9c6933d977360f115a3e9cd5a2e0e475853681b80d775d93ad0f8969da343e56',
    args: '0x4242',
    hashType: 'type',
  })
  const unsignedTx = await genLeapingCapacityToCkbRequestTx({
    branchCollector,
    fromCkbAddress: ckbAddress,
    fromBranchAddress: branchAddress,
    assetTypeScript: {
      ...getCkbXudtTypeScript(isMainnet),
      args: '0x562e4e8a2f64a3e9c24beb4b7dd002d0ad3b842d0cc77924328e36ad114e3ebe',
    },
    transferAmount,
    requestTypeHash,
    timeout,
    isMainnet,
  })
  // If you use another lock script(JoyID, omni, etc.), the related cellDep should be added to cellDeps
  unsignedTx.cellDeps.push(await branchCollector.branch.loadSecp256k1Dep())

  console.log(JSON.stringify(unsignedTx))

  // If you use another lock script(JoyID, omni, etc.), the related signer should be used to sign the transaction
  const signedTx = branchCollector.branch.signTransaction(BRANCH_PRIVATE_KEY)(unsignedTx)
  const txHash = await branchCollector.branch.rpc.sendTransaction(signedTx)

  console.log('Leap Capacity from Branch to CKB chain and Branch tx hash is', txHash)
}

leapCapacityToCkb()


================================================
File: examples/leap/leap-to-branch.ts
================================================
import { scriptToHash } from '@utxo-stack/branch'
import {
  generateTimeout,
  genLeapingFromCkbToBranchRequestTx,
  getCkbSecp256k1CellDep,
  getCkbXudtTypeScript,
  utf8ToHex,
} from '@utxo-stack/leap'
import { CKB_PRIVATE_KEY, ckbAddress, ckbCollector, isMainnet } from './env'

// The chain id of the https://branch0.dev.utxostack.network
const CHAIN_ID = '/branch_dev/020e7471'

const leapXudtToBranch = async () => {
  // The following variables can be updated by developers, and it is recommended to use 48 block numbers as a minimum timeout
  const timeoutBlockNumber = BigInt(48)
  const transferAmount = BigInt(420 * 10 ** 8)

  // owner can unlock request cell after 48 ckb blocks
  const timeout = generateTimeout({ relative: true, type: 'blockNumber', value: timeoutBlockNumber })
  // The request type hash is from the Message Queue cell of CKB
  const requestTypeHash = scriptToHash({
    codeHash: '0x2da1e80cec3e553a76e22d826b63ce5f65d77622de48caa5a2fe724b0f9a18f2',
    args: '0x4242',
    hashType: 'type',
  })
  const unsignedTx = await genLeapingFromCkbToBranchRequestTx({
    ckbCollector,
    fromCkbAddress: ckbAddress,
    assetTypeScript: {
      ...getCkbXudtTypeScript(isMainnet),
      args: '0x562e4e8a2f64a3e9c24beb4b7dd002d0ad3b842d0cc77924328e36ad114e3ebe',
    },
    transferAmount,
    requestTypeHash,
    timeout,
    targetChainId: utf8ToHex(CHAIN_ID),
    isMainnet,
  })
  // If you use another lock script(JoyID, omni, etc.), the related cellDep should be added to cellDeps
  unsignedTx.cellDeps.push(getCkbSecp256k1CellDep(isMainnet))

  // If you use another lock script(JoyID, omni, etc.), the related signer should be used to sign the transaction
  const signedTx = ckbCollector.branch.signTransaction(CKB_PRIVATE_KEY)(unsignedTx)
  const txHash = await ckbCollector.branch.rpc.sendTransaction(signedTx)

  console.log('Leap xUDT from CKB to Branch chain and CKB tx hash is', txHash)
}

leapXudtToBranch()


================================================
File: examples/leap/leap-to-ckb.ts
================================================
import { scriptToHash } from '@utxo-stack/branch'
import { generateTimeout, genLeapingFromBranchToCkbRequestTx, getCkbXudtTypeScript } from '@utxo-stack/leap'
import { branchCollector, isMainnet, ckbAddress, CKB_PRIVATE_KEY } from './env'

const leapXudtToCkb = async () => {
  // The following variables can be updated by developers, and it is recommended to use 48 block numbers as a minimum timeout
  const timeoutBlockNumber = BigInt(48)
  const transferAmount = BigInt(100 * 10 ** 8)

  // owner can unlock request cell after 48 ckb blocks
  const timeout = generateTimeout({ relative: true, type: 'blockNumber', value: timeoutBlockNumber })
  // The request type hash is from the Message Queue cell of CKB
  const requestTypeHash = scriptToHash({
    codeHash: '0x9c6933d977360f115a3e9cd5a2e0e475853681b80d775d93ad0f8969da343e56',
    args: '0x4242',
    hashType: 'type',
  })
  const unsignedTx = await genLeapingFromBranchToCkbRequestTx({
    branchCollector,
    fromBranchAddress: ckbAddress,
    assetTypeScript: {
      ...getCkbXudtTypeScript(isMainnet),
      args: '0x92b419a8d8e03c683a47b960f707f2b866f6114b70327b6628762719b243c5ca',
    },
    transferAmount,
    requestTypeHash,
    timeout,
    isMainnet,
  })
  // If you use another lock script(JoyID, omni, etc.), the related cellDep should be added to cellDeps
  unsignedTx.cellDeps.push(await branchCollector.branch.loadSecp256k1Dep())

  // If you use another lock script(JoyID, omni, etc.), the related signer should be used to sign the transaction
  const signedTx = branchCollector.branch.signTransaction(CKB_PRIVATE_KEY)(unsignedTx)
  const txHash = await branchCollector.branch.rpc.sendTransaction(signedTx)

  console.log('Leap xUDT from Branch to CKB chain and Branch tx hash is', txHash)
}

leapXudtToCkb()


================================================
File: examples/leap/package.json
================================================
{
  "name": "leap-examples",
  "version": "0.1.0",
  "description": "Leap examples of UTXO Stack",
  "type": "commonjs",
  "dependencies": {
    "@utxo-stack/branch": "workspace:*",
    "@utxo-stack/leap": "workspace:*"
  }
}


================================================
File: examples/leap/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2021",
    "lib": ["dom", "esnext"],
    "module": "NodeNext",
    "composite": false,
    "resolveJsonModule": true,
    "strictNullChecks": true,
    "noEmit": true,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "NodeNext",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}


================================================
File: examples/leap/unlock-ckb-request-cells.ts
================================================
import {
  addressToScript,
  rawTransactionToHash,
  scriptToHash,
  serializeWitnessArgs,
  signWitnesses,
} from '@utxo-stack/branch'
import { genUnlockingCkbRequestCellsTx, getCkbRequestLockScript, getCkbSecp256k1CellDep } from '@utxo-stack/leap'
import { CKB_PRIVATE_KEY, ckbAddress, ckbCollector, isMainnet } from './env'

const unlockRequestCells = async () => {
  const unsignedTx = await genUnlockingCkbRequestCellsTx({
    ckbCollector,
    ckbAddress,
    requestOutPoints: [
      {
        txHash: '0x17affa4383b1a39a14945ab701e0323b81ddfb05764685286effcc131f0b8db8',
        index: '0x0',
      },
    ],
    isMainnet,
  })
  // If you use another lock script(JoyID, omni, etc.), the related cellDep should be added to cellDeps
  unsignedTx.cellDeps.push(getCkbSecp256k1CellDep(isMainnet))

  // If you use another lock script(JoyID, omni, etc.), the related signer should be used to sign the transaction
  const keyMap = new Map<string, string>()
  keyMap.set(scriptToHash(addressToScript(ckbAddress)), CKB_PRIVATE_KEY)
  keyMap.set(scriptToHash(getCkbRequestLockScript(isMainnet)), '')

  // The cell to pay transaction fee is at the last of the inputs
  const feePaidCellIndex = unsignedTx.inputs.length - 1
  const cells = unsignedTx.inputs.map((input, index) => ({
    outPoint: input.previousOutput,
    lock: index === feePaidCellIndex ? addressToScript(ckbAddress) : getCkbRequestLockScript(isMainnet),
  }))

  const emptyWitness = { lock: '', inputType: '', outputType: '' }
  unsignedTx.witnesses = [...unsignedTx.witnesses, emptyWitness]

  const transactionHash = rawTransactionToHash(unsignedTx)
  const signedWitnesses = signWitnesses(keyMap)({
    transactionHash,
    witnesses: unsignedTx.witnesses,
    inputCells: cells,
    skipMissingKeys: true,
  })

  const signedTx = {
    ...unsignedTx,
    witnesses: signedWitnesses.map(witness => (typeof witness !== 'string' ? serializeWitnessArgs(witness) : witness)),
  }
  const txHash = await ckbCollector.branch.rpc.sendTransaction(signedTx)

  console.log('Unlock CKB request cells and CKB tx hash is', txHash)
}

unlockRequestCells()


================================================
File: examples/leap/.env.example
================================================
# True for CKB Mainnet and false for CKB Testnet, the default value is false
IS_MAINNET=false

# The CKB secp256k1 private key whose format is 32bytes hex string with 0x prefix
CKB_SECP256K1_PRIVATE_KEY=0x-private-key

# CKB node url which should match IS_MAINNET
CKB_NODE_URL=https://testnet.ckb.dev/rpc


# The Branch chain secp256k1 private key whose format is 32bytes hex string with 0x prefix
BRANCH_SECP256K1_PRIVATE_KEY=0x-private-key

# Branch chain node url which should be matched with IS_MAINNET
BRANCH_NODE_URL=https://branch0.dev.utxostack.network 

================================================
File: packages/branch/package.json
================================================
{
  "name": "@utxo-stack/branch",
  "version": "0.1.0",
  "description": "Branch chain JavaScript SDK of UTXO Stack",
  "homepage": "https://github.com/ckb-cell/utxo-stack-sdk#readme",
  "license": "MIT",
  "sideEffects": false,
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "src"
  ],
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./package.json": "./package.json"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ckb-cell/utxo-stack-sdk.git"
  },
  "scripts": {
    "build": "tsup",
    "test": "npx jest",
    "test:watch": "npx jest --watch"
  },
  "bugs": {
    "url": "https://github.com/ckb-cell/utxo-stack-sdk/issues"
  },
  "dependencies": {
    "axios": "1.7.2",
    "bech32": "2.0.0",
    "elliptic": "6.5.5",
    "camelcase-keys": "^7.0.2",
    "convert-keys": "1.3.4",
    "jsbi": "4.3.0"
  },
  "devDependencies": {
    "@types/bitcoinjs-lib": "5.0.0",
    "@types/elliptic": "6.4.18"
  }
}


================================================
File: packages/branch/tsconfig.json
================================================
{
  "compilerOptions": {
    "allowJs": true,
    "baseUrl": ".",
    "downlevelIteration": true,
    "esModuleInterop": true,
    "isolatedModules": true,
    "jsx": "react-jsx",
    "lib": ["es2021", "dom"],
    "module": "esnext",
    "moduleResolution": "node",
    "noEmit": true,
    "noImplicitAny": true,
    "noUncheckedIndexedAccess": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "strictNullChecks": true,
    "target": "es2021"
  },
  "exclude": ["**/node_modules/**", "**/dist/**", "*/**/debug.ts"],
  "include": ["src/**/*", "tsup-base.config.ts", "eslintrc.js"]
}


================================================
File: packages/branch/tsup.config.ts
================================================
import { defineConfig } from 'tsup'

import { dependencies, name } from './package.json'

import config from '../../tsup-base.config'

export default defineConfig({
  ...config,
  name,
  external: Object.keys(dependencies),
  platform: 'neutral',
})


================================================
File: packages/branch/src/index.ts
================================================
export * from './signer'
export * from './rpc'
export * from './utils'
export * from './types'
export * from './indexer'
export * from './collector'


================================================
File: packages/branch/src/__test__/__mocks__/CellCollector.js
================================================
module.exports = class CellCollector {
  collect = jest.fn(() =>
    Array.from({ length: 10 }, (_, idx) => ({
      cell_output: {
        type: `mock_type ${idx}`,
        capacity: `mock_capacity ${idx}`,
      },
      out_point: {
        tx_Hash: `mock_tx_hash ${idx}`,
        index: `mock_index ${idx}`,
      },
    })),
  )
}


================================================
File: packages/branch/src/__test__/__mocks__/rpc.js
================================================
const genesisBlock = require('./data/genesisBlock.json')
const liveCell = require('./data/liveCell')

module.exports = {
  getBlockByNumber: jest.fn().mockResolvedValue(genesisBlock),
  getTipBlockNumber: jest.fn().mockResolvedValue('0x1000'),
  getLiveCell: jest.fn().mockResolvedValue(liveCell),
}


================================================
File: packages/branch/src/__test__/__mocks__/data/genesisBlock.json
================================================
{
  "header": {
    "compactTarget": "0x1e015555",
    "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "transactionsRoot": "0x0d31bf4fe7d0274d8331c76b320dbb0c9557a21fdf599e9f56d8c369529f8961",
    "proposalsHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "extraHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "dao": "0x0469b82c6c1ea12e0000c16ff286230066cbed490e00000000b2b49f02fbfe06",
    "epoch": "0x0",
    "hash": "0x184ac4658ed0c04a126551257990db132366cac22ab6270bbbc1f8c3220f302d",
    "nonce": "0x0",
    "number": "0x0",
    "timestamp": "0x16e77847600",
    "version": "0x0"
  },
  "uncles": [],
  "transactions": [
    {
      "cellDeps": [],
      "inputs": [
        {
          "previousOutput": {
            "txHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "index": "0xffffffff"
          },
          "since": "0x0"
        }
      ],
      "outputs": [
        {
          "lock": {
            "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "hashType": "data",
            "args": "0x"
          },
          "type": null,
          "capacity": "0x12a05f200"
        },
        {
          "lock": {
            "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "hashType": "data",
            "args": "0x"
          },
          "type": {
            "codeHash": "0x00000000000000000000000000000000000000000000000000545950455f4944",
            "hashType": "type",
            "args": "0x8536c9d5d908bd89fc70099e4284870708b6632356aad98734fcf43f6f71c304"
          },
          "capacity": "0x9184e72a000"
        },
        {
          "lock": {
            "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "hashType": "data",
            "args": "0x"
          },
          "type": {
            "codeHash": "0x00000000000000000000000000000000000000000000000000545950455f4944",
            "hashType": "type",
            "args": "0xb2a8500929d6a1294bf9bf1bf565f549fa4a5f1316a3306ad3d4783e64bcf626"
          },
          "capacity": "0x174876e8000"
        },
        {
          "lock": {
            "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "hashType": "data",
            "args": "0x"
          },
          "type": null,
          "capacity": "0x5f5f04610900"
        },
        {
          "lock": {
            "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "hashType": "data",
            "args": "0x"
          },
          "type": {
            "codeHash": "0x00000000000000000000000000000000000000000000000000545950455f4944",
            "hashType": "type",
            "args": "0xd813c1b15bd79c8321ad7f5819e5d9f659a1042b72e64659a2c092be68ea9758"
          },
          "capacity": "0x9184e72a000"
        },
        {
          "lock": {
            "codeHash": "0x709f3fda12f561cfacf92273c57a98fede188a3f1a59b1f888d113f9cce08649",
            "hashType": "data",
            "args": "0xb73961e46d9eb118d3de1d1e8f30b3af7bbf3160"
          },
          "type": null,
          "capacity": "0x572bfaa00"
        },
        {
          "lock": {
            "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "hashType": "data",
            "args": "0x62e907b15cbf27d5425399ebf6f0fb50ebb88f18"
          },
          "type": null,
          "capacity": "0xba8478cab540000"
        },
        {
          "lock": {
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "hashType": "type",
            "args": "0x64257f00b6b63e987609fa9be2d0c86d351020fb"
          },
          "type": null,
          "capacity": "0xba821333fadc900"
        },
        {
          "lock": {
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "hashType": "type",
            "args": "0x3f1573b44218d4c12a91919a58a863be415a2bc3"
          },
          "type": null,
          "capacity": "0xba821333fadc900"
        },
        {
          "lock": {
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "hashType": "type",
            "args": "0x57ccb07be6875f61d93636b0ee11b675494627d2"
          },
          "type": null,
          "capacity": "0xba821334b998b00"
        }
      ],
      "outputsData": [
        "0x",
        "0x",
        "0x7f454c460201010000000000000000000200f3000100000002090100000000004000000000000000a01c0000000000000100000040003800020040000c000b0001000000050000000000000000000000000001000000000000000100000000005814000000000000581400000000000000100000000000000100000006000000581400000000000058240100000000005824010000000000a007000000000000d80700000000000000100000000000002571417326e74ae3cefedaf206ef22ebd2fad6f6deeee2eae6e6eae26efe41671a9194009307070f417bb697b38467019307070fb697216993058bf28569be9523b424f32685014681460147814793884980730000000f00f00f83b784f201256310054a6362f97ac16a13870a0f940013040bf936973a948145228523b894f823acf4f8ef00501c63190576980093870a0fba97b38727413e850946a2853ee0ef00101482679c679c4363910776980093870a0fba97930d0bfa3385b70193870a0fba971308000293050bf3be9523b804f301468146014781479388e980730000000f00f00f03b704f31b0905006317093e631707418c0013870a0f2e97130c8bf13a9c800013870a0f2297214893058bf3ba9523bc04f023bc04f36285054793881982730000000f00f00f03b784f301258547630af53c6314053c6312073dc16794001387070f3697130b0bf43a9b1387070f3697c17bba9d1387070f9387070f138e8bf4938e8bf83697b697014a014d014402e88149b30ac701b38cd701b1a883b784f1a29733b787003e84631b0736c16798009387070f8509ba97214893858bf38568be9523bc04f023bc04f34e8d62850146ce860547814793881882730000000f00f00f03b784f301258547630ef532631605326314073313080002056323b004f50265da850146ea860547954793081382730000000f00f00f83b704f401253dfde39e07f7c1659385050f8800aa95e177ae973ee483b50d009c63e391f5f6a26783b58d009c67e39bf5f4a26783b50d019c6be395f5f4a26783b58d019c6fe39ff5f2416e8c0093070e0fae97a14f13850bf23e9523b004f223b4f4f5d685814785629308c382730000000f00f00f03b884f4012563100526631bf85783b584f183bf04f22eec63870f4093080e0f130e0104f298216893850bf6c69523b004f722659308a381730000000f00f00f83b704f60125631d05527ef06367f856c16690001387060f3297330707413ae41387060f329713850bfc3a952267814523a4f4fc23b0e4fcef00b00763190550a267827f98439147630af702a2678546dc439bd72700fd3763f2f602a266a26503aa8600894613160a0201922e9632f46389d74aa267dc473b8a47417ee463080a4ca276a14798426313f74cc167980003c546009387070fba9713860bfc3e969145ef00605ea26f631f051683b704fc6392ff4c41671307070f9400e1773697ba973e8685454e853ee4ef00e05b631c0514a26783b284fd83b304fd946b986f03b384fc9c67b386d2023387e30263e36748638b6742b3876740636ad7421307400b9387370b33d8e7029307300b3308e80263f10747416794009307070fb69713858bf63e959307070fb697a14f93858bf58568be9523b404f623bcf4f50146ea860547854793883882730000000f00f00f83b784f5012579e56393f73f83b784f61307000293d68703639fe63ec16613d78702fd16758f6309073c13d68701f18e63ffe63e3a863687a2171a98a19363ec073d6304f83c416790009306070fb296e177b69703b387029307070fb29713850bf73e959307070fb297a14f93850bf58568be9503b884fe23b804f623b8f4f50146ea860547994793881882730000000f00f00f83b704f50125631a05346398f73503bd04f7e2673385a74163e3a702b33565024286814633056502ef00d0006a956368a5012295b33785002a84e38f07ca4d552a8941631a91fa604a855a64ba641a69f679567ab67a167bf66b566cb66c166df27d1d6182807159e9bf4d59d9bf014402e8c16794001387070fc17e3697b304d7011387070f9387070f3697b69713838ef1138c8ef63a933e9c2148056f23bc04f023b404f71a85e285014681460947814793081f82730000000f00f00f03b784f601258547e30ef5f63df9814a8149e31b07f9c16794001387070f138e0ef736973a9e1387070f369761783a981387070f93820efa3697ba921387070f9387070f93830efcb697938e0ef23697be9e9307cf82930c0002c68b054d214bba933efc054f930d00042da8850923bc04f023b464f71a85e2850146ce8609478147de88730000000f00f00f83b784f61b090500630de91fe31609eee39667f1638cb91f03ba84f1569ab3375a01d28ae39e07ee23b894f74285f2850146ce8609479547de88730000000f00f00f83b704f7012541fde39b97f9c28516851306000276f81ef472f01aec42e416e0ef00502a826222686263027ea273c27e054f35f54267bb173d01f98fadf323b004f223b064fd76859e850146ce860947e278730000000f00f00f83b704fc1b090500e31a09e4e39a67e783b704f285db355991b542e4416898009307080fba9713030002938f0bfc3385f70123b464f8e6850947954793881282730000000f00f00f83b784f80125e31605e0639167129307080f9800ba9713060002ee853385f701ef003020631b0512416398009307030fba9713858bf622683e959307030fba9793850bf88562be9523b404f623b004f90146ea860947814793881282730000000f00f00f83b704f80125e31405da639f070b83b784f662676311f70e1307030f9400e1773697ba973e8685454e853ee4ef00401ee31f05d6416398009307030fba9713850bf73e959307030fba97214893858bf78568be9523b804f623bc04f70146ea86094781479388c882730000000f00f00f83b784f70125e31c05d263970705a267986383b704f76318f706426683b784f105473b173701a297518fb3b687003ae83e84e382069c4d5519b33b0a474199be6376d70481478507f9b60149e37a44cf4559fdb13959edb171552a89d5b15559c5b105463db955552a89d9b92d59c9b97959f9b1b383c3023387e202e37a77c23d552a8975b931552a895db949552a8945b951552a896db141552a8955b1b70700009387070099c7371501001305a5286f0030188280972100009381e139138581f5138601f9098e8145ef00b00a171500001305459619c51715000013056596ef003015ef00500002452c000146eff06ff76f00807d138781f4938781f4638be700370300001303030063050300138581f402838280938581f4938781f49d8d8d858947b3c5f50291c9370300001303030063050300138581f40283828003c781f515eb411122e006e43e84eff0bffab70700009387070081cb49651305854597000000e70000008547238cf1f4a2600264410182808280b70700009387070091cf49654111938501f61305854506e497000000e7000000a26041016ff0bff7fd777d7341132e87938587ff85671a91c10705638a97aa863288be951ae408080146814793088381730000000f00f00fa267012539e96365f3061307000d639fe70402764a77a2766a738e68ae652330c80041662330e8027d1613d786022334680223381803233cb802b377c70095c313d78601798e637ef600a216a1922334d8002338c800233cf800056341031a9182800563410341551a9182805555f5b75955e5b7986191478146032807009545630ff8025c439bd72700fd376379f60205269b152600939605028192ba9694429398060293d80802ba986300f6029125821581912e971c438145bb86d7402300b5002334150114c98280bb06d84081452300b5002334150114c982801c450d476371f710033805000545832808006399170f1d4609456375f60e8326480013f5360071ed637dd60c1bd326001b0ef3ff1b060e00894e194563f4ce0c99e16311e60c13f7c6ff094563ece70a93170302f983bd079b05d3ff41119183821522e492070008819189053301f1408a8e8a059307480023a0de0013864e00c295910798431106232ee6fe636fd7069b060700e397b7fe9b07e3ff8217f983f6979c4363e3f80693170e02f983f69723a0170103a74e0083a70e00930600021d45bb07f7406393d70483a68e0085473b87e640631cf70283a7ce001396060201920d47959f32986372f702032708001dc31127b307f7403335f00001c91d4531a00d458280094582800d45130104ff226441018280f1173335f000c5b71c450d47637ef71203380500054583280800639617131d4609456372f6128326480013f53600631b05106379d6101bd326001b0ef3ff1b060e00894e194563f0ce1099e1631de60e13f7c6ff094563e8e70e93170302f983bd079b05d3ff41119183821522e492070008819189053301f1408a8e8a059307480023a0de0013864e00c295910798431106232ee6fe636bd70a9b060700e397b7fe9b07e3ff8217f983f6979c4363eff80893170e02f983f69723a0170103a70e0083a74e00bb86e7408dc20d461d45637fd606021701934297184335cf1127b306d740b336d0001d45b5e203a78e00bb06f7408dc20d461d45637ad60482178193c2979c43a9cf9127b386d740b336d0001d458dee83a7ce000145999f85cb8d461d4563f5f602021701933a98032708001dcb1127b307f7403335f00001c91d4531a00d458280094582800d45130104ff226441018280f116b336d00069b7f116b336d00075b7f1173335f000c1bf814863da05003305a040b337a000b305b0409d8dfd5863db06003306c040b337c000b306d04093c8f8ff9d8e32882a8e2e83639e062063f1c50c13078003b357e60093f7f70f99e3611775fbc56693868635b357e600b69783c6070093070004998f958f8dc31b8e0700130300043b03c341b395c501335365003318c6013363b300331ec50193550802b377b30213160802019213570e023353b30282175d8fb30666029a87637cd70042979307f3ff636707016375d7009307e3ff4297158fb376b702021e135e0e023357b702821633eec6013306e6023a85637bce00429e1305f7ff63660e016374ce001305e7ff8217c98f01436da001e605483358d80213078003b357e80093f7f70f99e3611775fbc566b357e80093868635b69783c70700ba97130700041d8f59e7b385054105431355080213160802019293560e0233d7a502b3f7a502b305e6028217dd8eba8763fcb600c2969307f7ff63e7060163f5b6009307e7ffc2968d8e33f7a602021e135e0e02b3d6a6020217336ec7013306d6023685637bce00429e1385f6ff63660e016374ce001385e6ff8217c98f3e859a85638908003305f040b337a000b30560409d8d82801b0e07003318c801812733d7f500b395c501b357f500331ec5011355080233e6b700b377a702931508028191135306023357a7028217b3e76700b386e5023a8363fcd700c2971303f7ff63e7070163f5d7001303e7ffc297b386d740b3f7a60202160192b3d6a60282173387d502b3e5c700b68763fce500c2959387f6ff63e7050163f5e5009387e6ffc2950213998d3363f300ddb563e2d5149307800333d7f6001377f70f19e3e117f5fb456833d7f60013088835429703470700130300043e973303e340631c03008547e3eeb6f0b337c50093c717008217819331b71b0e03000127b357e600b396c601dd8e13df0602b3d7e50033f8e703939e0602b395c5013357e50093de0e023363b700135703023316c601b3d7e70302183367e800b385fe023e88637cb70036971388f7ff6367d7006375b7001388e7ff36970d8fb375e7030213135303023357e7038215b3e56500b38eee023a8363fcd501b6951303f7ff63e7d50063f5d5011303e7ffb6953387d54193170802fd55b3e76700819133f3b70013d80702f18d0192b30eb302b305b80293d60e023303c3022e939a963308c80263f5b60005460216329813d606023298636007030143e31607e37d570193f98e8216b3feee003315c501f696e37bd5e0fd1795b30143814729b54111814522e006e42a84ef00000b03b581f43c6d91c382972285ef00401f0111c96722e849641387474813044448198c26e44ae006ec0d8481441389474863958402c96749641387874813048449198c0d84814413898748639f8400e2604264a26402690561828093973400ca979c6385048297e9b793973400ca979c6385048297d9bf01476314e60001458280b307e5000507b386e50083c7070083c6f6ffe383d7fe3b85d74082802a8311c62300b3007d16050365fe82805d714ef483b981f452f056ec5ae886e4a2e026fc4af85ee4aa8a2e8a054b83b4891f81c880441b09f4ff0e042694635d0900a6600664e2744279a279027ae26a426ba26b6161828063090a0083378420638547017d396114d9bf9c441464fd376397270323a42401f5d603a704313b162b0183ab8400718f012709ef82969c44e39f77f983b7891fe38697fc49bf23340400d9bf83a7443183358410f18f812781e756858296e1bf2e858296c9bfaa858146014601456f00a0030111c96722e84964138787491304044a198c26e406ec0d849384874911e4e2604264a264056182807d1493173400a6979c638297e5b703b781f42a838337871f89e793070720233cf71e98477d487d556344e804630a0302131837003e982338c81083a8073105463b16e600b3e8c80023a817312338d82089466317d30083a64731558e23aac7309b06170009070e0794c7ba978ce301458280814501468146014781479308d00573000000635c0500411122e02a8406e43b048040ef00a00000c101a001a003b501fa5200017c01011b0d020010000000180000000ae9ffff98030000000000000000000000000000ea08010000000000c4090100000000008a090100000000000000000000000000d829010000000000882a010000000000382b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000e33cdab34126de6ecde05000ba024010000000000a0240100000000004743433a2028474e552920382e332e30004128000000726973637600011e0000000572763634693270305f6d3270305f613270305f6332703000002e7368737472746162002e74657874002e726f64617461002e65685f6672616d65002e696e69745f6172726179002e66696e695f6172726179002e64617461002e7364617461002e627373002e636f6d6d656e74002e72697363762e6174747269627574657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000010000000600000000000000b000010000000000b000000000000000a6120000000000000000000000000000020000000000000000000000000000001100000001000000020000000000000058130100000000005813000000000000000100000000000000000000000000000800000000000000000000000000000019000000010000000300000000000000582401000000000058140000000000002c00000000000000000000000000000008000000000000000000000000000000230000000e00000003000000000000008824010000000000881400000000000010000000000000000000000000000000080000000000000008000000000000002f0000000f00000003000000000000009824010000000000981400000000000008000000000000000000000000000000080000000000000008000000000000003b000000010000000300000000000000a024010000000000a014000000000000480700000000000000000000000000000800000000000000000000000000000041000000010000000300000000000000e82b010000000000e81b000000000000100000000000000000000000000000000800000000000000000000000000000048000000080000000300000000000000f82b010000000000f81b00000000000038000000000000000000000000000000080000000000000000000000000000004d0000000100000030000000000000000000000000000000f81b0000000000001100000000000000000000000000000001000000000000000100000000000000560000000300007000000000000000000000000000000000091c0000000000002900000000000000000000000000000001000000000000000000000000000000010000000300000000000000000000000000000000000000321c0000000000006800000000000000000000000000000001000000000000000000000000000000",
        "0x",
        "0x",
        "0x",
        "0x",
        "0x",
        "0x",
        "0x"
      ],
      "headerDeps": [],
      "hash": "0x15fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f",
      "version": "0x0",
      "witnesses": [
        "0x450000000c00000041000000350000001000000030000000310000000000000000000000000000000000000000000000000000000000000000000000010000000000000000"
      ]
    },
    {
      "cellDeps": [
        {
          "outPoint": {
            "txHash": "0x15fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f",
            "index": "0x3"
          },
          "depType": "code"
        },
        {
          "outPoint": {
            "txHash": "0x15fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f",
            "index": "0x1"
          },
          "depType": "code"
        }
      ],
      "inputs": [
        {
          "previousOutput": {
            "txHash": "0x15fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f",
            "index": "0x5"
          },
          "since": "0x0"
        }
      ],
      "outputs": [
        {
          "lock": {
            "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "hashType": "data",
            "args": "0x"
          },
          "type": null,
          "capacity": "0x2b95fd500"
        },
        {
          "lock": {
            "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "hashType": "data",
            "args": "0x"
          },
          "type": null,
          "capacity": "0x2b95fd500"
        }
      ],
      "outputsData": [
        "0x0200000015fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f0300000015fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f01000000",
        "0x0200000015fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f0300000015fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f04000000"
      ],
      "headerDeps": [],
      "hash": "0x84dcb061adebff4ef93d57c975ba9058a9be939d79ea12ee68003f6492448890",
      "version": "0x0",
      "witnesses": [
        "0xd860b0b711e43b40513d506363e26dabe25f876a5033156f6925288f0f6a79f85f658ccdc6c6937fbe2cb9973d4dce9715d39c6a386c4323b37059da32830f0400"
      ]
    }
  ],
  "proposals": []
}


================================================
File: packages/branch/src/__test__/__mocks__/data/liveCell.json
================================================
{
  "cell": {
    "data": {
      "content": "0x",
      "hash": "0x0000000000000000000000000000000000000000000000000000000000000000"
    },
    "output": {
      "lock": [
        {
          "lock": {
            "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
            "hashType": "type",
            "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
          },
          "type": null,
          "capacity": "0x1fd9e09516"
        }
      ],
      "type": null,
      "capacity": "0x1fd9e09516"
    }
  },
  "status": "live"
}


================================================
File: packages/branch/src/__test__/rpc/branch-rpc-helpers.js
================================================
const http = require('http')
const https = require('https')

const NODE_URL = 'http://localhost:8114'
const { BranchRPC } = require('../../../dist')

const rpc = new BranchRPC(NODE_URL)
describe('branch-rpc settings and helpers', () => {
  it('set node url', () => {
    const node = {
      url: 'http://localhost:8114',
    }
    rpc.setNode(node)
    expect(rpc.node).toEqual(node)
  })

  it('set http agent', () => {
    const httpAgent = new http.Agent()
    const node = {
      httpAgent,
    }
    rpc.setNode(node)
    expect(rpc.node.httpAgent).toBeDefined()
  })

  it('set https agent', () => {
    const httpsAgent = new https.Agent()
    const node = {
      httpsAgent,
    }
    rpc.setNode(node)
    expect(rpc.node.httpsAgent).toBeDefined()
  })

  it('has 34 basic rpc', () => {
    expect(Object.values(rpc)).toHaveLength(34)
  })

  it('set node url to http://test.localhost:8114', () => {
    const url = 'http://test.localhost:8114'
    rpc.setNode({
      url,
    })
    expect(rpc.node.url).toBe(url)
  })
})


================================================
File: packages/branch/src/__test__/rpc/branch-rpc.test.js
================================================
/* eslint-disable max-len */

jest.mock('axios')

const axiosMock = require('axios')
const { BranchRPC } = require('../../../dist')

describe('Test with mock', () => {
  const rpc = new BranchRPC('http://localhost:8114')
  const ranNum = 1
  const id = Math.round(ranNum * 10000)

  beforeAll(() => {
    jest.spyOn(global.Math, 'random').mockReturnValue(ranNum)
  })

  afterAll(() => {
    jest.restoreAllMocks()
  })

  describe('properties', () => {
    expect(rpc.paramsFormatter).not.toBeUndefined()
    expect(rpc.resultFormatter).not.toBeUndefined()
    expect(rpc.node.url).toBe('http://localhost:8114')
  })

  describe('branch-rpc success', () => {
    afterEach(() => {
      jest.clearAllMocks()
    })
    it('get block by number', async () => {
      const BLOCK_NUMBER = '0x400'
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: {
            header: {
              compact_target: '0x1e083126',
              dao: '0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000',
              epoch: '0x7080018000001',
              hash: '0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40',
              nonce: '0x0',
              number: '0x400',
              parent_hash: '0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d',
              proposals_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              timestamp: '0x5cd2b117',
              transactions_root: '0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c',
              extra_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              version: '0x0',
            },
            proposals: [],
            transactions: [
              {
                cell_deps: [],
                hash: '0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17',
                header_deps: [],
                inputs: [
                  {
                    previous_output: {
                      index: '0xffffffff',
                      tx_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                    },
                    since: '0x400',
                  },
                ],
                outputs: [
                  {
                    capacity: '0x18e64b61cf',
                    lock: {
                      args: '0x',
                      code_hash: '0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5',
                      hash_type: 'data',
                    },
                    type: null,
                  },
                ],
                outputs_data: ['0x'],
                version: '0x0',
                witnesses: [
                  '0x450000000c000000410000003500000010000000300000003100000028e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5000000000000000000',
                ],
              },
            ],
            uncles: [],
            extension: '0x636b62',
          },
        },
      })
      const res = await rpc.getBlockByNumber(BLOCK_NUMBER)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_block_by_number',
        params: [BLOCK_NUMBER],
      })
      expect(res).toEqual({
        header: {
          compactTarget: '0x1e083126',
          dao: '0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000',
          epoch: '0x7080018000001',
          hash: '0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40',
          nonce: '0x0',
          number: '0x400',
          parentHash: '0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d',
          proposalsHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
          timestamp: '0x5cd2b117',
          transactionsRoot: '0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c',
          extraHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
          version: '0x0',
        },
        proposals: [],
        transactions: [
          {
            cellDeps: [],
            hash: '0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17',
            headerDeps: [],
            inputs: [
              {
                previousOutput: {
                  index: '0xffffffff',
                  txHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                },
                since: '0x400',
              },
            ],
            outputs: [
              {
                capacity: '0x18e64b61cf',
                lock: {
                  args: '0x',
                  codeHash: '0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5',
                  hashType: 'data',
                },
                type: null,
              },
            ],
            outputsData: ['0x'],
            version: '0x0',
            witnesses: [
              '0x450000000c000000410000003500000010000000300000003100000028e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5000000000000000000',
            ],
          },
        ],
        uncles: [],
        extension: '0x636b62',
      })
    })
    it('tx pool info', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: {
            last_txs_updated_at: '0x0',
            min_fee_rate: '0x0',
            orphan: '0x0',
            pending: '0x1',
            proposed: '0x0',
            total_tx_cycles: '0x219',
            total_tx_size: '0x112',
          },
        },
      })
      const res = await rpc.txPoolInfo()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'tx_pool_info',
        params: [],
      })
      expect(res).toEqual({
        lastTxsUpdatedAt: '0x0',
        minFeeRate: '0x0',
        orphan: '0x0',
        pending: '0x1',
        proposed: '0x0',
        totalTxCycles: '0x219',
        totalTxSize: '0x112',
      })
    })

    it('clear tx pool', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: null,
        },
      })

      const res = await rpc.clearTxPool()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'clear_tx_pool',
        params: [],
      })
      expect(res).toBeNull()
    })

    describe('get raw tx pool', () => {
      it('verbose = true', async () => {
        axiosMock.mockResolvedValue({
          data: {
            id,
            jsonrpc: '2.0',
            result: {
              proposed: {
                '0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0': {
                  ancestors_count: '0x1',
                  ancestors_cycles: '0x1a00e0',
                  ancestors_size: '0x1d0',
                  cycles: '0x1a00e0',
                  fee: '0x989680',
                  size: '0x1d0',
                },
              },
              pending: {
                '0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0': {
                  ancestors_count: '0x1',
                  ancestors_cycles: '0x1a00e0',
                  ancestors_size: '0x1d0',
                  cycles: '0x1a00e0',
                  fee: '0x989680',
                  size: '0x1d0',
                },
              },
            },
          },
        })

        const res = await rpc.getRawTxPool(true)
        expect(axiosMock.mock.calls[0][0].data).toEqual({
          id,
          jsonrpc: '2.0',
          method: 'get_raw_tx_pool',
          params: [true],
        })
        expect(res).toEqual({
          proposed: {
            '0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0': {
              ancestorsCount: '0x1',
              ancestorsCycles: '0x1a00e0',
              ancestorsSize: '0x1d0',
              cycles: '0x1a00e0',
              fee: '0x989680',
              size: '0x1d0',
            },
          },
          pending: {
            '0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0': {
              ancestorsCount: '0x1',
              ancestorsCycles: '0x1a00e0',
              ancestorsSize: '0x1d0',
              cycles: '0x1a00e0',
              fee: '0x989680',
              size: '0x1d0',
            },
          },
        })
      })

      it('verbose = false', async () => {
        axiosMock.mockResolvedValue({
          data: {
            id,
            jsonrpc: '2.0',
            result: {
              pending: ['0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0'],
              proposed: [],
            },
          },
        })

        const res = await rpc.getRawTxPool(false)
        expect(axiosMock.mock.calls[0][0].data).toEqual({
          id,
          jsonrpc: '2.0',
          method: 'get_raw_tx_pool',
          params: [false],
        })
        expect(res).toEqual({
          pending: ['0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0'],
          proposed: [],
        })
      })

      it('verbose = null', async () => {
        axiosMock.mockResolvedValue({
          data: {
            id,
            jsonrpc: '2.0',
            result: {
              pending: ['0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0'],
              proposed: [],
            },
          },
        })

        const res = await rpc.getRawTxPool(null)
        expect(axiosMock.mock.calls[0][0].data).toEqual({
          id,
          jsonrpc: '2.0',
          method: 'get_raw_tx_pool',
          params: [null],
        })
        expect(res).toEqual({
          pending: ['0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0'],
          proposed: [],
        })
      })

      it('verbose = undefined', async () => {
        axiosMock.mockResolvedValue({
          data: {
            id,
            jsonrpc: '2.0',
            result: {
              pending: ['0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0'],
              proposed: [],
            },
          },
        })

        const res = await rpc.getRawTxPool()
        expect(axiosMock.mock.calls[0][0].data).toEqual({
          id,
          jsonrpc: '2.0',
          method: 'get_raw_tx_pool',
          params: [],
        })
        expect(res).toEqual({
          pending: ['0x272881d99bfa40ded47f408e1783ee15990b479ec462f11668cdd3445cc132b0'],
          proposed: [],
        })
      })
    })

    it('get current epoch', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: {
            compact_target: '0x1e083126',
            length: '0x708',
            number: '0x1',
            start_number: '0x3e8',
          },
        },
      })
      const res = await rpc.getCurrentEpoch()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_current_epoch',
        params: [],
      })
      expect(res).toEqual({
        compactTarget: '0x1e083126',
        length: '0x708',
        number: '0x1',
        startNumber: '0x3e8',
      })
    })
    it('get epoch by number', async () => {
      const BLOCK_NUMBER = '0x0'
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: {
            compact_target: '0x20010000',
            length: '0x3e8',
            number: '0x0',
            start_number: '0x0',
          },
        },
      })
      const res = await rpc.getEpochByNumber(BLOCK_NUMBER)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_epoch_by_number',
        params: [BLOCK_NUMBER],
      })
      expect(res).toEqual({
        compactTarget: '0x20010000',
        length: '0x3e8',
        number: '0x0',
        startNumber: '0x0',
      })
    })
    it.skip('dryRunTransaction', async () => {})
    it('get cellbase output capacity details', async () => {
      const BLOCK_HASH = '0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40'
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: {
            primary: '0x18ce922bca',
            proposal_reward: '0x0',
            secondary: '0x17b93605',
            total: '0x18e64b61cf',
            tx_fee: '0x0',
          },
        },
      })
      const res = await rpc.getCellbaseOutputCapacityDetails(BLOCK_HASH)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_cellbase_output_capacity_details',
        params: [BLOCK_HASH],
      })
      expect(res).toEqual({
        primary: '0x18ce922bca',
        proposalReward: '0x0',
        secondary: '0x17b93605',
        total: '0x18e64b61cf',
        txFee: '0x0',
      })
    })
    it('calculate dao maximum withdraw', async () => {
      const PARAMS = [
        {
          index: '0x0',
          txHash: '0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3',
        },
        '0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40',
      ]
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: '0x4a8b4e8a4',
        },
      })
      const res = await rpc.calculateDaoMaximumWithdraw(...PARAMS)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'calculate_dao_maximum_withdraw',
        params: [
          {
            index: '0x0',
            tx_hash: '0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3',
          },
          '0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40',
        ],
      })
      expect(res).toBe('0x4a8b4e8a4')
    })
    it('get block economic state', async () => {
      const BLOCK_HASH = '0x02530b25ad0ff677acc365cb73de3e8cc09c7ddd58272e879252e199d08df83b'

      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: {
            finalized_at: '0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40',
            issuance: {
              primary: '0x18ce922bca',
              secondary: '0x7f02ec655',
            },
            miner_reward: {
              committed: '0x0',
              primary: '0x18ce922bca',
              proposal: '0x0',
              secondary: '0x17b93605',
            },
            txs_fee: '0x0',
          },
        },
      })
      const res = await rpc.getBlockEconomicState(BLOCK_HASH)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_block_economic_state',
        params: [BLOCK_HASH],
      })
      expect(res).toEqual({
        finalizedAt: '0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40',
        issuance: {
          primary: '0x18ce922bca',
          secondary: '0x7f02ec655',
        },
        minerReward: {
          committed: '0x0',
          primary: '0x18ce922bca',
          proposal: '0x0',
          secondary: '0x17b93605',
        },
        txsFee: '0x0',
      })
    })

    describe('get transaction proof', () => {
      it('with transaction hashes and block hash', async () => {
        const BLOCK_HASH = '0x02530b25ad0ff677acc365cb73de3e8cc09c7ddd58272e879252e199d08df83b'
        const TRANSACTION_HASHES = [
          '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
        ]

        axiosMock.mockResolvedValue({
          data: {
            id,
            jsonrpc: '2.0',
            result: {
              block_hash: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
              proof: {
                indices: ['0x0'],
                lemmas: ['0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],
              },
              witnesses_root: '0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',
            },
          },
        })
        const res = await rpc.getTransactionProof(TRANSACTION_HASHES, BLOCK_HASH)
        expect(axiosMock.mock.calls[0][0].data).toEqual({
          id,
          jsonrpc: '2.0',
          method: 'get_transaction_proof',
          params: [TRANSACTION_HASHES, BLOCK_HASH],
        })
        expect(res).toEqual({
          blockHash: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          proof: {
            indices: ['0x0'],
            lemmas: ['0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],
          },
          witnessesRoot: '0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',
        })
      })

      it('with transaction hashes and without block hash', async () => {
        const TRANSACTION_HASHES = [
          '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
        ]

        axiosMock.mockResolvedValue({
          data: {
            id,
            jsonrpc: '2.0',
            result: {
              block_hash: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
              proof: {
                indices: ['0x0'],
                lemmas: ['0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],
              },
              witnesses_root: '0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',
            },
          },
        })
        const res = await rpc.getTransactionProof(TRANSACTION_HASHES)
        expect(axiosMock.mock.calls[0][0].data).toEqual({
          id,
          jsonrpc: '2.0',
          method: 'get_transaction_proof',
          params: [TRANSACTION_HASHES],
        })
        expect(res).toEqual({
          blockHash: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          proof: {
            indices: ['0x0'],
            lemmas: ['0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],
          },
          witnessesRoot: '0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',
        })
      })
    })
    it('verify transaction proof', async () => {
      const TRANSACTION_PROOF = {
        blockHash: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        proof: {
          indices: ['0x0'],
          lemmas: ['0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],
        },
        witnessesRoot: '0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',
      }
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: ['0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3'],
        },
      })
      const res = await rpc.verifyTransactionProof(TRANSACTION_PROOF)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'verify_transaction_proof',
        params: [
          {
            block_hash: TRANSACTION_PROOF.blockHash,
            proof: TRANSACTION_PROOF.proof,
            witnesses_root: TRANSACTION_PROOF.witnessesRoot,
          },
        ],
      })
      expect(res).toEqual(['0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3'])
    })

    it('get consensus', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: {
            block_version: '0x0',
            cellbase_maturity: '0x10000000000',
            dao_type_hash: '0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e',
            epoch_duration_target: '0x3840',
            genesis_hash: '0xeaa2c979898f80a12404578a9e1332d45c8ff2bf665457b10f9934203f230780',
            id: 'branch_dev',
            initial_primary_epoch_reward: '0xae6c73c3e070',
            max_block_bytes: '0x91c08',
            max_block_cycles: '0x2540be400',
            max_block_proposals_limit: '0x5dc',
            max_uncles_num: '0x2',
            median_time_block_count: '0x25',
            orphan_rate_target: { denom: '0x28', numer: '0x1' },
            permanent_difficulty_in_dummy: true,
            primary_epoch_reward_halving_interval: '0x2238',
            proposer_reward_ratio: { denom: '0xa', numer: '0x4' },
            secondary_epoch_reward: '0x37d0c8e28542',
            secp256k1_blake160_multisig_all_type_hash:
              '0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8',
            secp256k1_blake160_sighash_all_type_hash:
              '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
            tx_proposal_window: { closest: '0x2', farthest: '0xa' },
            tx_version: '0x0',
            type_id_code_hash: '0x00000000000000000000000000000000000000000000000000545950455f4944',
            hardfork_features: [
              { epoch_number: '0x0', rfc: '0028' },
              { epoch_number: '0x0', rfc: '0029' },
              { epoch_number: '0x0', rfc: '0030' },
              { epoch_number: '0x0', rfc: '0031' },
              { epoch_number: '0x0', rfc: '0032' },
              { epoch_number: '0x0', rfc: '0036' },
              { epoch_number: '0x0', rfc: '0038' },
            ],
          },
        },
      })

      const res = await rpc.getConsensus()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_consensus',
        params: [],
      })
      expect(res).toEqual({
        blockVersion: '0x0',
        cellbaseMaturity: '0x10000000000',
        daoTypeHash: '0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e',
        epochDurationTarget: '0x3840',
        genesisHash: '0xeaa2c979898f80a12404578a9e1332d45c8ff2bf665457b10f9934203f230780',
        id: 'branch_dev',
        initialPrimaryEpochReward: '0xae6c73c3e070',
        maxBlockBytes: '0x91c08',
        maxBlockCycles: '0x2540be400',
        maxBlockProposalsLimit: '0x5dc',
        maxUnclesNum: '0x2',
        medianTimeBlockCount: '0x25',
        orphanRateTarget: { denom: '0x28', numer: '0x1' },
        permanentDifficultyInDummy: true,
        primaryEpochRewardHalvingInterval: '0x2238',
        proposerRewardRatio: { denom: '0xa', numer: '0x4' },
        secondaryEpochReward: '0x37d0c8e28542',
        secp256k1Blake160MultisigAllTypeHash: '0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8',
        secp256k1Blake160SighashAllTypeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
        txProposalWindow: { closest: '0x2', farthest: '0xa' },
        txVersion: '0x0',
        typeIdCodeHash: '0x00000000000000000000000000000000000000000000000000545950455f4944',
        hardforkFeatures: [
          { epochNumber: '0x0', rfc: '0028' },
          { epochNumber: '0x0', rfc: '0029' },
          { epochNumber: '0x0', rfc: '0030' },
          { epochNumber: '0x0', rfc: '0031' },
          { epochNumber: '0x0', rfc: '0032' },
          { epochNumber: '0x0', rfc: '0036' },
          { epochNumber: '0x0', rfc: '0038' },
        ],
      })
    })

    it('get blockchain info', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            alerts: [],
            chain: 'branch_dev',
            difficulty: '0x100',
            epoch: '0xa00090000e2',
            is_initial_block_download: true,
            median_time: '0x172a87eeab0',
          },
          id,
        },
      })
      const res = await rpc.getBlockchainInfo()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_blockchain_info',
        params: [],
      })
      expect(res).toEqual({
        alerts: [],
        chain: 'branch_dev',
        difficulty: '0x100',
        epoch: '0xa00090000e2',
        isInitialBlockDownload: true,
        medianTime: '0x172a87eeab0',
      })
    })

    it('get fee fate statistics', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            mean: '0xe79d',
            median: '0x14a8',
          },
          id,
        },
      })
      const res = await rpc.getFeeRateStats()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_fee_rate_statistics',
        params: [],
      })
      expect(res).toEqual({
        mean: '0xe79d',
        median: '0x14a8',
      })
    })

    it('get fee fate statistics of null', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: null,
          id,
        },
      })
      const res = await rpc.getFeeRateStats()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_fee_rate_statistics',
        params: [],
      })
      expect(res).toEqual(null)
    })

    it('local node info', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            active: true,
            addresses: [
              {
                address: '/ip4/192.168.0.2/tcp/8112/p2p/QmTRHCdrRtgUzYLNCin69zEvPvLYdxUZLLfLYyHVY3DZAS',
                score: '0xff',
              },
            ],
            connections: '0xb',
            node_id: 'QmTRHCdrRtgUzYLNCin69zEvPvLYdxUZLLfLYyHVY3DZAS',
            protocols: [
              {
                id: '0x0',
                name: '/branch/ping',
                support_versions: ['0.0.1'],
              },
            ],
            version: '0.34.0 (f37f598 2020-07-17)',
          },
          id,
        },
      })
      const res = await rpc.localNodeInfo()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'local_node_info',
        params: [],
      })
      expect(res).toEqual({
        active: true,
        addresses: [
          {
            address: '/ip4/192.168.0.2/tcp/8112/p2p/QmTRHCdrRtgUzYLNCin69zEvPvLYdxUZLLfLYyHVY3DZAS',
            score: '0xff',
          },
        ],
        connections: '0xb',
        nodeId: 'QmTRHCdrRtgUzYLNCin69zEvPvLYdxUZLLfLYyHVY3DZAS',
        protocols: [
          {
            id: '0x0',
            name: '/branch/ping',
            supportVersions: ['0.0.1'],
          },
        ],
        version: '0.34.0 (f37f598 2020-07-17)',
      })
    })

    it('get peers', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: [],
          id,
        },
      })
      const res = await rpc.getPeers()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_peers',
        params: [],
      })
      expect(res).toEqual([])
    })

    it('get tip block number', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: '0x8dd',
          id,
        },
      })
      const res = await rpc.getTipBlockNumber()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_tip_block_number',
        params: [],
      })
      expect(res).toBe('0x8dd')
    })

    it('get block hash', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: '0x120ab9abd48e3b82f93b88eba8c50a0e1304cc2fffb5573fb14b56c6348f2305',
          id,
        },
      })
      const res = await rpc.getBlockHash('0x0')
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_block_hash',
        params: ['0x0'],
      })
      expect(res).toBe('0x120ab9abd48e3b82f93b88eba8c50a0e1304cc2fffb5573fb14b56c6348f2305')
    })

    it('get block', async () => {
      const BLOCK_HASH = '0x7c7f64c875b22807451620c9d1e9af460e851ffe82d85a90e1bccb1117e2e3a4'
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            header: {
              compact_target: '0x20010000',
              dao: '0xd6ec63f77d466d2fb394bcb565ac2300b14e9b080c222a0000418b05be0fff06',
              epoch: '0xa00090000e2',
              hash: BLOCK_HASH,
              nonce: '0x3388940124a1004051e37eb039a3dfeb',
              number: '0x8dd',
              parent_hash: '0xc4537bb867ef8103c221888f134b95078bb121c9cb2b654272e6730025304b7b',
              proposals_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              timestamp: '0x172a8804ad1',
              transactions_root: '0xcde937f363e195a97467061a45a6b5b318da02fc3fec5e76ab298e41ace0b7a1',
              extra_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              version: '0x0',
            },
            proposals: [],
            transactions: [
              {
                cell_deps: [],
                hash: '0x638f645b153c543acc63a884cf2423499bd2774b42d7dd96bd8b50ddc4b5c038',
                header_deps: [],
                inputs: [
                  {
                    previous_output: {
                      index: '0xffffffff',
                      tx_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                    },
                    since: '0x8dd',
                  },
                ],
                outputs: [
                  {
                    capacity: '0x12440cbf2a1e',
                    lock: {
                      args: '0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6',
                      code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
                      hash_type: 'type',
                    },
                    type: null,
                  },
                ],
                outputs_data: ['0x'],
                version: '0x0',
                witnesses: [
                  '0x5a0000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000e2fa82e70b062c8644b80ad7ecf6e015e5f352f60100000000',
                ],
              },
            ],
            uncles: [],
          },
          id,
        },
      })

      const res = await rpc.getBlock(BLOCK_HASH)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_block',
        params: [BLOCK_HASH],
      })
      expect(res).toEqual({
        header: {
          compactTarget: '0x20010000',
          dao: '0xd6ec63f77d466d2fb394bcb565ac2300b14e9b080c222a0000418b05be0fff06',
          epoch: '0xa00090000e2',
          hash: BLOCK_HASH,
          nonce: '0x3388940124a1004051e37eb039a3dfeb',
          number: '0x8dd',
          parentHash: '0xc4537bb867ef8103c221888f134b95078bb121c9cb2b654272e6730025304b7b',
          proposalsHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
          timestamp: '0x172a8804ad1',
          transactionsRoot: '0xcde937f363e195a97467061a45a6b5b318da02fc3fec5e76ab298e41ace0b7a1',
          extraHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
          version: '0x0',
        },
        proposals: [],
        transactions: [
          {
            cellDeps: [],
            hash: '0x638f645b153c543acc63a884cf2423499bd2774b42d7dd96bd8b50ddc4b5c038',
            headerDeps: [],
            inputs: [
              {
                previousOutput: {
                  index: '0xffffffff',
                  txHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                },
                since: '0x8dd',
              },
            ],
            outputs: [
              {
                capacity: '0x12440cbf2a1e',
                lock: {
                  args: '0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6',
                  codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
                  hashType: 'type',
                },
                type: null,
              },
            ],
            outputsData: ['0x'],
            version: '0x0',
            witnesses: [
              '0x5a0000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000e2fa82e70b062c8644b80ad7ecf6e015e5f352f60100000000',
            ],
          },
        ],
        uncles: [],
      })
    })

    it('get tip header', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            compact_target: '0x20010000',
            dao: '0xd6ec63f77d466d2fb394bcb565ac2300b14e9b080c222a0000418b05be0fff06',
            epoch: '0xa00090000e2',
            hash: '0x7c7f64c875b22807451620c9d1e9af460e851ffe82d85a90e1bccb1117e2e3a4',
            nonce: '0x3388940124a1004051e37eb039a3dfeb',
            number: '0x8dd',
            parent_hash: '0xc4537bb867ef8103c221888f134b95078bb121c9cb2b654272e6730025304b7b',
            proposals_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
            timestamp: '0x172a8804ad1',
            transactions_root: '0xcde937f363e195a97467061a45a6b5b318da02fc3fec5e76ab298e41ace0b7a1',
            extra_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
            version: '0x0',
          },
          id,
        },
      })
      const res = await rpc.getTipHeader()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_tip_header',
        params: [],
      })
      expect(res).toEqual({
        compactTarget: '0x20010000',
        dao: '0xd6ec63f77d466d2fb394bcb565ac2300b14e9b080c222a0000418b05be0fff06',
        epoch: '0xa00090000e2',
        hash: '0x7c7f64c875b22807451620c9d1e9af460e851ffe82d85a90e1bccb1117e2e3a4',
        nonce: '0x3388940124a1004051e37eb039a3dfeb',
        number: '0x8dd',
        parentHash: '0xc4537bb867ef8103c221888f134b95078bb121c9cb2b654272e6730025304b7b',
        proposalsHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        timestamp: '0x172a8804ad1',
        transactionsRoot: '0xcde937f363e195a97467061a45a6b5b318da02fc3fec5e76ab298e41ace0b7a1',
        extraHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        version: '0x0',
      })
    })

    it('get transaction', async () => {
      const TX_HASH = '0xc4a69f70877c2e00897191e0ca81edc8ad14ff81b8049c9d66523df7e365524f'
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            transaction: {
              cell_deps: [],
              hash: TX_HASH,
              header_deps: [],
              inputs: [
                {
                  previous_output: {
                    index: '0xffffffff',
                    tx_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                  },
                  since: '0x8dc',
                },
              ],
              outputs: [
                {
                  capacity: '0x12440d255842',
                  lock: {
                    args: '0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6',
                    code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
                    hash_type: 'type',
                  },
                  type: null,
                },
              ],
              outputs_data: ['0x'],
              version: '0x0',
              witnesses: [
                '0x5a0000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000e2fa82e70b062c8644b80ad7ecf6e015e5f352f60100000000',
              ],
            },
            tx_status: {
              block_hash: '0xc4537bb867ef8103c221888f134b95078bb121c9cb2b654272e6730025304b7b',
              status: 'committed',
            },
          },
          id,
        },
      })
      const res = await rpc.getTransaction(TX_HASH)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_transaction',
        params: [TX_HASH],
      })
      expect(res).toEqual({
        transaction: {
          cellDeps: [],
          hash: '0xc4a69f70877c2e00897191e0ca81edc8ad14ff81b8049c9d66523df7e365524f',
          headerDeps: [],
          inputs: [
            {
              previousOutput: {
                index: '0xffffffff',
                txHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              },
              since: '0x8dc',
            },
          ],
          outputs: [
            {
              capacity: '0x12440d255842',
              lock: {
                args: '0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6',
                codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
                hashType: 'type',
              },
              type: null,
            },
          ],
          outputsData: ['0x'],
          version: '0x0',
          witnesses: [
            '0x5a0000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000e2fa82e70b062c8644b80ad7ecf6e015e5f352f60100000000',
          ],
        },
        txStatus: {
          blockHash: '0xc4537bb867ef8103c221888f134b95078bb121c9cb2b654272e6730025304b7b',
          status: 'committed',
        },
      })
    })

    it('get live cell', async () => {
      const OUT_POINT = {
        txHash: '0xc4a69f70877c2e00897191e0ca81edc8ad14ff81b8049c9d66523df7e365524f',
        index: '0x0',
      }
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            cell: {
              data: {
                content: '0x',
                hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              },
              output: {
                capacity: '0x12440d255842',
                lock: {
                  args: '0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6',
                  code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
                  hash_type: 'type',
                },
                type: null,
              },
            },
            status: 'live',
          },
          id,
        },
      })
      const res = await rpc.getLiveCell(OUT_POINT, true)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_live_cell',
        params: [
          {
            tx_hash: '0xc4a69f70877c2e00897191e0ca81edc8ad14ff81b8049c9d66523df7e365524f',
            index: '0x0',
          },
          true,
        ],
      })
      expect(res).toEqual({
        cell: {
          data: {
            content: '0x',
            hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
          },
          output: {
            capacity: '0x12440d255842',
            lock: {
              args: '0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6',
              codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
              hashType: 'type',
            },
            type: null,
          },
        },
        status: 'live',
      })
    })

    it('get banned addresses', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: [],
          id,
        },
      })
      const res = await rpc.getBannedAddresses()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_banned_addresses',
        params: [],
      })
      expect(res).toEqual([])
    })

    it('clear banned addresses', async () => {
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: null,
          id,
        },
      })
      const res = await rpc.clearBannedAddresses()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'clear_banned_addresses',
        params: [],
      })
      expect(res).toBeNull()
    })

    it('set address to be banned', async () => {
      const PARAMS = ['1.1.1.1', 'insert', null, true, 'No reason']
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: null,
          id,
        },
      })
      const res = await rpc.setBan(...PARAMS)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'set_ban',
        params: PARAMS,
      })
      expect(res).toBeNull()
    })

    it('get sync state', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: {
            best_known_block_number: '0x248623',
            best_known_block_timestamp: '0x173943c36e4',
            fast_time: '0x3e8',
            ibd: false,
            inflight_blocks_count: '0x0',
            low_time: '0x5dc',
            normal_time: '0x4e2',
            orphan_blocks_count: '0x0',
          },
        },
      })
      const res = await rpc.syncState()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'sync_state',
        params: [],
      })
      expect(res).toEqual({
        bestKnownBlockNumber: '0x248623',
        bestKnownBlockTimestamp: '0x173943c36e4',
        fastTime: '0x3e8',
        ibd: false,
        inflightBlocksCount: '0x0',
        lowTime: '0x5dc',
        normalTime: '0x4e2',
        orphanBlocksCount: '0x0',
      })
    })

    it('set network active', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: null,
        },
      })
      const res = await rpc.setNetworkActive(false)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'set_network_active',
        params: [false],
      })
      expect(res).toBeNull()
    })

    it('add node', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: null,
        },
      })
      const PEER_ID = 'peer id'
      const ADDRESS = 'address'
      const res = await rpc.addNode(PEER_ID, ADDRESS)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'add_node',
        params: [PEER_ID, ADDRESS],
      })
      expect(res).toBeNull()
    })

    it('remove node', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: null,
        },
      })
      const PEER_ID = 'peer id'
      const res = await rpc.removeNode(PEER_ID)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'remove_node',
        params: [PEER_ID],
      })
      expect(res).toBeNull()
    })

    it('ping peers', async () => {
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: null,
        },
      })
      const res = await rpc.pingPeers()
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'ping_peers',
        params: [],
      })
      expect(res).toBeNull()
    })

    it('get header', async () => {
      const BLOCK_HASH = '0x7c7f64c875b22807451620c9d1e9af460e851ffe82d85a90e1bccb1117e2e3a4'
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            compact_target: '0x20010000',
            dao: '0xd6ec63f77d466d2fb394bcb565ac2300b14e9b080c222a0000418b05be0fff06',
            epoch: '0xa00090000e2',
            hash: '0x7c7f64c875b22807451620c9d1e9af460e851ffe82d85a90e1bccb1117e2e3a4',
            nonce: '0x3388940124a1004051e37eb039a3dfeb',
            number: '0x8dd',
            parent_hash: '0xc4537bb867ef8103c221888f134b95078bb121c9cb2b654272e6730025304b7b',
            proposals_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
            timestamp: '0x172a8804ad1',
            transactions_root: '0xcde937f363e195a97467061a45a6b5b318da02fc3fec5e76ab298e41ace0b7a1',
            extra_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
            version: '0x0',
          },
          id,
        },
      })
      const res = await rpc.getHeader(BLOCK_HASH)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_header',
        params: [BLOCK_HASH],
      })
      expect(res).toEqual({
        compactTarget: '0x20010000',
        dao: '0xd6ec63f77d466d2fb394bcb565ac2300b14e9b080c222a0000418b05be0fff06',
        epoch: '0xa00090000e2',
        hash: '0x7c7f64c875b22807451620c9d1e9af460e851ffe82d85a90e1bccb1117e2e3a4',
        nonce: '0x3388940124a1004051e37eb039a3dfeb',
        number: '0x8dd',
        parentHash: '0xc4537bb867ef8103c221888f134b95078bb121c9cb2b654272e6730025304b7b',
        proposalsHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        timestamp: '0x172a8804ad1',
        transactionsRoot: '0xcde937f363e195a97467061a45a6b5b318da02fc3fec5e76ab298e41ace0b7a1',
        extraHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        version: '0x0',
      })
    })

    it('get header by number', async () => {
      const BLOCK_NUMBER = '0x1'
      axiosMock.mockResolvedValue({
        data: {
          jsonrpc: '2.0',
          result: {
            compact_target: '0x20010000',
            dao: '0x1d78d68e4363a12ee3e511f1fa862300f091bde0110f00000053322801fbfe06',
            epoch: '0xa0002000000',
            hash: '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e',
            nonce: '0x4e51c6b50fd5a1af81c1d0c770a23c93',
            number: BLOCK_NUMBER,
            parent_hash: '0x4aa1bf4930b2fbcebf70bd0b6cc63a19ae8554d6c7e89a666433040300641db9',
            proposals_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
            timestamp: '0x1725940cb91',
            transactions_root: '0xcd95e31e21734fb796de0070407c1d4f91ec00d699f840e5ad9aa293443744e6',
            extra_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
            version: '0x0',
          },
          id,
        },
      })
      const res = await rpc.getHeaderByNumber(BLOCK_NUMBER)
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'get_header_by_number',
        params: [BLOCK_NUMBER],
      })
      expect(res).toEqual({
        compactTarget: '0x20010000',
        dao: '0x1d78d68e4363a12ee3e511f1fa862300f091bde0110f00000053322801fbfe06',
        epoch: '0xa0002000000',
        hash: '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e',
        nonce: '0x4e51c6b50fd5a1af81c1d0c770a23c93',
        number: BLOCK_NUMBER,
        parentHash: '0x4aa1bf4930b2fbcebf70bd0b6cc63a19ae8554d6c7e89a666433040300641db9',
        proposalsHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        timestamp: '0x1725940cb91',
        transactionsRoot: '0xcd95e31e21734fb796de0070407c1d4f91ec00d699f840e5ad9aa293443744e6',
        extraHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        version: '0x0',
      })
    })

    it('send transaction', async () => {
      const tx = {
        cellDeps: [
          {
            outPoint: {
              txHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              index: '0x1',
            },
            depType: 'code',
          },
        ],
        headerDeps: [],
        inputs: [
          {
            previousOutput: {
              txHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              index: '0x0',
            },
            since: '0x0',
          },
        ],
        outputs: [
          {
            capacity: '0x48c27395000',
            lock: {
              args: [],
              codeHash: '0x0000000000000000000000000000000000000000000000000000000000000001',
              hashType: 'data',
            },
            type: null,
          },
        ],
        version: '0x0',
        outputsData: ['0x'],
        witnesses: [],
      }
      axiosMock.mockResolvedValue({
        data: {
          id,
          jsonrpc: '2.0',
          result: '0xa0ef4eb5f4ceeb08a4c8524d84c5da95dce2f608e0ca2ec8091191b0f330c6e3',
        },
      })
      const res = await rpc.sendTransaction(tx, 'passthrough')
      expect(axiosMock.mock.calls[0][0].data).toEqual({
        id,
        jsonrpc: '2.0',
        method: 'send_transaction',

        params: [
          {
            cell_deps: [
              {
                out_point: {
                  tx_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                  index: '0x1',
                },
                dep_type: 'code',
              },
            ],
            header_deps: [],
            inputs: [
              {
                previous_output: {
                  tx_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                  index: '0x0',
                },
                since: '0x0',
              },
            ],
            outputs: [
              {
                capacity: '0x48c27395000',
                lock: {
                  args: [],
                  code_hash: '0x0000000000000000000000000000000000000000000000000000000000000001',
                  hash_type: 'data',
                },
                type: null,
              },
            ],
            version: '0x0',
            outputs_data: ['0x'],
            witnesses: [],
          },
          'passthrough',
        ],
      })
      expect(res).toEqual('0xa0ef4eb5f4ceeb08a4c8524d84c5da95dce2f608e0ca2ec8091191b0f330c6e3')
    })

    describe('batch request', () => {
      const batch = rpc.createBatchRequest([
        ['getBlock', '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e'],
      ])

      it('batch request can be created with empty parameters', () => {
        const emptyBatch = rpc.createBatchRequest()
        expect(emptyBatch).toHaveLength(0)
      })

      it('should has init request', () => {
        expect(batch).toEqual([['getBlock', '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e']])
      })

      it('should add a new request', () => {
        batch.add('getTipHeader')
        expect(batch).toEqual([
          ['getBlock', '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e'],
          ['getTipHeader'],
        ])
      })

      it('should remove a request', () => {
        batch.add('localNodeInfo')
        expect(batch).toEqual([
          ['getBlock', '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e'],
          ['getTipHeader'],
          ['localNodeInfo'],
        ])
        batch.remove(1)
        expect(batch).toEqual([
          ['getBlock', '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e'],
          ['localNodeInfo'],
        ])
      })

      it('should accept params in list', () => {
        const multiParamBatch = rpc.createBatchRequest([
          ['setBan', 'address', 'insert', null, true, 'mock request'],
          ['getPeers'],
        ])
        expect(multiParamBatch).toEqual([['setBan', 'address', 'insert', null, true, 'mock request'], ['getPeers']])
        multiParamBatch.add('setBan', 'address', 'delete')
        expect(multiParamBatch).toEqual([
          ['setBan', 'address', 'insert', null, true, 'mock request'],
          ['getPeers'],
          ['setBan', 'address', 'delete'],
        ])
      })

      it('should parse request and response correctly', async () => {
        axiosMock.mockResolvedValue({
          data: [
            {
              jsonrpc: '2.0',
              result: {
                header: {
                  compact_target: '0x20010000',
                  dao: '0x1d78d68e4363a12ee3e511f1fa862300f091bde0110f00000053322801fbfe06',
                  epoch: '0xa0002000000',
                  hash: '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e',
                  nonce: '0x4e51c6b50fd5a1af81c1d0c770a23c93',
                  number: '0x2',
                  parent_hash: '0x4aa1bf4930b2fbcebf70bd0b6cc63a19ae8554d6c7e89a666433040300641db9',
                  proposals_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                  timestamp: '0x1725940cb91',
                  transactions_root: '0xcd95e31e21734fb796de0070407c1d4f91ec00d699f840e5ad9aa293443744e6',
                  extra_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                  version: '0x0',
                },
                proposals: [],
                transactions: [
                  {
                    cell_deps: [],
                    hash: '0xdb9e84bc7bf583f0d0f2dcd82a41229bf52cfa45edbedfb7a4d0d3120b8e4066',
                    header_deps: [],
                    inputs: [
                      {
                        previous_output: {
                          index: '0xffffffff',
                          tx_hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                        },
                        since: '0x2',
                      },
                    ],
                    outputs: [],
                    outputs_data: [],
                    version: '0x0',
                    witnesses: [
                      '0x5a0000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000e2fa82e70b062c8644b80ad7ecf6e015e5f352f60100000000',
                    ],
                  },
                ],
                uncles: [],
              },
              id,
            },
            {
              jsonrpc: '2.0',
              result: {
                active: true,
                addresses: [
                  {
                    address: '/ip4/192.168.0.2/tcp/8112/p2p/QmTRHCdrRtgUzYLNCin69zEvPvLYdxUZLLfLYyHVY3DZAS',
                    score: '0xff',
                  },
                ],
                connections: '0xb',
                node_id: 'QmTRHCdrRtgUzYLNCin69zEvPvLYdxUZLLfLYyHVY3DZAS',
                protocols: [
                  {
                    id: '0x0',
                    name: '/branch/ping',
                    support_versions: ['0.0.1'],
                  },
                ],
                version: '0.34.0 (f37f598 2020-07-17)',
              },
              id,
            },
          ],
        })
        const res = await batch.exec()
        expect(axiosMock.mock.calls[0][0].data).toEqual([
          {
            id,
            jsonrpc: '2.0',
            method: 'get_block',
            params: ['0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e'],
          },
          { id, jsonrpc: '2.0', method: 'local_node_info', params: [] },
        ])
        expect(res).toEqual([
          {
            header: {
              compactTarget: '0x20010000',
              dao: '0x1d78d68e4363a12ee3e511f1fa862300f091bde0110f00000053322801fbfe06',
              epoch: '0xa0002000000',
              hash: '0xffd50ddb91a842234ff8f0871b941a739928c2f4a6b5cfc39de96a3f87c2413e',
              nonce: '0x4e51c6b50fd5a1af81c1d0c770a23c93',
              number: '0x2',
              parentHash: '0x4aa1bf4930b2fbcebf70bd0b6cc63a19ae8554d6c7e89a666433040300641db9',
              proposalsHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              timestamp: '0x1725940cb91',
              transactionsRoot: '0xcd95e31e21734fb796de0070407c1d4f91ec00d699f840e5ad9aa293443744e6',
              extraHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
              version: '0x0',
            },
            proposals: [],
            transactions: [
              {
                cellDeps: [],
                hash: '0xdb9e84bc7bf583f0d0f2dcd82a41229bf52cfa45edbedfb7a4d0d3120b8e4066',
                headerDeps: [],
                inputs: [
                  {
                    previousOutput: {
                      index: '0xffffffff',
                      txHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                    },
                    since: '0x2',
                  },
                ],
                outputs: [],
                outputsData: [],
                version: '0x0',
                witnesses: [
                  '0x5a0000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000e2fa82e70b062c8644b80ad7ecf6e015e5f352f60100000000',
                ],
              },
            ],
            uncles: [],
          },
          {
            active: true,
            addresses: [
              {
                address: '/ip4/192.168.0.2/tcp/8112/p2p/QmTRHCdrRtgUzYLNCin69zEvPvLYdxUZLLfLYyHVY3DZAS',
                score: '0xff',
              },
            ],
            connections: '0xb',
            nodeId: 'QmTRHCdrRtgUzYLNCin69zEvPvLYdxUZLLfLYyHVY3DZAS',
            protocols: [
              {
                id: '0x0',
                name: '/branch/ping',
                supportVersions: ['0.0.1'],
              },
            ],
            version: '0.34.0 (f37f598 2020-07-17)',
          },
        ])
      })

      it('should return empty array as response if request is an empty array', async () => {
        const emptyBatch = rpc.createBatchRequest([])
        expect(await emptyBatch.exec()).toEqual([])
      })
    })
  })

  describe('branch-rpc errors', () => {
    it('throw raw error', async () => {
      expect.assertions(1)
      try {
        await rpc.getBlock(0)
      } catch (err) {
        expect(err.message).toEqual('Expect hash to be string, but 0 received')
      }
    })

    describe('batch request', () => {
      it('should throw method not found error', () => {
        expect.assertions(1)
        try {
          rpc.createBatchRequest([['Unknown', []]])
        } catch (err) {
          expect(err.message).toEqual('[Batch Request]: Method Unknown is not found')
        }
      })

      describe('should throw errors with index', () => {
        it('should throw an error of validation', () => {
          expect.assertions(1)
          const batch = rpc.createBatchRequest([['getBlock', [0]]])
          batch
            .exec()
            .catch(err => expect(err).toEqual(new Error(`[Batch Request 0]: Expect hash to be string, but 0 received`)))
        })

        it('should return an error of mismatched json rpc id', async () => {
          expect.assertions(1)
          const batch = rpc.createBatchRequest([['localNodeInfo']])
          axiosMock.mockResolvedValue({
            data: [
              {
                id: id + 1,
                jsonrpc: '2.0',
                result: {
                  addresses: [
                    {
                      address: '/ip4/0.0.0.0/tcp/8115/p2p/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
                      score: '0x1',
                    },
                  ],
                  is_outbound: null,
                  node_id: 'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
                  version: '0.32.0 (248aa88 2020-05-22)',
                },
              },
            ],
          })
          const res = await batch.exec()
          expect(res[0]).toEqual(new Error(`[Batch Request 0]: Expect json rpc id to be 10000, but 10001 received`))
        })
      })
    })
  })
})


================================================
File: packages/branch/src/__test__/rpc/method.test.js
================================================
jest.mock('axios')
const axiosMock = require('axios')
const { Method } = require('../../../dist')

describe('Test Method', () => {
  const ranNum = 1
  const id = Math.round(ranNum * 10000)
  const NODE = { url: 'http://localhost:8114' }
  const PROPERTIES = {
    name: 'method name',
    method: 'raw_method',
    paramsFormatters: [],
  }
  const method = new Method(NODE, PROPERTIES)

  beforeAll(() => {
    jest.spyOn(global.Math, 'random').mockReturnValue(ranNum)
  })

  afterAll(() => {
    jest.restoreAllMocks()
  })
  afterEach(() => {
    axiosMock.mockClear()
  })

  it('has properties', () => {
    expect(method.name).toBe(PROPERTIES.name)
  })

  it('jsonrpc id mismatched', async () => {
    expect.assertions(1)
    axiosMock.mockResolvedValue({
      data: {
        id: id + 1,
        jsonrpc: '2.0',
        result: null,
      },
    })
    await method
      .call()
      .catch(err => expect(err).toEqual(new Error(`Expect json rpc id to be 10000, but 10001 received`)))
  })

  it('returns with error', async () => {
    expect.assertions(1)
    axiosMock.mockResolvedValue({
      data: {
        id,
        jsonrpc: '2.0',
        error: 'mock error',
      },
    })
    await method.call().catch(err => expect(err).toEqual(new Error('"mock error"')))
  })
})


================================================
File: packages/branch/src/__test__/signer/fixtures.json
================================================
{
  "loadDeps": {
    "secp256k1Dep": {
      "outPoint": {
        "txHash": "0x84dcb061adebff4ef93d57c975ba9058a9be939d79ea12ee68003f6492448890",
        "index": "0x0"
      },
      "depType": "depGroup"
    }
  },
  "signTransaction": {
    "basic transaction": {
      "params": {
        "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
        "transaction": {
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0x84dcb061adebff4ef93d57c975ba9058a9be939d79ea12ee68003f6492448890",
                "index": "0x0"
              },
              "depType": "depGroup"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "since": "0x0",
              "previousOutput": {
                "txHash": "0x001748c1b5749af9636b940ae7d8d56d12a3de83f9020e765a5e108ca87873fa",
                "index": "0x0"
              }
            },
            {
              "since": "0x0",
              "previousOutput": {
                "txHash": "0x00317da41f64a75f7cb0bd0238857e1dc75d50fae3f8bbab1e20e18840df024c",
                "index": "0x0"
              }
            }
          ],
          "outputs": [
            {
              "capacity": "0x189640200",
              "lock": {
                "args": "0x3cb5366451256c3c9f8d4e2fc2e2aa8fa5774756",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type"
              }
            },
            {
              "capacity": "0x31eb37587",
              "lock": {
                "args": "0xc11d75be4531c9c0cca7531bab077f9a1710c87c",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type"
              }
            }
          ],
          "outputsData": ["0x", "0x"],
          "version": "0x0",
          "witnesses": [
            {
              "lock": "",
              "inputType": "",
              "outputType": ""
            },
            {
              "lock": "",
              "inputType": "",
              "outputType": ""
            }
          ]
        }
      },
      "expected": {
        "cellDeps": [
          {
            "outPoint": {
              "txHash": "0x84dcb061adebff4ef93d57c975ba9058a9be939d79ea12ee68003f6492448890",
              "index": "0x0"
            },
            "depType": "depGroup"
          }
        ],
        "headerDeps": [],
        "inputs": [
          {
            "since": "0x0",
            "previousOutput": {
              "txHash": "0x001748c1b5749af9636b940ae7d8d56d12a3de83f9020e765a5e108ca87873fa",
              "index": "0x0"
            }
          },
          {
            "since": "0x0",
            "previousOutput": {
              "txHash": "0x00317da41f64a75f7cb0bd0238857e1dc75d50fae3f8bbab1e20e18840df024c",
              "index": "0x0"
            }
          }
        ],
        "outputs": [
          {
            "capacity": "0x189640200",
            "lock": {
              "args": "0x3cb5366451256c3c9f8d4e2fc2e2aa8fa5774756",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type"
            }
          },
          {
            "capacity": "0x31eb37587",
            "lock": {
              "args": "0xc11d75be4531c9c0cca7531bab077f9a1710c87c",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type"
            }
          }
        ],
        "outputsData": ["0x", "0x"],
        "version": "0x0",
        "witnesses": [
          "0x55000000100000005500000055000000410000004ff757d20ffa993dfe92de2d18eaf58f6d085383977d81d6cd20812c8dc179bd34215adcbf17df15b795e689b9e0531e2e1262c557f707b0fede6b278ae1cadd00",
          "0x10000000100000001000000010000000"
        ]
      }
    },
    "without outputs data should throw an error": {
      "params": {
        "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
        "transaction": {
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0x84dcb061adebff4ef93d57c975ba9058a9be939d79ea12ee68003f6492448890",
                "index": "0x0"
              },
              "depType": "depGroup"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "since": "0x0",
              "previousOutput": {
                "txHash": "0x001748c1b5749af9636b940ae7d8d56d12a3de83f9020e765a5e108ca87873fa",
                "index": "0x0"
              }
            },
            {
              "since": "0x0",
              "previousOutput": {
                "txHash": "0x00317da41f64a75f7cb0bd0238857e1dc75d50fae3f8bbab1e20e18840df024c",
                "index": "0x0"
              }
            }
          ],
          "outputs": [
            {
              "capacity": "0x189640200",
              "lock": {
                "args": "0x3cb5366451256c3c9f8d4e2fc2e2aa8fa5774756",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type"
              }
            },
            {
              "capacity": "0x31eb37587",
              "lock": {
                "args": "0xc11d75be4531c9c0cca7531bab077f9a1710c87c",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type"
              }
            }
          ],
          "version": "0x0",
          "witnesses": [
            {
              "lock": "",
              "inputType": "",
              "outputType": ""
            },
            {
              "lock": "",
              "inputType": "",
              "outputType": ""
            }
          ]
        }
      },
      "exception": "OutputsData is required"
    },
    "Invalid count of outputs data should throw an error": {
      "params": {
        "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
        "transaction": {
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0x84dcb061adebff4ef93d57c975ba9058a9be939d79ea12ee68003f6492448890",
                "index": "0x0"
              },
              "depType": "depGroup"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "since": "0x0",
              "previousOutput": {
                "txHash": "0x001748c1b5749af9636b940ae7d8d56d12a3de83f9020e765a5e108ca87873fa",
                "index": "0x0"
              }
            },
            {
              "since": "0x0",
              "previousOutput": {
                "txHash": "0x00317da41f64a75f7cb0bd0238857e1dc75d50fae3f8bbab1e20e18840df024c",
                "index": "0x0"
              }
            }
          ],
          "outputs": [
            {
              "capacity": "0x189640200",
              "lock": {
                "args": "0x3cb5366451256c3c9f8d4e2fc2e2aa8fa5774756",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type"
              }
            },
            {
              "capacity": "0x31eb37587",
              "lock": {
                "args": "0xc11d75be4531c9c0cca7531bab077f9a1710c87c",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type"
              }
            }
          ],
          "version": "0x0",
          "outputsData": ["0x"],
          "witnesses": [
            {
              "lock": "",
              "inputType": "",
              "outputType": ""
            },
            {
              "lock": "",
              "inputType": "",
              "outputType": ""
            }
          ]
        }
      },
      "exception": "Invalid count of outputsData"
    },
    "without private key should throw an error": {
      "params": {
        "privateKey": null,
        "transaction": {
          "deps": [
            {
              "cell": {
                "txHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "index": "0xffffffff"
              },
              "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
            }
          ],
          "inputs": [
            {
              "previousOutput": {
                "cell": {
                  "txHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "index": "0xffffffff"
                },
                "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
              },
              "since": "0x0"
            }
          ],
          "outputs": [
            {
              "capacity": "0x48c27395000",
              "data": "0x",
              "lock": {
                "args": "0x",
                "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000001"
              },
              "type": null
            }
          ],
          "version": "0x0",
          "witnesses": ["0x"]
        }
      },
      "exception": "Private key or address object is required"
    },
    "without transaction should throw an error": {
      "params": {
        "privateKey": "0xe79f3207ea4980b7fed79956d5934249ceac4751a4fae01a0f7c4a96884bc4e3",
        "transaction": null
      },
      "exception": "Transaction is required"
    },
    "without witnesses should throw an error": {
      "params": {
        "privateKey": "0xe79f3207ea4980b7fed79956d5934249ceac4751a4fae01a0f7c4a96884bc4e3",
        "transaction": {
          "deps": [
            {
              "cell": {
                "txHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "index": "0xffffffff"
              },
              "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
            }
          ],
          "inputs": [
            {
              "previousOutput": {
                "cell": {
                  "txHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "index": "0xffffffff"
                },
                "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
              },
              "since": "0x0"
            }
          ],
          "outputs": [
            {
              "capacity": "0x48c27395000",
              "data": "0x",
              "lock": {
                "args": "0x",
                "codeHash": "0x0000000000000000000000000000000000000000000000000000000000000001"
              },
              "type": null
            }
          ],
          "version": "0x0",
          "witnesses": null
        }
      },
      "exception": "Witnesses is required"
    }
  },
  "generateRawTransaction": {
    "simple": {
      "params": {
        "fromAddress": "ckt1qyqw975zuu9svtyxgjuq44lv7mspte0n2tmqa703cd",
        "toAddress": "ckt1q2n9dutjk669cfznq7httfar0gtk7qp0du3wjfvzck9l0w3k9eqhvdkr98kkxrtvuag8z2j8w4pkw2k6k4l5czshhac",
        "capacity": 783602013670,
        "safeMode": true,
        "isMainnet": false,
        "cells": [
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x0"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x1"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x2"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x3"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x4"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x5"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x6"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x7"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x8"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          },
          {
            "lock": {
              "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
              "hashType": "type",
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
            },
            "outPoint": {
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
              "index": "0x9"
            },
            "capacity": "0x1fd52bc92e",
            "data": "0x"
          }
        ],
        "deps": {
          "hashType": "type",
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "outPoint": {
            "txHash": "0x6347ee7ce5fc6828133590558b867097b895149a66e51cf353c361f7128e2091",
            "index": "0x0"
          },
          "depType": "depGroup"
        }
      },
      "expected": {
        "cellDeps": [
          {
            "depType": "depGroup",
            "outPoint": {
              "index": "0x0",
              "txHash": "0x6347ee7ce5fc6828133590558b867097b895149a66e51cf353c361f7128e2091"
            }
          }
        ],
        "headerDeps": [],
        "inputs": [
          {
            "previousOutput": {
              "index": "0x1",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x2",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x3",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x4",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x5",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x6",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          }
        ],
        "outputs": [
          {
            "capacity": "0xb67251d5e6",
            "lock": {
              "args": "0x36c329ed630d6ce750712a477543672adab57f4c",
              "codeHash": "0xa656f172b6b45c245307aeb5a7a37a176f002f6f22e92582c58bf7ba362e4176",
              "hashType": "data"
            }
          },
          {
            "capacity": "0x88cb4e12e",
            "lock": {
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type"
            }
          }
        ],
        "outputsData": ["0x", "0x"],
        "version": "0x0",
        "witnesses": [
          {
            "inputType": "",
            "outputType": "",
            "lock": ""
          },
          "0x",
          "0x",
          "0x",
          "0x",
          "0x"
        ]
      }
    },
    "complex": {
      "params": {
        "fromAddresses": ["ckt1qyqw975zuu9svtyxgjuq44lv7mspte0n2tmqa703cd"],
        "receivePairs": [
          {
            "address": "ckt1q2n9dutjk669cfznq7httfar0gtk7qp0du3wjfvzck9l0w3k9eqhvdkr98kkxrtvuag8z2j8w4pkw2k6k4l5czshhac",
            "capacity": 783602013670,
            "type": {
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type"
            }
          }
        ],
        "safeMode": true,
        "isMainnet": false,
        "cells": [
          [
            "0x641238cd95b9f5e6224da1963a0bcaa2e972dc87e56eb1ded9a35dcebbc37ff4",
            [
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x0"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x1"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x2"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x3"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x4"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x5"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x6"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x7"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x8"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              },
              {
                "lock": {
                  "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
                  "hashType": "type",
                  "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
                },
                "outPoint": {
                  "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2",
                  "index": "0x9"
                },
                "capacity": "0x1fd52bc92e",
                "data": "0x"
              }
            ]
          ]
        ],
        "deps": {
          "hashType": "type",
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "outPoint": {
            "txHash": "0x6347ee7ce5fc6828133590558b867097b895149a66e51cf353c361f7128e2091",
            "index": "0x0"
          },
          "depType": "depGroup"
        }
      },
      "expected": {
        "cellDeps": [
          {
            "depType": "depGroup",
            "outPoint": {
              "index": "0x0",
              "txHash": "0x6347ee7ce5fc6828133590558b867097b895149a66e51cf353c361f7128e2091"
            }
          }
        ],
        "headerDeps": [],
        "inputs": [
          {
            "previousOutput": {
              "index": "0x1",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x2",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x3",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x4",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x5",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          },
          {
            "previousOutput": {
              "index": "0x6",
              "txHash": "0x9160bef8b6a9e388a99184bfd8bea0e7795b487c77fe784120fb2bc3fb25d1b2"
            },
            "since": "0x0"
          }
        ],
        "outputs": [
          {
            "capacity": "0xb67251d5e6",
            "lock": {
              "args": "0x36c329ed630d6ce750712a477543672adab57f4c",
              "codeHash": "0xa656f172b6b45c245307aeb5a7a37a176f002f6f22e92582c58bf7ba362e4176",
              "hashType": "data"
            },
            "type": {
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type"
            }
          },
          {
            "capacity": "0x88cb4e12e",
            "lock": {
              "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type"
            }
          }
        ],
        "outputsData": ["0x", "0x"],
        "version": "0x0",
        "witnesses": [
          {
            "inputType": "",
            "outputType": "",
            "lock": ""
          },
          "0x",
          "0x",
          "0x",
          "0x",
          "0x"
        ]
      }
    }
  },
  "generateDaoDepositTransaction": {
    "params": {
      "fromAddress": "ckt1qyqw975zuu9svtyxgjuq44lv7mspte0n2tmqa703cd",
      "capacity": "0x174876e800",
      "fee": "0x186a0",
      "cells": [
        {
          "lock": {
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "hashType": "type",
            "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
          },
          "outPoint": {
            "txHash": "0x2da368a15fc31bbf0108bfb119b10a50742d9607530c64ca6f6f41d79621772e",
            "index": "0x0"
          },
          "capacity": "0x2f766e9925",
          "data": "0x"
        }
      ]
    },
    "expected": {
      "version": "0x0",
      "cellDeps": [
        {
          "outPoint": {
            "txHash": "0x84dcb061adebff4ef93d57c975ba9058a9be939d79ea12ee68003f6492448890",
            "index": "0x0"
          },
          "depType": "depGroup"
        },
        {
          "outPoint": {
            "txHash": "0x15fb8111fc78fa36da6af96c45ac4714cc9a33974fdae13cc524b29e1a488c7f",
            "index": "0x2"
          },
          "depType": "code"
        }
      ],
      "headerDeps": [],
      "inputs": [
        {
          "previousOutput": {
            "txHash": "0x2da368a15fc31bbf0108bfb119b10a50742d9607530c64ca6f6f41d79621772e",
            "index": "0x0"
          },
          "since": "0x0"
        }
      ],
      "outputs": [
        {
          "capacity": "0x174876e800",
          "lock": {
            "hashType": "type",
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
          },
          "type": {
            "codeHash": "0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e",
            "args": "0x",
            "hashType": "type"
          }
        },
        {
          "capacity": "0x182df62a85",
          "lock": {
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "hashType": "type",
            "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
          }
        }
      ],
      "witnesses": [{ "lock": "", "inputType": "", "outputType": "" }],
      "outputsData": ["0x0000000000000000", "0x"]
    }
  },
  "generateDaoWithdrawStartTransaction": {
    "params": {
      "outPoint": {
        "txHash": "0xe5f1f754d0f032edf073187d2b69c6d1b81cf91528f2aaf2d2aa658db4b556fd",
        "index": "0x0"
      },
      "fee": "1000",
      "cells": [
        {
          "lock": {
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "hashType": "type",
            "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
          },
          "outPoint": {
            "txHash": "0xe5f1f754d0f032edf073187d2b69c6d1b81cf91528f2aaf2d2aa658db4b556fd",
            "index": "0x1"
          },
          "capacity": "0x182df62a85",
          "data": "0x"
        },
        {
          "lock": {
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "hashType": "type",
            "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
          },
          "outPoint": {
            "txHash": "0x0e8d950607252dc0beaf879c2fd8ee989f28d8a5309d35061424212be1c07eb6",
            "index": "0x0"
          },
          "capacity": "0x2f765892a5",
          "data": "0x"
        }
      ]
    }
  }
}


================================================
File: packages/branch/src/__test__/signer/index.test.js
================================================
const fixtures = require('./fixtures.json')
const rpc = require('../__mocks__/rpc')
const CellCollector = require('../__mocks__/CellCollector')

const { Branch } = require('../../../dist')

describe('branch', () => {
  const url = 'http://localhost:8114'
  let branch
  beforeEach(() => {
    branch = new Branch(url)
  })

  describe('load secp256k1 deps', () => {
    it('should return deps when genesis block is loaded', async () => {
      branch.rpc = rpc
      const expected = fixtures.loadDeps.secp256k1Dep
      const secp256k1Dep = await branch.loadSecp256k1Dep()
      expect(secp256k1Dep).toEqual(expected)
    })
  })

  describe('sign transaction', () => {
    const fixtureTable = Object.entries(fixtures.signTransaction).map(([title, { params, expected, exception }]) => [
      title,
      params.privateKey,
      params.transaction,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, privateKey, transaction, expected, exception) => {
      expect.assertions(1)
      try {
        const signedTransactionWithPrivateKey = branch.signTransaction(privateKey)(transaction)
        expect(signedTransactionWithPrivateKey).toEqual(expected)
      } catch (err) {
        expect(err).toEqual(new Error(exception))
      }
    })
  })
})


================================================
File: packages/branch/src/__test__/signer/multisig/fixtures.json
================================================
{
  "serializeMultisigConfig": {
    "exception with config is less than 0": {
      "config": {
        "r": -1,
        "m": 2,
        "n": 3,
        "blake160s": []
      },
      "exception": "For multisig sign, signer should between 0 and 255"
    },
    "exception with config is grater than 255": {
      "config": {
        "r": 256,
        "m": 2,
        "n": 3,
        "blake160s": []
      },
      "exception": "For multisig sign, signer should between 0 and 255"
    },
    "exception with r shouldn't be greater than n": {
      "config": {
        "r": 3,
        "m": 2,
        "n": 3,
        "blake160s": []
      },
      "exception": "For m of n multisig sign, r shouldn't be greater than m"
    },
    "exception with m is greater than n": {
      "config": {
        "r": 1,
        "m": 4,
        "n": 3,
        "blake160s": []
      },
      "exception": "For m of n multisig sign, m shouldn't be greater than n"
    },
    "exception blake160s length not equal with n": {
      "config": {
        "r": 1,
        "m": 2,
        "n": 3,
        "blake160s": ["0x7c021957a27000e794f25828270f187c791443e3", "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1"]
      },
      "exception": "For m of n multisig sign, signer's length should equal with n"
    },
    "test serializeMultisigConfig": {
      "config": {
        "r": 1,
        "m": 2,
        "n": 3,
        "blake160s": [
          "0x7c021957a27000e794f25828270f187c791443e3",
          "0xb7672fcde903607f6bb150a730085c2a43c422fa",
          "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1"
        ]
      },
      "expected": "0x000102037c021957a27000e794f25828270f187c791443e3b7672fcde903607f6bb150a730085c2a43c422fad93b3564ef1b2dcf7bca781f968b3c7d2db85fd1"
    }
  },
  "hashMultisig": {
    "normal": {
      "config": {
        "r": 0,
        "m": 2,
        "n": 3,
        "blake160s": [
          "0x7c021957a27000e794f25828270f187c791443e3",
          "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
          "0xb7672fcde903607f6bb150a730085c2a43c422fa"
        ]
      },
      "expected": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
    }
  },
  "getMultisigStatus": {
    "Unsigned": {
      "config": {
        "r": 0,
        "m": 2,
        "n": 3,
        "blake160s": [
          "0x7c021957a27000e794f25828270f187c791443e3",
          "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
          "0xb7672fcde903607f6bb150a730085c2a43c422fa"
        ]
      },
      "signatures": [],
      "expected": "Unsigned"
    },
    "PartiallySigned": {
      "config": {
        "r": 0,
        "m": 2,
        "n": 3,
        "blake160s": [
          "0x7c021957a27000e794f25828270f187c791443e3",
          "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
          "0xb7672fcde903607f6bb150a730085c2a43c422fa"
        ]
      },
      "signatures": ["0x7c021957a27000e794f25828270f187c791443e3"],
      "expected": "PartiallySigned"
    },
    "Signed": {
      "config": {
        "r": 0,
        "m": 2,
        "n": 3,
        "blake160s": [
          "0x7c021957a27000e794f25828270f187c791443e3",
          "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
          "0xb7672fcde903607f6bb150a730085c2a43c422fa"
        ]
      },
      "signatures": ["0x7c021957a27000e794f25828270f187c791443e3", "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1"],
      "expected": "Signed"
    },
    "exception with More signature for multisig, all signatures overflow": {
      "config": {
        "r": 1,
        "m": 2,
        "n": 3,
        "blake160s": [
          "0x7c021957a27000e794f25828270f187c791443e3",
          "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
          "0xb7672fcde903607f6bb150a730085c2a43c422fa"
        ]
      },
      "signatures": [
        "0x7c021957a27000e794f25828270f187c791443e3",
        "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
        "0xb7672fcde903607f6bb150a730085c2a43c422fa"
      ],
      "exception": "More signature for multisig"
    },
    "exception with More signature for multisig, m signatures overflow": {
      "config": {
        "r": 1,
        "m": 1,
        "n": 3,
        "blake160s": [
          "0x7c021957a27000e794f25828270f187c791443e3",
          "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
          "0xb7672fcde903607f6bb150a730085c2a43c422fa"
        ]
      },
      "signatures": ["0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1"],
      "exception": "More signature for multisig"
    }
  },
  "isMultisigConfig": {
    "false with loss field": {
      "config": {
        "m": "2",
        "n": 3,
        "blake160s": ["0x7c021957a27000e794f25828270f187c791443e3"]
      },
      "expected": false
    },
    "false with unmatch field type": {
      "config": {
        "r": "a",
        "m": 2,
        "n": 3,
        "blake160s": ["0x7c021957a27000e794f25828270f187c791443e3"]
      },
      "expected": false
    },
    "success": {
      "config": {
        "r": 0,
        "m": 2,
        "n": 3,
        "blake160s": ["0x7c021957a27000e794f25828270f187c791443e3"]
      },
      "expected": true
    }
  }
}


================================================
File: packages/branch/src/__test__/signer/multisig/index.test.js
================================================
const { serializeMultisigConfig, hashMultisig, getMultisigStatus, isMultisigConfig } = require('../../../../dist')
const fixtures = require('./fixtures.json')

describe('test serializeMultisigConfig', () => {
  const serializeMultisigConfigTable = Object.entries(fixtures.serializeMultisigConfig).map(
    ([title, { config, expected, exception }]) => [title, config, exception, expected],
  )
  test.each(serializeMultisigConfigTable)('%s', (_title, config, exception, expected) => {
    if (exception !== undefined) {
      expect(() => serializeMultisigConfig(config)).toThrowError(exception)
    } else {
      const result = serializeMultisigConfig(config)
      expect(result).toEqual(expected)
    }
  })
})
describe('test hashMultisig', () => {
  const hashMultisigTable = Object.entries(fixtures.hashMultisig).map(([title, { config, expected, exception }]) => [
    title,
    config,
    exception,
    expected,
  ])

  test.each(hashMultisigTable)('%s', (_title, config, exception, expected) => {
    if (exception !== undefined) {
      expect(() => hashMultisig(config)).toThrowError(exception)
    } else {
      const result = hashMultisig(config)
      expect(result).toEqual(expected)
    }
  })
})
describe('test getMultisigStatus', () => {
  const table = Object.entries(fixtures.getMultisigStatus).map(
    ([title, { config, signatures, expected, exception }]) => [title, config, signatures, exception, expected],
  )

  test.each(table)('%s', (_title, config, signatures, exception, expected) => {
    if (exception !== undefined) {
      expect(() => getMultisigStatus(config, signatures)).toThrowError(exception)
    } else {
      const result = getMultisigStatus(config, signatures)
      expect(result).toEqual(expected)
    }
  })
})
describe('test isMultisigConfig', () => {
  const table = Object.entries(fixtures.isMultisigConfig).map(([title, { config, expected }]) => [
    title,
    config,
    expected,
  ])

  test.each(table)('%s', (_title, config, expected) => {
    expect(isMultisigConfig(config)).toEqual(expected)
  })
})


================================================
File: packages/branch/src/__test__/signer/signWitnessGroup/fixtures.json
================================================
{
  "empty witnesses": {
    "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [],
    "exception": "WitnessGroup cannot be empty"
  },
  "first one is witness args": {
    "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      "0x",
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "exception": "The first witness in the group should be type of WitnessArgs"
  },
  "Should pass": {
    "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "expected": [
      "0x55000000100000005500000055000000410000005bc073bf55db333d5680ddf36e4814b9ce2118cfe4504f95c7d3e9a7548e16886cf1a1481fd80ce70d5e19108a43fd17fa32aad0d46c30c3410001ed2934ad2f00",
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ]
  },
  "sign with multisig config": {
    "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "multisigConfig": {
      "r": 0,
      "m": 2,
      "n": 3,
      "blake160s": [
        "0x7c021957a27000e794f25828270f187c791443e3",
        "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
        "0xb7672fcde903607f6bb150a730085c2a43c422fa"
      ]
    },
    "expected": [
      {
        "lock": "0x52e62abe0aa34889eef6a27f29e78a500e6534e91c3ddbeaab0ea4f5a4a53a12628773309a9b18d047f318d3647315626bfab7c64ca95a21a1e1fe32a8eec6a201",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ]
  }
}


================================================
File: packages/branch/src/__test__/signer/signWitnessGroup/index.test.js
================================================
const { signWitnessGroup } = require('../../../../dist')
const fixtures = require('./fixtures.json')

describe('test sign witness group', () => {
  const fixtureTable = Object.entries(fixtures).map(
    ([title, { privateKey, transactionHash, witnesses, multisigConfig, expected, exception }]) => [
      title,
      privateKey,
      transactionHash,
      witnesses,
      multisigConfig,
      exception,
      expected,
    ],
  )

  test.each(fixtureTable)(
    '%s',
    (_title, privateKey, transactionHash, witnesses, multisigConfig, exception, expected) => {
      expect.assertions(1)
      if (exception !== undefined) {
        expect(() => signWitnessGroup(privateKey, transactionHash, witnesses, multisigConfig)).toThrowError(exception)
      } else if (privateKey !== undefined) {
        const signedWitnessGroup = signWitnessGroup(privateKey, transactionHash, witnesses, multisigConfig)
        expect(signedWitnessGroup).toEqual(expected)
      }
    },
  )

  describe('sk is function', () => {
    const transactionHash = '0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a'
    const witnesses = [
      {
        lock: '',
        inputType: '',
        outputType: '',
      },
      {
        lock: '',
        inputType: '',
        outputType: '',
      },
    ]
    const multisigConfig = {
      r: 1,
      m: 1,
      n: 2,
      blake160s: ['0x7c021957a27000e794f25828270f187c791443e3', '0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1'],
    }
    it('sk is sync', () => {
      const privateKey = v => v
      const signedWitnessGroup = signWitnessGroup(privateKey, transactionHash, witnesses)
      expect(signedWitnessGroup).toEqual([
        '0x34000000100000003400000034000000200000007739c6307c4e3698a8a8ebfdb3908a29a7cb5a382040c89806cace1ddc538b0e',
        {
          lock: '',
          inputType: '',
          outputType: '',
        },
      ])
    })
    it('sk is sync with multisigConfig', () => {
      const privateKey = v => v
      const signedWitnessGroup = signWitnessGroup(privateKey, transactionHash, witnesses, multisigConfig)
      expect(signedWitnessGroup).toEqual([
        {
          lock: '0x040db42399af0c6e32cb68160079cc40c4e8d207052fec335c52b76e3442a8a3',
          inputType: '',
          outputType: '',
        },
        {
          lock: '',
          inputType: '',
          outputType: '',
        },
      ])
    })

    it('sk result is promise', async () => {
      const privateKey = v => Promise.resolve(v)
      const signedWitnessGroup = await signWitnessGroup(privateKey, transactionHash, witnesses)
      expect(signedWitnessGroup).toEqual([
        '0x34000000100000003400000034000000200000007739c6307c4e3698a8a8ebfdb3908a29a7cb5a382040c89806cace1ddc538b0e',
        {
          lock: '',
          inputType: '',
          outputType: '',
        },
      ])
    })

    it('sk result is promise with multisigConfig', async () => {
      const privateKey = v => Promise.resolve(v)
      const signedWitnessGroup = await signWitnessGroup(privateKey, transactionHash, witnesses, multisigConfig)
      expect(signedWitnessGroup).toEqual([
        {
          lock: '0x040db42399af0c6e32cb68160079cc40c4e8d207052fec335c52b76e3442a8a3',
          inputType: '',
          outputType: '',
        },
        {
          lock: '',
          inputType: '',
          outputType: '',
        },
      ])
    })
  })
})


================================================
File: packages/branch/src/__test__/signer/signWitnesses/fixtures.json
================================================
{
  "single group": {
    "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "expected": [
      "0x55000000100000005500000055000000410000005bc073bf55db333d5680ddf36e4814b9ce2118cfe4504f95c7d3e9a7548e16886cf1a1481fd80ce70d5e19108a43fd17fa32aad0d46c30c3410001ed2934ad2f00",
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ]
  },
  "multi group no cells": {
    "privateKeys": [
      [
        "0xc6a5303d5fb970e2bd4e81e984c0a52b7bc5b42ab2b777583ea2cb74868f5708",
        "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f"
      ]
    ],
    "inputCells": [],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "exception": "Cell shouldn't be empty when key is Map"
  },
  "multi groups": {
    "privateKeys": [
      [
        "0xc6a5303d5fb970e2bd4e81e984c0a52b7bc5b42ab2b777583ea2cb74868f5708",
        "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f"
      ],
      [
        "0x0fec94c611533c9588c8ddfed557b9024f4431a65ace4b1e7106388ddd5dd87b",
        "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
      ]
    ],
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xedb5c73f2a4ad8df23467c9f3446f5851b5e33da"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xedb5c73f2a4ad8df23467c9f3446f5851b5e33da"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "expected": [
      "0x5500000010000000550000005500000041000000d59792eee1e67747d25a36304bf155665a9b552ecda2d84390ba6acfc422dc3f4b599165078ed98c4e930dec79866b50984f3458c5010faefce6574b9659329501",
      "0x550000001000000055000000550000004100000091af5eeb1632565dc4a9fb1c6e08d1f1c7da96e10ee00595a2db208f1d15faca03332a1f0f7a0f8522f6e112bb8dde4ed0015d1683b998744a0d8644f0dfd0f800",
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ]
  },
  "multi groups with skip": {
    "privateKeys": [],
    "skipMissingKeys": true,
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xedb5c73f2a4ad8df23467c9f3446f5851b5e33da"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "expected": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ]
  },
  "multi groups using signature provider": {
    "signatureProviders": [
      [
        "0xc6a5303d5fb970e2bd4e81e984c0a52b7bc5b42ab2b777583ea2cb74868f5708",
        "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f"
      ],
      [
        "0x0fec94c611533c9588c8ddfed557b9024f4431a65ace4b1e7106388ddd5dd87b",
        "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
      ]
    ],
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xedb5c73f2a4ad8df23467c9f3446f5851b5e33da"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xedb5c73f2a4ad8df23467c9f3446f5851b5e33da"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "expected": [
      "0x5500000010000000550000005500000041000000d59792eee1e67747d25a36304bf155665a9b552ecda2d84390ba6acfc422dc3f4b599165078ed98c4e930dec79866b50984f3458c5010faefce6574b9659329501",
      "0x550000001000000055000000550000004100000091af5eeb1632565dc4a9fb1c6e08d1f1c7da96e10ee00595a2db208f1d15faca03332a1f0f7a0f8522f6e112bb8dde4ed0015d1683b998744a0d8644f0dfd0f800",
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ]
  },
  "lack of private keys should throw an error": {
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "exception": "Signature provider is required"
  },
  "lack of transaction hash should throw an error": {
    "privateKey": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "exception": "Transaction hash is required"
  },
  "specified private key is not found": {
    "privateKeys": [
      [
        "0xc6a5303d5fb970e2bd4e81e984c0a52b7bc5b42ab2b777583ea2cb74868f5708",
        "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f"
      ]
    ],
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xedb5c73f2a4ad8df23467c9f3446f5851b5e33da"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xedb5c73f2a4ad8df23467c9f3446f5851b5e33da"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "exception": "The signature provider to sign lock hash 0x0fec94c611533c9588c8ddfed557b9024f4431a65ace4b1e7106388ddd5dd87b is not found"
  },
  "witnesses cannot be empty": {
    "privateKey": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "exception": "Witnesses is empty"
  },
  "spec256 and multisig sign multi groups": {
    "privateKeys": [
      [
        "0xf6e72cadbef39c71be1f128fb335db67e8a95e408814e30e1a6d609aef684c00",
        {
          "sk": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
          "blake160": "0x7c021957a27000e794f25828270f187c791443e3",
          "config": {
            "r": 0,
            "m": 2,
            "n": 3,
            "blake160s": [
              "0x7c021957a27000e794f25828270f187c791443e3",
              "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
              "0xb7672fcde903607f6bb150a730085c2a43c422fa"
            ]
          },
          "signatures": []
        }
      ],
      [
        "0x0fec94c611533c9588c8ddfed557b9024f4431a65ace4b1e7106388ddd5dd87b",
        "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
      ]
    ],
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      },
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "expected": [
      {
        "lock": "0x000002037c021957a27000e794f25828270f187c791443e3d93b3564ef1b2dcf7bca781f968b3c7d2db85fd1b7672fcde903607f6bb150a730085c2a43c422fa52e62abe0aa34889eef6a27f29e78a500e6534e91c3ddbeaab0ea4f5a4a53a12628773309a9b18d047f318d3647315626bfab7c64ca95a21a1e1fe32a8eec6a201",
        "inputType": "",
        "outputType": ""
      },
      "0x550000001000000055000000550000004100000091af5eeb1632565dc4a9fb1c6e08d1f1c7da96e10ee00595a2db208f1d15faca03332a1f0f7a0f8522f6e112bb8dde4ed0015d1683b998744a0d8644f0dfd0f800",
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ]
  },
  "spec256 and multisig sign multi groups second sign": {
    "privateKeys": [
      [
        "0xf6e72cadbef39c71be1f128fb335db67e8a95e408814e30e1a6d609aef684c00",
        {
          "sk": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
          "blake160": "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
          "config": {
            "r": 0,
            "m": 2,
            "n": 3,
            "blake160s": [
              "0x7c021957a27000e794f25828270f187c791443e3",
              "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
              "0xb7672fcde903607f6bb150a730085c2a43c422fa"
            ]
          },
          "signatures": ["0x7c021957a27000e794f25828270f187c791443e3"]
        }
      ],
      [
        "0x0fec94c611533c9588c8ddfed557b9024f4431a65ace4b1e7106388ddd5dd87b",
        "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
      ]
    ],
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      },
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "0x000002037c021957a27000e794f25828270f187c791443e3d93b3564ef1b2dcf7bca781f968b3c7d2db85fd1b7672fcde903607f6bb150a730085c2a43c422fa5ce7f8c8a6368e9755cb7cfe5f4e40aa68c9b8fbb91894c9c5b8ac4ec52df67274d00c95e55b1f3911d9b7dc4ba0ca890652d68fe48fa1ed2f98ed8b5abd801700",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "expected": [
      "0xd600000010000000d6000000d6000000c2000000000002037c021957a27000e794f25828270f187c791443e3d93b3564ef1b2dcf7bca781f968b3c7d2db85fd1b7672fcde903607f6bb150a730085c2a43c422fa5ce7f8c8a6368e9755cb7cfe5f4e40aa68c9b8fbb91894c9c5b8ac4ec52df67274d00c95e55b1f3911d9b7dc4ba0ca890652d68fe48fa1ed2f98ed8b5abd80170052e62abe0aa34889eef6a27f29e78a500e6534e91c3ddbeaab0ea4f5a4a53a12628773309a9b18d047f318d3647315626bfab7c64ca95a21a1e1fe32a8eec6a201",
      "0x550000001000000055000000550000004100000091af5eeb1632565dc4a9fb1c6e08d1f1c7da96e10ee00595a2db208f1d15faca03332a1f0f7a0f8522f6e112bb8dde4ed0015d1683b998744a0d8644f0dfd0f800",
      "0x10000000100000001000000010000000",
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ]
  },
  "sign with multisig config, but config is incorrect": {
    "privateKeys": [
      [
        "0xf6e72cadbef39c71be1f128fb335db67e8a95e408814e30e1a6d609aef684c00",
        {
          "sk": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
          "blake160": "0x7c021957a27000e794f25828270f187c791443e3",
          "config": {
            "m": 2,
            "n": 3,
            "blake160s": [
              "0x7c021957a27000e794f25828270f187c791443e3",
              "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
              "0xb7672fcde903607f6bb150a730085c2a43c422fa"
            ]
          },
          "signatures": []
        }
      ],
      [
        "0x0fec94c611533c9588c8ddfed557b9024f4431a65ace4b1e7106388ddd5dd87b",
        "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
      ]
    ],
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      },
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "exception": "Multisig options is incorrect"
  },
  "sign with multisig config, but config loss some property": {
    "privateKeys": [
      [
        "0xf6e72cadbef39c71be1f128fb335db67e8a95e408814e30e1a6d609aef684c00",
        {
          "sk": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
          "blake160": "0x7c021957a27000e794f25828270f187c791443e3",
          "signatures": []
        }
      ],
      [
        "0x0fec94c611533c9588c8ddfed557b9024f4431a65ace4b1e7106388ddd5dd87b",
        "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
      ]
    ],
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      },
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      },
      {
        "lock": {
          "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
          "hashType": "type",
          "args": "0xe2fa82e70b062c8644b80ad7ecf6e015e5f352f6"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": [
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      },
      {
        "lock": "",
        "inputType": "",
        "outputType": ""
      }
    ],
    "exception": "Multisig options miss some property"
  },
  "sign with multisig config, but first witness not object": {
    "privateKeys": [
      [
        "0xf6e72cadbef39c71be1f128fb335db67e8a95e408814e30e1a6d609aef684c00",
        {
          "sk": "0xdcec27d0d975b0378471183a03f7071dea8532aaf968be796719ecd20af6988f",
          "blake160": "0x7c021957a27000e794f25828270f187c791443e3",
          "config": {
            "r": 0,
            "m": 2,
            "n": 3,
            "blake160s": [
              "0x7c021957a27000e794f25828270f187c791443e3",
              "0xd93b3564ef1b2dcf7bca781f968b3c7d2db85fd1",
              "0xb7672fcde903607f6bb150a730085c2a43c422fa"
            ]
          },
          "signatures": []
        }
      ]
    ],
    "inputCells": [
      {
        "lock": {
          "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
          "hashType": "type",
          "args": "0xe7db180742a9b5c4f2d9319d74982503fbc88a37"
        }
      }
    ],
    "transactionHash": "0x4a4bcfef1b7448e27edf533df2f1de9f56be05eba645fb83f42d55816797ad2a",
    "witnesses": ["0x7c021957a27000e794f25828270f187c791443e3"],
    "exception": "The first witness in the group should be type of WitnessArgs"
  }
}


================================================
File: packages/branch/src/__test__/signer/signWitnesses/index.test.js
================================================
const { ECPair, signWitnesses } = require('../../../../dist')
const fixtures = require('./fixtures.json')

describe('test sign witnesses', () => {
  const fixtureTable = Object.entries(fixtures).map(
    ([
      title,
      {
        privateKey,
        privateKeys,
        signatureProviders,
        transactionHash,
        witnesses,
        inputCells,
        expected,
        exception,
        skipMissingKeys,
      },
    ]) => [
      title,
      privateKey,
      privateKeys,
      signatureProviders,
      transactionHash,
      witnesses,
      inputCells,
      skipMissingKeys,
      exception,
      expected,
    ],
  )

  test.each(fixtureTable)(
    '%s',
    (
      _title,
      privateKey,
      privateKeys,
      signatureProviders,
      transactionHash,
      witnesses,
      inputCells,
      skipMissingKeys,
      exception,
      expected,
    ) => {
      if (exception !== undefined) {
        const key = privateKey || (privateKeys && new Map(privateKeys))
        expect(() =>
          signWitnesses(key)({
            transactionHash,
            witnesses,
            inputCells,
            skipMissingKeys,
          }),
        ).toThrowError(exception)
      } else if (privateKey !== undefined) {
        const signedWitnesses = signWitnesses(privateKey)({
          transactionHash,
          witnesses,
          inputCells,
          skipMissingKeys,
        })
        expect(signedWitnesses).toEqual(expected)
      } else if (privateKeys !== undefined) {
        const keys = new Map(privateKeys)
        const signedWitnesses = signWitnesses(keys)({
          transactionHash,
          witnesses,
          inputCells,
          skipMissingKeys,
        })
        expect(signedWitnesses).toEqual(expected)
      } else if (signatureProviders !== undefined) {
        const sigProviderMaps = new Map()
        signatureProviders.forEach(([lockHash, key]) => {
          sigProviderMaps.set(lockHash, message => new ECPair(key).signRecoverable(message))
        })
        const signedWitnesses = signWitnesses(sigProviderMaps)({
          transactionHash,
          witnesses,
          inputCells,
          skipMissingKeys,
        })
        expect(signedWitnesses).toEqual(expected)
      }
    },
  )
})


================================================
File: packages/branch/src/__test__/utils/const.test.js
================================================
const { TextDecoder } = require('util')
const { PERSONAL } = require('../../../dist')

describe('Test constants', () => {
  it('PERSONAL should be encoded ckb-default-hash', () => {
    const decoded = new TextDecoder().decode(PERSONAL)
    expect(decoded).toBe('ckb-default-hash')
  })
})


================================================
File: packages/branch/src/__test__/utils/address/fixtures.json
================================================
{
  "toAddressPayload": {
    "full address of new version specifies hash_type = data1": {
      "params": [
        "0xb39bbc0b3673c7d36450bc14cfcdad2d559c6c64",
        "0xa656f172b6b45c245307aeb5a7a37a176f002f6f22e92582c58bf7ba362e4176",
        "data1"
      ],
      "expected": [
        0, 166, 86, 241, 114, 182, 180, 92, 36, 83, 7, 174, 181, 167, 163, 122, 23, 111, 0, 47, 111, 34, 233, 37, 130,
        197, 139, 247, 186, 54, 46, 65, 118, 2, 179, 155, 188, 11, 54, 115, 199, 211, 100, 80, 188, 20, 207, 205, 173,
        45, 85, 156, 108, 100
      ]
    },
    "should throw an error when its a full version address identifies the hash_type but code hash has invalid length": {
      "params": [
        "0x36c329ed630d6ce750712a477543672adab57f4c",
        "0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c135"
      ],
      "exception": "'0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c135' is not a valid code hash"
    }
  },
  "pubkeyToAddress": {
    "with configuration of { prefix: ckt }": {
      "params": [
        "0x024a501efd328e062c8675f2365970728c859c592beeefd6be8ead3d901330bc01",
        {
          "prefix": "ckt"
        }
      ],
      "expected": "ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqfkcv576ccddnn4quf2ga65xee2m26h7nq4sds0r"
    },
    "default prefix = ckb, hashType = 0x01, and codeHashOrCodeHashIndex = 0x00": {
      "params": ["0x024a501efd328e062c8675f2365970728c859c592beeefd6be8ead3d901330bc01", {}],
      "expected": "ckb1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqfkcv576ccddnn4quf2ga65xee2m26h7nqmzxl9m"
    },
    "default options = { prefix: ckt, hashType: 0x01, codeHashOrCodeHashIndex: 0x00 }": {
      "params": ["0x024a501efd328e062c8675f2365970728c859c592beeefd6be8ead3d901330bc01"],
      "expected": "ckb1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqfkcv576ccddnn4quf2ga65xee2m26h7nqmzxl9m"
    }
  },
  "parseAddress": {
    "output binary": {
      "params": ["ckt1qyqrdsefa43s6m882pcj53m4gdnj4k440axqswmu83", "binary"],
      "expected": [1, 0, 54, 195, 41, 237, 99, 13, 108, 231, 80, 113, 42, 71, 117, 67, 103, 42, 218, 181, 127, 76]
    },
    "output hex string": {
      "params": ["ckt1qyqrdsefa43s6m882pcj53m4gdnj4k440axqswmu83", "hex"],
      "expected": "0x010036c329ed630d6ce750712a477543672adab57f4c"
    },
    "default output type = binary": {
      "params": ["ckt1qyqrdsefa43s6m882pcj53m4gdnj4k440axqswmu83"],
      "expected": [1, 0, 54, 195, 41, 237, 99, 13, 108, 231, 80, 113, 42, 71, 117, 67, 103, 42, 218, 181, 127, 76]
    },
    "single sig address": {
      "params": ["ckb1qyqt8xaupvm8837nv3gtc9x0ekkj64vud3jqfwyw5v"],
      "expected": [1, 0, 179, 155, 188, 11, 54, 115, 199, 211, 100, 80, 188, 20, 207, 205, 173, 45, 85, 156, 108, 100]
    },
    "multi sig address": {
      "params": ["ckb1qyq5lv479ewscx3ms620sv34pgeuz6zagaaqklhtgg"],
      "expected": [1, 1, 79, 178, 190, 46, 93, 12, 26, 59, 134, 148, 248, 50, 53, 10, 51, 193, 104, 93, 71, 122]
    },
    "anyone can pay address": {
      "params": ["ckt1qyprdsefa43s6m882pcj53m4gdnj4k440axq77ptun"],
      "expected": [1, 2, 54, 195, 41, 237, 99, 13, 108, 231, 80, 113, 42, 71, 117, 67, 103, 42, 218, 181, 127, 76]
    },
    "data hash type full version address": {
      "params": ["ckb1q2da0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xw3vumhs9nvu786dj9p0q5elx66t24n3kxgdwd2q8"],
      "expected": [
        2, 155, 215, 224, 111, 62, 207, 75, 224, 242, 252, 210, 24, 139, 35, 241, 185, 252, 200, 142, 93, 75, 101, 168,
        99, 123, 23, 114, 59, 189, 163, 204, 232, 179, 155, 188, 11, 54, 115, 199, 211, 100, 80, 188, 20, 207, 205, 173,
        45, 85, 156, 108, 100
      ]
    },
    "type hash type full version address": {
      "params": ["ckb1qsvf96jqmq4483ncl7yrzfzshwchu9jd0glq4yy5r2jcsw04d7xlydkr98kkxrtvuag8z2j8w4pkw2k6k4l5czfy37k"],
      "expected": [
        4, 24, 146, 234, 64, 216, 43, 83, 198, 120, 255, 136, 49, 36, 80, 187, 177, 126, 22, 77, 122, 62, 10, 144, 148,
        26, 165, 136, 57, 245, 111, 141, 242, 54, 195, 41, 237, 99, 13, 108, 231, 80, 113, 42, 71, 117, 67, 103, 42,
        218, 181, 127, 76
      ]
    },
    "full version address identifies the hash_type": {
      "params": ["ckb1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqj0k2lzuhgvrgacvxtrw69"],
      "expected": [
        0, 155, 215, 224, 111, 62, 207, 75, 224, 242, 252, 210, 24, 139, 35, 241, 185, 252, 200, 142, 93, 75, 101, 168,
        99, 123, 23, 114, 59, 189, 163, 204, 232, 2, 79, 178, 190, 46, 93, 12, 26, 59, 134
      ]
    },
    "should throw an error when short version address has invalid payload size": {
      "params": ["ckt1qyqrdsefa43s6m882pcj53m4gdnj4k440axqqm65l9j"],
      "exception": "'ckt1qyqrdsefa43s6m882pcj53m4gdnj4k440axqqm65l9j' is not a valid short version address"
    },
    "should throw an error when anyone can pay address has invalid payload size": {
      "params": ["ckt1qyprdsefa43s6m882pcj53m4gdnj4k440axqqfmyd9c"],
      "exception": "'ckt1qyprdsefa43s6m882pcj53m4gdnj4k440axqqfmyd9c' is not a valid short version address"
    },
    "should throw an error when deprecated address has invalid address type format 0x03": {
      "params": ["ckt1qwn9dutjk669cfznq7httfar0gtk7qp0du3wjfvzck9l0w3k9eqhvdkr98kkxrtvuag8z2j8w4pkw2k6k4l5ctv25r2"],
      "exception": "'ckt1qwn9dutjk669cfznq7httfar0gtk7qp0du3wjfvzck9l0w3k9eqhvdkr98kkxrtvuag8z2j8w4pkw2k6k4l5ctv25r2' is not a valid address"
    },
    "should throw an error when code hash index is invalid": {
      "params": ["ckt1qyzndsefa43s6m882pcj53m4gdnj4k440axqcth0hp"],
      "exception": "'ckt1qyzndsefa43s6m882pcj53m4gdnj4k440axqcth0hp' is not a valid short version address"
    },
    "should throw an error when full version address has invalid size": {
      "params": ["ckb1qsqcjt4ypkpt20r83lugxyj9pwa30cty6737p2gfgx493qul2cgvrxhw"],
      "exception": "'ckb1qsqcjt4ypkpt20r83lugxyj9pwa30cty6737p2gfgx493qul2cgvrxhw' is not a valid full version address"
    },
    "should throw an error when full version address has invalid code hash(bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8)": {
      "params": ["ckt1qq9a0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsjzla0h"],
      "exception": "'ckt1qq9a0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsjzla0h' is not a valid address"
    },
    "should throw an error when full version address has invalid hash_type 0x03": {
      "params": ["ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqcvf0k9sc40s3azmpfvhyuudhahpsj72tseeza5p"],
      "exception": "'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqcvf0k9sc40s3azmpfvhyuudhahpsj72tseeza5p' is not a valid address"
    },
    "should throw an error when address format type is 0x00 but encode method is bech32": {
      "params": ["ckb1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsq20k2lzuhgvrgacv4tmr88"],
      "exception": "Address format type 0x00 doesn't match encode method bech32"
    },
    "should throw an error when address format type is 0x01 but encode method is bech32m": {
      "params": ["ckb1qyqylv479ewscx3ms620sv34pgeuz6zagaaqh0knz7"],
      "exception": "Address format type 0x01 doesn't match encode method bech32m"
    },
    "should throw an error when address format type is 0x02 but encode method is bech32m": {
      "params": ["ckb1q2da0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsnajhch96rq68wrqn2tmhm"],
      "exception": "Address format type 0x02 doesn't match encode method bech32m"
    },
    "should throw an error when address format type is 0x04 but encode method is bech32m": {
      "params": ["ckt1qjda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsrzta3vx9tuy0gkc2t9e88rdldcvyhjjuguz6rt"],
      "exception": "Address format type 0x04 doesn't match encode method bech32m"
    }
  },
  "addressToScript": {
    "secp256k1/blake160 address": {
      "params": ["ckb1qyqt8xaupvm8837nv3gtc9x0ekkj64vud3jqfwyw5v"],
      "expected": {
        "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
        "hashType": "type",
        "args": "0xb39bbc0b3673c7d36450bc14cfcdad2d559c6c64"
      }
    },
    "secp256k1/multisig address": {
      "params": ["ckb1qyq5lv479ewscx3ms620sv34pgeuz6zagaaqklhtgg"],
      "expected": {
        "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
        "hashType": "type",
        "args": "0x4fb2be2e5d0c1a3b8694f832350a33c1685d477a"
      }
    },
    "anyone can pay address on mainnet": {
      "params": ["ckb1qypgzvf2uphwkpgykum7d0862wtmuddf9r0qw88kle"],
      "expected": {
        "codeHash": "0xd369597ff47f29fbc0d47d2e3775370d1250b85140c670e4718af712983a2354",
        "hashType": "type",
        "args": "0x81312ae06eeb0504b737e6bcfa5397be35a928de"
      }
    },
    "anyone can pay address on testnet": {
      "params": ["ckt1qypgzvf2uphwkpgykum7d0862wtmuddf9r0qnzefn9"],
      "expected": {
        "codeHash": "0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c1356",
        "hashType": "type",
        "args": "0x81312ae06eeb0504b737e6bcfa5397be35a928de"
      }
    },
    "full version address of hashType = 'data'": {
      "params": ["ckt1q2n9dutjk669cfznq7httfar0gtk7qp0du3wjfvzck9l0w3k9eqhvdkr98kkxrtvuag8z2j8w4pkw2k6k4l5czshhac"],
      "expected": {
        "codeHash": "0xa656f172b6b45c245307aeb5a7a37a176f002f6f22e92582c58bf7ba362e4176",
        "hashType": "data",
        "args": "0x36c329ed630d6ce750712a477543672adab57f4c"
      }
    },
    "full version address of hashType = 'type'": {
      "params": ["ckt1qsvf96jqmq4483ncl7yrzfzshwchu9jd0glq4yy5r2jcsw04d7xlydkr98kkxrtvuag8z2j8w4pkw2k6k4l5c02auef"],
      "expected": {
        "codeHash": "0x1892ea40d82b53c678ff88312450bbb17e164d7a3e0a90941aa58839f56f8df2",
        "hashType": "type",
        "args": "0x36c329ed630d6ce750712a477543672adab57f4c"
      }
    },
    "full version address identifies hash_type = type": {
      "params": ["ckb1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqdnnw7qkdnnclfkg59uzn8umtfd2kwxceqxwquc4"],
      "expected": {
        "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
        "hashType": "type",
        "args": "0xb39bbc0b3673c7d36450bc14cfcdad2d559c6c64"
      }
    },
    "full version address identifies hash_type = data1": {
      "params": ["ckt1qzn9dutjk669cfznq7httfar0gtk7qp0du3wjfvzck9l0w3k9eqhvq4nnw7qkdnnclfkg59uzn8umtfd2kwxceq225jvu"],
      "expected": {
        "codeHash": "0xa656f172b6b45c245307aeb5a7a37a176f002f6f22e92582c58bf7ba362e4176",
        "hashType": "data1",
        "args": "0xb39bbc0b3673c7d36450bc14cfcdad2d559c6c64"
      }
    }
  },
  "scriptToAddress": {
    "full version mainnet address identifies hash_type = type": {
      "params": [
        {
          "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
          "hashType": "type",
          "args": "0xb39bbc0b3673c7d36450bc14cfcdad2d559c6c64"
        }
      ],
      "expected": "ckb1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqdnnw7qkdnnclfkg59uzn8umtfd2kwxceqxwquc4"
    },
    "full version testnet address identifies hash_type = type": {
      "params": [
        {
          "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
          "hashType": "type",
          "args": "0xb39bbc0b3673c7d36450bc14cfcdad2d559c6c64"
        },
        false
      ],
      "expected": "ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqdnnw7qkdnnclfkg59uzn8umtfd2kwxceqgutnjd"
    },
    "full version mainnet address identifies hash_type = data1": {
      "params": [
        {
          "codeHash": "0xa656f172b6b45c245307aeb5a7a37a176f002f6f22e92582c58bf7ba362e4176",
          "hashType": "data1",
          "args": "0xb39bbc0b3673c7d36450bc14cfcdad2d559c6c64"
        }
      ],
      "expected": "ckb1qzn9dutjk669cfznq7httfar0gtk7qp0du3wjfvzck9l0w3k9eqhvq4nnw7qkdnnclfkg59uzn8umtfd2kwxceqyclaxy"
    },
    "full version testnet address identifies hash_type = data1": {
      "params": [
        {
          "codeHash": "0xa656f172b6b45c245307aeb5a7a37a176f002f6f22e92582c58bf7ba362e4176",
          "hashType": "data1",
          "args": "0xb39bbc0b3673c7d36450bc14cfcdad2d559c6c64"
        },
        false
      ],
      "expected": "ckt1qzn9dutjk669cfznq7httfar0gtk7qp0du3wjfvzck9l0w3k9eqhvq4nnw7qkdnnclfkg59uzn8umtfd2kwxceq225jvu"
    },
    "should throw an error when args doesn't start with 0x": {
      "params": [
        {
          "codeHash": "0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c1356",
          "hashType": "type",
          "args": "4fb2be2e5d0c1a3b8694f832350a33c1685d477a0c0101"
        }
      ],
      "exception": "Hex string 4fb2be2e5d0c1a3b8694f832350a33c1685d477a0c0101 should start with 0x"
    },
    "should throw an error when code hash doesn't start with 0x": {
      "params": [
        {
          "codeHash": "3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c1356",
          "hashType": "type",
          "args": "0x4fb2be2e5d0c1a3b8694f832350a33c1685d477a0c0101"
        }
      ],
      "exception": "'3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c1356' is not a valid code hash"
    },
    "should throw an error when code hash has invalid length": {
      "params": [
        {
          "codeHash": "0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c135",
          "hashType": "type",
          "args": "0x4fb2be2e5d0c1a3b8694f832350a33c1685d477a0c0101"
        }
      ],
      "exception": "'0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c135' is not a valid code hash"
    },
    "should throw an error when hash type is inavlid": {
      "params": [
        {
          "codeHash": "0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c1356",
          "hashType": "type1",
          "args": "0x4fb2be2e5d0c1a3b8694f832350a33c1685d477a0c0101"
        }
      ],
      "exception": "'type1' is not a valid hash type"
    }
  }
}


================================================
File: packages/branch/src/__test__/utils/address/index.test.js
================================================
const {
  toAddressPayload,
  pubkeyToAddress,
  parseAddress,
  addressToScript,
  scriptToAddress,
} = require('../../../../dist')
const fixtures = require('./fixtures.json')

describe('Test address module', () => {
  describe('toAddressPayload', () => {
    const fixtureTable = Object.entries(fixtures.toAddressPayload).map(([title, { params, expected, exception }]) => [
      title,
      params,
      expected,
      exception,
    ])
    test.each(fixtureTable)(`%s`, (_title, params, expected, exception) => {
      expect.assertions(1)
      try {
        const actual = toAddressPayload(...params)
        expect(actual).toEqual(new Uint8Array(expected))
      } catch (err) {
        expect(err).toEqual(new Error(exception))
      }
    })
  })

  describe('pubkeyToAddress', () => {
    const fixtureTable = Object.entries(fixtures.pubkeyToAddress).map(([title, { params, expected, exception }]) => [
      title,
      params,
      expected,
      exception,
    ])

    test.each(fixtureTable)(`%s`, (_title, params, expected, exception) => {
      expect.assertions(1)
      try {
        const actual = pubkeyToAddress(...params)
        expect(actual).toBe(expected)
      } catch (err) {
        expect(err).toEqual(new Error(exception))
      }
    })
  })

  describe('parseAddress', () => {
    const fixtureTable = Object.entries(fixtures.parseAddress).map(([title, { params, expected, exception }]) => [
      title,
      params,
      expected,
      exception,
    ])

    test.each(fixtureTable)(`%s`, (_title, params, expected, exception) => {
      expect.assertions(1)
      try {
        const actual = parseAddress(...params)
        expect(actual).toEqual(typeof expected === 'string' ? expected : new Uint8Array(expected))
      } catch (err) {
        expect(err).toEqual(new Error(exception))
      }
    })
  })

  describe('addressToScript', () => {
    const fixtureTable = Object.entries(fixtures.addressToScript).map(([title, { params, expected, exception }]) => [
      title,
      params,
      expected,
      exception,
    ])

    test.each(fixtureTable)(`%s`, (_title, params, expected, exception) => {
      expect.assertions(1)

      try {
        const actual = addressToScript(...params)
        expect(actual).toEqual(expected)
      } catch (err) {
        expect(err).toEqual(new Error(exception))
      }
    })
  })

  describe('scriptToAddress', () => {
    const fixtureTable = Object.entries(fixtures.scriptToAddress).map(([title, { params, expected, exception }]) => [
      title,
      params,
      expected,
      exception,
    ])
    test.each(fixtureTable)(`%s`, (_title, params, expected, exception) => {
      expect.assertions(1)
      try {
        const actual = scriptToAddress(...params)
        expect(actual).toEqual(expected)
      } catch (err) {
        expect(err).toEqual(new Error(exception))
      }
    })
  })
})


================================================
File: packages/branch/src/__test__/utils/calculateTransactionFee/fixtures.json
================================================
{
  "cell the fee": {
    "transactionSize": "0x40b",
    "feeRate": "0x384",
    "expected": "0x3a4"
  },
  "uncell the fee": {
    "transactionSize": "0x384",
    "feeRate": "0x384",
    "expected": "0x32a"
  },
  "size in bigint": {
    "transactionSize": 900,
    "feeRate": "0x384",
    "expected": "0x32a"
  },
  "rate in bigint": {
    "transactionSize": "0x384",
    "feeRate": 900,
    "expected": "0x32a"
  }
}


================================================
File: packages/branch/src/__test__/utils/calculateTransactionFee/index.test.js
================================================
const { calculateTransactionFee } = require('../../../../dist')
const transactionFeeFixtures = require('./fixtures.json')

describe('calculate transaction fee', () => {
  const fixtureTable = Object.entries(transactionFeeFixtures).map(
    ([title, { transactionSize, feeRate, expected, exception }]) => [
      title,
      typeof transactionSize === 'number' ? BigInt(transactionSize) : transactionSize,
      typeof feeRate === 'number' ? BigInt(feeRate) : feeRate,
      expected,
      exception,
    ],
  )
  test.each(fixtureTable)('%s', (_title, transactionSize, feeRate, expected, exception) => {
    if (undefined !== expected) {
      expect(calculateTransactionFee(transactionSize, feeRate)).toBe(expected)
    }
    if (undefined !== exception) {
      expect(() => calculateTransactionFee(transactionSize, feeRate)).toThrowError(exception)
    }
  })
})


================================================
File: packages/branch/src/__test__/utils/convertors/fixtures.json
================================================
{
  "uint16Le": [
    {
      "value": "0xabcd",
      "expected": "0xcdab"
    },
    {
      "value": "0xbcd",
      "expected": "0xcd0b"
    },
    {
      "value": "0x00cd",
      "expected": "0xcd00"
    },
    {
      "value": "0xab00",
      "expected": "0x00ab"
    },
    {
      "value": "0x0bc0",
      "expected": "0xc00b"
    },
    {
      "value": 6,
      "exception": "6 should be type of string or bigint"
    },
    {
      "value": "ab",
      "exception": "Hex string ab should start with 0x"
    },
    {
      "value": "hi",
      "exception": "Hex string hi should start with 0x"
    }
  ],
  "uint32Le": [
    {
      "value": "0x12345678",
      "expected": "0x78563412"
    },
    {
      "value": "0x12345608",
      "expected": "0x08563412"
    },
    {
      "value": 6,
      "exception": "6 should be type of string or bigint"
    },
    {
      "value": "ab",
      "exception": "Hex string ab should start with 0x"
    },
    {
      "value": "hi",
      "exception": "Hex string hi should start with 0x"
    }
  ],
  "littleHexToInt": [
    {
      "value": "0x120100",
      "expected": 274
    },
    {
      "value": "12",
      "exception": "12 should be type of string or bigint"
    },
    {
      "value": "ab",
      "exception": "Hex string ab should start with 0x"
    },
    {
      "value": "hi",
      "exception": "Hex string hi should start with 0x"
    }
  ],
  "uint64Le": [
    {
      "value": "0x1234567890abcdef",
      "expected": "0xefcdab9078563412"
    },
    {
      "value": "0x3e8",
      "expected": "0xe803000000000000"
    },
    {
      "value": 6,
      "exception": "6 should be type of string or bigint"
    },
    {
      "value": "ab",
      "exception": "Hex string ab should start with 0x"
    },
    {
      "value": "hi",
      "exception": "Hex string hi should start with 0x"
    }
  ],
  "uint128Le": [
    {
      "value": "0x1234567890abcdef",
      "expected": "0xefcdab90785634120000000000000000"
    },
    {
      "value": "0x3e8",
      "expected": "0xe8030000000000000000000000000000"
    },
    {
      "value": 6,
      "exception": "6 should be type of string or bigint"
    },
    {
      "value": "ab",
      "exception": "Hex string ab should start with 0x"
    },
    {
      "value": "hi",
      "exception": "Hex string hi should start with 0x"
    }
  ],
  "hexToBytes": [
    {
      "hex": "",
      "expected": []
    },
    {
      "hex": "0xabcd12",
      "expected": [171, 205, 18]
    },
    {
      "hex": 11259154,
      "expected": [171, 205, 18]
    }
  ],
  "bytesToHex": [
    {
      "bytes": [171, 205, 18],
      "expected": "0xabcd12"
    }
  ]
}


================================================
File: packages/branch/src/__test__/utils/convertors/index.test.js
================================================
const {
  toUint16Le,
  toUint32Le,
  toUint64Le,
  toUint128Le,
  hexToBytes,
  bytesToHex,
  toBigEndian,
  HexStringWithout0xException,
} = require('../../../../dist')

const {
  uint16Le: uint16LeFixture,
  uint32Le: uint32LeFixture,
  uint64Le: uint64LeFixture,
  uint128Le: uint128LeFixture,
  hexToBytes: hexToBytesFixture,
  bytesToHex: bytesToHexFixture,
} = require('./fixtures.json')

describe('Test toUint16Le', () => {
  const fixtureTable = uint16LeFixture.map(({ value, expected, exception }) => [value, expected, exception])
  test.each(fixtureTable)(`%s => %s ? %s`, (value, expected, exception) => {
    if (exception) {
      expect(() => toUint16Le(value)).toThrow(exception)
    } else {
      const actualFromStr = toUint16Le(value)
      const actualFromBigInt = toUint16Le(BigInt(value))
      expect(actualFromStr).toBe(expected)
      expect(actualFromBigInt).toBe(expected)
    }
  })
})

describe('Test toUint32Le', () => {
  const fixtureTable = uint32LeFixture.map(({ value, expected, exception }) => [value, expected, exception])
  test.each(fixtureTable)(`%s => %s ? %s`, (value, expected, exception) => {
    if (exception) {
      expect(() => toUint32Le(value)).toThrow(exception)
    } else {
      const actualFromStr = toUint32Le(value)
      const actualFromBigInt = toUint32Le(BigInt(value))
      expect(actualFromStr).toBe(expected)
      expect(actualFromBigInt).toBe(expected)
    }
  })
})

describe('Test toUint64Le', () => {
  const fixtureTable = uint64LeFixture.map(({ value, expected, exception }) => [value, expected, exception])
  test.each(fixtureTable)(`%s => %s ? %s`, (value, expected, exception) => {
    if (exception) {
      expect(() => toUint64Le(value)).toThrow(exception)
    } else {
      const actualFromStr = toUint64Le(value)
      const actualFromBigInt = toUint64Le(BigInt(value))
      expect(actualFromStr).toBe(expected)
      expect(actualFromBigInt).toBe(expected)
    }
  })
})

describe('Test toUint128Le', () => {
  const fixtureTable = uint128LeFixture.map(({ value, expected, exception }) => [value, expected, exception])
  test.each(fixtureTable)(`%s => %s ? %s`, (value, expected, exception) => {
    if (exception) {
      expect(() => toUint128Le(value)).toThrow(exception)
    } else {
      const actualFromStr = toUint128Le(value)
      const actualFromBigInt = toUint128Le(BigInt(value))
      expect(actualFromStr).toBe(expected)
      expect(actualFromBigInt).toBe(expected)
    }
  })
})

describe('hex to bytes', () => {
  const fixtureTable = hexToBytesFixture.map(({ hex, expected }) => [hex, expected])
  test.each(fixtureTable)('%s => %j', (hex, exptected) => {
    expect(hexToBytes(hex).join(',')).toBe(exptected.join(','))
  })

  it('hex string without 0x should throw an error', () => {
    expect(() => hexToBytes('abcd12')).toThrow(new HexStringWithout0xException('abcd12'))
  })
})

describe('bytes to hex', () => {
  const fixtureTable = bytesToHexFixture.map(({ bytes, expected }) => [bytes, expected])
  test.each(fixtureTable)('%j => %s', (bytes, expected) => {
    expect(bytesToHex(bytes)).toEqual(expected)
  })
})

describe('to big endian', () => {
  expect(toBigEndian('0x3ef9e8c069c92500')).toBe('0x0025c969c0e8f93e')
})


================================================
File: packages/branch/src/__test__/utils/crypto/bech32.fixtures.json
================================================
{
  "fromWords": {
    "invalid": [
      {
        "exception": "Excess padding",
        "words": [14, 20, 15, 7, 13, 26, 0, 25, 18, 6, 11, 13, 8, 21, 4, 20, 3, 17, 2, 29, 3, 0]
      },
      {
        "exception": "Non-zero padding",
        "words": [
          3, 1, 17, 17, 8, 15, 0, 20, 24, 20, 11, 6, 16, 1, 5, 29, 3, 4, 16, 3, 6, 21, 22, 26, 2, 13, 22, 9, 16, 21, 19,
          24, 25, 21, 6, 18, 15, 8, 13, 24, 24, 24, 25, 9, 12, 1, 4, 16, 6, 9, 17, 1
        ]
      }
    ]
  },
  "bech32": {
    "valid": [
      {
        "string": "A12UEL5L",
        "prefix": "A",
        "hex": "",
        "words": []
      },
      {
        "string": "an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs",
        "prefix": "an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio",
        "hex": "",
        "words": []
      },
      {
        "string": "abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw",
        "prefix": "abcdef",
        "hex": "00443214c74254b635cf84653a56d7c675be77df",
        "words": [
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
          30, 31
        ]
      },
      {
        "string": "11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j",
        "prefix": "1",
        "hex": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "words": [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0
        ]
      },
      {
        "string": "split1checkupstagehandshakeupstreamerranterredcaperred2y9e3w",
        "prefix": "split",
        "hex": "c5f38b70305f519bf66d85fb6cf03058f3dde463ecd7918f2dc743918f2d",
        "words": [
          24, 23, 25, 24, 22, 28, 1, 16, 11, 29, 8, 25, 23, 29, 19, 13, 16, 23, 29, 22, 25, 28, 1, 16, 11, 3, 25, 29,
          27, 25, 3, 3, 29, 19, 11, 25, 3, 3, 25, 13, 24, 29, 1, 25, 3, 3, 25, 13
        ]
      },
      {
        "string": "11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq978ear",
        "prefix": "1",
        "hex": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "words": [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ],
        "limit": 300
      },
      {
        "string": "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4",
        "prefix": "bc",
        "words": [
          0, 14, 20, 15, 7, 13, 26, 0, 25, 18, 6, 11, 13, 8, 21, 4, 20, 3, 17, 2, 29, 3, 12, 29, 3, 4, 15, 24, 20, 6,
          14, 30, 22
        ],
        "limit": 300
      }
    ],
    "invalid": [
      {
        "string": "A12Uel5l",
        "exception": "Mixed-case string A12Uel5l"
      },
      {
        "string": " 1nwldj5",
        "exception": "Invalid prefix \\( \\)"
      },
      {
        "string": "abc1rzg",
        "exception": "abc1rzg too short"
      },
      {
        "string": "an84characterslonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1569pvx",
        "exception": "Exceeds length limit"
      },
      {
        "string": "x1b4n0q5v",
        "exception": "Unknown character b"
      },
      {
        "string": "1pzry9x0s0muk",
        "exception": "Missing prefix for 1pzry9x0s0muk"
      },
      {
        "string": "pzry9x0s0muk",
        "exception": "No separator character for pzry9x0s0muk"
      },
      {
        "string": "1pzry9x0s0muk",
        "exception": "Missing prefix for 1pzry9x0s0muk"
      },
      {
        "string": "abc1rzgt4",
        "exception": "Data too short"
      },
      {
        "string": "s1vcsyn",
        "exception": "s1vcsyn too short"
      },
      {
        "prefix": "abc",
        "words": [128],
        "exception": "Non 5-bit word"
      },
      {
        "prefix": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzfoobarfoobar",
        "words": [128],
        "exception": "Exceeds length limit"
      },
      {
        "prefix": "foobar",
        "words": [
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
        ],
        "exception": "Exceeds length limit"
      },
      {
        "prefix": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzfoobarfoobarfoobarfoobar",
        "words": [128],
        "limit": 104,
        "exception": "Exceeds length limit"
      },
      {
        "string": "11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j",
        "exception": "Exceeds length limit"
      },
      {
        "prefix": "abc\u00ff",
        "words": [18],
        "exception": "Invalid prefix \\(abc\u00ff\\)"
      },
      {
        "string": "li1dgmt3",
        "exception": "Data too short"
      },
      {
        "stringHex": "6465316c67377774ff",
        "exception": "Unknown character "
      }
    ]
  }
}


================================================
File: packages/branch/src/__test__/utils/crypto/bech32.test.js
================================================
const { bech32 } = require('../../../../dist')
const fixtures = require('./bech32.fixtures.json')

describe('bech32', () => {
  fixtures.bech32.valid.forEach(f => {
    it(`fromWords/toWords ${f.hex}`, () => {
      if (f.hex) {
        const words = bech32.toWords(Buffer.from(f.hex, 'hex'))
        const bytes = Buffer.from(bech32.fromWords(f.words))
        expect(words.join('')).toEqual(f.words.join(''))
        expect(bytes.toString('hex')).toBe(f.hex)
      }
    })

    it(`encode ${f.prefix}`, () => {
      const encoded = bech32.encode(f.prefix, f.words, f.limit)
      expect(encoded).toBe(f.string.toLowerCase())
    })

    it(`decode ${f.string}`, () => {
      const decoded = bech32.decode(f.string, f.limit)
      expect(decoded.prefix).toBe(f.prefix.toLowerCase())
      expect(decoded.words.join('')).toBe(f.words.join(''))
    })

    it(`fails for ${f.string} with 1 bit flipped`, () => {
      const buf = Buffer.from(f.string, 'utf8')
      buf[f.string.lastIndexOf('1') + 1] ^= 0x1
      const str = buf.toString('utf8')
      expect(() => {
        bech32.decode(str, f.limit)
      }).toThrow()
    })
  })
})


================================================
File: packages/branch/src/__test__/utils/crypto/blake160.test.js
================================================
const { blake160 } = require('../../../../dist')

describe('blake160', () => {
  it('blake160', () => {
    const fixture = {
      message: '024a501efd328e062c8675f2365970728c859c592beeefd6be8ead3d901330bc01',
      digest: '36c329ed630d6ce750712a477543672adab57f4c',
    }
    const digest = blake160(new Uint8Array(Buffer.from(fixture.message, 'hex')), 'hex')
    expect(digest).toBe(fixture.digest)
  })
})


================================================
File: packages/branch/src/__test__/utils/crypto/blake2b.fixtures.json
================================================
[
  {
    "outlen": 64,
    "out": "786a02f742015903c6c6fd852552d272912f4740e15847618a86e217f71f5419d25e1031afee585313896444934eb04b903a685b1448b755d56f701afe9be2ce",
    "input": "",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2fa3f686df876995167e7c2e5d74c4c7b6e48f8068fe0e44208344d480f7904c36963e44115fe3eb2a3ac8694c28bcb4f5a0f3276f2e79487d8219057a506e4b",
    "input": "00",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1c08798dc641aba9dee435e22519a4729a09b2bfe0ff00ef2dcd8ed6f8a07d15eaf4aee52bbf18ab5608a6190f70b90486c8a7d4873710b1115d3debbb4327b5",
    "input": "0001",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "40a374727302d9a4769c17b5f409ff32f58aa24ff122d7603e4fda1509e919d4107a52c57570a6d94e50967aea573b11f86f473f537565c66f7039830a85d186",
    "input": "000102",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "77ddf4b14425eb3d053c1e84e3469d92c4cd910ed20f92035e0c99d8a7a86cecaf69f9663c20a7aa230bc82f60d22fb4a00b09d3eb8fc65ef547fe63c8d3ddce",
    "input": "00010203",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "cbaa0ba7d482b1f301109ae41051991a3289bc1198005af226c5e4f103b66579f461361044c8ba3439ff12c515fb29c52161b7eb9c2837b76a5dc33f7cb2e2e8",
    "input": "0001020304",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f95d45cf69af5c2023bdb505821e62e85d7caedf7beda12c0248775b0c88205eeb35af3a90816f6608ce7dd44ec28db1140614e1ddebf3aa9cd1843e0fad2c36",
    "input": "000102030405",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8f945ba700f2530e5c2a7df7d5dce0f83f9efc78c073fe71ae1f88204a4fd1cf70a073f5d1f942ed623aa16e90a871246c90c45b621b3401a5ddbd9df6264165",
    "input": "00010203040506",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e998e0dc03ec30eb99bb6bfaaf6618acc620320d7220b3af2b23d112d8e9cb1262f3c0d60d183b1ee7f096d12dae42c958418600214d04f5ed6f5e718be35566",
    "input": "0001020304050607",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6a9a090c61b3410aede7ec9138146ceb2c69662f460c3da53c6515c1eb31f41ca3d280e567882f95cf664a94147d78f42cfc714a40d22ef19470e053493508a2",
    "input": "000102030405060708",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "29102511d749db3cc9b4e335fa1f5e8faca8421d558f6a3f3321d50d044a248ba595cfc3efd3d2adc97334da732413f5cbf4751c362ba1d53862ac1e8dabeee8",
    "input": "00010203040506070809",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c97a4779d47e6f77729b5917d0138abb35980ab641bd73a8859eb1ac98c05362ed7d608f2e9587d6ba9e271d343125d40d933a8ed04ec1fe75ec407c7a53c34e",
    "input": "000102030405060708090a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "10f0dc91b9f845fb95fad6860e6ce1adfa002c7fc327116d44d047cd7d5870d772bb12b5fac00e02b08ac2a0174d0446c36ab35f14ca31894cd61c78c849b48a",
    "input": "000102030405060708090a0b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "dea9101cac62b8f6a3c650f90eea5bfae2653a4eafd63a6d1f0f132db9e4f2b1b662432ec85b17bcac41e775637881f6aab38dd66dcbd080f0990a7a6e9854fe",
    "input": "000102030405060708090a0b0c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "441ffaa08cd79dff4afc9b9e5b5620eec086730c25f661b1d6fbfbd1cec3148dd72258c65641f2fca5eb155fadbcabb13c6e21dc11faf72c2a281b7d56145f19",
    "input": "000102030405060708090a0b0c0d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "444b240fe3ed86d0e2ef4ce7d851edde22155582aa0914797b726cd058b6f45932e0e129516876527b1dd88fc66d7119f4ab3bed93a61a0e2d2d2aeac336d958",
    "input": "000102030405060708090a0b0c0d0e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bfbabbef45554ccfa0dc83752a19cc35d5920956b301d558d772282bc867009168e9e98606bb5ba73a385de5749228c925a85019b71f72fe29b3cd37ca52efe6",
    "input": "000102030405060708090a0b0c0d0e0f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9c4d0c3e1cdbbf485bec86f41cec7c98373f0e09f392849aaa229ebfbf397b22085529cb7ef39f9c7c2222a514182b1effaa178cc3687b1b2b6cbcb6fdeb96f8",
    "input": "000102030405060708090a0b0c0d0e0f10",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "477176b3bfcbadd7657c23c24625e4d0d674d1868f006006398af97aa41877c8e70d3d14c3bbc9bbcdcea801bd0e1599af1f3eec67405170f4e26c964a57a8b7",
    "input": "000102030405060708090a0b0c0d0e0f1011",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a78c490eda3173bb3f10dee52f110fb1c08e0302230b85ddd7c11257d92de148785ef00c039c0bb8eb9808a35b2d8c080f572859714c9d4069c5bcaf090e898e",
    "input": "000102030405060708090a0b0c0d0e0f101112",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "58d023397beb5b4145cb2255b07d74290b36d9fd1e594afbd8eea47c205b2efbfe6f46190faf95af504ab072e36f6c85d767a321bfd7f22687a4abbf494a689c",
    "input": "000102030405060708090a0b0c0d0e0f10111213",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4001ec74d5a46fd29c2c3cdbe5d1b9f20e51a941be98d2a4e1e2fbf866a672121db6f81a514cfd10e7358d571bdba48e4ce708b9d124894bc0b5ed554935f73a",
    "input": "000102030405060708090a0b0c0d0e0f1011121314",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ccd1b22dab6511225d2401ea2d8625d206a12473cc732b615e5640cefff0a4adf971b0e827a619e0a80f5db9ccd0962329010d07e34a2064e731c520817b2183",
    "input": "000102030405060708090a0b0c0d0e0f101112131415",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b4a0a9e3574edb9e1e72aa31e39cc5f30dbf943f8cabc408449654a39131e66d718a18819143e3ea96b4a1895988a1c0056cf2b6e04f9ac19d657383c2910c44",
    "input": "000102030405060708090a0b0c0d0e0f10111213141516",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "447becab16630608d39f4f058b16f7af95b85a76aa0fa7cea2b80755fb76e9c804f2ca78f02643c915fbf2fce5e19de86000de03b18861815a83126071f8a37b",
    "input": "000102030405060708090a0b0c0d0e0f1011121314151617",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "54e6dab9977380a5665822db93374eda528d9beb626f9b94027071cb26675e112b4a7fec941ee60a81e4d2ea3ff7bc52cfc45dfbfe735a1c646b2cf6d6a49b62",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3ea62625949e3646704d7e3c906f82f6c028f540f5f72a794b0c57bf97b7649bfeb90b01d3ca3e829de21b3826e6f87014d3c77350cb5a15ff5d468a81bec160",
    "input": "000102030405060708090a0b0c0d0e0f10111213141516171819",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "213cfe145c54a33691569980e5938c8883a46d84d149c8ff1a67cd287b4d49c6da69d3a035443db085983d0efe63706bd5b6f15a7da459e8d50a19093db55e80",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5716c4a38f38db104e494a0a27cbe89a26a6bb6f499ec01c8c01aa7cb88497e75148cd6eee12a7168b6f78ab74e4be749251a1a74c38c86d6129177e2889e0b6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "030460a98bdf9ff17cd96404f28fc304f2b7c04eaade53677fd28f788ca22186b8bc80dd21d17f8549c711aff0e514e19d4e15f5990252a03e082f28dc2052f6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "19e7f1ccee88a10672333e390cf22013a8c734c6cb9eab41f17c3c8032a2e4aca0569ea36f0860c7a1af28fa476840d66011168859334a9e4ef9cc2e61a0e29e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "29f8b8c78c80f2fcb4bdf7825ed90a70d625ff785d262677e250c04f3720c888d03f8045e4edf3f5285bd39d928a10a7d0a5df00b8484ac2868142a1e8bea351",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5c52920a7263e39d57920ca0cb752ac6d79a04fef8a7a216a1ecb7115ce06d89fd7d735bd6f4272555dba22c2d1c96e6352322c62c5630fde0f4777a76c3de2c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "83b098f262251bf660064a9d3511ce7687a09e6dfbb878299c30e93dfb43a9314db9a600337db26ebeedaf2256a96dabe9b29e7573ad11c3523d874dde5be7ed",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9447d98aa5c9331352f43d3e56d0a9a9f9581865998e2885cc56dd0a0bd5a7b50595bd10f7529bcd31f37dc16a1465d594079667da2a3fcb70401498837cedeb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "867732f2feeb23893097561ac710a4bff453be9cfbedba8ba324f9d312a82d732e1b83b829fdcd177b882ca0c1bf544b223be529924a246a63cf059bfdc50a1b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f15ab26d4cdfcf56e196bb6ba170a8fccc414de9285afd98a3d3cf2fb88fcbc0f19832ac433a5b2cc2392a4ce34332987d8d2c2bef6c3466138db0c6e42fa47b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2813516d68ed4a08b39d648aa6aacd81e9d655ecd5f0c13556c60fdf0d333ea38464b36c02baccd746e9575e96c63014f074ae34a0a25b320f0fbedd6acf7665",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d3259afca8a48962fa892e145acf547f26923ae8d4924c8a531581526b04b44c7af83c643ef5a0bc282d36f3fb04c84e28b351f40c74b69dc7840bc717b6f15f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f14b061ae359fa31b989e30332bfe8de8cc8cdb568e14be214a2223b84caab7419549ecfcc96ce2acec119485d87d157d3a8734fc426597d64f36570ceaf224d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "55e70b01d1fbf8b23b57fb62e26c2ce54f13f8fa2464e6eb98d16a6117026d8b90819012496d4071ebe2e59557ece3519a7aa45802f9615374877332b73490b3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252627",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "25261eb296971d6e4a71b2928e64839c67d422872bf9f3c31993615222de9f8f0b2c4be8548559b4b354e736416e3218d4e8a1e219a4a6d43e1a9a521d0e75fc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "08307f347c41294e34bb54cb42b1522d22f824f7b6e5db50fda096798e181a8f026fa27b4ae45d52a62caf9d5198e24a4913c6671775b2d723c1239bfbf016d7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526272829",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1e5c62e7e9bfa1b118747a2de08b3ca10112af96a46e4b22c3fc06f9bfee4eb5c49e057a4a4886234324572576bb9b5ecfde0d99b0de4f98ec16e4d1b85fa947",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c74a77395fb8bc126447454838e561e962853dc7eb49a1e3cb67c3d0851f3e39517be8c350ac910903d49cd2bfdf545c99316d0346170b739f0add5d533c2cfc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0dd57b423cc01eb2861391eb886a0d17079b933fc76eb3fc08a19f8a74952cb68f6bcdc644f77370966e4d13e80560bcf082ef0479d48fbbab4df03b53a4e178",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4d8dc3923edccdfce70072398b8a3da5c31fcb3ee3b645c85f717cbaeb4b673a19394425a585bfb464d92f1597d0b754d163f97ced343b25db5a70ef48ebb34f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f0a50553e4dfb0c4e3e3d3ba82034857e3b1e50918f5b8a7d698e10d242b0fb544af6c92d0c3aaf9932220416117b4e78ecb8a8f430e13b82a5915290a5819c5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b15543f3f736086627cc5365e7e8988c2ef155c0fd4f428961b00d1526f04d6d6a658b4b8ed32c5d8621e7f4f8e8a933d9ecc9dd1b8333cbe28cfc37d9719e1c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7b4fa158e415fef023247264cbbe15d16d91a44424a8db707eb1e2033c30e9e1e7c8c0864595d2cb8c580eb47e9d16abbd7e44e824f7cedb7def57130e52cfe9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "60424ff23234c34dc9687ad502869372cc31a59380186bc2361c835d972f49666eb1ac69629de646f03f9b4db9e2ace093fbfdf8f20ab5f98541978be8ef549f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7406018ce704d84f5eb9c79fea97da345699468a350ee0b2d0f3a4bf2070304ea862d72a51c57d3064947286f531e0eaf7563702262e6c724abf5ed8c8398d17",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "14ef5c6d647b3bd1e6e32006c231199810de5c4dc88e70240273b0ea18e651a3eb4f5ca3114b8a56716969c7cda27e0c8db832ad5e89a2dc6cb0adbe7d93abd1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "38cf6c24e3e08bcf1f6cf3d1b1f65b905239a3118033249e448113ec632ea6dc346feeb2571c38bd9a7398b2221280328002b23e1a45adaffe66d93f6564eaa2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6cd7208a4bc7e7e56201bbba02a0f489cd384abe40afd4222f158b3d986ee72a54c50fb64fd4ed2530eda2c8af2928a0da6d4f830ae1c9db469dfd970f12a56f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "659858f0b5c9edab5b94fd732f6e6b17c51cc096104f09beb3afc3aa467c2ecf885c4c6541effa9023d3b5738ae5a14d867e15db06fe1f9d1127b77e1aabb516",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "26cca0126f5d1a813c62e5c71001c046f9c92095704550be5873a495a999ad010a4f79491f24f286500adce1a137bc2084e4949f5b7294cefe51ecaff8e95cba",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334353637",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4147c1f55172788c5567c561feef876f621fff1ce87786b8467637e70dfbcd0dbdb6415cb600954ab9c04c0e457e625b407222c0fe1ae21b2143688ada94dc58",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5b1bf154c62a8af6e93d35f18f7f90abb16a6ef0e8d1aecd118bf70167bab2af08935c6fdc0663ce74482d17a8e54b546d1c296631c65f3b522a515839d43d71",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536373839",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9f600419a4e8f4fb834c24b0f7fc13bf4e279d98e8a3c765ee934917403e3a66097182ea21453cb63ebbe8b73a9c2167596446438c57627f330badd4f569f7d6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "457ef6466a8924fd8011a34471a5a1ac8ccd9bd0d07a97414ac943021ce4b9e4b9c8db0a28f016ed43b1542481990022147b313e194671131e708dd43a3ed7dc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9997b2194d9af6dfcb9143f41c0ed83d3a3f4388361103d38c2a49b280a581212715fd908d41c651f5c715ca38c0ce2830a37e00e508ced1bcdc320e5e4d1e2e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5c6bbf16baa180f986bd40a1287ed4c549770e7284858fc47bc21ab95ebbf3374b4ee3fd9f2af60f3395221b2acc76f2d34c132954049f8a3a996f1e32ec84e5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d10bf9a15b1c9fc8d41f89bb140bf0be08d2f3666176d13baac4d381358ad074c9d4748c300520eb026daeaea7c5b158892fde4e8ec17dc998dcd507df26eb63",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2fc6e69fa26a89a5ed269092cb9b2a449a4409a7a44011eecad13d7c4b0456602d402fa5844f1a7a758136ce3d5d8d0e8b86921ffff4f692dd95bdc8e5ff0052",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "fcbe8be7dcb49a32dbdf239459e26308b84dff1ea480df8d104eeff34b46fae98627b450c2267d48c0946a697c5b59531452ac0484f1c84e3a33d0c339bb2e28",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a19093a6e3bcf5952f850f2030f69b9606f147f90b8baee3362da71d9f35b44ef9d8f0a7712ba1877fddcd2d8ea8f1e5a773d0b745d4725605983a2de901f803",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f4041",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3c2006423f73e268fa59d2920377eb29a4f9a8b462be15983ee3b85ae8a78e992633581a9099893b63db30241c34f643027dc878279af5850d7e2d4a2653073a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d0f2f2e3787653f77cce2fa24835785bbd0c433fc779465a115149905a9dd1cb827a628506d457fcf124a0c2aef9ce2d2a0a0f63545570d8667ff9e2eba07334",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40414243",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "78a9fc048e25c6dcb5de45667de8ffdd3a93711141d594e9fa62a959475da6075ea8f0916e84e45ad911b75467077ee52d2c9aebf4d58f20ce4a3a00458b05d4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f4041424344",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "45813f441769ab6ed37d349ff6e72267d76ae6bb3e3c612ec05c6e02a12af5a37c918b52bf74267c3f6a3f183a8064ff84c07b193d08066789a01accdb6f9340",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "956da1c68d83a7b881e01b9a966c3c0bf27f68606a8b71d457bd016d4c41dd8a380c709a296cb4c6544792920fd788835771a07d4a16fb52ed48050331dc4c8b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40414243444546",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "df186c2dc09caa48e14e942f75de5ac1b7a21e4f9f072a5b371e09e07345b0740c76177b01278808fec025eded9822c122afd1c63e6f0ce2e32631041063145c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f4041424344454647",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "87475640966a9fdcd6d3a3b5a2cca5c08f0d882b10243c0ec1bf3c6b1c37f2cd3212f19a057864477d5eaf8faed73f2937c768a0af415e84bbce6bd7de23b660",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c3b573bbe10949a0fbd4ff884c446f2229b76902f9dfdbb8a0353da5c83ca14e8151bbaac82fd1576a009adc6f1935cf26edd4f1fb8da483e6c5cd9d8923adc3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40414243444546474849",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b09d8d0bba8a7286e43568f7907550e42036d674e3c8fc34d8ca46f771d6466b70fb605875f6a863c877d12f07063fdc2e90ccd459b1910dcd52d8f10b2b0a15",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "af3a22bf75b21abfb0acd54422ba1b7300a952eff02ebeb65b5c234471a98df32f4f9643ce1904108a168767924280bd76c83f8c82d9a79d9259b195362a2a04",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bf4ff2221b7e6957a724cd964aa3d5d0d9941f540413752f4699d8101b3e537508bf09f8508b317736ffd265f2847aa7d84bd2d97569c49d632aed9945e5fa5e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9c6b6b78199b1bdacb4300e31479fa622a6b5bc80d4678a6078f88a8268cd7206a2799e8d4621a464ef6b43dd8adffe97caf221b22b6b8778b149a822aefbb09",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "890656f09c99d280b5ecb381f56427b813751bc652c7828078b23a4af83b4e3a61fdbac61f89bee84ea6bee760c047f25c6b0a201c69a38fd6fd971af18588bb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "31a046f7882ffe6f83ce472e9a0701832ec7b3f76fbcfd1df60fe3ea48fde1651254247c3fd95e100f9172731e17fd5297c11f4bb328363ca361624a81af797c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "27a60b2d00e7a671d47d0aec2a686a0ac04b52f40ab6629028eb7d13f4baa99ac0fe46ee6c814944f2f4b4d20e9378e4847ea44c13178091e277b87ea7a55711",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8b5ccef194162c1f19d68f91e0b0928f289ec5283720840c2f73d253111238dcfe94af2b59c2c1ca2591901a7bc060e7459b6c47df0f71701a35cc0aa831b5b6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f5051",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "57ab6c4b2229aeb3b70476d803cd63812f107ce6da17fed9b17875e8f86c724f49e024cbf3a1b8b119c50357652b81879d2ade2d588b9e4f7cedba0e4644c9ee",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0190a8dac320a739f322e15731aa140ddaf5bed294d5c82e54fef29f214e18aafaa84f8be99af62950266b8f901f15dd4c5d35516fc35b4cab2e96e4695bbe1c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50515253",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d14d7c4c415eeb0e10b159224bea127ebd84f9591c702a330f5bb7bb7aa44ea39de6ed01f18da7adf40cfb97c5d152c27528824b21e239526af8f36b214e0cfb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f5051525354",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "be28c4be706970488fac7d29c3bd5c4e986085c4c3332f1f3fd30973db614164ba2f31a78875ffdc150325c88327a9443ed04fdfe5be93876d1628560c764a80",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "031da1069e3a2e9c3382e436ffd79df74b1ca6a8adb2deabe676ab45994cbc054f037d2f0eace858d32c14e2d1c8b46077308e3bdc2c1b53172ecf7a8c14e349",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50515253545556",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4665cef8ba4db4d0acb118f2987f0bb09f8f86aa445aa3d5fc9a8b346864787489e8fcecc125d17e9b56e12988eac5ecc7286883db0661b8ff05da2afff30fe4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f5051525354555657",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "63b7032e5f930cc9939517f9e986816cfbec2be59b9568b13f2ead05bae7777cab620c6659404f7409e4199a3be5f7865aa7cbdf8c4253f7e8219b1bd5f46fea",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9f09bf093a2b0ff8c2634b49e37f1b2135b447aa9144c9787dbfd92129316c99e88aab8a21fdef2372d1189aec500f95775f1f92bfb45545e4259fb9b7b02d14",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50515253545556575859",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f9f8493c68088807df7f6a2693d64ea59f03e9e05a223e68524ca32195a4734b654fcea4d2734c866cf95c889fb10c49159be2f5043dc98bb55e02ef7bdcb082",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3c9a7359ab4febce07b20ac447b06a240b7fe1dae5439c49b60b5819f7812e4c172406c1aac316713cf0dded1038077258e2eff5b33913d9d95caeb4e6c6b970",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ad6aab8084510e822cfce8625d62cf4de655f4763884c71e80bab9ac9d5318dba4a6033ed29084e65216c031606ca17615dcfe3ba11d26851ae0999ca6e232cf",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "156e9e6261374c9dc884f36e70f0fe1ab9297997b836fa7d170a9c9ebf575b881e7bcea44d6c0248d35597907154828955be19135852f9228815eca024a8adfb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4215407633f4cca9b6788be93e6aa3d963c7d6ce4b147247099f46a3acb500a30038cb3e788c3d29f132ad844e80e9e99251f6db96acd8a091cfc770af53847b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1c077e279de6548523502b6df800ffdab5e2c3e9442eb838f58c295f3b147cef9d701c41c321283f00c71affa0619310399126295b78dd4d1a74572ef9ed5135",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f07a555f49fe481cf4cd0a87b71b82e4a95064d06677fdd90a0eb598877ba1c83d4677b393c3a3b6661c421f5b12cb99d20376ba7275c2f3a8f5a9b7821720da",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b5911b380d20c7b04323e4026b38e200f534259233b581e02c1e3e2d8438d6c66d5a4eb201d5a8b75072c4ec29106334da70bc79521b0ced2cfd533f5ff84f95",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "01f070a09bae911296361f91aa0e8e0d09a7725478536d9d48c5fe1e5e7c3c5b9b9d6eb07796f6da57ae562a7d70e882e37adfde83f0c433c2cd363536bb22c8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6f793eb4374a48b0775acaf9adcf8e45e54270c9475f004ad8d5973e2aca52747ff4ed04ae967275b9f9eb0e1ff75fb4f794fa8be9add7a41304868d103fab10",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "965f20f139765fcc4ce4ba3794675863cac24db472cd2b799d035bce3dbea502da7b524865f6b811d8c5828d3a889646fe64a380da1aa7c7044e9f245dced128",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061626364",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ec295b5783601244c30e4641e3b45be222c4dce77a58700f53bc8ec52a941690b4d0b087fb6fcb3f39832b9de8f75ec20bd43079811749cdc907edb94157d180",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "61c72f8ccc91dbb54ca6750bc489672de09faedb8fdd4f94ff2320909a303f5d5a98481c0bc1a625419fb4debfbf7f8a53bb07ec3d985e8ea11e72d559940780",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263646566",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "afd8145b259eefc8d12620c3c5b03e1ed8fd2ccefe0365078c80fd42c1770e28b44948f27e65a1886690110db814397b68e43d80d1ba16dfa358e739c898cfa3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061626364656667",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "552fc7893cf1ce933ada35c0da98844e41545e244c3157a1428d7b4c21f9cd7e4071aed77b7ca9f1c38fba32237412ef21a342742ec8324378f21e507fafdd88",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "467a33fbadf5ebc52596ef86aaaefc6faba8ee651b1ce04de368a03a5a9040ef2835e00adb09abb3fbd2bce818a2413d0b0253b5bda4fc5b2f6f85f3fd5b55f2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263646566676869",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "22eff8e6dd5236f5f57d94ede874d6c9428e8f5d566f17cd6d1848cd752fe13c655cb10fbaaff76872f2bf2da99e15dc624075e1ec2f58a3f64072121838569e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9cec6bbf62c4bce4138abae1cbec8dad31950444e90321b1347196834c114b864af3f3cc3508f83751ffb4eda7c84d140734bb4263c3625c00f04f4c8068981b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a8b60fa4fc2442f6f1514ad7402626920cc7c2c9f72124b8cba8ee2cb7c4586f658a4410cffcc0ab88343955e094c6af0d20d0c714fb0a988f543f300f58d389",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8271cc45dfa5e4170e847e8630b952cf9c2aa777d06f26a7585b8381f188dacc7337391cfcc94b053dc4ec29cc17f077870428f1ac23fddda165ef5a3f155f39",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bf23c0c25c8060e4f6995f1623a3bebecaa96e308680000a8aa3cd56bb1a6da099e10d9231b37f4519b2efd2c24de72f31a5f19535241b4a59fa3c03ceb790e7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "877fd652c05281009c0a5250e7a3a671f8b18c108817fe4a874de22da8e45db11958a600c5f62e67d36cbf84474cf244a9c2b03a9fb9dc711cd1a2cab6f3fae0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "29df4d87ea444baf5bcdf5f4e41579e28a67de84149f06c03f110ea84f572a9f676addd04c4878f49c5c00accda441b1a387caceb2e993bb7a10cd8c2d6717e1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "710dacb166844639cd7b637c274209424e2449dc35d790bbfa4f76177054a36b3b76fac0ca6e61df1e687000678ac0746df75d0a3954897681fd393a155a1bb4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c1d5f93b8dea1f2571babccbc01764541a0cda87e444d673c50966ca559c33354b3acb26e5d5781ffb28847a4b4754d77008c62a835835f500dea7c3b58bdae2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a41e41271cdab8af4d72b104bfb2ad041ac4df14677da671d85640c4b187f50c2b66513c4619fbd5d5dc4fe65dd37b9042e9848dda556a504caa2b1c6afe4730",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e7bcbacdc379c43d81ebadcb37781552fc1d753e8cf310d968392d06c91f1d64cc9e90ce1d22c32d277fc6cda433a4d442c762e9eacf2c259f32d64cf9da3a22",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071727374",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "51755b4ac5456b13218a19c5b9242f57c4a981e4d4ecdce09a3193362b808a579345d4881c2607a56534dd7f21956aff72c2f4173a6e7b6cc2212ba0e3daee1f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "dcc2c4beb9c1f2607b786c20c631972347034c1cc02fcc7d02ff01099cfe1c6989840ac213923629113aa8bad713ccf0fe4ce13264fb32b8b0fe372da382544a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273747576",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3d55176acea4a7e3a65ffa9fb10a7a1767199cf077cee9f71532d67cd7c73c9f93cfc37ccdcc1fdef50aad46a504a650d298d597a3a9fa95c6c40cb71fa5e725",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071727374757677",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d07713c005de96dd21d2eb8bbeca66746ea51a31ae922a3e74864889540a48db27d7e4c90311638b224bf0201b501891754848113c266108d0adb13db71909c7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "58983c21433d950caa23e4bc18543b8e601c204318532152daf5e159a0cd1480183d29285c05f129cb0cc3164687928086ffe380158df1d394c6ac0d4288bca8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273747576777879",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8100a8dc528d2b682ab4250801ba33f02a3e94c54dac0ae1482aa21f51ef3a82f3807e6facb0aeb05947bf7aa2adcb034356f90fa4560ede02201a37e411ec1a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "07025f1bb6c784f3fe49de5c14b936a5acacacaab33f6ac4d0e00ab6a12483d6bec00b4fe67c7ca5cc508c2a53efb5bfa5398769d843ff0d9e8b14d36a01a77f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ba6aefd972b6186e027a76273a4a723321a3f580cfa894da5a9ce8e721c828552c64dacee3a7fd2d743b5c35ad0c8efa71f8ce99bf96334710e2c2346e8f3c52",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e0721e02517aedfa4e7e9ba503e025fd46e714566dc889a84cbfe56a55dfbe2fc4938ac4120588335deac8ef3fa229adc9647f54ad2e3472234f9b34efc46543",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b6292669ccd38d5f01caae96ba272c76a879a45743afa0725d83b9ebb26665b731f1848c52f11972b6644f554c064fa90780dbbbf3a89d4fc31f67df3e5857ef",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2319e3789c47e2daa5fe807f61bec2a1a6537fa03f19ff32e87eecbfd64b7e0e8ccff439ac333b040f19b0c4ddd11a61e24ac1fe0f10a039806c5dcc0da3d115",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f59711d44a031d5f97a9413c065d1e614c417ede998590325f49bad2fd444d3e4418be19aec4e11449ac1a57207898bc57d76a1bcf3566292c20c683a5c4648f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f80",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "df0a9d0c212843a6a934e3902b2dd30d17fba5f969d2030b12a546d8a6a45e80cf5635f071f0452e9c919275da99bed51eb1173c1af0518726b75b0ec3bae2b5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f8081",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a3eb6e6c7bf2fb8b28bfe8b15e15bb500f781ecc86f778c3a4e655fc5869bf2846a245d4e33b7b14436a17e63be79b36655c226a50ffbc7124207b0202342db5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "56d4cbcd070563426a017069425c2cd2ae540668287a5fb9dac432eb8ab1a353a30f2fe1f40d83333afe696a267795408a92fe7da07a0c1814cf77f36e105ee8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f80818283",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e59b9987d428b3eda37d80abdb16cd2b0aef674c2b1dda4432ea91ee6c935c684b48b4428a8cc740e579a30deff35a803013820dd23f14ae1d8413b5c8672aec",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f8081828384",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "cd9fcc99f99d4cc16d031900b2a736e1508db4b586814e6345857f354a70ccecb1df3b50a19adaf43c278efa423ff4bb6c523ec7fd7859b97b168a7ebff8467c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0602185d8c3a78738b99164b8bc6ffb21c7debebbf806372e0da44d121545597b9c662a255dc31542cf995ecbe6a50fb5e6e0ee4ef240fe557eded1188087e86",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f80818283848586",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c08afa5b927bf08097afc5fff9ca4e7800125c1f52f2af3553fa2b89e1e3015c4f87d5e0a48956ad31450b083dad147ffb5ec03434a26830cf37d103ab50c5da",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f8081828384858687",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "36f1e1c11d6ef6bc3b536d505d544a871522c5c2a253067ec9933b6ec25464daf985525f5b9560a16d890259ac1bb5cc67c0c469cde133def000ea1d686f4f5d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bf2ab2e2470f5438c3b689e66e7686fffa0cb1e1798ad3a86ff99075bf6138e33d9c0ce59afb24ac67a02af34428191a9a0a6041c07471b7c3b1a752d6fc0b8b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f80818283848586878889",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d400601f9728ccc4c92342d9787d8d28ab323af375ca5624b4bb91d17271fbae862e413be73f1f68e615b8c5c391be0dbd9144746eb339ad541547ba9c468a17",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "79fe2fe157eb85a038abb8ebbc647731d2c83f51b0ac6ee14aa284cb6a3549a4dcceb300740a825f52f5fb30b03b8c4d8b0f4aa67a63f4a94e3303c4eda4c02b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "75351313b52a8529298d8c186b1768666dcca8595317d7a4816eb88c062020c0c8efc554bb341b64688db5ccafc35f3c3cd09d6564b36d7b04a248e146980d4b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e3128b1d311d02179d7f25f97a5a8bee2cc8c86303644fcd664e157d1fef00f23e46f9a5e8e5c890ce565bb6abd4302ce06469d52a5bd53e1c5a54d04649dc03",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c2382a72d2d3ace9d5933d00b60827ed380cda08d0ba5f6dd41e29ee6dbe8ecb9235f06be95d83b6816a2fb7a5ad47035e8a4b69a4884b99e4bece58cab25d44",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6b1c69460bbd50ac2ed6f32e6e887cfed407d47dcf0aaa60387fe320d780bd03eab6d7baeb2a07d10cd552a300341354ea9a5f03183a623f92a2d4d9f00926af",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6cda206c80cdc9c44ba990e0328c314f819b142d00630404c48c05dc76d1b00ce4d72fc6a48e1469ddef609412c364820854214b4869af090f00d3c1ba443e1b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7ffc8c26fbd6a0f7a609e6e1939f6a9edf1b0b066641fb76c4f9602ed748d11602496b35355b1aa255850a509d2f8ee18c8f3e1d7dcbc37a136598f56a59ed17",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f9091",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "70de1f08dd4e09d5fc151f17fc991a23abfc05104290d50468882efaf582b6ec2f14f577c0d68c3ad06626916e3c86e6daab6c53e5163e82b6bd0ce49fc0d8df",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4f81935756ed35ee2058ee0c6a6110d6fac5cb6a4f46aa9411603f99965823b6da4838276c5c06bc7880e376d92758369ee7305bcec8d3cfd28ccabb7b4f0579",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90919293",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "abcb61cb3683d18f27ad527908ed2d32a0426cb7bb4bf18061903a7dc42e7e76f982382304d18af8c80d91dd58dd47af76f8e2c36e28af2476b4bccf82e89fdf",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f9091929394",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "02d261ad56a526331b643dd2186de9a82e72a58223cd1e723686c53d869b83b94632b7b647ab2afc0d522e29da3a5615b741d82852e0df41b66007dbcba90543",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c5832741fa30c5436823015383d297ff4c4a5d7276c3f902122066e04be5431b1a85faf73b918434f9300963d1dea9e8ac3924ef490226edeea5f743e410669f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90919293949596",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "cfaeab268cd075a5a6aed515023a032d54f2f2ff733ce0cbc78db51db4504d675923f82746d6594606ad5d67734b11a67cc6a468c2032e43ca1a94c6273a985e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f9091929394959697",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "860850f92eb268272b67d133609bd64e34f61bf03f4c1738645c17fec818465d7ecd2be2907641130025fda79470ab731646e7f69440e8367ea76ac4cee8a1df",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "84b154ed29bbedefa648286839046f4b5aa34430e2d67f7496e4c39f2c7ea78995f69e1292200016f16ac3b37700e6c7e7861afc396b64a59a1dbf47a55c4bbc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90919293949596979899",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "aeeec260a5d8eff5ccab8b95da435a63ed7a21ea7fc7559413fd617e33609f8c290e64bbacc528f6c080262288b0f0a3219be223c991bee92e72349593e67638",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8ad78a9f26601d127e8d2f2f976e63d19a054a17dcf59e0f013ab54a6887bbdffde7aaae117e0fbf3271016595b9d9c712c01b2c53e9655a382bc4522e616645",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8934159dade1ac74147dfa282c75954fcef443ef25f80dfe9fb6ea633b8545111d08b34ef43fff17026c7964f5deac6d2b3c29dacf2747f022df5967dfdc1a0a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "cd36dd0b240614cf2fa2b9e959679dcdd72ec0cd58a43da3790a92f6cdeb9e1e795e478a0a47d371100d340c5cedcdbbc9e68b3f460818e5bdff7b4cda4c2744",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "00df4e099b807137a85990f49d3a94315e5a5f7f7a6076b303e96b056fb93800111f479628e2f8db59aeb6ac70c3b61f51f9b46e80ffdeae25ebddb4af6cb4ee",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2b9c955e6caed4b7c9e246b86f9a1726e810c59d126cee66ed71bf015b83558a4b6d84d18dc3ff4620c2ffb722359fdef85ba0d4e2d22ecbe0ed784f99afe587",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "181df0a261a2f7d29ea5a15772715105d450a4b6c236f699f462d60ca76487feedfc9f5eb92df838e8fb5dc3694e84c5e0f4a10b761f506762be052c745a6ee8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "21fb203458bf3a7e9a80439f9a902899cd5de0139dfd56f7110c9dec8437b26bda63de2f565926d85edb1d6c6825669743dd9992653d13979544d5dc8228bfaa",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ef021f29c5ffb830e64b9aa9058dd660fd2fcb81c497a7e698bcfbf59de5ad4a86ff93c10a4b9d1ae5774725f9072dcde9e1f199bab91f8bff921864aa502eee",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b3cfda40526b7f1d37569bdfcdf911e5a6efe6b2ec90a0454c47b2c046bf130fc3b352b34df4813d48d33ab8e269b69b075676cb6d00a8dcf9e1f967ec191b2c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b4c6c3b267071eefb9c8c72e0e2b941293641f8673cb70c1cc26ad1e73cf141755860ad19b34c2f34ed35bb52ec4507cc1fe59047743a5f0c6febde625e26091",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "57a34f2bcca60d4b85103b830c9d7952a416be5263ae429c9e5e53fe8590a8f78ec65a51109ea85dcdf7b6223f9f2b340539fad81923dbf8edabf95129e4dff6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9cf46662fcd61a232277b685663b8b5da832dfd9a3b8ccfeec993ec6ac415ad07e048adfe414df272770dba867da5c1224c6fd0aa0c2187d426ac647e9887361",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5ce1042ab4d542c2f9ee9d17262af8164098935bef173d0e18489b04841746cd2f2df866bd7da6e5ef9024c648023ec723ab9c62fd80285739d84f15d2ab515a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8488396bd4a8729b7a473178f232dadf3f0f8e22678ba5a43e041e72da1e2cf82194c307207a54cb8156293339eaec693ff66bfcd5efc65e95e4ecaf54530abd",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f598da901c3835bca560779037dfde9f0c51dc61c0b760fc1522d7b470ee63f5bdc6498476e86049ad86e4e21af2854a984cc905427d2f17f66b1f41c3da6f61",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5f93269798cf02132107337660a8d7a177354c0212eb93e555e7c37a08aef3d8dce01217011cd965c04dd2c105f2e2b6cae5e4e6bcaf09dfbee3e0a6a6357c37",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aa",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0ecf581d47bac9230986faabd70c2f5b80e91066f0ec55a842937882286d2ca007bb4e973b0b091d52167ff7c4009c7ab4ad38fff1dceacdb7be81ef4a452952",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaab",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5aeca8abe1528582b2a307b4009585498a3d467ca6101cb0c5126f9976056e9ffc123cc20c302b2a737f492c75d21f01512c90ca0541dfa56e950a321dcb28d8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabac",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "732fbf8f1cb2b8329263ede27858fe46f8d3354d376bcda0548e7ce1fa9dd11f85eb661fe950b543aa635ca4d3f04ede5b32d6b656e5ce1c44d35c4a6c56cff8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacad",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d5e938735d63788c80100aefd18648d18cf272f69f20ff24cfe2895c088ad08b0104da1672a4eb26fc52545cc7d7a01b266cf546c403c45bd129eb41bdd9200b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadae",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "65a245b49352ee297d91af8c8be00528ac6e046dd83ac7bd465a98816dd68f3e00e1ae8f895327a7e9a8c9326598379a29c9fc91ec0c6eef08f3e2b216c11008",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c95654b63019130ab45dd0fb4941b98aeb3af2a123913eca2ce99b3e97410a7bf8661cc7fbaa2bc1cf2b13113b1ed40a0118b88e5fffc3542759ea007ed4c58d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1eb262f38fa494431f017dad44c0dfb69324ac032f04b657fc91a88647bb74760f24e7c956514f0cf002990b182c1642b9b2426e96a61187e4e012f00e217d84",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3b955aeebfa5151ac1ab8e3f5cc1e3767084c842a575d36269836e97353d41622b731dddcd5f269550a3a5b87be1e90326340b6e0e62555815d9600597ac6ef9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "68289f6605473ba0e4f241baf7477a9885426a858f19ef2a18b0d40ef8e41282ed5526b519799e270f13881327918278755711071d8511fe963e3b5606aa3716",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "80a33787542612c38f6bcd7cd86cab460227509b1cbad5ec408a91413d51155a0476dadbf3a2518e4a6e77cc346622e347a469bf8baa5f04eb2d98705355d063",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "34629bc6d831391c4cdf8af1b4b7b6b8e8ee17cf98c70e5dd586cd99f14b11df945166236a9571e6d591bb83ee4d164d46f6b9d8ef86ff865a81bfb91b00424b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8b7cc339163863bb4383e542b0ef0e7cf36b84ad932cdf5a80419ec9ad692e7a7e784d2c7cb3796a18b8f800035f3aa06c824100611120a7bdeb35618ccb81b7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4f084e4939dd5a7f5a658fad58a18a15c25c32ec1c7fd5c5c6c3e892b3971aeaac308304ef17b1c47239ea4bb398b3fd6d4528d8de8e768ae0f1a5a5c6b5c297",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "48f407a1af5b8009b2051742e8cf5cd5656669e7d722ee8e7bd202060849442168d8facc117c012bfb7bf449d99befff6a34aea203f1d8d352722be5014ec818",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a6aa82cd1e426f9a73bfa39a29037876114655b8c22d6d3ff8b638ae7dea6b17843e09e52eb66fa1e475e4a8a3de429b7d0f4a776fcb8bdc9b9fede7d52e815f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5817027d6bdd00c5dd10ac593cd560372270775a18526d7e6f13872a2e20eab664625be7168ac4bd7c9e0ce7fc4099e0f48442e2c767191c6e1284e9b2ccea8c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9ba",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "08e41028340a45c74e4052b3a8d6389e22e043a1adab5e28d97619450d723469b620caa519b81c14523854f619fd3027e3847bd03276e60604a80ddb4de876d6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babb",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "130b8420537eb07d72abda07c85acbd8b9a44f16321dd0422145f809673d30f2b5321326e2bff317ef3fef983c51c4f8ab24a325d298e34afce569a82555774c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbc",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ac49b844afaa012e31c474ca263648844fd2f6307992c2f752aca02c3828965175794deee2d2ee95c61cd284f6b5a2d75e2ef2b29ee8149e77fb81447b2fd04b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbd",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b9d7ca81cc60bb9578e44024e5a0a0be80f27336a6a9f4e53df3999cb191280b090e2ac2d29c5baad9d71415bdc129e69aa2667af6a7fd5e189fccdcee817340",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbe",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a755e113386572c75ced61d719706070b9146048e42a9f8cd35667a088b42f08808abdf77e618abd959afc757379ca2c00bcc1a48390fa2bff618b1e0078a613",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a73c7debed326f1c0db0795ee7d6e3946894b826b1f8101c56c823ba17168312e7f53fc7dbe52c3e11e69852c40485e2ef182477862ea6a34ec136e2dfeea6f4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6cb8f9d52c56d82cac28f39ea1593e8bb2506293ac0d68376a1709b62a46df14a4ae64b2d8fab76733a1ced2d548e3f3c6fcb49d40c3d5808e449cd83d1c2aa2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "683fa2b2369a10162c1c1c7b24bc970ee67da220564f32203f625696c0352a0b9ad96624362d952d84463c1106a2dba7a092599884b35a0b89c8f1b6a9b5a61e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "aad9ad44610118b77d508aeb1bbcd1c1b7d0171397fb510a401bbc0ec34623670d86a2dc3c8f3ab5a2044df730256727545f0860ce21a1eac717dfc48f5d228e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c42578de23b4c987d5e1ac4d689ed5de4b0417f9704bc6bce969fa13471585d62c2cb1212a944f397fc9ca2c3747c3beb694ec4c5be68828dda53ef43faec6c0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "470f00841ee8244e63ed2c7ea30e2e419897c197462ecccecf713b42a5065fff5914bc9b79affe8f6b657875e789ae213bd914cd35bd174d46e9d18bd843773d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "34fc4213730f47a5e9a3580f643e12945cfcb31bf206f6ad450ce528da3fa432e005d6b0ecce10dca7c5995f6aacc5150e1b009e19751e8309f8859531844374",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "fb3c1f0f56a56f8e316fdf5d853c8c872c39635d083634c3904fc3ac07d1b578e85ff0e480e92d44ade33b62e893ee32343e79ddf6ef292e89b582d312502314",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c7c97fc65dd2b9e3d3d607d31598d3f84261e9919251e9c8e57bb5f829377d5f73eabbed55c6c381180f29ad02e5be797ffec7e57bdecbc50ad3d062f0993ab0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a57a49cdbe67ae7d9f797bb5cc7efc2df07f4e1b15955f85dae74b76e2ecb85afb6cd9eeed8888d5ca3ec5ab65d27a7b19e578475760a045ac3c92e13a938e77",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c7143fce9614a17fd653aeb140726dc9c3dbb1de6cc581b2726897ec24b7a50359ad492243be66d9edd8c933b5b80e0b91bb61ea98056006516976fae8d99a35",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9ca",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "65bb58d07f937e2d3c7e65385f9c54730b704105ccdb691f6e146d4ee8f6c086f49511035110a9ad6031fdceb943e0f9613bcb276dd40f0624ef0f924f809783",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacb",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e540277f683b1186dd3b5b3f61433396581a35feb12002be8c6a6231fc40ffa70f08081bc58b2d94f7649543614a435faa2d62110e13dabc7b86629b63af9c24",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcc",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "418500878c5fbcb584c432f4285e05e49f2e3e075399a0dbfcf874ebf8c03d02bf16bc6989d161c77ca0786b05053c6c709433712319192128835cf0b660595b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccd",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "889090dbb1944bdc9433ee5ef1010c7a4a24a8e71ecea8e12a31318ce49dcab0aca5c3802334aab2cc84b14c6b9321fe586bf3f876f19cd406eb1127fb944801",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdce",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "53b6a28910aa92e27e536fb549cf9b9918791060898e0b9fe183577ff43b5e9c7689c745b32e412269837c31b89e6cc12bf76e13cad366b74ece48bb85fd09e9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecf",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7c092080c6a80d672409d081d3d177106bcd63567785140719490950ae07ae8fcaabbaaab330cfbcf7374482c220af2eadeeb73dcbb35ed823344e144e7d4899",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9ccde566d2400509181111f32dde4cd63209fe59a30c114546ad2776d889a41bad8fa1bb468cb2f9d42ca9928a7770fef8e8ba4d0c812d9a1e75c3d8d2ccd75a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6e293bf5d03fe43977cfe3f57ccdb3ae282a85455dca33f37f4b74f8398cc612433d755cbec412f8f82a3bd3bc4a278f7ecd0dfa9bbdc40be7a787c8f159b2df",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c56546fb2178456f336164c18b90deffc83ae2b5a3aca77b6884d36d2c1db39501b3e65e36c758c66e3188451fdb3515ee162c001f06c3e8cb573adf30f7a101",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6f82f89f299ebca2fe014b59bffe1aa84e88b1915fe256afb646fd8448af2b8891a7fab37a4ea6f9a50e6c317039d8cf878f4c8e1a0dd464f0b4d6ff1c7ea853",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2b8599ff9c3d6198637ad51e57d1998b0d75313fe2dd61a533c964a6dd9607c6f723e9452ce46e014b1c1d6de77ba5b88c914d1c597bf1eae13474b4290e89b2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "08bf346d38e1df06c8260edb1da75579275948d5c0a0aa9ed2886f8856de5417a156998758f5b17e52f101ca957a71137473dfd18d7d209c4c10d9233c93691d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6df2156d773114d310b63db9ee5350d77e6bcf25b05fcd910f9b31bc42bb13fe8225ebcb2a23a62280777b6bf74e2cd0917c7640b43defe468cd1e18c943c66a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7c7038bc13a91151828a5ba82b4a96040f258a4dfb1b1373f0d359168afb0517a20b28a12d3644046be66b8d08d8ae7f6a923ea1c00187c6d11dc502bac71305",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bcd1b30d808fb739b987cbf154bea00da9d40380b861d4c1d6377122dadd61c0e59018b71941cfb62e00dcd70aeb9abf0473e80f0a7eca6b6dea246ab229dd2b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7ed4468d968530fe7ab2c33540b26d8c3bd3ed44b34fbe8c2a9d7f805b5ada0ea252eeade4fce97f89728ad85bc8bb2430b1bef2cddd32c8446e59b8e8ba3c67",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9da",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6d30b7c6ce8a3236c0ca2f8d728b1088ca06983a8043e621d5dcf0c537d13b08791edeb01a3cf0943ec1c890ab6e29b146a236cd46bcb9d93bf516fb67c63fe5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadb",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "97fe03cef31438508911bded975980a66029305dc5e3fa8ad1b4fb22fcdf5a19a733320327d8f71ccf496cb3a44a77af56e3dde73d3a5f176896cc57c9a5ad99",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdc",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "785a9d0fbd21136dbce8fa7eafd63c9dad220052978416b31d9753eaa149097847ed9b30a65c70507eff01879149ed5cf0471d37798edc05abd56ad4a2cccb1d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdd",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ad408d2abddfd37b3bf34794c1a3371d928ed7fc8d966225333584c5665817832a37c07f0dc7cb5aa874cd7d20fe8fab8eabcb9b33d2e0841f6e200960899d95",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcddde",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "97668f745b6032fc815d9579322769dccd9501a5080029b8ae826befb6742331bd9f76efeb3e2b8e81a9786b282f5068a3a2424697a77c41876b7e753f4c7767",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "26bb985f47e7fee0cfd252d4ef96bed42b9c370c1c6a3e8c9eb04ef7f7818b833a0d1f043ebafb911dc779e02740a02a44d3a1ea45ed4ad55e686c927cafe97e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5bfe2b1dcf7fe9b95088acedb575c19016c743b2e763bf5851ac407c9eda43715edfa48b4825492c5179593fff21351b76e8b7e034e4c53c79f61f29c479bd08",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c76509ef72f4a6f9c9c40618ed52b2084f83502232e0ac8bdaf3264368e4d0180f6854c4abf4f6509c79caafc44cf3194afc57bd077bd7b3c9bda3d4b8775816",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d66f2beab990e354ccb910e4e9c7ac618c7b63ef292a96b552341de78dc46d3ec8cfabc699b50af41fda39cf1b0173660923510ad67faedef5207cffe8641d20",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7d8f0672992b79be3a364d8e5904f4ab713bbc8ab01b4f309ad8ccf223ce1034a860dcb0b00550612cc2fa17f2969e18f22e1427d254b4a82b3a03a3eb394adf",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a56d6725bfb3de47c1414adf25fc8f0fc9846f6987722bc06366d5ca4e89722925ebbc881418844075397a0ca89842c7b9e9e07e1d9d183ebeb39e120b483bf7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "af5e03d7fe60c67e10313344434e79485a03a758d6dce985574745763c1c5c77d4fb3e6fb12230368370993bf90feed0c5d1607524562d7c09c0c210ed393d7c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7a20540cc07bf72b582421fc342e82f52134b69841ec28ed189e2ea6a29dd2f82a640352d222b52f2911dc72a7dab31caadd80c6118f13c56b2a1e4373be0ea3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "486f02c63e5467ea1fdde7e82bfacc2c1ba5d636d9f3d08b210da3f372f706ec218cc17ff60aef703bbe0c15c38ae55d286a684f864c78211ccab4178c92adba",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1c7a5c1dedcd04a921788f7eb23361ca1953b04b9c7aec35d65ea3e4996db26f281278ea4ae666ad81027d98af57262cdbfa4c085f4210568c7e15eec7805114",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9ce3fa9a860bdbd5378fd6d7b8b671c6cb7692910ce8f9b6cb4122cbcbe6ac06ca0422cef1225935053b7d193a81b9e972eb85a1d3074f14cbb5ec9f0573892d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9ea",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a91187be5c371c4265c174fd4653b8ab708551f83d1fee1cc1479581bc006d6fb78fcc9a5dee1db3666f508f9780a37593ebcccf5fbed39667dc6361e921f779",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaeb",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4625767d7b1d3d3ed2fbc674af14e0244152f2a4021fcf3311505d89bd81e2f9f9a500c3b199914db49500b3c98d03ea93286751a686a3b875daab0ccd63b44f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebec",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "43dfdfe1b014fed3a2acabb7f3e9a182f2aa18019d27e3e6cdcf31a15b428e91e7b08cf5e5c376fce2d8a28ff85ab0a0a1656edb4a0a91532620096d9a5a652d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebeced",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "279e3202be3989ba3112772585177487e4fe3ee3eab49c2f7fa7fe87cfe7b80d3e0355edff6d031e6c96c795db1c6f041880ec3824defacf9263820a8e7327de",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedee",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ea2d066ac229d4d4b616a8bedec734325224e4b4e58f1ae6dad7e40c2da29196c3b1ea9571dacc81e87328caa0211e09027b0524aa3f4a849917b3586747ebbb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeef",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "49f014f5c61822c899ab5cae51be4044a4495e777deb7da9b6d8490efbb87530adf293daf079f94c33b7044ef62e2e5bb3eb11e17304f8453ee6ce24f033ddb0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9233490344e5b0dc5912671b7ae54cee7730dbe1f4c7d92a4d3e3aab50571708db51dcf9c2944591db651db32d22935b86944969be77d5b5feae6c3840a8db26",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b6e75e6f4c7f453b7465d25b5ac8c7196902eaa953875228c8634e16e2ae1f38bc3275304335f5989eccc1e34167d4e68d7719968fba8e2fe67947c35c48e806",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "cc14ca665af1483efbc3af80080e650d5046a3932f4f51f3fe90a0705ec25104adf07839265dc51d43401411246e474f0d5e5637af94767283d53e0617e981f4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "230a1c857cb2e7852e41b647e90e4585d2d881e1734dc38955356e8dd7bff39053092c6b38e236e1899525647073dddf6895d64206325e7647f275567b255909",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "cbb65321ac436e2ffdab2936359ce49023f7dee7614ef28d173c3d27c5d1bffa51553d433f8ee3c9e49c05a2b883cce954c9a8093b80612a0cdd4732e041f995",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3e7e570074337275efb51315588034c3cf0dddca20b4612e0bd5b881e7e5476d319ce4fe9f19186e4c0826f44f131eb048e65be242b1172c63badb123ab0cbe8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d32e9ec02d38d4e1b8249df8dcb00c5b9c68eb8922672e3505393b6a210ba56f9496e5ee0490ef387c3cdec061f06bc0382d9304cafbb8e0cd33d57029e62df2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8c1512466089f05b3775c262b62d22b83854a83218130b4ec91b3ccbd293d2a54302cecaab9b100c68d1e6ddc8f07cddbdfe6fdaaaf099cc09d6b725879c6369",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "91a7f61c97c2911e4c812ef71d780ad8fa788794561d08303fd1c1cb608a46a12563086ec5b39d471aed94fb0f6c678a43b8792932f9028d772a22768ea23a9b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4f6bb222a395e8b18f6ba155477aed3f0729ac9e83e16d31a2a8bc655422b837c891c6199e6f0d75799e3b691525c581953517f252c4b9e3a27a28fbaf49644c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fa",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5d06c07e7a646c413a501c3f4bb2fc38127de7509b7077c4d9b5613201c1aa02fd5f79d2745915dd57fbcb4ce08695f6efc0cb3d2d330e19b4b0e6004ea6471e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafb",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b96756e57909968f14b796a5d30f4c9d671472cf82c8cfb2caca7ac7a44ca0a14c9842d00c82e337502c94d5960aca4c492ea7b0df919ddf1aada2a275bb10d4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfc",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ff0a015e98db9c99f03977710aac3e658c0d896f6d71d618ba79dc6cf72ac75b7c038eb6862dede4543e145413a6368d69f5722c827ba3ef25b6ae6440d39276",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfd",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5b21c5fd8868367612474fa2e70e9cfa2201ffeee8fafab5797ad58fefa17c9b5b107da4a3db6320baaf2c8617d5a51df914ae88da3867c2d41f0cc14fa67928",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfe",
    "key": "",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "10ebb67700b1868efb4417987acf4690ae9d972fb7a590c2f02871799aaa4786b5e996e8f0f4eb981fc214b005f42d2ff4233499391653df7aefcbc13fc51568",
    "input": "",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "961f6dd1e4dd30f63901690c512e78e4b45e4742ed197c3c5e45c549fd25f2e4187b0bc9fe30492b16b0d0bc4ef9b0f34c7003fac09a5ef1532e69430234cebd",
    "input": "00",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "da2cfbe2d8409a0f38026113884f84b50156371ae304c4430173d08a99d9fb1b983164a3770706d537f49e0c916d9f32b95cc37a95b99d857436f0232c88a965",
    "input": "0001",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "33d0825dddf7ada99b0e7e307104ad07ca9cfd9692214f1561356315e784f3e5a17e364ae9dbb14cb2036df932b77f4b292761365fb328de7afdc6d8998f5fc1",
    "input": "000102",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "beaa5a3d08f3807143cf621d95cd690514d0b49efff9c91d24b59241ec0eefa5f60196d407048bba8d2146828ebcb0488d8842fd56bb4f6df8e19c4b4daab8ac",
    "input": "00010203",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "098084b51fd13deae5f4320de94a688ee07baea2800486689a8636117b46c1f4c1f6af7f74ae7c857600456a58a3af251dc4723a64cc7c0a5ab6d9cac91c20bb",
    "input": "0001020304",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6044540d560853eb1c57df0077dd381094781cdb9073e5b1b3d3f6c7829e12066bbaca96d989a690de72ca3133a83652ba284a6d62942b271ffa2620c9e75b1f",
    "input": "000102030405",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7a8cfe9b90f75f7ecb3acc053aaed6193112b6f6a4aeeb3f65d3de541942deb9e2228152a3c4bbbe72fc3b12629528cfbb09fe630f0474339f54abf453e2ed52",
    "input": "00010203040506",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "380beaf6ea7cc9365e270ef0e6f3a64fb902acae51dd5512f84259ad2c91f4bc4108db73192a5bbfb0cbcf71e46c3e21aee1c5e860dc96e8eb0b7b8426e6abe9",
    "input": "0001020304050607",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "60fe3c4535e1b59d9a61ea8500bfac41a69dffb1ceadd9aca323e9a625b64da5763bad7226da02b9c8c4f1a5de140ac5a6c1124e4f718ce0b28ea47393aa6637",
    "input": "000102030405060708",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4fe181f54ad63a2983feaaf77d1e7235c2beb17fa328b6d9505bda327df19fc37f02c4b6f0368ce23147313a8e5738b5fa2a95b29de1c7f8264eb77b69f585cd",
    "input": "00010203040506070809",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f228773ce3f3a42b5f144d63237a72d99693adb8837d0e112a8a0f8ffff2c362857ac49c11ec740d1500749dac9b1f4548108bf3155794dcc9e4082849e2b85b",
    "input": "000102030405060708090a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "962452a8455cc56c8511317e3b1f3b2c37df75f588e94325fdd77070359cf63a9ae6e930936fdf8e1e08ffca440cfb72c28f06d89a2151d1c46cd5b268ef8563",
    "input": "000102030405060708090a0b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "43d44bfa18768c59896bf7ed1765cb2d14af8c260266039099b25a603e4ddc5039d6ef3a91847d1088d401c0c7e847781a8a590d33a3c6cb4df0fab1c2f22355",
    "input": "000102030405060708090a0b0c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "dcffa9d58c2a4ca2cdbb0c7aa4c4c1d45165190089f4e983bb1c2cab4aaeff1fa2b5ee516fecd780540240bf37e56c8bcca7fab980e1e61c9400d8a9a5b14ac6",
    "input": "000102030405060708090a0b0c0d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6fbf31b45ab0c0b8dad1c0f5f4061379912dde5aa922099a030b725c73346c524291adef89d2f6fd8dfcda6d07dad811a9314536c2915ed45da34947e83de34e",
    "input": "000102030405060708090a0b0c0d0e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a0c65bddde8adef57282b04b11e7bc8aab105b99231b750c021f4a735cb1bcfab87553bba3abb0c3e64a0b6955285185a0bd35fb8cfde557329bebb1f629ee93",
    "input": "000102030405060708090a0b0c0d0e0f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f99d815550558e81eca2f96718aed10d86f3f1cfb675cce06b0eff02f617c5a42c5aa760270f2679da2677c5aeb94f1142277f21c7f79f3c4f0cce4ed8ee62b1",
    "input": "000102030405060708090a0b0c0d0e0f10",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "95391da8fc7b917a2044b3d6f5374e1ca072b41454d572c7356c05fd4bc1e0f40b8bb8b4a9f6bce9be2c4623c399b0dca0dab05cb7281b71a21b0ebcd9e55670",
    "input": "000102030405060708090a0b0c0d0e0f1011",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "04b9cd3d20d221c09ac86913d3dc63041989a9a1e694f1e639a3ba7e451840f750c2fc191d56ad61f2e7936bc0ac8e094b60caeed878c18799045402d61ceaf9",
    "input": "000102030405060708090a0b0c0d0e0f101112",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ec0e0ef707e4ed6c0c66f9e089e4954b058030d2dd86398fe84059631f9ee591d9d77375355149178c0cf8f8e7c49ed2a5e4f95488a2247067c208510fadc44c",
    "input": "000102030405060708090a0b0c0d0e0f10111213",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9a37cce273b79c09913677510eaf7688e89b3314d3532fd2764c39de022a2945b5710d13517af8ddc0316624e73bec1ce67df15228302036f330ab0cb4d218dd",
    "input": "000102030405060708090a0b0c0d0e0f1011121314",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4cf9bb8fb3d4de8b38b2f262d3c40f46dfe747e8fc0a414c193d9fcf753106ce47a18f172f12e8a2f1c26726545358e5ee28c9e2213a8787aafbc516d2343152",
    "input": "000102030405060708090a0b0c0d0e0f101112131415",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "64e0c63af9c808fd893137129867fd91939d53f2af04be4fa268006100069b2d69daa5c5d8ed7fddcb2a70eeecdf2b105dd46a1e3b7311728f639ab489326bc9",
    "input": "000102030405060708090a0b0c0d0e0f10111213141516",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5e9c93158d659b2def06b0c3c7565045542662d6eee8a96a89b78ade09fe8b3dcc096d4fe48815d88d8f82620156602af541955e1f6ca30dce14e254c326b88f",
    "input": "000102030405060708090a0b0c0d0e0f1011121314151617",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7775dff889458dd11aef417276853e21335eb88e4dec9cfb4e9edb49820088551a2ca60339f12066101169f0dfe84b098fddb148d9da6b3d613df263889ad64b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f0d2805afbb91f743951351a6d024f9353a23c7ce1fc2b051b3a8b968c233f46f50f806ecb1568ffaa0b60661e334b21dde04f8fa155ac740eeb42e20b60d764",
    "input": "000102030405060708090a0b0c0d0e0f10111213141516171819",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "86a2af316e7d7754201b942e275364ac12ea8962ab5bd8d7fb276dc5fbffc8f9a28cae4e4867df6780d9b72524160927c855da5b6078e0b554aa91e31cb9ca1d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "10bdf0caa0802705e706369baf8a3f79d72c0a03a80675a7bbb00be3a45e516424d1ee88efb56f6d5777545ae6e27765c3a8f5e493fc308915638933a1dfee55",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b01781092b1748459e2e4ec178696627bf4ebafebba774ecf018b79a68aeb84917bf0b84bb79d17b743151144cd66b7b33a4b9e52c76c4e112050ff5385b7f0b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c6dbc61dec6eaeac81e3d5f755203c8e220551534a0b2fd105a91889945a638550204f44093dd998c076205dffad703a0e5cd3c7f438a7e634cd59fededb539e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "eba51acffb4cea31db4b8d87e9bf7dd48fe97b0253ae67aa580f9ac4a9d941f2bea518ee286818cc9f633f2a3b9fb68e594b48cdd6d515bf1d52ba6c85a203a7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "86221f3ada52037b72224f105d7999231c5e5534d03da9d9c0a12acb68460cd375daf8e24386286f9668f72326dbf99ba094392437d398e95bb8161d717f8991",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5595e05c13a7ec4dc8f41fb70cb50a71bce17c024ff6de7af618d0cc4e9c32d9570d6d3ea45b86525491030c0d8f2b1836d5778c1ce735c17707df364d054347",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ce0f4f6aca89590a37fe034dd74dd5fa65eb1cbd0a41508aaddc09351a3cea6d18cb2189c54b700c009f4cbf0521c7ea01be61c5ae09cb54f27bc1b44d658c82",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7ee80b06a215a3bca970c77cda8761822bc103d44fa4b33f4d07dcb997e36d55298bceae12241b3fa07fa63be5576068da387b8d5859aeab701369848b176d42",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "940a84b6a84d109aab208c024c6ce9647676ba0aaa11f86dbb7018f9fd2220a6d901a9027f9abcf935372727cbf09ebd61a2a2eeb87653e8ecad1bab85dc8327",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2020b78264a82d9f4151141adba8d44bf20c5ec062eee9b595a11f9e84901bf148f298e0c9f8777dcdbc7cc4670aac356cc2ad8ccb1629f16f6a76bcefbee760",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d1b897b0e075ba68ab572adf9d9c436663e43eb3d8e62d92fc49c9be214e6f27873fe215a65170e6bea902408a25b49506f47babd07cecf7113ec10c5dd31252",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b14d0c62abfa469a357177e594c10c194243ed2025ab8aa5ad2fa41ad318e0ff48cd5e60bec07b13634a711d2326e488a985f31e31153399e73088efc86a5c55",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4169c5cc808d2697dc2a82430dc23e3cd356dc70a94566810502b8d655b39abf9e7f902fe717e0389219859e1945df1af6ada42e4ccda55a197b7100a30c30a1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252627",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "258a4edb113d66c839c8b1c91f15f35ade609f11cd7f8681a4045b9fef7b0b24c82cda06a5f2067b368825e3914e53d6948ede92efd6e8387fa2e537239b5bee",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "79d2d8696d30f30fb34657761171a11e6c3f1e64cbe7bebee159cb95bfaf812b4f411e2f26d9c421dc2c284a3342d823ec293849e42d1e46b0a4ac1e3c86abaa",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526272829",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8b9436010dc5dee992ae38aea97f2cd63b946d94fedd2ec9671dcde3bd4ce9564d555c66c15bb2b900df72edb6b891ebcadfeff63c9ea4036a998be7973981e7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c8f68e696ed28242bf997f5b3b34959508e42d613810f1e2a435c96ed2ff560c7022f361a9234b9837feee90bf47922ee0fd5f8ddf823718d86d1e16c6090071",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b02d3eee4860d5868b2c39ce39bfe81011290564dd678c85e8783f29302dfc1399ba95b6b53cd9ebbf400cca1db0ab67e19a325f2d115812d25d00978ad1bca4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7693ea73af3ac4dad21ca0d8da85b3118a7d1c6024cfaf557699868217bc0c2f44a199bc6c0edd519798ba05bd5b1b4484346a47c2cadf6bf30b785cc88b2baf",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a0e5c1c0031c02e48b7f09a5e896ee9aef2f17fc9e18e997d7f6cac7ae316422c2b1e77984e5f3a73cb45deed5d3f84600105e6ee38f2d090c7d0442ea34c46d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "41daa6adcfdb69f1440c37b596440165c15ada596813e2e22f060fcd551f24dee8e04ba6890387886ceec4a7a0d7fc6b44506392ec3822c0d8c1acfc7d5aebe8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "14d4d40d5984d84c5cf7523b7798b254e275a3a8cc0a1bd06ebc0bee726856acc3cbf516ff667cda2058ad5c3412254460a82c92187041363cc77a4dc215e487",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d0e7a1e2b9a447fee83e2277e9ff8010c2f375ae12fa7aaa8ca5a6317868a26a367a0b69fbc1cf32a55d34eb370663016f3d2110230eba754028a56f54acf57c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e771aa8db5a3e043e8178f39a0857ba04a3f18e4aa05743cf8d222b0b095825350ba422f63382a23d92e4149074e816a36c1cd28284d146267940b31f8818ea2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "feb4fd6f9e87a56bef398b3284d2bda5b5b0e166583a66b61e538457ff0584872c21a32962b9928ffab58de4af2edd4e15d8b35570523207ff4e2a5aa7754caa",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "462f17bf005fb1c1b9e671779f665209ec2873e3e411f98dabf240a1d5ec3f95ce6796b6fc23fe171903b502023467dec7273ff74879b92967a2a43a5a183d33",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d3338193b64553dbd38d144bea71c5915bb110e2d88180dbc5db364fd6171df317fc7268831b5aef75e4342b2fad8797ba39eddcef80e6ec08159350b1ad696d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e1590d585a3d39f7cb599abd479070966409a6846d4377acf4471d065d5db94129cc9be92573b05ed226be1e9b7cb0cabe87918589f80dadd4ef5ef25a93d28e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f8f3726ac5a26cc80132493a6fedcb0e60760c09cfc84cad178175986819665e76842d7b9fedf76dddebf5d3f56faaad4477587af21606d396ae570d8e719af2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334353637",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "30186055c07949948183c850e9a756cc09937e247d9d928e869e20bafc3cd9721719d34e04a0899b92c736084550186886efba2e790d8be6ebf040b209c439a4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f3c4276cb863637712c241c444c5cc1e3554e0fddb174d035819dd83eb700b4ce88df3ab3841ba02085e1a99b4e17310c5341075c0458ba376c95a6818fbb3e2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536373839",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0aa007c4dd9d5832393040a1583c930bca7dc5e77ea53add7e2b3f7c8e231368043520d4a3ef53c969b6bbfd025946f632bd7f765d53c21003b8f983f75e2a6a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "08e9464720533b23a04ec24f7ae8c103145f765387d738777d3d343477fd1c58db052142cab754ea674378e18766c53542f71970171cc4f81694246b717d7564",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d37ff7ad297993e7ec21e0f1b4b5ae719cdc83c5db687527f27516cbffa822888a6810ee5c1ca7bfe3321119be1ab7bfa0a502671c8329494df7ad6f522d440f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "dd9042f6e464dcf86b1262f6accfafbd8cfd902ed3ed89abf78ffa482dbdeeb6969842394c9a1168ae3d481a017842f660002d42447c6b22f7b72f21aae021c9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bd965bf31e87d70327536f2a341cebc4768eca275fa05ef98f7f1b71a0351298de006fba73fe6733ed01d75801b4a928e54231b38e38c562b2e33ea1284992fa",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "65676d800617972fbd87e4b9514e1c67402b7a331096d3bfac22f1abb95374abc942f16e9ab0ead33b87c91968a6e509e119ff07787b3ef483e1dcdccf6e3022",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "939fa189699c5d2c81ddd1ffc1fa207c970b6a3685bb29ce1d3e99d42f2f7442da53e95a72907314f4588399a3ff5b0a92beb3f6be2694f9f86ecf2952d5b41c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c516541701863f91005f314108ceece3c643e04fc8c42fd2ff556220e616aaa6a48aeb97a84bad74782e8dff96a1a2fa949339d722edcaa32b57067041df88cc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f4041",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "987fd6e0d6857c553eaebb3d34970a2c2f6e89a3548f492521722b80a1c21a153892346d2cba6444212d56da9a26e324dccbc0dcde85d4d2ee4399eec5a64e8f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ae56deb1c2328d9c4017706bce6e99d41349053ba9d336d677c4c27d9fd50ae6aee17e853154e1f4fe7672346da2eaa31eea53fcf24a22804f11d03da6abfc2b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40414243",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "49d6a608c9bde4491870498572ac31aac3fa40938b38a7818f72383eb040ad39532bc06571e13d767e6945ab77c0bdc3b0284253343f9f6c1244ebf2ff0df866",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f4041424344",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "da582ad8c5370b4469af862aa6467a2293b2b28bd80ae0e91f425ad3d47249fdf98825cc86f14028c3308c9804c78bfeeeee461444ce243687e1a50522456a1d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d5266aa3331194aef852eed86d7b5b2633a0af1c735906f2e13279f14931a9fc3b0eac5ce9245273bd1aa92905abe16278ef7efd47694789a7283b77da3c70f8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40414243444546",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2962734c28252186a9a1111c732ad4de4506d4b4480916303eb7991d659ccda07a9911914bc75c418ab7a4541757ad054796e26797feaf36e9f6ad43f14b35a4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f4041424344454647",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e8b79ec5d06e111bdfafd71e9f5760f00ac8ac5d8bf768f9ff6f08b8f026096b1cc3a4c973333019f1e3553e77da3f98cb9f542e0a90e5f8a940cc58e59844b3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "dfb320c44f9d41d1efdcc015f08dd5539e526e39c87d509ae6812a969e5431bf4fa7d91ffd03b981e0d544cf72d7b1c0374f8801482e6dea2ef903877eba675e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40414243444546474849",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d88675118fdb55a5fb365ac2af1d217bf526ce1ee9c94b2f0090b2c58a06ca58187d7fe57c7bed9d26fca067b4110eefcd9a0a345de872abe20de368001b0745",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b893f2fc41f7b0dd6e2f6aa2e0370c0cff7df09e3acfcc0e920b6e6fad0ef747c40668417d342b80d2351e8c175f20897a062e9765e6c67b539b6ba8b9170545",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6c67ec5697accd235c59b486d7b70baeedcbd4aa64ebd4eef3c7eac189561a726250aec4d48cadcafbbe2ce3c16ce2d691a8cce06e8879556d4483ed7165c063",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f1aa2b044f8f0c638a3f362e677b5d891d6fd2ab0765f6ee1e4987de057ead357883d9b405b9d609eea1b869d97fb16d9b51017c553f3b93c0a1e0f1296fedcd",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "cbaa259572d4aebfc1917acddc582b9f8dfaa928a198ca7acd0f2aa76a134a90252e6298a65b08186a350d5b7626699f8cb721a3ea5921b753ae3a2dce24ba3a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "fa1549c9796cd4d303dcf452c1fbd5744fd9b9b47003d920b92de34839d07ef2a29ded68f6fc9e6c45e071a2e48bd50c5084e96b657dd0404045a1ddefe282ed",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5cf2ac897ab444dcb5c8d87c495dbdb34e1838b6b629427caa51702ad0f9688525f13bec503a3c3a2c80a65e0b5715e8afab00ffa56ec455a49a1ad30aa24fcd",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9aaf80207bace17bb7ab145757d5696bde32406ef22b44292ef65d4519c3bb2ad41a59b62cc3e94b6fa96d32a7faadae28af7d35097219aa3fd8cda31e40c275",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f5051",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "af88b163402c86745cb650c2988fb95211b94b03ef290eed9662034241fd51cf398f8073e369354c43eae1052f9b63b08191caa138aa54fea889cc7024236897",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "48fa7d64e1ceee27b9864db5ada4b53d00c9bc7626555813d3cd6730ab3cc06ff342d727905e33171bde6e8476e77fb1720861e94b73a2c538d254746285f430",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50515253",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0e6fd97a85e904f87bfe85bbeb34f69e1f18105cf4ed4f87aec36c6e8b5f68bd2a6f3dc8a9ecb2b61db4eedb6b2ea10bf9cb0251fb0f8b344abf7f366b6de5ab",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f5051525354",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "06622da5787176287fdc8fed440bad187d830099c94e6d04c8e9c954cda70c8bb9e1fc4a6d0baa831b9b78ef6648681a4867a11da93ee36e5e6a37d87fc63f6f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1da6772b58fabf9c61f68d412c82f182c0236d7d575ef0b58dd22458d643cd1dfc93b03871c316d8430d312995d4197f0874c99172ba004a01ee295abac24e46",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50515253545556",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3cd2d9320b7b1d5fb9aab951a76023fa667be14a9124e394513918a3f44096ae4904ba0ffc150b63bc7ab1eeb9a6e257e5c8f000a70394a5afd842715de15f29",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f5051525354555657",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "04cdc14f7434e0b4be70cb41db4c779a88eaef6accebcb41f2d42fffe7f32a8e281b5c103a27021d0d08362250753cdf70292195a53a48728ceb5844c2d98bab",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9071b7a8a075d0095b8fb3ae5113785735ab98e2b52faf91d5b89e44aac5b5d4ebbf91223b0ff4c71905da55342e64655d6ef8c89a4768c3f93a6dc0366b5bc8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50515253545556575859",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ebb30240dd96c7bc8d0abe49aa4edcbb4afdc51ff9aaf720d3f9e7fbb0f9c6d6571350501769fc4ebd0b2141247ff400d4fd4be414edf37757bb90a32ac5c65a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8532c58bf3c8015d9d1cbe00eef1f5082f8f3632fbe9f1ed4f9dfb1fa79e8283066d77c44c4af943d76b300364aecbd0648c8a8939bd204123f4b56260422dec",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "fe9846d64f7c7708696f840e2d76cb4408b6595c2f81ec6a28a7f2f20cb88cfe6ac0b9e9b8244f08bd7095c350c1d0842f64fb01bb7f532dfcd47371b0aeeb79",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "28f17ea6fb6c42092dc264257e29746321fb5bdaea9873c2a7fa9d8f53818e899e161bc77dfe8090afd82bf2266c5c1bc930a8d1547624439e662ef695f26f24",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ec6b7d7f030d4850acae3cb615c21dd25206d63e84d1db8d957370737ba0e98467ea0ce274c66199901eaec18a08525715f53bfdb0aacb613d342ebdceeddc3b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b403d3691c03b0d3418df327d5860d34bbfcc4519bfbce36bf33b208385fadb9186bc78a76c489d89fd57e7dc75412d23bcd1dae8470ce9274754bb8585b13c5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "31fc79738b8772b3f55cd8178813b3b52d0db5a419d30ba9495c4b9da0219fac6df8e7c23a811551a62b827f256ecdb8124ac8a6792ccfecc3b3012722e94463",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bb2039ec287091bcc9642fc90049e73732e02e577e2862b32216ae9bedcd730c4c284ef3968c368b7d37584f97bd4b4dc6ef6127acfe2e6ae2509124e66c8af4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f53d68d13f45edfcb9bd415e2831e938350d5380d3432278fc1c0c381fcb7c65c82dafe051d8c8b0d44e0974a0e59ec7bf7ed0459f86e96f329fc79752510fd3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8d568c7984f0ecdf7640fbc483b5d8c9f86634f6f43291841b309a350ab9c1137d24066b09da9944bac54d5bb6580d836047aac74ab724b887ebf93d4b32eca9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c0b65ce5a96ff774c456cac3b5f2c4cd359b4ff53ef93a3da0778be4900d1e8da1601e769e8f1b02d2a2f8c5b9fa10b44f1c186985468feeb008730283a6657d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061626364",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4900bba6f5fb103ece8ec96ada13a5c3c85488e05551da6b6b33d988e611ec0fe2e3c2aa48ea6ae8986a3a231b223c5d27cec2eadde91ce07981ee652862d1e4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c7f5c37c7285f927f76443414d4357ff789647d7a005a5a787e03c346b57f49f21b64fa9cf4b7e45573e23049017567121a9c3d4b2b73ec5e9413577525db45a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263646566",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ec7096330736fdb2d64b5653e7475da746c23a4613a82687a28062d3236364284ac01720ffb406cfe265c0df626a188c9e5963ace5d3d5bb363e32c38c2190a6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061626364656667",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "82e744c75f4649ec52b80771a77d475a3bc091989556960e276a5f9ead92a03f718742cdcfeaee5cb85c44af198adc43a4a428f5f0c2ddb0be36059f06d7df73",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2834b7a7170f1f5b68559ab78c1050ec21c919740b784a9072f6e5d69f828d70c919c5039fb148e39e2c8a52118378b064ca8d5001cd10a5478387b966715ed6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263646566676869",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "16b4ada883f72f853bb7ef253efcab0c3e2161687ad61543a0d2824f91c1f81347d86be709b16996e17f2dd486927b0288ad38d13063c4a9672c39397d3789b6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "78d048f3a69d8b54ae0ed63a573ae350d89f7c6cf1f3688930de899afa037697629b314e5cd303aa62feea72a25bf42b304b6c6bcb27fae21c16d925e1fbdac3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0f746a48749287ada77a82961f05a4da4abdb7d77b1220f836d09ec814359c0ec0239b8c7b9ff9e02f569d1b301ef67c4612d1de4f730f81c12c40cc063c5caa",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f0fc859d3bd195fbdc2d591e4cdac15179ec0f1dc821c11df1f0c1d26e6260aaa65b79fafacafd7d3ad61e600f250905f5878c87452897647a35b995bcadc3a3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2620f687e8625f6a412460b42e2cef67634208ce10a0cbd4dff7044a41b7880077e9f8dc3b8d1216d3376a21e015b58fb279b521d83f9388c7382c8505590b9b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "227e3aed8d2cb10b918fcb04f9de3e6d0a57e08476d93759cd7b2ed54a1cbf0239c528fb04bbf288253e601d3bc38b21794afef90b17094a182cac557745e75f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1a929901b09c25f27d6b35be7b2f1c4745131fdebca7f3e2451926720434e0db6e74fd693ad29b777dc3355c592a361c4873b01133a57c2e3b7075cbdb86f4fc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5fd7968bc2fe34f220b5e3dc5af9571742d73b7d60819f2888b629072b96a9d8ab2d91b82d0a9aaba61bbd39958132fcc4257023d1eca591b3054e2dc81c8200",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "dfcce8cf32870cc6a503eadafc87fd6f78918b9b4d0737db6810be996b5497e7e5cc80e312f61e71ff3e9624436073156403f735f56b0b01845c18f6caf772e6",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "02f7ef3a9ce0fff960f67032b296efca3061f4934d690749f2d01c35c81c14f39a67fa350bc8a0359bf1724bffc3bca6d7c7bba4791fd522a3ad353c02ec5aa8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "64be5c6aba65d594844ae78bb022e5bebe127fd6b6ffa5a13703855ab63b624dcd1a363f99203f632ec386f3ea767fc992e8ed9686586aa27555a8599d5b808f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071727374",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f78585505c4eaa54a8b5be70a61e735e0ff97af944ddb3001e35d86c4e2199d976104b6ae31750a36a726ed285064f5981b503889fef822fcdc2898dddb7889a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e4b5566033869572edfd87479a5bb73c80e8759b91232879d96b1dda36c012076ee5a2ed7ae2de63ef8406a06aea82c188031b560beafb583fb3de9e57952a7e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273747576",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e1b3e7ed867f6c9484a2a97f7715f25e25294e992e41f6a7c161ffc2adc6daaeb7113102d5e6090287fe6ad94ce5d6b739c6ca240b05c76fb73f25dd024bf935",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071727374757677",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "85fd085fdc12a080983df07bd7012b0d402a0f4043fcb2775adf0bad174f9b08d1676e476985785c0a5dcc41dbff6d95ef4d66a3fbdc4a74b82ba52da0512b74",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "aed8fa764b0fbff821e05233d2f7b0900ec44d826f95e93c343c1bc3ba5a24374b1d616e7e7aba453a0ada5e4fab5382409e0d42ce9c2bc7fb39a99c340c20f0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273747576777879",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7ba3b2e297233522eeb343bd3ebcfd835a04007735e87f0ca300cbee6d416565162171581e4020ff4cf176450f1291ea2285cb9ebffe4c56660627685145051c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "de748bcf89ec88084721e16b85f30adb1a6134d664b5843569babc5bbd1a15ca9b61803c901a4fef32965a1749c9f3a4e243e173939dc5a8dc495c671ab52145",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "aaf4d2bdf200a919706d9842dce16c98140d34bc433df320aba9bd429e549aa7a3397652a4d768277786cf993cde2338673ed2e6b66c961fefb82cd20c93338f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c408218968b788bf864f0997e6bc4c3dba68b276e2125a4843296052ff93bf5767b8cdce7131f0876430c1165fec6c4f47adaa4fd8bcfacef463b5d3d0fa61a0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "76d2d819c92bce55fa8e092ab1bf9b9eab237a25267986cacf2b8ee14d214d730dc9a5aa2d7b596e86a1fd8fa0804c77402d2fcd45083688b218b1cdfa0dcbcb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "72065ee4dd91c2d8509fa1fc28a37c7fc9fa7d5b3f8ad3d0d7a25626b57b1b44788d4caf806290425f9890a3a2a35a905ab4b37acfd0da6e4517b2525c9651e4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "64475dfe7600d7171bea0b394e27c9b00d8e74dd1e416a79473682ad3dfdbb706631558055cfc8a40e07bd015a4540dcdea15883cbbf31412df1de1cd4152b91",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f80",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "12cd1674a4488a5d7c2b3160d2e2c4b58371bedad793418d6f19c6ee385d70b3e06739369d4df910edb0b0a54cbff43d54544cd37ab3a06cfa0a3ddac8b66c89",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f8081",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "60756966479dedc6dd4bcff8ea7d1d4ce4d4af2e7b097e32e3763518441147cc12b3c0ee6d2ecabf1198cec92e86a3616fba4f4e872f5825330adbb4c1dee444",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a7803bcb71bc1d0f4383dde1e0612e04f872b715ad30815c2249cf34abb8b024915cb2fc9f4e7cc4c8cfd45be2d5a91eab0941c7d270e2da4ca4a9f7ac68663a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f80818283",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b84ef6a7229a34a750d9a98ee2529871816b87fbe3bc45b45fa5ae82d5141540211165c3c5d7a7476ba5a4aa06d66476f0d9dc49a3f1ee72c3acabd498967414",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f8081828384",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "fae4b6d8efc3f8c8e64d001dabec3a21f544e82714745251b2b4b393f2f43e0da3d403c64db95a2cb6e23ebb7b9e94cdd5ddac54f07c4a61bd3cb10aa6f93b49",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "34f7286605a122369540141ded79b8957255da2d4155abbf5a8dbb89c8eb7ede8eeef1daa46dc29d751d045dc3b1d658bb64b80ff8589eddb3824b13da235a6b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f80818283848586",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3b3b48434be27b9eababba43bf6b35f14b30f6a88dc2e750c358470d6b3aa3c18e47db4017fa55106d8252f016371a00f5f8b070b74ba5f23cffc5511c9f09f0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f8081828384858687",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ba289ebd6562c48c3e10a8ad6ce02e73433d1e93d7c9279d4d60a7e879ee11f441a000f48ed9f7c4ed87a45136d7dccdca482109c78a51062b3ba4044ada2469",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "022939e2386c5a37049856c850a2bb10a13dfea4212b4c732a8840a9ffa5faf54875c5448816b2785a007da8a8d2bc7d71a54e4e6571f10b600cbdb25d13ede3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f80818283848586878889",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e6fec19d89ce8717b1a087024670fe026f6c7cbda11caef959bb2d351bf856f8055d1c0ebdaaa9d1b17886fc2c562b5e99642fc064710c0d3488a02b5ed7f6fd",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "94c96f02a8f576aca32ba61c2b206f907285d9299b83ac175c209a8d43d53bfe683dd1d83e7549cb906c28f59ab7c46f8751366a28c39dd5fe2693c9019666c8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "31a0cd215ebd2cb61de5b9edc91e6195e31c59a5648d5c9f737e125b2605708f2e325ab3381c8dce1a3e958886f1ecdc60318f882cfe20a24191352e617b0f21",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "91ab504a522dce78779f4c6c6ba2e6b6db5565c76d3e7e7c920caf7f757ef9db7c8fcf10e57f03379ea9bf75eb59895d96e149800b6aae01db778bb90afbc989",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d85cabc6bd5b1a01a5afd8c6734740da9fd1c1acc6db29bfc8a2e5b668b028b6b3154bfb8703fa3180251d589ad38040ceb707c4bad1b5343cb426b61eaa49c1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d62efbec2ca9c1f8bd66ce8b3f6a898cb3f7566ba6568c618ad1feb2b65b76c3ce1dd20f7395372faf28427f61c9278049cf0140df434f5633048c86b81e0399",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7c8fdc6175439e2c3db15bafa7fb06143a6a23bc90f449e79deef73c3d492a671715c193b6fea9f036050b946069856b897e08c00768f5ee5ddcf70b7cd6d0e0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "58602ee7468e6bc9df21bd51b23c005f72d6cb013f0a1b48cbec5eca299299f97f09f54a9a01483eaeb315a6478bad37ba47ca1347c7c8fc9e6695592c91d723",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f9091",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "27f5b79ed256b050993d793496edf4807c1d85a7b0a67c9c4fa99860750b0ae66989670a8ffd7856d7ce411599e58c4d77b232a62bef64d15275be46a68235ff",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3957a976b9f1887bf004a8dca942c92d2b37ea52600f25e0c9bc5707d0279c00c6e85a839b0d2d8eb59c51d94788ebe62474a791cadf52cccf20f5070b6573fc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90919293",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "eaa2376d55380bf772ecca9cb0aa4668c95c707162fa86d518c8ce0ca9bf7362b9f2a0adc3ff59922df921b94567e81e452f6c1a07fc817cebe99604b3505d38",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f9091929394",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c1e2c78b6b2734e2480ec550434cb5d613111adcc21d475545c3b1b7e6ff12444476e5c055132e2229dc0f807044bb919b1a5662dd38a9ee65e243a3911aed1a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8ab48713389dd0fcf9f965d3ce66b1e559a1f8c58741d67683cd971354f452e62d0207a65e436c5d5d8f8ee71c6abfe50e669004c302b31a7ea8311d4a916051",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90919293949596",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "24ce0addaa4c65038bd1b1c0f1452a0b128777aabc94a29df2fd6c7e2f85f8ab9ac7eff516b0e0a825c84a24cfe492eaad0a6308e46dd42fe8333ab971bb30ca",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f9091929394959697",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5154f929ee03045b6b0c0004fa778edee1d139893267cc84825ad7b36c63de32798e4a166d24686561354f63b00709a1364b3c241de3febf0754045897467cd4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e74e907920fd87bd5ad636dd11085e50ee70459c443e1ce5809af2bc2eba39f9e6d7128e0e3712c316da06f4705d78a4838e28121d4344a2c79c5e0db307a677",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90919293949596979899",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bf91a22334bac20f3fd80663b3cd06c4e8802f30e6b59f90d3035cc9798a217ed5a31abbda7fa6842827bdf2a7a1c21f6fcfccbb54c6c52926f32da816269be1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d9d5c74be5121b0bd742f26bffb8c89f89171f3f934913492b0903c271bbe2b3395ef259669bef43b57f7fcc3027db01823f6baee66e4f9fead4d6726c741fce",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "50c8b8cf34cd879f80e2faab3230b0c0e1cc3e9dcadeb1b9d97ab923415dd9a1fe38addd5c11756c67990b256e95ad6d8f9fedce10bf1c90679cde0ecf1be347",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0a386e7cd5dd9b77a035e09fe6fee2c8ce61b5383c87ea43205059c5e4cd4f4408319bb0a82360f6a58e6c9ce3f487c446063bf813bc6ba535e17fc1826cfc91",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1f1459cb6b61cbac5f0efe8fc487538f42548987fcd56221cfa7beb22504769e792c45adfb1d6b3d60d7b749c8a75b0bdf14e8ea721b95dca538ca6e25711209",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e58b3836b7d8fedbb50ca5725c6571e74c0785e97821dab8b6298c10e4c079d4a6cdf22f0fedb55032925c16748115f01a105e77e00cee3d07924dc0d8f90659",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b929cc6505f020158672deda56d0db081a2ee34c00c1100029bdf8ea98034fa4bf3e8655ec697fe36f40553c5bb46801644a627d3342f4fc92b61f03290fb381",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "72d353994b49d3e03153929a1e4d4f188ee58ab9e72ee8e512f29bc773913819ce057ddd7002c0433ee0a16114e3d156dd2c4a7e80ee53378b8670f23e33ef56",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c70ef9bfd775d408176737a0736d68517ce1aaad7e81a93c8c1ed967ea214f56c8a377b1763e676615b60f3988241eae6eab9685a5124929d28188f29eab06f7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c230f0802679cb33822ef8b3b21bf7a9a28942092901d7dac3760300831026cf354c9232df3e084d9903130c601f63c1f4a4a4b8106e468cd443bbe5a734f45f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "6f43094cafb5ebf1f7a4937ec50f56a4c9da303cbb55ac1f27f1f1976cd96beda9464f0e7b9c54620b8a9fba983164b8be3578425a024f5fe199c36356b88972",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3745273f4c38225db2337381871a0c6aafd3af9b018c88aa02025850a5dc3a42a1a3e03e56cbf1b0876d63a441f1d2856a39b8801eb5af325201c415d65e97fe",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c50c44cca3ec3edaae779a7e179450ebdda2f97067c690aa6c5a4ac7c30139bb27c0df4db3220e63cb110d64f37ffe078db72653e2daacf93ae3f0a2d1a7eb2e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8aef263e385cbc61e19b28914243262af5afe8726af3ce39a79c27028cf3ecd3f8d2dfd9cfc9ad91b58f6f20778fd5f02894a3d91c7d57d1e4b866a7f364b6be",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "28696141de6e2d9bcb3235578a66166c1448d3e905a1b482d423be4bc5369bc8c74dae0acc9cc123e1d8ddce9f97917e8c019c552da32d39d2219b9abf0fa8c8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2fb9eb2085830181903a9dafe3db428ee15be7662224efd643371fb25646aee716e531eca69b2bdc8233f1a8081fa43da1500302975a77f42fa592136710e9dc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "66f9a7143f7a3314a669bf2e24bbb35014261d639f495b6c9c1f104fe8e320aca60d4550d69d52edbd5a3cdeb4014ae65b1d87aa770b69ae5c15f4330b0b0ad8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aa",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f4c4dd1d594c3565e3e25ca43dad82f62abea4835ed4cd811bcd975e46279828d44d4c62c3679f1b7f7b9dd4571d7b49557347b8c5460cbdc1bef690fb2a08c0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaab",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8f1dc9649c3a84551f8f6e91cac68242a43b1f8f328ee92280257387fa7559aa6db12e4aeadc2d26099178749c6864b357f3f83b2fb3efa8d2a8db056bed6bcc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabac",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3139c1a7f97afd1675d460ebbc07f2728aa150df849624511ee04b743ba0a833092f18c12dc91b4dd243f333402f59fe28abdbbbae301e7b659c7a26d5c0f979",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacad",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "06f94a2996158a819fe34c40de3cf0379fd9fb85b3e363ba3926a0e7d960e3f4c2e0c70c7ce0ccb2a64fc29869f6e7ab12bd4d3f14fce943279027e785fb5c29",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadae",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c29c399ef3eee8961e87565c1ce263925fc3d0ce267d13e48dd9e732ee67b0f69fad56401b0f10fcaac119201046cca28c5b14abdea3212ae65562f7f138db3d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4cec4c9df52eef05c3f6faaa9791bc7445937183224ecc37a1e58d0132d35617531d7e795f52af7b1eb9d147de1292d345fe341823f8e6bc1e5badca5c656108",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "898bfbae93b3e18d00697eab7d9704fa36ec339d076131cefdf30edbe8d9cc81c3a80b129659b163a323bab9793d4feed92d54dae966c77529764a09be88db45",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ee9bd0469d3aaf4f14035be48a2c3b84d9b4b1fff1d945e1f1c1d38980a951be197b25fe22c731f20aeacc930ba9c4a1f4762227617ad350fdabb4e80273a0f4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3d4d3113300581cd96acbf091c3d0f3c310138cd6979e6026cde623e2dd1b24d4a8638bed1073344783ad0649cc6305ccec04beb49f31c633088a99b65130267",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "95c0591ad91f921ac7be6d9ce37e0663ed8011c1cfd6d0162a5572e94368bac02024485e6a39854aa46fe38e97d6c6b1947cd272d86b06bb5b2f78b9b68d559d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "227b79ded368153bf46c0a3ca978bfdbef31f3024a5665842468490b0ff748ae04e7832ed4c9f49de9b1706709d623e5c8c15e3caecae8d5e433430ff72f20eb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5d34f3952f0105eef88ae8b64c6ce95ebfade0e02c69b08762a8712d2e4911ad3f941fc4034dc9b2e479fdbcd279b902faf5d838bb2e0c6495d372b5b7029813",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7f939bf8353abce49e77f14f3750af20b7b03902e1a1e7fb6aaf76d0259cd401a83190f15640e74f3e6c5a90e839c7821f6474757f75c7bf9002084ddc7a62dc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "062b61a2f9a33a71d7d0a06119644c70b0716a504de7e5e1be49bd7b86e7ed6817714f9f0fc313d06129597e9a2235ec8521de36f7290a90ccfc1ffa6d0aee29",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f29e01eeae64311eb7f1c6422f946bf7bea36379523e7b2bbaba7d1d34a22d5ea5f1c5a09d5ce1fe682cced9a4798d1a05b46cd72dff5c1b355440b2a2d476bc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ec38cd3bbab3ef35d7cb6d5c914298351d8a9dc97fcee051a8a02f58e3ed6184d0b7810a5615411ab1b95209c3c810114fdeb22452084e77f3f847c6dbaafe16",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9ba",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c2aef5e0ca43e82641565b8cb943aa8ba53550caef793b6532fafad94b816082f0113a3ea2f63608ab40437ecc0f0229cb8fa224dcf1c478a67d9b64162b92d1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babb",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "15f534efff7105cd1c254d074e27d5898b89313b7d366dc2d7d87113fa7d53aae13f6dba487ad8103d5e854c91fdb6e1e74b2ef6d1431769c30767dde067a35c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbc",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "89acbca0b169897a0a2714c2df8c95b5b79cb69390142b7d6018bb3e3076b099b79a964152a9d912b1b86412b7e372e9cecad7f25d4cbab8a317be36492a67d7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbd",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e3c0739190ed849c9c962fd9dbb55e207e624fcac1eb417691515499eea8d8267b7e8f1287a63633af5011fde8c4ddf55bfdf722edf88831414f2cfaed59cb9a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbe",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8d6cf87c08380d2d1506eee46fd4222d21d8c04e585fbfd08269c98f702833a156326a0724656400ee09351d57b440175e2a5de93cc5f80db6daf83576cf75fa",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "da24bede383666d563eeed37f6319baf20d5c75d1635a6ba5ef4cfa1ac95487e96f8c08af600aab87c986ebad49fc70a58b4890b9c876e091016daf49e1d322e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f9d1d1b1e87ea7ae753a029750cc1cf3d0157d41805e245c5617bb934e732f0ae3180b78e05bfe76c7c3051e3e3ac78b9b50c05142657e1e03215d6ec7bfd0fc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "11b7bc1668032048aa43343de476395e814bbbc223678db951a1b03a021efac948cfbe215f97fe9a72a2f6bc039e3956bfa417c1a9f10d6d7ba5d3d32ff323e5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b8d9000e4fc2b066edb91afee8e7eb0f24e3a201db8b6793c0608581e628ed0bcc4e5aa6787992a4bcc44e288093e63ee83abd0bc3ec6d0934a674a4da13838a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ce325e294f9b6719d6b61278276ae06a2564c03bb0b783fafe785bdf89c7d5acd83e78756d301b445699024eaeb77b54d477336ec2a4f332f2b3f88765ddb0c3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "29acc30e9603ae2fccf90bf97e6cc463ebe28c1b2f9b4b765e70537c25c702a29dcbfbf14c99c54345ba2b51f17b77b5f15db92bbad8fa95c471f5d070a137cc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3379cbaae562a87b4c0425550ffdd6bfe1203f0d666cc7ea095be407a5dfe61ee91441cd5154b3e53b4f5fb31ad4c7a9ad5c7af4ae679aa51a54003a54ca6b2d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3095a349d245708c7cf550118703d7302c27b60af5d4e67fc978f8a4e60953c7a04f92fcf41aee64321ccb707a895851552b1e37b00bc5e6b72fa5bcef9e3fff",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "07262d738b09321f4dbccec4bb26f48cb0f0ed246ce0b31b9a6e7bc683049f1f3e5545f28ce932dd985c5ab0f43bd6de0770560af329065ed2e49d34624c2cbb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b6405eca8ee3316c87061cc6ec18dba53e6c250c63ba1f3bae9e55dd3498036af08cd272aa24d713c6020d77ab2f3919af1a32f307420618ab97e73953994fb4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "7ee682f63148ee45f6e5315da81e5c6e557c2c34641fc509c7a5701088c38a74756168e2cd8d351e88fd1a451f360a01f5b2580f9b5a2e8cfc138f3dd59a3ffc",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9ca",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1d263c179d6b268f6fa016f3a4f29e943891125ed8593c81256059f5a7b44af2dcb2030d175c00e62ecaf7ee96682aa07ab20a611024a28532b1c25b86657902",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacb",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "106d132cbdb4cd2597812846e2bc1bf732fec5f0a5f65dbb39ec4e6dc64ab2ce6d24630d0f15a805c3540025d84afa98e36703c3dbee713e72dde8465bc1be7e",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcc",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0e79968226650667a8d862ea8da4891af56a4e3a8b6d1750e394f0dea76d640d85077bcec2cc86886e506751b4f6a5838f7f0b5fef765d9dc90dcdcbaf079f08",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccd",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "521156a82ab0c4e566e5844d5e31ad9aaf144bbd5a464fdca34dbd5717e8ff711d3ffebbfa085d67fe996a34f6d3e4e60b1396bf4b1610c263bdbb834d560816",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdce",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1aba88befc55bc25efbce02db8b9933e46f57661baeabeb21cc2574d2a518a3cba5dc5a38e49713440b25f9c744e75f6b85c9d8f4681f676160f6105357b8406",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecf",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5a9949fcb2c473cda968ac1b5d08566dc2d816d960f57e63b898fa701cf8ebd3f59b124d95bfbbedc5f1cf0e17d5eaed0c02c50b69d8a402cabcca4433b51fd4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b0cead09807c672af2eb2b0f06dde46cf5370e15a4096b1a7d7cbb36ec31c205fbefca00b7a4162fa89fb4fb3eb78d79770c23f44e7206664ce3cd931c291e5d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "bb6664931ec97044e45b2ae420ae1c551a8874bc937d08e969399c3964ebdba8346cdd5d09caafe4c28ba7ec788191ceca65ddd6f95f18583e040d0f30d0364d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "65bc770a5faa3792369803683e844b0be7ee96f29f6d6a35568006bd5590f9a4ef639b7a8061c7b0424b66b60ac34af3119905f33a9d8c3ae18382ca9b689900",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "ea9b4dca333336aaf839a45c6eaa48b8cb4c7ddabffea4f643d6357ea6628a480a5b45f2b052c1b07d1fedca918b6f1139d80f74c24510dcbaa4be70eacc1b06",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "e6342fb4a780ad975d0e24bce149989b91d360557e87994f6b457b895575cc02d0c15bad3ce7577f4c63927ff13f3e381ff7e72bdbe745324844a9d27e3f1c01",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3e209c9b33e8e461178ab46b1c64b49a07fb745f1c8bc95fbfb94c6b87c69516651b264ef980937fad41238b91ddc011a5dd777c7efd4494b4b6ecd3a9c22ac0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "fd6a3d5b1875d80486d6e69694a56dbb04a99a4d051f15db2689776ba1c4882e6d462a603b7015dc9f4b7450f05394303b8652cfb404a266962c41bae6e18a94",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "951e27517e6bad9e4195fc8671dee3e7e9be69cee1422cb9fecfce0dba875f7b310b93ee3a3d558f941f635f668ff832d2c1d033c5e2f0997e4c66f147344e02",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8eba2f874f1ae84041903c7c4253c82292530fc8509550bfdc34c95c7e2889d5650b0ad8cb988e5c4894cb87fbfbb19612ea93ccc4c5cad17158b9763464b492",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "16f712eaa1b7c6354719a8e7dbdfaf55e4063a4d277d947550019b38dfb564830911057d50506136e2394c3b28945cc964967d54e3000c2181626cfb9b73efd2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9da",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c39639e7d5c7fb8cdd0fd3e6a52096039437122f21c78f1679cea9d78a734c56ecbeb28654b4f18e342c331f6f7229ec4b4bc281b2d80a6eb50043f31796c88c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadb",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "72d081af99f8a173dcc9a0ac4eb3557405639a29084b54a40172912a2f8a395129d5536f0918e902f9e8fa6000995f4168ddc5f893011be6a0dbc9b8a1a3f5bb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdc",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c11aa81e5efd24d5fc27ee586cfd8847fbb0e27601ccece5ecca0198e3c7765393bb74457c7e7a27eb9170350e1fb53857177506be3e762cc0f14d8c3afe9077",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdd",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c28f2150b452e6c0c424bcde6f8d72007f9310fed7f2f87de0dbb64f4479d6c1441ba66f44b2accee61609177ed340128b407ecec7c64bbe50d63d22d8627727",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcddde",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f63d88122877ec30b8c8b00d22e89000a966426112bd44166e2f525b769ccbe9b286d437a0129130dde1a86c43e04bedb594e671d98283afe64ce331de9828fd",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "348b0532880b88a6614a8d7408c3f913357fbb60e995c60205be9139e74998aede7f4581e42f6b52698f7fa1219708c14498067fd1e09502de83a77dd281150c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "5133dc8bef725359dff59792d85eaf75b7e1dcd1978b01c35b1b85fcebc63388ad99a17b6346a217dc1a9622ebd122ecf6913c4d31a6b52a695b86af00d741a0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "2753c4c0e98ecad806e88780ec27fccd0f5c1ab547f9e4bf1659d192c23aa2cc971b58b6802580baef8adc3b776ef7086b2545c2987f348ee3719cdef258c403",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b1663573ce4b9d8caefc865012f3e39714b9898a5da6ce17c25a6a47931a9ddb9bbe98adaa553beed436e89578455416c2a52a525cf2862b8d1d49a2531b7391",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "64f58bd6bfc856f5e873b2a2956ea0eda0d6db0da39c8c7fc67c9f9feefcff3072cdf9e6ea37f69a44f0c61aa0da3693c2db5b54960c0281a088151db42b11e8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0764c7be28125d9065c4b98a69d60aede703547c66a12e17e1c618994132f5ef82482c1e3fe3146cc65376cc109f0138ed9a80e49f1f3c7d610d2f2432f20605",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "f748784398a2ff03ebeb07e155e66116a839741a336e32da71ec696001f0ad1b25cd48c69cfca7265eca1dd71904a0ce748ac4124f3571076dfa7116a9cf00e9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3f0dbc0186bceb6b785ba78d2a2a013c910be157bdaffae81bb6663b1a73722f7f1228795f3ecada87cf6ef0078474af73f31eca0cc200ed975b6893f761cb6d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d4762cd4599876ca75b2b8fe249944dbd27ace741fdab93616cbc6e425460feb51d4e7adcc38180e7fc47c89024a7f56191adb878dfde4ead62223f5a2610efe",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "cd36b3d5b4c91b90fcbba79513cfee1907d8645a162afd0cd4cf4192d4a5f4c892183a8eacdb2b6b6a9d9aa8c11ac1b261b380dbee24ca468f1bfd043c58eefe",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "98593452281661a53c48a9d8cd790826c1a1ce567738053d0bee4a91a3d5bd92eefdbabebe3204f2031ca5f781bda99ef5d8ae56e5b04a9e1ecd21b0eb05d3e1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9ea",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "771f57dd2775ccdab55921d3e8e30ccf484d61fe1c1b9c2ae819d0fb2a12fab9be70c4a7a138da84e8280435daade5bbe66af0836a154f817fb17f3397e725a3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaeb",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "c60897c6f828e21f16fbb5f15b323f87b6c8955eabf1d38061f707f608abdd993fac3070633e286cf8339ce295dd352df4b4b40b2f29da1dd50b3a05d079e6bb",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebec",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "8210cd2c2d3b135c2cf07fa0d1433cd771f325d075c6469d9c7f1ba0943cd4ab09808cabf4acb9ce5bb88b498929b4b847f681ad2c490d042db2aec94214b06b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebeced",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1d4edfffd8fd80f7e4107840fa3aa31e32598491e4af7013c197a65b7f36dd3ac4b478456111cd4309d9243510782fa31b7c4c95fa951520d020eb7e5c36e4ef",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedee",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "af8e6e91fab46ce4873e1a50a8ef448cc29121f7f74deef34a71ef89cc00d9274bc6c2454bbb3230d8b2ec94c62b1dec85f3593bfa30ea6f7a44d7c09465a253",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeef",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "29fd384ed4906f2d13aa9fe7af905990938bed807f1832454a372ab412eea1f5625a1fcc9ac8343b7c67c5aba6e0b1cc4644654913692c6b39eb9187ceacd3ec",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a268c7885d9874a51c44dffed8ea53e94f78456e0b2ed99ff5a3924760813826d960a15edbedbb5de5226ba4b074e71b05c55b9756bb79e55c02754c2c7b6c8a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "0cf8545488d56a86817cd7ecb10f7116b7ea530a45b6ea497b6c72c997e09e3d0da8698f46bb006fc977c2cd3d1177463ac9057fdd1662c85d0c126443c10473",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b39614268fdd8781515e2cfebf89b4d5402bab10c226e6344e6b9ae000fb0d6c79cb2f3ec80e80eaeb1980d2f8698916bd2e9f747236655116649cd3ca23a837",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "74bef092fc6f1e5dba3663a3fb003b2a5ba257496536d99f62b9d73f8f9eb3ce9ff3eec709eb883655ec9eb896b9128f2afc89cf7d1ab58a72f4a3bf034d2b4a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "3a988d38d75611f3ef38b8774980b33e573b6c57bee0469ba5eed9b44f29945e7347967fba2c162e1c3be7f310f2f75ee2381e7bfd6b3f0baea8d95dfb1dafb1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "58aedfce6f67ddc85a28c992f1c0bd0969f041e66f1ee88020a125cbfcfebcd61709c9c4eba192c15e69f020d462486019fa8dea0cd7a42921a19d2fe546d43d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "9347bd291473e6b4e368437b8e561e065f649a6d8ada479ad09b1999a8f26b91cf6120fd3bfe014e83f23acfa4c0ad7b3712b2c3c0733270663112ccd9285cd9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "b32163e7c5dbb5f51fdc11d2eac875efbbcb7e7699090a7e7ff8a8d50795af5d74d9ff98543ef8cdf89ac13d0485278756e0ef00c817745661e1d59fe38e7537",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "1085d78307b1c4b008c57a2e7e5b234658a0a82e4ff1e4aaac72b312fda0fe27d233bc5b10e9cc17fdc7697b540c7d95eb215a19a1a0e20e1abfa126efd568c7",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "4e5c734c7dde011d83eac2b7347b373594f92d7091b9ca34cb9c6f39bdf5a8d2f134379e16d822f6522170ccf2ddd55c84b9e6c64fc927ac4cf8dfb2a17701f2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fa",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "695d83bd990a1117b3d0ce06cc888027d12a054c2677fd82f0d4fbfc93575523e7991a5e35a3752e9b70ce62992e268a877744cdd435f5f130869c9a2074b338",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafb",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "a6213743568e3b3158b9184301f3690847554c68457cb40fc9a4b8cfd8d4a118c301a07737aeda0f929c68913c5f51c80394f53bff1c3e83b2e40ca97eba9e15",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfc",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "d444bfa2362a96df213d070e33fa841f51334e4e76866b8139e8af3bb3398be2dfaddcbc56b9146de9f68118dc5829e74b0c28d7711907b121f9161cb92b69a9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfd",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 64,
    "out": "142709d62e28fcccd0af97fad0f8465b971e82201dc51070faa0372aa43e92484be1c1e73ba10906d5d1853db6a4106e0a7bf9800d373d6dee2d46d62ef2a461",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfe",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "",
    "personal": ""
  },
  {
    "outlen": 1,
    "out": "ba",
    "input": "",
    "key": "00",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 2,
    "out": "6139",
    "input": "00",
    "key": "0001",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 3,
    "out": "3a1666",
    "input": "0001",
    "key": "000102",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 4,
    "out": "5797e9d0",
    "input": "000102",
    "key": "00010203",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 5,
    "out": "834a26efe6",
    "input": "00010203",
    "key": "0001020304",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 6,
    "out": "d7e9e862bbce",
    "input": "0001020304",
    "key": "000102030405",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 7,
    "out": "40d8b84c374750",
    "input": "000102030405",
    "key": "00010203040506",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 8,
    "out": "276789189244cf04",
    "input": "00010203040506",
    "key": "0001020304050607",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 9,
    "out": "16f73ffe0673cc9992",
    "input": "0001020304050607",
    "key": "000102030405060708",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 10,
    "out": "b3835bfaf6eb71d94078",
    "input": "000102030405060708",
    "key": "00010203040506070809",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 11,
    "out": "8c624e844d34f4a59f34cc",
    "input": "00010203040506070809",
    "key": "000102030405060708090a",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 12,
    "out": "e0a394962413ad09975df3cf",
    "input": "000102030405060708090a",
    "key": "000102030405060708090a0b",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 13,
    "out": "47f043c3aacb501f97e0458ae3",
    "input": "000102030405060708090a0b",
    "key": "000102030405060708090a0b0c",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 14,
    "out": "b4a11f2fb72a7e6f96fdacf98d49",
    "input": "000102030405060708090a0b0c",
    "key": "000102030405060708090a0b0c0d",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 15,
    "out": "f434079e9adeb244047cb6855f9854",
    "input": "000102030405060708090a0b0c0d",
    "key": "000102030405060708090a0b0c0d0e",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 16,
    "out": "5fbe885c4b2d4e0d78dc5905622a277a",
    "input": "000102030405060708090a0b0c0d0e",
    "key": "000102030405060708090a0b0c0d0e0f",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 17,
    "out": "e262ba3e2ab76efdf83513108e3b987d1b",
    "input": "000102030405060708090a0b0c0d0e0f",
    "key": "000102030405060708090a0b0c0d0e0f10",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 18,
    "out": "add93dde78d32e77bc039c34a49043f19d26",
    "input": "000102030405060708090a0b0c0d0e0f10",
    "key": "000102030405060708090a0b0c0d0e0f1011",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 19,
    "out": "093842ac10e2eb1237ddc9ca9e7990cf397772",
    "input": "000102030405060708090a0b0c0d0e0f1011",
    "key": "000102030405060708090a0b0c0d0e0f101112",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 20,
    "out": "09e7f6a0e2ea4888f1dbf6562effd1561c65029c",
    "input": "000102030405060708090a0b0c0d0e0f101112",
    "key": "000102030405060708090a0b0c0d0e0f10111213",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 21,
    "out": "bd33a9ec914f5b81864a49184338e4062d6c6b2b2e",
    "input": "000102030405060708090a0b0c0d0e0f10111213",
    "key": "000102030405060708090a0b0c0d0e0f1011121314",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 22,
    "out": "8dc46295235d94f5881d429a5ad47f9db9e35cf8c6b3",
    "input": "000102030405060708090a0b0c0d0e0f1011121314",
    "key": "000102030405060708090a0b0c0d0e0f101112131415",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 23,
    "out": "ba5df554dca7ac1cba4889fa88adf3070fbf4ab5d187b5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415",
    "key": "000102030405060708090a0b0c0d0e0f10111213141516",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 24,
    "out": "1ff84715e71c66214d271d421395fb6166db97b1d47ed697",
    "input": "000102030405060708090a0b0c0d0e0f10111213141516",
    "key": "000102030405060708090a0b0c0d0e0f1011121314151617",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 25,
    "out": "75a0d227c70549f5b0c933b7b21f151355bd47e04b6085c91f",
    "input": "000102030405060708090a0b0c0d0e0f1011121314151617",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 26,
    "out": "a32a5c9439a0fa771dcbe7f338b5dcef62a754edc4952614d6f0",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718",
    "key": "000102030405060708090a0b0c0d0e0f10111213141516171819",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 27,
    "out": "53a87de519cdcc7f64730d58bce6baaf7b44c5c428a4611a208ad4",
    "input": "000102030405060708090a0b0c0d0e0f10111213141516171819",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 28,
    "out": "5e5ad8f0c4f083f9b7a5154d9c0dfd0f3d2fce94cf54fc215450314a",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 29,
    "out": "9c76b9e63c77e6564b1e5111c2fb140046e1e5a4f900a7cfc2bac3fcfa",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 30,
    "out": "bb919251ca310eb9b994e5d7883bc9fa2144b59b8d5d940677b7130ac777",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 31,
    "out": "faa492a66f08ef0c7adb868fcb7b523aedd35b8ff1414bd1d554794f144474",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 32,
    "out": "9b273ebe335540b87be899abe169389ed61ed262c3a0a16e4998bbf752f0bee3",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 33,
    "out": "1e0070b92429c151b33bdd1bb4430a0e650a3dfc94d404054e93c8568330ecc505",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 34,
    "out": "e3b64149f1b76231686d592d1d4af984ce2826ba03c2224a92f95f9526130ce4eb40",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 35,
    "out": "5f8e378120b73db9eefa65ddcdcdcb4acd8046c31a5e47f298caa400937d5623f1394b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 36,
    "out": "74c757a4165a1782c933e587353a9fd8f6d7bf26b7f51b52c542747030bfb3d560c2e5c2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 37,
    "out": "2d5ee85cc238b923806dd98db18919d1924f2340ec88917d4ce1799cbfd5f2cb9df99db2e1",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 38,
    "out": "c93ff727e6f9822efec0a77eed0025c0eff19127bf8746b7c71c2a098f57cef02febb86a1e6c",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 39,
    "out": "adfb6d7ba13779a5dd1bbf268e400f4156f0f5c9d5b670ff539e1d9c1a63373416f3001f338407",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 40,
    "out": "3a6900e58a448887d77c5911e4bdde620e64f25b2d71723fa60f7cb3efa7c320b6153bdbc3287949",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252627",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 41,
    "out": "413eb0fd379b32dd88e82242a87cc58ce3e64c72352387a4c70f92ee5c8d23fa7ecd86f6df170a32d2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252627",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 42,
    "out": "92d0d3cacc3e25628caf6f2c4cd50d25d154ac45098f531d690230b859f37cfe089eb169f76bba72a3ff",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526272829",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 43,
    "out": "92f6ccc11a9a3bee520b17e0cddc4550c0e9cf47ddd9a6161284259ffb161c1d0675b505cb1066872768e8",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526272829",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 44,
    "out": "a3cd675804e6be7f120138a9eaadcd56bb7763d1c046e87fe0d358c8276b0d24621f46c60b46e397933b75b4",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 45,
    "out": "304a1af53cbdd6486b8419d1ebd5e9528c540d8dc46a10be49067f46a0617229577015d776783f702b2954df43",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 46,
    "out": "d8a6358970446453ac0c82c758644ab68989b5b4f06f9768807ce0c5f2a0dbac1e8450f4e3a02deecf7b54b6a45d",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 47,
    "out": "1264b8dee9ac4aa8de69a43ada95cc95f20230f33836d4a1db8c2466ab38361686e5ac282025ccc2e0f6a1cd98a4dd",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 48,
    "out": "7eed787abaa7f4e8b8aa3090f0676201cfbaaf350899661cdd5216ac0b5cd874443f5c0688ffd7ca1ccbfe1ca7e1a3f5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 49,
    "out": "8907f0218585167962a8e8213559a643dd03c2bf1a7a5ad3e3bc5f88c0ff1532ee8cd29880e7e0e68da22a5798aef27cc5",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 50,
    "out": "12dea17b0733e5060751b1115e10c3d4b2f4583bcd009d9f1f42ec23d4a6a0df1185d3abbdbe86de08569e70583d6de1c1fe",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 51,
    "out": "8ff75e91f1de547dc3a25472db2f51f5910a290c449603da54207b5e39bd735d240ec913b52df90709b5d29357971d6c341452",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 52,
    "out": "4a3b16b12400f38e74778efc3a4caa52ec6fdf6b0180a5bfac9189e52e162c10e8911a54ab33e2b389ee1949e58edaa119e2b2b9",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 53,
    "out": "c9943e7186fdc9bbfa1d7087fa7086babe6fcf95a6196d1772187854071304e2f1fff39e6e6f48f76addb16d5c00249e0523aac91f",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 54,
    "out": "0297f16fdd34add9cc87b4adf816525b590ba08ac733c43f8d225d194df4f9c83b4dce617be51e25b5f6c80dff249f27c707de20e422",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 55,
    "out": "576bb891eab9930998e2e73b5d0498e3c5f040f8dec9397a8c7a622c17de01fee7cc936e3bd4de1f7fd8b31dea9e70c65462bbb5dc7b50",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 56,
    "out": "9416a57ae7c8c51c6e008f940fe06d8ebc02c350c19a2f71583a6d260b085670d73a95248fef0f4cae5292ba7db1189a7cd9c51122ba7913",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334353637",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 57,
    "out": "ea644b9051cca5eee8868a553e3f0f4e14739e1555474151156e10578256b288a233870dd43a380765400ea446df7f452c1e03a9e5b6731256",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334353637",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 58,
    "out": "f99cc1603de221abc1ecb1a7eb4bbf06e99561d1cc5541d8d601bae2b1dd3cbe448ac276667f26de5e269183a09f7deaf35d33174b3cc8ad4aa2",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536373839",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 59,
    "out": "ee2be1ec57fdac23f89402a534177eca0f4b982a4ed2c2e900b6a79e1f47a2d023eff2e647baf4f4c0da3a28d08a44bc780516974074e2523e6651",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536373839",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 60,
    "out": "9cda001868949a2bad96c5b3950a8315e6e5214d0b54dcd596280565d351806ef22cf3053f63623da72fcad9afa3896641658632334c9ec4f644c984",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 61,
    "out": "c6d6722a916651a8671383d8260873347d9c248696b4cb3dac4dea9ba57ed971127cb18e44211d7e14177ace248b3c6e0785356ee261ebdc6ef0faf143",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 62,
    "out": "5dd258a3e7505bc6b9776b0df25676a1c19e2c8258c7b5f2e361423523d96299eb6827bc7c27e7bca2d2b59d717c2ebcb05e6dcaa32289d96fae9a4077ef",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 63,
    "out": "19c14de35fe19c92cc0e624280e4136355d4cfa9a0a98b090c4b06f5665021920725852ff1f566b0c8c37157b25fb9f947a2e70b40577a17860a0732c170ac",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  },
  {
    "outlen": 64,
    "out": "5fcdcc02be7714a0dbc77df498bf999ea9225d564adca1c121c9af03af92cac8177b9b4a86bcc47c79aa32aac58a3fef967b2132e9352d4613fe890beed2571b",
    "input": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e",
    "key": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f",
    "salt": "35623662343165643962333433666530",
    "personal": "35313236666232613337343030643261"
  }
]


================================================
File: packages/branch/src/__test__/utils/crypto/blake2b.test.js
================================================
const { blake2b, PERSONAL } = require('../../../../dist')
const fixtures = require('./blake2b.fixtures.json')

describe('blake2b', () => {
  it('blake2b([]) with personal', () => {
    const fixture = {
      message: new Uint8Array(),
      digest: '44f4c69744d5f8c55d642062949dcae49bc4e7ef43d388c5a12f42b5633d163e',
    }
    const s = blake2b(32, null, null, PERSONAL)
    s.update(fixture.message)
    const digest = s.digest('hex')
    expect(digest).toBe(fixture.digest)
  })

  it('blake2b(Buffer.from("The quick brown fox jumps over the lazy dog")) with personal', () => {
    const fixture = {
      message: 'The quick brown fox jumps over the lazy dog',
      digest: 'abfa2c08d62f6f567d088d6ba41d3bbbb9a45c241a8e3789ef39700060b5cee2',
    }
    const s = blake2b(32, null, null, PERSONAL)
    s.update(new Uint8Array(Buffer.from(fixture.message, 'utf8')))
    const digest = s.digest('hex')
    expect(digest).toBe(fixture.digest)
  })

  test.each(fixtures)('%s', ({ outlen, out, input, key, salt, personal }) => {
    if (+outlen < 16) {
      expect(() => {
        blake2b(
          outlen,
          key ? new Uint8Array(Buffer.from(key, 'hex')) : null,
          salt ? new Uint8Array(Buffer.from(salt, 'hex')) : null,
          personal ? new Uint8Array(Buffer.from(personal, 'hex')) : null,
        )
      }).toThrowError(`Expect outlen to be at least 16, but ${outlen} received`)
    } else {
      const s = blake2b(
        outlen,
        key ? new Uint8Array(Buffer.from(key, 'hex')) : null,
        salt ? new Uint8Array(Buffer.from(salt, 'hex')) : null,
        personal ? new Uint8Array(Buffer.from(personal, 'hex')) : null,
      )
      s.update(new Uint8Array(Buffer.from(input, 'hex')))
      const digest = s.digest('hex')
      expect(digest).toBe(out)
    }
  })
})


================================================
File: packages/branch/src/__test__/utils/ecpair/ecpare.fixtures.json
================================================
{
  "instantiate": {
    "basic": {
      "privateKey": "0xe79f3207ea4980b7fed79956d5934249ceac4751a4fae01a0f7c4a96884bc4e3",
      "compressed": true,
      "publicKey": "0x024a501efd328e062c8675f2365970728c859c592beeefd6be8ead3d901330bc01",
      "privateKeyWords": [
        4965603, 51553698, 33661175, 21402603, 30321735, 23384210, 24745325, 33742843, 34073161, 3794892, 0
      ],
      "publicKeyBytes": [
        2, 74, 80, 30, 253, 50, 142, 6, 44, 134, 117, 242, 54, 89, 112, 114, 140, 133, 156, 89, 43, 238, 239, 214, 190,
        142, 173, 61, 144, 19, 48, 188, 1
      ]
    },
    "withEmptyOption": {
      "privateKey": "0xe79f3207ea4980b7fed79956d5934249ceac4751a4fae01a0f7c4a96884bc4e3",
      "compressed": true,
      "publicKey": "0x024a501efd328e062c8675f2365970728c859c592beeefd6be8ead3d901330bc01"
    },
    "withDefaultOption": {
      "privateKey": "0xe79f3207ea4980b7fed79956d5934249ceac4751a4fae01a0f7c4a96884bc4e3",
      "compressed": true,
      "publicKey": "0x024a501efd328e062c8675f2365970728c859c592beeefd6be8ead3d901330bc01"
    },
    "privateKeyHasInvalidLength": {
      "privateKey": "0xf70eea3041c793746f07d47f28a62d6555041b9edc74501a75ffbf47c55fc9",
      "exception": "Private key has invalid length"
    },
    "leadingZeroShouldBeRemained": {
      "privateKey": "0x00f70eea3041c793746f07d47f28a62d6555041b9edc74501a75ffbf47c55fc9"
    }
  }
}


================================================
File: packages/branch/src/__test__/utils/ecpair/index.test.js
================================================
const {
  hexToBytes,
  ECPair,
  ParameterRequiredException,
  HexStringWithout0xException,
} = require('../../../../dist')
const { sigFixtures, signRecoverableFixtures } = require('./signature.fixtures.json')
const { instantiate: instantiateFixtures } = require('./ecpare.fixtures.json')

describe('ECPair', () => {
  it('new ecpair', () => {
    const fixture = instantiateFixtures.basic

    const ecpair = new ECPair(hexToBytes(fixture.privateKey), {
      compressed: fixture.compressed,
    })
    expect(ecpair.compressed).toBe(fixture.compressed)
    expect(ecpair.privateKey).toBe(fixture.privateKey)
    expect(ecpair.getPrivateKey('hex')).toBe(fixture.privateKey)
    expect(ecpair.getPrivateKey('words').words).toEqual(fixture.privateKeyWords)
    expect(ecpair.publicKey).toBe(fixture.publicKey)
    expect(ecpair.getPublicKey('hex')).toBe(fixture.publicKey)
    expect(ecpair.getPublicKey('bytes')).toEqual(fixture.publicKeyBytes)
  })

  it('new ecpair with empty options, default compressed should be true', () => {
    const fixture = instantiateFixtures.withEmptyOption

    const ecpair = new ECPair(fixture.privateKey, {})
    expect(ecpair.compressed).toBe(fixture.compressed)
    expect(ecpair.privateKey).toEqual(fixture.privateKey)
    expect(ecpair.publicKey).toBe(fixture.publicKey)
  })

  it('new ecpair with default options which should be { compressed: true }', () => {
    const fixture = instantiateFixtures.withDefaultOption

    const ecpair = new ECPair(fixture.privateKey)
    expect(ecpair.compressed).toBe(fixture.compressed)
    expect(ecpair.privateKey).toEqual(fixture.privateKey)
    expect(ecpair.publicKey).toBe(fixture.publicKey)
  })

  it('Instantiate with an empty private key should throw an error', () => {
    expect(() => new ECPair()).toThrow(new ParameterRequiredException('Private key'))
  })

  it('Instantiate with a private key without 0x should throw an error', () => {
    const privateKey = 'e79f3207ea4980b7fed79956d5934249ceac4751a4fae01a0f7c4a96884bc4e3'
    expect(() => new ECPair(privateKey, {})).toThrow(new HexStringWithout0xException(privateKey))
  })

  it('shoule throw an error if private key has invalid length', () => {
    const fixture = instantiateFixtures.privateKeyHasInvalidLength
    expect(() => new ECPair(fixture.privateKey)).toThrow(new Error(fixture.exception))
    expect(() => new ECPair(hexToBytes(fixture.privateKey), 'hex')).toThrow(fixture.exception)
  })

  it('leading 0 of private key should be remained', () => {
    const fixture = instantiateFixtures.leadingZeroShouldBeRemained
    const key = new ECPair(fixture.privateKey)
    expect(key.privateKey).toBe(fixture.privateKey)
  })

  it('sign and verify message', () => {
    sigFixtures.forEach(fixture => {
      const ecpair = new ECPair(`0x${fixture.privkey}`)
      const sig = ecpair.sign(`0x${fixture.msg}`)
      // slice sig from 0, -2 to ignore the recovery param
      expect(sig).toBe(`0x${fixture.sig.slice(0, -2)}`)
      expect(ecpair.verify(`0x${fixture.msg}`, `0x${fixture.sig.slice(0, -2)}`)).toBe(true)
    })
  })

  it('signRecoverable', () => {
    signRecoverableFixtures.forEach(fixture => {
      const ecpair = new ECPair(`0x${fixture.privKey}`)
      const sig = ecpair.signRecoverable(`0x${fixture.msg}`)
      expect(sig).toBe(`0x${fixture.sig}`)
    })
  })
})


================================================
File: packages/branch/src/__test__/utils/ecpair/signature.fixtures.json
================================================
{
  "sigFixtures": [
    {
      "msg": "403676bd85716a1e16b415093cee88c07d7cf2c2199aaf82320d354cb571f0d9",
      "sig": "3045022100c795b2b3c48d370324e5053f4509d4f1f18f80aec4a8cba68ebae922b9f882d8022045ae312bd84e25eed818ef84e7ed61a774f208fe2b2fe3588b60b4686086208201",
      "privkey": "e79f3207ea4980b7fed79956d5934249ceac4751a4fae01a0f7c4a96884bc4e3"
    },
    {
      "msg": "9e5755ec2f328cc8635a55415d0e9a09c2b6f2c9b0343c945fbbfe08247a4cbe",
      "sig": "30440220132382ca59240c2e14ee7ff61d90fc63276325f4cbe8169fc53ade4a407c2fc802204d86fbe3bde6975dd5a91fdc95ad6544dcdf0dab206f02224ce7e2b151bd82ab01",
      "privkey": "31a84594060e103f5a63eb742bd46cf5f5900d8406e2726dedfc61c7cf43ebad"
    },
    {
      "msg": "2d46a712699bae19a634563d74d04cc2da497b841456da270dccb75ac2f7c4e7",
      "sig": "3045022100d80cf7abc9ab601373780cee3733d2cb5ff69ba1452ec2d2a058adf9645c13be0220011d1213b7d152f72fd8759b45276ba32d9c909602e5ec89550baf3aaa8ed95001",
      "privkey": "7177f0d04c79fa0b8c91fe90c1cf1d44772d1fba6e5eb9b281a22cd3aafb51fe"
    },
    {
      "msg": "c94f4ec84be928017cbbb447d2ab5b5d4d69e5e5fd03da7eae4378a1b1c9c402",
      "sig": "3045022100d0f5b740cbe3ee5b098d3c5afdefa61bb0797cb4e7b596afbd38174e1c653bb602200329e9f1a09632de477664814791ac31544e04715db68f4b02657ba35863e71101",
      "privkey": "989e500d6b1397f2c5dcdf43c58ac2f14df753eb6089654e07ff946b3f84f3d5"
    },
    {
      "msg": "dfeb2092955572ce0695aa038f58df5499949e18f58785553c3e83343cd5eb93",
      "sig": "30440220692c01edf8aeab271df3ed4e8d57a170f014f8f9d65031aac28b5e1840acfb5602205075f9d1fdbf5079ee052e5f3572d518b3594ef49582899ec44d065f71a5519201",
      "privkey": "39dfc615f2b718397f6903b0c46c47c5687e97d3d2a5e1f2b200f459f7b1219b"
    },
    {
      "msg": "49e558d232ca204ecc27b321b197bfe0e165acd5fe46f986d5b007c68c2dcbd7",
      "sig": "30440220330f62769e8e0fd43721029e1343b7f2c2575edc568007aa1b4458b2928dfc530220549c8967e8e8f414be10c6e2d36f451f1c50007c28511f9410fd7a921220190401",
      "privkey": "1e17c938ef3754781130edcbe8fa2c8a27ecb43f93d333e64d89af3d9c26c23a"
    },
    {
      "msg": "12a683325e3063e4d9d32d38f878300d84d4ebb63247607dfb2bd72849e5fb14",
      "sig": "3045022100f1391011657e358464165b53f0993a1a637f6e296c1a8f6a984d522b441b470602206c78004f1489c398aeb05b6db63d0839875f4751b117a6bd239b173428f1c2e201",
      "privkey": "9120318c2d0792a29516b18a3467051445e5a6c358da577dcf06ea5ddfb8839f"
    },
    {
      "msg": "06e42f8adc7c2ac118b6e6d1082940c66f7d2544fa2eaae0d2b1d016fea26092",
      "sig": "304402202c947ee0cf77bce3c4aab68737f07f9c43733a961552da82798a2628d6650a7c02205bb4a8634e8204bc3da98ddb1c5a7d7f5a2f4d60ee447e6e7ab20cff9dfdc5bc01",
      "privkey": "a7433f154076cd9317e048562fe60529140a1155a1497ebd165b081c053e8944"
    },
    {
      "msg": "43307439480b2d4c3a95e725d1a13a97ec032cdbdda467533dce304513752d46",
      "sig": "3045022100ac6123107cc08a63fb80e2af53937cf5aa7dee9f4e233a668d6c15d0b474903b02205bdcd30cae23c89692ee53badd610385b84567f98dc65babf000055f33877ac801",
      "privkey": "58a127499af1fa4f6cc95d6b2213171762a3be0d929246f27044d64de24c4db2"
    },
    {
      "msg": "3a75a427f8311ae278b76bcce9a2ba99b9adc1ee91d653f9f00052b9e154b511",
      "sig": "304402202f54a17ffa1b631f67232785b469d794969d3fdb140bb683ae8097217ec12c7d0220159f78ceece7e2fa1dea9e31f53374aebe6b8d893588c27e951bbc40b7ca57cf01",
      "privkey": "17449f296f72790a85284a3eead10e775b452a32e7cdf1f0e68f109e5732d8a4"
    },
    {
      "msg": "d2ae97ae7b0b488f3a9cca6b7ed92832b4a6a7a3546a3ed9964eb51fbb2fcd98",
      "sig": "3045022100c842a06f6818768fc3d93d98332affc7160fc2f58ba6fc0239c2c9cf951e6bc302202756c90464f85193a52a29001eaf824d3b0602028d4c8f5abadf6995262bc7e001",
      "privkey": "229d075d7a48c5725f21e585e9effb08c80ea768883fc372ed3ad48af60a653d"
    },
    {
      "msg": "3492a279ef2ddfebc47cc7ee28be41b5ffc03c54b738f657862590237e56841b",
      "sig": "30440220708aae22df437d7280fd8e06b9ab043abc26f6286973e94df9ae28982c534fa5022063724a156b0766c59fe75c571a5f47b80f313676f60830699b0f0c171841c32a01",
      "privkey": "f2f83ccb7ecd11e6ef61a8a090890b6db56e87810be8f283626f6028843e70c2"
    },
    {
      "msg": "bab37255a348dcfd8864aa2bd1b964c951da28370743905f892bbf5533b2c881",
      "sig": "3044022054cc561ced7052b9b0d709578e691e8e4edb04e2a38d1b79fbdbf16302674c6f022013c9ec89010fe1d9643019c7bb863abd618d4dd492c116d8fb099710e33f5b5101",
      "privkey": "c476e1df4d6bc771b23836b58616ed5bb6417baaab3c533dd255562d41cce2df"
    },
    {
      "msg": "3543080c755844091a26bc812fefa40d00663f57622bdb63334ffbdd70ac8cfd",
      "sig": "3044022066b520cb7f51656e610aefb238bfa5a62426953b22cc09689408429b68ff53f902205971ec48692210b050683f9ab2cd4443ade8a9d0ae3f95d32e865458515b8e4601",
      "privkey": "e9fd9db20943a760c4cf89a9eb8aa150405686332c8a2ab8789ef19593312ac9"
    },
    {
      "msg": "aa05ef24738774890500e5d4f25f2801802a4c20f1be4f06721220d065abe042",
      "sig": "3045022100d081a3dcc756f91b4c6aaaa5eb57c18ebe733086391c4a0761a9b11a43dd477002205cf7ce2565d977572dd10fc17875d07b2f8e3d824740db45a30f8977f57c7a1d01",
      "privkey": "251e11bc1fdf9ce349c904af6f3df523e906e0367e18c96e111104715fbbfcbc"
    },
    {
      "msg": "57176b5966096a1818148936e1c56bea9717a7b9f4e3decf582b4ae3585e794d",
      "sig": "304502210093a5c31daffcaa47b22a1f34dd969510acb76440879e91c51bb1b465fedfa6d302206edf49b1ad26bae5a1c179ae6913d3f3c3fcc0c5a3c7abec07d8adb315a0782a01",
      "privkey": "099796458bffc713b89b1332089b093f8ed08039fa1d8323d7a8b198225d89d5"
    },
    {
      "msg": "8b339212a72cbea99b8e882e4ce7c32a1a1f0e5185d3c8e4b99c9a8ebfe58060",
      "sig": "30440220640997e496194c03b7e56fe5b97a44bbad81df5a9c2501138453b86e3d1ad16a02201a1dd1ffdbe9300184b7b1ff7d0a1339dd677a081acc2208050e0dde313f515b01",
      "privkey": "00417c436e3f135eb2292eb5d88cab40157b0989dc0d917ab6e87e8faa0f1ee5"
    },
    {
      "msg": "f1415142ca90a4f6d1f5c63dd0d776642e34bc3fe3a9ea1427afdf9d71d79231",
      "sig": "304402202364525dea549ced7856a0551be97d73b1e5f20237e857cd0193f3aacaa6e1100220245974967a1f0a849a3aa7492f044c53fb10a0198c280caf075aad9beb80126401",
      "privkey": "1d77dcd3d3631285c0a99a6c669d804fb603cc8a788c4568a46971b46718453a"
    },
    {
      "msg": "e5a093e9d225f09961f35f44b3171962b2ad3f9c859c3c21d0f03fc7dfadbd51",
      "sig": "304402200d2a510384e4ec4d294150598e893ef97827c11c61a081cf694cf53e1c0dfcc102200eed9c0dbe6294f692ead6d729eddfe9267411d67a08031012c4b46230561bb701",
      "privkey": "df693dfdca61122d2e633d2a2d8f4270a9199624d06f9230325d82708da5e9d2"
    },
    {
      "msg": "42f5f89f123967d7ecb0f0ffbac97d1e414d22f8aeea5f61ab18c67d9b05b062",
      "sig": "3045022100a251fd56b0630c642143c05cc20fef8979163e85d8dd4413acf97c7f0b21832002206959532ff89b8515c5934f7dedef47c8ea1c3b0f3e1630f85445cc6989b8e61c01",
      "privkey": "3e21112d32f27677d715c4f12d4005d551a5a523d7c63717f2166ebea89addc5"
    },
    {
      "msg": "f1914da938a0c2e8112c769591ee070ac4123b9c487c0ed7fab6b04473bf7714",
      "sig": "3044022010c823ef2f6bb11e4a974723499be7a4fc9610da16229ae49e025525eca9088102203e3ae2173dcc83b754e39fbc88eb1b31effda488c1c9632572513146ed5c7dfe01",
      "privkey": "ec3eaa66a6ef4b6c31acd75528218e702419bdf1c086431137926fe71daaaea0"
    },
    {
      "msg": "3cf9fb4cf59c6d37da6c36e0d680b1d364800e94b54f2b9074d755a456a0d7f4",
      "sig": "3045022100cd40d40dbef9ac2e27f3c8d40a7f8dd538d417a7bfbcd0c00a6e92c93bcb145202205172d09504b59aeb6d2afc298441615665e4ec8fb7bf064a9364ac5f6ad2171201",
      "privkey": "a51997dff0ae72ff3005ae6cad243a5d5c6864691d238fd58123bea364008009"
    },
    {
      "msg": "ada128dfd83338a8b0f5ead162a0fc7acaa513d5c13b9b1d5d921d2648e674f5",
      "sig": "3044022075c1178f1bb941fdfa4fa4e21f056c5717a5a94247030c321ad51ac6d8a2a860022036759348c6e87c3b27388ba92895ccc6c7af659f57b4205a236bebccfe6f3e3f01",
      "privkey": "9a8114c3bfe3656290a0d092bb80a9f5c67b3e938ba719424c5c8c83e13ce266"
    },
    {
      "msg": "d23cdc4accc2566b82fe6270e144f366f08007dffcf9e47c1c66d40708747da0",
      "sig": "3045022100fbe82220345d27c870e152048698340e70d701ab868a5482a7cc22977962f8d4022009181b343e76c8645dc640762d49911df336941d79dedccba313ba03dd8c28b701",
      "privkey": "f1d7fb29ab98d00f46135b74de1b7ea80f3e38360c9ee0cd7056404c5d1db57b"
    },
    {
      "msg": "e89e786443b5634afbe711f66530326320a0e5ec27d1c42697e5fbc11e5ce169",
      "sig": "3045022100be23de4212c4bca5d1be2882ab339aa8a586dd656daae12aa2287cdfb2809af002200d460339847f0c08311a59343997d5e307136a4fc0494f84aacbbf918deb11ff01",
      "privkey": "ab8f7d2eb73af6349990d2b4296d98432da8bbd858863bfa136e234a56351090"
    },
    {
      "msg": "ba7de66731341e48fca15ef5b62c88f19b2aee7786987d73754be8e339f706aa",
      "sig": "304402202c2c1b9bee9b018df561d1f45ec07527ac916e8e56a915862cf80a4fe73779c8022037aff510509b3704390da0db4b647540647f897df5a211648f4180a292b12bca01",
      "privkey": "d142f008e4ee702e6ddbf6f5429e4b39e0cd59034018a332635e6fab028f2fbe"
    },
    {
      "msg": "1ddaa971fd3b025d0566d9bf893a0043329379e2c52561ad3ebd3815bae0e818",
      "sig": "30440220110aa7dfe50948e3a8ae149a01d9b3824e7274a6f380e64d8b189b01e71ebc4902207712465f4f09e039f46d06fa949ab5f875a0f612c86c76702c07a4007532122f01",
      "privkey": "c03a06e7e3958f790f3d1bbd8c9938e3c1636301a04b15b2774d27381a383d35"
    },
    {
      "msg": "c5b4b2981c007f5e5b6aceb950985e64f8c5afec77955e973bc65f1a913ccd2d",
      "sig": "3045022100d9f8081fc24e267dd5e2a70604277496c9c8a20b7c37f3d788e92e7356754b6e02207ffdafb0ba4efee3211a1d8e4623f13b63141054c942cd47e388faf3489bb8ff01",
      "privkey": "795b50f2d308bf999565a084c8f709e6393f69a7842ce889c5addbd17c24ff5c"
    },
    {
      "msg": "1544d33544fa93334739a60a35bab4390b523bdbaa43ba3956ca450ad03f6201",
      "sig": "304402204d74290c6daedc88e3fdae9edac89984065c2774ed69d90668544aacc6e7e16402201ec57cf928279f30d56d8e5a1a46cd976cc7117bf2d03c9123833f08db6132ee01",
      "privkey": "fd2190d00de40b004f9a5d6d06829fe87eb1b11e483e94023fa01b41c27da90b"
    },
    {
      "msg": "cd40650b1d22d7a7777ac3a6d8701c12b485dd3859dacbaca56ad4ee4a3f6024",
      "sig": "30450221008c17c93e1aa880c36c87ec08fe52ed68a96ee014a4cb8045fdd08a0537cdb602022045728db5a2bc1860cdf0767122e567f903a0de25f770d3a96b51833b2530e03e01",
      "privkey": "3a6857669abb2d6f2f529b548f6386435856ebc98d8760e75642ff30a149454a"
    },
    {
      "msg": "5817d0ffe477cab901884793ce1e5d40302941ea7460a2b468b7b02f08203527",
      "sig": "304402205ab83ee406a958901837e7f155fa8c043558963fcac8156515166bf5d008b21c022026e18000c7050b8d7415337b10eccef395db63c6fdd8b008d2b613ac2583e8d201",
      "privkey": "9054a4c8279b1812748c690f7de4a8305e7ba2afa27bb30a70ec2be6cfdcd104"
    },
    {
      "msg": "082bca2d141957a5bcf2e6f0653557ddb12d0ef393d89c5c41849464cca6b8f3",
      "sig": "3045022100d62ef631bc28d285f0ea2bde820c4edd321539e209c3575b139b4fa7fb571e35022015f47f15f24d40900ad13ddcf9809a4f8f45e8c1af2a241cd2641df02772809a01",
      "privkey": "eb75f55fc51a5664c46889eb93af6834b8fc4760ffd12f36f2a7a54180765644"
    },
    {
      "msg": "58a7fca8920df4322b3118241aca431418796937f2dbb32bf36b2c230ac3ce78",
      "sig": "3045022100efed6c4c4287746b5870de319fd0fd1e7f39cfe19771764eea8bcc2641bb87120220284f66abc53254d9fce663ecc1648d417251b246c1f72e2668e786d65b01db0a01",
      "privkey": "9d6cc489b02c25d0a33f3e2c71dc90c71bb91942bea45d543f41907f026fdf94"
    },
    {
      "msg": "33cfeae00abc4f593d9499a7e11e314f9ead2bc6d033977d91fa13df224b56c4",
      "sig": "304402205d51ef7d53b77f1e4933e38b72e60e2cb505f5c04c4589691c4afb66d45299b302202a9b34129c747c1a98dbbee519ccb8f45354cbe36b4e4bc6e9cb0079d8a8b0df01",
      "privkey": "cdeee2375309bcb5cdf33d6e43f8949b3936a0bb776bb20b40087150c4eaaa9d"
    },
    {
      "msg": "789d7a8a926e65c632dd4ae279c23c7cbbe1938082000a4f7e663dae4d2e6565",
      "sig": "3045022100c316f7d0f51e6ea313d2b03805d695ac4426f959d14d9138ef171deddf0e593702203a94ff889daed2b366a17d5b0bbbe46f96faa439f3e0bf3da3755f2313cfd9e501",
      "privkey": "f22cce5bfc11406b3c2013be86cda5e5597a10c99f045af275aa5c4136ae8247"
    },
    {
      "msg": "cad973f4d052f59654c8b714e4c777c297217de855f7e72679ddc4d88353179a",
      "sig": "30440220140c11ee563970fd34a31076fb92a81320bad49373682aab2d11ad0e9e71da5902202bc4a45f694e1a25b89e87b21b659afe87e83f57a53a2fe7a4160a93fab4331701",
      "privkey": "9056b9aeb9b88e4b2d2cc34a3be77e6120551c9ec9991aeac46d75b3b07307ab"
    },
    {
      "msg": "08f3306ded0c07980fc8e008c6805fa19582a1c635f892d0027256b8f6e658ef",
      "sig": "3045022100ea0f425a8f27a9fc82286ca7545207cfe0ca1e41d54ad3168836086bc097740b022027ede91105e79097d091efa8d3045ee9a2e250ee9029245560caa5b8bb5450fd01",
      "privkey": "54f8d7d845453d60ee39167ea8c0b3203487eb9fd7f9aa83f8b92ee41799d3ac"
    },
    {
      "msg": "ab440f7e37a9ac189e08850866f9fec3fc2c323dc802f5cc13c9b2dd6ea9c366",
      "sig": "30450221008e6a5185622e53f986c0f865b376b69cf7e2297b681c7b4baf92396808e90de90220633313c8afcb4bde5d1e099871e75df82245c9f2fe24bcdae86e53a48116f74001",
      "privkey": "ee1eda8fc9d0cb958fa518d0b95189c7eb82202e6d07099b8a6a11106797af70"
    },
    {
      "msg": "c0d12e0b35fa92dd04ca66b9e9537a71c5683a4fe5da9354e9f74cec0746251e",
      "sig": "304402201e78c59ad8c6ea7ea75735696271eca86851f7d65b2c6771eb5ebbae2c3a5c0a02203f0e9b34333f544e692f7ae92ef6ad68fc455099760944d3e074bc994f2da7bb01",
      "privkey": "56983efa120cfd3a7fb92df780a60463decd5f47c6422c6dd0538a68d3c7bfec"
    },
    {
      "msg": "98f7eeb9417e950aa953c110b245adba213084db4bbd58978f2aac125ec2e584",
      "sig": "3045022100ba311522b51cfceb11f8fadb34a79f5a75e7eb6b5878c907fb63c983feaf695402205b9e0910415722ce1bf94ac5b6c3bcb09919d3497999ecdde7de6fa76f3d00b301",
      "privkey": "04dbf45e1b5620e3ca700a82e4e83a971551e25e15abfcf49c8a201a4174bb58"
    },
    {
      "msg": "2e18fcb984ba778c0017cdf882a862dfcadee1ba4c7ad44937006a7ee0ee90cb",
      "sig": "3044022013ccb3f7845476ceea2b990d15ec53253f333ebc1cf392e96590d88aac70dff902202c4874427363f84ab7bf331d2a811d57399237d58fe0ceef34056f26bcd9de2501",
      "privkey": "8bfb17789767931b9602e3a1310ae79ffbd5fe7fe1f2583099568a4308cb80c8"
    },
    {
      "msg": "d6fe1d5d5670b02f399ab0125c57fdaa181ae93aeea97c5ad238e0521dc10873",
      "sig": "304402202d633a9bbdf3e486fbcd8dae7afb7b9604cf9a806d72121d08a95895d16db21202202f83e6d1c5d17d676885bc05660271770618acaccd35a30b1d3723176c1b395201",
      "privkey": "e74ff299a3e399fc7833799b1591c128102d441361dc2ec77810d99abf280fae"
    },
    {
      "msg": "798a41c8bc899e458e9e07d3d83410752ea580020accae54a3ff65ebdf607f54",
      "sig": "3045022100ac0d8bee62c3aa92ee6f29c98978a7e47d179f6954fb2b04b977489a2d24e7af022057808f4c12d8deb7737827a1543e88bbd44abbafb4d4db43e2b5a6566d0e821801",
      "privkey": "cd4d9c04ec290aa6fe5cb0e34e3f585beaddcba4f39d883bcd0a7e989801a778"
    },
    {
      "msg": "1bafdf652c98542066d53aedf3b0fdd1d3517bc6fcb0155be621ed0032675a1a",
      "sig": "304402204ffba8cc994840f5824b2217188bd0e671cc4b787ac33509c774a4075c62a989022041129edaee766692b1c8d9301974f6daeb7139d463bad561f650801f097b4b2601",
      "privkey": "51385eadf7238fa581b13905b83ff1c59cb7923d2afdfe2b29396ec9da1f708e"
    },
    {
      "msg": "6fc96a01cf2e3ab6ab277cce670d446f0da3a25bc4344c02651cda1510bda8cc",
      "sig": "30450221008bf5889acf97948be7bf6afd1da1504bab75d841c09e3e6cf1cc445da0ed5cd2022030cf8407f6aabdd056e1d4cc14b4a0e4ac09c6cb45f572788f5353fda223923701",
      "privkey": "20dc42c28ec79d4b62d84e2be93945888178a0c29aa9b67cb1afa5e4ff4f1073"
    },
    {
      "msg": "524fc94cd49f7fb80b5d2a111d7fa9f9022b79f5368608dc5b50d1706e7e7fce",
      "sig": "3045022100d391974a51503f4b8675328abdbeecc998b54bf6de23492f57631c15b8f7ef8a022075e1d215853ce491a0efb1b2ca60776142a26b1e8975158988569c2db2af87b601",
      "privkey": "8cdfd627ab00b392e38c27ab8eaae73b202f306deea075815bec61a0d2cec7b2"
    },
    {
      "msg": "d2a53bebeaeb041272699990b027da459ca5badb811e4ad57b3445c56e5112d7",
      "sig": "3045022100e2e221910d4ce1fbd7d489a4807a5d11e6fa45f35a997ea5583f8508a1faaf1102200d5fc4fa852eb1b26abfaf6799559a7165b4590707ac446019acf2d468712c1801",
      "privkey": "021144fa085375c86c681cd021ad5ed3e7070503309745e97143194248dca839"
    },
    {
      "msg": "63446421e65a1fde302d32b962dcc75a2286b7c2f0491c25b3fb6f051b208dc4",
      "sig": "304402200c792c52f28ffdcccda08d7875b3a62e665dbd65ffdd80b0767fefe7af88bcb102207780c849bbd193e805916fded694b89376136cc7b2b8567f52179fd10c64a48601",
      "privkey": "dae1c4edd2a889f677615ba48e22e9144580360cb3c7094495579b3a4c17ee24"
    },
    {
      "msg": "53751b08cdfd84b6e7a72d9d32f8684efcec290ec4ff53e5d2b66d85fe1075e4",
      "sig": "304402206fa2f2ec4f36d3b92f901d6d1935f6167752c13bce38fde71e1cccace629abe802201575d02c1f9599e19e72c1552a1e67c2b84d780bb663cfe26f0200f7857152ac01",
      "privkey": "81560d6c8f7f56947e85c05a5bf58247972a91974dc886fda04557e42cf7aeb6"
    },
    {
      "msg": "a8f00b68747f932865b1e652495e2ee2b962d58ae65a803a83d5dd723b961195",
      "sig": "30440220113a2d165fa751a5fbbd96032fe0ba55a9f7395c546c56460c74800206c7689d022037cf2dbd41bfca49004f603aa6476f9a2ead3c0e55f4fe437b4f968379b8951f01",
      "privkey": "3648124d1c85eab5ab6a9e48377e1727d1da31b9dafe46844bdbda5381364b16"
    },
    {
      "msg": "c0c93d49025eba4dcc15427306e598ce42b2b301dfda34e8fc944a10cbdf827d",
      "sig": "3045022100fc15d1c1a7ab3647c56aec5fa47f1d3d52d082fb797701e32278ecc0ae93dc3f022074bd65fb1164ce8f856dd8c0d5432bef396357302409ca101f02904b7b7fd44801",
      "privkey": "5516f2b53a5e43cc284f074d8960a918e67afc6c0c6fb74246fefdf2ae55b0eb"
    },
    {
      "msg": "8cf263c83989fa23970f41b30fdaaf226792c0348d21da89d659bca19fd6d26c",
      "sig": "3044022072a768ab0f2f878492d56153ee51b170deb652b6b2a8fe940ded965dd32e49180220300b9252ba85a611adb8827c315d47c2cc33627db9be8e283fdf09b527bd21f701",
      "privkey": "467904e0c8850c5b84066e2c135096df2374e5a2066c0e94114b1d06eb98c454"
    },
    {
      "msg": "ab2e3da1e5a5f2acb51e00f7f8e6cda712882080f24bcd9ea43ca555577f3b30",
      "sig": "3045022100b1e275667ba42709e6a6da1306df173728b032c42fe955e60721819d7ca77c2302201219d9db72e278fab11dbc80fd14191d2d37a13fb31338280cf2837d64e27b7c01",
      "privkey": "6a7536d6733334e204ac5bfa2172c86f7446fd32cd7180027391087f98f18116"
    },
    {
      "msg": "6eba52cd7a8f859632b2b5e8a6ac69581ce266d82a6b010c7b666d3afd0e19df",
      "sig": "3045022100fcaa0e84521f46c9a9dcff5da933c981fd2d0275c2cef76881243c6390077ba702207f7aefa9e2e9d2b27526a34c26bfa57b7cb2e22ddbd9ecd830e7cfaf81a7b10b01",
      "privkey": "e814cd0bf690b780f8c615cc6f1202247b5218725e76eca315faf9b438c5e554"
    },
    {
      "msg": "85b07d8a8d4100a4302ca49cfde58266911ab1ad45368cf7451dbd9b6f45eb78",
      "sig": "3045022100fe510f6954ac3f2fba233f109ec7a08dd93aa955336e47fe7b095f1d79cfe198022037925a771d139f2649a5665a3281b4a363ca96fef8843444f23f101400f247f001",
      "privkey": "4f4587386955963eaaac84b32eefff63b32dfbb540bfb578ff7b0cf9f01298b1"
    },
    {
      "msg": "13063f26e50c5b6e62ea39fda446e3beaccf50ad07441241df62e3115f939552",
      "sig": "3045022100d44570f08a9e64119d9885d73f688e51176807a4143856d06b684fff4a8ac2da02205f757d21c8c56258c63034d9b169c402889532493cab2c06c697154f44705a9a01",
      "privkey": "b6b2e1edbcf892e41285f4ac942a331c4a88d785267c45c8095059c5914d3a98"
    },
    {
      "msg": "738516a95cdb7d1b374324ab22e642b3b23db43464d898e80789eccb25240e6d",
      "sig": "30440220655630c6bef940bc7360febfc8e7a09614e871b7ad8c500ad658a6ba7f1669d502202ad85b78a32a10c28b2d581d7e364f6c2b7caacb24a61e31130f2fae5a951de701",
      "privkey": "23bf641b12ea841b7a8386a2ff4f378c8d33218fd147906db34c64363f59c1ae"
    },
    {
      "msg": "2a7f44ec15c00e5c457c545a7bd27dcf38ad636cd98d48f0964496d3a01f781f",
      "sig": "3044022059bfd164d817b91b94dba6c3843cc85d08442662a9f3736b12f294630f75578b022017f6dffcc2039291bcf0719281b2e599044a63709e94ab0050ebe37a2394933c01",
      "privkey": "86b53e69d27fa695bf8217b0a78d72651584e24f1d85e928647310ecc04d33da"
    },
    {
      "msg": "865c6d42b0ca9767593c8736c8b5151753f9c0068c9c52eaaf4305a19e2ea559",
      "sig": "304402202b995842e430ed36900761f11440116c4a0ca5c4702aecf293625e608011b3df0220051b45eacacb9448cadd96cf4daef05db8f41dddfcb1943cb8ed67ded4a8e9e901",
      "privkey": "8ca07dc245d61105afc9b40e69bbd1532b65e72094f929c117c5a72b4b6ddd25"
    },
    {
      "msg": "5170ee5b8311f24570aa8a639e33c22c8f883e8d947548d47e1e330b965cc57d",
      "sig": "3045022100d523659075fe10d9f6cc3e75cc74bf94ee65f4a099eabf7fe6dbe24bbc17f65c02204423cb40c94d732a8a51487b9e398fdca78005bdf1571b7126d67d9f50b712c901",
      "privkey": "44e488036d994a53d6d62bd6e3201b7d61aac740157bc25ea41c7da37b5d6149"
    },
    {
      "msg": "29b9327f728c7107537475f99ac50f28e33ec0f68f4db619ff0f8e5b314935f5",
      "sig": "3044022035bc811ac5054c04febe41208c422922750ac045acc1cacf2529666a7fb7e40d022071837d85c64cf07a1d598de345125306053c3c9014b408898dc5edd04dd919e401",
      "privkey": "1dc87fae4276cdae8ffd67563e0f8539231582818b2e2226dbbe159c021e61a0"
    },
    {
      "msg": "99c751a334d1a3687432e87a34301beae87ec78aed2d48ce066f118b476a85b0",
      "sig": "3045022100efcfddecdfbd8157fbe996563256efdc6f29955fab32edb3efed9cab08ef1dcb022067b01f720312ae64475eccb6381e1d3fa342cbcf2852b1ca6a53f5b1a6e16ff901",
      "privkey": "6e9f1467ebbfa71faa565e02a8663fd138487dc9526e5d096cfbb2ad38883d22"
    },
    {
      "msg": "76bdddc10926a641df369a6179ad622c6188d3081a3cc90d8dec398c68ab7af6",
      "sig": "304402204d275af1bcd7ad578aff98d8a1551a83584b8ee9b57ef6d425fd191426f6f63a02206cb25c37fff11029f8fa5c2b99d0aa5bbc5a5fc484c863a49ab4ab4479892b3201",
      "privkey": "f64b62c51f2de8f4643857ba12f81a433764a3e0cd9fa2316b8e202cad9778bd"
    },
    {
      "msg": "f87a7e12df4d4a0ed99ec33e3ce805151526bdbced2bbcb0a012019a5cec7f99",
      "sig": "3044022029fa907c4e4ba985b362c2e291291271c6acbbecaf4c49b938261ea6f255ddde02206cfc13e0dbc8d5ec4c98684fb36087738f9b449cb0bd9d930cda0025083543d201",
      "privkey": "c21f2a248126a5b5d964d404911682ae1cbe7b7741681226867337dab8974fcb"
    },
    {
      "msg": "493f0c699d505325bfd1dd86e28d7bf94d698120dc10d475aa2547bfdcf5d66e",
      "sig": "3045022100c716b0c65339df2357089c202f4644603c21d7139f2cd77336f871834c27150d02206ef0c8cad1605b3957a15695db5fada122b9a8b9b4c49743088e88f93112320101",
      "privkey": "5a4b74a8e52b8f2dfd45c2ff015641be2b1f66fc285661de8fc65badbd6707f5"
    },
    {
      "msg": "82c5878eb438661cf7c50655890ed64c374611f3cef2e309a76565f745fc2c96",
      "sig": "3044022030db6955679658577e9a7cac8f7081105a173647362178efa7c74bc813396b8102206836332abe41ab0e23e6f62b0aa08666dbe8228c5138638ed0c2351c22e6c57301",
      "privkey": "aa6db6512e8b33be3543a46a908f26720402e3c15bd70ba8ebdfe7ab80787afc"
    },
    {
      "msg": "652c4068be47d9437d49d36173e095118367e1d9d0e86295604c0eb94484d5ea",
      "sig": "3044022065c05eecb47346d6b45b588a90eb0f5489a23f93170557eb969f258adffabde902202682a1ab6397c49892e349ba581fd623033a35910c97f4079e4c2e505dfdb21f01",
      "privkey": "ef0d812b85eec684b3314de835f73fc06c3c90078d404862133643c3347ebe15"
    },
    {
      "msg": "a04a3ee113f5d3054fd1eaacf8f3b1db506122c413ab346250e08ef6b5be8236",
      "sig": "3045022100ff6927f3d0c14cfff2ac2c8b47b20ac99baa48ac72726aca35e87af7965725730220654333918dc7615a2e1f5b59af74a1565c281db62201c54befc6158222f8284f01",
      "privkey": "b85e9ba6297a46fa4f017742485616c61ce5dbf080782ba1dd961933b7390e18"
    },
    {
      "msg": "428f1dde2440673a19d0b97fe46ece447721e61a700376cc56263e63cac5a3da",
      "sig": "3044022070ebbfb49ab2d2529546115e55f8aabb7784bd38fa16eb6a5cc6ac7ccce2fce202206d9afb41c0254c2aa1ba4fe3a05be5d5c1297803adb701197c918609184c2cda01",
      "privkey": "c17b6ff03bc75792c3a3b4ed5612140e2f9d9e5d6b21650701523665b3819b05"
    },
    {
      "msg": "ca0d05a273ef3b2782059307d838599eb027b0962798d71efc00648a5b07b744",
      "sig": "30450221009c88cd669ab7743fc2f3ccde723fa8ef653f951f67abad5afe8031c6fa3652c4022012cf4d5d66bc0e9d40322489ceedce43bcad5fb41cbf92a6ea0f387c4b3b214f01",
      "privkey": "c658044aab784be15a5776d2c4346e1099368a45f06853277352d70823ea7572"
    },
    {
      "msg": "f6f4aa6943deafc1879c00589208656e927422b5f25cc9526a9fa6139c66613c",
      "sig": "304402205325ccf115446eef902499ead3734d02065dfd337d924ca615f5d00b1580ef8b02205285496cb0cb63e8ccebf4ff999c922bc3bb5d4a4eb3267fa2c5608e6d0b5b1301",
      "privkey": "480989d814f56895a0c5781497adb1ab82744c009815f00362321dcdb709f036"
    },
    {
      "msg": "f5747a05e3488bd03da4210f9233131e1983f9e969d23330b3858a6c71f5c484",
      "sig": "30450221009e81de985b1bad7843c72cfb6ee2a30295f13ffb7e1c3b10ddd505cd5d6feb6d02203389442e24b7027466eeebf44a9390ff8f9832716544a4f508574fa919b4848701",
      "privkey": "db1e27ec5686db0d8a2b7c609847652067534751944f610bc7ba9f3792e92fda"
    },
    {
      "msg": "ee0a83c20ff143b6629bd9599b5beb2e63384be72a53221c3263bb83efde8647",
      "sig": "3044022063f2d7f32985641841f7c218e7a90add74b82e76004eb349d9e122162a574d7c022070e4793900af91b659030179ef46db54f478d74a31b31dd527af0952c49d461f01",
      "privkey": "88624e28090c22fa80888c3f15000bd52da334c7b295587773a172aa95bffe2c"
    },
    {
      "msg": "80aaab2aba272c8ccb67022ae9a54bbfaf8443bb37d2f922021a681bc4252a90",
      "sig": "304402204457849658bacecab40c4893021d2e567fc86f1c2ed2b20d9f1982138f7f00450220225b04c91531470606088263b28b3df2cccc5a9f1df36130d8960343ed89e13c01",
      "privkey": "ac461d001fce26e7f75fd82fb910e839d6e92bca1db3969fd78e74674d3a6bff"
    },
    {
      "msg": "285b0f5cc3c35deb52d5e1f5fe6e7c5a82a0c3ae10249c39c4b81307bbc9a1df",
      "sig": "304402205eed90c7c43c9dced57edcce95ae69e5babadaff58f033055d998e4df596121702201e47072efa39405f2920b240b56d3ee41c0b1c2adbef1f161c8da1e7eda6fbde01",
      "privkey": "786f5c06867cc7e8a6b16c003ad6809da46851a8e3024527e93af60b1ff70a07"
    },
    {
      "msg": "d615006da4b6aeb980bc12f769e263821890003123b1d2439c69da2cecbe51bc",
      "sig": "3045022100e13137464625b65c0403b71a3ff57b42da0f5d35be2384da2a4f52e93d8039b302207ae93812fb1aeffaf60c39b0096b39f2fd73bf2e695be8bddea458a2bd55b89101",
      "privkey": "226140d24cc86b64a1c2aadc77bc8b05552386da2d707668b3c460f69d70108b"
    },
    {
      "msg": "0c26d76afb90e2fe6a8c4b2a9d2496e2a6e27f25380885f7985d8c1ab7d2dda6",
      "sig": "304402207dfd5a172204356d4dbffe018b04cd6c123a48daf9b9fc201cf7e32088989b11022030217c1dce7e1d039ac011138569c4c897fd201694b10052a1f3ecb2aade3a7901",
      "privkey": "1e807394e21a0412d2d48711c0be3685a49fa3810ff84517b5adb1189ebc452e"
    },
    {
      "msg": "ae93855f5897620269b0fbb6f2444fabf304c570c2bc3d1342aa3b0615ad5b70",
      "sig": "3045022100bd83f85e36346c428909a60eddd7b1c52abfaf662cab6fc810e0fc398371f83d02207caafa58dceabf7176c2e3b8a8890e47b9c1cddd1cf000ba428a91c396932c7301",
      "privkey": "c8d382437c63d3debc2844e00c7eea0e0f400b111e805ba32695de93fc150a65"
    },
    {
      "msg": "b9df3eba9ad579c1840fab29448186122ae27c9add5b5fd6c8a2c7556e0fda8c",
      "sig": "30450221008bded4f87ee25852e45908397876b3601c6a0e177dc986bc43f52c5e25fe5d9a02205473929f0502abfc9ae0da25086b13d92e0ee4f1e1c9fcaf334fb4623048dbe101",
      "privkey": "54a92b44ea83313d0779475a1e664ad132abc53dfd8e4742ef81d01b3ef657e5"
    },
    {
      "msg": "f304cff5f74fc72bddb353ecb5d1a250848ca764ace690cc308d00b247577226",
      "sig": "3045022100c1f9fc9a63f0d26677bfd68687dd0e56a6342bc536a71c9b1f3a2bbd2a48360e022040a3f3179228bb89b82ebb648073e713cb759c1cb7d4e4f5486c29945d5c55e501",
      "privkey": "b59821f0dba07cf87f0bcfb4310c6ab4e676ca319fc6c0d9d11ae80be8a0468b"
    },
    {
      "msg": "77ba3ec6b8fa5c2b8f6e4bfab18b2b51ecc94586a41a1dd80290665913412266",
      "sig": "304402205d9fb1e3c6ea1b18849cbb2666ba5d5c67bffa78d6952e7b0f009226db6eac85022043cecaab697ed0684d53b497ac61ae614477ccc153c87f938e5a3302bb70d59f01",
      "privkey": "a62d04ca999d3b5311f317edec9418fbb065805872b25dcf69c088ad7d3b9d11"
    },
    {
      "msg": "63c7a73d7d35dd73b94d23b446bde100dc15e3544222b9c7e6c9d0be84b1f5d6",
      "sig": "30450221008043f2ee24182f28ecfc6c53cc3a51ae6da4ab902ca4dbcbcc629f3480b9a97c022052e44edd783f81cae9bcbf4e7185da17a82c09894bc44b0405392aa00000f85901",
      "privkey": "57b66d323c278d6aa3799db509d1909da6d7f69385b2627f8785712777f8236d"
    },
    {
      "msg": "2ce5f3aff72b0867bc0b7c286dd49f011f65eb563a93cafef5d554ef3d9c1488",
      "sig": "304402206b1cacf8fcc9e813f421f88ec8541c04de7f00430e1332829ded5ff73f218835022055b9da3bc1de4ed413f35765529c1df9d5b9b8e8ba1fbc7507c6e8fd747b191601",
      "privkey": "81db6a86b8e6d840a97da1969d5ccb9b9eb4f9d36f6e59df65bcd42b9f3ef12b"
    },
    {
      "msg": "475ab4796a2038629a3b9f43a14d5a2c86467bc1e32ba654e87ba67ff99d2890",
      "sig": "304402207d3375beafa30381e9ec3b32b0ab819d67c7f63c61df796993085ed9f61a1a100220050e89b744e94e4d7301701d602886a39e0529740c24f6a0f8bed0d91cc01ed501",
      "privkey": "8b51025a732cd22a179591598414b66bc370295c1d35284f706d468de4684dda"
    },
    {
      "msg": "af1a72105095a243242132ad24085c444fc78bce26de4421467266d248536b87",
      "sig": "3044022025accec34080896b7ef072474e0096fc58ae84bd73f045027007925dbb7fb5e002205602c0a5cce0b4d9e10a3009f9dca9d2599b694b6ef0e7c4360b08d35fbd607001",
      "privkey": "5f0cc5d1b7996f0187a0e1c709981dc6dc944e92f908367eebd82f1babd2ea63"
    },
    {
      "msg": "029b0efbdf0374c6a23593cd7c6917a9404b9fa43ed32428a82be05bc7f2fc3a",
      "sig": "304402205fee5f55838ab4f7f7551b64ed346565f64dd5b42e2694d7c372233db2fae37d0220026e8f5d54af25529d7ca1a4991a1385e7ea3ea9fb37db826d81aa32b0aeadbd01",
      "privkey": "b7906b63b11eeeb3f69586b7a8323aab9f4dd51c157f813d24f8e34407eb5c18"
    },
    {
      "msg": "9db7ee956f52eba9fbfabcf840d9c107117a00f5e2874eeb54a91025951d2ea9",
      "sig": "304402201fed017ec208e65cca442552269487cd15961c2603f6aa19fd035491cd4fa09602200d0c5c9ac89dd501c34f3b7403a82832f58153bb77d070c44fd8f9396dd0c2b401",
      "privkey": "3e89238cb4a7de25f833f4b3cd3374cd5687d9cbb858de906a570818e14031db"
    },
    {
      "msg": "b502771c17443b8835fd6582fb2b44512b66f9bbe92dbed5e710b76fe35bcc56",
      "sig": "3045022100a424be7d1cad14f52a4bc99736635e3130dceff4f9321dc3eec31915a99d365202202c573a3a8d2d24a79ae70ea15e32e0a79819406edcf54bcbae4d49ff87512c8001",
      "privkey": "6a4aa42e630ede3342539fae35f43c6fa02c94c634753adcc2130de76e62dafe"
    },
    {
      "msg": "5c66cbe4059db5bc8046fc393266d2db410a81ec2a02ecae0368aa0eb35d68c6",
      "sig": "304302204203bed95a0e92b6a4b6776551e01473b891487b051824cf707ca553b40972c7021f64f496fab45d743ffa95a520a7a6f5e98c49379e69f0b8a7dbeb98b576215001",
      "privkey": "d7e3eb80f852de183837573ad3aef624e16e8302f7d0d4b4d5ff4abf9063e438"
    },
    {
      "msg": "12e16733960b2c7d5de1f06b824094bd116ee9ed83b680233298be7cead86741",
      "sig": "304502210091d303cb2e80690531645c79743cdb29906fe6119023844b8c66c81d39c9e299022021e6614ab44c6da7bba1d7de4b37871cfaea7a76df43bb5b90ffc6f61fa7e86f01",
      "privkey": "0686905b967248099704688e15d8e3eeeeb58ff24a06e8c7a0e17b534a4714f9"
    },
    {
      "msg": "2309bde84fa5fd4ed530fa7ba01af3dbb71e7967df1792a53b13bfa8225dca77",
      "sig": "3045022100e8f17e0c541518d5eaa7ddfe24d7caec497783da37b7605522039024bcb835a2022075d5ef13cef091ebb861006299cac29fa762c2d635b3be798649633e4d8e0cf301",
      "privkey": "4ded96d9315bf52be4ef30a2295d76a3c6a997a331555bebb5012491b6d315a5"
    },
    {
      "msg": "1453bb7e9be2757cfac795c751dcac6ea24a1a597d8ec4b5c0131142a985e17e",
      "sig": "304402201a686a1eca60be4ec2d95f22765af2afe91a6493ae70dee9ec0ab8915792c02a022071aa6f6f48f2c04e1a56e116eca35cb36866595561cd10e75bfdaf7f08f2af2e01",
      "privkey": "6d9ed1aae9dc352667d4feb5e3f41f51da9ef9eb56a58b2497d502779680ac4a"
    },
    {
      "msg": "863f7f5d7f0619816d65ef3eac2121c9d3b3a6980b044074652f99c70abf539d",
      "sig": "304402200fcb08df78fd9aa098d627f6683faaf6535cb4452ac075a228ee72a3e5cdb16b02206936c264990abb530ab705249e564bb4bfa7227edbb71c5686387f7d82ec251501",
      "privkey": "34f87676d627e5ce30cec37ca8b7add7b30e82f3e510b8ebac31fcedcabdb22a"
    },
    {
      "msg": "9d3469873f54a1c26498eaffa9fc7c49644664cc4b25297fefc1b1b8429f6674",
      "sig": "304402206735289ce27cf7e55251526382a07eb9e4a132971834082002d4464faf012c1602204a6c9b451f9ad560bd5c10561a551f33b712d553dd209b5e9f12fec46c2ef9f201",
      "privkey": "8b4bf88a79deedef116259d5dcc331e4e566c04f1581c2ce0d02e6e2f15b1ce0"
    },
    {
      "msg": "f479dd8ca6bef32889a4a0159462eb2b56e387b6ad15f8ae0b09e1f489d49cb3",
      "sig": "3044022046df345f1bacaee73ab2157bcbe6e1b333d2abbe5cce53fb5a50f81c952caead022071ef3cab8a146da86366c1f79ccc7edc76bc630ab0e30956305ae041b908be7701",
      "privkey": "d3259f9685535af057328f4b4aba66311fa654da96b01a4161749f12d27fdf60"
    },
    {
      "msg": "9b4ecdd6c6fd1a43ba3cdbf534a8eb0159d0216ccbff47c3e41665776f00aeba",
      "sig": "3045022100e7f0b77b9f767b6cfcf33ecf00a5dde22fc7fb46f87a3289f09501dfd889a0360220645639cfb7bcf062d3bc62a81c27c79d6909758f2ee37b08032b2351988a7b5601",
      "privkey": "3a6f3397de4bedee3cce0568298f039d97ef8f4ea1d3d136e6c857cc3cf477a4"
    },
    {
      "msg": "bc64a2216423e642a30a0f1d790f3cec68b71f06618494723541d3c778237c5e",
      "sig": "3045022100f85ea06b50d834109e5a0cb1e4f506e86cddb875867a9c3b28b48b1ae086589c02206e875f5abce1a66c30cb082243dbd9ceca233ccfc758cf91bd16cbf08648f98501",
      "privkey": "3783268c39a70a6ba824e2adbaa07cb11f94b39b63cc3e8d53cf3603042c5fd3"
    },
    {
      "msg": "3962c385ea39d4df584dc1d9b93c1424bce2bef2aebff1a26dc7ed181e57ca50",
      "sig": "3044022043d17ebe7a376f79dd2ecd1b745548d9633e5c7871dd521f922af941c7ad47cb02203190a04501956eb66840ff7f7af13fb492e51b59ac981a6ae9e43fb06552365401",
      "privkey": "c26e9a48223b3a3966495620a14db81803ffb6f3b3a69932b72b65f52b46ca80"
    },
    {
      "msg": "f87d0fe24e507120efd2d10aeed2905131d296d50e688684d1bb847e68c02bef",
      "sig": "3045022100fe995bc6c1bc4e6f60fd8054baa3685cb09344fb83b18496f0a74da81a4ca46d02203ae1bed24bee86d68bad7501091593c5db3442b6f21fe02445ff14a0574d98af01",
      "privkey": "53dc1c26dcbcd6220e7329e5d12fcf17d838b9f8936333b03d0abed3cfd3ac2d"
    },
    {
      "msg": "62d97d2a26ab35d9e2d18e4335f7e45665a712eb65a1b2da9c2824339c4f9780",
      "sig": "3045022100e8542c42cb929f670c2c7e5faf2b46ff9a02852704e91e1a79097610476ed4f302206d9aa52a7b886fb4062a87ffb587e54c0c2a5a7ed1c12dcf112123e1b827b51401",
      "privkey": "6742a01cbff6a2e83a4f68a338c6f0c0995f6cac6e842c6f06de8337fc679f19"
    },
    {
      "msg": "364f0f3c7f17aab5567cb6ab0d9a364a59ad8ff294a006eb89193396618ff58e",
      "sig": "3045022100ec728047c10274e6c1f3ee2404a9bfb5d58beebed4ed7d0c80901926a2c5caa4022027f1905073e6730963b440c22e150504b47ae4b02b10dde1aa2177a169a80c9a01",
      "privkey": "f2415dd427697296d40dfc72084df1249b04d33cedbc880df1d9a6c88917dd9d"
    },
    {
      "msg": "d0080a4d6d945980321e346feefa6d8056cde94b974210dc2064837d8f47ebaf",
      "sig": "3045022100a81edb49b4d7544d27a5cd7e112b4caf58898cb83d76740934c151e79566f97802200156257235e64803ad6b15ee58d0eb7a103fbe1f6ea024fc25420db1d4b22b5b01",
      "privkey": "a7ba1b4480cf766d833940311d8a8c59a22d761858443412a94aa3407e330c16"
    },
    {
      "msg": "f09feb58a0f48e1678434d3995d12185a9d340baf3d19902a4680a532456cd20",
      "sig": "3045022100df54f5a3f4791b77107c11ac15b0ed7ac59cdc8a46234031f16317d1dfba946402203d768943db33aa775d86000428699ac45e683d9d0b4b5ecd47b99ec7c548709601",
      "privkey": "ecc32707de9576a9e91fa013190253e12ef780a5d30a0b0806da2ac05678eb6e"
    },
    {
      "msg": "2e8e25a6cf4c689b3560007bbe26a3df37dbf0eb5562c68b8efcb42fd5760f1b",
      "sig": "304402206d2f9b5b37afa234eabc8e9905f7094c56cb936b038abce5166a0e35b82ff9ad02206e0060d1b784e880f517a5d8607c77a82e93d6dab3c3b0ceffbd9e632ed3c78d01",
      "privkey": "bd42ee836125cdb5cc41ef767933be53fd374924441c4ef829b18c88ae1340f8"
    },
    {
      "msg": "5d659bd8337e119afa182ead19ef91f5d2f4dc6f5849e8fc56b4e6045204679a",
      "sig": "304402203ebb171ab9732a29344b2c5474f46068a7466c6db0694ce2935bb85f5a6cb57602201b80113965c0670f3b0065b0c3a527b89a4c328865362767d8fdd6d5c97258a201",
      "privkey": "17324fd463b6990e89218846d24f13813e415ac8c29faa2c6e7b2a6169e32e8c"
    },
    {
      "msg": "1cb65e2253db80412c92e092db5864c2074fae2e0800ee213b4ee82d69d639d4",
      "sig": "304402205c216ab6a7cb4bb9d33360999d2e00ac6b7c6e956150db10865ba8fcb87cda90022064fceefaee8c40a8f5ed8cee478d45d0e5da1aa15d29e103d1cfda7748f8160101",
      "privkey": "5edd47eb6580ae11bf3a148e01ed28a94d6a7912621707408da31ce4c541f46c"
    },
    {
      "msg": "5ad8d22c2e648851a09d74f1f47d2f116b51e4cb662a7f6b217f609f6d578901",
      "sig": "304402203c151a74e81770d564b18efbb895f0df2f4d225d8e215e671b5fa44b43b098f70220540f560d75456eef77ba2e52848326624ec76ae7edff7b2199b822d78e62a0b601",
      "privkey": "0a2804f109b57c7768f1d034112ecf46c705c6bf01b68c24220ff80e332e1023"
    },
    {
      "msg": "53c82bb675afbb5f6ceea4f6b3bdb777cca87f9f27fca9c688432b69b80a8d9a",
      "sig": "3045022100f49e0096e15d8d2183240fc3013fb71696aed95977d9788e1f6b99394006f0b502203d01efe4296b409db81a4e6cd601a7440859249339ca7c3a62188537802b488201",
      "privkey": "9d0b7120991d0910765b1dd563a787ab9ed51afdab8fb6c214fa3c6d6e32a08f"
    },
    {
      "msg": "51ba637c78e753468782866a8eac39fed07f10e2e38946ae0ce7a9a087aeabc4",
      "sig": "304402202067df8cec2b427a98fb7e0ec60715a4512102b74b651c9600a5b4883a0e5a2e02200daf8fb6d240f12f6a7afb2e9cb138160e16009498e49c8fc8f7f198dd1eda5001",
      "privkey": "a73b76b643651ce1211f0f98ab19050a3aed4774f9ca2521249581c3b505817c"
    },
    {
      "msg": "5aa29ded6e2f76817a66fd97d28838a35b61bcb4f04bd7c9418f99786d9b67ff",
      "sig": "304402205c5b3b02b9e0d50e2c5abe23cb046dcbb541b37f90c06bdad2d8a25bb91eaf050220346cf30343afa33695e160d2e8a66fa98fb2f8eaec1816178caadc223f93720701",
      "privkey": "c9b796aa7aaebafcf3e7a2ab52b2dcc59acb926ded580c85ac95fb7333922c71"
    },
    {
      "msg": "e79b7d427349690bd001f4bf0a3fcb61a9a62f710dd7b84fa04a9ac8621dae22",
      "sig": "304502210081a3126be36cef173363ac2b3d157e6b12ae905ebe0cc76bedece1f4451f2fed022046896d45d55e8698f6b628e930b09e230a778075e1c2ca5e1c61e75347eedc1e01",
      "privkey": "a79e2a1d32fdec5d2425af329680cc7e466f37b559fe54a9414f383e0c02ce3e"
    },
    {
      "msg": "116eb6113b0e918e4590d9c0b6e335da67ca3c4e9ff65abf11655a8eea47e4f0",
      "sig": "304502210094626b44fd9475c5f1300bdb3f66227371b42bf169ba0d75a9c5babd37ffc946022052b21f0bd6053814b76532320360c4ad93c0b856f4c80f43a4ff7757b3870a1f01",
      "privkey": "326117f45d2e6e19c287813c7ad10e40be40d543951c9e81ce2547cb887e1308"
    },
    {
      "msg": "1c354d127988b843c7e73cc55767272a6ef7290b13ae90651202ce51653a9aa3",
      "sig": "304402202fc5e5f3ad67a0b9515b0afe1f8e76b829ec604f112045cb34ccda7876f9f1110220090627218a60f449af87bc4703d8bdf226e502775d17fcc05ca86bbf125650c901",
      "privkey": "7bb2bb79141834fc87df40d66db087c943613dba9ae64f44a7b6a78f4116df72"
    },
    {
      "msg": "f30ebdd3c9d82677fa3a1666c091d9edfb9a73bc44ad4e9addd8de7fe9216459",
      "sig": "30450221009f649d2f5269d5bcc3636c5f7115952b93babbbcd679a746b7fc62d5b7645e9f02200e6fb9d63f00275f9fcfc91441e0110482a6931ae683d5b92cce9663a50b0d0801",
      "privkey": "39884d1f793eb949ce5bb07dd1b045e5024904eca7845f2e2a682b3bd716f1a2"
    },
    {
      "msg": "a1c2b956c8d16378f8b37ba5a6507a39b2019f4920cea9e0fd8954535017d929",
      "sig": "3045022100bd7cfc17f329f5248a3e90884ff27f6e43989b6955f0235027d633c80d414cba02205f465341ce8cdac4b3dbd3aed639816a883b3e10ec0c42dd00dc8151a8afe6b401",
      "privkey": "7a214c6fe5a723dfa73db996d223a67e58f83f3b835bd054798f993146d962c1"
    },
    {
      "msg": "2a0425e8362bde896e2ea09a1228359e62911e8f9710e80918f26a74f0952cf0",
      "sig": "3045022100c1f17cbe35264ec7643ecb9e9d9eb96251ff7fc627d288c5b9987a0907de33f1022005484896418729326860e8abeacfc7ac511f163e766510ae8f17df56f188558f01",
      "privkey": "529e409a353f09bfec047cad40cc74c8990680498f30269b2869b1804b47410c"
    },
    {
      "msg": "dfe1ae0090ae3a721a001dbd9b3e33ceb4028c887b74b2b9557609229184a8c4",
      "sig": "3044022002bebdab55b43bbeefc4c92fbcb0c8ec6462a63f80cf6b5b5876e2e8ece24a2f022006e667ab416bfa3c9052565a5199f16f4c68e9aaac3e5b20d52ae1286e8eaf9c01",
      "privkey": "d2fc0076b87e6aee2852492a7092a49f80dd7a4fba43b1119ca23a0d5833f870"
    },
    {
      "msg": "a0fd53dafe53e8362b26116ec475e58da990cf7cf68c81c5bb643dd98e3952fb",
      "sig": "304402205419be40e45705c8ede1de4aa194bea70c5aec160aa3ff0b7b897135097437da022076729f0571e5ab1c2a76d0f768103be8fe8170863f7501ead08d50fc5037b26b01",
      "privkey": "68260c731196804f1f6a5325c0ea3fa6d8fb1b9964db1ea41f3add37dc65d31f"
    },
    {
      "msg": "4d23d02f8c91ec285631c4084bb6dfff6d8a96bfaf78ec3fe5f48ef25b4e911e",
      "sig": "304402201ad146e7601eae64f06689dc5bebe1e5fa8f4dc0aaa1dda72659153b1db8ff4102204b5b3f639231a567c5c839f6c804febf9558403f553b6d1acdbb602aa790a0e701",
      "privkey": "f48fca4688a9d6f522f345cfda72b847191b77ec891d39f54c422c0b0a4ad528"
    },
    {
      "msg": "88155ae33b918ecf6bafc7f24fe75b9de573e0f7217fda91fd2ca6b33c51ba0b",
      "sig": "304402206af1fadaddf318e5cc6ea0d630c966a9aa6fdcfa1c51188dd18a30a5ce9292d702207b53272a1a29f92d9cc335005a9777a6352de56541694b42c3610f8287f3688e01",
      "privkey": "31b614dbfa8820d15fa932946142ccf1e1f12c9dd57a6a7547e4fd80c5e418c5"
    },
    {
      "msg": "4dd10d1a99d91fa5677cff8285b8f1bc8c3e3addf2c45c4d7d5b3c7ed75f6970",
      "sig": "30450221008f930b4e25f295f3c5a5e87fc0ec52bb915b96dacf2130be56540a6683d7a17802207b9f7eb912a8eca3990a6e192f01c072287f63202fbfcae20688117d30cc1a8f01",
      "privkey": "db8b58e63fffcac3fc0b3d475059738d4c4f549ff3f0944bb9695353efb799a1"
    },
    {
      "msg": "925a060c837b7732e411d6dd6323c09f8cb8b2245b7855a51ec095f17828b953",
      "sig": "3045022100e687b57e41c22c2f78aa75f000410bfddc852469e32352ce5e759a81c14ebe1702204ec924703af322348b6f06fd62567e689258988fe9928ab8987bbf25ca8a164301",
      "privkey": "08c1df65ddd6405219f2f20c905693477db910566cbefc1fa3a53593c14d1157"
    },
    {
      "msg": "16ba4a02006bd0764558a71601542408b5dce7839ed91fdd3c229d37afd5cb66",
      "sig": "3045022100eeec3696d777d1d4cc658ef6236356e32a92cee32670dc566e5ee28df32fe6f80220558c75df7de5286d89f7cdc7de3e1cb8d45aa73f34a05dad48e1079685813f2001",
      "privkey": "c82829e681cc6cb6f124b4e1a0ea68d9aa063cf64be68fc95f6ccd095d97cf90"
    },
    {
      "msg": "977394a3cdb1151a226393902e9d4003b63678bbb4f67d784e45cbff6831a611",
      "sig": "3045022100d3023f62a83b3d7a252fc7ddeb3072f1dd9c25b0c604f1c68959f22b9266186f02207e4d9f9ab40bd5fde9e55b42b05324d54bfd307a1b5c32a35ae2ce26ca8f1ce401",
      "privkey": "1aabaf1d2953ff2b5f3f5ce80d5ab318bc31cad97eeb0fbf0f126b21b720c4ec"
    },
    {
      "msg": "0c9ebc4b38648729b33d86a001308c099b020e2cd2c989b82e9316b3687bc7fd",
      "sig": "304402203aad8e8efb5721c59456d5121512db983672342dd2945f5666389f4fcef37d61022005b9a0d5ffd84e309ac186e91ceab6c5ffdb10afbde94f2c7fa904a1c241204901",
      "privkey": "60f77c61b9fc3e3fdfbafb33a97d5da172c7223db73a22e8c19d8aee8e6bf8dd"
    },
    {
      "msg": "e672cf35e5b186843607321255beb9a626e9b16582ffe6cba68251cfa2d26edd",
      "sig": "304402207a84304fa4d6521840d6e1b9582602a12574c1dba1f7088221748d08839e6101022076773ff0fb876865a3318f939e0f07721034e6886f6a9afe9546543df238e59401",
      "privkey": "64e7e1a9a9e7b80cb5dae781b9d4060ac5129a2bb254076bc1bf1b3b5d0b6068"
    },
    {
      "msg": "7972a81012267be81555aac3644b4d6aac91061717ed33552b3cbbb5825151e4",
      "sig": "3045022100f67a1f761743f7abf3ba3e0f0097e93579fc45cdba95476e5f5b9d8155ebc11402202984c12e518f5a6b3c59e248bf2660f9b4313f6030cf0b10a5bde3125aca1aad01",
      "privkey": "af681d1431a137ca2ccfd9456123af2a50901826985d1b4d46ac33fe7439a0d6"
    },
    {
      "msg": "2884813390313e6832156ad2b86050d04dbfc3a810c1adb38a4ccfc3031db3e9",
      "sig": "30450221009fc5d7058df747afb88e47dd18a9d8d73949b1af1ac4a7f4324b7e6d5ff499b602206e353305f58dfb727062bafd7dfe797c9f3071230f3780f5875d331bd99fbe5301",
      "privkey": "c6904733a3f4a8786d04eb725ac9d7814ec66c667ee7f56d7e9c1d39c7a06d0a"
    },
    {
      "msg": "17dd2ab0e67376ec6dcfccaed832a5a154710034818a78498b2987a9453d61a5",
      "sig": "3045022100d2c15d6611c1bde642076edf2b89fa2e1062c99c866935d4b7eca979a0ea63a10220624da519888c2316c265b554281b327d471eb98cf8c3fb72a7c7dbee22553edc01",
      "privkey": "493a3a53de5389e4c75092732be209d2716b93795add2210f6a1460c92fe238f"
    },
    {
      "msg": "bf0bfaa0d35c77239d0c98b900c5dc4efdca9a83eaa0c1fc4c7a8d50c5136384",
      "sig": "3044022032f05dc70f0b08a5b586732f377928ae5edaddf7d58d3cabf0e262d768db47cf02206faf588d1682554be1773f11fc52b0101aaad3acdedddce71ceb2cd4d0ed46f801",
      "privkey": "649306bf872e1626d8531d655a38e4ed7c455af514dc9a90dd1bc434223a2e70"
    },
    {
      "msg": "eb73158bcf51a0d754baaf7e68c20c385185644acb701cf9d54fd41487f83709",
      "sig": "3045022100beec086b0341c966e02014c7576b7d0d0ae007489bdece567fa64de4b810a09902203cbc3e4f414f766c4653c53f52272ab2b87c88d49d8be05bd2810bf67f4a9f0f01",
      "privkey": "0548d0c8d32215ac696d32ae2f28c785d86d68433345fd83e6101b7bdbcd7199"
    },
    {
      "msg": "8558f4a0e8714bb6fe788d0a0c1e4bf5622eee75a163118dd312dd0bf12bc971",
      "sig": "304502210093fb277d192b50368665826384f3f537917b4ab9122e3826c9039e45871fab380220745c193fa30a2a582be64072a71f8476e1ec8ee374424689f0656b24fb1c002d01",
      "privkey": "303b41d5ba88eab108428fcdacb335ea96929989372069ae4cd27e692ffb3955"
    },
    {
      "msg": "727402055ed837f5eaf1329ac81082929aee22abe2246c6dcb483ee8c31b580a",
      "sig": "30440220181a4a02b57b3223808dbde211d2cbb502f9d66c31975ae9f94cea26dddd5e0602204e6eaa65344ea524c207429647a27fefb4eb967c403c080e46877f61d22eb4fc01",
      "privkey": "982e3cae8f991b965b44541243e2e9de3122c8faf05718ea7fa5ef00b4098220"
    },
    {
      "msg": "29a4c44b4d8a4d920fec9368f0dfbde2d245eeab89016af90e7019ef6e020f91",
      "sig": "3044022038abb43bc0a1f4bda4d0dcd9e13d983a24e8c4b299dca06d61459fc56edb39fb02207fd3e3e37fa318907ee41222ec7cd4ce085b35c64dec1d8c6b61424306db50e601",
      "privkey": "fc85d8dd8c854dbf7ec922c6124c654aebb61263b0572ff922beb523a743654f"
    },
    {
      "msg": "6f15ebe59374436bd4d6b1ddc7a2a016679ad682f077a8a096db0ac0f159229e",
      "sig": "3045022100aa23abb03621b4834084e2372c8aa571b125a4e897d7a8b3690890e7cae22f08022021a5534de67162c0e02f946f49f72ea1cabc753395b80cbbfec117c2b253cc0f01",
      "privkey": "c5fbec66e7c8b8d37e3dc65aec3ce66321983e87a7f48022e6d67f23f133fd2b"
    },
    {
      "msg": "08854040e59a06d8fa647274c751e69980a53045c7e10dac29e6c1f2293f8096",
      "sig": "3045022100fafb9d2b34ae5a6efba997e865c34ac02402bdd1eacd4e51859e35ed16f73832022044bf0182a26d15905c672bae0dfb1ddd21264795947b591507f786541faba37301",
      "privkey": "86410a06d6053dd75d05ab51e3a08608018bb7d70c14199ecbf0167cf459a3cc"
    },
    {
      "msg": "66d7220679b951b05ceee33cafa9490de8669514790200a5f86409722ffd5a23",
      "sig": "3045022100cfad593cc4e424ccc6b7dcc8d576eb34d837ff3862ced984e61b3c0031ea11b4022034dc395f1c4cf1d84f074f45e4583ad15b94ebd74366f138d6b3228ac1cc1a2901",
      "privkey": "148d9ae3cd5de9347b0ef76dd49022c416e05cab1d3e9f91de0bffabd9728aa3"
    },
    {
      "msg": "16d5f60b487f97c54ca4931e1804ff5e7f31b1a7546b90a515780b6aae66c67b",
      "sig": "304402202eaa80e56f1fb665cb995bf12e4ad161e275c59a13930a78a1c8b990b2b40711022070603f86e4dbc0b89bfe02aa941bc901a2de2d880253f641c83c0fd6e59988ea01",
      "privkey": "00b1ecd81941a3fbafe4420b9e96c36f40cb5067ccd0c128dcb40c4f9d508e68"
    },
    {
      "msg": "efe532630bef5f6404ab56e4329a08800c5f2ee06743b58c5c69bf47e78b27a5",
      "sig": "30450221008807c44f387e9db50eea548928c1129308cf501f3bbe3fc1a4cabc400e57ab64022062d127baac5aa2d1fe08404b7ce8984a8fe1bdef50efd41eac5ee28b3d0e5ff301",
      "privkey": "fb2ea5631dbc89764f2f592de36f1e087a313461f44c70fb231b0ef7928143c1"
    },
    {
      "msg": "02ceba7e7cfa451c9af56995c36f77252b3ec4a653bbc41ac94ea2751e8e7a07",
      "sig": "304402200b028943013a0fdd47eba1117b89bc838a269ab923ffb3adfb125fdf971c7737022050f416497dc081b223c50349fea72a4cfec33c588474ea6dc9d7823076de856901",
      "privkey": "35ce2144bc6e3fd449cc57516f2e0f63a9878a592ed1b6cce21c3de85d98d3af"
    },
    {
      "msg": "038decd7e8ecf898206c4af77fc8a6342d5b543a60f121685715319a6de3d947",
      "sig": "304402201046959b39f101a68880dcd8958cd2908d228bc115988691d1cbc3f7bf5090a702202c2a82c6504ac301223d33608f7e9314825355b4e0907e6d7a965d8a90b14f5c01",
      "privkey": "d71f018138fa752798132a8393f81f32c474bd60cecda2aa1baeb5a4b00e86e4"
    },
    {
      "msg": "517398a39596dea9899429688afe62c49ff2265f177b32ea452fab47ac57928e",
      "sig": "3044022041c9adb3aa577da5f6a4ec2237bc7ade73b0f1db122a4ed3152fd53723067dd10220774bf2d35837da21ad6073330449ef969b3f28d1cf3ed8e35664e75d0257855b01",
      "privkey": "533b93438ceccd4d12401e86b6810200211dcdeefec130410fd978814a8e76ac"
    },
    {
      "msg": "eb18410a53353de79a56a86f95ed94f7cc8efb20c7662f6acd1d0cb46dec6729",
      "sig": "304402203beff0b6d06157a96bd48d84b70b2c8d5e4be1e60c358db05bab94c7b03685fb02205a3c07368ad539c0edff9ffc35f4d44cab663fbb3cb03f8e466929b5c9efd5c401",
      "privkey": "5d006eeabbadd13ffcac0944381081f6f0dd7b3564fa5e9e0c0b2c8418d1ca52"
    },
    {
      "msg": "c886d6c0d4e62bd8c65c1d3319b32a82dcc4fb5780896c287f3bfac415a768ed",
      "sig": "3044022068541ffbaab7dfdc9dd0d2a8e0d8d3a7e1acae685bceac3f1a0a19b61bdb9bf20220544d24dad0c195d0d57d2dbac2d22b328eb118da055f0e741b4346931a66de1c01",
      "privkey": "c0d837694699e53ed82bf4fedfe7e8cf70dc02dbcad884c3b822b3ef6ddc5a19"
    },
    {
      "msg": "826f8c6ab61ed5928a1d6d9cd6d69082ec9f9e45c4e73f2121bf061ca1d88a87",
      "sig": "3045022100e1d3b83cf96d324fb9bf2ac9096c70758799bf330104edcbf6c16ba672e8968d02206a9a826cf32840db5f2ddf887e819eb8f41d14e8be2e94aa0e7f064d96a4d21701",
      "privkey": "3f523b03447d06bfa64fc78db115c7e5828739f38ba39663095309ae6051c092"
    },
    {
      "msg": "da71ad31c818c04ce018937d33a2428be6d4199af6e24f01b83f26212e3cb186",
      "sig": "3044022000a0856075820b29361a83fb332c190048ad5f4a81f9b993765e5c76b6de462302200433ebf787caebb7d549fc93636e7e79b347a97fd56826f75adb69af01654efe01",
      "privkey": "c235de75530efcf7c8bf08e3b3b69c13d5a306364172617f61c20d2d02d4b768"
    },
    {
      "msg": "de8f24d7924433bb1868e48a92aa49020c464140c1c69d36f8268b38798b1171",
      "sig": "3045022100fbcc16baf92400595a5df863680c76388ff152e4e6ca3efb26d041f6126b51db022069c8c6ba124306ac55a3f5b5b95988fc45166aced7265d9fffdec77113cf572201",
      "privkey": "231913cd2deed9aa0483d2a23719d9dc7a9354518ce5eea88f4d2de219891888"
    },
    {
      "msg": "3f87a3f5199d729f5683d90b1977e1403afab944a8a107abe8aeab1c2bbc4710",
      "sig": "304402200e816369dc132b4331713cc481258cbe9a4526a767aeed50dd9c00d3cd5f321602200a592715b5538fe25713a179334dc0e275b710f74f16e11c599b79d397f1d01e01",
      "privkey": "5b274ede3c80bcee4d5c1cf02f5b9f76adb95667a0369418370aa81530c28064"
    },
    {
      "msg": "12bb4666adc2cede1826b582085caed6fb64438a5462f74010eea04b4f2fb5fb",
      "sig": "30450221008258561ae898aa8e689b6a8a878704020d1025d7ae835985eaac27a555996627022006bdaec9eaea8dc2eefcd197e1a10828e26f9114c394d1f2d161cfcc7e3d1cd401",
      "privkey": "4fc83d5a7155af0810791a6db59e307295f0897682a1a6b958fd699f3ef9cb53"
    },
    {
      "msg": "1ac99db7e7ef6ee4af2016dd0c71b2a6d2995c1a2029c13959ddea0a4af1e839",
      "sig": "30440220110722d507a7da0dc7a520ce7efe0e1fb42790c00ee8d565e0c7c8c4292cbcea0220267ae97ea9a2b1ef08239553cef818f625ed1e3e87ef766e8b6063f21a9daf9901",
      "privkey": "f1fcd239bad3e3ef1483e10f3753283b88df5b8603f9bab20d66e00e81cef441"
    },
    {
      "msg": "b5d1b36d95311a86e450f507a0dea0805eaefb68c89f222d8a3d4761e5619b9d",
      "sig": "3044022053a91f2c657aed63d265aa6249b3c0db90844210d828980b6ddf885b4e98b0840220325ba1809427c15527da92751f4fbe6e56230533ad7afccd91a244ff7c25ecb901",
      "privkey": "ae74253a454718f1c08b4bc3b9673e2b084b1cd0b4c3bbc324da8329d5bced7c"
    },
    {
      "msg": "fb710ffc70334a93c4052be5e229875f55aa3f3067e6c493d53f115e39ba387a",
      "sig": "304502210099b8afbdecefb8e2b5a3e2acdb7fb28da7d7f24c6ed6eb88e43c423b67954ebf022050050a3e69fbdfa91fa16d9ad669720c65b2fabe7e011ecab9336e92d18be19401",
      "privkey": "40e53957385d806936ffba31637c7bcbc353616d896b6cda0e20d56e16baabaa"
    },
    {
      "msg": "b27b1bbaf48f7d3c38ce061542054b2fb19cce7a40a779253ece58169caa6efb",
      "sig": "30450221009fccc94220c12ef508bfbe9a0d1a592875272e4213bdb78baa290d5a01054b1a02204101988977098b835b4b1ceff4e6af9925a92b7f879718a60340083679bbb63401",
      "privkey": "67ff6b87850ab1fc1f8f7c0ddc606610fedd027e926fbed60f280abd2972a440"
    },
    {
      "msg": "433955be0f609ee6685e49229652c1311b6141f4b85a4f018e2f9b2ac49a4b54",
      "sig": "304402202ccf1a22e503d11bad88fb90da3a5b3547397de3f125b86334ead3497fcd1ca302207065bdd03323de65b784384926fb26f637094774837b8368f59a191cf50b6f9101",
      "privkey": "7befa50da27667bc46825f960dec45e461940da6a2267d8da6ce4b04bf4888c4"
    },
    {
      "msg": "577650e585efa3b2c2aa04f5c561306524178f0643c9208ec7034923a6949492",
      "sig": "30450221008b75fcfac6277b160a555bbbb2dcb477c2509967946edfb0106f8d142fa1543c0220442de5a96c7e8f670398164a4380b97f8066304c62f5f7fef8b86e05941e94d301",
      "privkey": "8cfe9d574c49070e41fc473352c4029547bba2299a2a61770fedb87d32de2edd"
    },
    {
      "msg": "a2fc75d302dadb11fc4bce7bafeb90406b9a367e368d0cb7a885e0b96d695fa6",
      "sig": "30450221009ab4c7be6d7bebfbb9bdafa5abd628c8874b56872d77d04171209e692128b7ba022048f66d9206126e8a2a48a8cacb44dc7a6a660d04998b3f6d07d88481e4f230b301",
      "privkey": "a1ab7d29541f45b96ccb881522f7dd45901765ac1160ebbabc50e2947b8853ef"
    },
    {
      "msg": "9acd7c5fedc120d69095eb7ce77684aae974cf7b48cfc806baece4dd812d560a",
      "sig": "3045022100e8fb2e2817d7f481e059ccee51e8449f550f1488634ac012811aece52e5e23d502203d8d06125a037af6e32c0a0cd7032dbc12c7ca84f5d3952afb58857685c68fad01",
      "privkey": "e2bccf63d91102cd90d519b18463ecdf41378c9f9b0e1d5a1ed58a837be11afa"
    },
    {
      "msg": "23ecbc3ed373e19e84d3d8e6420613d6e759b3e5d606e6ba9700234beaa7ae8d",
      "sig": "3044022013b03a0a39a56f9241b21ee74acf83d93b5b6a81bcf254f7558648e686fc300e022065a5999b37b2fd7294f853b5c312cbf62c12a1db58f0d95041e7b7dd157cce7f01",
      "privkey": "61dc64fb0590b9615bd5f381b0a301316857dd32f0b214c2e814f35e5fe956f2"
    },
    {
      "msg": "aea4c1124be7afa6c25af9f542b79997370ff6cd870e185a20c7be78c9c24b84",
      "sig": "3045022100adac0cbb49e7d492b9f877a5f842860e0cbbce99fb4592558dee58f8e3cc44a4022074caa58d7edf18f2ed5c436930a5b8dd3a48a6024aa2c038b2f56c1187ab28b201",
      "privkey": "0b31aea8e0af9a18f02e9cd4e06530e9ec9c4cab1e6a3bd52fdca5183617fc66"
    },
    {
      "msg": "f793e37b0dc14ffae24d6e5a3477aaf23cc3bba1ca939ccd0c4a4bc3f1943e68",
      "sig": "304402200096eeb7256f916c256ae3884df5416bfac00143bcfb46a501cc0eee45ee432602200ba266f42639556de6a0f7c9f0bc2ee14d80cc035965c7fad9bd57c04826684601",
      "privkey": "3fe28fcb15f00c93c5d628b4ae942beb2fb73e5f2c28f05dfd98998824c115c9"
    },
    {
      "msg": "85e774c6574ca6ae8f30af0ba108bbc487835a6ab9b9d7e00d17f1e710b3bde1",
      "sig": "3045022100bb5a0cfb531d6bf5b817c1f6a17db02e7b592111a2a572a6ee4bf31e9de1ccd402202afab1acafd825fb8a51d801cb20564c67fa42a33afa5d7526f0d9f57535b5da01",
      "privkey": "3902f9706403006e3fbc35d12b06fc78670509aa50b552544d708ab5dc5f5b79"
    },
    {
      "msg": "671db247e553158156e7c670136e9fd299a9d1fc33c394ee593752b0a1cc1f03",
      "sig": "304402206d9f228584074ab3eafccffe240a1fbb448e8125836461da7423def37313aa1802205d076e6066caab751e95323be6761215e2fc5b69f2c9392b571e66a8f12ce2cb01",
      "privkey": "2bc7499a1da26f836ed93be9834f9cfef1120e9512f3bc90c6d57c3ce366c58d"
    },
    {
      "msg": "d069674f48c2038bbb0dadcb18a9b18795eb71cc16cb34e91b4cbca86aec61d2",
      "sig": "3045022100d1260fdebd27eed66d577b77a1f299cc42ac137227aa7730e2035077b71161da02204a8522a2f2eb8cc78e7ea11ad56f463f7d8f08c6e4e9a7db0cec3ad6779ff38d01",
      "privkey": "0fc62bc36495f5f9b0d23145d0ee1983c29f822c7c60e22239959c13acec8da9"
    },
    {
      "msg": "e9a4c69779c44c72858e580297452f3ed488849a0cf204d75de42e591844f008",
      "sig": "3045022100849c6e7b4d66ac63540a2784620c43ac1b558f7a1432237965949be3624af1d10220674f15f7779e4f0677f4c4cf66f85a5f7ca6a8b966f17c05ac1dd38e4664f0d801",
      "privkey": "1229ade4f8919c0e61a5221c6cc37e7a2da7dcfc22eaf6d58b8e995d38a830c0"
    },
    {
      "msg": "183b7c41bb27526528ba72277a92ff7d39241539f6616f024e4389e76696db65",
      "sig": "3045022100ba80e06c2a798b0dc206eb44b99703a31536ccc930eb0500a043f241aec21d1702200ce955a1627c9a073f8f49072afd5aa289e544bc90e5983b093c06c5c67e51a201",
      "privkey": "08ece7a61cc766fee43dce42570d418d7509d63cc293a15e2292bef473e5c49a"
    },
    {
      "msg": "a119183cedb4d2385c204482f6f6aad863947f4dc336810a2cd494d73a7d63e6",
      "sig": "3045022100bd8fe449160c9ec8029bb6f554f225fa985db131e2a7f56cda04d48d7133f8c10220060a2e95874ffddee22ce3e1a47bf15360922c73fb7c2a9ffe267447bbbd24d301",
      "privkey": "70ea418b73f35a4d5fa241c97661be9e88d4e773478fc9ad59602e0d18d7499b"
    },
    {
      "msg": "e53804e86688bfb3e2d7a72d9a07d0b76c8d043472a70375f04bc26e5175d380",
      "sig": "3044022076927896b56154a8eec11decbe729aa0a2543979cb388ceee3570b35e511e1ff0220730367ce5443b1522e61d990b5f0fe7c3e14d62fecf141d189da51285a65938e01",
      "privkey": "4d2da431e0b77707cf388cc9d44f067d3fb82a3e544a436c2c94abfd0bd1a8eb"
    },
    {
      "msg": "c0a7969a9bd9689925f5b801e3937772fce4c20a238acf58e6baa4ddd68f958e",
      "sig": "30440220700c5e64229194d774b222c34e436673c69aa8f1c9a18865895c05fccd02bf3a0220384b60122c477d03bc5ecfae58908dfc195dd94f09ae7e2eb18e14d54314982901",
      "privkey": "7253a7b52381bce33b2502dd8026c6c242f66d75dbef89c6e47e8983a373941e"
    },
    {
      "msg": "d767a2f44d17543cb9833a4f5aa792f12064bcb1b7882feedd014cb9aeaba94c",
      "sig": "3045022100d6cbcf05a476a5e05b92acf93c2ed41c97af666fc03f9a45e797af67f6f6eaf302202485861dd6538828e6ef0fe17f4e41c25053f4a2f28b017e181c0f364b44867f01",
      "privkey": "90fb55d3cd1b87138b2983581f5f65efd7dc444c06438f492621e99311840805"
    },
    {
      "msg": "47d6db6d8e2a9aae31ade5ae2b1ae6ed17c25b7b74be25fbb6ea590046cf2d97",
      "sig": "3044022054d1dd346604659a1ae9905a375f52124c066938bdd19200aa6598fe3cda676202202671b0da6d94702269909d2481347c328d789d052ff43b6821686fa65117627101",
      "privkey": "cdcf9bb9730b0b88669876bc0692393a5dabaa75f78ca68372098a81374dee4e"
    },
    {
      "msg": "3e54cafef15a961d757071aee94b690280aad8201af7582aa81fafb64b748527",
      "sig": "304402200e9cd509a33cc07318ac8e8c61c6e35a4825361bf255b47996ac6a6c45252a98022071092aee8df6e329303b5483c2e8fc6292b51df5e48ebef6548f043c11ad298201",
      "privkey": "3b829c6c16002db5ba3323ac1ca6745cd1f6d1f67eb9c8f5f11b48df08d3fa75"
    },
    {
      "msg": "ff7482425542c945e2b83931583e2f516682dd24b2bac632ce00b0bf95f3764a",
      "sig": "304402204ac0df04b0b83d87938c7d9591095acdcb6e0c6edaeb99a0ea40a1951f77470102201a40cd8a308c3a752cfb8c3741d6fec79b410a6bc4a3c64c4c377ea5b9bfddbe01",
      "privkey": "1c1d11ed9739251c3e065db25ac10fd6413a54d8f9e553be3c67f4eb86bbdb08"
    },
    {
      "msg": "b5c1a15c2c219f845d5253f64947d49f94519a57aa484b6005517e0a8f933a58",
      "sig": "3045022100c17a386ef1263ce5c1816e17504ccf8cbcdaf5f09ba00f141099c990ce2cc30002201d64bf0ad8da6d1b3fa02191145c19a94fb1011865933c2a8aaec4728fa5e06501",
      "privkey": "df972b1d45f99fd4dbcb5e7354d6292b56b4a0f25f6432f9e1d7a318eecb2120"
    },
    {
      "msg": "bd15aac26ece339e81248e364dcc66dcbaadd6bac3f94047d161f0e71f44758c",
      "sig": "30440220035a4c4bb28381cb4ed4f6f5714cb34bab019339299212fcc86ae90f83725ea502204f63ae13c03dc80e320b4274f9bd403f4966fde7c89c21328264a6305ee8c42701",
      "privkey": "66eaec33187b285b3c604973aaacab3ae8d383a075dfd996c4cc3ac4cd16d0fd"
    },
    {
      "msg": "85fc198a649ee134d2116a2e0b189faf1a4d15c3afbb182033032f9ac322e1bd",
      "sig": "3045022100aa128e5391a4bec3181d4a2127bd45fb38bc142993c967af8d7de33e90e3c03e022034eef4d80133c0002671027d55a1e10eaa12cd7e24f62d037077d1dd0e90775801",
      "privkey": "5a6331ff79f2930f95df8a4747cdf56b0475eeae453af8da9257982f68fe66f4"
    },
    {
      "msg": "8b66547716aee0c7bcce9bc93051bd2babbcefaaed51a94605506f6ab6492744",
      "sig": "3045022100bdadcc9d82b6bce0d4c453001e06481ba48b92ea2a8ed81b9186ceb247a6bb1e022005b30ff42cb05defa923dc09a9727eea67cbbaf1b5e5b561ea4d854b67e8208001",
      "privkey": "994f92698ef865cc782429f13e47040ece8b95a2d6dc30fd8c6a9188db655668"
    },
    {
      "msg": "54fe0067ad6b4c7f4314802d40ab01896237015a466439d35ae986d81a6e5dbf",
      "sig": "304402207b4f7d5bd15f520aabc9dabda7b8e73c660f10cca48c7e8ab5533a69137badc702204cd239932e7932d768bd65b55da2147ac527e61567f45bb14a953b0338211d3701",
      "privkey": "21664545b76332766ec8959baedc77b7c842379d4400ce7f5f30417e5a1760e1"
    },
    {
      "msg": "438bafa3b8dbead8b2eeac1b9fd6527b9510d56d5bc09a2ae2a51b67e64ea8a9",
      "sig": "30450221009d3fa71c0f2f7b015fff020316c81476930ed4d4f6fe3fdc348cae358d70206302202e2e69d6ca559ee5eea309b72c13bf22c643660e27cc7799d99bc807a28fbe3401",
      "privkey": "dba5a15df6ef7b060b7e9a4ee819a431bd2c3146430e5d90b15c8c7f34fc5d9f"
    },
    {
      "msg": "2560b38e6a265f413fd762a88c4c492d46270b007e18cc844feb1dc06429a110",
      "sig": "30440220361980512e7d7f6da1b37fb225c336801092d9ed05cf72b7723d7205de1b2baa02205cdf459c367d1f274b8067d008c533385c6c4330fd6376c4d330005312d4834b01",
      "privkey": "d384f6a007cadf556e10c1bb59eb3e1e7dd940aae5ec6d305b64a6dbbe73ff64"
    },
    {
      "msg": "bf1d36ee509e65f04d78be03e0fa0d5ceae29397a33d9efad93332cb47ba0155",
      "sig": "3045022100be83c754e4426893b698437baef7fe19329df4cd46f5cf05b33ed1090be2b4fa02202986f9ceb8ea9d2a30876b2a3e4c2e495d9716cc21c66018c91726955ea4b82201",
      "privkey": "7f2776e0a044ff802d622f6ac37637ae83b4e2d83dbbf83c681f3606c46a7a8e"
    },
    {
      "msg": "fb75554ed0cc5485d2559c29f6510b6ef60dacb5f17d81564d25a87e79ac826e",
      "sig": "304402207ab3815aae1a99a367489a31bf7a94661ee086e887641ebac2e455871994db3702204f6f8b7677bb30efb5c4602169f2541274b8f51e1938a2f84a828b9da0137ee201",
      "privkey": "4c6f22a57c553e05a0a7a35adf46e1cb4c4d004a984e5af88bb2d2188ba7ab88"
    },
    {
      "msg": "6d18019673f7a984b0a222b7299b35e61622681cad5161748040c5375c951505",
      "sig": "3044022034375c54a58c8562889c8e41f9c299f7f85704459f8d11f317dd52038ce7e29d02203e8a421f7f4d9d3dbad692dc81ce89ae060b734a01e9c048526ffb0eee908edb01",
      "privkey": "0c0b3289b2c6fc93986902fab4457f42d22b0b461c5e5a53a5ec727051586fa7"
    },
    {
      "msg": "7e1e2a99702c16bed9055d399af557c2a63da0a5083292adeb3897af6b802564",
      "sig": "3045022100c85073b669d65fa197cb73e4fc7a90c65b11cf195b8d718e998b22be071bd3c302207e7def3e6fe2e72aec48855ce06f9425c712fb874baa94484be96f9b9f472d3101",
      "privkey": "4d1c0ae59c723633336f8dcc6bde9b358f9b75603e45168e406807212252b112"
    },
    {
      "msg": "a33b04ec26e5cbc6558c43abeed149ae35391bcccef36b684d345ff13496ca9b",
      "sig": "3045022100f09854120ef83925f0a865aed3b256c5f0efef8f35f2bcf91384545d4ab6315e02205e9ff2aba9fe7270a73281f176d4675163a26b52e71819ac18f001cd5c93225401",
      "privkey": "b2eef7149d49c01b51ee926e926e2e26f73c25bbf74371c990617eef8b50ecfe"
    },
    {
      "msg": "fa01a5e23fa06dd60c852d89edeb778f94ce904182a8b9d8d1ca9fa6634f9662",
      "sig": "304402204cd469bb017d011fabb29cceb655148b0462c666dd940a2442176f4a02f5b02702207c64b92d62db3390facc8db753acbd05a9a1b63896ff4b27dbe47f256502bfad01",
      "privkey": "7a572657b960cbeef0c13fd97855fd61147e896093d160fdb1191fe2849bf8e1"
    },
    {
      "msg": "14a93f4e03431f95877f6dc9f41f59bc967686bc8401ae10527483e1cdcfebf0",
      "sig": "3045022100e502a90aa2908a903d45d5077d718812fd7341b551519f96fa7af94e66f39ef902201bef0e0b54a6fbc28e011d8ecefd0f33f6c7283cc2227ae7ae847b12b873e01001",
      "privkey": "d661888426cf1c65cba5f96ec26314b55f421cd447ced732809e32220f28c246"
    },
    {
      "msg": "b6ec194ce825fc8ebee69325abfa2acb952d45495ab351455122d4901d4f64bb",
      "sig": "304402205edce4c4ab58df2c58efeef2f12975a3a3ad38d6da9d4f18d76b086d5fc4d69d022074844f4cb83eae0aa01f409fbb27bccc32b44b0bca12b614831cfaea711edd9f01",
      "privkey": "27cdce4f1e5ffa46fbbfe615bc1d1599db6869404714f0cc46300901b767383a"
    },
    {
      "msg": "9b86e708eb9574a8c3ded5d3932a6de43ae4982dcbdca3269af14e967c639b7f",
      "sig": "30440220557f81e8f67ed361d2289aec02013731f75248350ecec55ac8dfb14418da68c202202598c35a9c0e062bc48d1ccb9494630a5daae324595be83c473fbaf2b3e7bdd201",
      "privkey": "8d6fa8a66bc4684b35d9eb3226d352c7300452dd9b3d548d7a2d947459bc5a0f"
    },
    {
      "msg": "170a2926a37a37dbe2e406e2d5a3923973bae98e82ab55e26864a1dcf1785da1",
      "sig": "3045022100fc7726b77976e58fd1f8a48c9232747edc40359eb1f6b393540608de72e2b4b5022005c22000c2c1c719c6f4f43ba81ba6ed4643a8645a34ec50619a4945849bd50a01",
      "privkey": "339699b552be47df9e751d7bbd53fa052d953738d851741e656bba90de4a53b5"
    },
    {
      "msg": "90de053a840eb83db882433d067a2451bfc81f58db606d4e411a6b8fd82c953a",
      "sig": "3045022100ae765968d1add07797a390b99ddb7faad3451e922a2e8f38adee56c654a3274902201f992b0f3605c54a6ae60d8604c7260b9a4db93be2512ad64937be4f0b3ad55501",
      "privkey": "8b0377d0b6e665a0c6072009b50044c6891cec9316bfac8fc9b6a5a34e4eabb1"
    },
    {
      "msg": "38d14fe6dd85bdb8748f5cb23e1fb2e58df2e8bf841f1e1c68bd4d20dc94cfc5",
      "sig": "30450221008e35cd8d034a2fc8234d9638f5baa6fe2bd96570df09b7b15ccd007f5c05a93e022041ae8101af3721d99668f87a743bad7bebfa3e0fbfb1a84d6e0f2e73e1d053a601",
      "privkey": "6e99a1772417ee7deb91d0e3762d2642d7278f2f7431a4f659da50d43af879b8"
    },
    {
      "msg": "00ed851dc354b6df5a3e3bab543ee399b02f3600c595aa3e5ca6a1483465b155",
      "sig": "3045022100deeb14e5b93035c0658f20aa05b87cb132609978bfa5ec008a3ca9502961244102205d0aef23a1f146edcda709137a5c5a376bb0f75abd031ba12128c4578ab93d8401",
      "privkey": "56580e7ac5163e4e6579ab0e772f2a3848a80af534588e70f230a18158953803"
    },
    {
      "msg": "4d46ab40f75ab52c1fd8a7974e06ff684c01bf3e746977e811a1a442bf2912fd",
      "sig": "3044022062aa9538861667b57609b750f7260df90373c01523b1341b7f841f3f53dafa0202200a3296141e23dec3292ae553a28c001efcdef18eca50ef09a0b4795b6d4b61b201",
      "privkey": "3d38b60f2a844fb43dea0262aac32301ead58568074ca9915c6498155cb47f13"
    },
    {
      "msg": "9dd253813dd4ea8902617a09cfdcf060dd062849b76f3c1e556500d13d77170f",
      "sig": "3045022100dccc41da7fdac14735bb98a2c59aae91d26284244f4cbc0beedb7851172a444a02206c5ac076f60a7f5243ef4e1630c51f411a03cdf57049d4b92a055ff90160ce8101",
      "privkey": "80ac1ff9b4219c1aea37fa937299dfa946e48d23c858d463eafa1bd8d986d9e8"
    },
    {
      "msg": "c783fcc63873a8b39563fd0d39ded5453d9c7737e32a0946bc62ce4f6a4773bc",
      "sig": "3045022100d782b60cca256c5b7918a62c3f6759588ed8bc3bad7b704dd8de3fe6e720a36802206d163563810897555f0a90c969d476f6c0452cc7a3027ab4ceaf8aafce1cb5a501",
      "privkey": "527f7b367a63d977568bd25593860ae36bc3ba4b65f43b121f1af776c995d224"
    },
    {
      "msg": "4519ef8ca61e50159ee43d921a679ca78ab70784167ebe656112c2017f1e2a8e",
      "sig": "3045022100dd23d3fee7e8fc4bac8c82378aee98fd7d3efa9140f18c1949b83f13654a7f8202201aabe8f08204e36e414d2a1cc42d76a7ba46bc3e4907dddae30944f14107b17a01",
      "privkey": "e13d124062e954974d5e5918bf1409a7a5d1d20ad4f4217006e2d5612a255da3"
    },
    {
      "msg": "a3a2d23da4f1a6c4031879ba02e11952bd05209863f90907606615edc6dce871",
      "sig": "3045022100983403797071adeae9cf36b3541580903d4fe20bbc29d7c85da3d5e86ebfbac202202b1cbdefdfa24e3c53b066b5bba6491f4117ab2b378c04552a4c1297d397670a01",
      "privkey": "1f25a034e5df2a5ae72f91d63be72497c3a1df79300ce195ee73e4cfeeda37a6"
    },
    {
      "msg": "0b34440573c1ea6ea03e4b5500307948698f229b5a1315f81a5c622fdf660ddf",
      "sig": "3045022100a5a3d9ffc866c3a747ad2a015f306d8a6c98540c7622f2bd0409e7a909924a7402201d0606df93f8f423fc5559623a829ae81632c6205af9a69e86965b1aafe9f7f101",
      "privkey": "2dfc3b63b1c8f04643f550281371a846a1d31fa651fb861f7e6ae9db88122041"
    },
    {
      "msg": "88dde95676e529d3bd4422e8a50d106a4bbd465e8623b37d09228ff66c9dd275",
      "sig": "30440220411a5d0613c89a246f08d1cf3db4b5d94b3c7de70a2464a0c6b930bd179db38702206253cc6df480e8fcc3716aa2e2c3cd10990fa73c6f2347e8aa7a499528ef2dec01",
      "privkey": "d2f35b4f8e5f9db7e884ab4bcb64f84dc4d87a8d4b9055995df62b759e7ba4aa"
    },
    {
      "msg": "3617b55b4aed94d2fddf0f96f9c8c9f4359f948a2b902b76f0d9474a9e549710",
      "sig": "3045022100ae0f294fbc13c28259019d000a9a9817173febfb37fb0a273511add46af4226102202d2a8b8b0e058179a0baf190dc76f649075a8d3ab3832d3be859159cbe1a9ae701",
      "privkey": "66dc7feb6d7c733005c5d8716b22f38819738bd1538a40f46205f3f3be191efc"
    }
  ],
  "signRecoverableFixtures": [
    {
      "msg": "95e919c41e1ae7593730097e9bb1185787b046ae9f47b4a10ff4e22f9c3e3eab",
      "sig": "1e94db61cff452639cf7dd991cf0c856923dcf74af24b6f575b91479ad2c8ef40769812d1cf1fd1a15d2f6cb9ef3d91260ef27e65e1f9be399887e9a5447786301",
      "privKey": "e79f3207ea4980b7fed79956d5934249ceac4751a4fae01a0f7c4a96884bc4e3"
    }
  ]
}


================================================
File: packages/branch/src/__test__/utils/epochs/fixtures.json
================================================
{
  "serializeEpoch": {
    "should pass": {
      "params": [
        {
          "length": "0x3e8",
          "index": "0x10",
          "number": "0x200"
        }
      ],
      "expected": "0x2003e80010000200"
    },
    "should throw an error when length is invalid": {
      "params": [
        {
          "length": "3e8",
          "index": "0x10",
          "number": "0x200"
        }
      ],
      "exception": "3e8 is an invalid hex string"
    },
    "should throw an error when index is invalid": {
      "params": [
        {
          "length": "0x3e8",
          "index": "10",
          "number": "0x200"
        }
      ],
      "exception": "10 is an invalid hex string"
    },
    "should throw an error when number is invalid": {
      "params": [
        {
          "length": "0x3e8",
          "index": "0x10",
          "number": "200"
        }
      ],
      "exception": "200 is an invalid hex string"
    }
  },
  "parseEpoch": {
    "should pass": {
      "params": ["0x1e00017000090"],
      "expected": {
        "length": "0x1e0",
        "index": "0x17",
        "number": "0x90"
      }
    }
  }
}


================================================
File: packages/branch/src/__test__/utils/epochs/index.test.js
================================================
const { serializeEpoch, parseEpoch } = require('../../../../dist')
const fixtures = require('./fixtures.json')

describe('Test epochs', () => {
  describe('serialize epoch', () => {
    const fixtureTable = Object.entries(fixtures.serializeEpoch).map(([title, { params, expected, exception }]) => [
      title,
      params,
      expected,
      exception,
    ])

    test.each(fixtureTable)(`%s`, (_title, params, expected, exception) => {
      expect.assertions(1)
      try {
        const actual = serializeEpoch(...params)
        expect(actual).toEqual(expected)
      } catch (err) {
        expect(err).toEqual(new Error(exception))
      }
    })
  })

  describe('parse epoch', () => {
    const fixtureTable = Object.entries(fixtures.parseEpoch).map(([title, { params, expected, exception }]) => [
      title,
      params,
      expected,
      exception,
    ])

    test.each(fixtureTable)(`%s`, (_title, params, expected, exception) => {
      expect.assertions(1)
      try {
        const actual = parseEpoch(...params)
        expect(actual).toEqual(expected)
      } catch (err) {
        expect(err).toEqual(new Error(exception))
      }
    })
  })

})


================================================
File: packages/branch/src/__test__/utils/serialization/basic/fixtures.json
================================================
{
  "serializeArray": {
    "basic array in hex string": {
      "array": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
      "expected": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88"
    },
    "basic array in bytes": {
      "array": [
        104, 213, 67, 138, 201, 82, 210, 245, 132, 171, 248, 121, 82, 121, 70, 165, 55, 232, 44, 127, 60, 28, 191, 109,
        142, 191, 151, 103, 67, 125, 142, 136
      ],
      "expected": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88"
    },
    "invalid array should throw an error": {
      "exception": "The array to be serialized should by type of string or bytes"
    },
    "hex string without 0x should throw an error": {
      "array": "ffffff",
      "exception": "Hex string ffffff should start with 0x"
    }
  },
  "serializeStruct": {
    "basic struct": {
      "struct": [
        ["f1", "0xab"],
        ["f2", "0x030201"]
      ],
      "expected": "0xab030201"
    },
    "invalid struct": {
      "struct": [
        ["f1", "ab"],
        ["f2", "0x030201"]
      ],
      "exception": "Hex string ab should start with 0x"
    }
  },
  "serializeFixVec": {
    "empty vector": {
      "fixvec": [],
      "expected": "0x00000000"
    },
    "hex string in vector": {
      "fixvec": ["0x12"],
      "expected": "0x0100000012"
    },
    "bytes in vector": {
      "fixvec": [[18]],
      "expected": "0x0100000012"
    },
    "vector in hex string": {
      "fixvec": "0x1234567890abcdef",
      "expected": "0x080000001234567890abcdef"
    },
    "invalid vector": {
      "exception": "The fixed vector to be serialized should be a string or an array of bytes"
    }
  },
  "serializeDynVec": {
    "empty vector": {
      "dynvec": [],
      "expected": "0x04000000"
    },
    "vector has one item": {
      "dynvec": ["0x020000001234"],
      "expected": "0x0e00000008000000020000001234"
    },
    "vector has multiple items": {
      "dynvec": ["0x020000001234", "0x00000000", "0x020000000567", "0x0100000089", "0x03000000abcdef"],
      "expected": "0x34000000180000001e00000022000000280000002d00000002000000123400000000020000000567010000008903000000abcdef"
    },
    "vector in invalid format should throw an error": {
      "exception": "The dynamic vector to be serialized should be an array of bytes"
    },
    "vector has invalid item should throw an error": {
      "dynvec": ["020000001234", "0x00000000", "0x020000000567", "0x0100000089", "0x03000000abcdef"],
      "exception": "Hex string 020000001234 should start with 0x"
    }
  },
  "serializeTable": {
    "basic table": {
      "table": [
        ["f1", "0xab"],
        ["f2", "0x030201"]
      ],
      "expected": "0x100000000c0000000d000000ab030201"
    },
    "table has invalid field should throw an error": {
      "table": [
        ["f1", "ab"],
        ["f2", "0x030201"]
      ],
      "exception": "Hex string ab should start with 0x"
    }
  },
  "serializeOption": {
    "empty string": {
      "option": "",
      "expected": "0x"
    },
    "empty option": {
      "option": "0x",
      "expected": "0x"
    },
    "basic option": {
      "option": "0x0c0000000800000000000000",
      "expected": "0x0c0000000800000000000000"
    }
  }
}


================================================
File: packages/branch/src/__test__/utils/serialization/basic/index.test.js
================================================
const {
  serializeArray,
  serializeStruct,
  serializeFixVec,
  serializeDynVec,
  serializeTable,
  serializeOption,
} = require('../../../../../dist')
const fixtures = require('./fixtures.json')

describe('Test General Serialization', () => {
  describe('Serialize Array', () => {
    const fixtureTable = Object.entries(fixtures.serializeArray).map(([title, { array, expected, exception }]) => [
      title,
      array,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, array, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeArray(array)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeArray(array)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Struct', () => {
    const fixtureTable = Object.entries(fixtures.serializeStruct).map(([title, { struct, expected, exception }]) => [
      title,
      new Map(struct),
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, struct, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeStruct(struct)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeStruct(struct)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Fixed Vector', () => {
    const fixtureTable = Object.entries(fixtures.serializeFixVec).map(([title, { fixvec, expected, exception }]) => [
      title,
      fixvec,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, fixvec, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeFixVec(fixvec)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeFixVec(fixvec)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Dynamic Vector', () => {
    const fixtureTable = Object.entries(fixtures.serializeDynVec).map(([title, { dynvec, expected, exception }]) => [
      title,
      dynvec,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, dynvec, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeDynVec(dynvec)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeDynVec(dynvec)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Table', () => {
    const fixtureTable = Object.entries(fixtures.serializeTable).map(([title, { table, expected, exception }]) => [
      title,
      new Map(table),
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, table, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeTable(table)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeTable(table)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Option', () => {
    const fixtureTable = Object.entries(fixtures.serializeOption).map(([title, { option, expected, exception }]) => [
      title,
      option,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, option, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeOption(option)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeOption(option)).toThrow(exception)
      }
    })
  })
})


================================================
File: packages/branch/src/__test__/utils/serialization/script/fixtures.json
================================================
{
  "serializeArgs": {
    "empty args": {
      "args": "",
      "expected": "0x00000000"
    },
    "basic args": {
      "args": "0x8536c9d5d908bd89fc70099e4284870708b6632356aad98734fcf43f6f71c304",
      "expected": "0x200000008536c9d5d908bd89fc70099e4284870708b6632356aad98734fcf43f6f71c304"
    },
    "args without 0x": {
      "args": "8536c9d5d908bd89fc70099e4284870708b6632356aad98734fcf43f6f71c304",
      "exception": "Hex string 8536c9d5d908bd89fc70099e4284870708b6632356aad98734fcf43f6f71c304 should start with 0x"
    }
  },
  "serializeCodeHash": {
    "basic code hash": {
      "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
      "expected": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88"
    }
  },
  "serializeHashType": {
    "type of data": {
      "hashType": "data",
      "expected": "0x00"
    },
    "type of type": {
      "hashType": "type",
      "expected": "0x01"
    },
    "neither data nor type should throw an error": {
      "hashType": "unknown",
      "exception": "Hash type must be either of 'data' or 'type'"
    }
  },
  "serializeScript": {
    "basic script": {
      "script": {
        "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
        "args": "0x3954acece65096bfa81258983ddb83915fc56bd8",
        "hashType": "type"
      },
      "expected": "0x4900000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e8801140000003954acece65096bfa81258983ddb83915fc56bd8"
    },
    "serialize ckb2023 script and the data is from lumos": {
      "script": {
        "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
        "args": "0xaabbccdd44332211",
        "hashType": "data2"
      },
      "expected": "0x3d0000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80408000000aabbccdd44332211"
    },
    "default args should be an empty arary": {
      "script": {
        "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
        "hashType": "type"
      },
      "expected": "0x3500000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e880100000000"
    },
    "undefined script should throw an error": {
      "script": null,
      "exception": "Script is required"
    }
  }
}


================================================
File: packages/branch/src/__test__/utils/serialization/script/index.test.js
================================================
const { serializeArgs, serializeCodeHash, serializeHashType, serializeScript } = require('../../../../../dist')
const fixtures = require('./fixtures.json')

describe('Test Script Serialization', () => {
  describe('Serialize Args', () => {
    const fixtureTable = Object.entries(fixtures.serializeArgs).map(([title, { args, expected, exception }]) => [
      title,
      args,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, args, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeArgs(args)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeArgs(args)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize CodeHash', () => {
    const fixtureTable = Object.entries(fixtures.serializeCodeHash).map(
      ([title, { codeHash, expected, exception }]) => [title, codeHash, expected, exception],
    )
    test.each(fixtureTable)('%s', (_title, codeHash, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeCodeHash(codeHash)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeCodeHash(codeHash)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize HashType', () => {
    const fixtureTable = Object.entries(fixtures.serializeHashType).map(
      ([title, { hashType, expected, exception }]) => [title, hashType, expected, exception],
    )
    test.each(fixtureTable)('%s', (_title, hashType, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeHashType(hashType)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeHashType(hashType)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Script', () => {
    const fixtureTable = Object.entries(fixtures.serializeScript).map(([title, { script, expected, exception }]) => [
      title,
      script,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, script, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeScript(script)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeScript(script)).toThrow(new Error(exception))
      }
    })
  })
})


================================================
File: packages/branch/src/__test__/utils/serialization/transaction/fixtures.json
================================================
{
  "serializeArgs": {
    "empty args": {
      "args": "0x",
      "expected": "0x"
    },
    "basic args": {
      "args": "0x2000000008000000140000003954acece65096bfa81258983ddb83915fc56bd8",
      "expected": "0x2000000008000000140000003954acece65096bfa81258983ddb83915fc56bd8"
    },
    "args without 0x": {
      "args": "2000000008000000140000003954acece65096bfa81258983ddb83915fc56bd8",
      "expected": "0x2000000008000000140000003954acece65096bfa81258983ddb83915fc56bd8"
    }
  },
  "serializeVersion": {
    "0x0": {
      "version": "0x0",
      "expected": "0x00000000"
    },
    "0x1": {
      "version": "0x1",
      "expected": "0x01000000"
    },
    "1": {
      "version": 1,
      "expected": "0x01000000"
    },
    "0xabcd": {
      "version": "0xabcd",
      "expected": "0xcdab0000"
    },
    "cannot converted to number": {
      "exception": "undefined should be type of string or bigint"
    },
    "hex string without 0x should throw an error": {
      "version": "1",
      "exception": "Hex string 1 should start with 0x"
    }
  },
  "serializeOutPoint": {
    "empty": {
      "outPoint": null,
      "expected": ""
    },
    "basic out point": {
      "outPoint": {
        "txHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "index": "0xffffffff"
      },
      "expected": "0x0000000000000000000000000000000000000000000000000000000000000000ffffffff"
    }
  },
  "serializeDepType": {
    "code": {
      "depType": "code",
      "expected": "0x00"
    },
    "dep group": {
      "depType": "depGroup",
      "expected": "0x01"
    },
    "neither code nor depGroup should throw an error": {
      "depType": "unknown type",
      "exception": "Dep type must be either of 'code' or 'depGroup'"
    }
  },
  "serializeCellDep": {
    "basic cell dep": {
      "cellDep": {
        "outPoint": {
          "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
          "index": "0x0"
        },
        "depType": "depGroup"
      },
      "expected": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b0000000001"
    }
  },
  "serializeCellDeps": {
    "basic cell deps": {
      "cellDeps": [
        {
          "outPoint": {
            "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
            "index": "0x0"
          },
          "depType": "depGroup"
        },
        {
          "outPoint": {
            "txHash": "0x0fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f60",
            "index": "0x2"
          },
          "depType": "code"
        }
      ],
      "expected": "0x02000000c12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b00000000010fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f600200000000"
    }
  },
  "serializeHeaderDeps": {
    "empty deps": {
      "headerDeps": [],
      "expected": "0x00000000"
    },
    "basic deps": {
      "headerDeps": [
        "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
        "0x0fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f60"
      ],
      "expected": "0x02000000c12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b0fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f60"
    }
  },
  "serializeInputs": {
    "basic inputs": {
      "inputs": [
        {
          "previousOutput": {
            "txHash": "0xca4b23ebeafde1b92fb0b848fc26e140c8e457b1ce2f7816da5b7bf9a07aa15f",
            "index": "0x0"
          },
          "since": "0x2003e8018c000168"
        }
      ],
      "expected": "0x010000006801008c01e80320ca4b23ebeafde1b92fb0b848fc26e140c8e457b1ce2f7816da5b7bf9a07aa15f00000000"
    }
  },
  "serializeOutput": {
    "basic output": {
      "output": {
        "capacity": "0x174876e800",
        "lock": {
          "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
          "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
          "hashType": "type"
        },
        "type": {
          "codeHash": "0xece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f6",
          "args": "0x",
          "hashType": "data"
        }
      },
      "expected": "0x9600000010000000180000006100000000e87648170000004900000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88011400000059a27ef3ba84f061517d13f42cf44ed02061006135000000100000003000000031000000ece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f60000000000"
    }
  },
  "serializeOutputs": {
    "basic outputs": {
      "outputs": [
        {
          "capacity": "0x174876e800",
          "lock": {
            "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
            "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0xece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f6",
            "args": "0x",
            "hashType": "data"
          }
        },
        {
          "capacity": "0x59e1416a5000",
          "lock": {
            "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
            "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
            "hashType": "type"
          },
          "type": null
        }
      ],
      "expected": "0x030100000c000000a20000009600000010000000180000006100000000e87648170000004900000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88011400000059a27ef3ba84f061517d13f42cf44ed02061006135000000100000003000000031000000ece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f600000000006100000010000000180000006100000000506a41e15900004900000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88011400000059a27ef3ba84f061517d13f42cf44ed020610061"
    }
  },
  "serializeOutputsData": {
    "basic outputs data": {
      "outputsData": ["0x", "0x"],
      "expected": "0x140000000c000000100000000000000000000000"
    }
  },
  "serializeWitnessArgs": {
    "empty args": {
      "args": {
        "lock": "",
        "inputType": "0x",
        "outputType": ""
      },
      "expected": "0x10000000100000001000000010000000"
    },
    "basic args": {
      "args": {
        "lock": "0x",
        "inputType": "0x10",
        "outputType": "0x20"
      },
      "expected": "0x1a00000010000000100000001500000001000000100100000020"
    }
  },
  "serializeWitnesses": {
    "empty witnesses": {
      "witnesses": [],
      "expected": "0x04000000"
    },
    "witnesses has multiple items": {
      "witnesses": ["0x10", "0x01"],
      "expected": "0x160000000c0000001100000001000000100100000001"
    },
    "witnesses has one item": {
      "witnesses": ["0x3954acece65096bfa81258983ddb83915fc56bd8"],
      "expected": "0x2000000008000000140000003954acece65096bfa81258983ddb83915fc56bd8"
    }
  },
  "serializeRawTransaction": {
    "basic raw transaction": {
      "rawTransaction": {
        "version": "0x0",
        "cellDeps": [
          {
            "outPoint": {
              "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
              "index": "0x0"
            },
            "depType": "depGroup"
          },
          {
            "outPoint": {
              "txHash": "0x0fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f60",
              "index": "0x2"
            },
            "depType": "code"
          }
        ],
        "headerDeps": [],
        "inputs": [
          {
            "previousOutput": {
              "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
              "index": "0x1"
            },
            "since": "0x0"
          }
        ],
        "outputs": [
          {
            "capacity": "0x174876e800",
            "lock": {
              "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
              "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
              "hashType": "type"
            },
            "type": {
              "codeHash": "0xece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f6",
              "args": "0x",
              "hashType": "data"
            }
          },
          {
            "capacity": "0x59e1416a5000",
            "lock": {
              "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
              "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
              "hashType": "type"
            },
            "type": null
          }
        ],
        "outputsData": ["0x", "0x"],
        "witnesses": [
          "0x82df73581bcd08cb9aa270128d15e79996229ce8ea9e4f985b49fbf36762c5c37936caf3ea3784ee326f60b8992924fcf496f9503c907982525a3436f01ab32900"
        ]
      },
      "expected": "0xb90100001c000000200000006e00000072000000a2000000a50100000000000002000000c12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b00000000010fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f6002000000000000000001000000000000000000000031f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc6501000000030100000c000000a20000009600000010000000180000006100000000e87648170000004900000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88011400000059a27ef3ba84f061517d13f42cf44ed02061006135000000100000003000000031000000ece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f600000000006100000010000000180000006100000000506a41e15900004900000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88011400000059a27ef3ba84f061517d13f42cf44ed020610061140000000c000000100000000000000000000000"
    }
  },
  "serializeTransaction": {
    "basic transaction": {
      "transaction": {
        "version": "0x0",
        "cellDeps": [
          {
            "outPoint": {
              "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
              "index": "0x0"
            },
            "depType": "depGroup"
          },
          {
            "outPoint": {
              "txHash": "0x0fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f60",
              "index": "0x2"
            },
            "depType": "code"
          }
        ],
        "headerDeps": [],
        "inputs": [
          {
            "previousOutput": {
              "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
              "index": "0x1"
            },
            "since": "0x0"
          }
        ],
        "outputs": [
          {
            "capacity": "0x174876e800",
            "lock": {
              "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
              "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
              "hashType": "type"
            },
            "type": {
              "codeHash": "0xece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f6",
              "args": "0x",
              "hashType": "data"
            }
          },
          {
            "capacity": "0x59e1416a5000",
            "lock": {
              "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
              "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
              "hashType": "type"
            },
            "type": null
          }
        ],
        "outputsData": ["0x", "0x"],
        "witnesses": [
          "0x82df73581bcd08cb9aa270128d15e79996229ce8ea9e4f985b49fbf36762c5c37936caf3ea3784ee326f60b8992924fcf496f9503c907982525a3436f01ab32900"
        ]
      },
      "expected": "0x120200000c000000c5010000b90100001c000000200000006e00000072000000a2000000a50100000000000002000000c12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b00000000010fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f6002000000000000000001000000000000000000000031f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc6501000000030100000c000000a20000009600000010000000180000006100000000e87648170000004900000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88011400000059a27ef3ba84f061517d13f42cf44ed02061006135000000100000003000000031000000ece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f600000000006100000010000000180000006100000000506a41e15900004900000010000000300000003100000068d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88011400000059a27ef3ba84f061517d13f42cf44ed020610061140000000c0000001000000000000000000000004d000000080000004100000082df73581bcd08cb9aa270128d15e79996229ce8ea9e4f985b49fbf36762c5c37936caf3ea3784ee326f60b8992924fcf496f9503c907982525a3436f01ab32900"
    },
    "transaction containing data1 lock script": {
      "transaction": {
        "version": "0x0",
        "cellDeps": [
          {
            "outPoint": {
              "txHash": "0xace5ea83c478bb866edf122ff862085789158f5cbff155b7bb5f13058555b708",
              "index": "0x0"
            },
            "depType": "depGroup"
          }
        ],
        "headerDeps": [],
        "inputs": [
          {
            "since": "0x0",
            "previousOutput": {
              "txHash": "0xa563884b3686078ec7e7677a5f86449b15cf2693f3c1241766c6996f206cc541",
              "index": "0x7"
            }
          }
        ],
        "outputs": [
          {
            "capacity": "0x2540be400",
            "lock": {
              "codeHash": "0x709f3fda12f561cfacf92273c57a98fede188a3f1a59b1f888d113f9cce08649",
              "hashType": "data",
              "args": "0xc8328aabcd9b9e8e64fbc566c4385c3bdeb219d7"
            },
            "type": null
          },
          {
            "capacity": "0x2540be400",
            "lock": {
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
              "args": "0xc8328aabcd9b9e8e64fbc566c4385c3bdeb219d7"
            },
            "type": null
          },
          {
            "capacity": "0x2540be400",
            "lock": {
              "codeHash": "0x709f3fda12f561cfacf92273c57a98fede188a3f1a59b1f888d113f9cce08649",
              "hashType": "data1",
              "args": "0xc8328aabcd9b9e8e64fbc566c4385c3bdeb219d7"
            },
            "type": null
          }
        ],
        "outputsData": ["0x", "0x", "0x"],
        "witnesses": [
          "0x550000001000000055000000550000004100000070b823564f7d1f814cc135ddd56fd8e8931b3a7040eaf1fb828adae29736a3cb0bc7f65021135b293d10a22da61fcc64f7cb660bf2c3276ad63630dad0b6099001"
        ]
      },
      "expected": "0x390200000c000000d8010000cc0100001c00000020000000490000004d0000007d000000b00100000000000001000000ace5ea83c478bb866edf122ff862085789158f5cbff155b7bb5f13058555b708000000000100000000010000000000000000000000a563884b3686078ec7e7677a5f86449b15cf2693f3c1241766c6996f206cc54107000000330100001000000071000000d20000006100000010000000180000006100000000e40b540200000049000000100000003000000031000000709f3fda12f561cfacf92273c57a98fede188a3f1a59b1f888d113f9cce086490014000000c8328aabcd9b9e8e64fbc566c4385c3bdeb219d76100000010000000180000006100000000e40b5402000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000c8328aabcd9b9e8e64fbc566c4385c3bdeb219d76100000010000000180000006100000000e40b540200000049000000100000003000000031000000709f3fda12f561cfacf92273c57a98fede188a3f1a59b1f888d113f9cce086490214000000c8328aabcd9b9e8e64fbc566c4385c3bdeb219d71c000000100000001400000018000000000000000000000000000000610000000800000055000000550000001000000055000000550000004100000070b823564f7d1f814cc135ddd56fd8e8931b3a7040eaf1fb828adae29736a3cb0bc7f65021135b293d10a22da61fcc64f7cb660bf2c3276ad63630dad0b6099001"
    }
  }
}


================================================
File: packages/branch/src/__test__/utils/serialization/transaction/index.test.js
================================================
const {
  serializeVersion,
  serializeOutPoint,
  serializeDepType,
  serializeCellDep,
  serializeCellDeps,
  serializeHeaderDeps,
  serializeInputs,
  serializeOutput,
  serializeOutputs,
  serializeOutputsData,
  serializeWitnessArgs,
  serializeWitnesses,
  serializeRawTransaction,
  serializeTransaction,
} = require('../../../../../dist')
const fixtures = require('./fixtures.json')

describe('Test Transaction Serialization', () => {
  describe('Serialize Version', () => {
    const fixtureTable = Object.entries(fixtures.serializeVersion).map(([title, { version, expected, exception }]) => [
      title,
      typeof version === 'number' ? BigInt(version) : version,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, version, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeVersion(version)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeVersion(version)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize OutPoint', () => {
    const fixtureTable = Object.entries(fixtures.serializeOutPoint).map(
      ([title, { outPoint, expected, exception }]) => [title, outPoint, expected, exception],
    )

    test.each(fixtureTable)('%s', (_title, outPoint, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeOutPoint(outPoint)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeOutPoint(outPoint)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize DepType', () => {
    const fixtureTable = Object.entries(fixtures.serializeDepType).map(([title, { depType, expected, exception }]) => [
      title,
      depType,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, depType, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeDepType(depType)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeDepType(depType)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize CellDep', () => {
    const fixtureTable = Object.entries(fixtures.serializeCellDep).map(([title, { cellDep, expected, exception }]) => [
      title,
      cellDep,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%s', (_title, cellDep, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeCellDep(cellDep)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeCellDep(cellDep)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize CellDeps', () => {
    const fixtureTable = Object.entries(fixtures.serializeCellDeps).map(
      ([title, { cellDeps, expected, exception }]) => [title, cellDeps, expected, exception],
    )
    test.each(fixtureTable)('%j', (_title, cellDeps, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeCellDeps(cellDeps)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeCellDeps(cellDeps)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize HeaderDeps', () => {
    const fixtureTable = Object.entries(fixtures.serializeHeaderDeps).map(
      ([title, { headerDeps, expected, exception }]) => [title, headerDeps, expected, exception],
    )
    test.each(fixtureTable)('%j', (_title, headerDeps, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeHeaderDeps(headerDeps)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeHeaderDeps(headerDeps)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Inputs', () => {
    const fixtureTable = Object.entries(fixtures.serializeInputs).map(([title, { inputs, expected, exception }]) => [
      title,
      inputs,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%j', (_title, inputs, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeInputs(inputs)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeInputs(inputs)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Output', () => {
    const fixtureTable = Object.entries(fixtures.serializeOutput).map(([title, { output, expected, exception }]) => [
      title,
      output,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%j', (_title, output, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeOutput(output)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeOutput(output)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Outputs', () => {
    const fixtureTable = Object.entries(fixtures.serializeOutputs).map(([title, { outputs, expected, exception }]) => [
      title,
      outputs,
      expected,
      exception,
    ])
    test.each(fixtureTable)('%j', (_title, outputs, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeOutputs(outputs)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeOutputs(outputs)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize OutputsData', () => {
    const fixtureTable = Object.entries(fixtures.serializeOutputsData).map(
      ([title, { outputsData, expected, exception }]) => [title, outputsData, expected, exception],
    )
    test.each(fixtureTable)('%j', (_title, outputsData, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeOutputsData(outputsData)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeOutputsData(outputsData)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize WitnessArgs', () => {
    const fixtureTable = Object.entries(fixtures.serializeWitnessArgs).map(([title, { args, expected }]) => [
      title,
      args,
      expected,
    ])
    test.each(fixtureTable)('%s', (_title, args, expected) => {
      expect(serializeWitnessArgs(args)).toBe(expected)
    })
  })

  describe('Serialize Witnesses', () => {
    const fixtureTable = Object.entries(fixtures.serializeWitnesses).map(
      ([title, { witnesses, expected, exception }]) => [title, witnesses, expected, exception],
    )
    test.each(fixtureTable)('%s', (_title, witnesses, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeWitnesses(witnesses)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeWitnesses(witnesses)).toThrowError(exception)
      }
    })
  })

  describe('Serialize RawTransaction', () => {
    const fixtureTable = Object.entries(fixtures.serializeRawTransaction).map(
      ([title, { rawTransaction, expected, exception }]) => [title, rawTransaction, expected, exception],
    )
    test.each(fixtureTable)('%j', (_title, rawTransaction, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeRawTransaction(rawTransaction)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeRawTransaction(rawTransaction)).toThrow(new Error(exception))
      }
    })
  })

  describe('Serialize Transaction', () => {
    const fixtureTable = Object.entries(fixtures.serializeTransaction).map(
      ([title, { transaction, expected, exception }]) => [title, transaction, expected, exception],
    )
    test.each(fixtureTable)('%j', (_title, transaction, expected, exception) => {
      if (undefined !== expected) {
        expect(serializeTransaction(transaction)).toBe(expected)
      }
      if (undefined !== exception) {
        expect(() => serializeTransaction(transaction)).toThrow(new Error(exception))
      }
    })
  })
})


================================================
File: packages/branch/src/__test__/utils/sizes/fixtures.json
================================================
{
  "getTransactionSize": {
    "with serialzied witness": {
      "params": [
        {
          "version": "0x0",
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
                "index": "0x0"
              },
              "depType": "depGroup"
            },
            {
              "outPoint": {
                "txHash": "0x0fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f60",
                "index": "0x2"
              },
              "depType": "code"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
                "index": "0x1"
              },
              "since": "0x0"
            }
          ],
          "outputs": [
            {
              "capacity": "0x174876e800",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              },
              "type": {
                "codeHash": "0xece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f6",
                "args": "0x",
                "hashType": "data"
              }
            },
            {
              "capacity": "0x59e1416a5000",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              },
              "type": null
            }
          ],
          "outputsData": ["0x1234", "0x"],
          "witnesses": [
            "0x82df73581bcd08cb9aa270128d15e79996229ce8ea9e4f985b49fbf36762c5c37936caf3ea3784ee326f60b8992924fcf496f9503c907982525a3436f01ab32900"
          ]
        }
      ],
      "expected": 536
    },
    "with witness args": {
      "params": [
        {
          "version": "0x0",
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
                "index": "0x0"
              },
              "depType": "depGroup"
            },
            {
              "outPoint": {
                "txHash": "0x0fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f60",
                "index": "0x2"
              },
              "depType": "code"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
                "index": "0x1"
              },
              "since": "0x0"
            }
          ],
          "outputs": [
            {
              "capacity": "0x174876e800",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              },
              "type": {
                "codeHash": "0xece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f6",
                "args": "0x",
                "hashType": "data"
              }
            },
            {
              "capacity": "0x59e1416a5000",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              },
              "type": null
            }
          ],
          "outputsData": ["0x1234", "0x"],
          "witnesses": [
            {
              "lock": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
              "inputType": "",
              "outputType": ""
            }
          ]
        }
      ],
      "expected": 556
    },
    "1 IN 1 OUT": {
      "params": [
        {
          "version": "0x0",
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
                "index": "0x0"
              },
              "depType": "depGroup"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
                "index": "0x1"
              },
              "since": "0x0"
            }
          ],
          "outputs": [
            {
              "capacity": "0x174876e800",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              }
            }
          ],
          "outputsData": ["0x"],
          "witnesses": [
            {
              "lock": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
              "inputType": "",
              "outputType": ""
            }
          ]
        }
      ],
      "expected": 355
    },
    "1 IN 2 OUT": {
      "params": [
        {
          "version": "0x0",
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
                "index": "0x0"
              },
              "depType": "depGroup"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
                "index": "0x1"
              },
              "since": "0x0"
            }
          ],
          "outputs": [
            {
              "capacity": "0x174876e800",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              }
            },
            {
              "capacity": "0x174876e800",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              }
            }
          ],
          "outputsData": ["0x", "0x"],
          "witnesses": [
            {
              "lock": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
              "inputType": "",
              "outputType": ""
            }
          ]
        }
      ],
      "expected": 464
    },
    "2 IN 1 OUT": {
      "params": [
        {
          "version": "0x0",
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
                "index": "0x0"
              },
              "depType": "depGroup"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
                "index": "0x1"
              },
              "since": "0x0"
            },
            {
              "previousOutput": {
                "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
                "index": "0x1"
              },
              "since": "0x0"
            }
          ],
          "outputs": [
            {
              "capacity": "0x174876e800",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              }
            }
          ],
          "outputsData": ["0x"],
          "witnesses": [
            {
              "lock": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
              "inputType": "",
              "outputType": ""
            },
            "0x"
          ]
        }
      ],
      "expected": 407
    },
    "2 IN 2 OUT": {
      "params": [
        {
          "version": "0x0",
          "cellDeps": [
            {
              "outPoint": {
                "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
                "index": "0x0"
              },
              "depType": "depGroup"
            }
          ],
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
                "index": "0x1"
              },
              "since": "0x0"
            },
            {
              "previousOutput": {
                "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
                "index": "0x1"
              },
              "since": "0x0"
            }
          ],
          "outputs": [
            {
              "capacity": "0x174876e800",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              }
            },
            {
              "capacity": "0x174876e800",
              "lock": {
                "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
                "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
                "hashType": "type"
              }
            }
          ],
          "outputsData": ["0x", "0x"],
          "witnesses": [
            {
              "lock": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
              "inputType": "",
              "outputType": ""
            },
            {
              "lock": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
              "inputType": "",
              "outputType": ""
            }
          ]
        }
      ],
      "expected": 601
    }
  }
}


================================================
File: packages/branch/src/__test__/utils/sizes/index.test.js
================================================
const { getTransactionSize } = require('../../../../dist')
const fixtures = require('./fixtures.json')

describe('Test sizes', () => {
  describe('getTransactionSize', () => {
    const fixtureTable = Object.entries(fixtures.getTransactionSize).map(([title, { params, expected }]) => [
      title,
      params,
      expected,
    ])

    test.each(fixtureTable)(`%s`, (_title, params, expected) => {
      expect.assertions(1)
      expect(getTransactionSize(...params)).toBe(expected)
    })
  })
})


================================================
File: packages/branch/src/__test__/utils/systemScripts/fixtures.json
================================================
{
  "SECP256K1_BLAKE160": {
    "mainnet": {
      "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
      "hashType": "type",
      "txHash": "0x71a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c",
      "index": "0x0",
      "depType": "depGroup"
    },
    "testnet": {
      "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
      "hashType": "type",
      "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
      "index": "0x0",
      "depType": "depGroup"
    }
  },
  "SECP256K1_MULTISIG": {
    "mainnet": {
      "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
      "hashType": "type",
      "txHash": "0x71a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c",
      "index": "0x1",
      "depType": "depGroup"
    },
    "testnet": {
      "codeHash": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",
      "hashType": "type",
      "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
      "index": "0x1",
      "depType": "depGroup"
    }
  },
  "ANYONE_CAN_PAY": {
    "mainnet": {
      "codeHash": "0xd369597ff47f29fbc0d47d2e3775370d1250b85140c670e4718af712983a2354",
      "hashType": "type",
      "txHash": "0x4153a2014952d7cac45f285ce9a7c5c0c0e1b21f2d378b82ac1433cb11c25c4d",
      "index": "0x0",
      "depType": "depGroup"
    },
    "testnet": {
      "codeHash": "0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c1356",
      "hashType": "type",
      "txHash": "0xec26b0f85ed839ece5f11c4c4e837ec359f5adc4420410f6453b1f6b60fb96a6",
      "index": "0x0",
      "depType": "depGroup"
    }
  },
  "NERVOS_DAO": {
    "mainnet": {
      "codeHash": "0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e",
      "hashType": "type",
      "txHash": "0xe2fb199810d49a4d8beec56718ba2593b665db9d52299a0f9e6e75416d73ff5c",
      "index": "0x2",
      "depType": "code"
    },
    "testnet": {
      "codeHash": "0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e",
      "hashType": "type",
      "txHash": "0x8f8c79eb6671709633fe6a46de93c0fedc9c1b8a6527a18d3983879542635c9f",
      "index": "0x2",
      "depType": "code"
    }
  },
  "SIMPLE_UDT": {
    "testnet": {
      "codeHash": "0x48dbf59b4c7ee1547238021b4869bceedf4eea6b43772e5d66ef8865b6ae7212",
      "hashType": "data",
      "txHash": "0xc1b2ae129fad7465aaa9acc9785f842ba3e6e8b8051d899defa89f5508a77958",
      "index": "0x0",
      "depType": "code"
    }
  }
}


================================================
File: packages/branch/src/__test__/utils/systemScripts/index.test.js
================================================
const { SECP256K1_BLAKE160, SECP256K1_MULTISIG } = require('../../../../dist')
const fixtures = require('./fixtures.json')

const getInfo = ({ codeHash, hashType, depType, mainnetOutPoint, testnetOutPoint }, isMain) => {
  const outPoint = isMain ? mainnetOutPoint : testnetOutPoint

  return { codeHash, hashType, depType, ...outPoint }
}

describe('Test System Scripts', () => {
  describe('Test secp256k1/blake160', () => {
    it('should has mainnet script', () => {
      expect(getInfo(SECP256K1_BLAKE160, true)).toEqual(fixtures.SECP256K1_BLAKE160.mainnet)
    })

    it('should has testnet script', () => {
      expect(getInfo(SECP256K1_BLAKE160, false)).toEqual(fixtures.SECP256K1_BLAKE160.testnet)
    })
  })

  describe('Test secp256k1/multisig', () => {
    it('should has mainnet script', () => {
      expect(getInfo(SECP256K1_MULTISIG, true)).toEqual(fixtures.SECP256K1_MULTISIG.mainnet)
    })

    it('should has testnet script', () => {
      expect(getInfo(SECP256K1_MULTISIG, false)).toEqual(fixtures.SECP256K1_MULTISIG.testnet)
    })
  })
})


================================================
File: packages/branch/src/__test__/utils/utils/index.test.js
================================================
const {
  privateKeyToPublicKey,
  privateKeyToAddress,
  scriptToHash,
  rawTransactionToHash,
  ParameterRequiredException,
} = require('../../../../dist')
const rawTransactionToHashFixtures = require('./rawTransactionToHash.fixtures.json')

describe('scriptToHash', () => {
  const fixtures = {
    'Empty script': {
      script: {
        codeHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        args: [],
        hashType: 'data',
      },
      scriptHash: '0x77c93b0632b5b6c3ef922c5b7cea208fb0a7c427a13d50e13d3fefad17e0c590',
    },
    'Script with hash type of data': {
      script: {
        codeHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        args: ['0x01'],
        hashType: 'data',
      },
      scriptHash: '0x67951b34bce20cb71b7e235c1f8cda259628d99d94825bffe549c23b4dd2930f',
    },
    'Script with hash type of type': {
      script: {
        codeHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        args: ['0x01'],
        hashType: 'type',
      },
      scriptHash: '0xd39f84d4702f53cf8625da4411be1640b961715cb36816501798fedb70b6e0fb',
    },
  }
  test.each(Object.keys(fixtures))('%s', fixtureName => {
    const fixture = fixtures[fixtureName]
    const scriptHash = scriptToHash(fixture.script)
    expect(scriptHash).toBe(fixture.scriptHash)
  })

  it('empty input should throw an error', () => {
    expect(() => scriptToHash()).toThrow(new ParameterRequiredException('Script'))
  })
})

describe('rawTransactionToHash', () => {
  const fixtureTable = rawTransactionToHashFixtures.rawTransactionToHash.map(({ rawTransaction, expected }) => [
    rawTransaction,
    expected,
  ])

  test.each(fixtureTable)('%j => %s', (rawTransaction, expected) => {
    expect(rawTransactionToHash(rawTransaction)).toBe(expected)
  })
  it('throw an error if the raw transaction is not missing', () => {
    expect(() => rawTransactionToHash(undefined)).toThrow(new Error('Raw transaction is required'))
  })
})

describe('privateKeyToPublicKey', () => {
  const fixture = {
    privateKey: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
    publicKey: '0x03a706ad8f73115f90500266f273f7571df9429a4cfb4bbfbcd825227202dabad1',
  }
  expect(privateKeyToPublicKey(fixture.privateKey)).toBe(fixture.publicKey)
})

describe('privateKeyToAddress', () => {
  const fixture = {
    privateKey: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
    mainnetAddress: 'ckb1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsq0zl2pwwzcx9jryfwq26lk0dcq4uhe49asy6ums9',
    testnetAddress: 'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsq0zl2pwwzcx9jryfwq26lk0dcq4uhe49as2gh56a',
  }
  expect(privateKeyToAddress(fixture.privateKey)).toBe(fixture.mainnetAddress)
  expect(
    privateKeyToAddress(fixture.privateKey, {
      prefix: 'ckb',
    }),
  ).toBe(fixture.mainnetAddress)
  expect(
    privateKeyToAddress(fixture.privateKey, {
      prefix: 'ckt',
    }),
  ).toBe(fixture.testnetAddress)
})


================================================
File: packages/branch/src/__test__/utils/utils/occupiedCapacity.test.js
================================================
const { scriptOccupied, cellOccupied } = require('../../../../dist')

describe('script occupied', () => {
  it('no args', () => {
    const occupied = scriptOccupied({
      args: '0x',
      codeHash: '0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e',
      hashType: 'type',
    })
    expect(occupied).toBe(33)
  })
  it('with args', () => {
    const occupied = scriptOccupied({
      args: '0x00ffee',
      codeHash: '0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e',
      hashType: 'type',
    })
    expect(occupied).toBe(36)
  })
})

describe('cell occupied', () => {
  it('no type', () => {
    const occupied = cellOccupied({
      capacity: '0xe8d4a51000',
      lock: {
        args: '0x',
        codeHash: '0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e',
        hashType: 'type',
      },
    })
    expect(occupied).toBe(41)
  })
  it('with type', () => {
    const occupied = cellOccupied({
      capacity: '0xe8d4a51000',
      lock: {
        args: '0x',
        codeHash: '0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e',
        hashType: 'type',
      },
      type: {
        args: '0x00ff',
        codeHash: '0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e',
        hashType: 'type',
      },
    })
    expect(occupied).toBe(76)
  })
})


================================================
File: packages/branch/src/__test__/utils/utils/rawTransactionToHash.fixtures.json
================================================
{
  "rawTransactionToHash": [
    {
      "rawTransaction": {
        "version": "0x0",
        "cellDeps": [
          {
            "outPoint": {
              "txHash": "0xc12386705b5cbb312b693874f3edf45c43a274482e27b8df0fd80c8d3f5feb8b",
              "index": "0x0"
            },
            "depType": "depGroup"
          },
          {
            "outPoint": {
              "txHash": "0x0fb4945d52baf91e0dee2a686cdd9d84cad95b566a1d7409b970ee0a0f364f60",
              "index": "0x2"
            },
            "depType": "code"
          }
        ],
        "headerDeps": [],
        "inputs": [
          {
            "previousOutput": {
              "txHash": "0x31f695263423a4b05045dd25ce6692bb55d7bba2965d8be16b036e138e72cc65",
              "index": "0x1"
            },
            "since": "0x0"
          }
        ],
        "outputs": [
          {
            "capacity": "0x174876e800",
            "lock": {
              "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
              "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
              "hashType": "type"
            },
            "type": {
              "codeHash": "0xece45e0979030e2f8909f76258631c42333b1e906fd9701ec3600a464a90b8f6",
              "args": "0x",
              "hashType": "data"
            }
          },
          {
            "capacity": "0x59e1416a5000",
            "lock": {
              "codeHash": "0x68d5438ac952d2f584abf879527946a537e82c7f3c1cbf6d8ebf9767437d8e88",
              "args": "0x59a27ef3ba84f061517d13f42cf44ed020610061",
              "hashType": "type"
            },
            "type": null
          }
        ],
        "outputsData": ["0x", "0x"],
        "witnesses": [
          "0x82df73581bcd08cb9aa270128d15e79996229ce8ea9e4f985b49fbf36762c5c37936caf3ea3784ee326f60b8992924fcf496f9503c907982525a3436f01ab32900"
        ],
        "hash": "0x9d1bf801b235ce62812844f01381a070c0cc72876364861e00492eac1d8b54e7"
      },
      "expected": "0xe765f9912b06c72552dae11779f6371309236e968aa045ae3b8f426d8ec8ca05"
    },
    {
      "rawTransaction": {
        "version": "0x0",
        "cellDeps": [
          {
            "outPoint": {
              "txHash": "0xace5ea83c478bb866edf122ff862085789158f5cbff155b7bb5f13058555b708",
              "index": "0x0"
            },
            "depType": "depGroup"
          }
        ],
        "headerDeps": [],
        "inputs": [
          {
            "since": "0x0",
            "previousOutput": {
              "txHash": "0xa563884b3686078ec7e7677a5f86449b15cf2693f3c1241766c6996f206cc541",
              "index": "0x7"
            }
          }
        ],
        "outputs": [
          {
            "capacity": "0x2540be400",
            "lock": {
              "codeHash": "0x709f3fda12f561cfacf92273c57a98fede188a3f1a59b1f888d113f9cce08649",
              "hashType": "data",
              "args": "0xc8328aabcd9b9e8e64fbc566c4385c3bdeb219d7"
            },
            "type": null
          },
          {
            "capacity": "0x2540be400",
            "lock": {
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
              "args": "0xc8328aabcd9b9e8e64fbc566c4385c3bdeb219d7"
            },
            "type": null
          },
          {
            "capacity": "0x2540be400",
            "lock": {
              "codeHash": "0x709f3fda12f561cfacf92273c57a98fede188a3f1a59b1f888d113f9cce08649",
              "hashType": "data1",
              "args": "0xc8328aabcd9b9e8e64fbc566c4385c3bdeb219d7"
            },
            "type": null
          }
        ],
        "outputsData": ["0x", "0x", "0x"],
        "witnesses": [
          "0x550000001000000055000000550000004100000070b823564f7d1f814cc135ddd56fd8e8931b3a7040eaf1fb828adae29736a3cb0bc7f65021135b293d10a22da61fcc64f7cb660bf2c3276ad63630dad0b6099001"
        ]
      },
      "expected": "0x9110ca9266f89938f09ae6f93cc914b2c856cc842440d56fda6d16ee62543f5c"
    }
  ]
}


================================================
File: packages/branch/src/__test__/utils/validators/fixtures.json
================================================
{
  "assertToBeHexString": {
    "validHexString": "0x123",
    "stringWithout0x": "123",
    "invalidNumber": "0xg",
    "notString": 123
  },
  "assertToBeHexStringOrBigint": {
    "hexStringStartsWith0x": "0x123",
    "hexStringStartsWithout0x": "123",
    "bigint": "123",
    "number": 123
  },
  "assertToBeSingleSigAddress": {
    "singleSigAddress": "ckt1qyqd39fkyvnrs7sa882eu8pn6t3cyuemtpkqm6zejn",
    "addressWithInvalidSingleSigPayload": "ckt1qyq6jh3kt48y294mla4mxrdy380tzprcpe7sxuzm0e",
    "addressWithIncorrectSize": "ckt1qyqd39fkyvnrs7sa882eu8pn6t3cyuemtpkqm6zejn1"
  },
  "assertToBeSignleSigAddressPayload": {
    "singleSigAddressPayload": "0x0100d895362326387a1d39d59e1c33d2e382733b586c",
    "payloadNotStartsWith0x0100": "0x0000d895362326387a1d39d59e1c33d2e382733b586c",
    "paylaodWithIncorrectSize": "0x0100d895362326387a1d39d59e1c33d2e382733b586c1"
  }
}


================================================
File: packages/branch/src/__test__/utils/validators/index.test.js
================================================
const { assertToBeHexString, assertToBeHexStringOrBigint } = require('../../../../dist')
const fixtures = require('./fixtures.json')

describe('validators', () => {
  describe('assert to be type of hex string', () => {
    const { assertToBeHexString: fixture } = fixtures

    it('valid hex string', () => {
      expect(assertToBeHexString(fixture.validHexString)).toBe(true)
    })

    it('string without 0x should fail', () => {
      expect(() => assertToBeHexString(fixture.stringWithout0x)).toThrow(
        new Error(`${fixture.stringWithout0x} is an invalid hex string`),
      )
    })

    it('invalid number should fail', () => {
      expect(() => assertToBeHexString(fixture.invalidNumber)).toThrow(
        new Error(`${fixture.invalidNumber} is an invalid hex string`),
      )
    })

    it('value which is not a string should fail', () => {
      expect(() => assertToBeHexString(fixture.notString)).toThrow(
        new Error(`${fixture.notString} is an invalid hex string`),
      )
    })
  })

  describe('assert to be type of hex string or bigint', () => {
    const { assertToBeHexStringOrBigint: fixture } = fixtures

    it('hex string starts with 0x should pass', () => {
      expect(assertToBeHexStringOrBigint(fixture.hexStringStartsWith0x)).toBe(true)
    })

    it('hex string starts without 0x should throw an error', () => {
      expect(() => assertToBeHexStringOrBigint(fixture.hexStringStartsWithout0x)).toThrow(
        new TypeError(`Hex string ${fixture.hexStringStartsWithout0x} should start with 0x`),
      )
    })

    it('bigint should pass', () => {
      expect(assertToBeHexStringOrBigint(BigInt(fixture.bigint))).toBe(true)
    })

    it('number should throw an error', () => {
      expect(() => assertToBeHexStringOrBigint(fixture.number)).toThrow(
        new TypeError(`${fixture.number} should be type of string or bigint`),
      )
    })
  })
})


================================================
File: packages/branch/src/collector/index.ts
================================================
import { Branch } from '../signer'
import { CellIndexer } from '../indexer'
import { BranchComponents, CollectResult, CollectUdtResult, Hex, IndexerCell, IndexerSearchKey } from '../types'
import { remove0x, leToUInt } from 'src/utils'

const MIN_CAPACITY = BigInt(61)

export class Collector {
  branch: Branch
  indexer: CellIndexer

  constructor(nodeUrl: string) {
    this.branch = new Branch(nodeUrl)
    this.indexer = new CellIndexer(nodeUrl)
  }

  async getCells({
    lock,
    type,
    isDataMustBeEmpty = true,
    outputCapacityRange,
  }: {
    lock?: BranchComponents.Script
    type?: BranchComponents.Script
    isDataMustBeEmpty?: boolean
    outputCapacityRange?: Hex[]
  }): Promise<IndexerCell[]> {
    const searchKey: IndexerSearchKey = lock
      ? {
          scriptSearchMode: 'exact',
          script: lock,
          scriptType: 'lock',
          filter: {
            script: type,
            outputDataLenRange: isDataMustBeEmpty && !type ? ['0x0', '0x1'] : undefined,
            outputCapacityRange: outputCapacityRange,
          },
        }
      : {
          scriptSearchMode: 'exact',
          script: type,
          scriptType: 'type',
        }
    return this.indexer.getCells(searchKey, { order: 'asc', limit: 100 })
  }

  collectInputs(
    liveCells: IndexerCell[],
    needCapacity: bigint,
    fee: bigint,
    changeCapacity = MIN_CAPACITY,
  ): CollectResult {
    const inputs: BranchComponents.CellInput[] = []
    let sumInputsCapacity = BigInt(0)
    for (const cell of liveCells) {
      inputs.push({
        previousOutput: cell.outPoint,
        since: '0x0',
      })
      sumInputsCapacity += BigInt(cell.output.capacity)
      if (sumInputsCapacity >= needCapacity + changeCapacity + fee) {
        break
      }
    }
    if (sumInputsCapacity < needCapacity + changeCapacity + fee) {
      throw new Error('Insufficient free Branch chain balance')
    }
    return { inputs, sumInputsCapacity }
  }

  collectUdtInputs(liveCells: IndexerCell[], needAmount: bigint): CollectUdtResult {
    const udtInputs: BranchComponents.CellInput[] = []
    let sumUdtInputsCapacity = BigInt(0)
    let sumAmount = BigInt(0)
    for (const cell of liveCells) {
      if (cell.outputData === '0x') {
        continue
      }
      udtInputs.push({
        previousOutput: {
          txHash: cell.outPoint.txHash,
          index: cell.outPoint.index,
        },
        since: '0x0',
      })
      sumUdtInputsCapacity = sumUdtInputsCapacity + BigInt(cell.output.capacity)
      // XUDT cell.data = <amount: uint128> <xudt data (optional)>
      // Ref: https://blog.cryptape.com/enhance-sudts-programmability-with-xudt#heading-xudt-cell
      sumAmount += leToUInt(remove0x(cell.outputData).slice(0, 32))
      if (sumAmount >= needAmount) {
        break
      }
    }
    if (sumAmount < needAmount) {
      throw new Error('Insufficient UDT balance')
    }
    return { udtInputs, sumUdtInputsCapacity, sumAmount }
  }

  async getLiveCell(outPoint: BranchComponents.OutPoint, withData = false): Promise<BranchComponents.LiveCell> {
    const { cell } = await this.branch.rpc.getLiveCell(outPoint, withData)
    return cell
  }

  async getLiveCells(outPoints: BranchComponents.OutPoint[], withData = false): Promise<BranchComponents.LiveCell[]> {
    const batch = this.branch.rpc.createBatchRequest(outPoints.map(outPoint => ['getLiveCell', outPoint, withData]))
    return batch.exec().then(liveCells => liveCells.map(liveCell => liveCell.cell))
  }

  async getTransactionsByOutPoints(outPoints: BranchComponents.OutPoint[]): Promise<BranchComponents.Transaction[]> {
    const batch = this.branch.rpc.createBatchRequest(outPoints.map(({ txHash }) => ['getTransaction', txHash]))
    return batch.exec().then(txs => txs.map(tx => tx.transaction))
  }
}


================================================
File: packages/branch/src/indexer/index.ts
================================================
import axios from 'axios'
import { IndexerSearchKey, IndexerCapacity, IndexerCell, IndexerConfig, IndexerTransaction } from '../types'
import { toSnakeCase, toCamelCase } from '../utils'

export class CellIndexer {
  private indexerUrl: string

  constructor(indexerUrl: string) {
    this.indexerUrl = indexerUrl
  }

  async getCellsCapacity(searchKey: IndexerSearchKey): Promise<IndexerCapacity> {
    const payload = {
      id: Math.floor(Math.random() * 100000),
      jsonrpc: '2.0',
      method: 'get_cells_capacity',
      params: [toSnakeCase(searchKey)],
    }
    const body = JSON.stringify(payload, null, '  ')
    const response = (
      await axios({
        method: 'post',
        url: this.indexerUrl,
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 20000,
        data: body,
      })
    ).data
    if (response.error) {
      console.error(response.error)
      throw new Error('get_cells_capacity indexer RPC error')
    } else {
      const indexerCapacity = toCamelCase<IndexerCapacity>(response.result)
      if (indexerCapacity === undefined) {
        throw new Error('The response of get_cells_capacity indexer RPC  is invalid')
      }
      return indexerCapacity
    }
  }

  async getCells(searchKey: IndexerSearchKey, config?: IndexerConfig): Promise<IndexerCell[]> {
    const order = config?.order ?? 'asc'
    const limit = `0x${(config?.limit ?? 100).toString(16)}`
    const payload = {
      id: Math.floor(Math.random() * 100000),
      jsonrpc: '2.0',
      method: 'get_cells',
      params: [toSnakeCase(searchKey), order, limit, config?.afterCursor],
    }
    const body = JSON.stringify(payload, null, '  ')
    const response = (
      await axios({
        method: 'post',
        url: this.indexerUrl,
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 20000,
        data: body,
      })
    ).data
    if (response.error) {
      console.error(response.error)
      throw new Error('get_cells indexer RPC error')
    } else {
      const indexerCells = toCamelCase<IndexerCell[]>(response.result.objects)
      if (indexerCells === undefined) {
        throw new Error('The response of get_cells indexer RPC is invalid')
      }
      return indexerCells
    }
  }

  async getTransactions(searchKey: IndexerSearchKey, config?: IndexerConfig): Promise<IndexerTransaction[]> {
    const order = config?.order ?? 'asc'
    const limit = `0x${(config?.limit ?? 100).toString(16)}`
    const payload = {
      id: Math.floor(Math.random() * 100000),
      jsonrpc: '2.0',
      method: 'get_transactions',
      params: [toSnakeCase(searchKey), order, limit, config?.afterCursor],
    }
    const body = JSON.stringify(payload, null, '  ')
    const response = (
      await axios({
        method: 'post',
        url: this.indexerUrl,
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 20000,
        data: body,
      })
    ).data
    if (response.error) {
      console.error(response.error)
      throw new Error('get_transactions indexer RPC error')
    } else {
      const indexerTxs = toCamelCase<IndexerTransaction[]>(response.result.objects)
      if (indexerTxs === undefined) {
        throw new Error('The response of get_transactions indexer RPC is invalid')
      }
      return indexerTxs
    }
  }
}


================================================
File: packages/branch/src/rpc/index.ts
================================================
import axios from 'axios'
import Base from './base'
import paramsFormatter from './paramsFormatter'
import * as resultFormatter from './resultFormatter'
import { MethodInBatchNotFoundException, PayloadInBatchException, IdNotMatchedInBatchException } from './exceptions'
import { BranchComponents } from '../types'
import { Method } from './method'

export { Method }

export class BranchRPC extends Base {
  #node: BranchComponents.Node = {
    url: '',
  }

  get node() {
    return this.#node
  }

  #paramsFormatter = paramsFormatter

  get paramsFormatter() {
    return this.#paramsFormatter
  }

  #resultFormatter = resultFormatter

  get resultFormatter() {
    return this.#resultFormatter
  }

  constructor(url: string) {
    super()
    this.setNode({ url })

    Object.defineProperties(this, {
      addMethod: { value: this.addMethod, enumerable: false, writable: false, configurable: false },
      setNode: { value: this.setNode, enumerable: false, writable: false, configurable: false },
      createBatchRequest: { value: this.createBatchRequest, enumerable: false, writable: false, configurable: false },
    })

    Object.keys(this.rpcProperties).forEach(name => {
      this.addMethod({ name, ...this.rpcProperties[name] })
    })
  }

  public setNode(node: BranchComponents.Node): BranchComponents.Node {
    Object.assign(this.node, node)
    return this.node
  }

  public addMethod = (options: BranchComponents.Method) => {
    const method = new Method(this.node, options)

    Object.defineProperty(this, options.name, {
      value: method.call,
      enumerable: true,
    })
  }

  /* eslint-disable prettier/prettier */
  public createBatchRequest = <N extends keyof Base, P extends (string | number | boolean | object)[], R = any[]>(
    params: [method: N, ...rest: P][] = [],
  ) => {
    const ctx = this

    const proxied: [method: N, ...rest: P][] = new Proxy([], {
      set(...p) {
        const methods = Object.keys(ctx)
        if (p[1] !== 'length') {
          const name = p?.[2]?.[0]
          if (methods.indexOf(name) === -1) {
            throw new MethodInBatchNotFoundException(name)
          }
        }
        return Reflect.set(...p)
      },
    })

    Object.defineProperties(proxied, {
      add: {
        value(...args: P) {
          this.push(args)
          return this
        },
      },
      remove: {
        value(i: number) {
          this.splice(i, 1)
          return this
        },
      },
      exec: {
        async value() {
          const payload = proxied.map(([f, ...p], i) => {
            try {
              const method = new Method(ctx.node, { ...ctx.rpcProperties[f], name: f })
              return method.getPayload(...p)
            } catch (err: any) {
              throw new PayloadInBatchException(i, err.message)
            }
          })

          if (!payload.length) {
            return []
          }

          const batchRes = await axios({
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            data: payload,
            url: ctx.#node.url,
            httpAgent: ctx.#node.httpAgent,
            httpsAgent: ctx.#node.httpsAgent,
          })

          return batchRes.data.map((res: any, i: number) => {
            if (res.id !== payload[i].id) {
              return new IdNotMatchedInBatchException(i, payload[i].id, res.id)
            }
            return ctx.rpcProperties[proxied[i][0]].resultFormatters?.(res.result) ?? res.result
          })
        },
      },
    })
    params.forEach(p => proxied.push(p))

    return proxied as typeof proxied & {
      add: (n: N, ...p: P) => typeof proxied
      remove: (index: number) => typeof proxied
      exec: () => Promise<R>
    }
  }
}


================================================
File: packages/branch/src/rpc/method.ts
================================================
import axios from 'axios'
import { IdNotMatchException, ResponseException } from './exceptions'
import { BranchComponents } from '../types'

export class Method {
  #name: string

  get name() {
    return this.#name
  }

  #options: BranchComponents.Method = {
    name: '',
    method: '',
    paramsFormatters: [],
    resultFormatters: undefined,
  }

  #node: BranchComponents.Node

  constructor(node: BranchComponents.Node, options: BranchComponents.Method) {
    this.#node = node
    this.#options = options
    this.#name = options.name
    Object.defineProperty(this.call, 'name', { value: options.name, configurable: false, writable: false })
  }

  public call = (...params: (string | number | object)[]) => {
    const payload = this.getPayload(...params)
    return axios({
      method: 'POST',
      headers: {
        'content-type': 'application/json',
      },
      data: payload,
      url: this.#node.url,
      httpAgent: this.#node.httpAgent,
      httpsAgent: this.#node.httpsAgent,
    }).then(res => {
      if (res.data.id !== payload.id) {
        throw new IdNotMatchException(payload.id, res.data.id)
      }
      if (res.data.error) {
        throw new ResponseException(JSON.stringify(res.data.error))
      }
      return this.#options.resultFormatters?.(res.data.result) ?? res.data.result
    })
  }

  public getPayload = (...params: (string | number | boolean | object)[]) => {
    const data = params.map((p, i) => (this.#options.paramsFormatters[i] && this.#options.paramsFormatters[i](p)) || p)
    const id = Math.round(Math.random() * 10000)
    const payload = {
      id,
      method: this.#options.method,
      params: data,
      jsonrpc: '2.0',
    }
    return payload
  }
}


================================================
File: packages/branch/src/rpc/paramsFormatter.ts
================================================
import { BranchComponents } from '../types/blockchain'
import { RPC } from '../types/rpc'
import { JSBI } from '../utils'
import {
  PageSizeTooLargeException,
  PageSizeTooSmallException,
  OutputsValidatorTypeException,
  BigintOrHexStringTypeException,
  StringHashTypeException,
  HexStringWithout0xException,
} from './exceptions'

/* eslint-disable camelcase */
const formatter = {
  toOptional: (format?: Function) => (arg: any) => {
    if (!format || arg === undefined || arg === null) {
      return arg
    }
    return format(arg)
  },
  toArray: (format?: (args: any) => any) => (arg: any) => {
    if (typeof format !== 'function' || !Array.isArray(arg)) {
      return arg
    }
    return arg.map(format)
  },
  toHash: (hash: string): RPC.Hash256 => {
    if (typeof hash !== 'string') {
      throw new StringHashTypeException(hash)
    }
    return hash.startsWith('0x') ? hash : `0x${hash}`
  },
  toNumber: (number: BranchComponents.Number | bigint): RPC.Number => {
    if (typeof number === 'bigint') {
      // @ts-ignore
      return `0x${number.toString(16)}`
    }
    if (typeof number !== 'string') {
      throw new BigintOrHexStringTypeException(number)
    }
    if (!number.startsWith('0x')) {
      throw new HexStringWithout0xException(number)
    }
    return number
  },
  toScript: (script: BranchComponents.Script): RPC.Script => {
    const { codeHash, hashType: hash_type, ...rest } = script
    return {
      code_hash: formatter.toHash(codeHash),
      hash_type,
      ...rest,
    }
  },
  toOutPoint: (outPoint: BranchComponents.OutPoint | null): RPC.OutPoint | null => {
    if (!outPoint) return outPoint
    const { txHash, index, ...rest } = outPoint
    return {
      tx_hash: formatter.toHash(txHash),
      index: formatter.toNumber(index),
      ...rest,
    }
  },
  toInput: (input: BranchComponents.CellInput): RPC.CellInput => {
    if (!input) return input
    const { previousOutput, since, ...rest } = input
    return {
      previous_output: formatter.toOutPoint(previousOutput),
      since: formatter.toNumber(since),
      ...rest,
    }
  },
  toOutput: (output: BranchComponents.CellOutput): RPC.CellOutput => {
    if (!output) return output
    const { capacity, lock, type = null, ...rest } = output
    return {
      capacity: formatter.toNumber(capacity),
      lock: formatter.toScript(lock),
      type: type ? formatter.toScript(type) : type,
      ...rest,
    }
  },
  toDepType: (type: BranchComponents.DepType) => {
    if (type === 'depGroup') {
      return 'dep_group'
    }
    return type
  },
  toCellDep: (cellDep: BranchComponents.CellDep): RPC.CellDep => {
    if (!cellDep) return cellDep
    const { outPoint = null, depType = 'code', ...rest } = cellDep
    return {
      out_point: formatter.toOutPoint(outPoint),
      dep_type: formatter.toDepType(depType),
      ...rest,
    }
  },
  toRawTransaction: (transaction: BranchComponents.RawTransaction): RPC.RawTransaction => {
    if (!transaction) return transaction
    const {
      version,
      cellDeps = [],
      inputs = [],
      outputs = [],
      outputsData: outputs_data = [],
      headerDeps: header_deps = [],
      ...rest
    } = transaction
    const formattedInputs = inputs.map(input => formatter.toInput(input))
    const formattedOutputs = outputs.map(output => formatter.toOutput(output))
    const formattedCellDeps = cellDeps.map(cellDep => formatter.toCellDep(cellDep))
    const tx = {
      version: formatter.toNumber(version),
      cell_deps: formattedCellDeps,
      inputs: formattedInputs,
      outputs: formattedOutputs,
      outputs_data,
      header_deps,
      ...rest,
    }
    return tx
  },
  toPageNumber: (pageNo: string | bigint = '0x1') => formatter.toNumber(pageNo),
  toPageSize: (pageSize: string | bigint = '0x32') => {
    const size = JSBI.BigInt(`${pageSize}`)
    const MAX_SIZE = 50
    const MIN_SIZE = 0
    if (JSBI.greaterThan(size, JSBI.BigInt(MAX_SIZE))) throw new PageSizeTooLargeException(pageSize, MAX_SIZE)
    if (JSBI.lessThan(size, JSBI.BigInt(MIN_SIZE))) throw new PageSizeTooSmallException(pageSize, MIN_SIZE)
    return formatter.toNumber(`0x${size.toString(16)}`)
  },
  toReverseOrder: (reverse: boolean = false) => !!reverse,
  toOutputsValidator: (outputsValidator: BranchComponents.OutputsValidator) => {
    if (!outputsValidator) return undefined
    const VALIDATORS = ['default', 'passthrough']
    if (VALIDATORS.indexOf(outputsValidator) > -1) {
      return outputsValidator
    }
    throw new OutputsValidatorTypeException()
  },
  toBoolean: (value: boolean) => {
    return !!value
  },
  toTransactionProof: (proof: BranchComponents.TransactionProof): RPC.TransactionProof => {
    if (!proof) return proof
    const { blockHash: block_hash, witnessesRoot: witnesses_root, ...rest } = proof
    return {
      block_hash,
      witnesses_root,
      ...rest,
    }
  },
}

export default formatter
/* eslint-enable camelcase */


================================================
File: packages/branch/src/rpc/resultFormatter.ts
================================================
import { BranchComponents, RPC } from '../types'

const isTxPoolIds = (rawTxPool: RPC.RawTxPool): rawTxPool is RPC.TxPoolIds => {
  return Array.isArray(rawTxPool.pending)
}

/* eslint-disable camelcase */
const toNumber = (number: RPC.BlockNumber): BranchComponents.BlockNumber => number.toString()
const toHash = (hash: RPC.Hash256): BranchComponents.Hash256 => hash
const toHeader = (header: RPC.Header): BranchComponents.BlockHeader => {
  if (!header) return header
  const {
    compact_target: compactTarget,
    transactions_root: transactionsRoot,
    proposals_hash: proposalsHash,
    extra_hash: extraHash,
    parent_hash: parentHash,
    ...rest
  } = header
  return {
    compactTarget,
    parentHash,
    transactionsRoot,
    proposalsHash,
    extraHash,
    ...rest,
  }
}
const toScript = (script: RPC.Script): BranchComponents.Script => {
  if (!script) return script
  const { code_hash: codeHash, hash_type: hashType, ...rest } = script
  return {
    codeHash,
    hashType,
    ...rest,
  }
}
const toInput = (input: RPC.CellInput): BranchComponents.CellInput => {
  if (!input) return input
  const { previous_output: previousOutput, ...rest } = input
  return {
    previousOutput: previousOutput ? toOutPoint(previousOutput) : previousOutput,
    ...rest,
  }
}
const toOutput = (output: RPC.CellOutput): BranchComponents.CellOutput => {
  if (!output) return output
  const { lock, type, ...rest } = output
  return {
    lock: toScript(lock),
    type: type ? toScript(type) : type,
    ...rest,
  }
}
const toOutPoint = (outPoint: RPC.OutPoint | null): BranchComponents.OutPoint | null => {
  if (!outPoint) return outPoint
  const { tx_hash: txHash, ...rest } = outPoint
  return {
    txHash,
    ...rest,
  }
}
const toDepType = (type: RPC.DepType) => {
  if (type === 'dep_group') {
    return 'depGroup'
  }
  return type
}

const toCellDep = (cellDep: RPC.CellDep): BranchComponents.CellDep => {
  if (!cellDep) return cellDep
  const { out_point: outPoint = null, dep_type = 'code', ...rest } = cellDep
  return {
    outPoint: toOutPoint(outPoint),
    depType: toDepType(dep_type),
    ...rest,
  }
}
function toTransaction(tx: RPC.RawTransaction): BranchComponents.RawTransaction
function toTransaction(tx: RPC.Transaction): BranchComponents.Transaction
function toTransaction(tx: RPC.RawTransaction | RPC.Transaction): any {
  if (!tx) return tx
  const {
    cell_deps: cellDeps = [],
    inputs = [],
    outputs = [],
    outputs_data: outputsData = [],
    header_deps: headerDeps = [],
    ...rest
  } = tx
  return {
    cellDeps: cellDeps.map(toCellDep),
    inputs: inputs.map(toInput),
    outputs: outputs.map(toOutput),
    outputsData,
    headerDeps,
    ...rest,
  }
}
const toUncleBlock = (uncleBlock: RPC.UncleBlock): BranchComponents.UncleBlock => {
  if (!uncleBlock) return uncleBlock
  const { header, ...rest } = uncleBlock
  return {
    header: toHeader(header),
    ...rest,
  }
}

const toBlock = (block: RPC.Block): BranchComponents.Block => {
  if (!block) return block
  const { header, uncles = [], transactions = [], ...rest } = block
  return {
    header: toHeader(header),
    uncles: uncles.map(toUncleBlock),
    transactions: transactions.map(toTransaction),
    ...rest,
  }
}
const toAlertMessage = (alertMessage: RPC.AlertMessage): BranchComponents.AlertMessage => {
  if (!alertMessage) return alertMessage
  const { notice_until: noticeUntil, ...rest } = alertMessage
  return {
    noticeUntil,
    ...rest,
  }
}
const toBlockchainInfo = (info: RPC.BlockchainInfo): BranchComponents.BlockchainInfo => {
  if (!info) return info
  const { is_initial_block_download: isInitialBlockDownload, median_time: medianTime, alerts, ...rest } = info
  return {
    isInitialBlockDownload,
    medianTime,
    alerts: alerts.map(toAlertMessage),
    ...rest,
  }
}
const toLocalNodeInfo = (info: RPC.LocalNodeInfo): BranchComponents.LocalNodeInfo => {
  if (!info) return info
  const { node_id: nodeId, protocols, ...rest } = info
  return {
    nodeId,
    protocols: protocols.map(({ id, name, support_versions: supportVersions }) => ({ id, name, supportVersions })),
    ...rest,
  }
}
const toRemoteNodeInfo = (info: RPC.RemoteNodeInfo): BranchComponents.RemoteNodeInfo => {
  if (!info) return info
  const {
    node_id: nodeId,
    connected_duration: connectedDuration,
    is_outbound: isOutbound,
    last_ping_duration: lastPingDuration,
    sync_state,
    ...rest
  } = info
  return {
    nodeId,
    connectedDuration,
    isOutbound,
    lastPingDuration,
    syncState: {
      bestKnownHeaderHash: sync_state.best_known_header_hash,
      bestKnownHeaderNumber: sync_state.best_known_header_number,
      canFetchCount: sync_state.can_fetch_count,
      inflightCount: sync_state.inflight_count,
      lastCommonHeaderHash: sync_state.last_common_header_hash,
      lastCommonHeaderNumber: sync_state.last_common_header_number,
      unknownHeaderListSize: sync_state.unknown_header_list_size,
    },
    ...rest,
  }
}
const toTxPoolInfo = (info: RPC.TxPoolInfo): BranchComponents.TxPoolInfo => {
  if (!info) return info
  const {
    last_txs_updated_at: lastTxsUpdatedAt,
    tip_hash: tipHash,
    tip_number: tipNumber,
    total_tx_cycles: totalTxCycles,
    total_tx_size: totalTxSize,
    min_fee_rate: minFeeRate,
    ...rest
  } = info
  return {
    lastTxsUpdatedAt,
    tipHash,
    tipNumber,
    totalTxCycles,
    totalTxSize,
    minFeeRate,
    ...rest,
  }
}
const toPeers = (nodes: RPC.RemoteNodeInfo[]): BranchComponents.RemoteNodeInfo[] => {
  if (!Array.isArray(nodes)) return []
  return nodes.map(toRemoteNodeInfo)
}
const toCell = (cell: RPC.Cell): BranchComponents.Cell => {
  if (!cell) return cell
  const { lock, type, ...rest } = cell
  return {
    lock: toScript(lock),
    type: type ? toScript(type) : null,
    ...rest,
  }
}
const toLiveCell = (liveCell: RPC.LiveCell): BranchComponents.LiveCell => {
  if (!liveCell) return liveCell
  const { data, output, ...rest } = liveCell
  return {
    data,
    output: toOutput(output),
    ...rest,
  }
}
const toLiveCellWithStatus = (cellWithStatus: {
  cell: RPC.LiveCell
  status: string
}): { cell: BranchComponents.LiveCell; status: string } => {
  if (!cellWithStatus) return cellWithStatus
  const { cell, ...rest } = cellWithStatus
  return {
    cell: toLiveCell(cell),
    ...rest,
  }
}
const toCells = (cells: RPC.Cell[]): BranchComponents.Cell[] => {
  if (!Array.isArray(cells)) return []
  return cells.map(toCell)
}
const toCellIncludingOutPoint = (cell: RPC.CellIncludingOutPoint) => {
  if (!cell) return cell
  const { lock, block_hash: blockHash, out_point, output_data_len: outputDataLen, ...rest } = cell
  return {
    blockHash,
    lock: toScript(lock),
    outPoint: toOutPoint(out_point),
    outputDataLen,
    ...rest,
  }
}
const toCellsIncludingOutPoint = (cells: RPC.CellIncludingOutPoint[]): BranchComponents.CellIncludingOutPoint[] => {
  if (!Array.isArray(cells)) return []
  return cells.map(toCellIncludingOutPoint)
}
const toTransactionWithStatus = (txWithStatus: RPC.TransactionWithStatus) => {
  if (!txWithStatus) return txWithStatus
  const {
    transaction,
    tx_status: { block_hash: blockHash, status },
    ...rest
  } = txWithStatus
  return {
    transaction: toTransaction(transaction),
    txStatus: {
      blockHash,
      status,
    },
    ...rest,
  }
}
const toEpoch = (epoch: RPC.Epoch): BranchComponents.Epoch => {
  if (!epoch) return epoch
  const { start_number: startNumber, compact_target: compactTarget, ...rest } = epoch
  return {
    compactTarget,
    startNumber,
    ...rest,
  }
}
const toTransactionPoint = (transactionPoint: RPC.TransactionPoint): BranchComponents.TransactionPoint => {
  if (!transactionPoint) return transactionPoint
  const { block_number: blockNumber, tx_hash: txHash, ...rest } = transactionPoint
  return {
    blockNumber,
    txHash,
    ...rest,
  }
}
const toTransactionsByLockHash = (
  transactions: RPC.TransactionsByLockHash,
): BranchComponents.TransactionsByLockHash => {
  if (!transactions) return transactions
  return transactions.map(tx => ({
    consumedBy: tx.consumed_by ? toTransactionPoint(tx.consumed_by) : tx.consumed_by,
    createdBy: toTransactionPoint(tx.created_by),
  }))
}
const toLiveCellsByLockHash = (cells: RPC.LiveCellsByLockHash): BranchComponents.LiveCellsByLockHash => {
  if (!cells) return cells
  return cells.map(cell => ({
    cellOutput: toCell(cell.cell_output),
    createdBy: toTransactionPoint(cell.created_by),
    cellbase: cell.cellbase,
    outputDataLen: cell.output_data_len,
  }))
}
const toLockHashIndexState = (index: RPC.LockHashIndexState): BranchComponents.LockHashIndexState => {
  if (!index) return index
  const { block_hash: blockHash, block_number: blockNumber, lock_hash: lockHash, ...rest } = index
  return {
    blockHash,
    blockNumber,
    lockHash,
    ...rest,
  }
}
const toLockHashIndexStates = (states: RPC.LockHashIndexStates): BranchComponents.LockHashIndexStates => {
  if (!states) return states
  return states.map(toLockHashIndexState)
}
const toBannedAddress = (bannedAddress: RPC.BannedAddress): BranchComponents.BannedAddress => {
  if (!bannedAddress) return bannedAddress
  const { ban_reason: banReason, ban_until: banUntil, created_at: createdAt, ...rest } = bannedAddress
  return {
    banReason,
    banUntil,
    createdAt,
    ...rest,
  }
}
const toBannedAddresses = (bannedAddresses: RPC.BannedAddresses): BranchComponents.BannedAddresses => {
  if (!bannedAddresses) return bannedAddresses
  return bannedAddresses.map(banAddr => toBannedAddress(banAddr))
}
const toCellbaseOutputCapacityDetails = (
  details: RPC.CellbaseOutputCapacityDetails,
): BranchComponents.CellbaseOutputCapacityDetails => {
  if (!details) return details
  const { proposal_reward: proposalReward, tx_fee: txFee, ...rest } = details
  return {
    proposalReward,
    txFee,
    ...rest,
  }
}

const toFeeRate = (feeRateObj: RPC.FeeRate): BranchComponents.FeeRate => {
  if (!feeRateObj) {
    return feeRateObj
  }
  const { fee_rate: feeRate, ...rest } = feeRateObj
  return {
    feeRate,
    ...rest,
  }
}
const toCapacityByLockHash = (capacityByLockHash: RPC.CapacityByLockHash): BranchComponents.CapacityByLockHash => {
  if (!capacityByLockHash) {
    return capacityByLockHash
  }
  const { cells_count: cellsCount, block_number: blockNumber, capacity, ...rest } = capacityByLockHash
  return {
    blockNumber,
    capacity,
    cellsCount,
    ...rest,
  }
}
const toBlockEconomicState = (blockEconomicState: RPC.BlockEconomicState): BranchComponents.BlockEconomicState => {
  if (!blockEconomicState) {
    return blockEconomicState
  }
  const { finalized_at: finalizedAt, miner_reward: minerReward, txs_fee: txsFee, ...rest } = blockEconomicState
  return {
    finalizedAt,
    minerReward,
    txsFee,
    ...rest,
  }
}
const toSyncState = (state: RPC.SyncState): BranchComponents.SyncState => {
  if (!state) {
    return state
  }
  return {
    bestKnownBlockNumber: state.best_known_block_number,
    bestKnownBlockTimestamp: state.best_known_block_timestamp,
    fastTime: state.fast_time,
    ibd: state.ibd,
    inflightBlocksCount: state.inflight_blocks_count,
    lowTime: state.low_time,
    normalTime: state.normal_time,
    orphanBlocksCount: state.orphan_blocks_count,
  }
}
const toTransactionProof = (proof: RPC.TransactionProof): BranchComponents.TransactionProof => {
  if (!proof) {
    return proof
  }
  const { block_hash: blockHash, witnesses_root: witnessesRoot, ...rest } = proof
  return {
    blockHash,
    witnessesRoot,
    ...rest,
  }
}
const toConsensus = (consensus: RPC.Consensus): BranchComponents.Consensus => {
  if (!consensus) return consensus
  return {
    blockVersion: consensus.block_version,
    cellbaseMaturity: consensus.cellbase_maturity,
    daoTypeHash: consensus.dao_type_hash,
    epochDurationTarget: consensus.epoch_duration_target,
    genesisHash: consensus.genesis_hash,
    id: consensus.id,
    initialPrimaryEpochReward: consensus.initial_primary_epoch_reward,
    maxBlockBytes: consensus.max_block_bytes,
    maxBlockCycles: consensus.max_block_cycles,
    maxBlockProposalsLimit: consensus.max_block_proposals_limit,
    maxUnclesNum: consensus.max_uncles_num,
    medianTimeBlockCount: consensus.median_time_block_count,
    orphanRateTarget: consensus.orphan_rate_target,
    permanentDifficultyInDummy: consensus.permanent_difficulty_in_dummy,
    primaryEpochRewardHalvingInterval: consensus.primary_epoch_reward_halving_interval,
    proposerRewardRatio: consensus.proposer_reward_ratio,
    secondaryEpochReward: consensus.secondary_epoch_reward,
    secp256k1Blake160MultisigAllTypeHash: consensus.secp256k1_blake160_multisig_all_type_hash,
    secp256k1Blake160SighashAllTypeHash: consensus.secp256k1_blake160_sighash_all_type_hash,
    txProposalWindow: consensus.tx_proposal_window,
    txVersion: consensus.tx_version,
    typeIdCodeHash: consensus.type_id_code_hash,
    hardforkFeatures:
      consensus.hardfork_features?.map(({ epoch_number: epochNumber, ...rest }) => ({ epochNumber, ...rest })) ??
      consensus.hardfork_features,
  }
}

const toRawTxPool = (rawTxPool: RPC.RawTxPool): BranchComponents.RawTxPool => {
  if (!rawTxPool) return rawTxPool

  if (isTxPoolIds(rawTxPool)) {
    return rawTxPool
  }

  const toTxVerbosity = ({
    ancestors_count: ancestorsCount,
    ancestors_cycles: ancestorsCycles,
    ancestors_size: ancestorsSize,
    ...rest
  }: RPC.TxVerbosity): BranchComponents.TxVerbosity => ({
    ancestorsCount,
    ancestorsCycles,
    ancestorsSize,
    ...rest,
  })
  const proposed: Record<BranchComponents.Hash256, BranchComponents.TxVerbosity> = {}
  const pending: Record<BranchComponents.Hash256, BranchComponents.TxVerbosity> = {}

  Object.keys(rawTxPool.proposed).forEach(hash => {
    proposed[hash] = toTxVerbosity(rawTxPool.proposed[hash])
  })

  Object.keys(rawTxPool.pending).forEach(hash => {
    pending[hash] = toTxVerbosity(rawTxPool.pending[hash])
  })

  return { proposed, pending }
}

export {
  toNumber,
  toHash,
  toHeader,
  toScript,
  toInput,
  toOutput,
  toOutPoint,
  toDepType,
  toCellDep,
  toTransaction,
  toUncleBlock,
  toBlock,
  toAlertMessage,
  toBlockchainInfo,
  toLocalNodeInfo,
  toRemoteNodeInfo,
  toTxPoolInfo,
  toPeers,
  toLiveCell,
  toLiveCellWithStatus,
  toCell,
  toCells,
  toCellIncludingOutPoint,
  toCellsIncludingOutPoint,
  toTransactionWithStatus,
  toEpoch,
  toTransactionPoint,
  toTransactionsByLockHash,
  toLiveCellsByLockHash,
  toLockHashIndexState,
  toLockHashIndexStates,
  toBannedAddress,
  toBannedAddresses,
  toCellbaseOutputCapacityDetails,
  toFeeRate,
  toCapacityByLockHash,
  toBlockEconomicState,
  toSyncState,
  toTransactionProof,
  toConsensus,
  toRawTxPool,
}
/* eslint-enable camelcase */


================================================
File: packages/branch/src/rpc/base/chain.ts
================================================
import paramsFmts from '../paramsFormatter'
import * as resultFmts from '../resultFormatter'

export default {
  getTipBlockNumber: {
    method: 'get_tip_block_number',
    paramsFormatters: [],
    resultFormatters: resultFmts.toNumber,
  },

  getTipHeader: {
    method: 'get_tip_header',
    paramsFormatters: [],
    resultFormatters: resultFmts.toHeader,
  },

  getCurrentEpoch: {
    method: 'get_current_epoch',
    paramsFormatters: [],
    resultFormatters: resultFmts.toEpoch,
  },

  getEpochByNumber: {
    method: 'get_epoch_by_number',
    paramsFormatters: [paramsFmts.toNumber],
    resultFormatters: resultFmts.toEpoch,
  },

  getBlockHash: {
    method: 'get_block_hash',
    paramsFormatters: [paramsFmts.toNumber],
  },

  getBlock: {
    method: 'get_block',
    paramsFormatters: [paramsFmts.toHash],
    resultFormatters: resultFmts.toBlock,
  },

  getBlockByNumber: {
    method: 'get_block_by_number',
    paramsFormatters: [paramsFmts.toNumber],
    resultFormatters: resultFmts.toBlock,
  },

  getHeader: {
    method: 'get_header',
    paramsFormatters: [paramsFmts.toHash],
    resultFormatters: resultFmts.toHeader,
  },

  getHeaderByNumber: {
    method: 'get_header_by_number',
    paramsFormatters: [paramsFmts.toNumber],
    resultFormatters: resultFmts.toHeader,
  },

  getLiveCell: {
    method: 'get_live_cell',
    paramsFormatters: [paramsFmts.toOutPoint],
    resultFormatters: resultFmts.toLiveCellWithStatus,
  },

  getTransaction: {
    method: 'get_transaction',
    paramsFormatters: [paramsFmts.toHash],
    resultFormatters: resultFmts.toTransactionWithStatus,
  },

  getCellbaseOutputCapacityDetails: {
    method: 'get_cellbase_output_capacity_details',
    paramsFormatters: [paramsFmts.toHash],
    resultFormatters: resultFmts.toCellbaseOutputCapacityDetails,
  },

  getBlockEconomicState: {
    method: 'get_block_economic_state',
    paramsFormatters: [paramsFmts.toHash],
    resultFormatters: resultFmts.toBlockEconomicState,
  },

  getTransactionProof: {
    method: 'get_transaction_proof',
    paramsFormatters: [paramsFmts.toArray(paramsFmts.toHash), paramsFmts.toOptional(paramsFmts.toHash)],
    resultFormatters: resultFmts.toTransactionProof,
  },

  verifyTransactionProof: {
    method: 'verify_transaction_proof',
    paramsFormatters: [paramsFmts.toTransactionProof],
  },

  getConsensus: {
    method: 'get_consensus',
    paramsFormatters: [],
    resultFormatters: resultFmts.toConsensus,
  },
}


================================================
File: packages/branch/src/rpc/base/experimental.ts
================================================
import paramsFmts from '../paramsFormatter'

export default {
  dryRunTransaction: {
    method: 'dry_run_transaction',
    paramsFormatters: [paramsFmts.toRawTransaction],
  },

  // skip _compute_transaction_hash

  calculateDaoMaximumWithdraw: {
    method: 'calculate_dao_maximum_withdraw',
    paramsFormatters: [paramsFmts.toOutPoint, paramsFmts.toHash],
  },

  // skip estimate_fee_rate

  // skip _compute_script_hash
}


================================================
File: packages/branch/src/rpc/base/index.ts
================================================
import { BranchComponents } from '../../types'
import chainRpc from './chain'
import experimentalRpc from './experimental'
import netRpc from './net'
import poolRpc from './pool'
import statsRpc from './stats'

export interface RpcProperties {
  [name: string]: Omit<BranchComponents.Method, 'name'>
}

export const rpcProperties: RpcProperties = {
  ...chainRpc,
  ...experimentalRpc,
  // skip minerRpc
  ...netRpc,
  ...poolRpc,
  ...statsRpc,
  // skip subscription
}

export interface Base {
  /* Chain */

  /**
   * @method getTipBlockNumber
   * @memberof DefaultRPC
   * @description rpc to get the number of blocks in the longest blockchain
   * @return {Promise<string>} block number
   */
  getTipBlockNumber: () => Promise<BranchComponents.BlockNumber>

  /**
   * @method getTipHeader
   * @memberof DefaultRPC
   * @description rpc to get the tip header of the longeest blockchain
   * @return {Promise<object>} block header
   */
  getTipHeader: () => Promise<BranchComponents.BlockHeader>

  /**
   * @method getCurrentEpoch
   * @memberof DefaultRPC
   * @description rpc to get the epoch info about the current epoch
   * @return {Promise<object>} epoch info, including block reward, difficulty, last_block_hash_in_previous_epoch,
   *                           length, number, remainder reward, start number
   */
  getCurrentEpoch: () => Promise<BranchComponents.Epoch>

  /**
   * @method getEpochByNumber
   * @memberof DefaultRPC
   * @description rpc to get the epoch info by its number
   * @return {Promise<object>} epoch info
   */
  getEpochByNumber: (epoch: string | bigint) => Promise<BranchComponents.Epoch>

  /**
   * @method getBlockHash
   * @memberof DefaultRPC
   * @description rpc to get the block hash by block number
   * @param {string} hash - block hash
   * @return {Promise<string>} block hash
   */
  getBlockHash: (number: BranchComponents.BlockNumber | bigint) => Promise<BranchComponents.Hash>

  /**
   * @method getBlock
   * @memberof DefaultRPC
   * @description rpc to get block by its hash
   * @param {string} hash - the block hash of the target block
   * @returns {Promise<object>} block object
   */
  getBlock: (hash: BranchComponents.Hash) => Promise<BranchComponents.Block>

  /**
   * @method getHeader
   * @memberof DefaultRPC
   * @description Returns the information about a block header by hash.
   * @params {Promise<string>} block hash
   */
  getHeader: (blockHash: BranchComponents.Hash) => Promise<BranchComponents.BlockHeader>

  /**
   * @method getHeaderByNumber
   * @memberof DefaultRPC
   * @description Returns the information about a block header by block number
   * @params {Promise<string>} block number
   */
  getHeaderByNumber: (blockNumber: BranchComponents.BlockNumber | bigint) => Promise<BranchComponents.BlockHeader>

  /**
   * @method getLiveCell
   * @memberof DefaultRPC
   * @description rpc to get a cell by outPoint, please distinguish outPoint and cellOutPoint
   * @param {object} outPoint - cell's outPoint
   * @param {boolean} withData - set withData to true to return cell data and data hash if the cell is live
   * @return {Promise<object>} liveCellWithStatus
   */
  getLiveCell: (
    outPoint: BranchComponents.OutPoint,
    withData: boolean,
  ) => Promise<{
    cell: BranchComponents.LiveCell
    status: BranchComponents.CellStatus
  }>

  /**
   * @method getTransaction
   * @memberof DefaultRPC
   * @description rpc to get trasnaction wtih its status by its hash
   * @param {string} hash - the transaction hash of the target transaction
   * @return {Promise<object>} transaction object with transaction status
   */
  getTransaction: (hash: BranchComponents.Hash) => Promise<BranchComponents.TransactionWithStatus>

  /**
   * @method getCellbaseOutputCapacityDetails
   * @memberof DefaultRPC
   * @description Returns each component of the created Branch chain in this block's cellbase, which is issued to
   *              a block N - 1 - ProposalWindow.farthest, where this block's height is N.
   * @param {string} blockHash
   *
   * @deprecated will be removed from v0.41.0
   */
  getCellbaseOutputCapacityDetails: (
    blockHash: BranchComponents.Hash,
  ) => Promise<BranchComponents.CellbaseOutputCapacityDetails>

  /**
   * @method getBlockEconomicState
   * @memberof DefaultRPC
   * @description
   * @param {string} blockHash
   * @returns {Promise<BlockEconomicState>}
   */
  getBlockEconomicState: (blockHash: BranchComponents.Hash) => Promise<BranchComponents.BlockEconomicState>

  /**
   * @method getTransactionProof
   * @memberof DefaultRPC
   * @description request merkle proof that transactions are included in a block
   * @param {Array<string>} transactionHashes - transaction hashes, all transactions must be in the same block
   * @param {Promise<[string]>} blockHash - if specified, looks for transactions in the block with this hash
   */
  getTransactionProof: (
    transactionHashes: BranchComponents.Hash[],
    blockHash?: BranchComponents.Hash,
  ) => Promise<BranchComponents.TransactionProof>

  /**
   * @method verifyTransactionProof
   * @memberof DefaultRPC
   * @description verifies that a proof points to transactions in a block, returns transactions it commits to.
   * @param {object} transactionProof
   * @returns {Promise<Array<string>>} hash list of transactions committed in the block
   */
  verifyTransactionProof: (transactionProof: BranchComponents.TransactionProof) => Promise<BranchComponents.Hash[]>

  /**
   * @method getConsensus
   * @memberof DefaultRPC
   * @description return various consensus parameters.
   * @returns {Promise<object>} consensus parameters
   */
  getConsensus: () => Promise<BranchComponents.Consensus>

  /**
   * @method getBlockByNumber
   * @memberof DefaultRPC
   * @description rpc to get block by its number
   * @param {string} number - the block number of the target block
   * @returns {Promise<object>} block object
   */
  getBlockByNumber: (number: BranchComponents.BlockNumber | bigint) => Promise<BranchComponents.Block>

  /* Experimental */

  /**
   * @method dryRunTransaction
   * @memberof DefaultRPC
   * @description dry run the transaction and return the execution cycles, this method will not check the transaction
   *              validaty, but only run the lock script and type script and then return the execution cycles.
   * @param {object} rawTrasnaction - the raw transaction whose cycles is going to be calculated
   * @return {Promise<object>} dry run result, including cycles the transaction used.
   */
  dryRunTransaction: (tx: BranchComponents.RawTransaction) => Promise<BranchComponents.RunDryResult>

  calculateDaoMaximumWithdraw: (
    outPoint: BranchComponents.OutPoint,
    withdrawBlockHash: BranchComponents.Hash256,
  ) => Promise<string>

  /* skip Miner */

  /* Net */

  /**
   * @method localNodeInfo
   * @memberof DefaultRPC
   * @description rpc to get the local node information
   * @return {Promise<object>} node info, including addresses, is_outbound, node id, and version
   */
  localNodeInfo: () => Promise<BranchComponents.LocalNodeInfo>

  /**
   * @method getPeers
   * @memberof DefaultRPC
   * @description rpc to get connected peers info
   * @return {Promise<object[]>} peers' node info
   *
   * @deprecated will be removed from v0.41.0
   */
  getPeers: () => Promise<BranchComponents.RemoteNodeInfo[]>

  /**
   * @method getBannedAddresses
   * @memberof DefaultRPC
   * @description Returns all banned IPs/Subnets
   */
  getBannedAddresses: () => Promise<BranchComponents.BannedAddresses>

  /**
   * @method clearBannedAddresses
   * @memberof DefaultRPC
   * @description clear all banned IPs/Subnets
   * @returns <null>
   */
  clearBannedAddresses: () => Promise<null>

  /**
   * @method setBan
   * @memberof DefaultRPC
   * @description insert or delete an IP/Subnet from the banned list
   * @param {string} address, The IP/Subnet with an optional netmask (default is /32 = single IP)
   * @param {insert|delete} command, `insert` to insert an IP/Subnet to the list, `delete` to delete an IP/Subnet
   *                                 from the list
   * @param {string|null} ban_time, Time in milliseconds how long (or until when if [absolute] is set) the IP is banned,
   *                                optional parameter, null means using the default time of 24h
   * @param {[boolean]} absolute, If set, the `ban_time` must be an absolute timestamp in milliseconds since epoch,
   *                              optional parameter
   * @param {[string]} reason, Ban reason, optional parameter
   */

  setBan: (
    address: string,
    command: 'insert' | 'delete',
    banTime: string | null,
    absolute?: boolean,
    reason?: string,
  ) => Promise<null>

  /**
   * @method syncState
   * @memberof DefaultRPC
   * @description return sync state of this node
   */
  syncState: () => Promise<BranchComponents.SyncState>

  /**
   * @method setNetworkActive
   * @memberof DefaultRPC
   * @description disable/enable all p2p network activity
   * @param {boolean} state - true to enable networking, false to disable
   */
  setNetworkActive: (state: boolean) => Promise<null>

  /**
   * @method addNode
   * @memberof DefaultRPC
   * @description attempt to add a node to the peer list and try to connect
   * @param {string} peerId - the peer id of target node
   * @param {string} address - the address of target node
   * @returns {Promise<null>}
   */
  addNode: (peerId: string, address: string) => Promise<null>

  /**
   * @method removeNode
   * @memberof DefaultRPC
   * @description attempt to remove a node from the peer list and try to disconnect
   * @param {string} peerId - the peer id of the target node
   * @returns {Promise<null>}
   */
  removeNode: (peerId: string) => Promise<null>

  /**
   * @method pingPeers
   * @memberof DefaultRPC
   * @description request a ping sent to all connected peers to measure ping time
   * @returns {Promise<null>}
   */
  pingPeers: () => Promise<null>

  /* Pool */

  /**
   * @method sendTransaction
   * @memberof DefaultRPC
   * @description rpc to send a new transaction into transaction pool
   * @param {object} rawTransaction - a raw transaction includes cell deps, inputs, outputs, version, and witnesses
   * @param {string} [outputsValidator] - Validates the transaction outputs before entering the tx-pool,
   *                                  an optional string parameter (enum: default | passthrough ),
   *                                  null and passthrough mean skipping outputs validation
   * @return {Promise<string>} transaction hash
   */
  sendTransaction: (
    tx: BranchComponents.RawTransaction,
    outputsValidator?: BranchComponents.OutputsValidator,
  ) => Promise<BranchComponents.Hash>

  /**
   * @method txPoolInfo
   * @memberof DefaultRPC
   * @description rpc to get pool information
   * @return {Promise<object>} info of transaction pool, including last_txs_updated_at, number of orphan,
   *                           number of pending, number of proposed
   */
  txPoolInfo: () => Promise<BranchComponents.TxPoolInfo>

  /**
   * @method clearTxPool
   * @memberof DefaultRPC
   * @description remove all transactions from the tx pool
   * @return {Promise<null>}
   */
  clearTxPool: () => Promise<null>

  /**
   * @method getRawTxPool
   * @memberof DefaultRPC
   * @param {boolean | null} verbose - true for a json object, false for array of transaction ids, default=false
   * @description Returns all transaction ids in tx pool as a json array of string transaction ids.
   * @return {Promise<object>} BranchComponents.RawTxPool
   */
  getRawTxPool(): Promise<BranchComponents.TxPoolIds>
  getRawTxPool(verbose: true): Promise<BranchComponents.TxPoolVerbosity>
  getRawTxPool(verbose: false | null): Promise<BranchComponents.TxPoolIds>

  /* Stats */

  /**
   * @method getBlockchainInfo
   * @memberof DefaultRPC
   * @description rpc to get state info of the blockchain
   * @return {Promise<object>} blockchain info, including chain name, difficulty, epoch number,
   *                           is_initial_block_download, median time, warnings
   */
  getBlockchainInfo: () => Promise<BranchComponents.BlockchainInfo>

  /* skip Subscription */

  getFeeRateStats: () => Promise<BranchComponents.FeeRateStats | null>
}

export class Base {
  #rpcProperties = rpcProperties

  get rpcProperties() {
    return this.#rpcProperties
  }
}

export default Base


================================================
File: packages/branch/src/rpc/base/net.ts
================================================
import paramsFmts from '../paramsFormatter'
import * as resultFmts from '../resultFormatter'

export default {
  localNodeInfo: {
    method: 'local_node_info',
    paramsFormatters: [],
    resultFormatters: resultFmts.toLocalNodeInfo,
  },

  getPeers: {
    method: 'get_peers',
    paramsFormatters: [],
    resultFormatters: resultFmts.toPeers,
  },

  getBannedAddresses: {
    method: 'get_banned_addresses',
    paramsFormatters: [],
    resultFormatters: resultFmts.toBannedAddresses,
  },

  clearBannedAddresses: {
    method: 'clear_banned_addresses',
    paramsFormatters: [],
  },

  setBan: {
    method: 'set_ban',
    paramsFormatters: [],
  },

  syncState: {
    method: 'sync_state',
    paramsFormatters: [],
    resultFormatters: resultFmts.toSyncState,
  },

  setNetworkActive: {
    method: 'set_network_active',
    paramsFormatters: [paramsFmts.toBoolean],
  },

  addNode: {
    method: 'add_node',
    paramsFormatters: [],
  },

  removeNode: {
    method: 'remove_node',
    paramsFormatters: [],
  },

  pingPeers: {
    method: 'ping_peers',
    paramsFormatters: [],
  },
}


================================================
File: packages/branch/src/rpc/base/pool.ts
================================================
import paramsFmts from '../paramsFormatter'
import * as resultFmts from '../resultFormatter'

export default {
  sendTransaction: {
    method: 'send_transaction',
    paramsFormatters: [paramsFmts.toRawTransaction, paramsFmts.toOutputsValidator],
    resultFormatters: resultFmts.toHash,
  },

  txPoolInfo: {
    method: 'tx_pool_info',
    paramsFormatters: [],
    resultFormatters: resultFmts.toTxPoolInfo,
  },

  clearTxPool: {
    method: 'clear_tx_pool',
    paramsFormatters: [],
  },

  getRawTxPool: {
    method: 'get_raw_tx_pool',
    paramsFormatters: [],
    resultFormatters: resultFmts.toRawTxPool,
  },
}


================================================
File: packages/branch/src/rpc/base/stats.ts
================================================
import * as resultFmts from '../resultFormatter'

export default {
  getBlockchainInfo: {
    method: 'get_blockchain_info',
    paramsFormatters: [],
    resultFormatters: resultFmts.toBlockchainInfo,
  },
  getFeeRateStats: {
    method: 'get_fee_rate_statistics',
    paramsFormatters: [],
  },
}


================================================
File: packages/branch/src/rpc/exceptions/ErrorCode.ts
================================================
export enum ErrorCode {
  IdNotMatch = 201,
  MethodNotFound = 202,
  PayloadMessage = 203,
  ResponseMessage = 204,
}


================================================
File: packages/branch/src/rpc/exceptions/batch.ts
================================================
import { ErrorCode } from './ErrorCode'
import { IdNotMatchException } from './rpc'

const ERROR_LABEL = 'Batch Request'

export class MethodInBatchNotFoundException extends Error {
  code = ErrorCode.MethodNotFound

  constructor(name: string) {
    super(`[${ERROR_LABEL}]: Method ${name} is not found`)
  }
}

export class PayloadInBatchException extends Error {
  code = ErrorCode.PayloadMessage

  index: number | undefined

  constructor(index: number, message: string) {
    super(`[${ERROR_LABEL} ${index}]: ${message}`)
    this.index = index
  }
}

export class IdNotMatchedInBatchException extends IdNotMatchException {
  index: number | undefined

  constructor(index: number, requestId: number, responseId: number) {
    super(requestId, responseId)
    this.message = `[${ERROR_LABEL} ${index}]: ${this.message}`
    this.index = index
  }
}


================================================
File: packages/branch/src/rpc/exceptions/formatter.ts
================================================
import { ErrorCode } from '../../utils/exceptions'

export class PageSizeTooLargeException extends RangeError {
  code = ErrorCode.ParameterInvalid

  constructor(pageSize: bigint | string, maxSize: number) {
    super(`Expect page size to be at most ${maxSize}, but ${pageSize} received`)
  }
}

export class PageSizeTooSmallException extends RangeError {
  code = ErrorCode.ParameterInvalid

  constructor(pageSize: bigint | string, minSize: number) {
    super(`Expect page size to be at least ${minSize}, but ${pageSize} received`)
  }
}

export class OutputsValidatorTypeException extends TypeError {
  code = ErrorCode.ParameterInvalid

  constructor() {
    super(`Expect outputs validator to be 'default' or 'passthrough'`)
  }
}

export class BigintOrHexStringTypeException extends TypeError {
  code = ErrorCode.ParameterInvalid

  constructor(value: any) {
    super(`Expect number to be bigint or hex string, but ${value} received`)
  }
}

export class StringHashTypeException extends TypeError {
  code = ErrorCode.ParameterInvalid

  constructor(hash: any) {
    super(`Expect hash to be string, but ${hash} received`)
  }
}


================================================
File: packages/branch/src/rpc/exceptions/index.ts
================================================
export { HexStringWithout0xException } from '../../utils/exceptions'
export * from './formatter'
export * from './rpc'
export * from './batch'


================================================
File: packages/branch/src/rpc/exceptions/rpc.ts
================================================
import { ErrorCode } from './ErrorCode'

export class IdNotMatchException extends Error {
  code = ErrorCode.IdNotMatch

  constructor(requestId: number, responseId: number) {
    super(`Expect json rpc id to be ${requestId}, but ${responseId} received`)
  }
}

export class ResponseException extends Error {
  code = ErrorCode.ResponseMessage
}


================================================
File: packages/branch/src/signer/branch.ts
================================================
import { BranchRPC } from '../rpc'
import { ParameterRequiredException } from '../utils/exceptions'
import * as utils from '../utils'
import { isMap, signWitnesses } from './signWitnesses'
import { BranchComponents } from '../types'

const filterCellsByInputs = (
  cells: Pick<BranchComponents.ResolvedCell, 'outPoint' | 'lock'>[],
  inputs: Pick<BranchComponents.CellInput, 'previousOutput'>[],
) => {
  return inputs.map(input => {
    const outPoint = input.previousOutput
    const cell = cells.find(c => c.outPoint?.txHash === outPoint?.txHash && c.outPoint?.index === outPoint?.index)
    if (!cell) {
      throw new Error(`Cell of ${JSON.stringify(outPoint)} is not found`)
    }
    return cell
  })
}

type Key = string
type LockHash = string
type URL = string

export class Branch {
  public rpc: BranchRPC
  public utils = utils

  constructor(nodeUrl: URL = 'http://localhost:8114') {
    this.rpc = new BranchRPC(nodeUrl)
  }

  public loadSecp256k1Dep = async (): Promise<BranchComponents.CellDep> => {
    const genesisBlock = await this.rpc.getBlockByNumber('0x0')
    if (!genesisBlock) {
      throw new Error('Fail to load the genesis block')
    }
    const secp256k1DepTxHash = genesisBlock?.transactions[1].hash
    return {
      outPoint: {
        txHash: secp256k1DepTxHash,
        index: '0x0',
      },
      depType: 'depGroup',
    }
  }

  public signWitnesses = signWitnesses

  public signTransaction =
    (key: Key | Map<LockHash, Key>) =>
    (
      transaction: BranchComponents.RawTransactionToSign,
      cells: Array<{ outPoint: BranchComponents.OutPoint; lock: BranchComponents.Script }> = [],
    ) => {
      if (!key) throw new ParameterRequiredException('Private key or address object')
      this.#validateTransactionToSign(transaction)

      const transactionHash = this.utils.rawTransactionToHash(transaction)
      const inputCells = isMap(key) ? filterCellsByInputs(cells, transaction.inputs) : undefined

      const signedWitnesses = this.signWitnesses(key)({
        transactionHash,
        witnesses: transaction.witnesses,
        inputCells,
      })
      return {
        ...transaction,
        witnesses: signedWitnesses.map(witness =>
          typeof witness === 'string' ? witness : this.utils.serializeWitnessArgs(witness),
        ),
      }
    }

  #validateTransactionToSign = (transaction: BranchComponents.RawTransactionToSign) => {
    if (!transaction) throw new ParameterRequiredException('Transaction')
    if (!transaction.witnesses) throw new ParameterRequiredException('Witnesses')
    if (!transaction.outputsData) throw new ParameterRequiredException('OutputsData')
    if (transaction.outputsData.length < transaction.outputs.length) throw new Error('Invalid count of outputsData')
  }
}


================================================
File: packages/branch/src/signer/index.ts
================================================
export * from './signWitnesses'
export * from './signWitnessGroup'
export * from './multisig'
export * from './branch'


================================================
File: packages/branch/src/signer/multisig.ts
================================================
import { BranchComponents } from '../types'
import { blake2b, PERSONAL, hexToBytes } from '../utils'

export type MultisigConfig = {
  r: number
  m: number
  n: number
  blake160s: string[]
}

export function isMultisigConfig(config: any): config is MultisigConfig {
  return (
    config &&
    !Number.isNaN(+config.r) &&
    !Number.isNaN(+config.m) &&
    !Number.isNaN(+config.n) &&
    Array.isArray(config.blake160s)
  )
}

export type Signatures = Record<BranchComponents.Hash, BranchComponents.Bytes[]>

export enum SignStatus {
  Signed = 'Signed',
  Unsigned = 'Unsigned',
  PartiallySigned = 'PartiallySigned',
}

const validateMultisigCount = (v: number) => {
  if (v < 0 || v > 255) {
    throw new Error('For multisig sign, signer should between 0 and 255')
  }
}

const toHex = (v: number) => {
  return v.toString(16).padStart(2, '0')
}

const validateMultisigConfig = (config: MultisigConfig) => {
  validateMultisigCount(config.r)
  validateMultisigCount(config.m)
  validateMultisigCount(config.n)
  if (config.m > config.n) throw new Error(`For m of n multisig sign, m shouldn't be greater than n`)
  if (config.r > config.m) throw new Error(`For m of n multisig sign, r shouldn't be greater than m`)
  if (config.n !== config.blake160s.length)
    throw new Error(`For m of n multisig sign, signer's length should equal with n`)
}

export const serializeMultisigConfig = (config: MultisigConfig) => {
  validateMultisigConfig(config)
  // default s is 00
  return `0x00${toHex(config.r)}${toHex(config.m)}${toHex(config.n)}${config.blake160s.reduce((pre, cur) => pre + cur.slice(2), '')}`
}

export const hashMultisig = (config: MultisigConfig) => {
  const blake2bHash = blake2b(32, null, null, PERSONAL)
  blake2bHash.update(hexToBytes(serializeMultisigConfig(config)))
  return `0x${blake2bHash.digest('hex')}`.slice(0, 42)
}

export const getMultisigStatus = (config: MultisigConfig, signatures: BranchComponents.Bytes[] = []) => {
  let signedForM = 0
  let signedForR = 0
  for (let i = 0; i < config.n; i++) {
    if (signatures.includes(config.blake160s[i])) {
      if (i < config.r) {
        signedForR += 1
      } else {
        signedForM += 1
      }
    }
  }
  if (signedForM + signedForR === 0) {
    return SignStatus.Unsigned
  }
  if (signedForM > config.m - config.r) {
    throw new Error('More signature for multisig')
  }
  if (signedForM + signedForR < config.m) {
    return SignStatus.PartiallySigned
  }
  return SignStatus.Signed
}


================================================
File: packages/branch/src/signer/signWitnessGroup.ts
================================================
import { BranchComponents } from '../types'
import { blake2b, hexToBytes, PERSONAL, toUint64Le, serializeWitnessArgs } from '../utils'
import { ECPair } from '../utils/crypto/ecpair'
import { serializeMultisigConfig, MultisigConfig } from './multisig'

export type SignatureProvider = string | ((message: string | Uint8Array) => string)
type TransactionHash = string

export function signWitnessGroup(
  sk: SignatureProvider,
  transactionHash: TransactionHash,
  witnessGroup: BranchComponents.StructuredWitness[],
  multisigConfig?: MultisigConfig,
): BranchComponents.StructuredWitness[]
export function signWitnessGroup(
  sk: (message: string | Uint8Array, witness: BranchComponents.StructuredWitness[]) => Promise<string>,
  transactionHash: TransactionHash,
  witnessGroup: BranchComponents.StructuredWitness[],
  multisigConfig?: MultisigConfig,
): Promise<BranchComponents.StructuredWitness[]>

export function signWitnessGroup(
  sk:
    | SignatureProvider
    | ((message: string | Uint8Array, witness: BranchComponents.StructuredWitness[]) => Promise<string>),
  transactionHash: TransactionHash,
  witnessGroup: BranchComponents.StructuredWitness[],
  multisigConfig?: MultisigConfig,
) {
  if (!witnessGroup.length) {
    throw new Error('WitnessGroup cannot be empty')
  }
  if (typeof witnessGroup[0] !== 'object') {
    throw new Error('The first witness in the group should be type of WitnessArgs')
  }

  const emptyWitness = {
    ...witnessGroup[0],
    lock: `0x${'0'.repeat(130)}`,
  }
  if (multisigConfig) {
    emptyWitness.lock = `${serializeMultisigConfig(multisigConfig)}${'0'.repeat(130 * multisigConfig.m)}`
  }

  const serializedEmptyWitnessBytes = hexToBytes(serializeWitnessArgs(emptyWitness))
  const serializedEmptyWitnessSize = serializedEmptyWitnessBytes.length

  const s = blake2b(32, null, null, PERSONAL)
  s.update(hexToBytes(transactionHash))
  s.update(hexToBytes(toUint64Le(`0x${serializedEmptyWitnessSize.toString(16)}`)))
  s.update(serializedEmptyWitnessBytes)

  witnessGroup.slice(1).forEach(w => {
    const bytes = hexToBytes(typeof w === 'string' ? w : serializeWitnessArgs(w))
    s.update(hexToBytes(toUint64Le(`0x${bytes.length.toString(16)}`)))
    s.update(bytes)
  })

  const message = `0x${s.digest('hex')}`
  if (typeof sk === 'string') {
    const keyPair = new ECPair(sk)
    emptyWitness.lock = keyPair.signRecoverable(message)
    return [multisigConfig ? emptyWitness : serializeWitnessArgs(emptyWitness), ...witnessGroup.slice(1)]
  } else {
    const skResult = sk(message, [emptyWitness, ...witnessGroup.slice(1)])
    if (typeof skResult === 'string') {
      emptyWitness.lock = skResult
      return [multisigConfig ? emptyWitness : serializeWitnessArgs(emptyWitness), ...witnessGroup.slice(1)]
    }
    return skResult.then(res => {
      emptyWitness.lock = res
      return [multisigConfig ? emptyWitness : serializeWitnessArgs(emptyWitness), ...witnessGroup.slice(1)]
    })
  }
}


================================================
File: packages/branch/src/signer/signWitnesses.ts
================================================
import { scriptToHash, serializeWitnessArgs } from '../utils'
import { ParameterRequiredException } from '../utils/exceptions'
import { SignatureProvider, signWitnessGroup } from './signWitnessGroup'
import { getMultisigStatus, isMultisigConfig, MultisigConfig, serializeMultisigConfig, SignStatus } from './multisig'
import { BranchComponents } from '../types'

type LockHash = string
type TransactionHash = string
type Index = number
type Cell = { lock: BranchComponents.Script }

export type MultisigOption = {
  sk: SignatureProvider
  blake160: string
  config: MultisigConfig
  signatures: string[]
}

type SignWitnessesKey = SignatureProvider | Map<LockHash, SignatureProvider | MultisigOption>
export interface SignWitnesses {
  (
    key: SignatureProvider,
  ): (params: {
    transactionHash: TransactionHash
    witnesses: BranchComponents.StructuredWitness[]
  }) => BranchComponents.StructuredWitness[]
  (
    key: Map<LockHash, SignatureProvider | MultisigOption>,
  ): (params: {
    transactionHash: TransactionHash
    witnesses: BranchComponents.StructuredWitness[]
    inputCells: Cell[]
    skipMissingKeys: boolean
  }) => BranchComponents.StructuredWitness[]
  (
    key: SignWitnessesKey,
  ): (params: {
    transactionHash: TransactionHash
    witnesses: BranchComponents.StructuredWitness[]
    inputCells?: Cell[]
    skipMissingKeys?: boolean
  }) => BranchComponents.StructuredWitness[]
}

export const isMap = <K = any, V = any>(val: any): val is Map<K, V> => {
  return val.size !== undefined
}

function isMultisigOption(params: any): params is MultisigOption {
  if (params.sk && params.blake160 && params.config && params.signatures) {
    if (
      (typeof params.sk === 'string' || typeof params.sk === 'function') &&
      typeof params.blake160 === 'string' &&
      Array.isArray(params.signatures) &&
      isMultisigConfig(params.config)
    ) {
      return true
    }
    throw new Error('Multisig options is incorrect')
  }
  throw new Error('Multisig options miss some property')
}

const groupScripts = (inputCells: Cell[]) => {
  const groups = new Map<LockHash, Index[]>()
  inputCells.forEach((cell, i) => {
    const lockHash = scriptToHash(cell.lock)
    const group = groups.get(lockHash) || []
    groups.set(lockHash, [...group, i])
  })
  return groups
}

export const signWitnesses: SignWitnesses =
  (key: SignWitnessesKey) =>
  ({
    transactionHash,
    witnesses = [],
    inputCells = [],
    skipMissingKeys = false,
  }: {
    transactionHash: string
    witnesses: BranchComponents.StructuredWitness[]
    inputCells?: Cell[]
    skipMissingKeys?: boolean
  }) => {
    if (!key) throw new ParameterRequiredException('Signature provider')
    if (!transactionHash) throw new ParameterRequiredException('Transaction hash')
    if (!witnesses.length) throw new Error('Witnesses is empty')

    if (isMap(key)) {
      if (!inputCells.length) {
        throw new Error(`Cell shouldn't be empty when key is Map`)
      }
      const rawWitnesses = witnesses
      const restWitnesses = witnesses.slice(inputCells.length)
      const groupedScripts = groupScripts(inputCells)
      groupedScripts.forEach((indices, lockHash) => {
        const sk = key.get(lockHash)
        if (!sk) {
          if (!skipMissingKeys) {
            throw new Error(`The signature provider to sign lock hash ${lockHash} is not found`)
          } else {
            return
          }
        }

        const ws = [...indices.map(idx => witnesses[idx]), ...restWitnesses] as BranchComponents.StructuredWitness[]
        if (typeof sk === 'object' && isMultisigOption(sk)) {
          const witnessIncludeSignature = signWitnessGroup(sk.sk, transactionHash, ws, sk.config)[0]
          // is multisig sign
          const firstWitness = rawWitnesses[indices[0]]
          if (typeof firstWitness !== 'object') {
            throw new Error('The first witness in the group should be type of WitnessArgs')
          }
          let lockAfterSign = (witnessIncludeSignature as BranchComponents.WitnessArgs).lock
          if (firstWitness.lock) {
            lockAfterSign = firstWitness.lock + lockAfterSign?.slice(2)
          } else {
            lockAfterSign = serializeMultisigConfig(sk.config) + lockAfterSign?.slice(2)
          }
          const firstWitSigned = { ...firstWitness, lock: lockAfterSign }
          rawWitnesses[indices[0]] = firstWitSigned
          if (getMultisigStatus(sk.config, [...sk.signatures, sk.blake160]) === SignStatus.Signed) {
            indices.forEach(idx => {
              const wit = rawWitnesses[idx]
              rawWitnesses[idx] = typeof wit === 'string' ? wit : serializeWitnessArgs(wit!)
            })
          }
        } else {
          const witnessIncludeSignature = signWitnessGroup(sk, transactionHash, ws)[0]
          rawWitnesses[indices[0]] = witnessIncludeSignature!
        }
      })
      return rawWitnesses
    }

    return signWitnessGroup(key, transactionHash, witnesses)
  }


================================================
File: packages/branch/src/types/blockchain.ts
================================================
/**
 * @see https://github.com/nervosnetwork/ckb/blob/develop/protocol/src/protocol.fbs for more information
 */

export namespace BranchComponents {
  export type DAO = string
  export type Hash = string
  export type Number = string
  export type Hash256 = string
  export type UInt32 = number
  export type Index = string
  export type Version = string
  export type Count = string
  export type Difficulty = string
  export type BlockNumber = string
  export type EpochInHeader = string
  export type Capacity = string
  export type ProposalShortId = string
  export type Timestamp = string
  export type Nonce = string
  export type Cycles = string
  export type Size = string
  export type OutputsValidator = 'default' | 'passthrough' | undefined
  export type RationalU256 = Record<'denom' | 'numer', string>
  export type ProposalWindow = Record<'closest' | 'farthest', BlockNumber>
  export type EpochNumberWithFraction = string
  export enum TransactionStatus {
    Pending = 'pending',
    Proposed = 'proposed',
    Committed = 'committed',
  }

  export type ScriptHashType = 'data' | 'type' | 'data1' | 'data2'

  export type DepType = 'code' | 'depGroup'
  export type JsonBytes = string

  /**
   * @typedef Bytes, keep consistent with Branch chain
   * @description Bytes will be serialized to string
   * @see https://github.com/nervosnetwork/ckb/blob/develop/util/jsonrpc-types/src/blockchain.rs#L19
   */
  export type Bytes = string
  export type Since = string
  export interface Node {
    url: string
    httpAgent?: any
    httpsAgent?: any
  }
  export interface Method {
    name: string
    method: string
    paramsFormatters: Function[]
    resultFormatters?: Function
  }
  /**
   * RPC Units
   */

  /* eslint-disable max-len */
  /**
   * @typedef Script, lock or type script
   * @description Script, the script model in Branch chain. Branch chain scripts use UNIX standard execution environment.
   *              Each script binary should contain a main function with the following signature `int main(int argc, char* argv[]);`.
   *              Branch chain will concat  `args`, then use the concatenated array to fill `argc/argv` part, then start the script execution.
   *              Upon termination, the executed `main` function here will provide a return code,
   *              `0` means the script execution succeeds, other values mean the execution fails.
   * @property args, arguments.
   * @property codeHash, point to its dependency, if the referred dependency is listed in the deps field in a transaction,
   *                     the codeHash means the hash of the referred cell's data.
   * @property hashType, a enumerate indicates the type of the code which is referenced by the code hash
   */
  /* eslint-enable max-len */
  export interface Script {
    args: Bytes
    codeHash: Hash256
    hashType: ScriptHashType
  }

  /**
   * @typedef CellInput, cell input in a transaction
   * @property previousOutput, point to its P1 cell
   * @property since, a parameter to prevent a cell to be spent before a centain block timestamp or a block number,
   *           [RFC](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0017-tx-valid-since/0017-tx-valid-since.md)
   */
  export interface CellInput {
    previousOutput: OutPoint | null
    since: Since
  }

  /**
   * @typedef CellOutput, cell output in a transaction
   * @property capacity, the capacity of the genereated P1 cell
   * @property lock, lock script
   * @property type, type script
   */
  export interface CellOutput {
    capacity: Capacity
    lock: Script
    type?: Script | null
  }

  /**
   * @typedef OutPoint, used to refer a generated cell by transaction hash and output index
   * @property hash, transaction hash
   * @property index, index of cell output
   */
  export interface OutPoint {
    txHash: Hash256
    index: Index
  }

  /**
   * @typeof CellDep, cell dependencies in a transaction
   * @property outPoint, the out point of the cell dependency
   * @property depType, indicate if the data of the cell containing a group of dependencies
   */
  export interface CellDep {
    outPoint: OutPoint | null
    depType: DepType
  }

  export type Witness = Bytes

  /**
   * @typedef RawTransaction, raw transaction object
   * @property version, transaction version
   * @property cellDeps, cell deps used in the transaction
   * @property headerDeps, header deps referenced to a specific block used in the transaction
   * @property inputs, cell inputs in the transaction
   * @property outputs, cell outputs in the transaction
   * @property witnesses, segrated witnesses
   * @property outputsData, data referenced by scripts
   */
  export interface RawTransaction {
    version: Version
    cellDeps: CellDep[]
    headerDeps: Hash256[]
    inputs: CellInput[]
    outputs: CellOutput[]
    witnesses: Witness[]
    outputsData: Bytes[]
  }

  /**
   * @typedef Transaction, transaction object
   * @extends RawTransaction
   * @property hash, transaction hash
   */
  export interface Transaction extends RawTransaction {
    hash: Hash256
  }

  export interface TransactionWithStatus {
    transaction: Transaction
    txStatus:
      | {
          blockHash: Hash256
          status: TransactionStatus.Committed
        }
      | {
          blockHash: null
          status: TransactionStatus.Pending | TransactionStatus.Proposed
        }
  }

  /**
   * @typeof TransactionPoint
   * @property blockNumber
   * @property index
   * @property txHash
   */
  export interface TransactionPoint {
    blockNumber: BlockNumber
    index: Index
    txHash: Hash256
  }

  /**
   * @TransactionByLockHash
   * @property consumedBy
   * @property createdBy
   */
  export interface TransactionByLockHash {
    consumedBy: null | TransactionPoint
    createdBy: TransactionPoint
  }

  export type TransactionsByLockHash = TransactionByLockHash[]

  /**
   * @typedef BlockHeader, header of a block
   * @property compactTarget
   * @property dao
   * @property epoch
   * @property hash
   * @property number
   * @property parentHash
   * @property proposalsHash
   * @property nonce
   * @property timestamp
   * @property transactionsRoot
   * @property extraHash
   * @property version
   */
  export interface BlockHeader {
    compactTarget: Hash
    dao: DAO
    epoch: EpochInHeader
    hash: Hash256
    number: BlockNumber
    parentHash: Hash256
    proposalsHash: Hash256
    nonce: Nonce
    timestamp: Timestamp
    transactionsRoot: Hash256
    extraHash: Hash256
    version: Version
  }

  /**
   * @typedef UncleBlock, uncle block object
   * @property header, block header
   * @property proposals
   */

  export interface UncleBlock {
    header: BlockHeader
    proposals: ProposalShortId[]
  }

  /**
   * @typedef Block, block object
   * @property header, block header
   * @property uncles, uncle blocks
   * @property transactions
   * @property proposals
   * @property extension
   */
  export interface Block {
    header: BlockHeader
    uncles: UncleBlock[]
    transactions: Transaction[]
    proposals: ProposalShortId[]
    extension?: JsonBytes | null
  }

  /**
   * @typedef Cell, cell object
   * @property capacty, cell capacity
   * @property lock, lock hash
   */
  export interface Cell extends CellOutput {}

  /**
   * @typeof Live Cell
   * @property data, the data and data hash of the live cell
   * @property output, the previous cell the live cell derives from
   */

  export interface LiveCell {
    data?: {
      content: Hash
      hash: Hash256
    }
    output: CellOutput
  }

  /**
   * @typedef Cell, cell object
   * @property capacity, cell capacity
   * @property lock, lock hash
   * @property outPoint
   */

  export interface CellIncludingOutPoint {
    blockHash: Hash256
    capacity: Capacity
    lock: Script
    outPoint: OutPoint | null
    cellbase: boolean
    outputDataLen: string
  }

  export type TransactionTrace = { action: string; info: string; time: Timestamp }[]

  export enum CellStatus {
    Live = 'live',
    Unknown = 'unknown',
  }

  export interface LiveCellByLockHash {
    cellOutput: CellOutput
    createdBy: TransactionPoint
    cellbase: boolean
    outputDataLen: string
  }

  export type LiveCellsByLockHash = LiveCellByLockHash[]

  export interface AlertMessage {
    id: string
    priority: string
    noticeUntil: Timestamp
    message: string
  }

  export interface BlockchainInfo {
    isInitialBlockDownload: boolean
    epoch: string
    difficulty: string
    medianTime: string
    chain: string
    alerts: AlertMessage[]
  }

  export interface LocalNodeInfo {
    active: boolean
    addresses: Record<'address' | 'score', string>[]
    connections: string
    nodeId: string
    protocols: { id: string; name: string; supportVersions: string[] }[]
    version: string
  }

  export interface RemoteNodeInfo {
    addresses: Record<'address' | 'score', string>[]
    connectedDuration: string
    isOutbound: boolean
    lastPingDuration: string
    nodeId: string
    protocols: Record<'id' | 'version', string>[]
    syncState: Record<
      | 'bestKnownHeaderHash'
      | 'bestKnownHeaderNumber'
      | 'canFetchCount'
      | 'inflightCount'
      | 'lastCommonHeaderHash'
      | 'lastCommonHeaderNumber'
      | 'unknownHeaderListSize',
      string | null
    >
    version: string
  }

  export interface PeersState {
    lastUpdated: string
    blocksInFlight: string
    peer: string
  }

  export interface TxPoolInfo {
    lastTxsUpdatedAt: Timestamp
    minFeeRate: string
    orphan: Count
    pending: Count
    proposed: Count
    tipHash: Hash256
    tipNumber: BlockNumber
    totalTxCycles: Cycles
    totalTxSize: Size
  }

  export enum CapacityUnit {
    Satoshi = 1,
    Byte = 100000000,
  }

  export interface Epoch {
    compactTarget: Hash
    length: String
    number: String
    startNumber: String
  }

  export interface RunDryResult {
    cycles: Cycles
  }

  export interface LockHashIndexState {
    blockHash: Hash256
    blockNumber: BlockNumber
    lockHash: Hash256
  }

  export type LockHashIndexStates = LockHashIndexState[]

  export interface BannedAddress {
    address: string
    banReason: string
    banUntil: Timestamp
    createdAt: Timestamp
  }

  export type BannedAddresses = BannedAddress[]

  export interface CellbaseOutputCapacityDetails {
    primary: string
    proposalReward: string
    secondary: string
    total: string
    txFee: string
  }

  export interface FeeRate {
    feeRate: string
  }

  export type BytesOpt = Bytes | undefined

  export interface WitnessArgs {
    lock: BytesOpt // witness for lock script in input
    inputType: BytesOpt // witness for type script in input
    outputType: BytesOpt // witness for type script in output
  }

  export interface RawTransactionToSign extends Omit<RawTransaction, 'witnesses'> {
    witnesses: (WitnessArgs | Witness)[]
  }

  export interface CapacityByLockHash {
    blockNumber: BlockNumber
    capacity: Capacity
    cellsCount: string
  }

  export interface BlockEconomicState {
    finalizedAt: string
    issuance: {
      primary: string
      secondary: string
    }
    minerReward: {
      committed: string
      primary: string
      proposal: string
      secondary: string
    }
    txsFee: string
  }

  export interface SyncState {
    bestKnownBlockNumber: string
    bestKnownBlockTimestamp: string
    fastTime: string
    ibd: boolean
    inflightBlocksCount: string
    lowTime: string
    normalTime: string
    orphanBlocksCount: string
  }

  export interface TransactionProof {
    blockHash: Hash
    proof: {
      indices: Number[]
      lemmas: Hash[]
    }
    witnessesRoot: Hash
  }

  export type TxPoolIds = Record<'pending' | 'proposed', Array<Hash256>>

  export interface TxVerbosity {
    cycles: Cycles
    size: Size
    fee: Capacity
    ancestorsSize: Size
    ancestorsCycles: Cycles
    ancestorsCount: Count
  }

  export type TxPoolVerbosity = Record<'pending' | 'proposed', Record<Hash256, TxVerbosity>>

  export type RawTxPool = TxPoolIds | TxPoolVerbosity

  export interface Consensus {
    id: string
    genesisHash: Hash256
    hardforkFeatures: Array<{ rfc: string; epochNumber: string | null }>
    daoTypeHash: Hash256 | null
    secp256k1Blake160SighashAllTypeHash: Hash256 | null
    secp256k1Blake160MultisigAllTypeHash: Hash256 | null
    initialPrimaryEpochReward: Capacity
    secondaryEpochReward: Capacity
    maxUnclesNum: string
    orphanRateTarget: RationalU256
    epochDurationTarget: string
    txProposalWindow: ProposalWindow
    proposerRewardRatio: RationalU256
    cellbaseMaturity: EpochNumberWithFraction
    medianTimeBlockCount: Count
    maxBlockCycles: Cycles
    maxBlockBytes: string
    blockVersion: Version
    txVersion: Version
    typeIdCodeHash: Hash256
    maxBlockProposalsLimit: string
    primaryEpochRewardHalvingInterval: string
    permanentDifficultyInDummy: boolean
  }

  /**
   * FeeRateStatistics
   * mean: Uint64 - mean
   * median: Uint64 - median
   */
  export type FeeRateStats = {
    mean: string
    median: string
  }

  export type ResolvedCell = {
    data: string
    lock: Script
    type?: Script
    capacity: Capacity
    outPoint: OutPoint
  }

  export type StructuredWitness = WitnessArgs | Witness
}


================================================
File: packages/branch/src/types/collector.ts
================================================
import { BranchComponents } from './blockchain'

export interface CollectResult {
  inputs: BranchComponents.CellInput[]
  sumInputsCapacity: bigint
}

export interface CollectUdtResult {
  udtInputs: BranchComponents.CellInput[]
  sumUdtInputsCapacity: bigint
  sumAmount: bigint
}


================================================
File: packages/branch/src/types/index.ts
================================================
export * from './blockchain'
export * from './rpc'
export * from './indexer'
export * from './collector'


================================================
File: packages/branch/src/types/indexer.ts
================================================
import { BranchComponents } from './blockchain'

export type Hex = string
export type IndexerRange = Hex[]
export type ScriptType = 'lock' | 'type'
export type ScriptSearchMode = 'prefix' | 'exact'
export type IndexerOrder = 'asc' | 'desc'

export interface IndexerSearchKey {
  script?: BranchComponents.Script
  scriptType?: ScriptType
  scriptSearchMode?: ScriptSearchMode
  filter?: {
    script?: BranchComponents.Script
    scriptLenRange?: IndexerRange
    outputDataLenRange?: IndexerRange
    outputCapacityRange?: IndexerRange
    blockRange?: IndexerRange
  }
  // Only for get_cells RPC
  withData?: boolean
  // Only for get_transactions RPC
  groupByTransaction?: boolean
}

export interface IndexerConfig {
  order?: IndexerOrder
  limit?: number
  afterCursor?: BranchComponents.Hash256
}

export interface IndexerCell {
  blockNumber: BranchComponents.BlockNumber
  outPoint: BranchComponents.OutPoint
  output: BranchComponents.CellOutput
  outputData: Hex
  txIndex: Hex
}

interface UngroupedTransaction {
  blockNumber: BranchComponents.BlockNumber
  txHash: BranchComponents.Hash
  txIndex: Hex
  ioType: 'input' | 'output'
  ioIndex: Hex
}

interface GroupedTransaction {
  blockNumber: BranchComponents.BlockNumber
  txHash: BranchComponents.Hash
  txIndex: Hex
  cells: {
    ioType: 'input' | 'output'
    ioIndex: Hex
  }[]
}

export type IndexerTransaction = UngroupedTransaction | GroupedTransaction

export interface IndexerCapacity {
  blockNumber: BranchComponents.BlockNumber
  blockHash: BranchComponents.Hash
  capacity: BranchComponents.Capacity
}


================================================
File: packages/branch/src/types/rpc.ts
================================================
/**
 * @see https://github.com/nervosnetwork/ckb/blob/develop/util/jsonrpc-types/src/blockchain.rs
 */

import { BranchComponents } from './blockchain'

/* eslint-disable camelcase */
export module RPC {
  export type ProposalShortId = BranchComponents.ProposalShortId
  export type Number = BranchComponents.Number
  export type UInt32 = BranchComponents.UInt32
  export type Count = BranchComponents.Count
  export type DAO = BranchComponents.DAO
  export type Hash = BranchComponents.Hash
  export type Hash256 = BranchComponents.Hash256
  export type Version = BranchComponents.Version
  export type Capacity = BranchComponents.Capacity
  export type Witness = BranchComponents.Witness
  export type Bytes = BranchComponents.Bytes
  export type Index = BranchComponents.Index
  export type Since = BranchComponents.Since
  export type Timestamp = BranchComponents.Timestamp
  export type BlockNumber = BranchComponents.BlockNumber
  export type EpochInHeader = string
  export type Difficulty = BranchComponents.Difficulty
  export type Cycles = BranchComponents.Cycles
  export type Size = BranchComponents.Size
  export type RationalU256 = BranchComponents.RationalU256
  export type ProposalWindow = BranchComponents.ProposalWindow
  export type EpochNumberWithFraction = BranchComponents.EpochNumberWithFraction
  export type JsonBytes = BranchComponents.JsonBytes

  export type ScriptHashType = BranchComponents.ScriptHashType

  export type DepType = 'code' | 'dep_group'

  export interface Script {
    args: Bytes
    code_hash: Hash256
    hash_type: ScriptHashType
  }

  export interface OutPoint {
    tx_hash: Hash256
    index: Index
  }

  export interface CellInput {
    previous_output: OutPoint | null
    since: Since
  }

  export interface CellOutput {
    capacity: Capacity
    lock: Script
    type?: Script | null
  }

  export type Cell = CellOutput

  export interface LiveCell {
    data?: {
      content: Hash
      hash: Hash256
    }
    output: CellOutput
  }

  export interface CellDep {
    out_point: OutPoint | null
    dep_type: DepType
  }

  export interface CellIncludingOutPoint {
    block_hash: Hash256
    capacity: Capacity
    lock: Script
    out_point: OutPoint | null
    cellbase: boolean
    output_data_len: string
  }

  export interface RawTransaction {
    version: Version
    cell_deps: CellDep[]
    header_deps: Hash256[]
    inputs: CellInput[]
    outputs: CellOutput[]
    witnesses: Witness[]
    outputs_data: Bytes[]
  }

  export interface Transaction extends RawTransaction {
    hash: Hash256
  }

  export interface TransactionWithStatus {
    transaction: Transaction
    tx_status:
      | {
          block_hash: Hash256
          status: BranchComponents.TransactionStatus.Committed
        }
      | {
          block_hash: null
          status: BranchComponents.TransactionStatus.Pending | BranchComponents.TransactionStatus.Proposed
        }
  }

  export interface TransactionPoint {
    block_number: BlockNumber
    index: Index
    tx_hash: Hash256
  }

  export interface TransactionByLockHash {
    consumed_by: null | TransactionPoint
    created_by: TransactionPoint
  }
  export type TransactionsByLockHash = TransactionByLockHash[]

  export interface LiveCellByLockHash {
    cell_output: CellOutput
    created_by: TransactionPoint
    cellbase: boolean
    output_data_len: string
  }
  export type LiveCellsByLockHash = LiveCellByLockHash[]

  export interface Header {
    compact_target: Hash
    dao: DAO
    epoch: EpochInHeader
    hash: Hash256
    number: BlockNumber
    parent_hash: Hash256
    proposals_hash: Hash256
    nonce: BranchComponents.Nonce
    timestamp: Timestamp
    transactions_root: Hash256
    extra_hash: Hash256
    version: Version
  }

  export interface UncleBlock {
    header: Header
    proposals: ProposalShortId[]
  }

  export interface Block {
    header: Header
    uncles: UncleBlock[]
    transactions: Transaction[]
    proposals: ProposalShortId[]
    extension?: JsonBytes | null
  }

  export interface AlertMessage {
    id: string
    priority: string
    notice_until: Timestamp
    message: string
  }

  export interface BlockchainInfo {
    is_initial_block_download: boolean
    epoch: string
    difficulty: string
    median_time: string
    chain: string
    alerts: AlertMessage[]
  }

  export interface LocalNodeInfo {
    active: boolean
    addresses: Record<'address' | 'score', string>[]
    connections: string
    node_id: string
    protocols: { id: string; name: string; support_versions: string[] }[]
    version: string
  }

  export interface RemoteNodeInfo {
    addresses: Record<'address' | 'score', string>[]
    connected_duration: string
    is_outbound: boolean
    last_ping_duration: string
    node_id: string
    protocols: Record<'id' | 'version', string>[]
    sync_state: Record<
      | 'best_known_header_hash'
      | 'best_known_header_number'
      | 'can_fetch_count'
      | 'inflight_count'
      | 'last_common_header_hash'
      | 'last_common_header_number'
      | 'unknown_header_list_size',
      string | null
    >
    version: string
  }

  export interface PeersState {
    last_updated: string
    blocks_in_flight: string
    peer: string
  }

  export interface TxPoolInfo {
    last_txs_updated_at: Timestamp
    min_fee_rate: string
    orphan: Count
    pending: Count
    proposed: Count
    tip_hash: Hash256
    tip_number: BlockNumber
    total_tx_cycles: Cycles
    total_tx_size: Size
  }

  export interface Epoch {
    compact_target: Hash
    length: string
    number: string
    start_number: string
  }

  export interface LockHashIndexState {
    block_hash: Hash256
    block_number: BlockNumber
    lock_hash: Hash256
  }

  export type LockHashIndexStates = LockHashIndexState[]

  export interface BannedAddress {
    address: string
    ban_reason: string
    ban_until: Timestamp
    created_at: Timestamp
  }
  export type BannedAddresses = BannedAddress[]

  export interface CellbaseOutputCapacityDetails {
    primary: string
    proposal_reward: string
    secondary: string
    total: string
    tx_fee: string
  }

  export interface FeeRate {
    fee_rate: string
  }

  export type FeeRateStats = {
    mean: string
    median: string
  }

  export interface CapacityByLockHash {
    block_number: BlockNumber
    capacity: Capacity
    cells_count: string
  }

  export interface BlockEconomicState {
    finalized_at: string
    issuance: {
      primary: string
      secondary: string
    }
    miner_reward: {
      committed: string
      primary: string
      proposal: string
      secondary: string
    }
    txs_fee: string
  }

  export interface SyncState {
    best_known_block_number: string
    best_known_block_timestamp: string
    fast_time: string
    ibd: boolean
    inflight_blocks_count: string
    low_time: string
    normal_time: string
    orphan_blocks_count: string
  }

  export interface TransactionProof {
    block_hash: Hash
    proof: {
      indices: Number[]
      lemmas: Hash[]
    }
    witnesses_root: Hash
  }

  export type TxPoolIds = Record<'pending' | 'proposed', Array<Hash256>>

  export interface TxVerbosity {
    cycles: Cycles
    size: Size
    fee: Capacity
    ancestors_size: Size
    ancestors_cycles: Cycles
    ancestors_count: Count
  }

  export type TxPoolVerbosity = Record<'pending' | 'proposed', Record<Hash256, TxVerbosity>>

  export type RawTxPool = TxPoolIds | TxPoolVerbosity

  export interface Consensus {
    id: string
    genesis_hash: Hash256
    hardfork_features: Array<{ rfc: string; epoch_number: string | null }>
    dao_type_hash: Hash256 | null
    secp256k1_blake160_sighash_all_type_hash: Hash256 | null
    secp256k1_blake160_multisig_all_type_hash: Hash256 | null
    initial_primary_epoch_reward: Capacity
    secondary_epoch_reward: Capacity
    max_uncles_num: string
    orphan_rate_target: RationalU256
    epoch_duration_target: string
    tx_proposal_window: ProposalWindow
    proposer_reward_ratio: RationalU256
    cellbase_maturity: EpochNumberWithFraction
    median_time_block_count: Count
    max_block_cycles: Cycles
    max_block_bytes: string
    block_version: Version
    tx_version: Version
    type_id_code_hash: Hash256
    max_block_proposals_limit: string
    primary_epoch_reward_halving_interval: string
    permanent_difficulty_in_dummy: boolean
  }
}
/* eslint-enable camelcase */


================================================
File: packages/branch/src/utils/caseParser.ts
================================================
import camelcaseKeys from 'camelcase-keys'
import { toSnake } from 'convert-keys'

export const toCamelCase = <T>(obj: object): T | undefined => {
  try {
    return camelcaseKeys(obj, {
      deep: true,
    }) as T
  } catch (error) {
    console.error(error)
  }
  return undefined
}

export const toSnakeCase = (obj: object) => {
  try {
    return toSnake(obj)
  } catch (error) {
    console.error(error)
  }
  return undefined
}


================================================
File: packages/branch/src/utils/const.ts
================================================
import { BranchComponents } from '../types'

/**
 * Encoded string 'ckb-default-hash'
 *
 * @constant
 * @type {bytes}
 */
export const PERSONAL = new Uint8Array([99, 107, 98, 45, 100, 101, 102, 97, 117, 108, 116, 45, 104, 97, 115, 104])

export const EMPTY_WITNESS_ARGS: BranchComponents.WitnessArgs = {
  lock: '',
  inputType: '',
  outputType: '',
}

export const EMPTY_SECP_SIG = `0x${'0'.repeat(130)}`


================================================
File: packages/branch/src/utils/epochs.ts
================================================
import JSBI from 'jsbi'
import { assertToBeHexString } from './validators'
import { BranchComponents } from '../types'

export interface EpochInfo {
  length: string
  index: string
  number: string
}

export const serializeEpoch = ({ length, index, number }: EpochInfo): string => {
  assertToBeHexString(length)
  assertToBeHexString(index)
  assertToBeHexString(number)

  const epochSince = JSBI.add(
    JSBI.add(
      JSBI.add(
        JSBI.leftShift(JSBI.BigInt(0x20), JSBI.BigInt(56)),
        JSBI.leftShift(JSBI.BigInt(length), JSBI.BigInt(40)),
      ),
      JSBI.leftShift(JSBI.BigInt(index), JSBI.BigInt(24)),
    ),
    JSBI.BigInt(number),
  )

  return `0x${epochSince.toString(16)}`
}

export const parseEpoch = (epoch: BranchComponents.EpochInHeader) => ({
  length: `0x${JSBI.bitwiseAnd(
    JSBI.signedRightShift(JSBI.BigInt(epoch), JSBI.BigInt(40)),
    JSBI.BigInt(0xffff),
  ).toString(16)}`,
  index: `0x${JSBI.bitwiseAnd(JSBI.signedRightShift(JSBI.BigInt(epoch), JSBI.BigInt(24)), JSBI.BigInt(0xffff)).toString(
    16,
  )}`,
  number: `0x${JSBI.bitwiseAnd(JSBI.BigInt(epoch), JSBI.BigInt(0xffffff)).toString(16)}`,
})


================================================
File: packages/branch/src/utils/index.ts
================================================
import JSBI from 'jsbi'
import { ECPair } from './crypto/ecpair'
import { hexToBytes, toBigEndian } from './convertors'
import { pubkeyToAddress, AddressOptions } from './address'
import { ParameterRequiredException, HexStringWithout0xException } from './exceptions'
import { blake2b } from './crypto'
import { serializeScript } from './serialization'
import { cellOccupied } from './size'
import { serializeRawTransaction } from './serialization/transaction'
import { PERSONAL } from './const'
import { BranchComponents } from '../types'

export * from './address'
export * from './serialization'
export * from './convertors'
export * from './epochs'
export * from './size'
export * from './crypto'
export * from './systemScripts'
export * from './const'
export * from './crypto/ecpair'
export * from './validators'
export * from './exceptions'
export * from './caseParser'
export { JSBI }

export const scriptToHash = (script: BranchComponents.Script) => {
  if (!script) throw new ParameterRequiredException('Script')
  const serializedScript = serializeScript(script)
  const s = blake2b(32, null, null, PERSONAL)
  s.update(hexToBytes(serializedScript))
  const digest = s.digest('hex')
  return `0x${digest}` as string
}

export const rawTransactionToHash = (rawTransaction: Omit<BranchComponents.RawTransaction, 'witnesses'>) => {
  if (!rawTransaction) throw new ParameterRequiredException('Raw transaction')
  const serializedRawTransaction = serializeRawTransaction(rawTransaction)
  const s = blake2b(32, null, null, PERSONAL)
  s.update(hexToBytes(serializedRawTransaction))
  const digest = s.digest('hex')
  return `0x${digest}` as string
}

export const privateKeyToPublicKey = (privateKey: string) => {
  const keyPair = new ECPair(privateKey)
  return keyPair.publicKey
}

export const privateKeyToAddress = (privateKey: string, options: AddressOptions) =>
  pubkeyToAddress(privateKeyToPublicKey(privateKey), options)

export const extractDAOData = (dao: BranchComponents.DAO) => {
  if (!dao.startsWith('0x')) {
    throw new HexStringWithout0xException(dao)
  }
  const value = dao.replace('0x', '')
  return {
    c: toBigEndian(`0x${value.slice(0, 16)}`),
    ar: toBigEndian(`0x${value.slice(16, 32)}`),
    s: toBigEndian(`0x${value.slice(32, 48)}`),
    u: toBigEndian(`0x${value.slice(48, 64)}`),
  }
}

export const calculateMaximumWithdraw = (
  outputCell: BranchComponents.CellOutput,
  outputDataCapacity: BranchComponents.Bytes,
  depositDAO: BranchComponents.DAO,
  withdrawDAO: BranchComponents.DAO,
) => {
  const depositCellSerialized = cellOccupied(outputCell) + outputDataCapacity.slice(2).length / 2
  const occupiedCapacity = JSBI.asUintN(128, JSBI.multiply(JSBI.BigInt(100000000), JSBI.BigInt(depositCellSerialized)))
  return `0x${JSBI.add(
    JSBI.divide(
      JSBI.multiply(
        JSBI.subtract(JSBI.asUintN(128, JSBI.BigInt(outputCell.capacity)), occupiedCapacity),
        JSBI.asUintN(128, JSBI.BigInt(extractDAOData(withdrawDAO).ar)),
      ),
      JSBI.asUintN(128, JSBI.BigInt(extractDAOData(depositDAO).ar)),
    ),
    occupiedCapacity,
  ).toString(16)}`
}


================================================
File: packages/branch/src/utils/systemScripts.ts
================================================
import { BranchComponents } from '../types'

/**
 * @summary System scripts are the smart contracts built and deployed by the Branch chain core team.
 *          System scripts complement the function of Branch chain in a flexible way.
 *          System scripts can provide
 *          -  core functions (e.g. secp256k1/blake160 and Nervos DAO),
 *          -  shared standard implementations (e.g. Simple UDT),
 *          -  or other auxiliary infrastructure components.
 * @see https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0024-ckb-system-script-list/0024-ckb-system-script-list.md
 */
interface SystemScript extends Omit<BranchComponents.Script, 'args'> {
  depType: BranchComponents.DepType
}

type OutPoints = Record<'mainnetOutPoint' | 'testnetOutPoint', BranchComponents.OutPoint>

/**
 * @memberof System Scripts
 * @typedef {Lock Script}
 * @name SECP256K1_BLAKE160
 * @description SECP256K1_BLAKE160 is the default lock script to verify Branch chain transaction signature
 */
export const SECP256K1_BLAKE160: SystemScript & OutPoints = {
  codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
  hashType: 'type',
  depType: 'depGroup',
  mainnetOutPoint: {
    txHash: '0x71a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c',
    index: '0x0',
  },
  testnetOutPoint: {
    txHash: '0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37',
    index: '0x0',
  },
}

/**
 * @memberof System Scripts
 * @typedef {Lock Script}
 * @name SECP256K1_MULTISIG
 * @description SECP256K1_MULTISIG is a script which allows a group of users to sign a single transaction
 */
export const SECP256K1_MULTISIG: SystemScript & OutPoints = {
  codeHash: '0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8',
  hashType: 'type',
  depType: 'depGroup',
  mainnetOutPoint: {
    txHash: '0x71a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c',
    index: '0x1',
  },
  testnetOutPoint: {
    txHash: '0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37',
    index: '0x1',
  },
}

/**
 * @memberof System Scripts
 * @typedef {Lock Script}
 * @name ANYONE_CAN_PAY
 * @description ANYONE_CAN_PAY allows a recipient to provide cell capacity in asset transfer
 */
export const ANYONE_CAN_PAY_MAINNET: SystemScript & Pick<OutPoints, 'mainnetOutPoint'> = {
  codeHash: '0xd369597ff47f29fbc0d47d2e3775370d1250b85140c670e4718af712983a2354',
  hashType: 'type',
  depType: 'depGroup',
  mainnetOutPoint: {
    txHash: '0x4153a2014952d7cac45f285ce9a7c5c0c0e1b21f2d378b82ac1433cb11c25c4d',
    index: '0x0',
  },
}

export const ANYONE_CAN_PAY_TESTNET: SystemScript & Pick<OutPoints, 'testnetOutPoint'> = {
  codeHash: '0x3419a1c09eb2567f6552ee7a8ecffd64155cffe0f1796e6e61ec088d740c1356',
  hashType: 'type',
  depType: 'depGroup',
  testnetOutPoint: {
    txHash: '0xec26b0f85ed839ece5f11c4c4e837ec359f5adc4420410f6453b1f6b60fb96a6',
    index: '0x0',
  },
}


================================================
File: packages/branch/src/utils/validators.ts
================================================
import { HexStringException, HexStringWithout0xException } from './exceptions'

export const assertToBeHexString = (value: string) => {
  if (typeof value !== 'string' || !value.startsWith('0x') || Number.isNaN(+value)) {
    throw new HexStringException(value)
  }
  return true
}

export const assertToBeHexStringOrBigint = (value: string | bigint) => {
  if (typeof value === 'bigint') {
    return true
  }
  if (typeof value === 'string') {
    if (!value.startsWith('0x')) {
      throw new HexStringWithout0xException(value)
    }
    return true
  }
  throw new TypeError(`${value} should be type of string or bigint`)
}


================================================
File: packages/branch/src/utils/address/index.ts
================================================
import { blake160, bech32, bech32m } from '..'
import {
  SECP256K1_BLAKE160,
  SECP256K1_MULTISIG,
  ANYONE_CAN_PAY_MAINNET,
  ANYONE_CAN_PAY_TESTNET,
} from '../systemScripts'
import { hexToBytes, bytesToHex } from '../convertors'
import {
  HexStringWithout0xException,
  AddressException,
  AddressPayloadException,
  CodeHashException,
  HashTypeException,
  AddressFormatTypeException,
  AddressFormatTypeAndEncodeMethodNotMatchException,
} from '../exceptions'
import { BranchComponents } from '../../types'

const MAX_BECH32_LIMIT = 1023

// TODO: deprecate outdated methods

export enum AddressPrefix {
  Mainnet = 'ckb',
  Testnet = 'ckt',
}

export enum AddressType {
  FullVersion = '0x00', // full version identifies the hash_type
  HashIdx = '0x01', // short version for locks with popular codehash
  DataCodeHash = '0x02', // full version with hash type 'Data', deprecated
  TypeCodeHash = '0x04', // full version with hash type 'Type', deprecated
}

export enum Bech32Type {
  Bech32 = 'bech32',
  Bech32m = 'bech32m',
}

enum HashType {
  data = '00',
  type = '01',
  data1 = '02',
  data2 = '04',
}

/**
 * @description payload to a full address of new version
 */
const payloadToAddress = (payload: Uint8Array, isMainnet = true) =>
  bech32m.encode(isMainnet ? AddressPrefix.Mainnet : AddressPrefix.Testnet, bech32m.toWords(payload), MAX_BECH32_LIMIT)

const scriptToPayload = ({ codeHash, hashType, args }: BranchComponents.Script): Uint8Array => {
  if (!args.startsWith('0x')) {
    throw new HexStringWithout0xException(args)
  }

  if (!codeHash.startsWith('0x') || codeHash.length !== 66) {
    throw new CodeHashException(codeHash)
  }

  if (!HashType[hashType]) {
    throw new HashTypeException(hashType)
  }

  return hexToBytes(`0x00${codeHash.slice(2)}${HashType[hashType]}${args.slice(2)}`)
}

/**
 * @function scriptToAddress
 * @description The only way recommended to generated a full address of new version
 * @param {object} script
 * @param {boolean} isMainnet
 * @returns {string} address
 */
export const scriptToAddress = (script: BranchComponents.Script, isMainnet = true) =>
  payloadToAddress(scriptToPayload(script), isMainnet)

export interface AddressOptions {
  prefix?: AddressPrefix
  type?: AddressType
  codeHash?: BranchComponents.Hash256
}

/**
 * @function toAddressPayload
 * @description recommended payload = type(00) | code hash | hash type(00|01|02) | args
 * @see https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0021-ckb-address-format/0021-ckb-address-format.md
 * @param {string | Uint8Array} args, use as the identifier of an address, usually the public key hash is used.
 * @param {string} codeHash, the referenced code hash that the address binds to, default to be secp256k1 code hash
 */
export const toAddressPayload = (
  args: string | Uint8Array,
  codeHash = SECP256K1_BLAKE160.codeHash,
  hashType = SECP256K1_BLAKE160.hashType,
): Uint8Array => {
  if (typeof args === 'string' && !args.startsWith('0x')) {
    throw new HexStringWithout0xException(args)
  }

  if (!codeHash?.startsWith('0x') || codeHash.length !== 66) {
    throw new CodeHashException(codeHash)
  }

  return scriptToPayload({
    codeHash: codeHash,
    hashType,
    args: typeof args === 'string' ? args : bytesToHex(args),
  })
}

/**
 * @function bech32mAddress
 * @description generate the address by bech32m algorithm
 * @param args, used as the identifier of an address, usually the public key hash is used.
 * @param {[string]} prefix, the prefix precedes the address, default to be ckb.
 * @param {[string]} codeHash, the referenced code hash that the address binds to.
 */
export const bech32mAddress = (
  args: Uint8Array | string,
  { prefix = AddressPrefix.Mainnet, codeHash }: AddressOptions = {},
) => bech32m.encode(prefix, bech32m.toWords(toAddressPayload(args, codeHash)), MAX_BECH32_LIMIT)

export const pubkeyToAddress = (pubkey: Uint8Array | string, options: AddressOptions = {}) => {
  const publicKeyHash = blake160(pubkey)
  return bech32mAddress(publicKeyHash, options)
}

const isValidShortVersionPayload = (payload: Uint8Array, bech32Type?: Bech32Type) => {
  const [type, index, ...data] = payload
  if (bech32Type !== Bech32Type.Bech32) {
    throw new AddressFormatTypeAndEncodeMethodNotMatchException(type, bech32Type)
  }
  /* eslint-disable indent */
  switch (index) {
    case 0: // secp256k1 + blake160
    case 1: {
      // secp256k1 + multisig
      if (data.length !== 20) {
        throw new AddressPayloadException(payload, 'short')
      }
      break
    }
    case 2: {
      // anyone can pay
      if (data.length === 20 || data.length === 22 || data.length === 24) {
        break
      }
      throw new AddressPayloadException(payload, 'short')
    }
    default: {
      throw new AddressPayloadException(payload, 'short')
    }
  }
  /* eslint-enable indent */
}

const isPayloadValid = (payload: Uint8Array, bech32Type: Bech32Type) => {
  const type = payload[0]
  const data = payload.slice(1)
  /* eslint-disable indent */
  switch (type) {
    case +AddressType.HashIdx: {
      isValidShortVersionPayload(payload, bech32Type)
      break
    }
    case +AddressType.DataCodeHash:
    case +AddressType.TypeCodeHash: {
      if (bech32Type !== Bech32Type.Bech32) {
        throw new AddressFormatTypeAndEncodeMethodNotMatchException(type, bech32Type)
      }
      if (data.length < 32) {
        throw new AddressPayloadException(payload, 'full')
      }
      break
    }
    case +AddressType.FullVersion: {
      if (bech32Type !== Bech32Type.Bech32m) {
        throw new AddressFormatTypeAndEncodeMethodNotMatchException(type, bech32Type)
      }
      const codeHash = data.slice(0, 32)
      if (codeHash.length < 32) {
        throw new CodeHashException(bytesToHex(codeHash))
      }

      const hashType = parseInt(data[32].toString(), 16)
      if (hashType > 2 && hashType !== 4) {
        throw new HashTypeException(`0x${hashType.toString(16)}`)
      }

      break
    }
    default: {
      throw new AddressPayloadException(payload)
    }
  }
  /* eslint-enable indent */
}

export declare interface ParseAddress {
  (address: string): Uint8Array
  (address: string, encode: 'binary'): Uint8Array
  (address: string, encode: 'hex'): string
  (address: string, encode: 'binary' | 'hex'): Uint8Array | string
}
/**
 * @return addressPayload, consists of type | params | publicKeyHash
 *         e.g. 0x | 01 | 00 | e2fa82e70b062c8644b80ad7ecf6e015e5f352f6
 */
export const parseAddress: ParseAddress = (address: string, encode: 'binary' | 'hex' = 'binary'): any => {
  let bech32Type: Bech32Type | undefined
  let payload: Uint8Array = new Uint8Array()
  try {
    const decoded = bech32.decode(address, MAX_BECH32_LIMIT)
    bech32Type = Bech32Type.Bech32
    payload = new Uint8Array(bech32.fromWords(new Uint8Array(decoded.words)))
  } catch {
    const decoded = bech32m.decode(address, MAX_BECH32_LIMIT)
    bech32Type = Bech32Type.Bech32m
    payload = new Uint8Array(bech32m.fromWords(new Uint8Array(decoded.words)))
  }

  try {
    isPayloadValid(payload, bech32Type)
  } catch (err: any) {
    if (err instanceof AddressFormatTypeAndEncodeMethodNotMatchException) {
      throw err
    }
    throw new AddressException(address, err.stack, err.type)
  }
  return encode === 'binary' ? payload : bytesToHex(payload)
}

export const addressToScript = (address: string): BranchComponents.Script => {
  const payload = parseAddress(address)
  const type = payload[0]

  switch (type) {
    case +AddressType.FullVersion: {
      const HASH_TYPE: Record<string, BranchComponents.ScriptHashType> = {
        '00': 'data',
        '01': 'type',
        '02': 'data1',
        '04': 'data2',
      }
      const p = bytesToHex(payload)

      const codeHash = `0x${p.substring(4, 68)}`
      const hashType = HASH_TYPE[p.substring(68, 70)]
      const args = `0x${p.substring(70)}`
      return { codeHash, hashType, args }
    }
    case +AddressType.HashIdx: {
      const codeHashIndices = [
        SECP256K1_BLAKE160,
        SECP256K1_MULTISIG,
        address.startsWith(AddressPrefix.Mainnet) ? ANYONE_CAN_PAY_MAINNET : ANYONE_CAN_PAY_TESTNET,
      ]
      const index = payload[1]
      const args = payload.slice(2)
      const script = codeHashIndices[index] ?? SECP256K1_BLAKE160
      return {
        codeHash: script.codeHash,
        hashType: script.hashType,
        args: bytesToHex(args),
      }
    }
    case +AddressType.DataCodeHash:
    case +AddressType.TypeCodeHash: {
      const codeHashAndArgs = bytesToHex(payload.slice(1))
      const hashType = type === +AddressType.DataCodeHash ? 'data' : 'type'
      return {
        codeHash: codeHashAndArgs.substring(0, 66),
        hashType,
        args: `0x${codeHashAndArgs.substring(66)}`,
      }
    }
    default: {
      throw new AddressFormatTypeException(type)
    }
  }
}


================================================
File: packages/branch/src/utils/convertors/index.ts
================================================
import { assertToBeHexStringOrBigint } from '../validators'
import { HexStringWithout0xException } from '../exceptions'

export const remove0x = (hex: string): string => {
  if (hex.startsWith('0x')) {
    return hex.substring(2)
  }
  return hex
}

export const append0x = (hex: string): string => {
  return hex.startsWith('0x') ? hex : `0x${hex}`
}

/**
 * Converts an uint16 into a hex string in little endian
 *
 * @memberof convertors
 * @param {string|bigint} uint16 The uint16 to convert
 * @returns {string} Returns a hex string
 */
export const toUint16Le = (uint16: string | bigint) => {
  assertToBeHexStringOrBigint(uint16)
  const dv = new DataView(new ArrayBuffer(2))
  dv.setUint16(0, Number(uint16), true)
  return `0x${dv.getUint16(0, false).toString(16).padStart(4, '0')}`
}

/**
 * Converts an uint32 into a hex string in little endian
 *
 * @memberof convertors
 * @param {string|bigint} uint32 The uint32 to convert
 * @returns {string} Returns a hex string
 */
export const toUint32Le = (uint32: string | bigint) => {
  assertToBeHexStringOrBigint(uint32)
  const dv = new DataView(new ArrayBuffer(4))
  dv.setUint32(0, Number(uint32), true)
  return `0x${dv.getUint32(0, false).toString(16).padStart(8, '0')}`
}

/**
 * Converts an uint64 into a hex string in little endian
 *
 * @memberof convertors
 * @param {string|bigint} uint64 The uint64 to convert
 * @returns {string} Returns a hex string
 */
export const toUint64Le = (uint64: string | bigint) => {
  assertToBeHexStringOrBigint(uint64)
  const val = (typeof uint64 === 'bigint' ? uint64.toString(16) : uint64.slice(2)).padStart(16, '0')
  const viewRight = toUint32Le(`0x${val.slice(0, 8)}`).slice(2)
  const viewLeft = toUint32Le(`0x${val.slice(8)}`).slice(2)
  return `0x${viewLeft}${viewRight}`
}

/**
 * Converts an uint128 into a hex string in little endian
 *
 * @memberof convertors
 * @param {string|bigint} uint128 The uint128 to convert
 * @returns {string} Returns a hex string
 */
export const toUint128Le = (uint128: string | bigint) => {
  assertToBeHexStringOrBigint(uint128)
  const val = (typeof uint128 === 'bigint' ? uint128.toString(16) : uint128.slice(2)).padStart(32, '0')
  const viewRight = toUint64Le(`0x${val.slice(0, 16)}`).slice(2)
  const viewLeft = toUint64Le(`0x${val.slice(16)}`).slice(2)
  return `0x${viewLeft}${viewRight}`
}

export const hexToBytes = (rawhex: string | number | bigint) => {
  if (rawhex === '') return new Uint8Array()
  if (typeof rawhex === 'string' && !rawhex.startsWith('0x')) {
    throw new HexStringWithout0xException(rawhex)
  }

  let hex = rawhex.toString(16).replace(/^0x/i, '')
  hex = hex.length % 2 ? `0${hex}` : hex

  const bytes: number[] = []
  for (let c = 0; c < hex.length; c += 2) {
    bytes.push(parseInt(hex.substring(c, c + 2), 16))
  }

  return new Uint8Array(bytes)
}

/**
 * Converts a hex string in little endian into big endian
 *
 * @memberof convertors
 * @param {string} leHex The hex string to convert
 * @returns {string} Returns a big endian
 */
export const toBigEndian = (leHex: string) => {
  const bytes = hexToBytes(append0x(leHex))
  return `0x${bytes.reduceRight((pre, cur) => pre + cur.toString(16).padStart(2, '0'), '')}`
}

export const leToUInt = (leHex: string) => {
  return BigInt(toBigEndian(leHex))
}

export const bytesToHex = (bytes: Uint8Array): string =>
  `0x${[...bytes].map(b => b.toString(16).padStart(2, '0')).join('')}`


================================================
File: packages/branch/src/utils/crypto/blake160.ts
================================================
import { blake2b } from './blake2b'
import { hexToBytes } from '../convertors'
import { PERSONAL } from '../const'

export declare interface Blake160 {
  (data: Uint8Array | string): Uint8Array
  (data: Uint8Array | string, encode: 'binary'): Uint8Array
  (data: Uint8Array | string, encode: 'hex'): string
  (data: Uint8Array | string, encode: 'binary' | 'hex'): Uint8Array | string
}

export const blake160: Blake160 = (data: Uint8Array | string, encode: 'binary' | 'hex' = 'binary'): any => {
  const formattedData = typeof data === 'string' ? hexToBytes(data) : data
  const s = blake2b(32, null, null, PERSONAL)
  s.update(formattedData)
  return s.digest(encode).slice(0, encode === 'binary' ? 20 : 40)
}


================================================
File: packages/branch/src/utils/crypto/blake2b.ts
================================================
/* eslint-disable no-param-reassign */
import {
  OutLenTooSmallException,
  OutLenTooLargeException,
  KeyLenTooSmallException,
  KeyLenTooLargeException,
  OutTypeException,
  SaltTypeException,
  SaltLenException,
  InputTypeException,
  KeyTypeException,
  PersonalTypeException,
  PersonalLenException,
} from '../exceptions'

const BYTES_MIN = 16
const BYTES_MAX = 64

const KEYBYTES_MIN = 16
const KEYBYTES_MAX = 64

const SALTBYTES = 16
const PERSONALBYTES = 16

const v = new Uint32Array(32)
const m = new Uint32Array(32)

/**
 * @function ADD64AA
 * @description 64-bit unsigned addition, set vec[a, a + 1] += vec[b, b + 1]
 * @param {Uint32Array} vec
 * @param {number} a
 * @param {number} b
 */
const ADD64AA = (vec: Uint32Array, a: number, b: number) => {
  const o0 = vec[a] + vec[b]
  let o1 = vec[a + 1] + vec[b + 1]
  if (o0 >= 0x100000000) {
    o1++
  }
  vec[a] = o0
  vec[a + 1] = o1
}

/**
 * @function ADD64AC
 * @description 64-bit unsigned addition, set vec[a, a + 1] += b, b0 is the low 32 bits of b and b1 is the high 32 bits
 * @param {Uint32Array} vec
 * @param {number} a
 * @param {number} b0
 * @param {number} b1
 */
const ADD64AC = (vec: Uint32Array, a: number, b0: number, b1: number) => {
  let o0 = vec[a] + b0
  if (b0 < 0) {
    o0 += 0x100000000
  }
  let o1 = vec[a + 1] + b1
  if (o0 >= 0x100000000) {
    o1++
  }
  vec[a] = o0
  vec[a + 1] = o1
}

// Little-endian byte access
const B2B_GET32 = (arr: Uint8Array, i: number) => {
  return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)
}

// G Mixing function
// The ROTRs are inlined for speed
const B2B_G = (a: number, b: number, c: number, d: number, ix: number, iy: number) => {
  const x0 = m[ix]
  const x1 = m[ix + 1]
  const y0 = m[iy]
  const y1 = m[iy + 1]

  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits

  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
  let xor0 = v[d] ^ v[a]
  let xor1 = v[d + 1] ^ v[a + 1]
  v[d] = xor1
  v[d + 1] = xor0

  ADD64AA(v, c, d)

  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
  xor0 = v[b] ^ v[c]
  xor1 = v[b + 1] ^ v[c + 1]
  v[b] = (xor0 >>> 24) ^ (xor1 << 8)
  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)

  ADD64AA(v, a, b)
  ADD64AC(v, a, y0, y1)

  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
  xor0 = v[d] ^ v[a]
  xor1 = v[d + 1] ^ v[a + 1]
  v[d] = (xor0 >>> 16) ^ (xor1 << 16)
  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)

  ADD64AA(v, c, d)

  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
  xor0 = v[b] ^ v[c]
  xor1 = v[b + 1] ^ v[c + 1]
  v[b] = (xor1 >>> 31) ^ (xor0 << 1)
  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)
}

/* eslint-disable prettier/prettier */
// Initialization Vector
const BLAKE2B_IV32 = new Uint32Array([
  0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a, 0xade682d1,
  0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19,
])

const SIGMA8 = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12,
  0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10,
  15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0,
  7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7,
  1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
  15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
]
/* eslint-enable prettier/prettier */

// These are offsets into a uint64 buffer.
// Multiply them all by 2 to make them offsets into a uint32 buffer,
// because this is JavaScript and we don't have uint64s
const SIGMA82 = new Uint8Array(
  SIGMA8.map(x => {
    return x * 2
  }),
)

const blake2bCompress = (ctx: Blake2b, last: boolean) => {
  let i = 0

  // init work variables
  for (i = 0; i < 16; i++) {
    v[i] = ctx.h[i]
    v[i + 16] = BLAKE2B_IV32[i]
  }

  // low 64 bits of offset
  v[24] ^= ctx.t
  v[25] ^= ctx.t / 0x100000000
  // high 64 bits not supported, offset may not be higher than 2**53-1

  // last block flag set ?
  if (last) {
    v[28] = ~v[28]
    v[29] = ~v[29]
  }

  // get little-endian words
  for (i = 0; i < 32; i++) {
    m[i] = B2B_GET32(ctx.b, 4 * i)
  }

  // twelve rounds of mixing
  for (i = 0; i < 12; i++) {
    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])
    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])
    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])
    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])
    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])
    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])
    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])
    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])
  }

  for (i = 0; i < 16; i++) {
    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]
  }
}

/**
 * @function blake2bUpdate
 * @description updates a BLAKE2b streaming hash, requires hash context and Uint8Array
 */
const blake2bUpdate = (ctx: Blake2b, input: Uint8Array) => {
  for (let i = 0; i < input.length; i++) {
    // buffer full?
    if (ctx.c === 128) {
      ctx.t += ctx.c // add counters
      blake2bCompress(ctx, false) // compress (not last)
      ctx.c = 0 // counter to zero
    }
    ctx.b[ctx.c++] = +input[i]
  }
}

// Completes a BLAKE2b streaming hash
// Returns a Uint8Array containing the message digest
/**
 * @function blake2bFinal
 * @description completes a BLAKE2b streaming hash, returns a Uint8Array containing the message digest
 */
const blake2bFinal = (ctx: Blake2b, out: Uint8Array) => {
  ctx.t += ctx.c // mark last block offset

  // fill up with zeros
  while (ctx.c < 128) {
    ctx.b[ctx.c++] = 0
  }
  blake2bCompress(ctx, true) // final block flag = 1

  for (let i = 0; i < ctx.outlen; i++) {
    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))
  }
  return out
}

const toHex = (n: number) => {
  if (n < 16) return `0${n.toString(16)}`
  return n.toString(16)
}

const hexSlice = (buf: string | Uint8Array) => {
  let str = ''
  for (let i = 0; i < buf.length; i++) str += toHex(+buf[i])
  return str
}

/* eslint-disable prettier/prettier */
// reusable parameterBlock
const parameterBlock = new Uint8Array([
  0,
  0,
  0,
  0, //  0: outlen, keylen, fanout, depth 0,
  0,
  0,
  0,
  0, //  4: leaf length, sequential mode 0,
  0,
  0,
  0,
  0, //  8: node offset
  0,
  0,
  0,
  0, // 12: node offset
  0,
  0,
  0,
  0, // 16: node depth, inner length, rfu
  0,
  0,
  0,
  0, // 20: rfu
  0,
  0,
  0,
  0, // 24: rfu
  0,
  0,
  0,
  0, // 28: rfu
  0,
  0,
  0,
  0, // 32: salt
  0,
  0,
  0,
  0, // 36: salt
  0,
  0,
  0,
  0, // 40: salt
  0,
  0,
  0,
  0, // 44: salt
  0,
  0,
  0,
  0, // 48: personal
  0,
  0,
  0,
  0, // 52: personal
  0,
  0,
  0,
  0, // 56: personal
  0,
  0,
  0,
  0, // 60: personal
])
/* eslint-enable prettier/prettier */

export class Blake2b {
  b: Uint8Array

  h: Uint32Array

  t: number

  c: number

  outlen: number

  // Creates a BLAKE2b hashing context
  // Requires an output length between 1 and 64 bytes
  // Takes an optional Uint8Array key
  constructor(outlen: number, key: Uint8Array | null, salt: Uint8Array | null, personal: Uint8Array | null) {
    // zero out parameterBlock before usage
    parameterBlock.fill(0)
    // state, 'param block'

    this.b = new Uint8Array(128)
    this.h = new Uint32Array(16)
    this.t = 0 // input count
    this.c = 0 // pointer within buffer
    this.outlen = outlen // output length in bytes

    parameterBlock[0] = outlen
    if (key) parameterBlock[1] = key.length
    parameterBlock[2] = 1 // fanout
    parameterBlock[3] = 1 // depth

    if (salt) parameterBlock.set(salt, 32)
    if (personal) parameterBlock.set(personal, 48)

    // initialize hash state
    for (let i = 0; i < 16; i++) {
      this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4)
    }

    // key the hash, if applicable
    if (key) {
      blake2bUpdate(this, key)
      // at the end
      this.c = 128
    }
  }

  update = (input: Uint8Array) => {
    if (!(input instanceof Uint8Array)) {
      throw new InputTypeException()
    }
    blake2bUpdate(this, input)
    return this
  }

  digest = (out: 'binary' | 'hex') => {
    const buf = !out || out === 'binary' || out === 'hex' ? new Uint8Array(this.outlen) : out
    if (!(buf instanceof Uint8Array)) {
      throw new OutTypeException()
    }
    if (buf.length < this.outlen) {
      throw new Error('out must have at least outlen bytes of space')
    }
    blake2bFinal(this, buf)
    if (out === 'hex') return hexSlice(buf)
    return buf
  }

  final = this.digest
}

export const blake2b = (
  outlen: number,
  key: Uint8Array | null,
  salt: Uint8Array | null,
  personal: Uint8Array | null,
  noAssert?: boolean,
) => {
  if (noAssert !== true) {
    if (outlen < BYTES_MIN) {
      throw new OutLenTooSmallException(outlen, BYTES_MIN)
    }
    if (outlen > BYTES_MAX) {
      throw new OutLenTooLargeException(outlen, BYTES_MAX)
    }
    if (key !== null) {
      if (!(key instanceof Uint8Array)) {
        throw new KeyTypeException()
      }
      if (key.length < KEYBYTES_MIN) {
        throw new KeyLenTooSmallException(key.length, KEYBYTES_MIN)
      }
      if (key.length > KEYBYTES_MAX) {
        throw new KeyLenTooLargeException(key.length, KEYBYTES_MAX)
      }
    }
    if (salt !== null) {
      if (!(salt instanceof Uint8Array)) {
        throw new SaltTypeException()
      }
      if (salt.length !== SALTBYTES) {
        throw new SaltLenException(salt.length, SALTBYTES)
      }
    }
    if (personal !== null) {
      if (!(personal instanceof Uint8Array)) {
        throw new PersonalTypeException()
      }
      if (personal.length !== PERSONALBYTES) {
        throw new PersonalLenException(personal.length, PERSONALBYTES)
      }
    }
  }

  return new Blake2b(outlen, key, salt, personal)
}


================================================
File: packages/branch/src/utils/crypto/ecpair.ts
================================================
import { ec as EC } from 'elliptic'

import { hexToBytes } from '../convertors'
import {
  HexStringWithout0xException,
  ParameterRequiredException,
  PrivateKeyLenException,
  SignMessageException,
} from '../exceptions'

const ec = new EC('secp256k1')

export interface Options {
  compressed?: boolean
}

export class ECPair {
  protected key: EC.KeyPair

  public compressed: boolean = false

  constructor(
    sk: Uint8Array | string,
    { compressed = true }: Options = {
      compressed: true,
    },
  ) {
    if (sk === undefined) throw new ParameterRequiredException('Private key')

    if (typeof sk === 'string' && !sk.startsWith('0x')) {
      throw new HexStringWithout0xException(sk)
    }

    if (typeof sk === 'string' && sk.length !== 66) {
      throw new PrivateKeyLenException()
    }

    if (typeof sk === 'object' && sk.byteLength !== 32) {
      throw new PrivateKeyLenException()
    }

    this.key = ec.keyFromPrivate(typeof sk === 'string' ? sk.replace(/^0x/, '') : sk)
    this.compressed = compressed
  }

  get privateKey() {
    return `0x${this.key.getPrivate('hex').padStart(64, '0')}`
  }

  get publicKey() {
    return `0x${this.key.getPublic(this.compressed, 'hex') as string}`
  }

  public getPrivateKey = (enc: 'hex' = 'hex') => {
    if (enc === 'hex') {
      return this.privateKey
    }
    return this.key.getPrivate(enc)
  }

  public getPublicKey = (enc: 'hex' | 'array') => {
    if (enc === 'hex') {
      return this.publicKey
    }
    return this.key.getPublic(this.compressed, enc)
  }

  public sign = (message: string | Uint8Array): string => {
    const msg = typeof message === 'string' ? hexToBytes(message) : message
    return `0x${this.key
      .sign(msg, {
        canonical: true,
      })
      .toDER('hex')}`
  }

  public verify = (message: string | Buffer, sig: string | Buffer) => {
    const msg = typeof message === 'string' ? hexToBytes(message) : message
    const signature = typeof sig === 'string' ? hexToBytes(sig) : sig
    return this.key.verify(msg, signature as any)
  }

  public signRecoverable = (message: string | Uint8Array): string => {
    const msg = typeof message === 'string' ? hexToBytes(message) : message
    const { r, s, recoveryParam } = this.key.sign(msg, {
      canonical: true,
    })
    if (recoveryParam === null) throw new SignMessageException()
    const fmtR = r.toString(16).padStart(64, '0')
    const fmtS = s.toString(16).padStart(64, '0')
    return `0x${fmtR}${fmtS}0${recoveryParam}`
  }
}


================================================
File: packages/branch/src/utils/crypto/index.ts
================================================
export { bech32, bech32m } from 'bech32'
export { blake2b } from './blake2b'
export { blake160 } from './blake160'
export * from './ecpair'


================================================
File: packages/branch/src/utils/exceptions/ErrorCode.ts
================================================
export enum ErrorCode {
  ParameterInvalid = 101,
  ParameterRequired,
  SignMessageFailed,
  AddressInvalid,
  ReconciliationFailed,
}


================================================
File: packages/branch/src/utils/exceptions/address.ts
================================================
import { ErrorCode } from './ErrorCode'

export class AddressPayloadException extends Error {
  code = ErrorCode.AddressInvalid

  type: 'short' | 'full' | undefined

  constructor(payload: Uint8Array, type?: 'short' | 'full') {
    super(`'${payload}' is not a valid ${type ? `${type} version ` : ''}address payload`)
    this.type = type
  }
}

export class AddressException extends Error {
  code = ErrorCode.AddressInvalid

  type: 'short' | 'full' | undefined

  constructor(addr: string, stack: string, type?: 'short' | 'full') {
    super(`'${addr}' is not a valid ${type ? `${type} version ` : ''}address`)
    this.type = type
    this.stack = stack
  }
}

export class CodeHashException extends Error {
  code = ErrorCode.AddressInvalid

  constructor(codeHash: string) {
    super(`'${codeHash}' is not a valid code hash`)
  }
}

export class HashTypeException extends Error {
  code = ErrorCode.AddressInvalid

  constructor(hashType: string) {
    super(`'${hashType}' is not a valid hash type`)
  }
}

export class AddressFormatTypeException extends Error {
  code = ErrorCode.AddressInvalid

  constructor(type: number) {
    super(`0x${type.toString(16).padStart(2, '0')} is not a valid address format type`)
  }
}

export class AddressFormatTypeAndEncodeMethodNotMatchException extends Error {
  code = ErrorCode.AddressInvalid

  constructor(type: number, bech32Type: 'bech32' | 'bech32m' | 'unknown' = 'unknown') {
    super(`Address format type 0x${type.toString(16).padStart(2, '0')} doesn't match encode method ${bech32Type}`)
  }
}


================================================
File: packages/branch/src/utils/exceptions/blake2b.ts
================================================
import { ErrorCode } from './ErrorCode'

export class OutLenTooSmallException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor(outlen: number, minLen: number) {
    super(`Expect outlen to be at least ${minLen}, but ${outlen} received`)
  }
}

export class OutLenTooLargeException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor(outlen: number, maxLen: number) {
    super(`Expect outlen to be at most ${maxLen}, but ${outlen} received`)
  }
}

export class KeyLenTooSmallException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor(keyLen: number, minLen: number) {
    super(`Expect key length to be at least ${minLen}, but ${keyLen} received`)
  }
}

export class KeyLenTooLargeException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor(keyLen: number, maxLen: number) {
    super(`Expect key length to be at most ${maxLen}, but ${keyLen} received`)
  }
}

export class OutTypeException extends TypeError {
  code = ErrorCode.ParameterInvalid

  constructor() {
    super(`Expect out to be "binary", "hex", Uint8Array, or Buffer`)
  }
}

export class SaltTypeException extends TypeError {
  code = ErrorCode.ParameterInvalid

  constructor() {
    super(`Expect salt to be Uint8Array or Buffer`)
  }
}

export class SaltLenException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor(saltLen: number, requiredLen: number) {
    super(`Expect salt length to be ${requiredLen}, but ${saltLen} received`)
  }
}

export class InputTypeException extends TypeError {
  code = ErrorCode.ParameterInvalid

  constructor() {
    super(`Expect input to be Uint8Array or Buffer`)
  }
}

export class KeyTypeException extends TypeError {
  code = ErrorCode.ParameterInvalid

  constructor() {
    super(`Expect key to be Uint8Array or Buffer`)
  }
}

export class PersonalTypeException extends TypeError {
  code = ErrorCode.ParameterInvalid

  constructor() {
    super(`Expect PERSONAL to be Uint8Array or Buffer`)
  }
}

export class PersonalLenException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor(personalLen: number, requiredLen: number) {
    super(`Expect PERSONAL length to be ${requiredLen}, but ${personalLen} received`)
  }
}


================================================
File: packages/branch/src/utils/exceptions/common.ts
================================================
import { ErrorCode } from './ErrorCode'

export class ParameterRequiredException extends Error {
  code = ErrorCode.ParameterRequired

  constructor(name: string) {
    super(`${name} is required`)
  }
}

export class SignMessageException extends Error {
  code = ErrorCode.SignMessageFailed

  constructor() {
    super('Fail to sign the message')
  }
}


================================================
File: packages/branch/src/utils/exceptions/index.ts
================================================
export * from './ErrorCode'
export * from './common'
export * from './string'
export * from './address'
export * from './blake2b'
export * from './privateKey'
export * from './transaction'


================================================
File: packages/branch/src/utils/exceptions/privateKey.ts
================================================
import { ErrorCode } from './ErrorCode'

export class PrivateKeyLenException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor() {
    super('Private key has invalid length')
  }
}


================================================
File: packages/branch/src/utils/exceptions/string.ts
================================================
import { ErrorCode } from './ErrorCode'

export class HexStringException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor(hex: string) {
    super(`${hex} is an invalid hex string`)
  }
}

export class HexStringWithout0xException extends Error {
  code = ErrorCode.ParameterInvalid

  constructor(hex: string) {
    super(`Hex string ${hex} should start with 0x`)
  }
}


================================================
File: packages/branch/src/utils/exceptions/transaction.ts
================================================
import { ErrorCode } from './ErrorCode'

export class ReconciliationException extends Error {
  code = ErrorCode.ReconciliationFailed

  constructor() {
    super(`Fail to reconcile transaction, try to increase extra count or check the transaction`)
  }
}


================================================
File: packages/branch/src/utils/serialization/basic.ts
================================================
import { hexToBytes, bytesToHex, toUint32Le } from '../convertors'

export const offsetSize = 4 // 4 bytes

export const fullLengthSize = 4 // 4 bytes

export const getOffsets = (elmLengths: number[]) => {
  const headerLength = fullLengthSize + offsetSize * elmLengths.length
  const offsets = [headerLength]
  elmLengths.forEach((_, idx: number) => {
    if (idx) {
      offsets.push(offsets[offsets.length - 1] + elmLengths[idx - 1])
    }
  })
  return offsets
}

/**
 * @name serializeArray
 * @description The array is a fixed-size type: it has a fixed-size type and a fixed length.
 *              The size of an array is the size of inner type times the length.
 *              Serialize an array only need to serialize all items in it. No extra cost for array itself.
 */
export const serializeArray = (array: string | Uint8Array) => {
  if (typeof array !== 'string' && !Array.isArray(array)) {
    throw new TypeError('The array to be serialized should by type of string or bytes')
  }
  const bytes = typeof array === 'string' ? hexToBytes(array) : array
  return bytesToHex(bytes)
}

/**
 * @name serializeStruct
 * @type Struct is a fixed-size type: all fields in struct is fixed-size,
 *              and it has a fixed quantity of fields.
 * @description The size of a struct is the sum of all fields' size.
 *              Serialize a struct only need to serialize all fields in it.
 *              No extra cost for struct itself.
 *              Fields in a struct are stored in the order they are declared.
 */
export const serializeStruct = (struct: Map<string, string | Uint8Array>) => {
  let res = ''
  struct.forEach(value => {
    res += serializeArray(value).slice(2)
  })
  return `0x${res}`
}

/**
 * @name serializeFixVec
 * @type FixVec, a fixed-size vector is a vector whose items have a fixed size
 * @tutorial There are two steps of serializing a serializeFixVec
 *           1. Serialize the length as a 32 bit unsigned integer in little-endian
 *           2. Serialize all items in it
 */
export const serializeFixVec = (fixVec: string | (string | Uint8Array)[]): string => {
  if (typeof fixVec !== 'string' && !Array.isArray(fixVec)) {
    throw new TypeError('The fixed vector to be serialized should be a string or an array of bytes')
  }
  const vec = typeof fixVec === 'string' ? [...hexToBytes(fixVec)].map(b => `0x${b.toString(16)}`) : fixVec
  const serializedItemVec = vec.map(item => serializeArray(item).slice(2))
  const header = toUint32Le(`0x${serializedItemVec.length.toString(16)}`).slice(2)
  return `0x${header}${serializedItemVec.join('')}`
}

/**
 * @name serializeDynVec
 * @type DynVec, a dynamic-size vector is a vector whose items have a dynamic size
 * @tutorial There are three steps of serializing a dynvec
 *           1. Serialize the full size in bytes as a 32 bit unsigned integer in little-endian
 *           2. Serialize all offset of the items as 32 bit unsigned integer in little-endian
 *           3. Serialize all items in it
 */
export const serializeDynVec = (dynVec: (string | Uint8Array)[]) => {
  if (!Array.isArray(dynVec)) {
    throw new TypeError('The dynamic vector to be serialized should be an array of bytes')
  }
  const serializedItemVec = dynVec.map(item => serializeArray(item).slice(2))
  const body = serializedItemVec.join('')
  let offsets = ''
  if (serializedItemVec.length) {
    offsets = getOffsets(serializedItemVec.map(item => item.length / 2))
      .map(offset => toUint32Le(`0x${offset.toString(16)}`).slice(2))
      .join('')
  }
  const headerLength = fullLengthSize + offsetSize * serializedItemVec.length
  const fullLength = toUint32Le(`0x${(headerLength + body.length / 2).toString(16)}`).slice(2)
  return `0x${fullLength}${offsets}${body}`
}

/**
 * @name serializeTable
 * @type Table, the table is a dynamic-size type, It can be considered as a dynvec but the length is fixed.
 */
export const serializeTable = (table: Map<string, string | Uint8Array>) => {
  const bodyElms: string[] = []
  table.forEach(value => {
    bodyElms.push(serializeArray(value).slice(2))
  })
  const body = bodyElms.join('')
  const headerLength = fullLengthSize + offsetSize * table.size
  const fullLength = toUint32Le(`0x${(headerLength + body.length / 2).toString(16)}`).slice(2)
  const offsets = getOffsets(bodyElms.map(arg => arg.length / 2))
    .map(offset => toUint32Le(`0x${offset.toString(16)}`).slice(2))
    .join('')
  return `0x${fullLength}${offsets}${body}`
}

/**
 * @name serializeOption
 * @type Option is a dynamic-size type
 * @tutorial Serialize an option depends on whether it is empty or not
 *           1. if it's empty, there is zero bytes(the size is 0)
 *           2. if it's not empty, just serialize the inner item(the size is same as the inner item's size)
 */
export const serializeOption = (innerItem?: string) => (!innerItem ? '0x' : innerItem)


================================================
File: packages/branch/src/utils/serialization/index.ts
================================================
export * from './basic'
export * from './script'
export * from './transaction'


================================================
File: packages/branch/src/utils/serialization/script.ts
================================================
import { serializeArray, serializeTable, serializeFixVec } from './basic'
import { ParameterRequiredException } from '../exceptions'
import { BranchComponents } from '../../types'

export const serializeCodeHash = (codeHash: BranchComponents.Hash256) => serializeArray(codeHash)

export const serializeHashType = (hashType: BranchComponents.ScriptHashType) => {
  if (hashType === 'data') return '0x00'
  if (hashType === 'type') return '0x01'
  if (hashType === 'data1') return '0x02'
  if (hashType === 'data2') return '0x04'
  throw new TypeError("Hash type must be either of 'data' or 'type'")
}

export const serializeArgs = (args: string) => serializeFixVec(args)

export const serializeScript = (script: BranchComponents.Script) => {
  if (!script) throw new ParameterRequiredException('Script')
  const { codeHash = '', hashType, args = '' } = script
  const serializedCodeHash = serializeCodeHash(codeHash)
  const serializedHashType = serializeHashType(hashType)
  const serializedArgs = serializeArgs(args)
  const table = new Map([
    ['codeHash', serializedCodeHash],
    ['hashType', serializedHashType],
    ['args', serializedArgs],
  ])
  return serializeTable(table)
}


================================================
File: packages/branch/src/utils/serialization/transaction.ts
================================================
import { serializeScript } from './script'
import { toUint32Le, toUint64Le } from '../convertors'
import {
  serializeArray,
  serializeStruct,
  serializeTable,
  serializeDynVec,
  serializeFixVec,
  serializeOption,
} from './basic'
import { BranchComponents } from '../../types'

export const serializeVersion = (version: BranchComponents.Version) => toUint32Le(version)

export const serializeOutPoint = (outPoint: BranchComponents.OutPoint | null) => {
  if (!outPoint) return ''
  const struct = new Map<string, string>([
    ['txHash', outPoint.txHash],
    ['index', toUint32Le(outPoint.index)],
  ])
  return serializeStruct(struct)
}

export const serializeDepType = (type: BranchComponents.DepType) => {
  if (type === 'code') return '0x00'
  if (type === 'depGroup') return '0x01'
  throw new TypeError("Dep type must be either of 'code' or 'depGroup'")
}

export const serializeCellDep = (dep: BranchComponents.CellDep) => {
  const serializedOutPoint = serializeOutPoint(dep.outPoint)
  const serializedDepType = serializeDepType(dep.depType)
  const struct = new Map<string, string>([
    ['outPoint', serializedOutPoint],
    ['depType', serializedDepType],
  ])
  return serializeStruct(struct)
}

export const serializeCellDeps = (cellDeps: BranchComponents.CellDep[]) => {
  const serializedCellDepList = cellDeps.map(dep => serializeCellDep(dep))
  return serializeFixVec(serializedCellDepList)
}

export const serializeHeaderDeps = (deps: BranchComponents.Hash256[]) => {
  const serializedHeaderDepList = deps.map(dep => serializeArray(dep))
  return serializeFixVec(serializedHeaderDepList)
}

export const serializeInput = (input: BranchComponents.CellInput) => {
  const serializedOutPoint = serializeOutPoint(input.previousOutput)
  const serializedSince = toUint64Le(input.since)
  const struct = new Map([
    ['since', serializedSince],
    ['previousOutput', serializedOutPoint],
  ])
  return serializeStruct(struct)
}

export const serializeInputs = (inputs: BranchComponents.CellInput[]) => {
  const serializedInputList = inputs.map(input => serializeInput(input))
  return serializeFixVec(serializedInputList)
}

export const serializeOutput = (output: BranchComponents.CellOutput) => {
  const serializedCapacity = toUint64Le(output.capacity)
  const serializedLockScript = serializeScript(output.lock)
  const serialiedTypeScript = output.type ? serializeScript(output.type) : ''
  const table = new Map([
    ['capacity', serializedCapacity],
    ['lock', serializedLockScript],
    ['type', serialiedTypeScript],
  ])
  return serializeTable(table)
}

export const serializeOutputs = (outputs: BranchComponents.CellOutput[]) => {
  const serializedOutputList = outputs.map(output => serializeOutput(output))
  return serializeDynVec(serializedOutputList)
}

export const serializeOutputsData = (outputsData: BranchComponents.Hash[]) => {
  const serializedOutputsDatumList = outputsData.map(datum => serializeFixVec(datum))
  return serializeDynVec(serializedOutputsDatumList)
}

export const serializeWitnessArgs = (witnessArgs: BranchComponents.WitnessArgs) => {
  const { lock, inputType, outputType } = witnessArgs
  const table = new Map([
    ['lock', serializeOption(lock) === '0x' ? '0x' : serializeFixVec(lock!)],
    ['inputType', serializeOption(inputType) === '0x' ? '0x' : serializeFixVec(inputType!)],
    ['outputType', serializeOption(outputType) === '0x' ? '0x' : serializeFixVec(outputType!)],
  ])
  return serializeTable(table)
}

export const serializeWitnesses = (witnesses: BranchComponents.Witness[]) => {
  const serializedWitnessList = witnesses.map(witness => serializeFixVec(witness))
  return serializeDynVec(serializedWitnessList)
}

export const serializeRawTransaction = (
  rawTransaction: Pick<
    BranchComponents.RawTransaction,
    'version' | 'cellDeps' | 'headerDeps' | 'inputs' | 'outputs' | 'outputsData'
  >,
) => {
  const serializedVersion = serializeVersion(rawTransaction.version)
  const serializedCellDeps = serializeCellDeps(rawTransaction.cellDeps)
  const serializedHeaderDeps = serializeHeaderDeps(rawTransaction.headerDeps)
  const serializedInputs = serializeInputs(rawTransaction.inputs)
  const serializedOutputs = serializeOutputs(rawTransaction.outputs)
  const serializedOutputsData = serializeOutputsData(rawTransaction.outputsData)

  const table = new Map([
    ['version', serializedVersion],
    ['cellDeps', serializedCellDeps],
    ['headerDeps', serializedHeaderDeps],
    ['inputs', serializedInputs],
    ['outputs', serializedOutputs],
    ['outputsData', serializedOutputsData],
  ])

  return serializeTable(table)
}

export const serializeTransaction = (rawTransaction: BranchComponents.RawTransaction) => {
  const serializedRawTransaction = serializeRawTransaction(rawTransaction)
  const serializedWitnesses = serializeWitnesses(rawTransaction.witnesses || [])

  const table = new Map([
    ['raw', serializedRawTransaction],
    ['witnesses', serializedWitnesses],
  ])
  return serializeTable(table)
}


================================================
File: packages/branch/src/utils/size/index.ts
================================================
import { BranchComponents } from '../../types'
import { serializeWitnessArgs, serializeTransaction } from '../serialization/transaction'

const codeHashOccupied = 32
const hashTypeOccupied = 1

export const scriptOccupied = (script: BranchComponents.Script) => {
  return script.args.slice(2).length / 2 + codeHashOccupied + hashTypeOccupied
}

export const cellOccupied = (cell: BranchComponents.CellOutput) => {
  return 8 + scriptOccupied(cell.lock) + (cell.type ? scriptOccupied(cell.type) : 0)
}

/**
 * @function calculateTransactionFee
 * @description calculate the transaction fee by transaction size and fee rate
 * @param {string | number} transactionSize, the byte size of transaction
 * @param {string | number} feeRate, the fee rate with unit of satoshi/KB
 * @returns {string} transactionFee
 */
export const calculateTransactionFee = (transactionSize: string | number, feeRate: string | number): string => {
  const ratio = BigInt(1000)
  const base = BigInt(`${transactionSize}`) * BigInt(`${feeRate}`)
  const fee = base / ratio
  if (fee * ratio < base) {
    return `0x${(fee + BigInt(1)).toString(16)}`
  }
  return `0x${fee.toString(16)}`
}

/**
 * @name getTransactionSize
 * @description return the size of a transaction cost in a block, 4 bytes more than the serialized transaction.
 * @param {Object} transaction - Raw transaction
 * @returns {String} Virtual size of a transaction in a block
 */
export const getTransactionSize = (transaction: BranchComponents.RawTransactionToSign) => {
  const tx = {
    ...transaction,
    witnesses: transaction.witnesses.map(wit => (typeof wit === 'string' ? wit : serializeWitnessArgs(wit))),
  }
  // extra 4 bytes size due to the cost of serialized tx in a block
  const VIRTUAL_COST = 4
  const serializedTransaction = serializeTransaction(tx)
  return serializedTransaction.slice(2).length / 2 + VIRTUAL_COST
}


================================================
File: packages/leap/package.json
================================================
{
  "name": "@utxo-stack/leap",
  "version": "0.1.0",
  "description": "JavaScript SDK for leaping between CKB and branch chains of UTXO Stack",
  "homepage": "https://github.com/ckb-cell/utxo-stack-sdk#readme",
  "license": "MIT",
  "sideEffects": false,
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "src"
  ],
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./package.json": "./package.json"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ckb-cell/utxo-stack-sdk.git"
  },
  "scripts": {
    "build": "tsup",
    "test": "vitest"
  },
  "bugs": {
    "url": "https://github.com/ckb-cell/utxo-stack-sdk/issues"
  },
  "dependencies": {
    "axios": "1.7.2",
    "@ckb-lumos/codec": "^0.23.0",
    "@ckb-lumos/base": "^0.23.0",
    "@utxo-stack/branch": "workspace:*"
  },
  "devDependencies": {
    "@ckb-lumos/molecule": "0.0.0-canary-66bbbfd-20240805132534"
  }
}


================================================
File: packages/leap/tsconfig.json
================================================
{
  "compilerOptions": {
    "allowJs": true,
    "baseUrl": ".",
    "downlevelIteration": true,
    "esModuleInterop": true,
    "isolatedModules": true,
    "jsx": "react-jsx",
    "lib": ["es2021", "dom"],
    "module": "esnext",
    "moduleResolution": "node",
    "noEmit": true,
    "noImplicitAny": true,
    "noUncheckedIndexedAccess": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "strictNullChecks": true,
    "target": "es2021"
  },
  "exclude": ["**/node_modules/**", "**/dist/**", "*/**/debug.ts"],
  "include": ["src/**/*", "tsup-base.config.ts", "eslintrc.js"]
}


================================================
File: packages/leap/tsup.config.ts
================================================
import { defineConfig } from 'tsup'

import { dependencies, name } from './package.json'

import config from '../../tsup-base.config'

export default defineConfig({
  ...config,
  name,
  external: Object.keys(dependencies),
  platform: 'neutral',
})


================================================
File: packages/leap/vitest.config.mts
================================================
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    watch: false,
    reporters: ['verbose'],
  },
});


================================================
File: packages/leap/src/index.ts
================================================
export * from './molecule/generated/leap'
export * from './request'
export * from './types'
export * from './utils'
export * from './constants'


================================================
File: packages/leap/src/constants/branch.ts
================================================
import { BranchComponents } from '@utxo-stack/branch'

const TestnetInfo = {
  Secp256k1LockDep: {
    outPoint: {
      txHash: '0xde836a3233cbd4904f60ec9bfb5a2055d15314b751c9c0d4acff37d5e402f003',
      index: '0x0',
    },
    depType: 'depGroup',
  } as BranchComponents.CellDep,

  XUDTTypeScript: {
    codeHash: '0x6283a479a3cf5d4276cd93594de9f1827ab9b55c7b05b3d28e4c2e0a696cfefd',
    hashType: 'type',
    args: '',
  } as BranchComponents.Script,

  XUDTTypeDep: {
    outPoint: {
      txHash: '0x1c21f865d6564c7b54e5a616adee365378b41b92e5c941cdf45c572c0c9e5811',
      index: '0x5',
    },
    depType: 'code',
  } as BranchComponents.CellDep,

  RequestLockScript: {
    codeHash: '0x1a1e4fef34f5982906f745b048fe7b1089647e82346074e0f32c2ece26cf6b1e',
    hashType: 'type',
    args: '',
  } as BranchComponents.Script,

  RequestLockDep: {
    outPoint: {
      txHash: '0x1c21f865d6564c7b54e5a616adee365378b41b92e5c941cdf45c572c0c9e5811',
      index: '0x6',
    },
    depType: 'code',
  } as BranchComponents.CellDep,
}

const MainnetInfo = {
  Secp256k1LockDep: {
    outPoint: {
      txHash: '0xde836a3233cbd4904f60ec9bfb5a2055d15314b751c9c0d4acff37d5e402f003',
      index: '0x0',
    },
    depType: 'depGroup',
  } as BranchComponents.CellDep,

  XUDTTypeScript: {
    codeHash: '0x6283a479a3cf5d4276cd93594de9f1827ab9b55c7b05b3d28e4c2e0a696cfefd',
    hashType: 'type',
    args: '',
  } as BranchComponents.Script,

  XUDTTypeDep: {
    outPoint: {
      txHash: '0x1c21f865d6564c7b54e5a616adee365378b41b92e5c941cdf45c572c0c9e5811',
      index: '0x5',
    },
    depType: 'code',
  } as BranchComponents.CellDep,

  RequestLockScript: {
    codeHash: '0x1a1e4fef34f5982906f745b048fe7b1089647e82346074e0f32c2ece26cf6b1e',
    hashType: 'type',
    args: '',
  } as BranchComponents.Script,

  RequestLockDep: {
    outPoint: {
      txHash: '0x1c21f865d6564c7b54e5a616adee365378b41b92e5c941cdf45c572c0c9e5811',
      index: '0x6',
    },
    depType: 'code',
  } as BranchComponents.CellDep,
}

export const getBranchSecp256k1CellDep = (isMainnet: boolean) =>
  isMainnet ? MainnetInfo.Secp256k1LockDep : TestnetInfo.Secp256k1LockDep

export const getBranchXudtTypeScript = (isMainnet: boolean) =>
  isMainnet ? MainnetInfo.XUDTTypeScript : TestnetInfo.XUDTTypeScript
export const getBranchXudtDep = (isMainnet: boolean) => (isMainnet ? MainnetInfo.XUDTTypeDep : TestnetInfo.XUDTTypeDep)

export const getBranchRequestLockScript = (isMainnet: boolean) =>
  isMainnet ? MainnetInfo.RequestLockScript : TestnetInfo.RequestLockScript
export const getBranchRequestDep = (isMainnet: boolean) =>
  isMainnet ? MainnetInfo.RequestLockDep : TestnetInfo.RequestLockDep


================================================
File: packages/leap/src/constants/ckb.ts
================================================
import { BranchComponents } from '@utxo-stack/branch'

const TestnetInfo = {
  Secp256k1LockDep: {
    outPoint: {
      txHash: '0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37',
      index: '0x0',
    },
    depType: 'depGroup',
  } as BranchComponents.CellDep,

  XUDTTypeScript: {
    codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
    hashType: 'type',
    args: '',
  } as BranchComponents.Script,

  XUDTTypeDep: {
    outPoint: {
      txHash: '0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f',
      index: '0x0',
    },
    depType: 'code',
  } as BranchComponents.CellDep,

  RequestLockScript: {
    codeHash: '0x2fca96b423bd2b4d0d4b5098bf7a3e74ea42c3f2e1bb6f973f7c1c68adfa3d9c',
    hashType: 'type',
    args: '',
  } as BranchComponents.Script,

  RequestLockDep: {
    outPoint: {
      txHash: '0x79e7a69cf175cde1d8f4fd1f7f5c9792cf07b4099a4a75946393ac6616b7aa0b',
      index: '0x0',
    },
    depType: 'code',
  } as BranchComponents.CellDep,
}

const MainnetInfo = {
  Secp256k1LockDep: {
    outPoint: {
      txHash: '0x71a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c',
      index: '0x0',
    },
    depType: 'depGroup',
  } as BranchComponents.CellDep,

  XUDTTypeScript: {
    codeHash: '0x50bd8d6680b8b9cf98b73f3c08faf8b2a21914311954118ad6609be6e78a1b95',
    hashType: 'data1',
    args: '',
  } as BranchComponents.Script,

  XUDTTypeDep: {
    outPoint: {
      txHash: '0xc07844ce21b38e4b071dd0e1ee3b0e27afd8d7532491327f39b786343f558ab7',
      index: '0x0',
    },
    depType: 'code',
  } as BranchComponents.CellDep,

  RequestLockScript: {
    codeHash: '0x2fca96b423bd2b4d0d4b5098bf7a3e74ea42c3f2e1bb6f973f7c1c68adfa3d9c',
    hashType: 'type',
    args: '',
  } as BranchComponents.Script,

  RequestLockDep: {
    outPoint: {
      txHash: '0x79e7a69cf175cde1d8f4fd1f7f5c9792cf07b4099a4a75946393ac6616b7aa0b',
      index: '0x0',
    },
    depType: 'code',
  } as BranchComponents.CellDep,
}

export const getCkbSecp256k1CellDep = (isMainnet: boolean) =>
  isMainnet ? MainnetInfo.Secp256k1LockDep : TestnetInfo.Secp256k1LockDep

export const getCkbXudtTypeScript = (isMainnet: boolean) =>
  isMainnet ? MainnetInfo.XUDTTypeScript : TestnetInfo.XUDTTypeScript
export const getCkbXudtDep = (isMainnet: boolean) => (isMainnet ? MainnetInfo.XUDTTypeDep : TestnetInfo.XUDTTypeDep)

export const getCkbRequestLockScript = (isMainnet: boolean) =>
  isMainnet ? MainnetInfo.RequestLockScript : TestnetInfo.RequestLockScript
export const getCkbRequestDep = (isMainnet: boolean) =>
  isMainnet ? MainnetInfo.RequestLockDep : TestnetInfo.RequestLockDep


================================================
File: packages/leap/src/constants/index.ts
================================================
export * from './branch'
export * from './ckb'

export const CKB_UNIT = BigInt(10000_0000)
export const MAX_FEE = BigInt(2000_0000)
export const CKB_MIN_CAPACITY = BigInt(61) * BigInt(10000_0000)
export const WITNESS_LOCK_DEFAULT_PLACEHOLDER = 65


================================================
File: packages/leap/src/molecule/customized.ts
================================================
import { createFixedBytesCodec, number } from '@ckb-lumos/codec'

const { Uint32, Uint64, Uint128 } = number

/**
 * <pre>
 *  0b0000000 0
 *    ───┬─── │
 *       │    ▼
 *       │   type - the last bit indicates locating contract(script) via type hash and runs in the latest version of the CKB-VM
 *       │
 *       ▼
 * data* - the first 7 bits indicate locating contract(script) via code hash and runs in the specified version of the CKB-VM
 * </pre>
 *
 */
const HashType = createFixedBytesCodec<'data' | 'type' | 'data1' | 'data2'>({
  byteLength: 1,
  // prettier-ignore
  pack: (hashType) => {
    if (hashType === "type")  return new Uint8Array([0b0000000_1]);
    if (hashType === "data")  return new Uint8Array([0b0000000_0]);
    if (hashType === "data1") return new Uint8Array([0b0000001_0]);
    if (hashType === "data2") return new Uint8Array([0b0000010_0]);

    throw new Error('Unknown hash type')
  },
  unpack: byte => {
    if (byte[0] === 0b0000000_1) return 'type'
    if (byte[0] === 0b0000000_0) return 'data'
    if (byte[0] === 0b0000001_0) return 'data1'
    if (byte[0] === 0b0000010_0) return 'data2'

    throw new Error('Unknown hash type')
  },
})

const DepType = createFixedBytesCodec<'code' | 'depGroup'>({
  byteLength: 1,
  // prettier-ignore
  pack: (depType) => {
    if (depType === "code")     return new Uint8Array([0]);
    if (depType === "depGroup") return new Uint8Array([1]);

    throw new Error("Unknown dep type");
  },
  unpack: byte => {
    if (byte[0] === 0) return 'code'
    if (byte[0] === 1) return 'depGroup'

    throw new Error('Unknown dep type')
  },
})

export { Uint32, Uint64, Uint128, DepType, HashType }


================================================
File: packages/leap/src/molecule/lumos-molecule-codegen.json
================================================
{
  "objectKeyFormat": "camelcase",
  "prepend": "import { Uint32, Uint64, Uint128, DepType, HashType } from './customized'",
  "schemaDir": "schemas",
  "outDir": "generated"
}


================================================
File: packages/leap/src/molecule/generated/blockchain.ts
================================================
// This file is generated by @ckb-lumos/molecule, please do not modify it manually.
/* eslint-disable */
import { bytes, createBytesCodec, createFixedBytesCodec, molecule } from '@ckb-lumos/codec'
import { Uint32, Uint64, Uint128, DepType, HashType } from '../customized'

const { array, vector, union, option, struct, table, byteVecOf } = molecule

const fallbackBytesCodec = byteVecOf({ pack: bytes.bytify, unpack: bytes.hexify })

function createFallbackFixedBytesCodec(byteLength: number) {
  return createFixedBytesCodec({
    pack: bytes.bytify,
    unpack: bytes.hexify,
    byteLength,
  })
}

const byte = createFallbackFixedBytesCodec(1)

export const Byte32 = createFallbackFixedBytesCodec(32)

export const Uint256 = createFallbackFixedBytesCodec(32)

export const Bytes = fallbackBytesCodec

export const BytesOpt = option(Bytes)

export const BytesOptVec = vector(BytesOpt)

export const BytesVec = vector(Bytes)

export const Byte32Vec = vector(Byte32)

export const ProposalShortId = createFallbackFixedBytesCodec(10)

export const ProposalShortIdVec = vector(ProposalShortId)

export const Script = table(
  {
    codeHash: Byte32,
    hashType: byte,
    args: Bytes,
  },
  ['codeHash', 'hashType', 'args'],
)

export const OutPoint = struct(
  {
    txHash: Byte32,
    index: Uint32,
  },
  ['txHash', 'index'],
)

export const CellInput = struct(
  {
    since: Uint64,
    previousOutput: OutPoint,
  },
  ['since', 'previousOutput'],
)

export const CellDep = struct(
  {
    outPoint: OutPoint,
    depType: byte,
  },
  ['outPoint', 'depType'],
)

export const RawHeader = struct(
  {
    version: Uint32,
    compactTarget: Uint32,
    timestamp: Uint64,
    number: Uint64,
    epoch: Uint64,
    parentHash: Byte32,
    transactionsRoot: Byte32,
    proposalsHash: Byte32,
    extraHash: Byte32,
    dao: Byte32,
  },
  [
    'version',
    'compactTarget',
    'timestamp',
    'number',
    'epoch',
    'parentHash',
    'transactionsRoot',
    'proposalsHash',
    'extraHash',
    'dao',
  ],
)

export const Header = struct(
  {
    raw: RawHeader,
    nonce: Uint128,
  },
  ['raw', 'nonce'],
)

export const UncleBlock = table(
  {
    header: Header,
    proposals: ProposalShortIdVec,
  },
  ['header', 'proposals'],
)

export const CellbaseWitness = table(
  {
    lock: Script,
    message: Bytes,
  },
  ['lock', 'message'],
)

export const WitnessArgs = table(
  {
    lock: BytesOpt,
    inputType: BytesOpt,
    outputType: BytesOpt,
  },
  ['lock', 'inputType', 'outputType'],
)

export const ScriptOpt = option(Script)

export const UncleBlockVec = vector(UncleBlock)

export const CellDepVec = vector(CellDep)

export const CellInputVec = vector(CellInput)

export const CellOutput = table(
  {
    capacity: Uint64,
    lock: Script,
    type_: ScriptOpt,
  },
  ['capacity', 'lock', 'type_'],
)

export const CellOutputVec = vector(CellOutput)

export const RawTransaction = table(
  {
    version: Uint32,
    cellDeps: CellDepVec,
    headerDeps: Byte32Vec,
    inputs: CellInputVec,
    outputs: CellOutputVec,
    outputsData: BytesVec,
  },
  ['version', 'cellDeps', 'headerDeps', 'inputs', 'outputs', 'outputsData'],
)

export const Transaction = table(
  {
    raw: RawTransaction,
    witnesses: BytesVec,
  },
  ['raw', 'witnesses'],
)

export const TransactionVec = vector(Transaction)

export const Block = table(
  {
    header: Header,
    uncles: UncleBlockVec,
    transactions: TransactionVec,
    proposals: ProposalShortIdVec,
  },
  ['header', 'uncles', 'transactions', 'proposals'],
)

export const BlockV1 = table(
  {
    header: Header,
    uncles: UncleBlockVec,
    transactions: TransactionVec,
    proposals: ProposalShortIdVec,
    extension: Bytes,
  },
  ['header', 'uncles', 'transactions', 'proposals', 'extension'],
)


================================================
File: packages/leap/src/molecule/generated/leap.ts
================================================
// This file is generated by @ckb-lumos/molecule, please do not modify it manually.
/* eslint-disable */
import { bytes, createFixedBytesCodec, molecule } from '@ckb-lumos/codec'
import { Uint64, Uint128 } from '../customized'
import { Byte32, Bytes, Byte32Vec, OutPoint } from './blockchain'

const { vector, union, struct, table } = molecule

function createFallbackFixedBytesCodec(byteLength: number) {
  return createFixedBytesCodec({
    pack: bytes.bytify,
    unpack: bytes.hexify,
    byteLength,
  })
}

const byte = createFallbackFixedBytesCodec(1)

export const CrossChainQueue = table(
  {
    lockedAssets: Byte32,
    outbox: Byte32Vec,
    inbox: Byte32Vec,
  },
  ['lockedAssets', 'outbox', 'inbox'],
)

export const Transfer = struct(
  {
    ownerLockHash: Byte32,
    amount: Uint128,
    assetType: Byte32,
  },
  ['ownerLockHash', 'amount', 'assetType'],
)

export const Message = union(
  {
    Transfer,
  },
  ['Transfer'],
)

export const RequestContent = table(
  {
    requestType: byte,
    initialChainId: Bytes,
    targetChainId: Bytes,
    message: Message,
  },
  ['requestType', 'initialChainId', 'targetChainId', 'message'],
)

export const RequestLockArgs = table(
  {
    requestTypeHash: Byte32,
    ownerLockHash: Byte32,
    timeout: Uint64,
    content: RequestContent,
  },
  ['requestTypeHash', 'ownerLockHash', 'timeout', 'content'],
)

export const Request = table(
  {
    requestCell: OutPoint,
    requestContent: RequestContent,
  },
  ['requestCell', 'requestContent'],
)

export const Requests = vector(Request)


================================================
File: packages/leap/src/molecule/schemas/blockchain.mol
================================================
array Uint32 [byte; 4];
array Uint64 [byte; 8];
array Uint128 [byte; 16];
array Byte32 [byte; 32];
array Uint256 [byte; 32];

vector Bytes <byte>;
option BytesOpt (Bytes);
vector BytesOptVec <BytesOpt>;
vector BytesVec <Bytes>;
vector Byte32Vec <Byte32>;

option ScriptOpt (Script);

array ProposalShortId [byte; 10];

vector UncleBlockVec <UncleBlock>;
vector TransactionVec <Transaction>;
vector ProposalShortIdVec <ProposalShortId>;
vector CellDepVec <CellDep>;
vector CellInputVec <CellInput>;
vector CellOutputVec <CellOutput>;

table Script {
    code_hash:      Byte32,
    hash_type:      byte,
    args:           Bytes,
}

struct OutPoint {
    tx_hash:        Byte32,
    index:          Uint32,
}

struct CellInput {
    since:           Uint64,
    previous_output: OutPoint,
}

table CellOutput {
    capacity:       Uint64,
    lock:           Script,
    type_:          ScriptOpt,
}

struct CellDep {
    out_point:      OutPoint,
    dep_type:       byte,
}

table RawTransaction {
    version:        Uint32,
    cell_deps:      CellDepVec,
    header_deps:    Byte32Vec,
    inputs:         CellInputVec,
    outputs:        CellOutputVec,
    outputs_data:   BytesVec,
}

table Transaction {
    raw:            RawTransaction,
    witnesses:      BytesVec,
}

struct RawHeader {
    version:                Uint32,
    compact_target:         Uint32,
    timestamp:              Uint64,
    number:                 Uint64,
    epoch:                  Uint64,
    parent_hash:            Byte32,
    transactions_root:      Byte32,
    proposals_hash:         Byte32,
    extra_hash:             Byte32,
    dao:                    Byte32,
}

struct Header {
    raw:                    RawHeader,
    nonce:                  Uint128,
}

table UncleBlock {
    header:                 Header,
    proposals:              ProposalShortIdVec,
}

table Block {
    header:                 Header,
    uncles:                 UncleBlockVec,
    transactions:           TransactionVec,
    proposals:              ProposalShortIdVec,
}

table BlockV1 {
    header:                 Header,
    uncles:                 UncleBlockVec,
    transactions:           TransactionVec,
    proposals:              ProposalShortIdVec,
    extension:              Bytes,
}

table CellbaseWitness {
    lock:    Script,
    message: Bytes,
}

table WitnessArgs {
    lock:                   BytesOpt,          
    input_type:             BytesOpt,          
    output_type:            BytesOpt,          
}


================================================
File: packages/leap/src/molecule/schemas/leap.mol
================================================
import blockchain;

table RequestLockArgs {
    // request contract, unlock if input cells type_hash match this
    request_type_hash: Byte32,
    // lock hash can be used to cancel request
    owner_lock_hash: Byte32,
    // request timeout
    timeout: Uint64,
    // content of request
    content: RequestContent,
}

// RGB++ cross chain contract
table CrossChainQueue {
  // locked assets root
  locked_assets: Byte32,
  // Outbox
  outbox: Byte32Vec,
  // Inbox
  inbox: Byte32Vec,
}

// Vector of request body
vector Requests <Request>;

// Cross chain Request
table Request {
  // out_point of request cell
  request_cell: OutPoint,
  // request content
  request_content: RequestContent,
}

// Cross chain Request content
table RequestContent {
  // 1:ckb->branch, 2:branch->ckb, 3:branch->branch
  request_type: byte,
  // initial chain id
  initial_chain_id: Bytes,
  // target chain id
  target_chain_id: Bytes,
  // message
  message: Message,
}

// All cross chain messages
union Message {
  Transfer,
}

// Transfer
struct Transfer {
  owner_lock_hash: Byte32,
  amount: Uint128,
  // asset type
  asset_type: Byte32,
}


================================================
File: packages/leap/src/request/branch.ts
================================================
import {
  addressToScript,
  append0x,
  BranchComponents,
  calculateTransactionFee,
  EMPTY_WITNESS_ARGS,
  getTransactionSize,
  scriptToHash,
  toUint128Le,
} from '@utxo-stack/branch'
import {
  getBranchRequestLockScript,
  getBranchXudtDep,
  getBranchXudtTypeScript,
  MAX_FEE,
  WITNESS_LOCK_DEFAULT_PLACEHOLDER,
} from 'src/constants'
import { LeapingFromBranchToCkbParams, RequestType } from 'src/types'
import { buildRequestLockArgs } from './lock-args'
import { calculateCellCapacity } from 'src/utils'

// xUDT args on Branch Dev chain
const TEMP_LEAP_BRANCH_XUDT_ARGS = '0xc219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd'

export const genLeapingFromBranchToCkbRequestTx = async ({
  branchCollector,
  fromBranchAddress,
  assetTypeScript,
  transferAmount,
  requestTypeHash,
  timeout,
  isMainnet,
  feeRate,
  witnessLockPlaceholderSize,
}: LeapingFromBranchToCkbParams) => {
  const fromLock = addressToScript(fromBranchAddress)
  const requestLockScript: BranchComponents.Script = {
    ...getBranchRequestLockScript(isMainnet),
    args: buildRequestLockArgs({
      ownerLockHash: scriptToHash(fromLock),
      assetTypeHash: scriptToHash(assetTypeScript),
      transferAmount,
      requestType: RequestType.BranchToCkb,
      requestTypeHash,
      timeout,
    }),
  }

  const branchXUDTType = {
    ...getBranchXudtTypeScript(isMainnet),
    args: TEMP_LEAP_BRANCH_XUDT_ARGS,
  }

  const requestCellCapacity = calculateCellCapacity(requestLockScript)
  const requestOutput: BranchComponents.CellOutput = {
    lock: requestLockScript,
    type: branchXUDTType,
    capacity: append0x(requestCellCapacity.toString(16)),
  }

  const assetCells = await branchCollector.getCells({ lock: fromLock, type: branchXUDTType })
  const { udtInputs, sumUdtInputsCapacity, sumAmount } = branchCollector.collectUdtInputs(assetCells, transferAmount)

  let actualInputsCapacity = sumUdtInputsCapacity
  let sumUdtOutputCapacity = requestCellCapacity
  let inputs = udtInputs

  const outputs: BranchComponents.CellOutput[] = [requestOutput]
  const outputsData = [append0x(toUint128Le(transferAmount))]

  if (sumAmount > transferAmount) {
    const udtChangeCapacity = calculateCellCapacity(fromLock, branchXUDTType)
    outputs.push({
      lock: fromLock,
      type: branchXUDTType,
      capacity: append0x(udtChangeCapacity.toString(16)),
    })
    outputsData.push(append0x(toUint128Le(sumAmount - transferAmount)))
    sumUdtOutputCapacity += udtChangeCapacity
  }

  const txFee = MAX_FEE
  if (sumUdtInputsCapacity <= sumUdtOutputCapacity) {
    let emptyCells = await branchCollector.getCells({
      lock: fromLock,
    })
    if (!emptyCells || emptyCells.length === 0) {
      throw new Error('The address has no empty cells')
    }
    emptyCells = emptyCells.filter(cell => !cell.output.type)
    const needCapacity = sumUdtOutputCapacity - sumUdtInputsCapacity
    const { inputs: emptyInputs, sumInputsCapacity: sumEmptyCapacity } = branchCollector.collectInputs(
      emptyCells,
      needCapacity,
      txFee,
    )
    inputs = [...inputs, ...emptyInputs]
    actualInputsCapacity += sumEmptyCapacity
  }

  let changeCapacity = actualInputsCapacity - sumUdtOutputCapacity
  outputs.push({
    lock: fromLock,
    capacity: append0x(changeCapacity.toString(16)),
  })
  outputsData.push('0x')

  const witnesses = inputs.map((_, index) => (index === 0 ? EMPTY_WITNESS_ARGS : '0x'))

  const cellDeps = [getBranchXudtDep(isMainnet)]

  const unsignedTx = {
    version: '0x0',
    cellDeps,
    headerDeps: [],
    inputs,
    outputs,
    outputsData,
    witnesses,
  }

  if (txFee === MAX_FEE) {
    const txSize = getTransactionSize(unsignedTx) + (witnessLockPlaceholderSize ?? WITNESS_LOCK_DEFAULT_PLACEHOLDER)
    const estimatedTxFee = BigInt(calculateTransactionFee(txSize, feeRate ?? 1100))
    changeCapacity -= estimatedTxFee
    unsignedTx.outputs[unsignedTx.outputs.length - 1].capacity = append0x(changeCapacity.toString(16))
  }

  return unsignedTx
}

export const genLeapingCapacityToCkbRequestTx = async ({
  branchCollector,
  fromCkbAddress,
  fromBranchAddress,
  assetTypeScript,
  transferAmount,
  requestTypeHash,
  timeout,
  isMainnet,
  feeRate,
  witnessLockPlaceholderSize,
}: LeapingFromBranchToCkbParams) => {
  const fromBranchLock = addressToScript(fromBranchAddress)
  const requestLockScript: BranchComponents.Script = {
    ...getBranchRequestLockScript(isMainnet),
    args: buildRequestLockArgs({
      ownerLockHash: scriptToHash(addressToScript(fromCkbAddress!)),
      assetTypeHash: scriptToHash(assetTypeScript),
      transferAmount,
      requestType: RequestType.BranchToCkb,
      requestTypeHash,
      timeout,
    }),
  }

  const requestCellCapacity = calculateCellCapacity(requestLockScript)
  const requestOutput: BranchComponents.CellOutput = {
    lock: requestLockScript,
    capacity: append0x(requestCellCapacity.toString(16)),
  }

  const outputs: BranchComponents.CellOutput[] = [requestOutput]
  const outputsData = ['0x']

  const txFee = MAX_FEE
  let emptyCells = await branchCollector.getCells({
    lock: fromBranchLock,
  })
  if (!emptyCells || emptyCells.length === 0) {
    throw new Error('The address has no empty cells')
  }
  emptyCells = emptyCells.filter(cell => !cell.output.type)
  const { inputs, sumInputsCapacity } = branchCollector.collectInputs(emptyCells, requestCellCapacity, txFee)

  let changeCapacity = sumInputsCapacity - requestCellCapacity
  outputs.push({
    lock: fromBranchLock,
    capacity: append0x(changeCapacity.toString(16)),
  })
  outputsData.push('0x')

  const witnesses = inputs.map((_, index) => (index === 0 ? EMPTY_WITNESS_ARGS : '0x'))

  const cellDeps: BranchComponents.CellDep[] = []

  const unsignedTx = {
    version: '0x0',
    cellDeps,
    headerDeps: [],
    inputs,
    outputs,
    outputsData,
    witnesses,
  }

  if (txFee === MAX_FEE) {
    const txSize = getTransactionSize(unsignedTx) + (witnessLockPlaceholderSize ?? WITNESS_LOCK_DEFAULT_PLACEHOLDER)
    const estimatedTxFee = BigInt(calculateTransactionFee(txSize, feeRate ?? 1100))
    changeCapacity -= estimatedTxFee
    unsignedTx.outputs[unsignedTx.outputs.length - 1].capacity = append0x(changeCapacity.toString(16))
  }

  return unsignedTx
}


================================================
File: packages/leap/src/request/ckb.ts
================================================
import {
  addressToScript,
  append0x,
  BranchComponents,
  calculateTransactionFee,
  EMPTY_WITNESS_ARGS,
  getTransactionSize,
  Hex,
  scriptToHash,
  toUint128Le,
} from '@utxo-stack/branch'
import {
  getCkbRequestDep,
  getCkbRequestLockScript,
  getCkbXudtDep,
  MAX_FEE,
  WITNESS_LOCK_DEFAULT_PLACEHOLDER,
} from 'src/constants'
import { LeapingFromCkbToBranchParams, RequestType, UnlockCkbRequestCellsParams } from 'src/types'
import { buildRequestLockArgs } from './lock-args'
import { calculateCellCapacity } from 'src/utils'
import { RequestLockArgs } from 'src/molecule/generated/leap'

export const genLeapingFromCkbToBranchRequestTx = async ({
  ckbCollector,
  fromCkbAddress,
  assetTypeScript,
  transferAmount,
  requestTypeHash,
  timeout,
  targetChainId,
  isMainnet,
  feeRate,
  witnessLockPlaceholderSize,
}: LeapingFromCkbToBranchParams) => {
  const fromLock = addressToScript(fromCkbAddress)
  const requestLockScript: BranchComponents.Script = {
    ...getCkbRequestLockScript(isMainnet),
    args: buildRequestLockArgs({
      ownerLockHash: scriptToHash(fromLock),
      assetTypeHash: scriptToHash(assetTypeScript),
      transferAmount,
      requestType: RequestType.CkbToBranch,
      requestTypeHash,
      timeout,
      targetChainId,
    }),
  }
  const requestCellCapacity = calculateCellCapacity(requestLockScript)
  const requestOutput: BranchComponents.CellOutput = {
    lock: requestLockScript,
    type: assetTypeScript,
    capacity: append0x(requestCellCapacity.toString(16)),
  }

  const assetCells = await ckbCollector.getCells({ lock: fromLock, type: assetTypeScript })
  const { udtInputs, sumUdtInputsCapacity, sumAmount } = ckbCollector.collectUdtInputs(assetCells, transferAmount)

  let actualInputsCapacity = sumUdtInputsCapacity
  let sumUdtOutputCapacity = requestCellCapacity
  let inputs = udtInputs

  const outputs: BranchComponents.CellOutput[] = [requestOutput]
  const outputsData = [append0x(toUint128Le(transferAmount))]

  if (sumAmount > transferAmount) {
    const udtChangeCapacity = calculateCellCapacity(fromLock, assetTypeScript)
    outputs.push({
      lock: fromLock,
      type: assetTypeScript,
      capacity: append0x(udtChangeCapacity.toString(16)),
    })
    outputsData.push(append0x(toUint128Le(sumAmount - transferAmount)))
    sumUdtOutputCapacity += udtChangeCapacity
  }

  const txFee = MAX_FEE
  if (sumUdtInputsCapacity <= sumUdtOutputCapacity) {
    let emptyCells = await ckbCollector.getCells({
      lock: fromLock,
    })
    if (!emptyCells || emptyCells.length === 0) {
      throw new Error('The address has no empty cells')
    }
    emptyCells = emptyCells.filter(cell => !cell.output.type)
    const needCapacity = sumUdtOutputCapacity - sumUdtInputsCapacity
    const { inputs: emptyInputs, sumInputsCapacity: sumEmptyCapacity } = ckbCollector.collectInputs(
      emptyCells,
      needCapacity,
      txFee,
    )
    inputs = [...inputs, ...emptyInputs]
    actualInputsCapacity += sumEmptyCapacity
  }

  let changeCapacity = actualInputsCapacity - sumUdtOutputCapacity
  outputs.push({
    lock: fromLock,
    capacity: append0x(changeCapacity.toString(16)),
  })
  outputsData.push('0x')

  const witnesses = inputs.map((_, index) => (index === 0 ? EMPTY_WITNESS_ARGS : '0x'))

  const cellDeps = [getCkbXudtDep(isMainnet)]

  const unsignedTx = {
    version: '0x0',
    cellDeps,
    headerDeps: [],
    inputs,
    outputs,
    outputsData,
    witnesses,
  }

  if (txFee === MAX_FEE) {
    const txSize = getTransactionSize(unsignedTx) + (witnessLockPlaceholderSize ?? WITNESS_LOCK_DEFAULT_PLACEHOLDER)
    const estimatedTxFee = BigInt(calculateTransactionFee(txSize, feeRate ?? 1100))
    changeCapacity -= estimatedTxFee
    unsignedTx.outputs[unsignedTx.outputs.length - 1].capacity = append0x(changeCapacity.toString(16))
  }

  return unsignedTx
}

export const genUnlockingCkbRequestCellsTx = async ({
  ckbCollector,
  ckbAddress,
  requestOutPoints,
  isMainnet,
  feeRate,
  witnessLockPlaceholderSize,
}: UnlockCkbRequestCellsParams) => {
  const requestTransactions = await ckbCollector.getTransactionsByOutPoints(requestOutPoints)
  const { codeHash, hashType } = getCkbRequestLockScript(isMainnet)
  const lock = addressToScript(ckbAddress)

  const inputs: BranchComponents.CellInput[] = []
  const outputs: BranchComponents.CellOutput[] = []
  const outputsData: Hex[] = []
  for (let index = 0; index < requestOutPoints.length; index++) {
    const tx = requestTransactions[index]
    const outPoint = requestOutPoints[index]
    const txIndex = parseInt(outPoint.index, 16)
    const requestOutput = tx.outputs[txIndex]
    if (requestOutput) {
      if (requestOutput.lock.hashType !== hashType || requestOutput.lock.codeHash !== codeHash) {
        throw new Error('No request cells found with specific out points')
      }
      const { timeout } = RequestLockArgs.unpack(requestOutput.lock.args)
      inputs.push({
        previousOutput: outPoint,
        since: append0x(timeout.toHexString()),
      })
      outputs.push({
        ...requestOutput,
        lock,
      })
      outputsData.push(tx.outputsData[txIndex])
    }
  }

  // Collect an empty cell to pay transaction fee
  let emptyCells = await ckbCollector.getCells({
    lock,
  })
  if (!emptyCells || emptyCells.length === 0) {
    throw new Error('The address has no empty cells')
  }
  emptyCells = emptyCells.filter(cell => !cell.output.type)
  const payFeeCell = emptyCells[0]
  inputs.push({
    previousOutput: payFeeCell.outPoint,
    since: '0x0',
  })
  outputs.push(payFeeCell.output)
  outputsData.push(payFeeCell.outputData)

  const witnesses = inputs.map((_, index) => (index === inputs.length - 1 ? EMPTY_WITNESS_ARGS : '0x'))

  const cellDeps = [getCkbXudtDep(isMainnet), getCkbRequestDep(isMainnet)]

  const unsignedTx = {
    version: '0x0',
    cellDeps,
    headerDeps: [],
    inputs,
    outputs,
    outputsData,
    witnesses,
  }

  const txSize = getTransactionSize(unsignedTx) + (witnessLockPlaceholderSize ?? WITNESS_LOCK_DEFAULT_PLACEHOLDER)
  const estimatedTxFee = BigInt(calculateTransactionFee(txSize, feeRate ?? 1100))
  const lastCapacity = BigInt(outputs[outputs.length - 1].capacity)
  unsignedTx.outputs[outputs.length - 1].capacity = append0x((lastCapacity - estimatedTxFee).toString(16))

  return unsignedTx
}


================================================
File: packages/leap/src/request/index.ts
================================================
export * from './lock-args'
export * from './ckb'
export * from './branch'


================================================
File: packages/leap/src/request/lock-args.ts
================================================
import { Hex, RequestLockArgsParams } from 'src/types'
import { RequestLockArgs } from '../molecule/generated/leap'
import { bytesToHex, append0x } from '@utxo-stack/branch'
import { u8ToHex } from 'src/utils/hex'
import { generateSince } from '@ckb-lumos/base/lib/since'

export type TimeoutParams = Parameters<typeof generateSince>[0]

export const generateTimeout = (params: TimeoutParams) => generateSince(params)

export const buildRequestLockArgs = ({
  ownerLockHash,
  assetTypeHash,
  transferAmount,
  requestType,
  requestTypeHash,
  timeout,
  initialChainId,
  targetChainId,
}: RequestLockArgsParams): Hex => {
  const lockArgs = RequestLockArgs.pack({
    requestTypeHash: append0x(requestTypeHash),
    ownerLockHash: append0x(ownerLockHash),
    timeout: timeout ?? '0x0',
    content: {
      requestType: append0x(u8ToHex(requestType)),
      initialChainId: append0x(initialChainId ?? '0x'),
      targetChainId: append0x(targetChainId ?? '0x'),
      message: {
        type: 'Transfer',
        value: {
          ownerLockHash: append0x(ownerLockHash),
          assetType: append0x(assetTypeHash),
          amount: transferAmount,
        },
      },
    },
  })
  return bytesToHex(lockArgs)
}


================================================
File: packages/leap/src/request/request.spec.ts
================================================
import { describe, it, expect } from 'vitest'
import { buildRequestLockArgs } from './lock-args'
import { RequestType } from '../types'
import { RequestContent, RequestLockArgs } from 'src/molecule/generated/leap'
import { hexToUtf8 } from 'src/utils'

describe('Leap request schemas', () => {
  // The test data is from Request lock contract test
  it('buildRequestLockArgs', () => {
    const targetChainId = '0x6d6f636b65642d6272616e63682d636861696e2d6964'
    const ownerLockHash = '0x4ea7f0a0a5289e4bf1bfe729ab4ade3cda05f41ae1d99794141d6918f6c7bdec'
    const assetTypeHash = '0x1ff51f0a2b27b23adedbbac692468db95eea8ebf7db51ee9cfa522a1c278d118'
    const requestTypeHash = '0xfdb601ecdd52d5e72bd07b5c856160274fed20f823bb1836a91ec5d8e2bf25a3'
    const transferAmount = BigInt(80)

    const requestLockArgs = buildRequestLockArgs({
      ownerLockHash,
      assetTypeHash,
      targetChainId,
      requestType: RequestType.CkbToBranch,
      requestTypeHash,
      transferAmount,
    })
    expect(requestLockArgs).toBe(
      '0xe30000001400000034000000540000005c000000fdb601ecdd52d5e72bd07b5c856160274fed20f823bb1836a91ec5d8e2bf25a34ea7f0a0a5289e4bf1bfe729ab4ade3cda05f41ae1d99794141d6918f6c7bdec000000000000000087000000140000001500000019000000330000000100000000160000006d6f636b65642d6272616e63682d636861696e2d6964000000004ea7f0a0a5289e4bf1bfe729ab4ade3cda05f41ae1d99794141d6918f6c7bdec500000000000000000000000000000001ff51f0a2b27b23adedbbac692468db95eea8ebf7db51ee9cfa522a1c278d118',
    )
  })

  it('unpack requestLockArgs', () => {
    const requestLockArgsHex =
      '0xe10000001400000034000000540000005c000000d9911b00409a9f443ae7ed6b00d59dd1e33979e4c986478cf7863fcb7f62941b562e4e8a2f64a3e9c24beb4b7dd002d0ad3b842d0cc77924328e36ad114e3ebe180000000000008085000000140000001500000019000000310000000100000000140000002f6272616e63685f6465762f313535653766336200000000562e4e8a2f64a3e9c24beb4b7dd002d0ad3b842d0cc77924328e36ad114e3ebe00205fa012000000000000000000000029b0b1a449b0e7fb08881e1d810a6abbedb119e9c4ffc76eebbc757fb214f091'

    const { timeout, ownerLockHash, requestTypeHash, content } = RequestLockArgs.unpack(requestLockArgsHex)
    const { requestType, targetChainId } = content
    expect(timeout.toHexString()).toBe('0x8000000000000018')
    expect(ownerLockHash).toBe('0x562e4e8a2f64a3e9c24beb4b7dd002d0ad3b842d0cc77924328e36ad114e3ebe')
    expect(requestTypeHash).toBe('0xd9911b00409a9f443ae7ed6b00d59dd1e33979e4c986478cf7863fcb7f62941b')

    expect(requestType).toBe('0x01')
    expect(hexToUtf8(targetChainId)).toBe('/branch_dev/155e7f3b')
  })
})


================================================
File: packages/leap/src/types/index.ts
================================================
import { BranchComponents, Collector } from '@utxo-stack/branch'

export type Hex = string
export type CKBAddress = string

//  1:ckb->branch, 2:branch->ckb, 3:branch->branch
export enum RequestType {
  CkbToBranch = 1,
  BranchToCkb = 2,
  BranchToBranch = 3,
}

export interface RequestLockArgsParams {
  ownerLockHash: Hex
  assetTypeHash: Hex
  transferAmount: bigint
  requestType: RequestType
  requestTypeHash: Hex
  timeout?: Hex
  initialChainId?: Hex
  targetChainId?: Hex
}

export interface LeapingFromCkbToBranchParams {
  ckbCollector: Collector
  fromCkbAddress: CKBAddress
  assetTypeScript: BranchComponents.Script
  transferAmount: bigint
  requestTypeHash: Hex
  isMainnet: boolean
  timeout?: Hex
  targetChainId?: Hex
  feeRate?: number
  witnessLockPlaceholderSize?: number
}

export interface UnlockCkbRequestCellsParams {
  ckbCollector: Collector
  ckbAddress: CKBAddress
  requestOutPoints: BranchComponents.OutPoint[]
  isMainnet: boolean
  feeRate?: number
  witnessLockPlaceholderSize?: number
}

export interface LeapingFromBranchToCkbParams {
  branchCollector: Collector
  fromCkbAddress?: CKBAddress
  fromBranchAddress: CKBAddress
  assetTypeScript: BranchComponents.Script
  transferAmount: bigint
  requestTypeHash: Hex
  isMainnet: boolean
  timeout?: Hex
  targetChainId?: Hex
  feeRate?: number
  witnessLockPlaceholderSize?: number
}

export interface UnlockBranchRequestCellsParams {
  branchCollector: Collector
  fromBranchAddress: CKBAddress
  requestOutPoints: BranchComponents.OutPoint[]
  isMainnet: boolean
  feeRate?: number
  witnessLockPlaceholderSize?: number
}


================================================
File: packages/leap/src/utils/hex.ts
================================================
import { bytesToHex, hexToBytes } from '@utxo-stack/branch'

const ArrayBufferToHex = (arrayBuffer: ArrayBuffer): string => {
  return Array.prototype.map.call(new Uint8Array(arrayBuffer), x => ('00' + x.toString(16)).slice(-2)).join('')
}

export const u8ToHex = (u8: number): string => {
  const buffer = new ArrayBuffer(1)
  const view = new DataView(buffer)
  view.setUint8(0, u8)
  return ArrayBufferToHex(buffer)
}

export const utf8ToHex = (text: string) => {
  let result = text.trim()
  if (result.startsWith('0x')) {
    return result
  }
  result = bytesToHex(new TextEncoder().encode(result))
  return result
}

export const hexToUtf8 = (hex: string) => {
  let result = hex.trim()
  try {
    result = new TextDecoder().decode(hexToBytes(result))
  } catch (error) {
    console.error('hexToUtf8 error:', error)
  }
  return result
}


================================================
File: packages/leap/src/utils/index.ts
================================================
export * from './hex'
export * from './size'


================================================
File: packages/leap/src/utils/size.ts
================================================
import { BranchComponents, remove0x } from '@utxo-stack/branch'
import { CKB_UNIT } from 'src/constants'

// Minimum occupied capacity and 1 ckb for transaction fee
// Assume UDT cell data size is 16bytes
// The default length of xut type args is 32 bytes
const DEFAULT_UDT_ARGS_SIZE = 32
const CELL_CAPACITY_SIZE = 8
const UDT_CELL_DATA_SIZE = 16
export const calculateCellCapacity = (lock: BranchComponents.Script, udtType?: BranchComponents.Script): bigint => {
  const lockArgsSize = remove0x(lock.args).length / 2
  const typeArgsSize = udtType ? remove0x(udtType.args).length / 2 : DEFAULT_UDT_ARGS_SIZE
  const lockSize = 33 + lockArgsSize
  const typeSize = 33 + typeArgsSize
  const cellSize = lockSize + typeSize + CELL_CAPACITY_SIZE + UDT_CELL_DATA_SIZE
  return BigInt(cellSize + 1) * CKB_UNIT
}


================================================
File: .github/workflows/tests.yml
================================================
name: Unit Tests

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout rgbpp-sdk
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - uses: pnpm/action-setup@v3
        name: Install -g pnpm
        with:
          version: 8
          run_install: false

      - name: Install Deps
        run: pnpm install

      - name: Compile
        run: pnpm lint

      - name: Compile
        run: pnpm build

      - name: Test
        run: pnpm test


