Directory structure:
└── utxostack-mempool.js/
    ├── README.md
    ├── LICENSE
    ├── README-bitcoin.md
    ├── README-liquid.md
    ├── nodemon.json
    ├── package.json
    ├── tsconfig.json
    ├── .editorconfig
    ├── .eslintrc.js
    ├── .prettierrc
    ├── examples/
    │   ├── html/
    │   │   ├── bitcoin/
    │   │   │   ├── addresses.html
    │   │   │   ├── blocks.html
    │   │   │   ├── difficulty.html
    │   │   │   ├── fees.html
    │   │   │   ├── lightning.html
    │   │   │   ├── mempool.html
    │   │   │   ├── transactions.html
    │   │   │   └── websocket.html
    │   │   └── liquid/
    │   │       ├── addresses.html
    │   │       ├── assets.html
    │   │       ├── blocks.html
    │   │       ├── fees.html
    │   │       ├── mempool.html
    │   │       ├── transactions.html
    │   │       └── websocket.html
    │   └── nodejs/
    │       ├── bitcoin/
    │       │   ├── addresses.ts
    │       │   ├── blocks.ts
    │       │   ├── difficulty.ts
    │       │   ├── fees.ts
    │       │   ├── lightning.ts
    │       │   ├── mempool.ts
    │       │   ├── transactions.ts
    │       │   └── websocket.ts
    │       └── liquid/
    │           ├── addresses.ts
    │           ├── assets.ts
    │           ├── blocks.ts
    │           ├── fees.ts
    │           ├── mempool.ts
    │           ├── transactions.ts
    │           └── websocket.ts
    └── src/
        ├── index.ts
        ├── app/
        │   ├── bitcoin/
        │   │   ├── addresses.ts
        │   │   ├── blocks.ts
        │   │   ├── difficulty.ts
        │   │   ├── fees.ts
        │   │   ├── lightning.ts
        │   │   ├── mempool.ts
        │   │   ├── transactions.ts
        │   │   └── websocket.ts
        │   └── liquid/
        │       ├── addresses.ts
        │       ├── assets.ts
        │       ├── blocks.ts
        │       ├── fees.ts
        │       ├── mempool.ts
        │       ├── transactions.ts
        │       └── websocket.ts
        ├── interfaces/
        │   ├── index.ts
        │   ├── bitcoin/
        │   │   ├── addresses.ts
        │   │   ├── blocks.ts
        │   │   ├── difficulty.ts
        │   │   ├── fees.ts
        │   │   ├── lightning.ts
        │   │   ├── mempool.ts
        │   │   ├── transactions.ts
        │   │   └── websockets.ts
        │   └── liquid/
        │       ├── assets.ts
        │       ├── blocks.ts
        │       ├── transactions.ts
        │       └── websockets.ts
        └── services/
            ├── api/
            │   └── index.ts
            └── ws/
                ├── ws-client-browser.ts
                └── ws-client-node.ts

================================================
File: README.md
================================================
# Mempool JS API

[![npm version](https://img.shields.io/npm/v/@mempool/mempool.js.svg?style=flat-square)](https://www.npmjs.org/package/@mempool/mempool.js)
[![NPM](https://img.shields.io/david/mempool/mempool.js.svg?style=flat-square)](https://david-dm.org/mempool/mempool.js#info=dependencies)
[![Known Vulnerabilities](https://snyk.io/test/github/mempool/mempool.js/badge.svg?style=flat-square)](https://snyk.io/test/github/mempool/mempool.js)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg?style=flat-square)](https://opensource.org/licenses/MIT)

NPM package module for Mempool APIs.

Documentation: [https://mempool.space/api](https://mempool.space/api)

---

## **Installation**

### **ES Modules**

Install the npm module.

```bash
# npm
$ npm install @mempool/mempool.js --save

# yarn
$ yarn add @mempool/mempool.js
```

Or if you're not into package management, just [download a ZIP](https://github.com/mempool/mempool.js/archive/refs/heads/main.zip) file.

Import the module.

```js
import mempoolJS from '@mempool/mempool.js';

// default mempool.space endpointsconst { bitcoin, liquid } = mempoolJS();

// (optional) your custom endpoints
const { bitcoin } = mempoolJS({
  protocol: 'https', // optional, defaults to http for localhost, otherwise https
  hostname: 'mempool.space',
  network: 'testnet' // 'signet' | 'testnet' | 'mainnet',
  config: { // optional axios request config to add to requests
    headers: {
      authorization: 'Basic auth'
    }
  }
});

// Liquid API
const { liquid } = mempoolJS({
  protocol: 'https', // optional, defaults to http for localhost, otherwise https
  hostname: 'liquid.network',
  network: 'liquid' // 'liquid' | 'liquidtestnet'
});
```

### **CommonJS**

Include the line below in the `head` tag of your html file.

```html
<script type="text/javascript" src="https://mempool.space/mempool.js"></script>
```

Call `mempoolJS()` function to access the API methods.

```js
// default mempool.space endpoints
const { bitcoin } = mempoolJS();

// (optional) your custom endpoints
const { bitcoin } = mempoolJS({
  protocol: 'https', // optional, defaults to http for localhost, otherwise https
  hostname: 'mempool.space',
  network: 'testnet', // 'signet' | 'testnet' | 'mainnet'
});

// Liquid API
const { liquid } = mempoolJS({
  protocol: 'https', // optional, defaults to http for localhost, otherwise https
  hostname: 'liquid.network',
  network: 'liquid' // 'liquid' | 'liquidtestnet'
});
```

---

## **Features**

- [Bitcoin](./README-bitcoin.md)
  - [Addresses](./README-bitcoin.md#get-address)
  - [Blocks](./README-bitcoin.md#get-blocks)
  - [Difficulty Adjustment](./README-bitcoin.md#get-difficulty-adjustment)
  - [Fees](./README-bitcoin.md#get-fees)
  - [Lightning](./README-bitcoin.md#get-network-stats)
  - [Mempool](./README-bitcoin.md#get-mempool)
  - [Transactions](./README-bitcoin.md#get-transactions)
  - [Websocket](./README-bitcoin.md#init-websocket)
- [Liquid](./README-liquid.md#get-address)
  - [Addresses](./README-liquid.md#get-address)
  - [Assets](./README-liquid.md#get-address)
  - [Blocks](./README-liquid.md#get-address)
  - [Fees](./README-liquid.md#get-address)
  - [Mempool](./README-liquid.md#get-address)
  - [Transactions](./README-liquid.md#get-address)
  - [Websocket](./README-liquid.md#init-websocket)

---

## **Contributing**

Pull requests are welcome! For major changes, please open an issue first to discuss what you would like to change.

---

## **License** [MIT](https://choosealicense.com/licenses/mit/)


================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2021 Miguel Medeiros

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================================================
File: README-bitcoin.md
================================================
# mempool**JS** - Bitcoin API

Interface to access Bitcoin `mainet`, `testnet`, `signet` APIs.

[Back to home](./README.md)

---

## **Features**

- Addresses
  - [Get Address](#get-address)
  - [Get Address Txs](#get-address-txs)
  - [Get Address Txs Chain](#get-address-txs-chain)
  - [Get Address Txs Mempool](#get-address-txs-mempool)
  - [Get Address Txs Utxo](#get-address-txs-utxo)
- Assets
  - [Get Asset](#get-asset)
  - [Get Asset Txs](#get-asset-txs)
  - [Get Asset Supply](#get-asset-supply)
- Blocks
  - [Get Block](#get-block)
  - [Get Block Status](#get-block-status)
  - [Get Block Txs](#get-block-txs)
  - [Get Block Txids](#get-block-txids)
  - [Get Block Txid](#get-block-txid)
  - [Get Block Raw](#get-block-raw)
  - [Get Blocks Header](#get-blocks-header)
  - [Get Blocks Height](#get-blocks-height)
  - [Get Blocks](#get-blocks)
  - [Get Blocks Tip Height](#get-blocks-tip-height)
  - [Get Blocks Tip Hash](#get-blocks-tip-hash)
- Difficulty
  - [Get Difficulty Adjustment](#get-difficulty-adjustment)
- Fees
  - [Get Fees Recommended](#get-fees-recommended)
  - [Get Fees Mempool Blocks](#get-fees-mempool-blocks)
- Lightning
  - [Get Network Stats](#get-network-stats)
  - [Get Nodes In Country](#get-nodes-in-country)
  - [Get Nodes Stats Per Country](#get-nodes-stats-per-country)
  - [Get Nodes Hosted by ISP](#get-nodes-hosted-by-isp)
  - [Get ISP Ranking](#get-isp-ranking)
  - [Get Liquidity Ranking](#get-liquidity-ranking)
  - [Get Connectivity Ranking](#get-connectivity-ranking)
  - [Get Oldest Nodes](#get-oldest-nodes)
  - [Get Node Stats](#get-node-stats)
  - [Get Historical Node Stats](#get-historical-node-stats)
  - [Get Channel](#get-channel)
  - [Get Channels From Transaction IDs](#get-channels-from-transaction-ids)
  - [Get Channels From Node Public Key](#get-channels-from-node-public-key)
  - [Get Channels Geodata](#get-channels-geodata)
  - [Get Channels Geodata By Public Key](#get-channels-geodata-by-public-key)
- Mempool
  - [Get Mempool](#get-mempool)
  - [Get Mempool Recent](#get-mempool-recent)
  - [Get Mempool Txids](#get-mempool-txids)
- Transactions
  - [Get Tx](#get-tx)
  - [Get Tx Status](#get-tx-status)
  - [Get Tx Hex](#get-tx-hex)
  - [Get Tx Raw](#get-tx-raw)
  - [Get Tx Merkle Block Proof](#get-tx-merkle-block-proof)
  - [Get Tx Merkle Proof](#get-tx-merkle-proof)
  - [Get Tx Outspend](#get-tx-outspend)
  - [Get Tx Outspends](#get-tx-outspends)
  - [Post Tx](#post-tx)
- Websocket
  - [Init Websocket](#init-websocket)
  - [Want Data](#want-data)
  - [Stop Want Data](#stop-want-data)
  - [Track Address](#track-address)
  - [Stop Track Address](#stop-track-address)
  - [Track Addresses](#track-addresses)
  - [Stop Track Addresses](#stop-track-addresses)
  - [Track Transaction](#track-transaction)
  - [Stop Track Transaction](#stop-track-transaction)
  - [Track Rbf Summary](#track-rbf-summary)
  - [Stop Track Rbf Summary](#stop-track-rbf-summary)
  - [Track Rbf](#track-rbf)
  - [Stop Track Rbf](#stop-track-rbf)
  - [Track Mempool Block](#track-mempool-block)
  - [Stop Track Mempool Block](#stop-track-mempool-block)


---

### **Get Address**

Returns details about an address. Available fields: `address`, `chain_stats`, and `mempool_stats`. `{chain,mempool}\_stats` each contain an object with `tx_count`, `funded_txo_count`, `funded_txo_sum`, `spent_txo_count`, and `spent_txo_sum`.

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/bitcoin/addresses.ts) ] [ [HTML Example](examples/html/bitcoin/addresses.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { addresses },
} = mempoolJS();

const address = '1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC';

const myAddress = await addresses.getAddress({ address });
console.log(myAddress);
```

### **Get Address Txs**

Get transaction history for the specified address/scripthash, sorted with newest first. Returns up to 50 mempool transactions plus the first 25 confirmed transactions. You can request more confirmed transactions using `:last_seen_txid`.

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/bitcoin/addresses.ts) ] [ [HTML Example](examples/html/bitcoin/addresses.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { addresses },
} = mempoolJS();

const address = '1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC';

const addressTxs = await addresses.getAddressTxs({ address });
console.log(addressTxs);
```

### **Get Address Txs Chain**

Get confirmed transaction history for the specified address/scripthash, sorted with newest first. Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/bitcoin/addresses.ts) ] [ [HTML Example](examples/html/bitcoin/addresses.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { addresses },
} = mempoolJS();

const address = '1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC';

const addressTxsChain = await addresses.getAddressTxsChain({ address });
console.log(addressTxsChain);
```

### **Get Address Txs Mempool**

Get unconfirmed transaction history for the specified `address/scripthash`. Returns up to 50 transactions (no paging).

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/bitcoin/addresses.ts) ] [ [HTML Example](examples/html/bitcoin/addresses.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { addresses },
} = mempoolJS();

const address = '1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC';

const addressTxsMempool = await addresses.getAddressTxsMempool({ address });
console.log(addressTxsMempool);
```

### **Get Address Txs Utxo**

Get the list of unspent transaction outputs associated with the `address/scripthash`. Available fields: `txid`, `vout`, `value`, and `status` (with the status of the funding tx).

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/bitcoin/addresses.ts) ] [ [HTML Example](examples/html/bitcoin/addresses.html) ] [ [Top](#features) ]

```js
const { addresses } = mempoolJS();

const addressTxsUtxo = await addresses.getAddressTxsUtxo('15e10745f15593a...');
console.log(addressTxsUtxo);
```

### **Get Block**

Returns details about a block. Available fields: `id`, `height`, `version`, `timestamp`, `bits`, `nonce`, `merkle_root`, `tx_count`, `size`, `weight`, and `previousblockhash`.

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const block = await blocks.getBlock({ hash });
console.log(block);
```

### **Get Block Status**

Returns the confirmation status of a block. Available fields: `in_best_chain` (boolean, false for orphaned blocks), `next_best` (the hash of the next block, only available for blocks in the best chain).

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockStatus = await blocks.getBlockStatus({ hash });
console.log(blockStatus);
```

### **Get Block Txs**

Returns a list of transactions in the block (up to 25 transactions beginning at start_index). Transactions returned here do not have the status field, since all the transactions share the same block and confirmation status.

**Parameters:**

- {string} params.hash
- {number} params.start_index

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockTxs = await blocks.getBlockTxs({ hash });
console.log(blockTxs);
```

### **Get Block Txids**

Returns a list of all txids in the block.

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockTxids = await blocks.getBlockTxids({ hash });
console.log(blockTxids);
```

### **Get Block Txid**

Returns the transaction at index :index within the specified block.

**Parameters:**

- {string} params.hash
- {number} params.index

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockTxid = await blocks.getBlockTxid({ hash, index: 218 });
console.log(blockTxid);
```

### **Get Block Raw**

Returns the raw block representation in binary.

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockRaw = await blocks.getBlockRaw({ hash });
console.log(blockRaw);
```

### **Get Blocks Header**

Returns the hex-encoded block header.

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const blockHeader = await blocks.getBlockHeader({ hash: '0000000000000000000065bda8f8a88f2e1e00d9a6887a43d640e52a4c7660f2' });
console.log(blockHeader);
```

### **Get Blocks Height**

Returns the hash of the block currently at `:height`.

**Parameters:**

- {number} height

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const blockHeight = await blocks.getBlockHeight({ height: 0 });
console.log(blockHeight);
```

### **Get Blocks**

Returns the 10 newest blocks starting at the tip or at `:start_height` if specified.

**Parameters:**

- {number} params.start_height

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const getBlocks = await blocks.getBlocks({ start_height: 9999 });
console.log(getBlocks);
```

### **Get Blocks Tip Height**

Returns the 10 newest blocks starting at the tip or at `:start_height` if specified.

**Parameters:**

- {number} params.start_height

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const blocksTipHeight = await blocks.getBlocksTipHeight();
console.log(blocksTipHeight);
```

### **Get Blocks Tip Hash**

Returns the hash of the last block.

[ [NodeJS Example](examples/nodejs/bitcoin/blocks.ts) ] [ [HTML Example](examples/html/bitcoin/blocks.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { blocks },
} = mempoolJS();

const blocksTipHash = await blocks.getBlocksTipHash();
console.log(blocksTipHash);
```

### **Get Difficulty Adjustment**

Returns the hash of the last block.

[ [NodeJS Example](examples/nodejs/bitcoin/difficulty.ts) ] [ [HTML Example](examples/html/bitcoin/difficulty.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { difficulty },
} = mempoolJS();

const difficultyAdjustment = await difficulty.getDifficultyAdjustment();
console.log(difficultyAdjustment);
```

### **Get Fees Recommended**

Returns our currently suggested fees for new transactions.

[ [NodeJS Example](examples/nodejs/bitcoin/fees.ts) ] [ [HTML Example](examples/html/bitcoin/fees.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { fees },
} = mempoolJS();

const feesRecommended = await fees.getFeesRecommended();
console.log(feesRecommended);
```

### **Get Fees Mempool Blocks**

Returns current mempool as projected blocks.

[ [NodeJS Example](examples/nodejs/bitcoin/fees.ts) ] [ [HTML Example](examples/html/bitcoin/fees.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { fees },
} = mempoolJS();

const feesMempoolBlocks = await fees.getFeesMempoolBlocks();
console.log(feesMempoolBlocks);
```

### **Get Network Stats**

Returns network-wide stats such as total number of channels and nodes, total capacity, and average/median fee figures.

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const networkStats = await lightning.getNetworkStats();
console.log(networkStats);
```

### **Get Nodes In Country**

Returns a list of Lightning nodes running on clearnet in the requested `:country`, where `:country` is an ISO Alpha-2 country code.

**Parameters:**

- {string} country

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const nodesInCountry = await lightning.getNodesInCountry({ country: 'US' });
console.log(nodesInCountry);
```

### **Get Nodes Stats Per Country**

Returns aggregate capacity and number of clearnet nodes per country. Capacity figures are in satoshis.

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const nodesStatsPerCountry = await lightning.getNodesStatsPerCountry();
console.log(nodesStatsPerCountry);
```

### **Get Nodes Hosted by ISP**

Returns a list of nodes hosted by a specified `:isp`, where `:isp` is an ISP's ASN.

**Parameters:**

- {number} isp

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const nodesHostedByISP = await lightning.getNodesHostedByISP({ isp: 16509 });
console.log(nodesHostedByISP);
```

### **Get ISP Ranking**

Returns aggregate capacity, number of nodes, and number of channels per ISP. Capacity figures are in satoshis.

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const ispRanking = await lightning.getISPRanking();
console.log(ispRanking);
```

### **Get Liquidity Ranking**

Returns a list of the top 100 nodes by liquidity (aggregate channel capacity).

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const liquidityRanking = await lightning.getLiquidityRanking();
console.log(liquidityRanking);
```

### **Get Connectivity Ranking**

Returns a list of the top 100 nodes by connectivity (number of open channels).

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const connectivityRanking = await lightning.getConnectivityRanking();
console.log(connectivityRanking);
```

### **Get Oldest Nodes**

Returns a list of the top 100 oldest nodes.

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const oldestNodes = await lightning.getOldestNodes();
console.log(oldestNodes);
```

### **Get Node Stats**

Returns details about a node with the given `:public_key`.

**Parameters:**

- {string} public_key

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const nodeStats = await lightning.getNodeStats({ public_key });
console.log(nodeStats);
```

### **Get Historical Node Stats**

Returns historical stats for a node with the given `:public_key`.

**Parameters:**

- {string} public_key

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const historicalNodeStats = await lightning.getHistoricalNodeStats({ public_key });
console.log(historicalNodeStats);
```

### **Get Channel**

Returns details about a channel with the given `:id`.

**Parameters:**

- {string} id

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const channel = await lightning.getChannel({ id });
console.log(channel);
```

### **Get Channels From Transaction IDs**

Returns channels that correspond to the given `:txId` (multiple transaction IDs can be specified).

**Parameters:**

- {[]string} txId

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const channelsFromTransactionIDs = await lightning.getChannelsFromTransactionIDs({ txId });
console.log(channelsFromTransactionIDs);
```

### **Get Channels From Node Public Key**

Returns a list of a node's channels given its `:public_key`. Ten channels are returned at a time. Use `:index` for paging. `:status` can be `open`, `active`, or `closed`.

**Parameters:**

- {string} public_key
- {string} status
- {number} index

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js

const {
  bitcoin: { lightning },
} = mempoolJS();

const channelsFromNodePublicKey = await lightning.getChannelsFromNodePublicKey({ public_key, status, index });
console.log(channelsFromNodePublicKey);
```

### **Get Channels Geodata**

Returns a list of channels with corresponding node geodata.

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const channelsGeodata = await lightning.getChannelsGeodata();
console.log(channelsGeodata);
```

### **Get Channels Geodata By Public Key**

Returns a list of channels with corresponding geodata for a node with the given `:public_key`.

**Parameters:**

- {string} public_key

[ [NodeJS Example](examples/nodejs/bitcoin/lightning.ts) ] [ [HTML Example](examples/html/bitcoin/lightning.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { lightning },
} = mempoolJS();

const channelsGeodataByPublicKey = await lightning.getChannelsGeodataByPublicKey({ public_key });
console.log(channelsGeodataByPublicKey);
```


### **Get Children Pay for Parent**

Returns current mempool as projected blocks.

[ [NodeJS Example](examples/nodejs/bitcoin/fees.ts) ] [ [HTML Example](examples/html/bitcoin/fees.html) ] [ [Top](#features) ]

```js
  const { 
    bitcoin: { fees },
  } = mempoolJS();
  const txid = 'txid';

  const feesCPFP = await fees.getCPFP({ txid });
  console.log(feesCPFP);
```

### **Get Mempool**

Returns current mempool backlog statistics.

[ [NodeJS Example](examples/nodejs/bitcoin/mempool.ts) ] [ [HTML Example](examples/html/bitcoin/mempool.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { mempool },
} = mempoolJS();

const getMempool = await mempool.getMempool();
console.log(getMempool);
```

### **Get Mempool Recent**

Get a list of the last 10 transactions to enter the mempool. Each transaction object contains simplified overview data, with the following fields: `txid`, `fee`, `vsize`, and `value`.

[ [NodeJS Example](examples/nodejs/bitcoin/mempool.ts) ] [ [HTML Example](examples/html/bitcoin/mempool.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { mempool },
} = mempoolJS();

const getMempoolRecent = await mempool.getMempoolRecent();
console.log(getMempoolRecent);
```

### **Get Mempool Txids**

Get the full list of txids in the mempool as an array. The order of the `txids` is arbitrary and does not match bitcoind.

[ [NodeJS Example](examples/nodejs/bitcoin/mempool.ts) ] [ [HTML Example](examples/html/bitcoin/mempool.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { mempool },
} = mempoolJS();

const getMempoolTxids = await mempool.getMempoolTxids();
console.log(getMempoolTxids);
```

### **Get Tx**

Returns details about a transaction. Available fields: `txid`, `version`, `locktime`, `size`, `weight`, `fee`, `vin`, `vout`, and `status`.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const tx = await transactions.getTx({ txid });
console.log(tx);
```

### **Get Tx Status**

Returns the confirmation status of a transaction. Available fields: `confirmed` (boolean), `block_height` (optional), and `block_hash` (optional).

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txStatus = await transactions.getTxStatus({ txid });
console.log(txStatus);
```

### **Get Tx Hex**

Returns a transaction serialized as hex.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txHex = await transactions.getTxHex({ txid });
console.log(txHex);
```

### **Get Tx Raw**

Returns a transaction as binary data.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txRaw = await transactions.getTxRaw({ txid });
console.log(txRaw);
```

### **Get Tx Merkle Block Proof**

Returns a merkle inclusion proof for the transaction using bitcoind's merkleblock format.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txMerkleBlockProof = await transactions.getTxMerkleBlockProof({ txid });
console.log(txMerkleBlockProof);
```

### **Get Tx Merkle Proof**

Returns a merkle inclusion proof for the transaction using Electrum's blockchain.transaction.get_merkle format.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txMerkleProof = await transactions.getTxMerkleProof({ txid });
console.log(txMerkleProof);
```

### **Get Tx Outspend**

Returns the spending status of a transaction output. Available fields: `spent` (boolean), `txid` (optional), `vin` (optional), and `status` (optional, the status of the spending tx).

**Parameters:**

- {string} params.txid
- {number} params.vout

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txOutspend = await transactions.getTxOutspend({
  txid,
  vout: 3,
});
console.log(txOutspend);
```

### **Get Tx Outspends**

Returns the spending status of all transaction outputs.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txOutspends = await transactions.getTxOutspends({ txid });
console.log(txOutspends);
```

### **Post Tx **

Broadcast a raw transaction to the network. The transaction should be provided as hex in the request body. The `txid` will be returned on success.

**Parameters:**

- {string} txhex

[ [NodeJS Example](examples/nodejs/bitcoin/transactions.ts) ] [ [HTML Example](examples/html/bitcoin/transactions.html) ] [ [Top](#features) ]

```js
const {
  bitcoin: { transactions },
} = mempoolJS();

const txhex = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const postTx = await transactions.postTx({ txhex });
console.log(postTx);
```

### **Init Websocket**

Initializes a websocket connection.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
const { bitcoin: { websocket } } = mempoolJS();
const ws = websocket.wsInit(); // for in-browser websocket, use websocket.wsInitBrowser
ws.addEventListener('message', function incoming({data}) {
  console.log(JSON.parse(data.toString()));
});
```

### **Want Data**

Subscribe to `want` data. Available: `blocks`, `mempool-block`, `live-2h-chart`, and `stats`.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsWantData(ws, ['blocks', 'stats', 'mempool-blocks', 'live-2h-chart']); // for in-browser websocket, use websocket.wsWantDataBrowser
```

### **Stop Want Data**

Unsubscribe from `want` data.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopData(ws); // for in-browser websocket, use websocket.wsStopDataBrowser
```

### **Track Address**

Subscribe to address updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackAddress(ws, '1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC'); // for in-browser websocket, use websocket.wsTrackAddressBrowser
```

### **Stop Track Address**

Unsubscribe from address updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopTrackingAddress(ws, '1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC'); // for in-browser websocket, use websocket.wsStopTrackingAddressBrowser
```

### **Track Addresses**

Subscribe to multiple address updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackAddresses(ws, ['1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC']); // for in-browser websocket, use websocket.wsTrackAddressesBrowser
```

### **Stop Track Addresses**

Unsubscribe from multiple address updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopTrackingAddresses(ws); // for in-browser websocket, use websocket.wsStopTrackingAddressesBrowser
```

### **Track Transaction**

Subscribe to transaction updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackTransaction(ws, '01313ca0148a1bbe5676e5dd6a84e76f8b39038658bd8c333d3b2d3f7ea6dd08'); // for in-browser websocket, use websocket.wsTrackTransactionBrowser
```

### **Stop Track Transaction**

Unsubscribe from transaction updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopTrackingTransaction(ws); // for in-browser websocket, use websocket.wsStopTrackingTransactionBrowser
```

### **Track Rbf Summary**

Subscribe to RBF summary updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackRbfSummary(ws); // for in-browser websocket, use websocket.wsTrackRbfSummaryBrowser
```

### **Stop Track Rbf Summary**

Unsubscribe from RBF summary updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopTrackingRbfSummary(ws); // for in-browser websocket, use websocket.wsStopTrackingRbfSummaryBrowser
```

### **Track Rbf**

Subscribe to RBF updates. Set the second parameter to `true` to track Full RBF.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackRbf(ws, true); // for in-browser websocket, use websocket.wsTrackRbfBrowser
```

### **Stop Track Rbf**

Unsubscribe from RBF updates.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopTrackingRbf(ws); // for in-browser websocket, use websocket.wsStopTrackingRbfBrowser
```

### **Track Mempool Block**

Subscribe to mempool blocks.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackMempoolBlock(ws, 1); // for in-browser websocket, use websocket.wsTrackMempoolBlockBrowser
```

### **Stop Track Mempool Block**

Unsubscribe from mempool blocks.

[ [NodeJS Example](examples/nodejs/bitcoin/websocket.ts) ] [ [HTML Example](examples/html/bitcoin/websocket.html) ] [ [Top](#features) ]

```js

websocket.wsStopTrackingMempoolBlock(ws); // for in-browser websocket, use websocket.wsStopTrackingMempoolBlockBrowser
```


================================================
File: README-liquid.md
================================================
# mempool**JS** - Liquid API

Interface to access Liquid APIs.

[Back to home](./README.md)

---

## **Features**

- Addresses
  - [Get Address](#get-address)
  - [Get Address Txs](#get-address-txs)
  - [Get Address Txs Chain](#get-address-txs-chain)
  - [Get Address Txs Mempool](#get-address-txs-mempool)
  - [Get Address Txs Utxo](#get-address-txs-utxo)
- Assets
  - [Get Asset](#get-asset)
  - [Get Asset Icon](#get-asset-icon)
  - [Get Asset Txs](#get-asset-txs)
  - [Get Asset Supply](#get-asset-supply)
  - [Get Assets Icons](#get-assets-icons)
- Blocks
  - [Get Block](#get-block)
  - [Get Block Status](#get-block-status)
  - [Get Block Txs](#get-block-txs)
  - [Get Block Txids](#get-block-txids)
  - [Get Block Txid](#get-block-txid)
  - [Get Block Raw](#get-block-raw)
  - [Get Blocks Height](#get-blocks-height)
  - [Get Blocks](#get-blocks)
  - [Get Blocks Tip Height](#get-blocks-tip-height)
  - [Get Blocks Tip Hash](#get-blocks-tip-hash)
- Fees
  - [Get Fees Recommended](#get-fees-recommended)
  - [Get Fees Mempool Blocks](#get-fees-mempool-blocks)
- Mempool
  - [Get Mempool](#get-mempool)
  - [Get Mempool Recent](#get-mempool-recent)
  - [Get Mempool Txids](#get-mempool-txids)
- Transactions
  - [Get Tx](#get-tx)
  - [Get Tx Status](#get-tx-status)
  - [Get Tx Hex](#get-tx-hex)
  - [Get Tx Raw](#get-tx-raw)
  - [Get Tx Merkle Proof](#get-tx-merkle-proof)
  - [Get Tx Outspend](#get-tx-outspend)
  - [Get Tx Outspends](#get-tx-outspends)
  - [Post Tx](#post-tx)
- Websocket
  - [Init Websocket](#init-websocket)
  - [Want Data](#want-data)
  - [Stop Want Data](#stop-want-data)
  - [Track Address](#track-address)
  - [Stop Track Address](#stop-track-address)
  - [Track Addresses](#track-addresses)
  - [Stop Track Addresses](#stop-track-addresses)
  - [Track Transaction](#track-transaction)
  - [Stop Track Transaction](#stop-track-transaction)
  - [Track Mempool Block](#track-mempool-block)
  - [Stop Track Mempool Block](#stop-track-mempool-block)

---

### **Get Address**

Returns details about an address. Available fields: `address`, `chain_stats`, and `mempool_stats`. `{chain,mempool}\_stats` each contain an object with `tx_count`, `funded_txo_count`, `funded_txo_sum`, `spent_txo_count`, and `spent_txo_sum`.

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/liquid/addresses.ts) ] [ [HTML Example](examples/html/liquid/addresses.html) ] [ [Top](#features) ]

```js
const {
  liquid: { addresses },
} = mempoolJS();

const address = 'Go65t19hP2FuhBMYtgbdMDgdmEzNwh1i48';

const myAddress = await addresses.getAddress({ address });
console.log(myAddress);
```

### **Get Address Txs**

Get transaction history for the specified address/scripthash, sorted with newest first. Returns up to 50 mempool transactions plus the first 25 confirmed transactions. You can request more confirmed transactions using `:last_seen_txid`.

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/liquid/addresses.ts) ] [ [HTML Example](examples/html/liquid/addresses.html) ] [ [Top](#features) ]

```js
const {
  liquid: { addresses },
} = mempoolJS();

const address = 'Go65t19hP2FuhBMYtgbdMDgdmEzNwh1i48';

const addressTxs = await addresses.getAddressTxs({ address });
console.log(addressTxs);
```

### **Get Address Txs Chain**

Get confirmed transaction history for the specified address/scripthash, sorted with newest first. Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/liquid/addresses.ts) ] [ [HTML Example](examples/html/liquid/addresses.html) ] [ [Top](#features) ]

```js
const {
  liquid: { addresses },
} = mempoolJS();

const address = 'Go65t19hP2FuhBMYtgbdMDgdmEzNwh1i48';

const addressTxsChain = await addresses.getAddressTxsChain({ address });
console.log(addressTxsChain);
```

### **Get Address Txs Mempool**

Get unconfirmed transaction history for the specified `address/scripthash`. Returns up to 50 transactions (no paging).

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/liquid/addresses.ts) ] [ [HTML Example](examples/html/liquid/addresses.html) ] [ [Top](#features) ]

```js
const {
  liquid: { addresses },
} = mempoolJS();

const address = 'Go65t19hP2FuhBMYtgbdMDgdmEzNwh1i48';

const addressTxsMempool = await addresses.getAddressTxsMempool({ address });
console.log(addressTxsMempool);
```

### **Get Address Txs Utxo**

Get the list of unspent transaction outputs associated with the `address/scripthash`. Available fields: `txid`, `vout`, `value`, and `status` (with the status of the funding tx).

**Parameters:**

- {string} address

[ [NodeJS Example](examples/nodejs/liquid/addresses.ts) ] [ [HTML Example](examples/html/liquid/addresses.html) ] [ [Top](#features) ]

```js
const { addresses } = mempoolJS();

const addressTxsUtxo = await addresses.getAddressTxsUtxo('15e10745f15593a...');
console.log(addressTxsUtxo);
```

### **Get Asset**

Returns information about a Liquid asset.

**Parameters:**

- {string} asset_id

[ [NodeJS Example](examples/nodejs/liquid/assets.ts) ] [ [HTML Example](examples/html/liquid/assets.html) ] [ [Top](#features) ]

```js
const {
  liquid: { assets },
} = mempoolJS();

const asset_id =
  '6f0279e9ed041c3d710a9f57d0c02928416460c4b722ae3457a11eec381c526d';

const asset = await assets.getAsset({ asset_id });
console.log(asset);
```

### **Get Asset Txs**

Returns transactions associated with the specified Liquid asset. For the network's native asset, returns a list of peg in, peg out, and burn transactions. For user-issued assets, returns a list of issuance, reissuance, and burn transactions. Does not include regular transactions transferring this asset.

**Parameters:**

- {string} asset_id
- {boolean} is_mempool

[ [NodeJS Example](examples/nodejs/liquid/assets.ts) ] [ [HTML Example](examples/html/liquid/assets.html) ] [ [Top](#features) ]

```js
const {
  liquid: { assets },
} = mempoolJS();

const asset_id =
  '6f0279e9ed041c3d710a9f57d0c02928416460c4b722ae3457a11eec381c526d';

const assetTxs = await assets.getAssetTxs({ asset_id, is_mempool: false });
console.log(assetTxs);
```

### **Get Asset Supply**

Get the current total supply of the specified asset. For the native asset (L-BTC), this is calculated as `[chain,mempool]\_stats.peg_in_amount` - `[chain,mempool]\_stats.peg_out_amount` - `[chain,mempool]\_stats.burned_amount`. For issued assets, this is calculated as `[chain,mempool]\_stats.issued_amount` - `[chain,mempool]\_stats.burned_amount`. Not available for assets with blinded issuances. If `/decimal` is specified, returns the supply as a decimal according to the asset's divisibility. Otherwise, returned in base units.

**Parameters:**

- {string} asset_id
- {boolean} decimal

[ [NodeJS Example](examples/nodejs/liquid/assets.ts) ] [ [HTML Example](examples/html/liquid/assets.html) ] [ [Top](#features) ]

```js
const {
  liquid: { assets },
} = mempoolJS();

const asset_id =
  '6f0279e9ed041c3d710a9f57d0c02928416460c4b722ae3457a11eec381c526d';

const assetSupply = await assets.getAssetSupply({ asset_id, decimal: false });
console.log(assetSupply);
```

### **Get Block**

Returns details about a block. Available fields: `id`, `height`, `version`, `timestamp`, `bits`, `nonce`, `merkle_root`, `tx_count`, `size`, `weight`, and `previousblockhash`.

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const block = await blocks.getBlock({ hash });
console.log(block);
```

### **Get Block Status**

Returns the confirmation status of a block. Available fields: `in_best_chain` (boolean, false for orphaned blocks), `next_best` (the hash of the next block, only available for blocks in the best chain).

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockStatus = await blocks.getBlockStatus({ hash });
console.log(blockStatus);
```

### **Get Block Txs**

Returns a list of transactions in the block (up to 25 transactions beginning at start_index). Transactions returned here do not have the status field, since all the transactions share the same block and confirmation status.

**Parameters:**

- {string} hash
- {number} start_index

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockTxs = await blocks.getBlockTxs({ hash });
console.log(blockTxs);
```

### **Get Block Txids**

Returns a list of all txids in the block.

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockTxids = await blocks.getBlockTxids({ hash });
console.log(blockTxids);
```

### **Get Block Txid**

Returns the transaction at index :index within the specified block.

**Parameters:**

- {string} hash
- {number} index

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockTxid = await blocks.getBlockTxid({ hash, index: 218 });
console.log(blockTxid);
```

### **Get Block Raw**

Returns the raw block representation in binary.

**Parameters:**

- {string} hash

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const hash = '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';

const blockRaw = await blocks.getBlockRaw({ hash });
console.log(blockRaw);
```

### **Get Blocks Height**

Returns the hash of the block currently at `:height`.

**Parameters:**

- {number} height

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const blockHeight = await blocks.getBlockHeight({ height: 0 });
console.log(blockHeight);
```

### **Get Blocks**

Returns the 10 newest blocks starting at the tip or at `:start_height` if specified.

**Parameters:**

- {number} start_height

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const getBlocks = await blocks.getBlocks({ start_height: 9999 });
console.log(getBlocks);
```

### **Get Blocks Tip Height**

Returns the 10 newest blocks starting at the tip or at `:start_height` if specified.

**Parameters:**

- {number} start_height

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const blocksTipHeight = await blocks.getBlocksTipHeight();
console.log(blocksTipHeight);
```

### **Get Blocks Tip Hash**

Returns the hash of the last block.

[ [NodeJS Example](examples/nodejs/liquid/blocks.ts) ] [ [HTML Example](examples/html/liquid/blocks.html) ] [ [Top](#features) ]

```js
const {
  liquid: { blocks },
} = mempoolJS();

const blocksTipHash = await blocks.getBlocksTipHash();
console.log(blocksTipHash);
```

### **Get Fees Recommended**

Returns our currently suggested fees for new transactions.

[ [NodeJS Example](examples/nodejs/liquid/fees.ts) ] [ [HTML Example](examples/html/liquid/fees.html) ] [ [Top](#features) ]

```js
const {
  liquid: { fees },
} = mempoolJS();

const feesRecommended = await fees.getFeesRecommended();
console.log(feesRecommended);
```

### **Get Fees Mempool Blocks**

Returns current mempool as projected blocks.

[ [NodeJS Example](examples/nodejs/liquid/fees.ts) ] [ [HTML Example](examples/html/liquid/fees.html) ] [ [Top](#features) ]

```js
const {
  liquid: { fees },
} = mempoolJS();

const feesMempoolBlocks = await fees.getFeesMempoolBlocks();
console.log(feesMempoolBlocks);
```

### **Get Mempool**

Returns current mempool backlog statistics.

[ [NodeJS Example](examples/nodejs/liquid/mempool.ts) ] [ [HTML Example](examples/html/liquid/mempool.html) ] [ [Top](#features) ]

```js
const {
  liquid: { mempool },
} = mempoolJS();

const getMempool = await mempool.getMempool();
console.log(getMempool);
```

### **Get Mempool Recent**

Get a list of the last 10 transactions to enter the mempool. Each transaction object contains simplified overview data, with the following fields: `txid`, `fee`, `vsize`, and `value`.

[ [NodeJS Example](examples/nodejs/liquid/mempool.ts) ] [ [HTML Example](examples/html/liquid/mempool.html) ] [ [Top](#features) ]

```js
const {
  liquid: { mempool },
} = mempoolJS();

const getMempoolRecent = await mempool.getMempoolRecent();
console.log(getMempoolRecent);
```

### **Get Mempool Txids**

Get the full list of txids in the mempool as an array. The order of the `txids` is arbitrary and does not match bitcoind.

[ [NodeJS Example](examples/nodejs/liquid/mempool.ts) ] [ [HTML Example](examples/html/liquid/mempool.html) ] [ [Top](#features) ]

```js
const {
  liquid: { mempool },
} = mempoolJS();

const getMempoolTxids = await mempool.getMempoolTxids();
console.log(getMempoolTxids);
```

### **Get Tx**

Returns details about a transaction. Available fields: `txid`, `version`, `locktime`, `size`, `weight`, `fee`, `vin`, `vout`, and `status`.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/liquid/transactions.ts) ] [ [HTML Example](examples/html/liquid/transactions.html) ] [ [Top](#features) ]

```js
const {
  liquid: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const tx = await transactions.getTx({ txid });
console.log(tx);
```

### **Get Tx Status**

Returns the confirmation status of a transaction. Available fields: `confirmed` (boolean), `block_height` (optional), and `block_hash` (optional).

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/liquid/transactions.ts) ] [ [HTML Example](examples/html/liquid/transactions.html) ] [ [Top](#features) ]

```js
const {
  liquid: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txStatus = await transactions.getTxStatus({ txid });
console.log(txStatus);
```

### **Get Tx Hex**

Returns a transaction serialized as hex.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/liquid/transactions.ts) ] [ [HTML Example](examples/html/liquid/transactions.html) ] [ [Top](#features) ]

```js
const {
  liquid: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txHex = await transactions.getTxHex({ txid });
console.log(txHex);
```

### **Get Tx Raw**

Returns a transaction as binary data.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/liquid/transactions.ts) ] [ [HTML Example](examples/html/liquid/transactions.html) ] [ [Top](#features) ]

```js
const {
  liquid: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txRaw = await transactions.getTxRaw({ txid });
console.log(txRaw);
```

### **Get Tx Merkle Proof**

Returns a merkle inclusion proof for the transaction using Electrum's blockchain.transaction.get_merkle format.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/liquid/transactions.ts) ] [ [HTML Example](examples/html/liquid/transactions.html) ] [ [Top](#features) ]

```js
const {
  liquid: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txMerkleProof = await transactions.getTxMerkleProof({ txid });
console.log(txMerkleProof);
```

### **Get Tx Outspend**

Returns the spending status of a transaction output. Available fields: `spent` (boolean), `txid` (optional), `vin` (optional), and `status` (optional, the status of the spending tx).

**Parameters:**

- {string} txid
- {number} vout

[ [NodeJS Example](examples/nodejs/liquid/transactions.ts) ] [ [HTML Example](examples/html/liquid/transactions.html) ] [ [Top](#features) ]

```js
const {
  liquid: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txOutspend = await transactions.getTxOutspend({
  txid,
  vout: 3,
});
console.log(txOutspend);
```

### **Get Tx Outspends**

Returns the spending status of all transaction outputs.

**Parameters:**

- {string} txid

[ [NodeJS Example](examples/nodejs/liquid/transactions.ts) ] [ [HTML Example](examples/html/liquid/transactions.html) ] [ [Top](#features) ]

```js
const {
  liquid: { transactions },
} = mempoolJS();

const txid = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const txOutspends = await transactions.getTxOutspends({ txid });
console.log(txOutspends);
```

### **Post Tx **

Broadcast a raw transaction to the network. The transaction should be provided as hex in the request body. The `txid` will be returned on success.

**Parameters:**

- {string} txhex

[ [NodeJS Example](examples/nodejs/liquid/transactions.ts) ] [ [HTML Example](examples/html/liquid/transactions.html) ] [ [Top](#features) ]

```js
const {
  liquid: { transactions },
} = mempoolJS();

const txhex = '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';

const postTx = await transactions.postTx({ txhex });
console.log(postTx);
```

### **Init Websocket**

Initializes a websocket connection.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
const { liquid: { websocket } } = mempoolJS( {hostname: 'liquid.network'} );
const ws = websocket.wsInit(); // for in-browser websocket, use websocket.wsInitBrowser
ws.addEventListener('message', function incoming({data}) {
  console.log(JSON.parse(data.toString()));
});
```

### **Want Data**

Subscribe to `want` data. Available: `blocks`, `mempool-block`, `live-2h-chart`, and `stats`.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsWantData(ws, ['blocks', 'stats', 'mempool-blocks', 'live-2h-chart']); // for in-browser websocket, use websocket.wsWantDataBrowser
```

### **Stop Want Data**

Unsubscribe from `want` data.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopData(ws); // for in-browser websocket, use websocket.wsStopDataBrowser
```

### **Track Address**

Subscribe to address updates.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackAddress(ws, 'GiAi95k5JUPNPoDGNzSUZ8vWMijSiSMTon'); // for in-browser websocket, use websocket.wsTrackAddressBrowser
```

### **Stop Track Address**

Unsubscribe from address updates.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopTrackingAddress(ws); // for in-browser websocket, use websocket.wsStopTrackingAddressBrowser
```

### **Track Addresses**

Subscribe to multiple addresses updates.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackAddresses(ws, ['GiAi95k5JUPNPoDGNzSUZ8vWMijSiSMTon']); // for in-browser websocket, use websocket.wsTrackAddressesBrowser
```

### **Stop Track Addresses**

Unsubscribe from multiple addresses updates.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopTrackingAddresses(ws); // for in-browser websocket, use websocket.wsStopTrackingAddressesBrowser
```

### **Track Transaction**

Subscribe to a transaction updates.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackTransaction(ws, '23195d459a70875c3b1f9fb9082acc9f0594f1c63dac71b40f2ff7298630a421'); // for in-browser websocket, use websocket.wsTrackTransactionBrowser()
```

### **Stop Track Transaction**

Unsubscribe from a transaction updates.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsStopTrackingTransaction(ws); // for in-browser websocket, use websocket.wsStopTrackingTransactionBrowser
```

### **Track Mempool Block**

Subscribe to mempool blocks.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js
websocket.wsTrackMempoolBlock(ws, 1); // for in-browser websocket, use websocket.wsTrackMempoolBlockBrowser
```

### **Stop Track Mempool Block**

Unsubscribe from mempool blocks.

[ [NodeJS Example](examples/nodejs/liquid/websocket.ts) ] [ [HTML Example](examples/html/liquid/websocket.html) ] [ [Top](#features) ]

```js

websocket.wsStopTrackingMempoolBlock(ws); // for in-browser websocket, use websocket.wsStopTrackingMempoolBlockBrowser
```


================================================
File: nodemon.json
================================================
{
  "watch": ["src", "examples"],
  "ext": "ts,json",
  "ignore": ["src/**/*.spec.ts"],
  "exec": "ts-node ./src/index.ts"
}


================================================
File: package.json
================================================
{
  "name": "@mempool/mempool.js",
  "version": "3.0.0",
  "description": "NPM package module for Mempool APIs.",
  "main": "lib/index.js",
  "keywords": [
    "axios",
    "bitcoin",
    "liquid",
    "mainet",
    "testnet",
    "signet",
    "blockchain",
    "html",
    "mempool.space",
    "mempool.js",
    "mempool",
    "websocket",
    "nodejs",
    "typescript"
  ],
  "author": "Miguel Medeiros <contact@miguelmedeiros.com.br> (miguelmedeiros.com.br)",
  "url": "https://mempool.space/",
  "private": false,
  "repository": {
    "type": "git",
    "url": "git://github.com/mempool/mempool.js.git"
  },
  "types": "lib/index.d.ts",
  "scripts": {
    "start": "ts-node src/index.ts",
    "dev": "nodemon src/index.ts",
    "build": "tsc",
    "export-mempool-js": "tsc | browserify -p esmify lib/index.js --standalone mempoolJS > dist/mempool.js | browserify -p tinyify -p esmify lib/index.js --standalone mempoolJS > dist/mempool.min.js",
    "prepare": "npm run build",
    "postversion": "git push && git push --tags"
  },
  "files": [
    "lib/**/*"
  ],
  "dependencies": {
    "axios": "1.7.4",
    "ws": "^8.18.0"
  },
  "devDependencies": {
    "@types/node": "^14.14.25",
    "@types/websocket": "^1.0.2",
    "@types/ws": "^7.4.1",
    "@typescript-eslint/eslint-plugin": "^4.14.2",
    "@typescript-eslint/parser": "^4.14.2",
    "browserify": "^17.0.0",
    "eslint": "^7.19.0",
    "esmify": "^2.1.1",
    "nodemon": "^2.0.7",
    "tinyify": "^3.0.0",
    "ts-node": "^9.1.1",
    "typescript": "^4.1.3"
  },
  "license": "MIT"
}


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "lib": ["ES6", "DOM"],
    "declaration": true,
    "outDir": "./lib",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true
  },
  "include": ["src"],
  "exclude": ["node_modules", "**/__tests__/*"]
}


================================================
File: .editorconfig
================================================
# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = crlf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = false

================================================
File: .eslintrc.js
================================================
module.exports = {
  env: {
    browser: true,
    commonjs: true,
    es2021: true,
  },
  extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended'],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 12,
  },
  plugins: ['@typescript-eslint'],
  rules: {
    '@typescript-eslint/no-var-requires': 'off',
  },
};


================================================
File: .prettierrc
================================================
{
  "tabWidth": 2,
  "useTabs": false,
  "singleQuote": true,
  "printWidth": 80
}


================================================
File: examples/html/bitcoin/addresses.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            bitcoin: { addresses },
          } = mempoolJS();
          
          const address = '1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC';
          
          const myAddress = await addresses.getAddress({ address });
          console.log(myAddress);
          
          const addressTxs = await addresses.getAddressTxs({ address });
          console.log(addressTxs);
          
          const addressTxsChain = await addresses.getAddressTxsChain({ address });
          console.log(addressTxsChain);
          
          const addressTxsMempool = await addresses.getAddressTxsMempool({
            address,
          });
          console.log(addressTxsMempool);
          
          const addressTxsUtxo = await addresses.getAddressTxsUtxo({ address });
          console.log(addressTxsUtxo);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/bitcoin/blocks.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            bitcoin: { blocks },
          } = mempoolJS();
          
          const hash =
          '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';
          
          const block = await blocks.getBlock({ hash });
          console.log(block);
          
          const blockStatus = await blocks.getBlockStatus({ hash });
          console.log(blockStatus);
          
          const blockTxs = await blocks.getBlockTxs({ hash });
          console.log(blockTxs);
          
          const blockTxids = await blocks.getBlockTxids({ hash });
          console.log(blockTxids);
          
          const blockTxid = await blocks.getBlockTxid({ hash, index: 218 });
          console.log(blockTxid);
          
          const blockRaw = await blocks.getBlockRaw({ hash });
          console.log(blockRaw);
          
          const blockHeader = await blocks.getBlockHeader({ hash });
          console.log(blockHeader);
          
          const blockHeight = await blocks.getBlockHeight({ height: 0 });
          console.log(blockHeight);
          
          const getBlocks = await blocks.getBlocks({ start_height: 9999 });
          console.log(getBlocks);
          
          const blocksTipHeight = await blocks.getBlocksTipHeight();
          console.log(blocksTipHeight);
          
          const blocksTipHash = await blocks.getBlocksTipHash();
          console.log(blocksTipHash);
        } catch (error) {
          console.log(error);
        }
      };
      init();
      </script>
    </head>
  <body></body>
</html>


================================================
File: examples/html/bitcoin/difficulty.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try { 
          const {
            bitcoin: { difficulty },
          } = mempoolJS();
          
          const difficultyAdjustment = await difficulty.getDifficultyAdjustment();
          console.log(difficultyAdjustment);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/bitcoin/fees.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            bitcoin: { fees },
          } = mempoolJS();
          
          const feesRecommended = await fees.getFeesRecommended();
          console.log(feesRecommended);
          
          const feesMempoolBlocks = await fees.getFeesMempoolBlocks();
          console.log(feesMempoolBlocks);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/bitcoin/lightning.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const { bitcoin: { lightning } } = mempoolJS();

          const node = '03d607f3e69fd032524a867b288216bfab263b6eaee4e07783799a6fe69bb84fac';
          const channel = '768457472831193088';

          const networkStats = await lightning.getNetworkStats();
          console.log(networkStats);

          const nodesInCountry = await lightning.getNodesInCountry({ country: 'fr' });
          console.log(nodesInCountry);

          const nodesStatsPerCountry = await lightning.getNodesStatsPerCountry();
          console.log(nodesStatsPerCountry);

          const nodesHostedByISP = await lightning.getNodesHostedByISP({ isp: 16509 });
          console.log(nodesHostedByISP);

          const ispRanking = await lightning.getISPRanking();
          console.log(ispRanking);

          const liquidityRanking = await lightning.getLiquidityRanking();
          console.log(liquidityRanking);

          const connectivityRanking = await lightning.getConnectivityRanking();
          console.log(connectivityRanking);

          const oldestNodes = await lightning.getOldestNodes();
          console.log(oldestNodes);

          const nodeStats = await lightning.getNodeStats({ public_key: node });
          console.log(nodeStats);

          const historicalNodeStats = await lightning.getHistoricalNodeStats({ public_key: node });
          console.log(historicalNodeStats);

          const channelData = await lightning.getChannel({ id: channel });
          console.log(channelData);

          const channelsFromTxIds = await lightning.getChannelsFromTxIds({ txId: ['c3173549f502ede6440d5c48ea74af5607d88484c7a912bbef73d430049f8af4', 'd78f0b41a263af3df91fa4171cc2f60c40196aaf8f4bde5d1c8ff4474cfe753b'] });
          console.log(channelsFromTxIds);

          const channelsFromNodePublicKey = await lightning.getChannelsFromNodePublicKey({ public_key: node, status: 'active'});
          console.log(channelsFromNodePublicKey);

          const channelsGeodata = await lightning.getChannelsGeodata();
          console.log(channelsGeodata);

          const channelsGeodataByPublicKey = await lightning.getChannelsGeodataByPublicKey({ public_key: node });
          console.log(channelsGeodataByPublicKey);
        
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/bitcoin/mempool.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            bitcoin: { mempool },
          } = mempoolJS();
          
          const getMempool = await mempool.getMempool();
          console.log(getMempool);
          
          const getMempoolRecent = await mempool.getMempoolRecent();
          console.log(getMempoolRecent);
          
          const getMempoolTxids = await mempool.getMempoolTxids();
          console.log(getMempoolTxids);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/bitcoin/transactions.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            bitcoin: { transactions },
          } = mempoolJS();
          
          const txid =
          '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';
          
          const tx = await transactions.getTx({ txid });
          console.log(tx);
          
          const txStatus = await transactions.getTxStatus({ txid });
          console.log(txStatus);
          
          const txHex = await transactions.getTxHex({ txid });
          console.log(txHex);
          
          const txRaw = await transactions.getTxRaw({ txid });
          console.log(txRaw);
          
          const txMerkleBlockProof = await transactions.getTxMerkleBlockProof({
            txid,
          });
          console.log(txMerkleBlockProof);
          
          const txMerkleProof = await transactions.getTxMerkleProof({ txid });
          console.log(txMerkleProof);
          
          const txOutspend = await transactions.getTxOutspend({
            txid,
            vout: 3,
          });
          console.log(txOutspend);
          
          const txOutspends = await transactions.getTxOutspends({ txid });
          console.log(txOutspends);
          
          const postTx = await transactions.postTx({ txhex: txHex });
          console.log(postTx);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>
        

================================================
File: examples/html/bitcoin/websocket.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            bitcoin: { websocket },
          } = mempoolJS();

          const ws = websocket.wsInitBrowser();

          ws.addEventListener('message', function incoming({data}) {
            console.log(JSON.parse(data.toString()));
          });

          websocket.wsWantDataBrowser(ws, ['blocks', 'stats', 'mempool-blocks', 'live-2h-chart']);

          websocket.wsTrackAddressBrowser(ws, "1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC");

          websocket.wsTrackAddressesBrowser(ws, [
            "1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC",
          ]);

          websocket.wsTrackTransactionBrowser(ws, "01313ca0148a1bbe5676e5dd6a84e76f8b39038658bd8c333d3b2d3f7ea6dd08");

          websocket.wsTrackRbfSummaryBrowser(ws);

          websocket.wsTrackRbfBrowser(ws, true);

          websocket.wsTrackMempoolBlockBrowser(ws, 1);

          setTimeout(() => {
            websocket.wsStopDataBrowser(ws);
            websocket.wsStopTrackingAddressBrowser(ws);
            websocket.wsStopTrackingAddressesBrowser(ws);
            websocket.wsStopTrackingTransactionBrowser(ws);
            websocket.wsStopTrackingRbfSummaryBrowser(ws);
            websocket.wsStopTrackingRbfBrowser(ws);
            websocket.wsStopTrackingMempoolBlockBrowser(ws);
          }, 60000);

        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/liquid/addresses.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            liquid: { addresses },
          } = mempoolJS( { hostname: 'liquid.network' } );
          
          const address = 'Go65t19hP2FuhBMYtgbdMDgdmEzNwh1i48';
          
          const myAddress = await addresses.getAddress({ address });
          console.log(myAddress);
          
          const addressTxs = await addresses.getAddressTxs({ address });
          console.log(addressTxs);
          
          const addressTxsChain = await addresses.getAddressTxsChain({ address });
          console.log(addressTxsChain);
          
          const addressTxsMempool = await addresses.getAddressTxsMempool({
            address,
          });
          console.log(addressTxsMempool);
          
          const addressTxsUtxo = await addresses.getAddressTxsUtxo({ address });
          console.log(addressTxsUtxo);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/liquid/assets.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            liquid: { assets },
          } = mempoolJS( { hostname: 'liquid.network' } );
          
          const asset_id = 'a0c358a0f6947864af3a06f3f6a2aeb304df7fd95c922f2f22d7412399ce7691';
          
          const asset = await assets.getAsset({ asset_id });
          console.log(asset);
          
          const assetTxs = await assets.getAssetTxs({
            asset_id,
            is_mempool: false,
          });
          console.log(assetTxs);
          
          const assetSupply = await assets.getAssetSupply({
            asset_id,
            decimal: false,
          });
          console.log(assetSupply);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/liquid/blocks.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {          
          const {
            liquid: { blocks },
          } = mempoolJS( { hostname: 'liquid.network' } );
          
          const hash =
          '54f02bdec5509ea769c8be82aed51f689969b653d92a2812d5a36266cbfbc55e';
          
          const block = await blocks.getBlock({ hash });
          console.log(block);
          
          const blockStatus = await blocks.getBlockStatus({ hash });
          console.log(blockStatus);
          
          const blockTxs = await blocks.getBlockTxs({ hash });
          console.log(blockTxs);
          
          const blockTxids = await blocks.getBlockTxids({ hash });
          console.log(blockTxids);
          
          const blockTxid = await blocks.getBlockTxid({ hash, index: 0 });
          console.log(blockTxid);
          
          const blockRaw = await blocks.getBlockRaw({ hash });
          console.log(blockRaw);
          
          const blockHeight = await blocks.getBlockHeight({ height: 0 });
          console.log(blockHeight);
          
          const getBlocks = await blocks.getBlocks({ start_height: 9999 });
          console.log(getBlocks);
          
          const blocksTipHeight = await blocks.getBlocksTipHeight();
          console.log(blocksTipHeight);
          
          const blocksTipHash = await blocks.getBlocksTipHash();
          console.log(blocksTipHash);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/liquid/fees.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            liquid: { fees },
          } = mempoolJS( { hostname: 'liquid.network' } );
          
          const feesRecommended = await fees.getFeesRecommended();
          console.log(feesRecommended);
          
          const feesMempoolBlocks = await fees.getFeesMempoolBlocks();
          console.log(feesMempoolBlocks);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/liquid/mempool.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            liquid: { mempool },
          } = mempoolJS( { hostname: 'liquid.network' } );
          
          const getMempool = await mempool.getMempool();
          console.log(getMempool);
          
          const getMempoolRecent = await mempool.getMempoolRecent();
          console.log(getMempoolRecent);
          
          const getMempoolTxids = await mempool.getMempoolTxids();
          console.log(getMempoolTxids);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/liquid/transactions.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            liquid: { transactions },
          } = mempoolJS( { hostname: 'liquid.network' } );
          
          const txid =
          '064d1dff90cbb6fce81311f9804a737df9e3873bc4717ff6aae068fffab423ab';
          
          const tx = await transactions.getTx({ txid });
          console.log(tx);
          
          const txStatus = await transactions.getTxStatus({ txid });
          console.log(txStatus);
          
          const txHex = await transactions.getTxHex({ txid });
          console.log(txHex);
          
          const txRaw = await transactions.getTxRaw({ txid });
          console.log(txRaw);
          
          const txMerkleProof = await transactions.getTxMerkleProof({ txid });
          console.log(txMerkleProof);
          
          const txOutspend = await transactions.getTxOutspend({
            txid,
            vout: 3,
          });
          console.log(txOutspend);
          
          const txOutspends = await transactions.getTxOutspends({ txid });
          console.log(txOutspends);
          
          const postTx = await transactions.postTx({ txhex: txHex });
          console.log(postTx);
        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/html/liquid/websocket.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
    <script src="./../../../dist/mempool.js"></script>
    <script>
      const init = async () => {
        try {
          const {
            liquid: { websocket },
          } = mempoolJS( { hostname: 'liquid.network' } );

          const ws = websocket.wsInitBrowser();

          ws.addEventListener('message', function incoming({data}) {
            console.log(JSON.parse(data.toString()));
          });

          websocket.wsWantDataBrowser(ws, ['blocks', 'stats', 'mempool-blocks', 'live-2h-chart']);

          websocket.wsTrackAddressBrowser(ws, "GiAi95k5JUPNPoDGNzSUZ8vWMijSiSMTon");

          websocket.wsTrackAddressesBrowser(ws, [
            "GsDhxpV4Voi3XJA22bnAH4q8117hjZrQMF",
          ]);

          websocket.wsTrackTransactionBrowser(ws, "23195d459a70875c3b1f9fb9082acc9f0594f1c63dac71b40f2ff7298630a421");

          websocket.wsTrackMempoolBlockBrowser(ws, 1);

          setTimeout(() => {
            websocket.wsStopDataBrowser(ws);
            websocket.wsStopTrackingAddressBrowser(ws);
            websocket.wsStopTrackingAddressesBrowser(ws);
            websocket.wsStopTrackingTransactionBrowser(ws);
            websocket.wsStopTrackingMempoolBlockBrowser(ws);
          }, 60000);

        } catch (error) {
          console.log(error);
        }
      };
      init();
    </script>
  </head>
  <body></body>
</html>


================================================
File: examples/nodejs/bitcoin/addresses.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const { bitcoin: { addresses } } = mempoolJS();
    
    const address = '1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC';
    
    const myAddress = await addresses.getAddress({ address });
    console.log(myAddress);
    
    const addressTxs = await addresses.getAddressTxs({ address });
    console.log(addressTxs);
    
    const addressTxsChain = await addresses.getAddressTxsChain({ address });
    console.log(addressTxsChain);
    
    const addressTxsMempool = await addresses.getAddressTxsMempool({ address });
    console.log(addressTxsMempool);
    
    const addressTxsUtxo = await addresses.getAddressTxsUtxo({ address });
    console.log(addressTxsUtxo);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/bitcoin/blocks.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      bitcoin: { blocks },
    } = mempoolJS();
    
    const hash =
    '000000000000000015dc777b3ff2611091336355d3f0ee9766a2cf3be8e4b1ce';
    
    const block = await blocks.getBlock({ hash });
    console.log(block);
    
    const blockStatus = await blocks.getBlockStatus({ hash });
    console.log(blockStatus);
    
    const blockTxs = await blocks.getBlockTxs({ hash });
    console.log(blockTxs);
    
    const blockTxids = await blocks.getBlockTxids({ hash });
    console.log(blockTxids);
    
    const blockTxid = await blocks.getBlockTxid({ hash, index: 218 });
    console.log(blockTxid);
    
    const blockRaw = await blocks.getBlockRaw({ hash });
    console.log(blockRaw);
    
    const blockHeader = await blocks.getBlockHeader({ hash });
    console.log(blockHeader);
    
    const blockHeight = await blocks.getBlockHeight({ height: 0 });
    console.log(blockHeight);
    
    const getBlocks = await blocks.getBlocks({ start_height: 9999 });
    console.log(getBlocks);
    
    const blocksTipHeight = await blocks.getBlocksTipHeight();
    console.log(blocksTipHeight);
    
    const blocksTipHash = await blocks.getBlocksTipHash();
    console.log(blocksTipHash);
  } catch (error) {
    console.log(error);
  }
};
init();
  

================================================
File: examples/nodejs/bitcoin/difficulty.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      bitcoin: { difficulty },
    } = mempoolJS();
    
    const difficultyAdjustment = await difficulty.getDifficultyAdjustment();
    console.log(difficultyAdjustment);

    const hashrate = await difficulty.getHashrate({ interval: "1m" });
    console.log(hashrate);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/bitcoin/fees.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {    
    const {
      bitcoin: { fees },
    } = mempoolJS();
    
    const feesRecommended = await fees.getFeesRecommended();
    console.log(feesRecommended);
    
    const feesMempoolBlocks = await fees.getFeesMempoolBlocks();
    console.log(feesMempoolBlocks);
    
    const txid = '94bb221746f0626caf63c8dd279e07963bfe514fabe596019c95a41c5f5af97c';
    
    const feesCPFP = await fees.getCPFP({ txid });
    console.log(feesCPFP);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/bitcoin/lightning.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const { bitcoin: { lightning } } = mempoolJS();
    
    const node = '03d607f3e69fd032524a867b288216bfab263b6eaee4e07783799a6fe69bb84fac';
    const channel = '768457472831193088';

    const networkStats = await lightning.getNetworkStats();
    console.log(networkStats);

    const nodesInCountry = await lightning.getNodesInCountry({ country: 'fr' });
    console.log(nodesInCountry);

    const nodesStatsPerCountry = await lightning.getNodesStatsPerCountry();
    console.log(nodesStatsPerCountry);

    const nodesHostedByISP = await lightning.getNodesHostedByISP({ isp: 16509 });
    console.log(nodesHostedByISP);

    const ispRanking = await lightning.getISPRanking();
    console.log(ispRanking);

    const liquidityRanking = await lightning.getLiquidityRanking();
    console.log(liquidityRanking);

    const connectivityRanking = await lightning.getConnectivityRanking();
    console.log(connectivityRanking);

    const oldestNodes = await lightning.getOldestNodes();
    console.log(oldestNodes);

    const nodeStats = await lightning.getNodeStats({ public_key: node });
    console.log(nodeStats);

    const historicalNodeStats = await lightning.getHistoricalNodeStats({ public_key: node });
    console.log(historicalNodeStats);

    const channelData = await lightning.getChannel({ id: channel });
    console.log(channelData);

    const channelsFromTxIds = await lightning.getChannelsFromTxIds({ txId: ['c3173549f502ede6440d5c48ea74af5607d88484c7a912bbef73d430049f8af4', 'd78f0b41a263af3df91fa4171cc2f60c40196aaf8f4bde5d1c8ff4474cfe753b'] });
    console.log(channelsFromTxIds);

    const channelsFromNodePublicKey = await lightning.getChannelsFromNodePublicKey({ public_key: node, status: 'active'});
    console.log(channelsFromNodePublicKey);

    const channelsGeodata = await lightning.getChannelsGeodata();
    console.log(channelsGeodata);

    const channelsGeodataByPublicKey = await lightning.getChannelsGeodataByPublicKey({ public_key: node });
    console.log(channelsGeodataByPublicKey);
  
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/bitcoin/mempool.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      bitcoin: { mempool },
    } = mempoolJS();
    
    const getMempool = await mempool.getMempool();
    console.log(getMempool);
    
    const getMempoolRecent = await mempool.getMempoolRecent();
    console.log(getMempoolRecent);
    
    const getMempoolTxids = await mempool.getMempoolTxids();
    console.log(getMempoolTxids);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/bitcoin/transactions.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      bitcoin: { transactions },
    } = mempoolJS();
    
    const txid =
    '15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521';
    
    const tx = await transactions.getTx({ txid });
    console.log(tx);
    
    const txStatus = await transactions.getTxStatus({ txid });
    console.log(txStatus);
    
    const txHex = await transactions.getTxHex({ txid });
    console.log(txHex);
    
    const txRaw = await transactions.getTxRaw({ txid });
    console.log(txRaw);
    
    const txMerkleBlockProof = await transactions.getTxMerkleBlockProof({ txid });
    console.log(txMerkleBlockProof);
    
    const txMerkleProof = await transactions.getTxMerkleProof({ txid });
    console.log(txMerkleProof);
    
    const txOutspend = await transactions.getTxOutspend({
      txid,
      vout: 3,
    });
    console.log(txOutspend);
    
    const txOutspends = await transactions.getTxOutspends({ txid });
    console.log(txOutspends);
    
    // const postTx = await transactions.postTx({ txhex });
    // console.log(postTx);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/bitcoin/websocket.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      bitcoin: { websocket },
    } = mempoolJS();
    
    const ws = websocket.wsInit();

    ws.addEventListener('message', function incoming({data}) {
      console.log(JSON.parse(data.toString()));
    });

    websocket.wsWantData(ws, ['blocks', 'stats', 'mempool-blocks', 'live-2h-chart']);

    websocket.wsTrackAddress(ws, "1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC");

    websocket.wsTrackAddresses(ws, [
      "1wizSAYSbuyXbt9d8JV8ytm5acqq2TorC",
    ]);

    websocket.wsTrackTransaction(ws, "01313ca0148a1bbe5676e5dd6a84e76f8b39038658bd8c333d3b2d3f7ea6dd08");

    websocket.wsTrackRbfSummary(ws);

    websocket.wsTrackRbf(ws, true);

    websocket.wsTrackMempoolBlock(ws, 1);

    setTimeout(() => {
      websocket.wsStopData(ws);
      websocket.wsStopTrackingAddress(ws);
      websocket.wsStopTrackingAddresses(ws);
      websocket.wsStopTrackingTransaction(ws);
      websocket.wsStopTrackingRbfSummary(ws);
      websocket.wsStopTrackingRbf(ws);
      websocket.wsStopTrackingMempoolBlock(ws);
    }, 60000);

  } catch (error) {
    console.log(error);
  }
}
init();


================================================
File: examples/nodejs/liquid/addresses.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      liquid: { addresses },
    } = mempoolJS( { hostname: 'liquid.network' } );
    
    const address = 'Go65t19hP2FuhBMYtgbdMDgdmEzNwh1i48';
    
    const myAddress = await addresses.getAddress({ address });
    console.log(myAddress);
    
    const addressTxs = await addresses.getAddressTxs({ address });
    console.log(addressTxs);
    
    const addressTxsChain = await addresses.getAddressTxsChain({ address });
    console.log(addressTxsChain);
    
    const addressTxsMempool = await addresses.getAddressTxsMempool({ address });
    console.log(addressTxsMempool);
    
    const addressTxsUtxo = await addresses.getAddressTxsUtxo({ address });
    console.log(addressTxsUtxo);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/liquid/assets.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      liquid: { assets },
    } = mempoolJS( { hostname: 'liquid.network' } );
    
    const asset_id =
    '6f0279e9ed041c3d710a9f57d0c02928416460c4b722ae3457a11eec381c526d';
    
    const asset = await assets.getAsset({ asset_id });
    console.log(asset);
    
    const assetTxs = await assets.getAssetTxs({ asset_id, is_mempool: false });
    console.log(assetTxs);
    
    const assetSupply = await assets.getAssetSupply({ asset_id, decimal: false });
    console.log(assetSupply);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/liquid/blocks.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      liquid: { blocks },
    } = mempoolJS( { hostname: 'liquid.network' } );
    
    const hash =
    '5ec96b63f95aad27391a8a41f1dce2161d48c4f26aeb1f72695a12c98a005e1f';
    
    const block = await blocks.getBlock({ hash });
    console.log(block);
    
    const blockStatus = await blocks.getBlockStatus({ hash });
    console.log(blockStatus);
    
    const blockTxs = await blocks.getBlockTxs({ hash });
    console.log(blockTxs);
    
    const blockTxids = await blocks.getBlockTxids({ hash });
    console.log(blockTxids);
    
    const blockTxid = await blocks.getBlockTxid({ hash, index: 1 });
    console.log(blockTxid);
    
    const blockRaw = await blocks.getBlockRaw({ hash });
    console.log(blockRaw);
    
    const blockHeight = await blocks.getBlockHeight({ height: 0 });
    console.log(blockHeight);
    
    const getBlocks = await blocks.getBlocks({ start_height: 9999 });
    console.log(getBlocks);
    
    const blocksTipHeight = await blocks.getBlocksTipHeight();
    console.log(blocksTipHeight);
    
    const blocksTipHash = await blocks.getBlocksTipHash();
    console.log(blocksTipHash);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/liquid/fees.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {    
    const {
      liquid: { fees },
    } = mempoolJS( { hostname: 'liquid.network' } );
    
    const feesRecommended = await fees.getFeesRecommended();
    console.log(feesRecommended);
    
    const feesMempoolBlocks = await fees.getFeesMempoolBlocks();
    console.log(feesMempoolBlocks);
  } catch (error) {
    console.log(error);    
  }
};
init();


================================================
File: examples/nodejs/liquid/mempool.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      liquid: { mempool },
    } = mempoolJS( { hostname: 'liquid.network' } );
    
    const getMempool = await mempool.getMempool();
    console.log(getMempool);
    
    const getMempoolRecent = await mempool.getMempoolRecent();
    console.log(getMempoolRecent);
    
    const getMempoolTxids = await mempool.getMempoolTxids();
    console.log(getMempoolTxids);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/liquid/transactions.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {
    const {
      liquid: { transactions },
    } = mempoolJS( { hostname: 'liquid.network' } );
    
    const txid =
    '555fbc3ca784903b238fdadc92515577dfa9124185259c5d9a773508bbc365e5';
    
    const tx = await transactions.getTx({ txid });
    console.log(tx);
    
    const txStatus = await transactions.getTxStatus({ txid });
    console.log(txStatus);
    
    const txHex = await transactions.getTxHex({ txid });
    console.log(txHex);
    
    const txRaw = await transactions.getTxRaw({ txid });
    console.log(txRaw);
        
    const txMerkleProof = await transactions.getTxMerkleProof({ txid });
    console.log(txMerkleProof);
    
    const txOutspend = await transactions.getTxOutspend({
      txid,
      vout: 3,
    });
    console.log(txOutspend);
    
    const txOutspends = await transactions.getTxOutspends({ txid });
    console.log(txOutspends);
    
    const postTx = await transactions.postTx({ txhex: txHex });
    console.log(postTx);
  } catch (error) {
    console.log(error);
  }
};
init();


================================================
File: examples/nodejs/liquid/websocket.ts
================================================
import mempoolJS from "./../../../src/index";

const init = async () => {
  try {

    const { liquid: { websocket } } = mempoolJS( { hostname: 'liquid.network' } );

    const ws = websocket.wsInit();

    ws.addEventListener('message', function incoming({data}) {
      console.log(JSON.parse(data.toString()));
    });

    websocket.wsWantData(ws, ['blocks', 'stats', 'mempool-blocks', 'live-2h-chart']);

    websocket.wsTrackAddress(ws, "GiAi95k5JUPNPoDGNzSUZ8vWMijSiSMTon");

    websocket.wsTrackAddresses(ws, [
      "GsDhxpV4Voi3XJA22bnAH4q8117hjZrQMF",
    ]);

    websocket.wsTrackTransaction(ws, "23195d459a70875c3b1f9fb9082acc9f0594f1c63dac71b40f2ff7298630a421");

    websocket.wsTrackMempoolBlock(ws, 1);

    setTimeout(() => {
      websocket.wsStopData(ws);
      websocket.wsStopTrackingAddress(ws);
      websocket.wsStopTrackingAddresses(ws);
      websocket.wsStopTrackingTransaction(ws);
      websocket.wsStopTrackingMempoolBlock(ws);
    }, 60000);

  } catch (error) {
    console.log(error);
  }
}
init();


================================================
File: src/index.ts
================================================
import { MempoolConfig, MempoolReturn } from './interfaces/index';
import { makeBitcoinAPI, makeLiquidAPI } from './services/api/index';

import { useAddresses } from './app/bitcoin/addresses';
import { useBlocks } from './app/bitcoin/blocks';
import { useDifficulty } from './app/bitcoin/difficulty';
import { useFees } from './app/bitcoin/fees';
import { useLightning } from './app/bitcoin/lightning';
import { useMempool } from './app/bitcoin/mempool';
import { useTransactions } from './app/bitcoin/transactions';
import { useWebsocket } from './app/bitcoin/websocket';

import { useAssets as useAssetsLiquid } from './app/liquid/assets';
import { useAddresses as useAddressesLiquid } from './app/liquid/addresses';
import { useBlocks as useBlocksLiquid } from './app/liquid/blocks';
import { useFees as useFeesLiquid } from './app/liquid/fees';
import { useMempool as useMempoolLiquid } from './app/liquid/mempool';
import { useTransactions as useTransactionsLiquid } from './app/liquid/transactions';
import { useWebsocket as useWebsocketLiquid } from './app/liquid/websocket';

const hostnameEndpointDefault = 'mempool.space';
const networkEndpointDefault = 'main';

const mempool = (
  { hostname, network, protocol, config }: MempoolConfig = {
    hostname: hostnameEndpointDefault,
    network: networkEndpointDefault,
  }
): MempoolReturn => {
  if (!hostname) hostname = hostnameEndpointDefault;
  if (!network) network = networkEndpointDefault;

  const { api: apiBitcoin } = makeBitcoinAPI({
    hostname,
    network,
    protocol,
    config,
  });
  const { api: apiLiquid } = makeLiquidAPI({
    hostname,
    network,
    protocol,
    config,
  });
  return {
    bitcoin: {
      addresses: useAddresses(apiBitcoin),
      blocks: useBlocks(apiBitcoin),
      difficulty: useDifficulty(apiBitcoin),
      fees: useFees(apiBitcoin),
      lightning: useLightning(apiBitcoin),
      mempool: useMempool(apiBitcoin),
      transactions: useTransactions(apiBitcoin),
      websocket: useWebsocket(hostname, network, protocol),
    },
    liquid: {
      addresses: useAddressesLiquid(apiLiquid),
      assets: useAssetsLiquid(apiLiquid),
      blocks: useBlocksLiquid(apiLiquid),
      fees: useFeesLiquid(apiLiquid),
      mempool: useMempoolLiquid(apiLiquid),
      transactions: useTransactionsLiquid(apiLiquid),
      websocket: useWebsocketLiquid(hostname, network, protocol),
    },
  };
};

mempool.default = mempool;
export = mempool;


================================================
File: src/app/bitcoin/addresses.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Address,
  AddressTxsUtxo,
  AddressInstance,
} from '../../interfaces/bitcoin/addresses';
import { Tx } from '../../interfaces/bitcoin/transactions';

export const useAddresses = (api: AxiosInstance): AddressInstance => {
  const getAddress = async (params: { address: string }) => {
    const { data } = await api.get<Address>(`/address/${params.address}`);
    return data;
  };

  const getAddressTxs = async (params: { address: string, after_txid?: string }) => {
    if (params.after_txid) {
      const { data } = await api.get<Tx[]>(`/address/${params.address}/txs?after_txid=${params.after_txid}`);
      return data;
    }
    const { data } = await api.get<Tx[]>(`/address/${params.address}/txs`);
    return data;
  };

  const getAddressTxsChain = async (params: { address: string }) => {
    const { data } = await api.get<Tx[]>(
      `/address/${params.address}/txs/chain`
    );
    return data;
  };

  const getAddressTxsMempool = async (params: { address: string }) => {
    const { data } = await api.get<Tx[]>(
      `/address/${params.address}/txs/mempool`
    );
    return data;
  };

  const getAddressTxsUtxo = async (params: { address: string }) => {
    const { data } = await api.get<AddressTxsUtxo[]>(
      `/address/${params.address}/utxo`
    );
    return data;
  };

  return {
    getAddress,
    getAddressTxs,
    getAddressTxsChain,
    getAddressTxsMempool,
    getAddressTxsUtxo,
  };
};


================================================
File: src/app/bitcoin/blocks.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Block,
  BlockStatus,
  BlockInstance,
} from '../../interfaces/bitcoin/blocks';
import { Tx } from '../../interfaces/bitcoin/transactions';

export const useBlocks = (api: AxiosInstance): BlockInstance => {
  const getBlock = async (params: { hash: string }) => {
    const { data } = await api.get<Block>(`/v1/block/${params.hash}`);
    return data;
  };

  const getBlockStatus = async (params: { hash: string }) => {
    const { data } = await api.get<BlockStatus>(`/block/${params.hash}/status`);
    return data;
  };

  const getBlockTxs = async (params: {
    hash: string;
    start_index?: number;
  }) => {
    const { data } = await api.get<Tx>(
      `/block/${params.hash}/txs/${params.start_index}`
    );
    return data;
  };

  const getBlockTxids = async (params: { hash: string }) => {
    const { data } = await api.get<string[]>(`/block/${params.hash}/txids`);
    return data;
  };

  const getBlockTxid = async (params: { hash: string; index: number }) => {
    const { data } = await api.get<string>(
      `/block/${params.hash}/txid/${params.index}`
    );
    return data;
  };

  const getBlockRaw = async (params: { hash: string }) => {
    const { data } = await api.get<string>(`/block/${params.hash}/raw`);
    return data;
  };

  const getBlockHeader = async (params: { hash: string }) => {
    const { data } = await api.get<string>(`/block/${params.hash}/header`);
    return data;
  };

  const getBlockHeight = async (params: { height: number }) => {
    const { data } = await api.get<string>(`/block-height/${params.height}`);
    return data;
  };

  const getBlocks = async (params: { start_height?: number }) => {
    const { data } = await api.get<Block[]>(`/v1/blocks/${params.start_height}`);
    return data;
  };

  const getBlocksTipHeight = async () => {
    const { data } = await api.get<number>(`/blocks/tip/height`);
    return data;
  };

  const getBlocksTipHash = async () => {
    const { data } = await api.get<string>(`/blocks/tip/hash`);
    return data;
  };

  return {
    getBlock,
    getBlocks,
    getBlockStatus,
    getBlockTxs,
    getBlockTxid,
    getBlockTxids,
    getBlockRaw,
    getBlockHeader,
    getBlockHeight,
    getBlocksTipHash,
    getBlocksTipHeight,
  };
};


================================================
File: src/app/bitcoin/difficulty.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Adjustment,
  DifficultyInstance,
  Hashrate,
} from '../../interfaces/bitcoin/difficulty';

export const useDifficulty = (api: AxiosInstance): DifficultyInstance => {
  const getDifficultyAdjustment = async () => {
    const { data } = await api.get<Adjustment>(`/v1/difficulty-adjustment`);
    return data;
  };

  const getHashrate = async (params: { interval: string }): Promise<Hashrate> => {
    const { data } = await api.get<Hashrate>(`/v1/mining/hashrate/${params.interval}`);
    return data;
  }

  return {
    getDifficultyAdjustment,
    getHashrate,
  };
};


================================================
File: src/app/bitcoin/fees.ts
================================================
import { AxiosInstance } from 'axios';
import {
  FeesRecommended,
  FeesMempoolBlocks,
  FeeInstance,
} from '../../interfaces/bitcoin/fees';

export const useFees = (api: AxiosInstance): FeeInstance => {
  const getFeesRecommended = async () => {
    const { data } = await api.get<FeesRecommended>(`/v1/fees/recommended`);
    return data;
  };

  const getFeesMempoolBlocks = async () => {
    const { data } = await api.get<FeesMempoolBlocks[]>(
      `/v1/fees/mempool-blocks`
    );
    return data;
  };

  const getCPFP = async (params: { txid: string }) => {
    const { data } = await api.get<FeesMempoolBlocks[]>(
      `/v1/cpfp/${params.txid}`
    );
    return data;
  };

  return {
    getFeesRecommended,
    getFeesMempoolBlocks,
    getCPFP,
  };
};


================================================
File: src/app/bitcoin/lightning.ts
================================================
import { AxiosInstance } from 'axios';
import { Channel, LightningInstance, NetworkStats, Node, NodeStats } from '../../interfaces/bitcoin/lightning';

export const useLightning = (api: AxiosInstance): LightningInstance => {
  const getNetworkStats = async () => {
    const { data } = await api.get<NetworkStats>(`/v1/lightning/statistics/latest`);
    return data;
  }

  const getNodesInCountry = async (params: { country: string }) => {
    const { data } = await api.get<Node[]>(`/v1/lightning/nodes/country/${params.country}`);
    return data;
  }

  const getNodesStatsPerCountry = async () => {
    const { data } = await api.get<any>(`/v1/lightning/nodes/countries`);
    return data;
  }

  const getNodesHostedByISP = async (params: { isp: number }) => {
    const { data } = await api.get<Node[]>(`/v1/lightning/nodes/isp/${params.isp}`);
    return data;
  }

  const getISPRanking = async () => {
    const { data } = await api.get<any>(`/v1/lightning/nodes/isp-ranking`);
    return data;
  }
  
  const getLiquidityRanking = async () => {
    const { data } = await api.get<Node[]>(`/v1/lightning/nodes/rankings/liquidity`);
    return data;
  }

  const getConnectivityRanking = async () => {
      const { data } = await api.get<Node[]>(`/v1/lightning/nodes/rankings/connectivity`);
      return data;
  }

  const getOldestNodes = async () => {
    const { data } = await api.get<Node[]>(`/v1/lightning/nodes/rankings/age`);
    return data;
  }

  const getNodeStats = async (params: { public_key: string }) => {
    const { data } = await api.get<Node>(`/v1/lightning/nodes/${params.public_key}`);
    return data;
  }

  const getHistoricalNodeStats = async (params: { public_key: string }) => {
    const { data } = await api.get<NodeStats[]>(`/v1/lightning/nodes/${params.public_key}/statistics`);
    return data;
  }

  const getChannel = async (params: { id: string }) => {
    const { data } = await api.get<Channel>(`/v1/lightning/channels/${params.id}`);
    return data;
  }

  const getChannelsFromTxIds = async (params: { txId: string[] }) => {
    const { data } = await api.get<any[]>(`/v1/lightning/channels/txids?txId[]=${params.txId.join('&txId[]=')}`);
    return data;
  }

  const getChannelsFromNodePublicKey = async (params: { public_key: string, status: string, index?: number }) => {
    const { data } = await api.get<Channel[]>(`/v1/lightning/channels?public_key=${params.public_key}&status=${params.status}&index=${params?.index}`);
    return data;
  }

  const getChannelsGeodata = async () => {
    const { data } = await api.get<any[]>(`/v1/lightning/channels-geo`);
    return data;
  }

  const getChannelsGeodataByPublicKey = async (params: { public_key: string }) => {
    const { data } = await api.get<any[]>(`/v1/lightning/channels-geo/${params.public_key}`);
    return data;
  }

  return {
    getNetworkStats,
    getNodesInCountry,
    getNodesStatsPerCountry,
    getNodesHostedByISP,
    getISPRanking,
    getLiquidityRanking,
    getConnectivityRanking,
    getOldestNodes,
    getNodeStats,
    getHistoricalNodeStats,
    getChannel,
    getChannelsFromTxIds,
    getChannelsFromNodePublicKey,
    getChannelsGeodata,
    getChannelsGeodataByPublicKey,
  };
};


================================================
File: src/app/bitcoin/mempool.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Mempool,
  MempoolRecent,
  MempoolInstance,
} from '../../interfaces/bitcoin/mempool';

export const useMempool = (api: AxiosInstance): MempoolInstance => {
  const getMempool = async () => {
    const { data } = await api.get<Mempool[]>(`/mempool`);
    return data;
  };

  const getMempoolTxids = async () => {
    const { data } = await api.get<string[]>(`/mempool/txids`);
    return data;
  };

  const getMempoolRecent = async () => {
    const { data } = await api.get<MempoolRecent[]>(`/mempool/recent`);
    return data;
  };

  return {
    getMempool,
    getMempoolTxids,
    getMempoolRecent,
  };
};


================================================
File: src/app/bitcoin/transactions.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Tx,
  TxStatus,
  TxMerkleProof,
  TxOutspend,
  TxInstance,
} from '../../interfaces/bitcoin/transactions';

export const useTransactions = (api: AxiosInstance): TxInstance => {
  const getTx = async (params: { txid: string }) => {
    const { data } = await api.get<Tx>(`/tx/${params.txid}`);
    return data;
  };

  const getTxStatus = async (params: { txid: string }) => {
    const { data } = await api.get<TxStatus>(`/tx/${params.txid}/status`);
    return data;
  };

  const getTxHex = async (params: { txid: string }) => {
    const { data } = await api.get<string>(`/tx/${params.txid}/hex`);
    return data;
  };

  const getTxRaw = async (params: { txid: string }) => {
    const { data } = await api.get<string>(`/tx/${params.txid}/raw`);
    return data;
  };

  const getTxMerkleBlockProof = async (params: { txid: string }) => {
    const { data } = await api.get<string>(
      `/tx/${params.txid}/merkleblock-proof`
    );
    return data;
  };

  const getTxMerkleProof = async (params: { txid: string }) => {
    const { data } = await api.get<TxMerkleProof>(
      `/tx/${params.txid}/merkle-proof`
    );
    return data;
  };

  const getTxOutspend = async (params: { txid: string; vout: number }) => {
    const { data } = await api.get<TxOutspend>(
      `/tx/${params.txid}/outspend/${params.vout}`
    );
    return data;
  };

  const getTxOutspends = async (params: { txid: string }) => {
    const { data } = await api.get<Array<TxOutspend>>(
      `/tx/${params.txid}/outspends`
    );
    return data;
  };

  const postTx = async (params: { txhex: string }) => {
    const { data } = await api.post<string>(`/tx`, params.txhex );
    return data;
  };

  return {
    getTx,
    getTxStatus,
    getTxHex,
    getTxRaw,
    getTxMerkleBlockProof,
    getTxMerkleProof,
    getTxOutspend,
    getTxOutspends,
    postTx,
  };
};


================================================
File: src/app/bitcoin/websocket.ts
================================================
import { WsInstance } from '../../interfaces/bitcoin/websockets';
import { 
  wsInit as wsInitBrowser,
  wsWantData as wsWantDataBrowser,
  wsStopData as wsStopDataBrowser,
  wsTrackAddress as wsTrackAddressBrowser,
  wsStopTrackingAddress as wsStopTrackingAddressBrowser,
  wsTrackAddresses as wsTrackAddressesBrowser,
  wsStopTrackingAddresses as wsStopTrackingAddressesBrowser,
  wsTrackTransaction as wsTrackTransactionBrowser,
  wsStopTrackingTransaction as wsStopTrackingTransactionBrowser,
  wsTrackRbfSummary as wsTrackRbfSummaryBrowser,
  wsStopTrackingRbfSummary as wsStopTrackingRbfSummaryBrowser,
  wsTrackRbf as wsTrackRbfBrowser,
  wsStopTrackingRbf as wsStopTrackingRbfBrowser,
  wsTrackMempoolBlock as wsTrackMempoolBlockBrowser,
  wsStopTrackingMempoolBlock as wsStopTrackingMempoolBlockBrowser,
} from '../../services/ws/ws-client-browser';
import { 
  wsInit,
  wsWantData,
  wsStopData,
  wsTrackAddress,
  wsStopTrackingAddress,
  wsTrackAddresses,
  wsStopTrackingAddresses,
  wsTrackTransaction,
  wsStopTrackingTransaction,
  wsTrackRbfSummary,
  wsStopTrackingRbfSummary,
  wsTrackRbf,
  wsStopTrackingRbf,
  wsTrackMempoolBlock,
  wsStopTrackingMempoolBlock
 } from '../../services/ws/ws-client-node';
import WebSocketServer from 'ws';

export const useWebsocket = (hostname: string, network: string, protocol: string | undefined): WsInstance => {

  if (!protocol) {
    hostname?.includes('localhost') ? protocol = 'ws' : protocol = 'wss';
  } else if (protocol === 'http' || protocol === 'ws') {
    protocol = 'ws';
  } else {
    protocol = 'wss';
  }
  if (network && ['testnet', 'signet'].includes(network)) {
    network = `/${network}`;
  } else {
    network = '';
  }

  const wsEndpoint = `${protocol}://${hostname}${network}/api/v1/ws`
  return {
    wsInit: () => wsInit(wsEndpoint),
    wsInitBrowser: () => wsInitBrowser(wsEndpoint),
    wsWantData: (ws: WebSocketServer, options: string[]) => wsWantData(ws, options),
    wsWantDataBrowser: (ws: WebSocket, options: string[]) => wsWantDataBrowser(ws, options),
    wsStopData: (ws: WebSocketServer) => wsStopData(ws),
    wsStopDataBrowser: (ws: WebSocket) => wsStopDataBrowser(ws),
    wsTrackAddress: (ws: WebSocketServer, address: string) => wsTrackAddress(ws, address),
    wsTrackAddressBrowser: (ws: WebSocket, address: string) => wsTrackAddressBrowser(ws, address),
    wsStopTrackingAddress: (ws: WebSocketServer) => wsStopTrackingAddress(ws),
    wsStopTrackingAddressBrowser: (ws: WebSocket) => wsStopTrackingAddressBrowser(ws),
    wsTrackAddresses: (ws: WebSocketServer, addresses: string[]) => wsTrackAddresses(ws, addresses),
    wsTrackAddressesBrowser: (ws: WebSocket, addresses: string[]) => wsTrackAddressesBrowser(ws, addresses),
    wsStopTrackingAddresses: (ws: WebSocketServer) => wsStopTrackingAddresses(ws),
    wsStopTrackingAddressesBrowser: (ws: WebSocket) => wsStopTrackingAddressesBrowser(ws),
    wsTrackTransaction: (ws: WebSocketServer, txid: string) => wsTrackTransaction(ws, txid),
    wsTrackTransactionBrowser: (ws: WebSocket, txid: string) => wsTrackTransactionBrowser(ws, txid),
    wsStopTrackingTransaction: (ws: WebSocketServer) => wsStopTrackingTransaction(ws),
    wsStopTrackingTransactionBrowser: (ws: WebSocket) => wsStopTrackingTransactionBrowser(ws),
    wsTrackRbfSummary: (ws: WebSocketServer) => wsTrackRbfSummary(ws),
    wsTrackRbfSummaryBrowser: (ws: WebSocket) => wsTrackRbfSummaryBrowser(ws),
    wsStopTrackingRbfSummary: (ws: WebSocketServer) => wsStopTrackingRbfSummary(ws),
    wsStopTrackingRbfSummaryBrowser: (ws: WebSocket) => wsStopTrackingRbfSummaryBrowser(ws),
    wsTrackRbf: (ws: WebSocketServer, fullRbf: boolean) => wsTrackRbf(ws, fullRbf),
    wsTrackRbfBrowser: (ws: WebSocket, fullRbf: boolean) => wsTrackRbfBrowser(ws, fullRbf),
    wsStopTrackingRbf: (ws: WebSocketServer) => wsStopTrackingRbf(ws),
    wsStopTrackingRbfBrowser: (ws: WebSocket) => wsStopTrackingRbfBrowser(ws),
    wsTrackMempoolBlock: (ws: WebSocketServer, index: number) => wsTrackMempoolBlock(ws, index),
    wsTrackMempoolBlockBrowser: (ws: WebSocket, index: number) => wsTrackMempoolBlockBrowser(ws, index),
    wsStopTrackingMempoolBlock: (ws: WebSocketServer) => wsStopTrackingMempoolBlock(ws),
    wsStopTrackingMempoolBlockBrowser: (ws: WebSocket) => wsStopTrackingMempoolBlockBrowser(ws),
  };
};


================================================
File: src/app/liquid/addresses.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Address,
  AddressTxsUtxo,
  AddressInstance,
} from '../../interfaces/bitcoin/addresses';
import { Tx } from '../../interfaces/bitcoin/transactions';

export const useAddresses = (api: AxiosInstance): AddressInstance => {
  const getAddress = async (params: { address: string }) => {
    const { data } = await api.get<Address>(`/address/${params.address}`);
    return data;
  };

  const getAddressTxs = async (params: { address: string, after_txid?: string }) => {
    if (params.after_txid) {
      const { data } = await api.get<Tx[]>(`/address/${params.address}/txs?after_txid=${params.after_txid}`);
      return data;
    }
    const { data } = await api.get<Tx[]>(`/address/${params.address}/txs`);
    return data;
  };

  const getAddressTxsChain = async (params: { address: string }) => {
    const { data } = await api.get<Tx[]>(
      `/address/${params.address}/txs/chain`
    );
    return data;
  };

  const getAddressTxsMempool = async (params: { address: string }) => {
    const { data } = await api.get<Tx[]>(
      `/address/${params.address}/txs/mempool`
    );
    return data;
  };

  const getAddressTxsUtxo = async (params: { address: string }) => {
    const { data } = await api.get<AddressTxsUtxo[]>(
      `/address/${params.address}/utxo`
    );
    return data;
  };

  return {
    getAddress,
    getAddressTxs,
    getAddressTxsChain,
    getAddressTxsMempool,
    getAddressTxsUtxo,
  };
};


================================================
File: src/app/liquid/assets.ts
================================================
import { AxiosInstance } from 'axios';
import { Asset, AssetsInstance } from '../../interfaces/liquid/assets';

export const useAssets = (api: AxiosInstance): AssetsInstance => {
  const getAsset = async (params: { asset_id: string }) => {
    const { data } = await api.get<Asset>(`/asset/${params.asset_id}`);
    return data;
  };

  const getAssetIcon = async (params: { asset_id: string }) => {
    const { data } = await api.get(`/v1/asset/${params.asset_id}/icon`);
    return data;
  };

  const getAssetTxs = async (params: {
    asset_id: string;
    is_mempool: boolean;
  }) => {
    const paramsMempools = params.is_mempool === true ? '/mempool' : '/chain';
    const { data } = await api.get<Asset>(
      `/asset/${params.asset_id}/txs${paramsMempools}`
    );
    return data;
  };

  const getAssetSupply = async (params: {
    asset_id: string;
    decimal: boolean;
  }) => {
    const paramDecimal = params.decimal === true ? '/decimal' : '';
    const { data } = await api.get<Asset>(
      `/asset/${params.asset_id}/supply${paramDecimal}`
    );
    return data;
  };

  const getAssetsIcons = async () => {
    const { data } = await api.get<string[]>(`/v1/assets/icons`);
    return data;
  };

  return {
    getAsset,
    getAssetIcon,
    getAssetTxs,
    getAssetSupply,
    getAssetsIcons,
  };
};


================================================
File: src/app/liquid/blocks.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Block,
  BlockStatus,
  BlockLiquidInstance,
} from '../../interfaces/liquid/blocks';
import { Tx } from '../../interfaces/bitcoin/transactions';

export const useBlocks = (api: AxiosInstance): BlockLiquidInstance => {
  const getBlock = async (params: { hash: string }) => {
    const { data } = await api.get<Block>(`/v1/block/${params.hash}`);
    return data;
  };

  const getBlockStatus = async (params: { hash: string }) => {
    const { data } = await api.get<BlockStatus>(`/block/${params.hash}/status`);
    return data;
  };

  const getBlockTxs = async (params: {
    hash: string;
    start_index?: number;
  }) => {
    const { data } = await api.get<Tx>(
      `/block/${params.hash}/txs/${params.start_index}`
    );
    return data;
  };

  const getBlockTxids = async (params: { hash: string }) => {
    const { data } = await api.get<string[]>(`/block/${params.hash}/txids`);
    return data;
  };

  const getBlockTxid = async (params: { hash: string; index: number }) => {
    const { data } = await api.get<string>(
      `/block/${params.hash}/txid/${params.index}`
    );
    return data;
  };

  const getBlockRaw = async (params: { hash: string }) => {
    const { data } = await api.get<string>(`/block/${params.hash}/raw`);
    return data;
  };

  const getBlockHeight = async (params: { height: number }) => {
    const { data } = await api.get<string>(`/block-height/${params.height}`);
    return data;
  };

  const getBlocks = async (params: { start_height?: number }) => {
    const { data } = await api.get<Block[]>(`/v1/blocks/${params.start_height}`);
    return data;
  };

  const getBlocksTipHeight = async () => {
    const { data } = await api.get<number>(`/blocks/tip/height`);
    return data;
  };

  const getBlocksTipHash = async () => {
    const { data } = await api.get<string>(`/blocks/tip/hash`);
    return data;
  };

  return {
    getBlock,
    getBlocks,
    getBlockStatus,
    getBlockTxs,
    getBlockTxid,
    getBlockTxids,
    getBlockRaw,
    getBlockHeight,
    getBlocksTipHash,
    getBlocksTipHeight,
  };
};


================================================
File: src/app/liquid/fees.ts
================================================
import { AxiosInstance } from 'axios';
import {
  FeesRecommended,
  FeesMempoolBlocks,
  FeeInstance,
} from '../../interfaces/bitcoin/fees';

export const useFees = (api: AxiosInstance): FeeInstance => {
  const getFeesRecommended = async () => {
    const { data } = await api.get<FeesRecommended>(`/v1/fees/recommended`);
    return data;
  };

  const getFeesMempoolBlocks = async () => {
    const { data } = await api.get<FeesMempoolBlocks[]>(
      `/v1/fees/mempool-blocks`
    );
    return data;
  };

  const getCPFP = async (params: { txid: string }) => {
    const { data } = await api.get<FeesMempoolBlocks[]>(
      `/v1/cpfp/${params.txid}`
    );
    return data;
  };

  return {
    getFeesRecommended,
    getFeesMempoolBlocks,
    getCPFP,
  };
};


================================================
File: src/app/liquid/mempool.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Mempool,
  MempoolRecent,
  MempoolInstance,
} from '../../interfaces/bitcoin/mempool';

export const useMempool = (api: AxiosInstance): MempoolInstance => {
  const getMempool = async () => {
    const { data } = await api.get<Mempool[]>(`/mempool`);
    return data;
  };

  const getMempoolTxids = async () => {
    const { data } = await api.get<string[]>(`/mempool/txids`);
    return data;
  };

  const getMempoolRecent = async () => {
    const { data } = await api.get<MempoolRecent[]>(`/mempool/recent`);
    return data;
  };

  return {
    getMempool,
    getMempoolTxids,
    getMempoolRecent,
  };
};


================================================
File: src/app/liquid/transactions.ts
================================================
import { AxiosInstance } from 'axios';
import {
  Tx,
  TxStatus,
  TxMerkleProof,
  TxOutspend,
  TxLiquidInstance,
} from '../../interfaces/liquid/transactions';

export const useTransactions = (api: AxiosInstance): TxLiquidInstance => {
  const getTx = async (params: { txid: string }) => {
    const { data } = await api.get<Tx>(`/tx/${params.txid}`);
    return data;
  };

  const getTxStatus = async (params: { txid: string }) => {
    const { data } = await api.get<TxStatus>(`/tx/${params.txid}/status`);
    return data;
  };

  const getTxHex = async (params: { txid: string }) => {
    const { data } = await api.get<string>(`/tx/${params.txid}/hex`);
    return data;
  };

  const getTxRaw = async (params: { txid: string }) => {
    const { data } = await api.get<string>(`/tx/${params.txid}/raw`);
    return data;
  };

  const getTxMerkleProof = async (params: { txid: string }) => {
    const { data } = await api.get<TxMerkleProof>(
      `/tx/${params.txid}/merkle-proof`
    );
    return data;
  };

  const getTxOutspend = async (params: { txid: string; vout: number }) => {
    const { data } = await api.get<TxOutspend>(
      `/tx/${params.txid}/outspend/${params.vout}`
    );
    return data;
  };

  const getTxOutspends = async (params: { txid: string }) => {
    const { data } = await api.get<Array<TxOutspend>>(
      `/tx/${params.txid}/outspends`
    );
    return data;
  };

  const postTx = async (params: { txhex: string }) => {
    const { data } = await api.post<string>(`/tx`, params.txhex );
    return data;
  };

  return {
    getTx,
    getTxStatus,
    getTxHex,
    getTxRaw,
    getTxMerkleProof,
    getTxOutspend,
    getTxOutspends,
    postTx,
  };
};


================================================
File: src/app/liquid/websocket.ts
================================================
import { WsLiquidInstance } from '../../interfaces/liquid/websockets';
import { 
  wsInit as wsInitBrowser,
  wsWantData as wsWantDataBrowser,
  wsStopData as wsStopDataBrowser,
  wsTrackAddress as wsTrackAddressBrowser,
  wsStopTrackingAddress as wsStopTrackingAddressBrowser,
  wsTrackAddresses as wsTrackAddressesBrowser,
  wsStopTrackingAddresses as wsStopTrackingAddressesBrowser,
  wsTrackTransaction as wsTrackTransactionBrowser,
  wsStopTrackingTransaction as wsStopTrackingTransactionBrowser,
  wsTrackMempoolBlock as wsTrackMempoolBlockBrowser,
  wsStopTrackingMempoolBlock as wsStopTrackingMempoolBlockBrowser,
} from '../../services/ws/ws-client-browser';
import { 
  wsInit,
  wsWantData,
  wsStopData,
  wsTrackAddress,
  wsStopTrackingAddress,
  wsTrackAddresses,
  wsStopTrackingAddresses,
  wsTrackTransaction,
  wsStopTrackingTransaction,
  wsTrackMempoolBlock,
  wsStopTrackingMempoolBlock
 } from '../../services/ws/ws-client-node';
import WebSocketServer from 'ws';

export const useWebsocket = (hostname: string, network: string, protocol: string | undefined): WsLiquidInstance => {

  if (!protocol) {
    hostname?.includes('localhost') ? protocol = 'ws' : protocol = 'wss';
  } else if (protocol === 'http' || protocol === 'ws') {
    protocol = 'ws';
  } else {
    protocol = 'wss';
  }
  if (network && ['testnet', 'liquidtestnet'].includes(network)) {
    network = `/liquidtestnet`;
  } else {
    network = '/liquid';
  }

  const wsEndpoint = `${protocol}://${hostname}${network}/api/v1/ws`
  return {
    wsInit: () => wsInit(wsEndpoint),
    wsInitBrowser: () => wsInitBrowser(wsEndpoint),
    wsWantData: (ws: WebSocketServer, options: string[]) => wsWantData(ws, options),
    wsWantDataBrowser: (ws: WebSocket, options: string[]) => wsWantDataBrowser(ws, options),
    wsStopData: (ws: WebSocketServer) => wsStopData(ws),
    wsStopDataBrowser: (ws: WebSocket) => wsStopDataBrowser(ws),
    wsTrackAddress: (ws: WebSocketServer, address: string) => wsTrackAddress(ws, address),
    wsTrackAddressBrowser: (ws: WebSocket, address: string) => wsTrackAddressBrowser(ws, address),
    wsStopTrackingAddress: (ws: WebSocketServer) => wsStopTrackingAddress(ws),
    wsStopTrackingAddressBrowser: (ws: WebSocket) => wsStopTrackingAddressBrowser(ws),
    wsTrackAddresses: (ws: WebSocketServer, addresses: string[]) => wsTrackAddresses(ws, addresses),
    wsTrackAddressesBrowser: (ws: WebSocket, addresses: string[]) => wsTrackAddressesBrowser(ws, addresses),
    wsStopTrackingAddresses: (ws: WebSocketServer) => wsStopTrackingAddresses(ws),
    wsStopTrackingAddressesBrowser: (ws: WebSocket) => wsStopTrackingAddressesBrowser(ws),
    wsTrackTransaction: (ws: WebSocketServer, txid: string) => wsTrackTransaction(ws, txid),
    wsTrackTransactionBrowser: (ws: WebSocket, txid: string) => wsTrackTransactionBrowser(ws, txid),
    wsStopTrackingTransaction: (ws: WebSocketServer) => wsStopTrackingTransaction(ws),
    wsStopTrackingTransactionBrowser: (ws: WebSocket) => wsStopTrackingTransactionBrowser(ws),
    wsTrackMempoolBlock: (ws: WebSocketServer, index: number) => wsTrackMempoolBlock(ws, index),
    wsTrackMempoolBlockBrowser: (ws: WebSocket, index: number) => wsTrackMempoolBlockBrowser(ws, index),
    wsStopTrackingMempoolBlock: (ws: WebSocketServer) => wsStopTrackingMempoolBlock(ws),
    wsStopTrackingMempoolBlockBrowser: (ws: WebSocket) => wsStopTrackingMempoolBlockBrowser(ws),  };
};


================================================
File: src/interfaces/index.ts
================================================
import { AddressInstance } from './bitcoin/addresses';
import { BlockInstance } from './bitcoin/blocks';
import { DifficultyInstance } from './bitcoin/difficulty';
import { FeeInstance } from './bitcoin/fees';
import { LightningInstance } from './bitcoin/lightning';
import { MempoolInstance } from './bitcoin/mempool';
import { TxInstance } from './bitcoin/transactions';
import { WsInstance } from './bitcoin/websockets';

import { AssetsInstance } from './liquid/assets';
import { BlockLiquidInstance } from './liquid/blocks';
import { TxLiquidInstance } from './liquid/transactions';
import { WsLiquidInstance } from './liquid/websockets';
import { AxiosRequestConfig } from 'axios';
export interface MempoolConfig {
  protocol?: 'http' | 'https';
  hostname?: string;
  network?: string;
  config?: AxiosRequestConfig;
}

export interface MempoolReturn {
  bitcoin: {
    addresses: AddressInstance;
    blocks: BlockInstance;
    difficulty: DifficultyInstance;
    fees: FeeInstance;
    lightning: LightningInstance
    mempool: MempoolInstance;
    transactions: TxInstance;
    websocket: WsInstance;
  };
  liquid: {
    assets: AssetsInstance;
    addresses: AddressInstance;
    blocks: BlockLiquidInstance;
    fees: FeeInstance;
    mempool: MempoolInstance;
    transactions: TxLiquidInstance;
    websocket: WsLiquidInstance;
  };
}


================================================
File: src/interfaces/bitcoin/addresses.ts
================================================
import { Tx, TxStatus } from './transactions';

export interface Address {
  address: string;
  chain_stats: StatsInfo;
  mempool_stats: StatsInfo;
}

export interface StatsInfo {
  funded_txo_count: number;
  funded_txo_sum: number;
  spent_txo_count: number;
  spent_txo_sum: number;
  tx_count: number;
}

export interface AddressTxsUtxo {
  txid: string;
  vout: number;
  status: TxStatus;
  value: number;
}

export interface AddressInstance {
  getAddress: (params: { address: string }) => Promise<Address>;
  getAddressTxs: (params: { address: string, after_txid?: string }) => Promise<Tx[]>;
  getAddressTxsChain: (params: { address: string }) => Promise<Tx[]>;
  getAddressTxsMempool: (params: { address: string }) => Promise<Tx[]>;
  getAddressTxsUtxo: (params: { address: string }) => Promise<AddressTxsUtxo[]>;
}


================================================
File: src/interfaces/bitcoin/blocks.ts
================================================
import { Tx } from './transactions';

export interface Block {
  id: string;
  height: number;
  version: number;
  timestamp: number;
  tx_count: number;
  size: number;
  weight: number;
  merkle_root: string;
  previousblockhash: string;
  mediantime: number;
  nonce: number;
  bits: number;
  difficulty: number;
  extras: any;
}

export interface BlockStatus {
  in_best_chain: boolean;
  height: number;
  next_best: string;
}

export interface BlockInstance {
  getBlock: (params: { hash: string }) => Promise<Block>;
  getBlocks: (params: { start_height?: number }) => Promise<Block[]>;
  getBlockStatus: (params: { hash: string }) => Promise<BlockStatus>;
  getBlockTxs: (params: { hash: string; start_index?: number }) => Promise<Tx>;
  getBlockTxids: (params: { hash: string }) => Promise<string[]>;
  getBlockTxid: (params: { hash: string; index: number }) => Promise<string>;
  getBlockRaw: (params: { hash: string }) => Promise<string>;
  getBlockHeader: (params: { hash: string }) => Promise<string>;
  getBlockHeight: (params: { height: number }) => Promise<string>;
  getBlocksTipHeight: () => Promise<number>;
  getBlocksTipHash: () => Promise<string>;
}


================================================
File: src/interfaces/bitcoin/difficulty.ts
================================================

export interface Adjustment {
  progressPercent: number,
  difficultyChange: number,
  estimatedRetargetDate: number,
  remainingBlocks: number,
  remainingTime: number,
  previousRetarget: number,
  nextRetargetHeight: number,
  timeAvg: number,
  timeOffset: number,
  expectedBlocks: number,
}

export interface Hashrate {
  hashrates: HashRateData[],
  difficulty: DifficultyData[],
  currentHashrate: number,
  currentDifficulty: number,
}

export interface HashRateData {
  timestamp: number,
  avgHashrate: number
}

export interface DifficultyData {
  time: number,
  height: number,
  difficulty: number,
  adjustment: number
}

export interface DifficultyInstance {
  getDifficultyAdjustment: () => Promise<Adjustment>;
  getHashrate: (params: { interval: string }) => Promise<Hashrate>;
}


================================================
File: src/interfaces/bitcoin/fees.ts
================================================
export interface FeesMempoolBlocks {
  blockSize: number;
  blockVSize: number;
  nTx: number;
  totalFees: number;
  medianFee: number;
  feeRange: number[];
}

export interface FeesRecommended {
  fastestFee: number;
  halfHourFee: number;
  hourFee: number;
  minimumFee: number;
}

export interface FeeInstance {
  getFeesRecommended: () => Promise<FeesRecommended>;
  getFeesMempoolBlocks: () => Promise<FeesMempoolBlocks[]>;
  getCPFP: (params: { txid: string }) => Promise<FeesMempoolBlocks[]>;
}


================================================
File: src/interfaces/bitcoin/lightning.ts
================================================
import { Tx, TxStatus } from './transactions';

export interface NetworkStatsEntry {
  added: string;
  avg_base_fee_mtokens: number; 
  avg_capacity: number;
  avg_fee_rate: number;
  channel_count: number;
  clearnet_nodes: number;
  clearnet_tor_nodes: number;
  id: number; 
  med_base_fee_mtokens: number;
  med_capacity: number;
  med_fee_rate: number;
  node_count: number;
  tor_nodes: number;
  total_capacity: number;
  unannounced_nodes: number;
}

export interface NetworkStats {
  latest: NetworkStatsEntry;
  previous: NetworkStatsEntry;
}

export interface Node {
  alias: string;
  public_key: string;
  channels: number;
  capacity: number;
  updatedAt: string;
  base_fee_mtokens?: number;
  cltv_delta?: number;
  fee_rate?: number;
  is_disabled?: boolean;
  max_htlc_mtokens?: number;
  min_htlc_mtokens?: number;
  longitude?: number;
  latitude?: number;
  funding_balance?: number;
  closing_balance?: number;
  city?: any;
  country?: any;
  iso_code?: any;
  subdivision?: any;
  first_seen?: number;
  isp?: string;
  features?: any[];
  featuresBit?: string;
  active_channel_count?: number;
  opened_channel_count?: number;
  closed_channel_count?: number;
}


export interface NodeStats {
  added: number;
  capacity: number;
  channels: number;
}

export interface Channel {
  id: number;
  short_id: string;
  capacity: number;
  transaction_id: string;
  transaction_vout: number;
  closing_transaction_id: string;
  closing_reason: number;
  closing_fee: number;
  updated_at: string;
  closing_date?: string;
  created: string;
  status: number;
  funding_ratio?: number;
  closed_by?: string;
  single_funded?: boolean;
  node_left: Node,
  node_right: Node,
}

export interface LightningInstance {
  getNetworkStats: () => Promise<NetworkStats>;
  getNodesInCountry: (params: { country: string }) => Promise<Node[]>;
  getNodesStatsPerCountry: () => Promise<any>;
  getNodesHostedByISP: (params: { isp: number }) => Promise<Node[]>;
  getISPRanking: () => Promise<any>;
  getLiquidityRanking: () => Promise<Node[]>;
  getConnectivityRanking: () => Promise<Node[]>;
  getOldestNodes: () => Promise<Node[]>;
  getNodeStats: (params: { public_key: string }) => Promise<Node>;
  getHistoricalNodeStats: (params: { public_key: string }) => Promise<NodeStats[]>;
  getChannel: (params: { id: string }) => Promise<Channel>;
  getChannelsFromTxIds: (params: { txId: string[] }) => Promise<any[]>;
  getChannelsFromNodePublicKey: (params: { public_key: string, status: string, index?: number }) => Promise<Channel[]>;
  getChannelsGeodata: () => Promise<any>;
  getChannelsGeodataByPublicKey: (params: { public_key: string }) => Promise<any[]>;
}


================================================
File: src/interfaces/bitcoin/mempool.ts
================================================
export interface Mempool {
  count: number;
  vsize: number;
  total_fee: number;
  fee_histogram: number[];
}

export interface MempoolInstance {
  getMempool: () => Promise<Mempool[]>;
  getMempoolTxids: () => Promise<string[]>;
  getMempoolRecent: () => Promise<MempoolRecent[]>;
}

export interface MempoolRecent {
  txid: string;
  fee: number;
  vsize: number;
  value: number;
}


================================================
File: src/interfaces/bitcoin/transactions.ts
================================================
export interface Tx {
  txid: string;
  version: number;
  locktime: number;
  vin: {
    txid: string;
    vout: number;
    prevout: Vout;
    scriptsig: string;
    scriptsig_asm: string;
    is_coinbase: boolean;
    sequence: string;
  }[];
  vout: Vout[];
  size: number;
  weight: number;
  fee: number;
  status: TxStatus;
}

export interface Vout {
  scriptpubkey: string;
  scriptpubkey_asm: string;
  scriptpubkey_type: string;
  scriptpubkey_address: string;
  value: number;
}

export interface TxStatus {
  confirmed: boolean;
  block_height: number;
  block_hash: string;
  block_time: number;
}

export interface TxMerkleProof {
  block_height: number;
  merkle: string[];
  pos: number;
}

export interface TxOutspend {
  spent: boolean;
  txid: string;
  vin: number;
  status: TxStatus;
}

export interface TxInstance {
  getTx: (params: { txid: string }) => Promise<Tx>;
  getTxStatus: (params: { txid: string }) => Promise<TxStatus>;
  getTxHex: (params: { txid: string }) => Promise<string>;
  getTxRaw: (params: { txid: string }) => Promise<string>;
  getTxMerkleBlockProof: (params: { txid: string }) => Promise<string>;
  getTxMerkleProof: (params: { txid: string }) => Promise<TxMerkleProof>;
  getTxOutspend: (params: {
    txid: string;
    vout: number;
  }) => Promise<TxOutspend>;
  getTxOutspends: (params: { txid: string }) => Promise<Array<TxOutspend>>;
  postTx: (params: { txhex: string }) => Promise<unknown>;
}


================================================
File: src/interfaces/bitcoin/websockets.ts
================================================
import WebSocketServer from 'ws';

export interface WsInstance {
  wsInit: () => WebSocketServer;
  wsInitBrowser: () => WebSocket;
  wsWantData: (ws: WebSocketServer, options: string[]) => void;
  wsWantDataBrowser: (ws: WebSocket, options: string[]) => void;
  wsStopData: (ws: WebSocketServer) => void;
  wsStopDataBrowser: (ws: WebSocket) => void;
  wsTrackAddress: (ws: WebSocketServer, address: string) => void;
  wsTrackAddressBrowser: (ws: WebSocket, address: string) => void;
  wsStopTrackingAddress: (ws: WebSocketServer) => void;
  wsStopTrackingAddressBrowser: (ws: WebSocket) => void;
  wsTrackAddresses: (ws: WebSocketServer, addresses: string[]) => void;
  wsTrackAddressesBrowser: (ws: WebSocket, addresses: string[]) => void;
  wsStopTrackingAddresses: (ws: WebSocketServer) => void;
  wsStopTrackingAddressesBrowser: (ws: WebSocket) => void;
  wsTrackTransaction: (ws: WebSocketServer, txid: string) => void;
  wsTrackTransactionBrowser: (ws: WebSocket, txid: string) => void;
  wsStopTrackingTransaction: (ws: WebSocketServer) => void;
  wsStopTrackingTransactionBrowser: (ws: WebSocket) => void;
  wsTrackRbfSummary: (ws: WebSocketServer) => void;
  wsTrackRbfSummaryBrowser: (ws: WebSocket) => void;
  wsStopTrackingRbfSummary: (ws: WebSocketServer) => void;
  wsStopTrackingRbfSummaryBrowser: (ws: WebSocket) => void;
  wsTrackRbf: (ws: WebSocketServer, fullRbf: boolean) => void;
  wsTrackRbfBrowser: (ws: WebSocket, fullRbf: boolean) => void;
  wsStopTrackingRbf: (ws: WebSocketServer) => void;
  wsStopTrackingRbfBrowser: (ws: WebSocket) => void;
  wsTrackMempoolBlock: (ws: WebSocketServer, index: number) => void;
  wsTrackMempoolBlockBrowser: (ws: WebSocket, index: number) => void;
  wsStopTrackingMempoolBlock: (ws: WebSocketServer) => void;
  wsStopTrackingMempoolBlockBrowser: (ws: WebSocket) => void;
}


================================================
File: src/interfaces/liquid/assets.ts
================================================
export interface Asset {
  asset_id: string;
  chain_stats: AssetStats;
  mempool_stats: AssetStats;
}

interface AssetStats {
  tx_count: number;
  peg_in_count: number;
  peg_in_amount: number;
  peg_out_count: number;
  peg_out_amount: number;
  burn_count: number;
  burned_amount: number;
}

export interface AssetsInstance {
  getAsset: (params: { asset_id: string }) => Promise<Asset>;
  getAssetIcon: (params: { asset_id: string }) => Promise<unknown>;
  getAssetTxs: (params: {
    asset_id: string;
    is_mempool: boolean;
  }) => Promise<Asset>;
  getAssetSupply: (params: {
    asset_id: string;
    decimal: boolean;
  }) => Promise<Asset>;
  getAssetsIcons: () => Promise<string[]>
}


================================================
File: src/interfaces/liquid/blocks.ts
================================================
import { Tx } from '../bitcoin/transactions';

export interface Block {
  id: string;
  height: number;
  version: number;
  timestamp: number;
  tx_count: number;
  size: number;
  weight: number;
  merkle_root: string;
  previousblockhash: string;
  mediantime: number;
  nonce: number;
  bits: number;
  difficulty: number;
  extras: any;
}

export interface BlockStatus {
  in_best_chain: boolean;
  height: number;
  next_best: string;
}

export interface BlockLiquidInstance {
  getBlock: (params: { hash: string }) => Promise<Block>;
  getBlocks: (params: { start_height?: number }) => Promise<Block[]>;
  getBlockStatus: (params: { hash: string }) => Promise<BlockStatus>;
  getBlockTxs: (params: { hash: string; start_index?: number }) => Promise<Tx>;
  getBlockTxids: (params: { hash: string }) => Promise<string[]>;
  getBlockTxid: (params: { hash: string; index: number }) => Promise<string>;
  getBlockRaw: (params: { hash: string }) => Promise<string>;
  getBlockHeight: (params: { height: number }) => Promise<string>;
  getBlocksTipHeight: () => Promise<number>;
  getBlocksTipHash: () => Promise<string>;
}


================================================
File: src/interfaces/liquid/transactions.ts
================================================
export interface Tx {
  txid: string;
  version: number;
  locktime: number;
  vin: {
    txid: string;
    vout: number;
    prevout: Vout;
    scriptsig: string;
    scriptsig_asm: string;
    is_coinbase: boolean;
    sequence: string;
  }[];
  vout: Vout[];
  size: number;
  weight: number;
  fee: number;
  status: TxStatus;
}

export interface Vout {
  scriptpubkey: string;
  scriptpubkey_asm: string;
  scriptpubkey_type: string;
  scriptpubkey_address: string;
  value: number;
}

export interface TxStatus {
  confirmed: boolean;
  block_height: number;
  block_hash: string;
  block_time: number;
}

export interface TxMerkleProof {
  block_height: number;
  merkle: string[];
  pos: number;
}

export interface TxOutspend {
  spent: boolean;
  txid: string;
  vin: number;
  status: TxStatus;
}

export interface TxLiquidInstance {
  getTx: (params: { txid: string }) => Promise<Tx>;
  getTxStatus: (params: { txid: string }) => Promise<TxStatus>;
  getTxHex: (params: { txid: string }) => Promise<string>;
  getTxRaw: (params: { txid: string }) => Promise<string>;
  getTxMerkleProof: (params: { txid: string }) => Promise<TxMerkleProof>;
  getTxOutspend: (params: {
    txid: string;
    vout: number;
  }) => Promise<TxOutspend>;
  getTxOutspends: (params: { txid: string }) => Promise<Array<TxOutspend>>;
  postTx: (params: { txhex: string }) => Promise<unknown>;
}


================================================
File: src/interfaces/liquid/websockets.ts
================================================
import WebSocketServer from 'ws';

export interface WsLiquidInstance {
  wsInit: () => WebSocketServer;
  wsInitBrowser: () => WebSocket;
  wsWantData: (ws: WebSocketServer, options: string[]) => void;
  wsWantDataBrowser: (ws: WebSocket, options: string[]) => void;
  wsStopData: (ws: WebSocketServer) => void;
  wsStopDataBrowser: (ws: WebSocket) => void;
  wsTrackAddress: (ws: WebSocketServer, address: string) => void;
  wsTrackAddressBrowser: (ws: WebSocket, address: string) => void;
  wsStopTrackingAddress: (ws: WebSocketServer) => void;
  wsStopTrackingAddressBrowser: (ws: WebSocket) => void;
  wsTrackAddresses: (ws: WebSocketServer, addresses: string[]) => void;
  wsTrackAddressesBrowser: (ws: WebSocket, addresses: string[]) => void;
  wsStopTrackingAddresses: (ws: WebSocketServer) => void;
  wsStopTrackingAddressesBrowser: (ws: WebSocket) => void;
  wsTrackTransaction: (ws: WebSocketServer, txid: string) => void;
  wsTrackTransactionBrowser: (ws: WebSocket, txid: string) => void;
  wsStopTrackingTransaction: (ws: WebSocketServer) => void;
  wsStopTrackingTransactionBrowser: (ws: WebSocket) => void;
  wsTrackMempoolBlock: (ws: WebSocketServer, index: number) => void;
  wsTrackMempoolBlockBrowser: (ws: WebSocket, index: number) => void;
  wsStopTrackingMempoolBlock: (ws: WebSocketServer) => void;
  wsStopTrackingMempoolBlockBrowser: (ws: WebSocket) => void;
}


================================================
File: src/services/api/index.ts
================================================
import axios, { AxiosInstance } from 'axios';
import { MempoolConfig } from '../../interfaces';

export const makeBitcoinAPI = ({
  hostname,
  network,
  protocol,
  config,
}: MempoolConfig): { api: AxiosInstance } => {
  if (!protocol) {
    hostname?.includes('localhost') ? protocol = 'http' : protocol = 'https';
  }
  if (network && ['testnet', 'signet'].includes(network)) {
    network = `/${network}`;
  } else {
    network = '';
  }
  const api = axios.create({
    baseURL: `${protocol}://${hostname}${network}/api/`,
    ...config,
  });
  return {
    api,
  };
};

export const makeLiquidAPI = ({
  hostname,
  network,
  protocol,
  config,
}: MempoolConfig): { api: AxiosInstance } => {
  if (!protocol) {
    hostname?.includes('localhost') ? protocol = 'http' : protocol = 'https';
  }
  if (network && ['testnet', 'liquidtestnet'].includes(network)) {
    network = `/liquidtestnet`;
  } else {
    network = '/liquid';
  }
  const api = axios.create({
    baseURL: `${protocol}://${hostname}${network}/api/`,
    ...config,
  });
  return {
    api,
  };
};

export default {
  makeBitcoinAPI,
  makeLiquidAPI,
};


================================================
File: src/services/ws/ws-client-browser.ts
================================================
const TIMEOUT_DURATION = 5000;
const MAX_RETRY_COUNT = 3;

const wsActionWrapper = (ws: WebSocket, action: any): void => {
  let retryCount = 0;
  const sendData = () => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify(action));
    } else if (retryCount < MAX_RETRY_COUNT) {
      retryCount++;
      console.log("WebSocket connection is not open. Retrying...");
      setTimeout(sendData, TIMEOUT_DURATION);
    } else {
      console.log("WebSocket connection is not open. Max retry count reached.");
    }
  };
  sendData();
}

export const wsInit = (endpoint: string): WebSocket => {
  const ws = new WebSocket(endpoint);

  ws.addEventListener("open", function open() {
    ws.send(JSON.stringify({ action: "init" }));
  });

  return ws;
}

export const wsWantData = (ws: WebSocket, options: string[]): void => {
  wsActionWrapper(ws, { action: "want", data: options });
}

export const wsStopData = (ws: WebSocket): void => {
  wsActionWrapper(ws, { action: "want", data: [] });
}

export const wsTrackAddress = (ws: WebSocket, address: string): void => {
  wsActionWrapper(ws, { 'track-address': address });
}

export const wsStopTrackingAddress = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-address': 'stop' });
}

export const wsTrackAddresses = (ws: WebSocket, addresses: string[]): void => {
  wsActionWrapper(ws, { 'track-addresses': addresses });
}

export const wsStopTrackingAddresses = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-addresses': [] });
}

export const wsTrackTransaction = (ws: WebSocket, txid: string): void => {
  wsActionWrapper(ws, { 'track-tx': txid });
}

export const wsStopTrackingTransaction = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-tx': 'stop' });
}

export const wsTrackRbfSummary = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-rbf-summary': true });
}

export const wsStopTrackingRbfSummary = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-rbf-summary': false });
}

export const wsTrackRbf = (ws: WebSocket, fullRbf: boolean): void => {
  if (!fullRbf) {
    wsActionWrapper(ws, { 'track-rbf': 'all' });
  } else {
    wsActionWrapper(ws, { 'track-rbf': 'fullRbf' });
  }
}

export const wsStopTrackingRbf = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-rbf': 'stop' });
}

export const wsTrackMempoolBlock = (ws: WebSocket, index: number): void => {
  wsActionWrapper(ws, { 'track-mempool-block': index });
}

export const wsStopTrackingMempoolBlock = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-mempool-block': -1 });
}

================================================
File: src/services/ws/ws-client-node.ts
================================================
import WebSocket from "ws";

const TIMEOUT_DURATION = 5000;
const MAX_RETRY_COUNT = 3;

const wsActionWrapper = (ws: WebSocket, action: any): void => {
  let retryCount = 0;
  const sendData = () => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify(action));
    } else if (retryCount < MAX_RETRY_COUNT) {
      retryCount++;
      console.log("WebSocket connection is not open. Retrying...");
      setTimeout(sendData, TIMEOUT_DURATION);
    } else {
      console.log("WebSocket connection is not open. Max retry count reached.");
    }
  };
  sendData();
}

export const wsInit = (endpoint: string): WebSocket => {
  const ws = new WebSocket(endpoint);

  ws.addEventListener("open", function open() {
    ws.send(JSON.stringify({ action: "init" }));
  });

  return ws;
}

export const wsWantData = (ws: WebSocket, options: string[]): void => {
  wsActionWrapper(ws, { action: "want", data: options });
}

export const wsStopData = (ws: WebSocket): void => {
  wsActionWrapper(ws, { action: "want", data: [] });
}

export const wsTrackAddress = (ws: WebSocket, address: string): void => {
  wsActionWrapper(ws, { 'track-address': address });
}

export const wsStopTrackingAddress = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-address': 'stop' });
}

export const wsTrackAddresses = (ws: WebSocket, addresses: string[]): void => {
  wsActionWrapper(ws, { 'track-addresses': addresses });
}

export const wsStopTrackingAddresses = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-addresses': [] });
}

export const wsTrackTransaction = (ws: WebSocket, txid: string): void => {
  wsActionWrapper(ws, { 'track-tx': txid });
}

export const wsStopTrackingTransaction = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-tx': 'stop' });
}

export const wsTrackRbfSummary = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-rbf-summary': true });
}

export const wsStopTrackingRbfSummary = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-rbf-summary': false });
}

export const wsTrackRbf = (ws: WebSocket, fullRbf: boolean): void => {
  if (!fullRbf) {
    wsActionWrapper(ws, { 'track-rbf': 'all' });
  } else {
    wsActionWrapper(ws, { 'track-rbf': 'fullRbf' });
  }
}

export const wsStopTrackingRbf = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-rbf': 'stop' });
}

export const wsTrackMempoolBlock = (ws: WebSocket, index: number): void => {
  wsActionWrapper(ws, { 'track-mempool-block': index });
}

export const wsStopTrackingMempoolBlock = (ws: WebSocket): void => {
  wsActionWrapper(ws, { 'track-mempool-block': -1 });
}

