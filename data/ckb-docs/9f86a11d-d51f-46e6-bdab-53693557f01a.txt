Directory structure:
└── utxostack-btc-assets-api/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE
    ├── devbox.json
    ├── devbox.lock
    ├── docker-compose.yaml
    ├── package.json
    ├── pnpm-lock.yaml
    ├── redis.conf
    ├── tsconfig.json
    ├── vercel.json
    ├── vitest.config.ts
    ├── .dockerignore
    ├── .env.example
    ├── .eslintrc.json
    ├── .prettierrc
    ├── api/
    │   └── serverless.ts
    ├── docs/
    │   └── upgrading-to-v2.md
    ├── public/
    │   └── .gitkeep
    ├── scripts/
    │   └── protect-branches.sh
    ├── src/
    │   ├── app.ts
    │   ├── constants.ts
    │   ├── container.ts
    │   ├── env.ts
    │   ├── error.ts
    │   ├── index.ts
    │   ├── options.ts
    │   ├── @types/
    │   │   └── fastify/
    │   │       └── index.d.ts
    │   ├── hooks/
    │   │   └── admin-authorize.ts
    │   ├── plugins/
    │   │   ├── cache.ts
    │   │   ├── cors.ts
    │   │   ├── cron.ts
    │   │   ├── healthcheck.ts
    │   │   ├── ip-block.ts
    │   │   ├── jwt.ts
    │   │   ├── rate-limit.ts
    │   │   ├── sentry.ts
    │   │   └── swagger.ts
    │   ├── routes/
    │   │   ├── bitcoin/
    │   │   │   ├── address.ts
    │   │   │   ├── block.ts
    │   │   │   ├── fees.ts
    │   │   │   ├── index.ts
    │   │   │   ├── info.ts
    │   │   │   ├── transaction.ts
    │   │   │   └── types.ts
    │   │   ├── cron/
    │   │   │   ├── collect-rgbpp-cells.ts
    │   │   │   ├── index.ts
    │   │   │   ├── process-transactions.ts
    │   │   │   ├── sync-utxo.ts
    │   │   │   └── unlock-cells.ts
    │   │   ├── internal/
    │   │   │   ├── index.ts
    │   │   │   └── job.ts
    │   │   ├── rgbpp/
    │   │   │   ├── address.ts
    │   │   │   ├── assets.ts
    │   │   │   ├── index.ts
    │   │   │   ├── paymaster.ts
    │   │   │   ├── spv.ts
    │   │   │   ├── transaction.ts
    │   │   │   └── types.ts
    │   │   └── token/
    │   │       ├── generate.ts
    │   │       └── index.ts
    │   ├── services/
    │   │   ├── ckb.ts
    │   │   ├── paymaster.ts
    │   │   ├── rgbpp.ts
    │   │   ├── spv.ts
    │   │   ├── transaction.ts
    │   │   ├── unlocker.ts
    │   │   ├── utxo.ts
    │   │   ├── base/
    │   │   │   ├── data-cache.ts
    │   │   │   └── queue-worker.ts
    │   │   └── bitcoin/
    │   │       ├── electrs.ts
    │   │       ├── index.ts
    │   │       ├── interface.ts
    │   │       ├── mempool.ts
    │   │       └── schema.ts
    │   └── utils/
    │       ├── commitment.ts
    │       ├── interceptors.ts
    │       ├── lockscript.ts
    │       ├── spore.ts
    │       ├── typescript.ts
    │       ├── validators.ts
    │       └── xudt.ts
    ├── test/
    │   ├── app.test.ts
    │   ├── setup.ts
    │   ├── __fixtures__/
    │   │   ├── rgbpp-utxo-pairs.mock.json
    │   │   ├── transactions.mock.json
    │   │   └── utxo.mock.json
    │   ├── plugins/
    │   │   ├── ip-block.test.ts
    │   │   └── jwt.test.ts
    │   ├── routes/
    │   │   ├── token.test.ts
    │   │   ├── __snapshots__/
    │   │   │   └── token.test.ts.snap
    │   │   ├── bitcoin/
    │   │   │   ├── address.test.ts
    │   │   │   ├── block.test.ts
    │   │   │   ├── info.test.ts
    │   │   │   ├── transaction.test.ts
    │   │   │   └── __snapshots__/
    │   │   │       ├── address.test.ts.snap
    │   │   │       ├── block.test.ts.snap
    │   │   │       └── transaction.test.ts.snap
    │   │   └── rgbpp/
    │   │       ├── address.test.ts
    │   │       ├── assets.test.ts
    │   │       ├── paymaster.test.ts
    │   │       ├── transaction.test.ts
    │   │       └── __snapshots__/
    │   │           ├── address.test.ts.snap
    │   │           └── assets.test.ts.snap
    │   ├── services/
    │   │   ├── bitcoin.test.ts
    │   │   ├── ckb.test.ts
    │   │   ├── paymaster.test.ts
    │   │   ├── rgbpp.test.ts
    │   │   ├── spv.test.ts
    │   │   ├── transaction.test.ts
    │   │   ├── unlocker.test.ts
    │   │   ├── utxo.test.ts
    │   │   └── __snapshots__/
    │   │       ├── rgbpp.test.ts.snap
    │   │       ├── spv.test.ts.snap
    │   │       └── transaction.test.ts.snap
    │   └── utils/
    │       └── xudt.test.ts
    └── .github/
        └── workflows/
            ├── deploy.yaml
            ├── docker.yaml
            └── test.yaml

================================================
File: README.md
================================================
## Bitcoin/RGB++ Assets API

A service for Retrieving BTC/RGB++ information/assets and processing transactions with these assets

### Features

- Retrieving Blockchain Information such as Bitcoin chain info, blocks, headers, transactions, addresses and RGB++ assets
- Transaction Handling by posting transactions to the /bitcoin/v1/transaction or /rgbpp/v1/transaction/ckb-tx endpoint
- RGB++ CKB transaction Queue simplifies the RGB++ assets workflows by some cron jobs

## Get started

We provide APIs for testnet and signet for use.

- Testnet: [https://api.testnet.rgbpp.io](https://api.testnet.rgbpp.io/docs)
- Signet: [https://api.signet.rgbpp.io](https://api.signet.rgbpp.io/docs)

For mainnet, API is currently limited to verified apps only.
You can also check the [Deployment](#Deployment) section to deploy your own.

### Get an access token

#### Testnet

You can get a testnet access token through the [/token/generate](https://api.testnet.rgbpp.io/docs/static/index.html#/Token/post_token_generate) API directly.

### Signet

And you can get an access token of BTC Signet network through the [/token/generate](https://api.signet.rgbpp.io/docs/static/index.html#/Token/post_token_generate) API directly.

#### Mainnet

The mainnet is currently limited to verified apps only.

When your app development is ready on testnet, and requires a mainnet access token,
please email us at f@cell.studio to request a mainnet JWT token.

In the email, please provide the following information about your app:

- `name`: Your app name, e.g. "rgbpp-app"
- `domain`: Your app domain, e.g. "rgbpp.app" (without protocol prefix and port suffix)

### Deployment

#### Requirements

- [mempool.space](https://mempool.space/docs) or [mempool/electrs](https://github.com/mempool/electrs): provides data about the Bitcoin network.
  - We can use either of them as data provider
  - Or use both, designating one as the primary provider and the other as the fallback
- [ckb-cell/ckb-bitcoin-spv-service](https://github.com/ckb-cell/ckb-bitcoin-spv-service): CKB Bitcoin SPV Service

#### Configuration

Copy the `.env.example` file to `.env`:

```bash
cp .env.example .env
```

Update the configuration values:

```env
# Bitcoin network, testnet by default
NETWORK=testnet

# Set /token/generate default domain param
# DOMAIN=localhost

# Trust all proxies (true) or do not trust any proxies (false)
# TRUST_PROXY=true

REDIS_URL=redis://redis:6379

# Sentry DSN URL for error tracking and cron monitoring
SENTRY_DSN_URL=<sentry_dsn_url>
# SENTRY_TRACES_SAMPLE_RATE=0.5
# SENTRY_PROFILES_SAMPLE_RATE=0.5

# Rate limit per minute for the API, 100 by default
RATE_LIMIT_PER_MINUTE=100
# The blocklist of IP addresses that are denied access to the API.
# IP_BLOCKLIST=

# Required in production mode
# In mainnet env, only the administrator could generate access tokens.
ADMIN_USERNAME=<admin_username>
ADMIN_PASSWORD=<admin_password>

# JWT_SECRET is used to sign the JWT token for authentication
JWT_SECRET=<your_secret>
# JWT token denylist
# JWT_DENYLIST=

# Bitcoin data provider, support mempool and electrs
# use electrs as default, mempool as fallback
# change to mempool if you want to use mempool.space as default and electrs as fallback
BITCOIN_DATA_PROVIDER=electrs
# Bitcoin Mempool.space API URL
# optinal when BITCOIN_DATA_PROVIDER=electrs
BITCOIN_MEMPOOL_SPACE_API_URL=https://mempool.space
# Electrs API URL
# optinal when BITCOIN_DATA_PROVIDER=mempool
BITCOIN_ELECTRS_API_URL=<http://electrs:3002>

# SPV Service URL
BITCOIN_SPV_SERVICE_URL=<http://spv:3001>

# CKB RPC URL
CKB_RPC_URL=https://testnet.ckb.dev/rpc

# Paymaster private key for CKB, used to sign the transaction
PAYMASTER_PRIVATE_KEY=
# Paymaster cell capacity in shannons
PAYMASTER_CELL_CAPACITY=31600000000
# Check the paymaster BTC UTXO when processing rgb++ ckb transaction
PAYMASTER_RECEIVE_UTXO_CHECK=false
# Paymaster bitcoin address, used to receive BTC from users
PAYMASTER_RECEIVE_BTC_ADDRESS=<paymaster_btc_address>
# Paymaster receives BTC UTXO size in sats
PAYMASTER_BTC_CONTAINER_FEE_SATS=7000

# BTCTimeLock cell unlock cron job schedule, default is every 5 minutes
UNLOCKER_CRON_SCHEDULE='*/5 * * * *'
# BTCTimeLock cell unlock batch size
UNLOCKER_CELL_BATCH_SIZE=100

# RGB++ CKB transaction Queue cron job delay in milliseconds
# the /rgbpp/v1/transaction/ckb-tx endpoint is called, the transaction will be added to the queue
TRANSACTION_QUEUE_JOB_DELAY=120000
# RGB++ CKB transaction Queue cron job attempts
TRANSACTION_QUEUE_JOB_ATTEMPTS=6
# Pay fee for transaction with pool reject by min fee rate, false by default
TRANSACTION_PAY_FOR_MIN_FEE_RATE_REJECT=false
```

More configuration options can be found in the `src/env.ts` file.

#### Docker

Use the provided `docker-compose.yml` file to run the service:

```bash
docker-compose up
```

After the service is running, you can access the API documentation at `http://localhost:3000/docs`


================================================
File: Dockerfile
================================================
FROM node:22-slim

WORKDIR /app

COPY . .

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable pnpm

RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm run build

EXPOSE 3000

ENV NODE_ENV=production
ENV ADDRESS=0.0.0.0 PORT=3000

CMD ["pnpm", "start"]


================================================
File: LICENSE
================================================
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.


================================================
File: devbox.json
================================================
{
  "packages": [
    "nodejs@22",
    "nodePackages.pnpm@latest",
    "redis@latest"
  ]
}


================================================
File: devbox.lock
================================================
{
  "lockfile_version": "1",
  "packages": {
    "nodePackages.pnpm@latest": {
      "last_modified": "2024-06-26T05:30:43Z",
      "resolved": "github:NixOS/nixpkgs/b3f3c1b13fb08f3828442ee86630362e81136bbc#nodePackages.pnpm",
      "source": "devbox-search",
      "version": "9.3.0",
      "systems": {
        "aarch64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/g2rnwxx2lrhshx7w8aghanc3y0mznnbg-pnpm-9.3.0",
              "default": true
            }
          ],
          "store_path": "/nix/store/g2rnwxx2lrhshx7w8aghanc3y0mznnbg-pnpm-9.3.0"
        },
        "aarch64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/ipnzflbc30xf7bfj7zswxcwp4yk89502-pnpm-9.3.0",
              "default": true
            }
          ],
          "store_path": "/nix/store/ipnzflbc30xf7bfj7zswxcwp4yk89502-pnpm-9.3.0"
        },
        "x86_64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/0z47pn0raipavaqrq4gxarrz6dl53ns8-pnpm-9.3.0",
              "default": true
            }
          ],
          "store_path": "/nix/store/0z47pn0raipavaqrq4gxarrz6dl53ns8-pnpm-9.3.0"
        },
        "x86_64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/r0xwws8a6r6rnknsvgic1zgwf2p8kfkm-pnpm-9.3.0",
              "default": true
            }
          ],
          "store_path": "/nix/store/r0xwws8a6r6rnknsvgic1zgwf2p8kfkm-pnpm-9.3.0"
        }
      }
    },
    "nodejs@22": {
      "last_modified": "2025-02-07T11:26:36Z",
      "resolved": "github:NixOS/nixpkgs/d98abf5cf5914e5e4e9d57205e3af55ca90ffc1d#nodejs_22",
      "source": "devbox-search",
      "version": "22.13.1",
      "systems": {
        "aarch64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/iqv9xkigz40p94zi0dgy3g21iybyvpkk-nodejs-22.13.1",
              "default": true
            },
            {
              "name": "libv8",
              "path": "/nix/store/imvfvqlxvwkdacjxln49hii8f3shir90-nodejs-22.13.1-libv8"
            }
          ],
          "store_path": "/nix/store/iqv9xkigz40p94zi0dgy3g21iybyvpkk-nodejs-22.13.1"
        },
        "aarch64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/77b6bhrkij6qdgl24bb33gpx6l7ijxpx-nodejs-22.13.1",
              "default": true
            },
            {
              "name": "libv8",
              "path": "/nix/store/3ry5lqz1126p39bmr6jc3h6qznbcaiqv-nodejs-22.13.1-libv8"
            }
          ],
          "store_path": "/nix/store/77b6bhrkij6qdgl24bb33gpx6l7ijxpx-nodejs-22.13.1"
        },
        "x86_64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/j3mzln68f98vbkhxwb8gi06krwawnyrw-nodejs-22.13.1",
              "default": true
            },
            {
              "name": "libv8",
              "path": "/nix/store/r7h7c7i2qb3c7zrqpnyfj2dk1b1f7qvg-nodejs-22.13.1-libv8"
            }
          ],
          "store_path": "/nix/store/j3mzln68f98vbkhxwb8gi06krwawnyrw-nodejs-22.13.1"
        },
        "x86_64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/i1jdnip70qb7yh4krlzsgyxs0zdvw7xv-nodejs-22.13.1",
              "default": true
            },
            {
              "name": "libv8",
              "path": "/nix/store/6rnv25jp607ibr9k16paw776drvav77f-nodejs-22.13.1-libv8"
            }
          ],
          "store_path": "/nix/store/i1jdnip70qb7yh4krlzsgyxs0zdvw7xv-nodejs-22.13.1"
        }
      }
    },
    "redis@latest": {
      "last_modified": "2025-02-07T11:26:36Z",
      "resolved": "github:NixOS/nixpkgs/d98abf5cf5914e5e4e9d57205e3af55ca90ffc1d#redis",
      "source": "devbox-search",
      "version": "7.2.7",
      "systems": {
        "aarch64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/ldz39wyk0z1f9g92k1dyvgpnpdz4cb86-redis-7.2.7",
              "default": true
            }
          ],
          "store_path": "/nix/store/ldz39wyk0z1f9g92k1dyvgpnpdz4cb86-redis-7.2.7"
        },
        "aarch64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/x7hwq396f84ffq8dmpqmh8y9vxbwcn73-redis-7.2.7",
              "default": true
            }
          ],
          "store_path": "/nix/store/x7hwq396f84ffq8dmpqmh8y9vxbwcn73-redis-7.2.7"
        },
        "x86_64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/2zn0zzl4s4ajlwf5awz2gm5xvyicadlz-redis-7.2.7",
              "default": true
            }
          ],
          "store_path": "/nix/store/2zn0zzl4s4ajlwf5awz2gm5xvyicadlz-redis-7.2.7"
        },
        "x86_64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/hpxb6r038ywfs7w733iq20fjn1y6669q-redis-7.2.7",
              "default": true
            }
          ],
          "store_path": "/nix/store/hpxb6r038ywfs7w733iq20fjn1y6669q-redis-7.2.7"
        }
      }
    }
  }
}


================================================
File: docker-compose.yaml
================================================
version: '3.8'

services:
  app:
    build:
      context: .
    # Or use the image from the GitHub registry
    # image: ghcr.io/ckb-cell/btc-assets-api:develop
    ports:
      - '3000:3000'
    networks:
      - redis-internal
    env_file:
      - .env
    depends_on:
      - redis

  redis:
    # https://github.com/docker-library/redis/blob/b77450d/7.2/alpine/Dockerfile
    image: redis:7-alpine
    networks:
      - redis-internal
    # Redis' WORKDIR is /data
    volumes:
      - ./redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: /usr/local/etc/redis/redis.conf

networks:
  redis-internal:
    driver: bridge


================================================
File: package.json
================================================
{
  "name": "btc-assets-api",
  "version": "2.5.10",
  "title": "Bitcoin/RGB++ Assets API",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "tsx watch ./src/index.ts",
    "start": "node ./dist/src/index.js",
    "build": "tsc -p tsconfig.json",
    "test": "vitest",
    "format": "eslint --fix --ext .ts && prettier --write '**/*.ts'",
    "coverage": "vitest run --coverage",
    "postinstall": "npx simple-git-hooks"
  },
  "keywords": [],
  "author": "Yuexun Jiang <yuexunjiang@cryptape.com>",
  "license": "ISC",
  "simple-git-hooks": {
    "pre-commit": "npx lint-staged && sh ./scripts/protect-branches.sh"
  },
  "lint-staged": {
    "*.ts": [
      "eslint --fix",
      "prettier --ignore-unknown --write"
    ]
  },
  "dependencies": {
    "@ckb-lumos/base": "^0.22.2 ",
    "@ckb-lumos/ckb-indexer": "^0.22.2",
    "@ckb-lumos/codec": "^0.22.2",
    "@ckb-lumos/lumos": "0.22.2",
    "@ckb-lumos/rpc": "^0.22.2",
    "@fastify/compress": "^7.0.0",
    "@fastify/cors": "^9.0.1",
    "@fastify/http-proxy": "^9.4.0",
    "@fastify/jwt": "^8.0.0",
    "@fastify/rate-limit": "^9.1.0",
    "@fastify/redis": "^6.1.1",
    "@fastify/sensible": "^5.5.0",
    "@fastify/swagger": "8.14.0",
    "@fastify/swagger-ui": "^3.0.0",
    "@immobiliarelabs/fastify-sentry": "^8.0.1",
    "@mempool/mempool.js": "^3.0.0",
    "@nervosnetwork/ckb-sdk-utils": "^0.109.5",
    "@rgbpp-sdk/btc": "0.7.0",
    "@rgbpp-sdk/ckb": "0.7.0",
    "@rgbpp-sdk/service": "0.7.0",
    "@sentry/node": "^7.102.1",
    "@sentry/profiling-node": "^7.102.1",
    "@spore-sdk/core": "^0.2.0-beta.9",
    "@utxostack/metadata": "^0.0.6",
    "async-retry": "^1.3.3",
    "awilix": "^10.0.1",
    "axios": "^1.7.7",
    "bloom-filters": "^3.0.1",
    "bullmq": "5.4.2",
    "dotenv": "^16.4.2",
    "fastify": "^4.26.0",
    "fastify-cron": "^1.3.1",
    "fastify-custom-healthcheck": "^3.1.0",
    "fastify-plugin": "^4.5.1",
    "fastify-type-provider-zod": "^1.1.9",
    "ioredis": "^5.3.2",
    "lodash": "^4.17.21",
    "multicoin-address-validator": "^0.5.16",
    "p-limit": "^3.1.0",
    "pino": "^8.19.0",
    "std-env": "^3.7.0",
    "uuid": "^9.0.1",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@types/async-retry": "^1.4.8",
    "@types/lodash": "^4.17.0",
    "@types/multicoin-address-validator": "^0.5.2",
    "@types/node": "^20.11.17",
    "@types/uuid": "^9.0.8",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "@vitest/coverage-istanbul": "^1.3.1",
    "@vitest/ui": "^1.3.1",
    "bitcoinjs-lib": "^6.1.5",
    "cross-env": "^7.0.3",
    "ecpair": "^2.1.0",
    "eslint": "^8.56.0",
    "lint-staged": "^15.2.2",
    "pino-pretty": "^10.3.1",
    "prettier": "^3.2.5",
    "simple-git-hooks": "^2.10.0",
    "tiny-secp256k1": "^2.2.3",
    "tsx": "^4.7.1",
    "typescript": "^5.3.3",
    "vercel": "^33.5.1",
    "vitest": "^1.3.1"
  }
}


================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@ckb-lumos/base':
        specifier: '^0.22.2 '
        version: 0.22.2
      '@ckb-lumos/ckb-indexer':
        specifier: ^0.22.2
        version: 0.22.2
      '@ckb-lumos/codec':
        specifier: ^0.22.2
        version: 0.22.2
      '@ckb-lumos/lumos':
        specifier: 0.22.2
        version: 0.22.2
      '@ckb-lumos/rpc':
        specifier: ^0.22.2
        version: 0.22.2
      '@fastify/compress':
        specifier: ^7.0.0
        version: 7.0.3
      '@fastify/cors':
        specifier: ^9.0.1
        version: 9.0.1
      '@fastify/http-proxy':
        specifier: ^9.4.0
        version: 9.5.0
      '@fastify/jwt':
        specifier: ^8.0.0
        version: 8.0.1
      '@fastify/rate-limit':
        specifier: ^9.1.0
        version: 9.1.0
      '@fastify/redis':
        specifier: ^6.1.1
        version: 6.2.0
      '@fastify/sensible':
        specifier: ^5.5.0
        version: 5.6.0
      '@fastify/swagger':
        specifier: 8.14.0
        version: 8.14.0
      '@fastify/swagger-ui':
        specifier: ^3.0.0
        version: 3.1.0
      '@immobiliarelabs/fastify-sentry':
        specifier: ^8.0.1
        version: 8.0.2
      '@mempool/mempool.js':
        specifier: ^3.0.0
        version: 3.0.0
      '@nervosnetwork/ckb-sdk-utils':
        specifier: ^0.109.5
        version: 0.109.5
      '@rgbpp-sdk/btc':
        specifier: 0.7.0
        version: 0.7.0(@ckb-lumos/lumos@0.22.2)
      '@rgbpp-sdk/ckb':
        specifier: 0.7.0
        version: 0.7.0(@ckb-lumos/lumos@0.22.2)(lodash@4.17.21)
      '@rgbpp-sdk/service':
        specifier: 0.7.0
        version: 0.7.0
      '@sentry/node':
        specifier: ^7.102.1
        version: 7.120.3
      '@sentry/profiling-node':
        specifier: ^7.102.1
        version: 7.120.3
      '@spore-sdk/core':
        specifier: ^0.2.0-beta.9
        version: 0.2.1(@ckb-lumos/lumos@0.22.2)(lodash@4.17.21)
      '@utxostack/metadata':
        specifier: ^0.0.6
        version: 0.0.6
      async-retry:
        specifier: ^1.3.3
        version: 1.3.3
      awilix:
        specifier: ^10.0.1
        version: 10.0.2
      axios:
        specifier: ^1.7.7
        version: 1.7.9
      bloom-filters:
        specifier: ^3.0.1
        version: 3.0.4
      bullmq:
        specifier: 5.4.2
        version: 5.4.2
      dotenv:
        specifier: ^16.4.2
        version: 16.4.7
      fastify:
        specifier: ^4.26.0
        version: 4.29.0
      fastify-cron:
        specifier: ^1.3.1
        version: 1.3.1(fastify@4.29.0)
      fastify-custom-healthcheck:
        specifier: ^3.1.0
        version: 3.1.0
      fastify-plugin:
        specifier: ^4.5.1
        version: 4.5.1
      fastify-type-provider-zod:
        specifier: ^1.1.9
        version: 1.2.0(fastify@4.29.0)(zod@3.24.2)
      ioredis:
        specifier: ^5.3.2
        version: 5.5.0
      lodash:
        specifier: ^4.17.21
        version: 4.17.21
      multicoin-address-validator:
        specifier: ^0.5.16
        version: 0.5.24
      p-limit:
        specifier: ^3.1.0
        version: 3.1.0
      pino:
        specifier: ^8.19.0
        version: 8.21.0
      std-env:
        specifier: ^3.7.0
        version: 3.8.0
      uuid:
        specifier: ^9.0.1
        version: 9.0.1
      zod:
        specifier: ^3.22.4
        version: 3.24.2
    devDependencies:
      '@types/async-retry':
        specifier: ^1.4.8
        version: 1.4.9
      '@types/lodash':
        specifier: ^4.17.0
        version: 4.17.15
      '@types/multicoin-address-validator':
        specifier: ^0.5.2
        version: 0.5.3
      '@types/node':
        specifier: ^20.11.17
        version: 20.17.19
      '@types/uuid':
        specifier: ^9.0.8
        version: 9.0.8
      '@typescript-eslint/eslint-plugin':
        specifier: ^6.21.0
        version: 6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.1)(typescript@5.7.3))(eslint@8.57.1)(typescript@5.7.3)
      '@typescript-eslint/parser':
        specifier: ^6.21.0
        version: 6.21.0(eslint@8.57.1)(typescript@5.7.3)
      '@vitest/coverage-istanbul':
        specifier: ^1.3.1
        version: 1.6.1(vitest@1.6.1)
      '@vitest/ui':
        specifier: ^1.3.1
        version: 1.6.1(vitest@1.6.1)
      bitcoinjs-lib:
        specifier: ^6.1.5
        version: 6.1.7
      cross-env:
        specifier: ^7.0.3
        version: 7.0.3
      ecpair:
        specifier: ^2.1.0
        version: 2.1.0
      eslint:
        specifier: ^8.56.0
        version: 8.57.1
      lint-staged:
        specifier: ^15.2.2
        version: 15.4.3
      pino-pretty:
        specifier: ^10.3.1
        version: 10.3.1
      prettier:
        specifier: ^3.2.5
        version: 3.5.1
      simple-git-hooks:
        specifier: ^2.10.0
        version: 2.11.1
      tiny-secp256k1:
        specifier: ^2.2.3
        version: 2.2.3
      tsx:
        specifier: ^4.7.1
        version: 4.19.2
      typescript:
        specifier: ^5.3.3
        version: 5.7.3
      vercel:
        specifier: ^33.5.1
        version: 33.7.1
      vitest:
        specifier: ^1.3.1
        version: 1.6.1(@edge-runtime/vm@3.2.0)(@types/node@20.17.19)(@vitest/ui@1.6.1)

packages:

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@babel/code-frame@7.26.2':
    resolution: {integrity: sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.26.8':
    resolution: {integrity: sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.26.8':
    resolution: {integrity: sha512-l+lkXCHS6tQEc5oUpK28xBOZ6+HwaH7YwoYQbLFiYb4nS2/l1tKnZEtEWkD0GuiYdvArf9qBS0XlQGXzPMsNqQ==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.26.8':
    resolution: {integrity: sha512-ef383X5++iZHWAXX0SXQR6ZyQhw/0KtTkrTz61WXRhFM6dhpHulO/RJz79L8S6ugZHJkOOkUrUdxgdF2YiPFnA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.26.5':
    resolution: {integrity: sha512-IXuyn5EkouFJscIDuFF5EsiSolseme1s0CZB+QxVugqJLYmKdxI1VfIBOst0SUu4rnk2Z7kqTwmoO1lp3HIfnA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.25.9':
    resolution: {integrity: sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.26.0':
    resolution: {integrity: sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-string-parser@7.25.9':
    resolution: {integrity: sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.25.9':
    resolution: {integrity: sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.25.9':
    resolution: {integrity: sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.26.7':
    resolution: {integrity: sha512-8NHiL98vsi0mbPQmYAGWwfcFaOy4j2HY49fXJCfuDcdE7fMIsH9a7GdaeXpIBsbT7307WU8KCMp5pUVDNL4f9A==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.26.8':
    resolution: {integrity: sha512-TZIQ25pkSoaKEYYaHbbxkfL36GNsQ6iFiBbeuzAkLnXayKR1yP1zFe+NxuZWWsUyvt8icPU9CCq0sgWGXR1GEw==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/template@7.26.8':
    resolution: {integrity: sha512-iNKaX3ZebKIsCvJ+0jd6embf+Aulaa3vNBqZ41kM7iTWjx5qzWKXGHiJUW3+nTpQ18SG11hdF8OAzKrpXkb96Q==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.26.8':
    resolution: {integrity: sha512-nic9tRkjYH0oB2dzr/JoGIm+4Q6SuYeLEiIiZDwBscRMYFJ+tMAz98fuel9ZnbXViA2I0HVSSRRK8DW5fjXStA==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.26.8':
    resolution: {integrity: sha512-eUuWapzEGWFEpHFxgEaBG8e3n6S8L3MSu0oda755rOfabWPnh0Our1AozNFVUxGFIhbKgd1ksprsoDGMinTOTA==}
    engines: {node: '>=6.9.0'}

  '@bitcoinerlab/secp256k1@1.2.0':
    resolution: {integrity: sha512-jeujZSzb3JOZfmJYI0ph1PVpCRV5oaexCgy+RvCXV8XlY+XFB/2n3WOcvBsKLsOw78KYgnQrQWb2HrKE4be88Q==}

  '@ckb-lumos/base@0.22.2':
    resolution: {integrity: sha512-nosUCSa5rTV2IzxbEpqzrvUeQNXB66mgA0h40+QEdnE/gV/s4ke83AScrTAxWkErJy1G/sToIHCc2kWwO95DfQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/bi@0.22.2':
    resolution: {integrity: sha512-F+dLC/tE+xdtNuGgJxlDqbgX/f8azg1tvIFTR5mu7Vhz08nkFgnA+Z+yC0t/I3fDwwH4p/SlGP/yducrsfVTqw==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/ckb-indexer@0.22.2':
    resolution: {integrity: sha512-y4v2yNa3IYURcUc+lkFs/4/nV4W0QQeCORtv1IlkgbES0718XB4IMGWvQtSGKAC94A9B4kSHREcyn0d+9lMzew==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/codec@0.22.2':
    resolution: {integrity: sha512-P5SyhT2qkJwCwcHF3yMLInE0z3wWHDkqJNbSM2Q9oyu0+9kjMQfexNia3T+atBl2M7ELFzN5WvttojYr6DrCwQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/common-scripts@0.22.2':
    resolution: {integrity: sha512-eSXutpQXqAVh0MorCG8bg+xcMqxhpiJCXgdgfpQAA0q6BkdSGmu4Zn3InFRdeHZam8ap02dadVK7ZOi4ZaUKCg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/config-manager@0.22.2':
    resolution: {integrity: sha512-LJ4p80VrCHh178Ks4wW1rEyHC/JWtZxrFiwHinA9aG6aOm2Z9hbZO0/ZKoS5pLfW0gxP2+ZHA3oMVt0UJhlTKA==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/hd@0.22.2':
    resolution: {integrity: sha512-bCcW+yoeBNniKijEIjZZZC2/a9ZEhvVco4L+aOHqwRon3jgXLN6izvzBgzm/m9hWUx47PpzPXjq3fRIn+kONxg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/helpers@0.22.2':
    resolution: {integrity: sha512-6ztXwxsaCuoHjkbclAnfAv9BYl02t+/XxNtl3Et4Sl09xIp9HJ9/vyJouC9JjdQdnfkv1zVGN9tLiKwc6QudaQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/light-client@0.22.2':
    resolution: {integrity: sha512-G9cDOeTC81+cVdGnVOEJ767jPDFV+ao/hsc8ANNVCxsWTlj1EQvEzxGB3vi3S9Jh0lri3t3XxRQia8No5HJ4EQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/lumos@0.22.2':
    resolution: {integrity: sha512-oobNnRx2m2crr6rgz4Mz066ggRLiAgZPwcZJCxiQLxIR3e9ik9f37hxJOEhZ/1kZmNMxZIKectVckaMn8MHROg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/rpc@0.22.2':
    resolution: {integrity: sha512-c2SX0ooDJO3dV2JOTTQtKZs0k+dHst+NHfbYJ6mYWApcZWx2nG4bQR3CQFMIKnd5CKYP/r2JuaonDkcRH9vmzw==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/toolkit@0.22.2':
    resolution: {integrity: sha512-HmKz2dGQeaW2XDqkvjJfLv50VQWGKbthg2RDfIxGsZyjveluRROTyuHP1akypy4pqF8TApGLsXci2MaHCRau+w==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/transaction-manager@0.22.2':
    resolution: {integrity: sha512-RV/nLGAi5to6ROHh58uwiQB9wJBFmABlmU3GvUf2Baz0SIlniBx0EBtS3SzyD95w4zot1Fc8sVwLN8wCvt8ADA==}
    engines: {node: '>=12.0.0'}

  '@cspotcode/source-map-support@0.8.1':
    resolution: {integrity: sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==}
    engines: {node: '>=12'}

  '@edge-runtime/format@2.2.1':
    resolution: {integrity: sha512-JQTRVuiusQLNNLe2W9tnzBlV/GvSVcozLl4XZHk5swnRZ/v6jp8TqR8P7sqmJsQqblDZ3EztcWmLDbhRje/+8g==}
    engines: {node: '>=16'}

  '@edge-runtime/node-utils@2.3.0':
    resolution: {integrity: sha512-uUtx8BFoO1hNxtHjp3eqVPC/mWImGb2exOfGjMLUoipuWgjej+f4o/VP4bUI8U40gu7Teogd5VTeZUkGvJSPOQ==}
    engines: {node: '>=16'}

  '@edge-runtime/ponyfill@2.4.2':
    resolution: {integrity: sha512-oN17GjFr69chu6sDLvXxdhg0Qe8EZviGSuqzR9qOiKh4MhFYGdBBcqRNzdmYeAdeRzOW2mM9yil4RftUQ7sUOA==}
    engines: {node: '>=16'}

  '@edge-runtime/primitives@4.1.0':
    resolution: {integrity: sha512-Vw0lbJ2lvRUqc7/soqygUX216Xb8T3WBZ987oywz6aJqRxcwSVWwr9e+Nqo2m9bxobA9mdbWNNoRY6S9eko1EQ==}
    engines: {node: '>=16'}

  '@edge-runtime/vm@3.2.0':
    resolution: {integrity: sha512-0dEVyRLM/lG4gp1R/Ik5bfPl/1wX00xFwd5KcNH602tzBa09oF7pbTKETEhR1GjZ75K6OJnYFu8II2dyMhONMw==}
    engines: {node: '>=16'}

  '@esbuild/aix-ppc64@0.21.5':
    resolution: {integrity: sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/aix-ppc64@0.23.1':
    resolution: {integrity: sha512-6VhYk1diRqrhBAqpJEdjASR/+WVRtfjpqKuNw11cLiaWpAT/Uu+nokB+UJnevzy/P9C/ty6AOe0dwueMrGh/iQ==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.21.5':
    resolution: {integrity: sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm64@0.23.1':
    resolution: {integrity: sha512-xw50ipykXcLstLeWH7WRdQuysJqejuAGPd30vd1i5zSyKK3WE+ijzHmLKxdiCMtH1pHz78rOg0BKSYOSB/2Khw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.21.5':
    resolution: {integrity: sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-arm@0.23.1':
    resolution: {integrity: sha512-uz6/tEy2IFm9RYOyvKl88zdzZfwEfKZmnX9Cj1BHjeSGNuGLuMD1kR8y5bteYmwqKm1tj8m4cb/aKEorr6fHWQ==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.21.5':
    resolution: {integrity: sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/android-x64@0.23.1':
    resolution: {integrity: sha512-nlN9B69St9BwUoB+jkyU090bru8L0NA3yFvAd7k8dNsVH8bi9a8cUAUSEcEEgTp2z3dbEDGJGfP6VUnkQnlReg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.21.5':
    resolution: {integrity: sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-arm64@0.23.1':
    resolution: {integrity: sha512-YsS2e3Wtgnw7Wq53XXBLcV6JhRsEq8hkfg91ESVadIrzr9wO6jJDMZnCQbHm1Guc5t/CdDiFSSfWP58FNuvT3Q==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.21.5':
    resolution: {integrity: sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/darwin-x64@0.23.1':
    resolution: {integrity: sha512-aClqdgTDVPSEGgoCS8QDG37Gu8yc9lTHNAQlsztQ6ENetKEO//b8y31MMu2ZaPbn4kVsIABzVLXYLhCGekGDqw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.21.5':
    resolution: {integrity: sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-arm64@0.23.1':
    resolution: {integrity: sha512-h1k6yS8/pN/NHlMl5+v4XPfikhJulk4G+tKGFIOwURBSFzE8bixw1ebjluLOjfwtLqY0kewfjLSrO6tN2MgIhA==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.21.5':
    resolution: {integrity: sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.23.1':
    resolution: {integrity: sha512-lK1eJeyk1ZX8UklqFd/3A60UuZ/6UVfGT2LuGo3Wp4/z7eRTRYY+0xOu2kpClP+vMTi9wKOfXi2vjUpO1Ro76g==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.21.5':
    resolution: {integrity: sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm64@0.23.1':
    resolution: {integrity: sha512-/93bf2yxencYDnItMYV/v116zff6UyTjo4EtEQjUBeGiVpMmffDNUyD9UN2zV+V3LRV3/on4xdZ26NKzn6754g==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.21.5':
    resolution: {integrity: sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-arm@0.23.1':
    resolution: {integrity: sha512-CXXkzgn+dXAPs3WBwE+Kvnrf4WECwBdfjfeYHpMeVxWE0EceB6vhWGShs6wi0IYEqMSIzdOF1XjQ/Mkm5d7ZdQ==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.21.5':
    resolution: {integrity: sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-ia32@0.23.1':
    resolution: {integrity: sha512-VTN4EuOHwXEkXzX5nTvVY4s7E/Krz7COC8xkftbbKRYAl96vPiUssGkeMELQMOnLOJ8k3BY1+ZY52tttZnHcXQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.21.5':
    resolution: {integrity: sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-loong64@0.23.1':
    resolution: {integrity: sha512-Vx09LzEoBa5zDnieH8LSMRToj7ir/Jeq0Gu6qJ/1GcBq9GkfoEAoXvLiW1U9J1qE/Y/Oyaq33w5p2ZWrNNHNEw==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.21.5':
    resolution: {integrity: sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-mips64el@0.23.1':
    resolution: {integrity: sha512-nrFzzMQ7W4WRLNUOU5dlWAqa6yVeI0P78WKGUo7lg2HShq/yx+UYkeNSE0SSfSure0SqgnsxPvmAUu/vu0E+3Q==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.21.5':
    resolution: {integrity: sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-ppc64@0.23.1':
    resolution: {integrity: sha512-dKN8fgVqd0vUIjxuJI6P/9SSSe/mB9rvA98CSH2sJnlZ/OCZWO1DJvxj8jvKTfYUdGfcq2dDxoKaC6bHuTlgcw==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.21.5':
    resolution: {integrity: sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-riscv64@0.23.1':
    resolution: {integrity: sha512-5AV4Pzp80fhHL83JM6LoA6pTQVWgB1HovMBsLQ9OZWLDqVY8MVobBXNSmAJi//Csh6tcY7e7Lny2Hg1tElMjIA==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.21.5':
    resolution: {integrity: sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-s390x@0.23.1':
    resolution: {integrity: sha512-9ygs73tuFCe6f6m/Tb+9LtYxWR4c9yg7zjt2cYkjDbDpV/xVn+68cQxMXCjUpYwEkze2RcU/rMnfIXNRFmSoDw==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.21.5':
    resolution: {integrity: sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/linux-x64@0.23.1':
    resolution: {integrity: sha512-EV6+ovTsEXCPAp58g2dD68LxoP/wK5pRvgy0J/HxPGB009omFPv3Yet0HiaqvrIrgPTBuC6wCH1LTOY91EO5hQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-x64@0.21.5':
    resolution: {integrity: sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.23.1':
    resolution: {integrity: sha512-aevEkCNu7KlPRpYLjwmdcuNz6bDFiE7Z8XC4CPqExjTvrHugh28QzUXVOZtiYghciKUacNktqxdpymplil1beA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-arm64@0.23.1':
    resolution: {integrity: sha512-3x37szhLexNA4bXhLrCC/LImN/YtWis6WXr1VESlfVtVeoFJBRINPJ3f0a/6LV8zpikqoUg4hyXw0sFBt5Cr+Q==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.21.5':
    resolution: {integrity: sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.23.1':
    resolution: {integrity: sha512-aY2gMmKmPhxfU+0EdnN+XNtGbjfQgwZj43k8G3fyrDM/UdZww6xrWxmDkuz2eCZchqVeABjV5BpildOrUbBTqA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.21.5':
    resolution: {integrity: sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/sunos-x64@0.23.1':
    resolution: {integrity: sha512-RBRT2gqEl0IKQABT4XTj78tpk9v7ehp+mazn2HbUeZl1YMdaGAQqhapjGTCe7uw7y0frDi4gS0uHzhvpFuI1sA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.21.5':
    resolution: {integrity: sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-arm64@0.23.1':
    resolution: {integrity: sha512-4O+gPR5rEBe2FpKOVyiJ7wNDPA8nGzDuJ6gN4okSA1gEOYZ67N8JPk58tkWtdtPeLz7lBnY6I5L3jdsr3S+A6A==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.21.5':
    resolution: {integrity: sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-ia32@0.23.1':
    resolution: {integrity: sha512-BcaL0Vn6QwCwre3Y717nVHZbAa4UBEigzFm6VdsVdT/MbZ38xoj1X9HPkZhbmaBGUD1W8vxAfffbDe8bA6AKnQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.21.5':
    resolution: {integrity: sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@esbuild/win32-x64@0.23.1':
    resolution: {integrity: sha512-BHpFFeslkWrXWyUPnbKm+xYYVYruCinGcftSBaa8zoF9hZO4BcSCFUvHVTtzpIY6YzUnYtuEhZ+C9iEXjxnasg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.4.1':
    resolution: {integrity: sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/eslintrc@2.1.4':
    resolution: {integrity: sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@eslint/js@8.57.1':
    resolution: {integrity: sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@exact-realty/multipart-parser@1.0.14':
    resolution: {integrity: sha512-ln1+s1XOvRY9NRof3lpjWJZfSoV5XOWdVgK7sYeE3TAt0brtB+pIPJpSbxaol/490re2rcMEo24VZXeffKm8Aw==}
    engines: {node: '>=16.0.0', npm: '>=8.0.0'}
    deprecated: Package has moved to @apeleghq/multipart-parser

  '@fastify/accept-negotiator@1.1.0':
    resolution: {integrity: sha512-OIHZrb2ImZ7XG85HXOONLcJWGosv7sIvM2ifAPQVhg9Lv7qdmMBNVaai4QTdyuaqbKM5eO6sLSQOYI7wEQeCJQ==}
    engines: {node: '>=14'}

  '@fastify/ajv-compiler@3.6.0':
    resolution: {integrity: sha512-LwdXQJjmMD+GwLOkP7TVC68qa+pSSogeWWmznRJ/coyTcfe9qA05AHFSe1eZFwK6q+xVRpChnvFUkf1iYaSZsQ==}

  '@fastify/busboy@2.1.1':
    resolution: {integrity: sha512-vBZP4NlzfOlerQTnba4aqZoMhE/a9HY7HRqoOPaETQcSQuWEIyZMHGfVu6w9wGtGK5fED5qRs2DteVCjOH60sA==}
    engines: {node: '>=14'}

  '@fastify/compress@7.0.3':
    resolution: {integrity: sha512-xa9fo5/DgK1s0bkS6xrYgNn8HmofO5tJvbCDk8QuXshSgLd2cFZANv1ox/Qv7zswS7JroHwTlCVv/XGTVO98tg==}

  '@fastify/cors@9.0.1':
    resolution: {integrity: sha512-YY9Ho3ovI+QHIL2hW+9X4XqQjXLjJqsU+sMV/xFsxZkE8p3GNnYVFpoOxF7SsP5ZL76gwvbo3V9L+FIekBGU4Q==}

  '@fastify/error@3.4.1':
    resolution: {integrity: sha512-wWSvph+29GR783IhmvdwWnN4bUxTD01Vm5Xad4i7i1VuAOItLvbPAb69sb0IQ2N57yprvhNIwAP5B6xfKTmjmQ==}

  '@fastify/fast-json-stringify-compiler@4.3.0':
    resolution: {integrity: sha512-aZAXGYo6m22Fk1zZzEUKBvut/CIIQe/BapEORnxiD5Qr0kPHqqI69NtEMCme74h+at72sPhbkb4ZrLd1W3KRLA==}

  '@fastify/http-proxy@9.5.0':
    resolution: {integrity: sha512-1iqIdV10d5k9YtfHq9ylX5zt1NiM50fG+rIX40qt00R694sqWso3ukyTFZVk33SDoSiBW8roB7n11RUVUoN+Ag==}

  '@fastify/jwt@8.0.1':
    resolution: {integrity: sha512-295bd7V6bDCnZOu8MAQgM6r7V1KILB+kdEq1q6nbHfXCnML569n7NSo3WzeLDG6IAqDl+Rhzi1vjxwaNHhRCBA==}

  '@fastify/merge-json-schemas@0.1.1':
    resolution: {integrity: sha512-fERDVz7topgNjtXsJTTW1JKLy0rhuLRcquYqNR9rF7OcVpCa2OVW49ZPDIhaRRCaUuvVxI+N416xUoF76HNSXA==}

  '@fastify/rate-limit@9.1.0':
    resolution: {integrity: sha512-h5dZWCkuZXN0PxwqaFQLxeln8/LNwQwH9popywmDCFdKfgpi4b/HoMH1lluy6P+30CG9yzzpSpwTCIPNB9T1JA==}

  '@fastify/redis@6.2.0':
    resolution: {integrity: sha512-0M4oTYRJz/ETPdfXvs/ToFI0ZNFjrz1jYFxEr+wHgnW6hswDsLDs+gxLMff2cb5Fegg3siG4hJzhmvvpvqqqbA==}

  '@fastify/reply-from@9.8.0':
    resolution: {integrity: sha512-bPNVaFhEeNI0Lyl6404YZaPFokudCplidE3QoOcr78yOy6H9sYw97p5KPYvY/NJNUHfFtvxOaSAHnK+YSiv/Mg==}

  '@fastify/send@2.1.0':
    resolution: {integrity: sha512-yNYiY6sDkexoJR0D8IDy3aRP3+L4wdqCpvx5WP+VtEU58sn7USmKynBzDQex5X42Zzvw2gNzzYgP90UfWShLFA==}

  '@fastify/sensible@5.6.0':
    resolution: {integrity: sha512-Vq6Z2ZQy10GDqON+hvLF52K99s9et5gVVxTul5n3SIAf0Kq5QjPRUKkAMT3zPAiiGvoHtS3APa/3uaxfDgCODQ==}

  '@fastify/static@7.0.4':
    resolution: {integrity: sha512-p2uKtaf8BMOZWLs6wu+Ihg7bWNBdjNgCwDza4MJtTqg+5ovKmcbgbR9Xs5/smZ1YISfzKOCNYmZV8LaCj+eJ1Q==}

  '@fastify/swagger-ui@3.1.0':
    resolution: {integrity: sha512-68jm6k8VzvHXkEBT4Dakm/kkzUlPO4POIi0agWJSWxsYichPBqzjo+IpfqPl4pSJR1zCToQhEOo+cv+yJL2qew==}

  '@fastify/swagger@8.14.0':
    resolution: {integrity: sha512-sGiznEb3rl6pKGGUZ+JmfI7ct5cwbTQGo+IjewaTvtzfrshnryu4dZwEsjw0YHABpBA+kCz3kpRaHB7qpa67jg==}

  '@humanwhocodes/config-array@0.13.0':
    resolution: {integrity: sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==}
    engines: {node: '>=10.10.0'}
    deprecated: Use @eslint/config-array instead

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/object-schema@2.0.3':
    resolution: {integrity: sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==}
    deprecated: Use @eslint/object-schema instead

  '@immobiliarelabs/fastify-sentry@8.0.2':
    resolution: {integrity: sha512-GxCIVYJIO3gtskVK9WGSmKjaCmzsv0RNaNegWebXf97d/MIq3a5FsFmyXaVANLwPfO/c2FuScECx0TbSdKeBfw==}
    engines: {node: '>=18'}

  '@ioredis/commands@1.2.0':
    resolution: {integrity: sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg==}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@istanbuljs/schema@0.1.3':
    resolution: {integrity: sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==}
    engines: {node: '>=8'}

  '@jest/schemas@29.6.3':
    resolution: {integrity: sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jridgewell/gen-mapping@0.3.8':
    resolution: {integrity: sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@jridgewell/trace-mapping@0.3.9':
    resolution: {integrity: sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==}

  '@lukeed/ms@2.0.2':
    resolution: {integrity: sha512-9I2Zn6+NJLfaGoz9jN3lpwDgAYvfGeNYdbAIjJOqzs4Tpc+VU3Jqq4IofSUBKajiDS8k9fZIg18/z13mpk1bsA==}
    engines: {node: '>=8'}

  '@mapbox/node-pre-gyp@1.0.11':
    resolution: {integrity: sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==}
    hasBin: true

  '@mempool/mempool.js@3.0.0':
    resolution: {integrity: sha512-ZfNDcPA0HLpE8u+6/Tl/53F0WTL1CebwIrOIUeajvlXiXlDkhj/pTxnXQhMoxKOJK3qQnUjt6CQuX/TGBaFw7A==}

  '@msgpackr-extract/msgpackr-extract-darwin-arm64@3.0.3':
    resolution: {integrity: sha512-QZHtlVgbAdy2zAqNA9Gu1UpIuI8Xvsd1v8ic6B2pZmeFnFcMWiPLfWXh7TVw4eGEZ/C9TH281KwhVoeQUKbyjw==}
    cpu: [arm64]
    os: [darwin]

  '@msgpackr-extract/msgpackr-extract-darwin-x64@3.0.3':
    resolution: {integrity: sha512-mdzd3AVzYKuUmiWOQ8GNhl64/IoFGol569zNRdkLReh6LRLHOXxU4U8eq0JwaD8iFHdVGqSy4IjFL4reoWCDFw==}
    cpu: [x64]
    os: [darwin]

  '@msgpackr-extract/msgpackr-extract-linux-arm64@3.0.3':
    resolution: {integrity: sha512-YxQL+ax0XqBJDZiKimS2XQaf+2wDGVa1enVRGzEvLLVFeqa5kx2bWbtcSXgsxjQB7nRqqIGFIcLteF/sHeVtQg==}
    cpu: [arm64]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-linux-arm@3.0.3':
    resolution: {integrity: sha512-fg0uy/dG/nZEXfYilKoRe7yALaNmHoYeIoJuJ7KJ+YyU2bvY8vPv27f7UKhGRpY6euFYqEVhxCFZgAUNQBM3nw==}
    cpu: [arm]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-linux-x64@3.0.3':
    resolution: {integrity: sha512-cvwNfbP07pKUfq1uH+S6KJ7dT9K8WOE4ZiAcsrSes+UY55E/0jLYc+vq+DO7jlmqRb5zAggExKm0H7O/CBaesg==}
    cpu: [x64]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-win32-x64@3.0.3':
    resolution: {integrity: sha512-x0fWaQtYp4E6sktbsdAqnehxDgEc/VwM7uLsRCYWaiGu0ykYdZPiS8zCWdnjHwyiumousxfBm4SO31eXqwEZhQ==}
    cpu: [x64]
    os: [win32]

  '@nervosnetwork/ckb-sdk-core@0.109.5':
    resolution: {integrity: sha512-eh3RjJlf8LqIAf03m81YLnuDaTOzs8C2cqXGJT9pdJIwEAaRcmgG6xZr5m9fdOMaeFMvaF4BQyjCeGjTQCFRGA==}

  '@nervosnetwork/ckb-sdk-rpc@0.109.5':
    resolution: {integrity: sha512-rT7iVRtagP3TxWel4zwXo6BAKfne4TBrGTnjmVTfqa/mrMNonVwOyJcFhWNSvq/r8HufL3QlYhngLHVDNomURQ==}

  '@nervosnetwork/ckb-sdk-utils@0.109.5':
    resolution: {integrity: sha512-Tx642hcJWbN8W3KzCIhIo49yzJ8LMqWopQCSBDKuRmwHesO/bvJqYojCVwfrOyROtFOPhgjyiGm5RXBuxm0KpQ==}

  '@nervosnetwork/ckb-types@0.109.5':
    resolution: {integrity: sha512-5jQNjFw76YCd+Ppl+0RvBWzxwvWaKfWC5wjVFFdNAieX7xksCHfZFIeow8je7AF8uVypwe56WlLBlblxw9NBBQ==}

  '@noble/curves@1.8.1':
    resolution: {integrity: sha512-warwspo+UYUPep0Q+vtdVB4Ugn8GGQj8iyB3gnRWsztmUHTI3S1nhdiWNsPUGL0vud7JlRRk1XEu7Lq1KGTnMQ==}
    engines: {node: ^14.21.3 || >=16}

  '@noble/hashes@1.7.1':
    resolution: {integrity: sha512-B8XBPsn4vT/KJAGqDzbwztd+6Yte3P4V7iafm24bxgDe/mlRuK6xmWPuCNrKt2vDafZ8MfJLlchDG/vYafQEjQ==}
    engines: {node: ^14.21.3 || >=16}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@polka/url@1.0.0-next.28':
    resolution: {integrity: sha512-8LduaNlMZGwdZ6qWrKlfa+2M4gahzFkprZiAt2TF8uS0qQgBizKXpXURqvTJ4WtmupWxaLqjRb2UCTe72mu+Aw==}

  '@rgbpp-sdk/btc@0.7.0':
    resolution: {integrity: sha512-QYtl8Ez3z4FwhGzaBngVqG5WaIdmesD5J+m3RFoBUHvx5MfOgHD+ofgkZreEyRIkp7fwwsicCZ57GCiB/Yq2Dg==}

  '@rgbpp-sdk/ckb@0.7.0':
    resolution: {integrity: sha512-OBUuapLVtKR+72XwY40+UlBhalWZx99Oo1fWM3KihGwObruvvrA092daaaEi9oSbfVvzzl4B9XhSnLM6W5GPHA==}

  '@rgbpp-sdk/service@0.7.0':
    resolution: {integrity: sha512-iz21HjUhA0jbfIefFa1Jfoigrofuu/ulVbfpBw63TJT7pQUVxtw9HgnW9mGb4nIQHgx+1wJeqnjFYojFuJ17fw==}

  '@rollup/pluginutils@4.2.1':
    resolution: {integrity: sha512-iKnFXr7NkdZAIHiIWE+BX5ULi/ucVFYWD6TbAV+rZctiRTY2PL6tsIKhoIOaoskiWAkgu+VsbXgUVDNLHf+InQ==}
    engines: {node: '>= 8.0.0'}

  '@rollup/rollup-android-arm-eabi@4.34.6':
    resolution: {integrity: sha512-+GcCXtOQoWuC7hhX1P00LqjjIiS/iOouHXhMdiDSnq/1DGTox4SpUvO52Xm+div6+106r+TcvOeo/cxvyEyTgg==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.34.6':
    resolution: {integrity: sha512-E8+2qCIjciYUnCa1AiVF1BkRgqIGW9KzJeesQqVfyRITGQN+dFuoivO0hnro1DjT74wXLRZ7QF8MIbz+luGaJA==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.34.6':
    resolution: {integrity: sha512-z9Ib+OzqN3DZEjX7PDQMHEhtF+t6Mi2z/ueChQPLS/qUMKY7Ybn5A2ggFoKRNRh1q1T03YTQfBTQCJZiepESAg==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.34.6':
    resolution: {integrity: sha512-PShKVY4u0FDAR7jskyFIYVyHEPCPnIQY8s5OcXkdU8mz3Y7eXDJPdyM/ZWjkYdR2m0izD9HHWA8sGcXn+Qrsyg==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-freebsd-arm64@4.34.6':
    resolution: {integrity: sha512-YSwyOqlDAdKqs0iKuqvRHLN4SrD2TiswfoLfvYXseKbL47ht1grQpq46MSiQAx6rQEN8o8URtpXARCpqabqxGQ==}
    cpu: [arm64]
    os: [freebsd]

  '@rollup/rollup-freebsd-x64@4.34.6':
    resolution: {integrity: sha512-HEP4CgPAY1RxXwwL5sPFv6BBM3tVeLnshF03HMhJYCNc6kvSqBgTMmsEjb72RkZBAWIqiPUyF1JpEBv5XT9wKQ==}
    cpu: [x64]
    os: [freebsd]

  '@rollup/rollup-linux-arm-gnueabihf@4.34.6':
    resolution: {integrity: sha512-88fSzjC5xeH9S2Vg3rPgXJULkHcLYMkh8faix8DX4h4TIAL65ekwuQMA/g2CXq8W+NJC43V6fUpYZNjaX3+IIg==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.34.6':
    resolution: {integrity: sha512-wM4ztnutBqYFyvNeR7Av+reWI/enK9tDOTKNF+6Kk2Q96k9bwhDDOlnCUNRPvromlVXo04riSliMBs/Z7RteEg==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.34.6':
    resolution: {integrity: sha512-9RyprECbRa9zEjXLtvvshhw4CMrRa3K+0wcp3KME0zmBe1ILmvcVHnypZ/aIDXpRyfhSYSuN4EPdCCj5Du8FIA==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.34.6':
    resolution: {integrity: sha512-qTmklhCTyaJSB05S+iSovfo++EwnIEZxHkzv5dep4qoszUMX5Ca4WM4zAVUMbfdviLgCSQOu5oU8YoGk1s6M9Q==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-loongarch64-gnu@4.34.6':
    resolution: {integrity: sha512-4Qmkaps9yqmpjY5pvpkfOerYgKNUGzQpFxV6rnS7c/JfYbDSU0y6WpbbredB5cCpLFGJEqYX40WUmxMkwhWCjw==}
    cpu: [loong64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.34.6':
    resolution: {integrity: sha512-Zsrtux3PuaxuBTX/zHdLaFmcofWGzaWW1scwLU3ZbW/X+hSsFbz9wDIp6XvnT7pzYRl9MezWqEqKy7ssmDEnuQ==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.34.6':
    resolution: {integrity: sha512-aK+Zp+CRM55iPrlyKiU3/zyhgzWBxLVrw2mwiQSYJRobCURb781+XstzvA8Gkjg/hbdQFuDw44aUOxVQFycrAg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.34.6':
    resolution: {integrity: sha512-WoKLVrY9ogmaYPXwTH326+ErlCIgMmsoRSx6bO+l68YgJnlOXhygDYSZe/qbUJCSiCiZAQ+tKm88NcWuUXqOzw==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.34.6':
    resolution: {integrity: sha512-Sht4aFvmA4ToHd2vFzwMFaQCiYm2lDFho5rPcvPBT5pCdC+GwHG6CMch4GQfmWTQ1SwRKS0dhDYb54khSrjDWw==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.34.6':
    resolution: {integrity: sha512-zmmpOQh8vXc2QITsnCiODCDGXFC8LMi64+/oPpPx5qz3pqv0s6x46ps4xoycfUiVZps5PFn1gksZzo4RGTKT+A==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.34.6':
    resolution: {integrity: sha512-3/q1qUsO/tLqGBaD4uXsB6coVGB3usxw3qyeVb59aArCgedSF66MPdgRStUd7vbZOsko/CgVaY5fo2vkvPLWiA==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.34.6':
    resolution: {integrity: sha512-oLHxuyywc6efdKVTxvc0135zPrRdtYVjtVD5GUm55I3ODxhU/PwkQFD97z16Xzxa1Fz0AEe4W/2hzRtd+IfpOA==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.34.6':
    resolution: {integrity: sha512-0PVwmgzZ8+TZ9oGBmdZoQVXflbvuwzN/HRclujpl4N/q3i+y0lqLw8n1bXA8ru3sApDjlmONaNAuYr38y1Kr9w==}
    cpu: [x64]
    os: [win32]

  '@scure/base@1.2.4':
    resolution: {integrity: sha512-5Yy9czTO47mqz+/J8GM6GIId4umdCk1wc1q8rKERQulIoc8VP9pzDcghv10Tl2E7R96ZUx/PhND3ESYUQX8NuQ==}

  '@sentry-internal/tracing@7.120.3':
    resolution: {integrity: sha512-Ausx+Jw1pAMbIBHStoQ6ZqDZR60PsCByvHdw/jdH9AqPrNE9xlBSf9EwcycvmrzwyKspSLaB52grlje2cRIUMg==}
    engines: {node: '>=8'}

  '@sentry/core@7.120.3':
    resolution: {integrity: sha512-vyy11fCGpkGK3qI5DSXOjgIboBZTriw0YDx/0KyX5CjIjDDNgp5AGgpgFkfZyiYiaU2Ww3iFuKo4wHmBusz1uA==}
    engines: {node: '>=8'}

  '@sentry/integrations@7.120.3':
    resolution: {integrity: sha512-6i/lYp0BubHPDTg91/uxHvNui427df9r17SsIEXa2eKDwQ9gW2qRx5IWgvnxs2GV/GfSbwcx4swUB3RfEWrXrQ==}
    engines: {node: '>=8'}

  '@sentry/node@7.120.3':
    resolution: {integrity: sha512-t+QtekZedEfiZjbkRAk1QWJPnJlFBH/ti96tQhEq7wmlk3VszDXraZvLWZA0P2vXyglKzbWRGkT31aD3/kX+5Q==}
    engines: {node: '>=8'}

  '@sentry/profiling-node@7.120.3':
    resolution: {integrity: sha512-UXt/QROtBEAfcTXdtHMXZiDrc2jkW4O78Q/9HZkkXf5a+lZGbWOX326G2AaxXTcDlKRSH8nhHcssG5SLI4P+gw==}
    engines: {node: '>=8.0.0'}
    hasBin: true

  '@sentry/tracing@7.120.3':
    resolution: {integrity: sha512-B7bqyYFgHuab1Pn7w5KXsZP/nfFo4VDBDdSXDSWYk5+TYJ3IDruO3eJFhOrircfsz4YwazWm9kbeZhkpsHDyHg==}
    engines: {node: '>=8'}

  '@sentry/types@7.120.3':
    resolution: {integrity: sha512-C4z+3kGWNFJ303FC+FxAd4KkHvxpNFYAFN8iMIgBwJdpIl25KZ8Q/VdGn0MLLUEHNLvjob0+wvwlcRBBNLXOow==}
    engines: {node: '>=8'}

  '@sentry/utils@7.120.3':
    resolution: {integrity: sha512-UDAOQJtJDxZHQ5Nm1olycBIsz2wdGX8SdzyGVHmD8EOQYAeDZQyIlQYohDe9nazdIOQLZCIc3fU0G9gqVLkaGQ==}
    engines: {node: '>=8'}

  '@sinclair/typebox@0.25.24':
    resolution: {integrity: sha512-XJfwUVUKDHF5ugKwIcxEgc9k8b7HbznCp6eUfWgu710hMPNIO4aw4/zB5RogDQz8nd6gyCDpU9O/m6qYEWY6yQ==}

  '@sinclair/typebox@0.27.8':
    resolution: {integrity: sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==}

  '@spore-sdk/core@0.2.1':
    resolution: {integrity: sha512-mNUxoQu4h6H4DIEwBxUzntFf6HFG5xXOsSwnN9jF0+oL+fIjOTNt4erwZeeJo1H7H6AS4S9OkDFikykYVIzZSg==}
    peerDependencies:
      '@ckb-lumos/lumos': 0.22.0-next.5
      lodash: ^4.17.21

  '@tootallnate/once@2.0.0':
    resolution: {integrity: sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==}
    engines: {node: '>= 10'}

  '@ts-morph/common@0.11.1':
    resolution: {integrity: sha512-7hWZS0NRpEsNV8vWJzg7FEz6V8MaLNeJOmwmghqUXTpzk16V1LLZhdo+4QvE/+zv4cVci0OviuJFnqhEfoV3+g==}

  '@tsconfig/node10@1.0.11':
    resolution: {integrity: sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==}

  '@tsconfig/node12@1.0.11':
    resolution: {integrity: sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==}

  '@tsconfig/node14@1.0.3':
    resolution: {integrity: sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==}

  '@tsconfig/node16@1.0.4':
    resolution: {integrity: sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==}

  '@types/async-retry@1.4.9':
    resolution: {integrity: sha512-s1ciZQJzRh3708X/m3vPExr5KJlzlZJvXsKpbtE2luqNcbROr64qU+3KpJsYHqWMeaxI839OvXf9PrUSw1Xtyg==}

  '@types/blake2b@2.1.3':
    resolution: {integrity: sha512-MFCdX0MNxFBP/xEILO5Td0kv6nI7+Q2iRWZbTL/yzH2/eDVZS5Wd1LHdsmXClvsCyzqaZfHFzZaN6BUeUCfSDA==}

  '@types/cron@2.4.3':
    resolution: {integrity: sha512-ViRBkoZD9Rk0hGeMdd2GHGaOaZuH9mDmwsE5/Zo53Ftwcvh7h9VJc8lIt2wdgEwS4EW5lbtTX6vlE0idCLPOyA==}
    deprecated: This is a stub types definition. cron provides its own type definitions, so you do not need this installed.

  '@types/deep-freeze-strict@1.1.2':
    resolution: {integrity: sha512-VvMETBojHvhX4f+ocYTySQlXMZfxKV3Jyb7iCWlWaC+exbedkv6Iv2bZZqI736qXjVguH6IH7bzwMBMfTT+zuQ==}

  '@types/estree@1.0.6':
    resolution: {integrity: sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==}

  '@types/gensync@1.0.4':
    resolution: {integrity: sha512-C3YYeRQWp2fmq9OryX+FoDy8nXS6scQ7dPptD8LnFDAUNcKWJjXQKDNJD3HVm+kOUsXhTOkpi69vI4EuAr95bA==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/lodash.isequal@4.5.8':
    resolution: {integrity: sha512-uput6pg4E/tj2LGxCZo9+y27JNyB2OZuuI/T5F+ylVDYuqICLG2/ktjxx0v6GvVntAf8TvEzeQLcV0ffRirXuA==}

  '@types/lodash@4.17.15':
    resolution: {integrity: sha512-w/P33JFeySuhN6JLkysYUK2gEmy9kHHFN7E8ro0tkfmlDOgxBDzWEZ/J8cWA+fHqFevpswDTFZnDx+R9lbL6xw==}

  '@types/luxon@3.3.8':
    resolution: {integrity: sha512-jYvz8UMLDgy3a5SkGJne8H7VA7zPV2Lwohjx0V8V31+SqAjNmurWMkk9cQhfvlcnXWudBpK9xPM1n4rljOcHYQ==}

  '@types/multicoin-address-validator@0.5.3':
    resolution: {integrity: sha512-faImIjJkbXz6HdgZX4Hfr7GwuiEyGjcp49ugfu5rh8IhHNfaa5gNroQY4pARaaEgX1pgybVdc2iSc1h4B2fGMw==}

  '@types/node@14.18.33':
    resolution: {integrity: sha512-qelS/Ra6sacc4loe/3MSjXNL1dNQ/GjxNHVzuChwMfmk7HuycRLVQN2qNY3XahK+fZc5E2szqQSKUyAF0E+2bg==}

  '@types/node@20.17.19':
    resolution: {integrity: sha512-LEwC7o1ifqg/6r2gn9Dns0f1rhK+fPFDoMiceTJ6kWmVk6bgXBI/9IOWfVan4WiAavK9pIVWdX0/e3J+eEUh5A==}

  '@types/retry@0.12.5':
    resolution: {integrity: sha512-3xSjTp3v03X/lSQLkczaN9UIEwJMoMCA1+Nb5HfbJEQWogdeQIyVtTvxPXDQjZ5zws8rFQfVfRdz03ARihPJgw==}

  '@types/seedrandom@3.0.8':
    resolution: {integrity: sha512-TY1eezMU2zH2ozQoAFAQFOPpvP15g+ZgSfTZt31AUUH/Rxtnz3H+A/Sv1Snw2/amp//omibc+AEkTaA8KUeOLQ==}

  '@types/semver@7.5.8':
    resolution: {integrity: sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==}

  '@types/uuid@9.0.8':
    resolution: {integrity: sha512-jg+97EGIcY9AGHJJRaaPVgetKDsrTgbRjQ5Msgjh/DQKEFl0DtyRr/VCOyD1T2R1MNeWPK/u7JoGhlDZnKBAfA==}

  '@typescript-eslint/eslint-plugin@6.21.0':
    resolution: {integrity: sha512-oy9+hTPCUFpngkEZUSzbf9MxI65wbKFoQYsgPdILTfbUldp5ovUuphZVe4i30emU9M/kP+T64Di0mxl7dSw3MA==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      '@typescript-eslint/parser': ^6.0.0 || ^6.0.0-alpha
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@6.21.0':
    resolution: {integrity: sha512-tbsV1jPne5CkFQCgPBcDOt30ItF7aJoZL997JSF7MhGQqOeT3svWRYxiqlfA5RUdlHN6Fi+EI9bxqbdyAUZjYQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/scope-manager@6.21.0':
    resolution: {integrity: sha512-OwLUIWZJry80O99zvqXVEioyniJMa+d2GrqpUTqi5/v5D5rOrppJVBPa0yKCblcigC0/aYAzxxqQ1B+DS2RYsg==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/type-utils@6.21.0':
    resolution: {integrity: sha512-rZQI7wHfao8qMX3Rd3xqeYSMCL3SoiSQLBATSiVKARdFGCYSRvmViieZjqc58jKgs8Y8i9YvVVhRbHSTA4VBag==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/types@6.21.0':
    resolution: {integrity: sha512-1kFmZ1rOm5epu9NZEZm1kckCDGj5UJEf7P1kliH4LKu/RkwpsfqqGmY2OOcUs18lSlQBKLDYBOGxRVtrMN5lpg==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/typescript-estree@6.21.0':
    resolution: {integrity: sha512-6npJTkZcO+y2/kr+z0hc4HwNfrrP4kNYh57ek7yCNlrBjWQ1Y0OS7jiZTkgumrvkX5HkEKXFZkkdFNkaW2wmUQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/utils@6.21.0':
    resolution: {integrity: sha512-NfWVaC8HP9T8cbKQxHcsJBY5YE1O33+jpMwN45qzWWaPDZgLIbo12toGMWnmhvCpd3sIxkpDw3Wv1B3dYrbDQQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0

  '@typescript-eslint/visitor-keys@6.21.0':
    resolution: {integrity: sha512-JJtkDduxLi9bivAB+cYOVMtbkqdPOhZ+ZI5LC47MIRrDV4Yn2o+ZnW10Nkmr28xRpSpdJ6Sm42Hjf2+REYXm0A==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@ungap/structured-clone@1.3.0':
    resolution: {integrity: sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==}

  '@utxostack/metadata@0.0.6':
    resolution: {integrity: sha512-oech0S5HUFMhbrVNk9jEIXi3L8It23bTGcRiC3m30eyn0AtwWlMJyj49mC//4hgLKUFEmVhVSjTKsrYY2wSmhg==}

  '@vercel/build-utils@7.11.0':
    resolution: {integrity: sha512-UFrx1hNIjNJJkd0NZrYfaOrmcWhQmrVsbKe9o3L9jX9J1iufG685wIZ9tFCKKC0Fa2HWbNDNzNxrE5SCAS2lyA==}

  '@vercel/error-utils@2.0.2':
    resolution: {integrity: sha512-Sj0LFafGpYr6pfCqrQ82X6ukRl5qpmVrHM/191kNYFqkkB9YkjlMAj6QcEsvCG259x4QZ7Tya++0AB85NDPbKQ==}

  '@vercel/fun@1.1.0':
    resolution: {integrity: sha512-SpuPAo+MlAYMtcMcC0plx7Tv4Mp7SQhJJj1iIENlOnABL24kxHpL09XLQMGzZIzIW7upR8c3edwgfpRtp+dhVw==}
    engines: {node: '>= 10'}

  '@vercel/gatsby-plugin-vercel-analytics@1.0.11':
    resolution: {integrity: sha512-iTEA0vY6RBPuEzkwUTVzSHDATo1aF6bdLLspI68mQ/BTbi5UQEGjpjyzdKOVcSYApDtFU6M6vypZ1t4vIEnHvw==}

  '@vercel/gatsby-plugin-vercel-builder@2.0.24':
    resolution: {integrity: sha512-b02ifu8WCmz4ARjkC9AyuOxpXa0Tmh0uIbDDYvyvDRpvohQY53eC3sXKVOejnmQbi9KojkaJsQRvMTBRh9BUHA==}

  '@vercel/go@3.1.1':
    resolution: {integrity: sha512-mrzomNYltxkjvtUmaYry5YEyvwTz6c/QQHE5Gr/pPGRIniUiP6T6OFOJ49RBN7e6pRXaNzHPVuidiuBhvHh5+Q==}

  '@vercel/hydrogen@1.0.2':
    resolution: {integrity: sha512-/Q2MKk1GfOuZAnkE9jQexjtUQqanbY65R+xtJWd9yKIgwcfRI1hxiNH3uXyVM5AvLoY+fxxULkSuxDtUKpkJpQ==}

  '@vercel/next@4.2.0':
    resolution: {integrity: sha512-2KSXdPHpfPWaf0tKTBxOWvdc8e9TPNARjmqtgYUsrl1TVaBNFsZ0GV0kWaVLEw4o7CWfREt8ZY064sNVb1BcAQ==}

  '@vercel/nft@0.26.4':
    resolution: {integrity: sha512-j4jCOOXke2t8cHZCIxu1dzKLHLcFmYzC3yqAK6MfZznOL1QIJKd0xcFsXK3zcqzU7ScsE2zWkiMMNHGMHgp+FA==}
    engines: {node: '>=16'}
    hasBin: true

  '@vercel/node@3.0.26':
    resolution: {integrity: sha512-PoyacnoylwpE3+7RFUVHJlbPqtneTCEJVXXx4n8g9ARgUDSRSCwFpJOhiFQon2sS2YtfCzsJa29Z9dAZQedDcQ==}

  '@vercel/python@4.1.1':
    resolution: {integrity: sha512-EbAdKOZ0hPd5b59tLt7R3RQK1azNvuZTrCFRAVHNjqcIHNCmrSvjag5zBGn7Memkk8qWb3+CgBw9K/3LJKei0w==}

  '@vercel/redwood@2.0.8':
    resolution: {integrity: sha512-hAu7SYXDt+W7kscjtQ5NsuNflXH+QB5/xAdA6FRSS/e41lG6Xq6pqLMDobqq4BR7E2PpppVDw2DUx9KzPNoeEw==}

  '@vercel/remix-builder@2.1.5':
    resolution: {integrity: sha512-VaDhsNg/1lZ7h6GJnaykActeZTRtFQz45qDNwKrHM+Nw5/ocwTun9sCJZY/ziECUNuQEJv95z3wUDhNweG+/9w==}

  '@vercel/routing-utils@3.1.0':
    resolution: {integrity: sha512-Ci5xTjVTJY/JLZXpCXpLehMft97i9fH34nu9PGav6DtwkVUF6TOPX86U0W0niQjMZ5n6/ZP0BwcJK2LOozKaGw==}

  '@vercel/ruby@2.0.5':
    resolution: {integrity: sha512-Gfm8HDech41vf+EPleRzgoJUnDTJerKgckMm4KX0JT860gV9XBMSOWYH7eMWHmMza104+HRCWL7wT6OlpftF2Q==}

  '@vercel/static-build@2.4.6':
    resolution: {integrity: sha512-LCmEBXRse7Bt46fo4OUzkq6RL1Q26oMWvmbFsW5uKi6bkT8asU1U5/zw9PQTeFQjGRL2vkUi22fGXF6XHuuqsA==}

  '@vercel/static-config@3.0.0':
    resolution: {integrity: sha512-2qtvcBJ1bGY0dYGYh3iM7yGKkk971FujLEDXzuW5wcZsPr1GSEjO/w2iSr3qve6nDDtBImsGoDEnus5FI4+fIw==}

  '@vitest/coverage-istanbul@1.6.1':
    resolution: {integrity: sha512-0NWKNPrbMo1s6emwnn+UpGPxrSEd9R6VpQ3wzYz0y43esZjjDkGLb6Qkvfu6LNyQO4TAGyepaZ11imUmmIFLaw==}
    peerDependencies:
      vitest: 1.6.1

  '@vitest/expect@1.6.1':
    resolution: {integrity: sha512-jXL+9+ZNIJKruofqXuuTClf44eSpcHlgj3CiuNihUF3Ioujtmc0zIa3UJOW5RjDK1YLBJZnWBlPuqhYycLioog==}

  '@vitest/runner@1.6.1':
    resolution: {integrity: sha512-3nSnYXkVkf3mXFfE7vVyPmi3Sazhb/2cfZGGs0JRzFsPFvAMBEcrweV1V1GsrstdXeKCTXlJbvnQwGWgEIHmOA==}

  '@vitest/snapshot@1.6.1':
    resolution: {integrity: sha512-WvidQuWAzU2p95u8GAKlRMqMyN1yOJkGHnx3M1PL9Raf7AQ1kwLKg04ADlCa3+OXUZE7BceOhVZiuWAbzCKcUQ==}

  '@vitest/spy@1.6.1':
    resolution: {integrity: sha512-MGcMmpGkZebsMZhbQKkAf9CX5zGvjkBTqf8Zx3ApYWXr3wG+QvEu2eXWfnIIWYSJExIp4V9FCKDEeygzkYrXMw==}

  '@vitest/ui@1.6.1':
    resolution: {integrity: sha512-xa57bCPGuzEFqGjPs3vVLyqareG8DX0uMkr5U/v5vLv5/ZUrBrPL7gzxzTJedEyZxFMfsozwTIbbYfEQVo3kgg==}
    peerDependencies:
      vitest: 1.6.1

  '@vitest/utils@1.6.1':
    resolution: {integrity: sha512-jOrrUvXM4Av9ZWiG1EajNto0u96kWAhJ1LmPmJhXXQx/32MecEKd10pOLYgS2BQx1TgkGhloPU1ArDW2vvaY6g==}

  abbrev@1.1.1:
    resolution: {integrity: sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==}

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  abstract-logging@2.0.1:
    resolution: {integrity: sha512-2BjRTZxTPvheOvGbBslFSYOUkr+SjPtOnrLP33f+VIWLzezQpZcqVg7ja3L4dBXmzzgwT+a029jRx5PCi3JuiA==}

  acorn-import-attributes@1.9.5:
    resolution: {integrity: sha512-n02Vykv5uA3eHGM/Z2dQrcD56kL8TyDb2p1+0P83PClMnC/nc+anbQRhIOWnSq4Ke/KvDPrY3C9hDtC/A3eHnQ==}
    peerDependencies:
      acorn: ^8

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn-walk@8.3.4:
    resolution: {integrity: sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==}
    engines: {node: '>=0.4.0'}

  acorn@8.14.0:
    resolution: {integrity: sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agent-base@6.0.2:
    resolution: {integrity: sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==}
    engines: {node: '>= 6.0.0'}

  ajv-formats@2.1.1:
    resolution: {integrity: sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-formats@3.0.1:
    resolution: {integrity: sha512-8iUql50EUR+uUcdRQ3HDqa6EVyo3docL8g5WJ3FNcWmu62IbkGUue/pEyLBW8VGKKucTPgqeks4fIU1DA4yowQ==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ajv@8.17.1:
    resolution: {integrity: sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==}

  ajv@8.6.3:
    resolution: {integrity: sha512-SMJOdDP6LqTkD0Uq8qLi+gMwSt0imXLSV080qFVwJCpH9U6Mb+SUGHAXM0KNbcBPguytWyvFxcHgMLe2D2XSpw==}

  ansi-escapes@7.0.0:
    resolution: {integrity: sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==}
    engines: {node: '>=18'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  aproba@2.0.0:
    resolution: {integrity: sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==}

  are-we-there-yet@2.0.0:
    resolution: {integrity: sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==}
    engines: {node: '>=10'}
    deprecated: This package is no longer supported.

  arg@4.1.0:
    resolution: {integrity: sha512-ZWc51jO3qegGkVh8Hwpv636EkbesNV5ZNQPCtRa+0qytRYPEs9IYT9qITY9buezqUH5uqyzlWLcufrzU2rffdg==}

  arg@4.1.3:
    resolution: {integrity: sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  asn1.js@5.4.1:
    resolution: {integrity: sha512-+I//4cYPccV8LdmBLiX8CYvf9Sp3vQsrqu2QNXRcrbiWvcx/UdlFiqUJJzxRQxgsZmvhXhn4cSKeSmoFjVdupA==}

  assertion-error@1.1.0:
    resolution: {integrity: sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw==}

  async-listen@1.2.0:
    resolution: {integrity: sha512-CcEtRh/oc9Jc4uWeUwdpG/+Mb2YUHKmdaTf0gUr7Wa+bfp4xx70HOb3RuSTJMvqKNB1TkdTfjLdrcz2X4rkkZA==}

  async-listen@3.0.0:
    resolution: {integrity: sha512-V+SsTpDqkrWTimiotsyl33ePSjA5/KrithwupuvJ6ztsqPvGv6ge4OredFhPffVXiLN/QUWvE0XcqJaYgt6fOg==}
    engines: {node: '>= 14'}

  async-listen@3.0.1:
    resolution: {integrity: sha512-cWMaNwUJnf37C/S5TfCkk/15MwbPRwVYALA2jtjkbHjCmAPiDXyNJy2q3p1KAZzDLHAWyarUWSujUoHR4pEgrA==}
    engines: {node: '>= 14'}

  async-retry@1.3.3:
    resolution: {integrity: sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==}

  async-sema@3.1.1:
    resolution: {integrity: sha512-tLRNUXati5MFePdAk8dw7Qt7DpxPB60ofAgn8WRhW6a2rcimZnYBP9oxHiv0OHy+Wz7kPMG+t4LGdt31+4EmGg==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  atomic-sleep@1.0.0:
    resolution: {integrity: sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==}
    engines: {node: '>=8.0.0'}

  avvio@8.4.0:
    resolution: {integrity: sha512-CDSwaxINFy59iNwhYnkvALBwZiTydGkOecZyPkqBpABYR1KqGEsET0VOOYDwtleZSUIdeY36DC2bSZ24CO1igA==}

  awilix@10.0.2:
    resolution: {integrity: sha512-hFatb7eZFdtiWjjmGRSm/K/uxZpmcBlM+YoeMB3VpOPXk3xa6+7zctg3LRbUzoimom5bwGrePF0jXReO6b4zNQ==}
    engines: {node: '>=14.0.0'}

  axios@1.7.4:
    resolution: {integrity: sha512-DukmaFRnY6AzAALSH4J2M3k6PkaC+MfaAGdEERRWcC9q3/TWQwLpHR8ZRLKTdQ3aBDL64EdluRDjJqKw+BPZEw==}

  axios@1.7.9:
    resolution: {integrity: sha512-LhLcE7Hbiryz8oMDdDptSrWowmB4Bl6RCt6sIJKpRB4XtVf0iEgewX3au/pJqm+Py1kCASkb/FFKjxQaLtxJvw==}

  b4a@1.6.7:
    resolution: {integrity: sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base-x@3.0.10:
    resolution: {integrity: sha512-7d0s06rR9rYaIWHkpfLIFICM/tkSVdoPC9qYAQRpxn9DdKNWNsKC0uk++akckyLq16Tx2WIinnZ6WRriAt6njQ==}

  base-x@4.0.0:
    resolution: {integrity: sha512-FuwxlW4H5kh37X/oW59pwTzzTKRzfrrQwhmyspRM7swOEZcHtDZSCt45U6oKgtuFE+WYPblePMVIPR4RZrh/hw==}

  base64-arraybuffer@1.0.2:
    resolution: {integrity: sha512-I3yl4r9QB5ZRY3XuJVEPfc2XhZO6YweFPI+UovAzn+8/hb3oJ6lnysaFcjVpkCPfVWFUDvoZ8kmVDP7WyRtYtQ==}
    engines: {node: '>= 0.6.0'}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  bech32@2.0.0:
    resolution: {integrity: sha512-LcknSilhIGatDAsY1ak2I8VtGaHNhgMSYVxFrGLXv+xLHytaKZKcaUJJUE7qmBr7h33o5YQwP55pMI0xmkpJwg==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  bindings@1.5.0:
    resolution: {integrity: sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==}

  bip174@2.1.1:
    resolution: {integrity: sha512-mdFV5+/v0XyNYXjBS6CQPLo9ekCx4gtKZFnJm5PMto7Fs9hTTDpkkzOB7/FtluRI6JbUUAu+snTYfJRgHLZbZQ==}
    engines: {node: '>=8.0.0'}

  bip32@4.0.0:
    resolution: {integrity: sha512-aOGy88DDlVUhspIXJN+dVEtclhIsfAUppD43V0j40cPTld3pv/0X/MlrZSZ6jowIaQQzFwP8M6rFU2z2mVYjDQ==}
    engines: {node: '>=6.0.0'}

  bitcoinjs-lib@6.1.7:
    resolution: {integrity: sha512-tlf/r2DGMbF7ky1MgUqXHzypYHakkEnm0SZP23CJKIqNY/5uNAnMbFhMJdhjrL/7anfb/U8+AlpdjPWjPnAalg==}
    engines: {node: '>=8.0.0'}

  blake2b-wasm@2.4.0:
    resolution: {integrity: sha512-S1kwmW2ZhZFFFOghcx73+ZajEfKBqhP82JMssxtLVMxlaPea1p9uoLiUZ5WYyHn0KddwbLc+0vh4wR0KBNoT5w==}

  blake2b@2.1.4:
    resolution: {integrity: sha512-AyBuuJNI64gIvwx13qiICz6H6hpmjvYS5DGkG6jbXMOT8Z3WUJ3V1X0FlhIoT1b/5JtHE3ki+xjtMvu1nn+t9A==}

  bloom-filters@3.0.4:
    resolution: {integrity: sha512-BdnPWo2OpYhlvuP2fRzJBdioMCkm7Zp0HCf8NJgF5Mbyqy7VQ/CnTiVWMMyq4EZCBHwj0Kq6098gW2/3RsZsrA==}
    engines: {node: '>=12'}

  bn.js@4.12.1:
    resolution: {integrity: sha512-k8TVBiPkPJT9uHLdOKfFpqcfprwBFOAAXXozRubr7R7PfIuKvQlzcI4M0pALeqXN09vdaMbUdUj+pass+uULAg==}

  bn.js@5.2.1:
    resolution: {integrity: sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ==}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  brorand@1.1.0:
    resolution: {integrity: sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==}

  browserify-bignum@1.3.0-2:
    resolution: {integrity: sha512-PwVvKC3WIV7ENfsG6VAIDq4R5st6kQt+Fod3WL5l7+MRONClo3J6xGQvRJHHM/ScwcNCH3GfYX5UOCuoNN/rLw==}

  browserslist@4.24.4:
    resolution: {integrity: sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  bs58@4.0.1:
    resolution: {integrity: sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==}

  bs58@5.0.0:
    resolution: {integrity: sha512-r+ihvQJvahgYT50JD05dyJNKlmmSlMoOGwn1lCcEzanPglg7TxYjioQUYehQ9mAR/+hOSd2jRc/Z2y5UxBymvQ==}

  bs58check@2.1.2:
    resolution: {integrity: sha512-0TS1jicxdU09dwJMNZtVAfzPi6Q6QeN0pM1Fkzrjn+XYHvzMKPU3pHVpva+769iNVSfIYWf7LJ6WR+BuuMf8cA==}

  bs58check@3.0.1:
    resolution: {integrity: sha512-hjuuJvoWEybo7Hn/0xOrczQKKEKD63WguEjlhLExYs2wUBcebDC1jDNK17eEAD2lYfw82d5ASC1d7K3SWszjaQ==}

  buffer-crc32@0.2.13:
    resolution: {integrity: sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  buffer@6.0.3:
    resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}

  bullmq@5.4.2:
    resolution: {integrity: sha512-dkR/KGUw18miLe3QWtvSlmGvEe08aZF+w1jZyqEHMWFW3RP4162qp6OGud0/QCAOjusiRI8UOxUhbnortPY+rA==}

  bundle@2.1.0:
    resolution: {integrity: sha512-d7TeT8m2HuymDjSEmMppWe/h5SSPPUZkaWKrAofx6gNXDdZ3FL/81oOTGPG+LIaZbNr9m4rtUi98Yw0Q1vHIIw==}

  bytes@3.1.0:
    resolution: {integrity: sha512-zauLjrfCG+xvoyaqLoV8bLVXXNGC4JqlxFCutSDWA6fJrTo2ZuvLYTqZ7aHBLZSMOopbzwv8f+wZcVzfVTI2Dg==}
    engines: {node: '>= 0.8'}

  cac@6.7.14:
    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
    engines: {node: '>=8'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camel-case@4.1.2:
    resolution: {integrity: sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==}

  camelcase-keys@7.0.2:
    resolution: {integrity: sha512-Rjs1H+A9R+Ig+4E/9oyB66UC5Mj9Xq3N//vcLf2WzgdTi/3gUu3Z9KoqmlrEG4VuuLK8wJHofxzdQXz/knhiYg==}
    engines: {node: '>=12'}

  camelcase@6.3.0:
    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
    engines: {node: '>=10'}

  caniuse-lite@1.0.30001699:
    resolution: {integrity: sha512-b+uH5BakXZ9Do9iK+CkDmctUSEqZl+SP056vc5usa0PL+ev5OHw003rZXcnjNDv3L8P5j6rwT6C0BPKSikW08w==}

  cbor-js@0.1.0:
    resolution: {integrity: sha512-7sQ/TvDZPl7csT1Sif9G0+MA0I0JOVah8+wWlJVQdVEgIbCzlN/ab3x+uvMNsc34TUvO6osQTAmB2ls80JX6tw==}

  chai@4.5.0:
    resolution: {integrity: sha512-RITGBfijLkBddZvnn8jdqoTypxvqbOLYQkGGxXzeFjVHvudaPw0HNFD9x928/eUwYWd2dPCugVqspGALTZZQKw==}
    engines: {node: '>=4'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.4.1:
    resolution: {integrity: sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  check-error@1.0.3:
    resolution: {integrity: sha512-iKEoDYaRmd1mxM90a2OEfWhjsjPpYPuQ+lMYsoxB126+t8fw7ySEO48nmDg5COTjxDI65/Y2OWpeEHk3ZOe8zg==}

  chokidar@3.3.1:
    resolution: {integrity: sha512-4QYCEWOcK3OJrxwvyyAOxFuhpvOVCYkr33LPfFNBjAD/w3sEzWsp2BUOkI4l9bHvWioAd0rc6NlHUOEaWkTeqg==}
    engines: {node: '>= 8.10.0'}

  chownr@1.1.4:
    resolution: {integrity: sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==}

  chownr@2.0.0:
    resolution: {integrity: sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==}
    engines: {node: '>=10'}

  cipher-base@1.0.6:
    resolution: {integrity: sha512-3Ek9H3X6pj5TgenXYtNWdaBon1tgYCaebd+XPg0keyjEbEfkD4KkmAxkQ/i1vYvxdcT5nscLBfq9VJRmCBcFSw==}
    engines: {node: '>= 0.10'}

  cjs-module-lexer@1.2.3:
    resolution: {integrity: sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==}

  cli-cursor@5.0.0:
    resolution: {integrity: sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==}
    engines: {node: '>=18'}

  cli-truncate@4.0.0:
    resolution: {integrity: sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==}
    engines: {node: '>=18'}

  cluster-key-slot@1.1.2:
    resolution: {integrity: sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==}
    engines: {node: '>=0.10.0'}

  code-block-writer@10.1.1:
    resolution: {integrity: sha512-67ueh2IRGst/51p0n6FvPrnRjAGHY5F8xdjkgrYE7DDzpJe6qA07RYQ9VcoUeo5ATOjSOiWpSL3SWBRRbempMw==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-support@1.1.3:
    resolution: {integrity: sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==}
    hasBin: true

  colorette@2.0.20:
    resolution: {integrity: sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@13.1.0:
    resolution: {integrity: sha512-/rFeCpNJQbhSZjGVwO9RFV3xPqbnERS8MmIQzCtD/zl6gpJuV/bMLuN92oG3F7d8oDEHHRrujSXNUr8fpjntKw==}
    engines: {node: '>=18'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  confbox@0.1.8:
    resolution: {integrity: sha512-RMtmw0iFkeR4YV+fUOSucriAQNb9g8zFR52MWCtl+cCZOFRNL6zeB395vPzFhEjjn4fMxXudmELnl/KF/WrK6w==}

  console-control-strings@1.1.0:
    resolution: {integrity: sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==}

  content-disposition@0.5.4:
    resolution: {integrity: sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==}
    engines: {node: '>= 0.6'}

  content-type@1.0.4:
    resolution: {integrity: sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==}
    engines: {node: '>= 0.6'}

  convert-hrtime@3.0.0:
    resolution: {integrity: sha512-7V+KqSvMiHp8yWDuwfww06XleMWVVB9b9tURBx+G7UTADuo5hYPuowKloz4OzOqbPezxgo+fdQ1522WzPG4OeA==}
    engines: {node: '>=8'}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cookie@0.7.2:
    resolution: {integrity: sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==}
    engines: {node: '>= 0.6'}

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  crc@4.3.2:
    resolution: {integrity: sha512-uGDHf4KLLh2zsHa8D8hIQ1H/HtFQhyHrc0uhHBcoKGol/Xnb+MPYfUMw7cvON6ze/GUESTudKayDcJC5HnJv1A==}
    engines: {node: '>=12'}
    peerDependencies:
      buffer: '>=6.0.3'
    peerDependenciesMeta:
      buffer:
        optional: true

  create-hash@1.2.0:
    resolution: {integrity: sha512-z00bCGNHDG8mHAkP7CtT1qVu+bFQUPjYq/4Iv3C3kWjTFV10zIjfSoeqXo9Asws8gwSHDGj/hl2u4OGIjapeCg==}

  create-require@1.1.1:
    resolution: {integrity: sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==}

  cron-parser@4.9.0:
    resolution: {integrity: sha512-p0SaNjrHOnQeR8/VnfGbmg9te2kfyYSQ7Sc/j/6DtPL3JQvKxmjO9TSjNFpujqV3vEYYBvNNvXSxzyksBWAx1Q==}
    engines: {node: '>=12.0.0'}

  cron@2.4.4:
    resolution: {integrity: sha512-MHlPImXJj3K7x7lyUHjtKEOl69CSlTOWxS89jiFgNkzXfvhVjhMz/nc7/EIfN9vgooZp8XTtXJ1FREdmbyXOiQ==}

  cross-env@7.0.3:
    resolution: {integrity: sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==}
    engines: {node: '>=10.14', npm: '>=6', yarn: '>=1'}
    hasBin: true

  cross-fetch@3.2.0:
    resolution: {integrity: sha512-Q+xVJLoGOeIMXZmbUK4HYk+69cQH6LudR0Vu/pRm2YlU/hDV9CiS0gKUMaWY5f2NeUH9C1nV3bsTlCo0FsTV1Q==}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  cuint@0.2.2:
    resolution: {integrity: sha512-d4ZVpCW31eWwCMe1YT3ur7mUDnTXbgwyzaL320DrcRT45rfjYxkt5QWLrmOJ+/UEAI2+fQgKe/fCjR8l4TpRgw==}

  dateformat@4.6.3:
    resolution: {integrity: sha512-2P0p0pFGzHS5EMnhdxQi7aJN+iMheud0UhG4dlE1DLAlvL8JHjJJTX/CSm4JXwV0Ka5nGk3zC5mcb5bUQUxxMA==}

  debug@4.1.1:
    resolution: {integrity: sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==}
    deprecated: Debug versions >=3.2.0 <3.2.7 || >=4 <4.3.1 have a low-severity ReDos regression when used in a Node.js environment. It is recommended you upgrade to 3.2.7 or 4.3.1. (https://github.com/visionmedia/debug/issues/797)
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.0:
    resolution: {integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  deep-eql@4.1.4:
    resolution: {integrity: sha512-SUwdGfqdKOwxCPeVYjwSyRpJ7Z+fhpwIAtmCUdZIWZ/YP5R9WAsyuSgpLVDi9bjWoN2LXHNss/dk3urXtdQxGg==}
    engines: {node: '>=6'}

  deep-freeze-strict@1.1.1:
    resolution: {integrity: sha512-QemROZMM2IvhAcCFvahdX2Vbm4S/txeq5rFYU9fh4mQP79WTMW5c/HkQ2ICl1zuzcDZdPZ6zarDxQeQMsVYoNA==}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  delegates@1.0.0:
    resolution: {integrity: sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==}

  denque@2.1.0:
    resolution: {integrity: sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==}
    engines: {node: '>=0.10'}

  depd@1.1.2:
    resolution: {integrity: sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==}
    engines: {node: '>= 0.6'}

  depd@2.0.0:
    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}
    engines: {node: '>= 0.8'}

  detect-libc@2.0.3:
    resolution: {integrity: sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==}
    engines: {node: '>=8'}

  diff-sequences@29.6.3:
    resolution: {integrity: sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  diff@4.0.2:
    resolution: {integrity: sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==}
    engines: {node: '>=0.3.1'}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  doctrine@3.0.0:
    resolution: {integrity: sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==}
    engines: {node: '>=6.0.0'}

  dotenv@16.4.7:
    resolution: {integrity: sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==}
    engines: {node: '>=12'}

  duplexify@3.7.1:
    resolution: {integrity: sha512-07z8uv2wMyS51kKhD1KsdXJg5WQ6t93RneqRxUHnskXVtlYYkLqM0gqStQZ3pj073g687jPCHrqNfCzawLYh5g==}

  duplexify@4.1.3:
    resolution: {integrity: sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  ecdsa-sig-formatter@1.0.11:
    resolution: {integrity: sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==}

  ecpair@2.1.0:
    resolution: {integrity: sha512-cL/mh3MtJutFOvFc27GPZE2pWL3a3k4YvzUWEOvilnfZVlH3Jwgx/7d6tlD7/75tNk8TG2m+7Kgtz0SI1tWcqw==}
    engines: {node: '>=8.0.0'}

  edge-runtime@2.5.9:
    resolution: {integrity: sha512-pk+k0oK0PVXdlT4oRp4lwh+unuKB7Ng4iZ2HB+EZ7QCEQizX360Rp/F4aRpgpRgdP2ufB35N+1KppHmYjqIGSg==}
    engines: {node: '>=16'}
    hasBin: true

  electron-to-chromium@1.5.99:
    resolution: {integrity: sha512-77c/+fCyL2U+aOyqfIFi89wYLBeSTCs55xCZL0oFH0KjqsvSvyh6AdQ+UIl1vgpnQQE6g+/KK8hOIupH6VwPtg==}

  elliptic@6.6.1:
    resolution: {integrity: sha512-RaddvvMatK2LJHqFJ+YA4WysVN5Ita9E35botqIYspQ4TkRAlCicdzKOjlyv/1Za5RyTNn7di//eEV0uTAfe3g==}

  emoji-regex@10.4.0:
    resolution: {integrity: sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  end-of-stream@1.1.0:
    resolution: {integrity: sha512-EoulkdKF/1xa92q25PbjuDcgJ9RDHYU2Rs3SCIvs2/dSQ3BpmxneNHmA/M7fe60M3PrV7nNGTTNbkK62l6vXiQ==}

  end-of-stream@1.4.4:
    resolution: {integrity: sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==}

  environment@1.1.0:
    resolution: {integrity: sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==}
    engines: {node: '>=18'}

  es-module-lexer@1.4.1:
    resolution: {integrity: sha512-cXLGjP0c4T3flZJKQSuziYoq7MlT+rnvfZjfp7h+I7K9BNX54kP9nyWvdbwjQ4u1iWbOL4u96fgeZLToQlZC7w==}

  esbuild-android-64@0.14.47:
    resolution: {integrity: sha512-R13Bd9+tqLVFndncMHssZrPWe6/0Kpv2/dt4aA69soX4PRxlzsVpCvoJeFE8sOEoeVEiBkI0myjlkDodXlHa0g==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  esbuild-android-arm64@0.14.47:
    resolution: {integrity: sha512-OkwOjj7ts4lBp/TL6hdd8HftIzOy/pdtbrNA4+0oVWgGG64HrdVzAF5gxtJufAPOsEjkyh1oIYvKAUinKKQRSQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  esbuild-darwin-64@0.14.47:
    resolution: {integrity: sha512-R6oaW0y5/u6Eccti/TS6c/2c1xYTb1izwK3gajJwi4vIfNs1s8B1dQzI1UiC9T61YovOQVuePDcfqHLT3mUZJA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  esbuild-darwin-arm64@0.14.47:
    resolution: {integrity: sha512-seCmearlQyvdvM/noz1L9+qblC5vcBrhUaOoLEDDoLInF/VQ9IkobGiLlyTPYP5dW1YD4LXhtBgOyevoIHGGnw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  esbuild-freebsd-64@0.14.47:
    resolution: {integrity: sha512-ZH8K2Q8/Ux5kXXvQMDsJcxvkIwut69KVrYQhza/ptkW50DC089bCVrJZZ3sKzIoOx+YPTrmsZvqeZERjyYrlvQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  esbuild-freebsd-arm64@0.14.47:
    resolution: {integrity: sha512-ZJMQAJQsIOhn3XTm7MPQfCzEu5b9STNC+s90zMWe2afy9EwnHV7Ov7ohEMv2lyWlc2pjqLW8QJnz2r0KZmeAEQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  esbuild-linux-32@0.14.47:
    resolution: {integrity: sha512-FxZOCKoEDPRYvq300lsWCTv1kcHgiiZfNrPtEhFAiqD7QZaXrad8LxyJ8fXGcWzIFzRiYZVtB3ttvITBvAFhKw==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  esbuild-linux-64@0.14.47:
    resolution: {integrity: sha512-nFNOk9vWVfvWYF9YNYksZptgQAdstnDCMtR6m42l5Wfugbzu11VpMCY9XrD4yFxvPo9zmzcoUL/88y0lfJZJJw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  esbuild-linux-arm64@0.14.47:
    resolution: {integrity: sha512-ywfme6HVrhWcevzmsufjd4iT3PxTfCX9HOdxA7Hd+/ZM23Y9nXeb+vG6AyA6jgq/JovkcqRHcL9XwRNpWG6XRw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  esbuild-linux-arm@0.14.47:
    resolution: {integrity: sha512-ZGE1Bqg/gPRXrBpgpvH81tQHpiaGxa8c9Rx/XOylkIl2ypLuOcawXEAo8ls+5DFCcRGt/o3sV+PzpAFZobOsmA==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  esbuild-linux-mips64le@0.14.47:
    resolution: {integrity: sha512-mg3D8YndZ1LvUiEdDYR3OsmeyAew4MA/dvaEJxvyygahWmpv1SlEEnhEZlhPokjsUMfRagzsEF/d/2XF+kTQGg==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  esbuild-linux-ppc64le@0.14.47:
    resolution: {integrity: sha512-WER+f3+szmnZiWoK6AsrTKGoJoErG2LlauSmk73LEZFQ/iWC+KhhDsOkn1xBUpzXWsxN9THmQFltLoaFEH8F8w==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  esbuild-linux-riscv64@0.14.47:
    resolution: {integrity: sha512-1fI6bP3A3rvI9BsaaXbMoaOjLE3lVkJtLxsgLHqlBhLlBVY7UqffWBvkrX/9zfPhhVMd9ZRFiaqXnB1T7BsL2g==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  esbuild-linux-s390x@0.14.47:
    resolution: {integrity: sha512-eZrWzy0xFAhki1CWRGnhsHVz7IlSKX6yT2tj2Eg8lhAwlRE5E96Hsb0M1mPSE1dHGpt1QVwwVivXIAacF/G6mw==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  esbuild-netbsd-64@0.14.47:
    resolution: {integrity: sha512-Qjdjr+KQQVH5Q2Q1r6HBYswFTToPpss3gqCiSw2Fpq/ua8+eXSQyAMG+UvULPqXceOwpnPo4smyZyHdlkcPppQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  esbuild-openbsd-64@0.14.47:
    resolution: {integrity: sha512-QpgN8ofL7B9z8g5zZqJE+eFvD1LehRlxr25PBkjyyasakm4599iroUpaj96rdqRlO2ShuyqwJdr+oNqWwTUmQw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  esbuild-sunos-64@0.14.47:
    resolution: {integrity: sha512-uOeSgLUwukLioAJOiGYm3kNl+1wJjgJA8R671GYgcPgCx7QR73zfvYqXFFcIO93/nBdIbt5hd8RItqbbf3HtAQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  esbuild-windows-32@0.14.47:
    resolution: {integrity: sha512-H0fWsLTp2WBfKLBgwYT4OTfFly4Im/8B5f3ojDv1Kx//kiubVY0IQunP2Koc/fr/0wI7hj3IiBDbSrmKlrNgLQ==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  esbuild-windows-64@0.14.47:
    resolution: {integrity: sha512-/Pk5jIEH34T68r8PweKRi77W49KwanZ8X6lr3vDAtOlH5EumPE4pBHqkCUdELanvsT14yMXLQ/C/8XPi1pAtkQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  esbuild-windows-arm64@0.14.47:
    resolution: {integrity: sha512-HFSW2lnp62fl86/qPQlqw6asIwCnEsEoNIL1h2uVMgakddf+vUuMcCbtUY1i8sst7KkgHrVKCJQB33YhhOweCQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  esbuild@0.14.47:
    resolution: {integrity: sha512-wI4ZiIfFxpkuxB8ju4MHrGwGLyp1+awEHAHVpx6w7a+1pmYIq8T9FGEVVwFo0iFierDoMj++Xq69GXWYn2EiwA==}
    engines: {node: '>=12'}
    hasBin: true

  esbuild@0.21.5:
    resolution: {integrity: sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==}
    engines: {node: '>=12'}
    hasBin: true

  esbuild@0.23.1:
    resolution: {integrity: sha512-VVNz/9Sa0bs5SELtn3f7qhJCDPCF5oMEl5cO9/SSinpE9hbPVvxbd572HH5AKiP7WD8INO53GgfDDhRjkylHEg==}
    engines: {node: '>=18'}
    hasBin: true

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-html@1.0.3:
    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-scope@7.2.2:
    resolution: {integrity: sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint@8.57.1:
    resolution: {integrity: sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    deprecated: This version is no longer supported. Please see https://eslint.org/version-support for other options.
    hasBin: true

  espree@9.6.1:
    resolution: {integrity: sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-walker@2.0.2:
    resolution: {integrity: sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==}

  estree-walker@3.0.3:
    resolution: {integrity: sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  etag@1.8.1:
    resolution: {integrity: sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==}
    engines: {node: '>= 0.6'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  eventemitter3@5.0.1:
    resolution: {integrity: sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==}

  events-intercept@2.0.0:
    resolution: {integrity: sha512-blk1va0zol9QOrdZt0rFXo5KMkNPVSp92Eju/Qz8THwKWKRKeE0T8Br/1aW6+Edkyq9xHYgYxn2QtOnUKPUp+Q==}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  execa@3.2.0:
    resolution: {integrity: sha512-kJJfVbI/lZE1PZYDI5VPxp8zXPO9rtxOkhpZ0jMKha56AI9y2gGVC6bkukStQf0ka5Rh15BA5m7cCCH4jmHqkw==}
    engines: {node: ^8.12.0 || >=9.7.0}

  execa@8.0.1:
    resolution: {integrity: sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==}
    engines: {node: '>=16.17'}

  fast-content-type-parse@1.1.0:
    resolution: {integrity: sha512-fBHHqSTFLVnR61C+gltJuE5GkVQMV0S2nqUO8TJ+5Z3qAKG8vAx4FKai1s5jq/inV1+sREynIWSuQ6HgoSXpDQ==}

  fast-copy@3.0.2:
    resolution: {integrity: sha512-dl0O9Vhju8IrcLndv2eU4ldt1ftXMqqfgN4H1cpmGV7P6jeB9FwpN9a2c8DPGE1Ys88rNUJVYDHq73CGAGOPfQ==}

  fast-decode-uri-component@1.0.1:
    resolution: {integrity: sha512-WKgKWg5eUxvRZGwW8FvfbaH7AXSh2cL+3j5fMGzUMCxWBJ3dV3a7Wz8y2f/uQ0e3B6WmodD3oS54jTQ9HVTIIg==}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-glob@3.3.3:
    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-json-stringify@5.16.1:
    resolution: {integrity: sha512-KAdnLvy1yu/XrRtP+LJnxbBGrhN+xXu+gt3EUvZhYGKCr3lFHq/7UFJHHFgmJKoqlh6B40bZLEv7w46B0mqn1g==}

  fast-jwt@4.0.5:
    resolution: {integrity: sha512-QnpNdn0955GT7SlT8iMgYfhTsityUWysrQjM+Q7bGFijLp6+TNWzlbSMPvgalbrQGRg4ZaHZgMcns5fYOm5avg==}
    engines: {node: '>=16'}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fast-querystring@1.1.2:
    resolution: {integrity: sha512-g6KuKWmFXc0fID8WWH0jit4g0AGBoJhCkJMb1RmbsSEUNvQ+ZC8D6CUZ+GtF8nMzSPXnhiePyyqqipzNNEnHjg==}

  fast-redact@3.5.0:
    resolution: {integrity: sha512-dwsoQlS7h9hMeYUq1W++23NDcBLV4KqONnITDV9DjfS3q1SgDGVrBdvvTLUotWtPSD7asWDV9/CmsZPy8Hf70A==}
    engines: {node: '>=6'}

  fast-safe-stringify@2.1.1:
    resolution: {integrity: sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==}

  fast-uri@2.4.0:
    resolution: {integrity: sha512-ypuAmmMKInk5q7XcepxlnUWDLWv4GFtaJqAzWKqn62IpQ3pejtr5dTVbt3vwqVaMKmkNR55sTT+CqUKIaT21BA==}

  fast-uri@3.0.6:
    resolution: {integrity: sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==}

  fastfall@1.5.1:
    resolution: {integrity: sha512-KH6p+Z8AKPXnmA7+Iz2Lh8ARCMr+8WNPVludm1LGkZoD2MjY6LVnRMtTKhkdzI+jr0RzQWXKzKyBJm1zoHEL4Q==}
    engines: {node: '>=0.10.0'}

  fastify-cron@1.3.1:
    resolution: {integrity: sha512-BgOUeyu2HAJcNnL+8XnAcVLt1AMeN/SnCGTG4wDlHNFfUo/5RRnFYW8uRy3ZFpa0g43Q6ko5zdP+q1SWq8ui2Q==}
    peerDependencies:
      fastify: ^4.1.0

  fastify-custom-healthcheck@3.1.0:
    resolution: {integrity: sha512-BC/TcV1G6CQiLbwl1dCqJW5jVN8fl2Gsfxip5GeeB5SQe6fjKfRMxkOcPIEyj7u0kL0+oQYW1V5pOBzviMiCFQ==}

  fastify-plugin@3.0.1:
    resolution: {integrity: sha512-qKcDXmuZadJqdTm6vlCqioEbyewF60b/0LOFCcYN1B6BIZGlYJumWWOYs70SFYLDAH4YqdE1cxH/RKMG7rFxgA==}

  fastify-plugin@4.5.1:
    resolution: {integrity: sha512-stRHYGeuqpEZTL1Ef0Ovr2ltazUT9g844X5z/zEBFLG8RYlpDiOCIG+ATvYEp+/zmc7sN29mcIMp8gvYplYPIQ==}

  fastify-type-provider-zod@1.2.0:
    resolution: {integrity: sha512-2zkPEWFIBYzkGQ0kmn8gOW5tlQOmdDWn5edF5LQ2r0RiydFGhD86FVZX6wLraXAmdFm8P1CMmo19lwlGb0mZrA==}
    peerDependencies:
      fastify: ^4.0.0
      zod: ^3.14.2

  fastify@4.29.0:
    resolution: {integrity: sha512-MaaUHUGcCgC8fXQDsDtioaCcag1fmPJ9j64vAKunqZF4aSub040ZGi/ag8NGE2714yREPOKZuHCfpPzuUD3UQQ==}

  fastparallel@2.4.1:
    resolution: {integrity: sha512-qUmhxPgNHmvRjZKBFUNI0oZuuH9OlSIOXmJ98lhKPxMZZ7zS/Fi0wRHOihDSz0R1YiIOjxzOY4bq65YTcdBi2Q==}

  fastq@1.19.0:
    resolution: {integrity: sha512-7SFSRCNjBQIZH/xZR3iy5iQYR8aGBE0h3VG6/cwlbrpdciNYBMotQav8c1XI3HjHH+NikUpP53nPdlZSdWmFzA==}

  fastseries@1.7.2:
    resolution: {integrity: sha512-dTPFrPGS8SNSzAt7u/CbMKCJ3s01N04s4JFbORHcmyvVfVKmbhMD1VtRbh5enGHxkaQDqWyLefiKOGGmohGDDQ==}

  fd-slicer@1.1.0:
    resolution: {integrity: sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==}

  fflate@0.8.2:
    resolution: {integrity: sha512-cPJU47OaAoCbg0pBvzsgpTPhmhqI5eJjh/JIu8tPj5q+T7iLvW/JAYUqmE7KOB4R1ZyEhzBaIQpQpardBF5z8A==}

  file-entry-cache@6.0.1:
    resolution: {integrity: sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==}
    engines: {node: ^10.12.0 || >=12.0.0}

  file-uri-to-path@1.0.0:
    resolution: {integrity: sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-my-way@8.2.2:
    resolution: {integrity: sha512-Dobi7gcTEq8yszimcfp/R7+owiT4WncAJ7VTTgFH1jYJ5GaG1FbhjwDG820hptN0QDFvzVY3RfCzdInvGPGzjA==}
    engines: {node: '>=14'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@3.2.0:
    resolution: {integrity: sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==}
    engines: {node: ^10.12.0 || >=12.0.0}

  flatted@3.3.2:
    resolution: {integrity: sha512-AiwGJM8YcNOaobumgtng+6NHuOqC3A7MixFeDafM3X9cIUM+xUXoS5Vfgf+OihAYe20fxqNM9yPBXJzRtZ/4eA==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  foreground-child@3.3.0:
    resolution: {integrity: sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==}
    engines: {node: '>=14'}

  form-data@4.0.1:
    resolution: {integrity: sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==}
    engines: {node: '>= 6'}

  forwarded@0.2.0:
    resolution: {integrity: sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==}
    engines: {node: '>= 0.6'}

  fs-extra@11.1.0:
    resolution: {integrity: sha512-0rcTq621PD5jM/e0a3EJoGC/1TC5ZBCERW82LQuwfGnCa1V8w7dpYH1yNu+SLb6E5dkeCBzKEyLGlFrnr+dUyw==}
    engines: {node: '>=14.14'}

  fs-extra@8.1.0:
    resolution: {integrity: sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==}
    engines: {node: '>=6 <7 || >=8'}

  fs-minipass@1.2.7:
    resolution: {integrity: sha512-GWSSJGFy4e9GUeCcbIkED+bgAoFyj7XF1mV8rma3QW4NIqX9Kyx79N/PF61H5udOV3aY1IaMLs6pGbH71nlCTA==}

  fs-minipass@2.1.0:
    resolution: {integrity: sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==}
    engines: {node: '>= 8'}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.1.3:
    resolution: {integrity: sha512-Auw9a4AxqWpa9GUfj370BMPzzyncfBABW8Mab7BGWBYDj4Isgq+cDKtx0i6u9jcX9pQDnswsaaOTgTmA5pEjuQ==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  gauge@3.0.2:
    resolution: {integrity: sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==}
    engines: {node: '>=10'}
    deprecated: This package is no longer supported.

  generic-pool@3.4.2:
    resolution: {integrity: sha512-H7cUpwCQSiJmAHM4c/aFu6fUfrhWXW1ncyh8ftxEPMu6AiYkHw9K8br720TGPZJbk5eOH2bynjZD1yPvdDAmag==}
    engines: {node: '>= 4'}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-east-asian-width@1.3.0:
    resolution: {integrity: sha512-vpeMIQKxczTD/0s2CdEWHcb0eeJe6TFjxb+J5xgX7hScxqrGuyjmv4c1D4A/gelKfyox0gJJwIHF+fLjeaM8kQ==}
    engines: {node: '>=18'}

  get-func-name@2.0.2:
    resolution: {integrity: sha512-8vXOvuE167CtIc3OyItco7N/dpRtBbYOsPsXCz7X/PMnlGjYjSGuZJgM1Y7mmew7BKf9BqvLX2tnOVy1BBUsxQ==}

  get-stream@5.2.0:
    resolution: {integrity: sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==}
    engines: {node: '>=8'}

  get-stream@8.0.1:
    resolution: {integrity: sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==}
    engines: {node: '>=16'}

  get-tsconfig@4.10.0:
    resolution: {integrity: sha512-kGzZ3LWWQcGIAmg6iWvXn0ei6WDtV26wzHRMwDSzmAbcXrTEXxHy6IehI6/4eT6VRKyMP1eF1VqwrVUmE/LR7A==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  globals@13.24.0:
    resolution: {integrity: sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==}
    engines: {node: '>=8'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-unicode@2.0.1:
    resolution: {integrity: sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==}

  hash-base@3.1.0:
    resolution: {integrity: sha512-1nmYp/rhMDiE7AYkDw+lLwlAzz0AntGIe51F3RfFfEqyQ3feY2eI/NcwC6umIQVOASPMsWJLJScWKSSvzL9IVA==}
    engines: {node: '>=4'}

  hash.js@1.1.7:
    resolution: {integrity: sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==}

  help-me@5.0.0:
    resolution: {integrity: sha512-7xgomUX6ADmcYzFik0HzAxh/73YlKR9bmFzf51CZwR+b6YtzU2m0u49hQCqV6SvlqIqsaxovfwdvbnsw3b/zpg==}

  hmac-drbg@1.0.1:
    resolution: {integrity: sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  http-errors@1.4.0:
    resolution: {integrity: sha512-oLjPqve1tuOl5aRhv8GK5eHpqP1C9fb+Ol+XTLjKfLltE44zdDbEdjPSbU7Ch5rSNsVFqZn97SrMmZLdu1/YMw==}
    engines: {node: '>= 0.6'}

  http-errors@1.7.3:
    resolution: {integrity: sha512-ZTTX0MWrsQ2ZAhA1cejAwDLycFsd7I7nVtnkT3Ol0aqodaKW+0CTZDQ1uBv5whptCnc8e8HeRRJxRs0kmm/Qfw==}
    engines: {node: '>= 0.6'}

  http-errors@2.0.0:
    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}
    engines: {node: '>= 0.8'}

  https-proxy-agent@5.0.1:
    resolution: {integrity: sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==}
    engines: {node: '>= 6'}

  human-signals@1.1.1:
    resolution: {integrity: sha512-SEQu7vl8KjNL2eoGBLF3+wAjpsNfA9XMlXAYj/3EdaNfAlxKthD1xjEQfGOUhllCGGJVNY34bRr6lPINhNjyZw==}
    engines: {node: '>=8.12.0'}

  human-signals@5.0.0:
    resolution: {integrity: sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==}
    engines: {node: '>=16.17.0'}

  iconv-lite@0.4.24:
    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}
    engines: {node: '>=0.10.0'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  immediate@3.0.6:
    resolution: {integrity: sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==}

  immutable@4.3.7:
    resolution: {integrity: sha512-1hqclzwYwjRDFLjcFxOM5AYkkG0rpFPpr1RLPMEuGczoS7YA8gLhy8SWXYRAA/XwfEHpfo3cw5JGioS32fnMRw==}

  import-fresh@3.3.1:
    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}
    engines: {node: '>=6'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.1:
    resolution: {integrity: sha512-8nWq2nLTAwd02jTqJExUYFSD/fKq6VH9Y/oG2accc/kdI0V98Bag8d5a4gi3XHz73rDWa2PvTtvcWYquKqSENA==}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ioredis@5.5.0:
    resolution: {integrity: sha512-7CutT89g23FfSa8MDoIFs2GYYa0PaNiW/OrT+nRyjRXHDZd17HmIgy+reOQ/yhh72NznNjGuS8kbCAcA4Ro4mw==}
    engines: {node: '>=12.22.0'}

  ipaddr.js@1.9.1:
    resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}
    engines: {node: '>= 0.10'}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-buffer@2.0.5:
    resolution: {integrity: sha512-i2R6zNFDwgEHJyQUtJEk0XFi1i0dPFn/oqjK3/vPCcDeJvW5NQ83V8QbicfF1SupOaB0h8ntgBC2YiE7dfyctQ==}
    engines: {node: '>=4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-fullwidth-code-point@4.0.0:
    resolution: {integrity: sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==}
    engines: {node: '>=12'}

  is-fullwidth-code-point@5.0.0:
    resolution: {integrity: sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==}
    engines: {node: '>=18'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-stream@3.0.0:
    resolution: {integrity: sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  isarray@0.0.1:
    resolution: {integrity: sha512-D2S+3GLxWH+uhrNEcoh/fnmYeP8E8/zHl644d/jdA0g2uyXvy3sb0qxotE+ne0LtccHknQzWwZEzhak7oJ0COQ==}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  istanbul-lib-coverage@3.2.2:
    resolution: {integrity: sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@6.0.3:
    resolution: {integrity: sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==}
    engines: {node: '>=10'}

  istanbul-lib-report@3.0.1:
    resolution: {integrity: sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==}
    engines: {node: '>=10'}

  istanbul-lib-source-maps@5.0.6:
    resolution: {integrity: sha512-yg2d+Em4KizZC5niWhQaIomgf5WlL4vOOjZ5xGCmF8SnPE/mDWWXgvRExdcpCgh9lLRRa1/fSYp2ymmbJ1pI+A==}
    engines: {node: '>=10'}

  istanbul-reports@3.1.7:
    resolution: {integrity: sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==}
    engines: {node: '>=8'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  joycon@3.1.1:
    resolution: {integrity: sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==}
    engines: {node: '>=10'}

  js-sha256@0.11.0:
    resolution: {integrity: sha512-6xNlKayMZvds9h1Y1VWc0fQHQ82BxTXizWPEtEeGvmOUYpBRy4gbWroHLpzowe6xiQhHpelCQiE7HEdznyBL9Q==}

  js-sha512@0.9.0:
    resolution: {integrity: sha512-mirki9WS/SUahm+1TbAPkqvbCiCfOAAsyXeHxK1UkullnJVVqoJG2pL9ObvT05CN+tM7fxhfYm0NbXn+1hWoZg==}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-tokens@9.0.1:
    resolution: {integrity: sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==}

  js-xxhash@1.0.4:
    resolution: {integrity: sha512-S/6Oo7ruxx5k8m4qlMnbpwQdJjRsvvfcIhIk1dA9c5y5GNhYHKYKu9krEK3QgBax6CxJuf4gRL2opgLkdzWIKg==}
    engines: {node: '>=8.0.0'}

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsbi@3.1.3:
    resolution: {integrity: sha512-nBJqA0C6Qns+ZxurbEoIR56wyjiUszpNy70FHvxO5ervMoCbZVE3z3kxr5nKGhlxr/9MhKTSUBs7cAwwuf3g9w==}

  jsbi@4.3.0:
    resolution: {integrity: sha512-SnZNcinB4RIcnEyZqFPdGPVgrg2AcnykiBy0sHVJQKHYeaLUvi3Exj+iaPpLnFVkDPZIV4U0yvgC9/R4uEAZ9g==}

  jsesc@3.1.0:
    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-schema-ref-resolver@1.0.1:
    resolution: {integrity: sha512-EJAj1pgHc1hxF6vo2Z3s69fMjO1INq6eGHXZ8Z6wCQeldCuwxGK9Sxf4/cScGn3FZubCVUehfWtcDM/PLteCQw==}

  json-schema-resolver@2.0.0:
    resolution: {integrity: sha512-pJ4XLQP4Q9HTxl6RVDLJ8Cyh1uitSs0CzDBAz1uoJ4sRD/Bk7cFSXL1FUXDW3zJ7YnfliJx6eu8Jn283bpZ4Yg==}
    engines: {node: '>=10'}

  json-schema-to-ts@1.6.4:
    resolution: {integrity: sha512-pR4yQ9DHz6itqswtHCm26mw45FSNfQ9rEQjosaZErhn5J3J2sIViQiz8rDaezjKAhFGpmsoczYVBgGHzFw/stA==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema-traverse@1.0.0:
    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsonfile@4.0.0:
    resolution: {integrity: sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==}

  jsonfile@6.1.0:
    resolution: {integrity: sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==}

  jssha@3.3.1:
    resolution: {integrity: sha512-VCMZj12FCFMQYcFLPRm/0lOBbLi8uM2BhXPTqw3U4YAfs4AZfiApOoBLoN8cQE60Z50m1MYMTQVCfgF/KaCVhQ==}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lie@3.1.1:
    resolution: {integrity: sha512-RiNhHysUjhrDQntfYSfY4MU24coXXdEOgw9WGcKHNeEwffDYbF//u87M1EWaMGzuFoSbqW0C9C6lEEhDOAswfw==}

  light-my-request@5.14.0:
    resolution: {integrity: sha512-aORPWntbpH5esaYpGOOmri0OHDOe3wC5M2MQxZ9dvMLZm6DnaAn0kJlcbU9hwsQgLzmZyReKwFwwPkR+nHu5kA==}

  lilconfig@3.1.3:
    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
    engines: {node: '>=14'}

  lint-staged@15.4.3:
    resolution: {integrity: sha512-FoH1vOeouNh1pw+90S+cnuoFwRfUD9ijY2GKy5h7HS3OR7JVir2N2xrsa0+Twc1B7cW72L+88geG5cW4wIhn7g==}
    engines: {node: '>=18.12.0'}
    hasBin: true

  listr2@8.2.5:
    resolution: {integrity: sha512-iyAZCeyD+c1gPyE9qpFu8af0Y+MRtmKOncdGoA2S5EY8iFq99dmmvkNnHiWo+pj0s7yH7l3KPIgee77tKpXPWQ==}
    engines: {node: '>=18.0.0'}

  local-pkg@0.5.1:
    resolution: {integrity: sha512-9rrA30MRRP3gBD3HTGnC6cDFpaE1kVDWxWgqWJUN0RvDNAo+Nz/9GxB+nHOH0ifbVFy0hSA1V6vFDvnx54lTEQ==}
    engines: {node: '>=14'}

  localforage@1.10.0:
    resolution: {integrity: sha512-14/H1aX7hzBBmmh7sGPd+AOMkkIrHM3Z1PAyGgZigA1H1p5O5ANnMyWzvpAETtG68/dC4pC0ncy3+PPGzXZHPg==}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.defaults@4.2.0:
    resolution: {integrity: sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==}

  lodash.isarguments@3.1.0:
    resolution: {integrity: sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg==}

  lodash.isequal@4.5.0:
    resolution: {integrity: sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==}
    deprecated: This package is deprecated. Use require('node:util').isDeepStrictEqual instead.

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  log-update@6.1.0:
    resolution: {integrity: sha512-9ie8ItPR6tjY5uYJh8K/Zrv/RMZ5VOlOWvtZdEHYSTFKZfIBPQa9tOAEeAWhd+AnIneLJ22w5fjOYtoutpWq5w==}
    engines: {node: '>=18'}

  long@5.3.0:
    resolution: {integrity: sha512-5vvY5yF1zF/kXk+L94FRiTDa1Znom46UjPCH6/XbSvS8zBKMFBHTJk8KDMqJ+2J6QezQFi7k1k8v21ClJYHPaw==}

  loupe@2.3.7:
    resolution: {integrity: sha512-zSMINGVYkdpYSOBmLi0D1Uo7JU9nVdQKrHxC8eYlV+9YKK9WePqAlL7lSlorG/U2Fw1w0hTBmaa/jrQ3UbPHtA==}

  lower-case@2.0.2:
    resolution: {integrity: sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lru-cache@6.0.0:
    resolution: {integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==}
    engines: {node: '>=10'}

  luxon@3.3.0:
    resolution: {integrity: sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg==}
    engines: {node: '>=12'}

  luxon@3.5.0:
    resolution: {integrity: sha512-rh+Zjr6DNfUYR3bPwJEnuwDdqMbxZW7LOQfUN4B54+Cl+0o5zaU9RJ6bcidfDtC1cWCZXQ+nvX8bf6bAji37QQ==}
    engines: {node: '>=12'}

  magic-string@0.30.17:
    resolution: {integrity: sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==}

  magicast@0.3.5:
    resolution: {integrity: sha512-L0WhttDl+2BOsybvEOLK7fW3UA0OQ0IQ2d6Zl2x/a6vVRs3bAY0ECOSHHeL5jD+SbOpOCUEi0y1DgHEn9Qn1AQ==}

  make-dir@3.1.0:
    resolution: {integrity: sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==}
    engines: {node: '>=8'}

  make-dir@4.0.0:
    resolution: {integrity: sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==}
    engines: {node: '>=10'}

  make-error@1.3.6:
    resolution: {integrity: sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==}

  map-obj@4.3.0:
    resolution: {integrity: sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ==}
    engines: {node: '>=8'}

  md5.js@1.3.5:
    resolution: {integrity: sha512-xitP+WxNPcTTOgnTJcrhM0xvdPepipPSf3I8EIpGKeFLjt3PlJLIDG3u8EX53ZIubkb+5U2+3rELYpEhHhzdkg==}

  media-typer@0.3.0:
    resolution: {integrity: sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==}
    engines: {node: '>= 0.6'}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micro@9.3.5-canary.3:
    resolution: {integrity: sha512-viYIo9PefV+w9dvoIBh1gI44Mvx1BOk67B4BpC2QK77qdY0xZF0Q+vWLt/BII6cLkIc8rLmSIcJaB/OrXXKe1g==}
    engines: {node: '>= 8.0.0'}
    hasBin: true

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-db@1.53.0:
    resolution: {integrity: sha512-oHlN/w+3MQ3rba9rqFr6V/ypF10LSkdwUysQL7GkXoTgIWeV+tcXGA852TBxH+gsh8UWoyhR1hKcoMJTuWflpg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mime@3.0.0:
    resolution: {integrity: sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==}
    engines: {node: '>=10.0.0'}
    hasBin: true

  mimic-fn@2.1.0:
    resolution: {integrity: sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==}
    engines: {node: '>=6'}

  mimic-fn@4.0.0:
    resolution: {integrity: sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==}
    engines: {node: '>=12'}

  mimic-function@5.0.1:
    resolution: {integrity: sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==}
    engines: {node: '>=18'}

  minimalistic-assert@1.0.1:
    resolution: {integrity: sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==}

  minimalistic-crypto-utils@1.0.1:
    resolution: {integrity: sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg==}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.3:
    resolution: {integrity: sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@2.9.0:
    resolution: {integrity: sha512-wxfUjg9WebH+CUDX/CdbRlh5SmfZiy/hpkxaRI16Y9W56Pa75sWgd/rvFilSgrauD9NyFymP/+JFV3KwzIsJeg==}

  minipass@3.3.6:
    resolution: {integrity: sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==}
    engines: {node: '>=8'}

  minipass@5.0.0:
    resolution: {integrity: sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==}
    engines: {node: '>=8'}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  minizlib@1.3.3:
    resolution: {integrity: sha512-6ZYMOEnmVsdCeTJVE0W9ZD+pVnE8h9Hma/iOwwRDsdQoePpoX56/8B6z3P9VNwppJuBKNRuFDRNRqRWexT9G9Q==}

  minizlib@2.1.2:
    resolution: {integrity: sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==}
    engines: {node: '>= 8'}

  mkdirp@0.5.6:
    resolution: {integrity: sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==}
    hasBin: true

  mkdirp@1.0.4:
    resolution: {integrity: sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==}
    engines: {node: '>=10'}
    hasBin: true

  mlly@1.7.4:
    resolution: {integrity: sha512-qmdSIPC4bDJXgZTCR7XosJiNKySV7O215tsPtDN9iEO/7q/76b/ijtgRu/+epFXSJhijtTCCGp3DWS549P3xKw==}

  mnemonist@0.39.6:
    resolution: {integrity: sha512-A/0v5Z59y63US00cRSLiloEIw3t5G+MiKz4BhX21FI+YBJXBOGW0ohFxTxO08dsOYlzxo87T7vGfZKYp2bcAWA==}

  mnemonist@0.39.8:
    resolution: {integrity: sha512-vyWo2K3fjrUw8YeeZ1zF0fy6Mu59RHokURlld8ymdUPjMlD9EC9ov1/YPqTgqRvUN9nTr3Gqfz29LYAmu0PHPQ==}

  mri@1.2.0:
    resolution: {integrity: sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==}
    engines: {node: '>=4'}

  mrmime@2.0.0:
    resolution: {integrity: sha512-eu38+hdgojoyq63s+yTpN4XMBdt5l8HhMhc4VKLO9KM5caLIBvUm4thi7fFaxyTmCKeNnXZ5pAlBwCUnhA09uw==}
    engines: {node: '>=10'}

  ms@2.1.1:
    resolution: {integrity: sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  msgpackr-extract@3.0.3:
    resolution: {integrity: sha512-P0efT1C9jIdVRefqjzOQ9Xml57zpOXnIuS+csaB4MdZbTdmGDLo8XhzBG1N7aO11gKDDkJvBLULeFTo46wwreA==}
    hasBin: true

  msgpackr@1.11.2:
    resolution: {integrity: sha512-F9UngXRlPyWCDEASDpTf6c9uNhGPTqnTeLVt7bN+bU1eajoR/8V9ys2BRaV5C/e5ihE6sJ9uPIKaYt6bFuO32g==}

  multicoin-address-validator@0.5.24:
    resolution: {integrity: sha512-gPbLRnvTe3UiECkd4UoOGLn5fUNhgWlfHTRuSDkXBLq80fukWnfR+7or7XUTySY2jXWldqFzU81LBI7ZtlYhYw==}
    engines: {node: '>=12.0.0'}

  nanoassert@2.0.0:
    resolution: {integrity: sha512-7vO7n28+aYO4J+8w96AzhmU8G+Y/xpPDJz/se19ICsqj/momRbb9mh9ZUtkoJ5X3nTnPdhEJyc0qnM6yAsHBaA==}

  nanoid@3.3.8:
    resolution: {integrity: sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  no-case@3.0.4:
    resolution: {integrity: sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==}

  node-abi@3.74.0:
    resolution: {integrity: sha512-c5XK0MjkGBrQPGYG24GBADZud0NCbznxNx0ZkS+ebUTrmV1qTDxPxSL8zEAPURXSbLRWVexxmP4986BziahL5w==}
    engines: {node: '>=10'}

  node-abort-controller@3.1.1:
    resolution: {integrity: sha512-AGK2yQKIjRuqnc6VkX2Xj5d+QW8xZ87pa1UK6yA6ouUyuxfHuMP6umE5QK7UmTeOAymo+Zx1Fxiuw9rVx8taHQ==}

  node-fetch@2.6.7:
    resolution: {integrity: sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-fetch@2.6.9:
    resolution: {integrity: sha512-DJm/CJkZkRjKKj4Zi4BsKVZh3ValV5IR5s7LVZnW+6YMh0W1BfNA8XSs6DLMGYlId5F3KnA70uu2qepcR08Qqg==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-gyp-build-optional-packages@5.2.2:
    resolution: {integrity: sha512-s+w+rBWnpTMwSFbaE0UXsRlg7hU4FjekKU4eyAih5T8nJuNZT1nNsskXpxmeqSK9UzkBl6UgRlnKc8hz8IEqOw==}
    hasBin: true

  node-gyp-build@4.8.4:
    resolution: {integrity: sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==}
    hasBin: true

  node-releases@2.0.19:
    resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}

  nopt@5.0.0:
    resolution: {integrity: sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==}
    engines: {node: '>=6'}
    hasBin: true

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  npm-run-path@4.0.1:
    resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
    engines: {node: '>=8'}

  npm-run-path@5.3.0:
    resolution: {integrity: sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  npmlog@5.0.1:
    resolution: {integrity: sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==}
    deprecated: This package is no longer supported.

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  obliterator@2.0.5:
    resolution: {integrity: sha512-42CPE9AhahZRsMNslczq0ctAEtqk8Eka26QofnqC346BZdHDySk3LWka23LI7ULIw11NmltpiLagIq8gBozxTw==}

  on-exit-leak-free@2.1.2:
    resolution: {integrity: sha512-0eJJY6hXLGf1udHwfNftBqH+g73EU4B504nZeKpz1sYRKafAghwxEJunB2O7rDZkL4PGfsMVnTXZ2EjibbqcsA==}
    engines: {node: '>=14.0.0'}

  once@1.3.3:
    resolution: {integrity: sha512-6vaNInhu+CHxtONf3zw3vq4SP2DOQhjBvIa3rNcG0+P7eKWlYH6Peu7rHizSloRU2EwMz6GraLieis9Ac9+p1w==}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  onetime@5.1.2:
    resolution: {integrity: sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==}
    engines: {node: '>=6'}

  onetime@6.0.0:
    resolution: {integrity: sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==}
    engines: {node: '>=12'}

  onetime@7.0.0:
    resolution: {integrity: sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==}
    engines: {node: '>=18'}

  openapi-types@12.1.3:
    resolution: {integrity: sha512-N4YtSYJqghVu4iek2ZUvcN/0aqH1kRDuNqzcycDxhOUpg7GdvLa2F3DgS6yBNhInhv2r/6I0Flkn7CqL8+nIcw==}

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  os-paths@4.4.0:
    resolution: {integrity: sha512-wrAwOeXp1RRMFfQY8Sy7VaGVmPocaLwSFOYCGKSyo8qmJ+/yaafCl5BCA1IQZWqFSRBrKDYFeR9d/VyQzfH/jg==}
    engines: {node: '>= 6.0'}

  p-finally@2.0.1:
    resolution: {integrity: sha512-vpm09aKwq6H9phqRQzecoDpD8TmVyGw70qmWlyq5onxY7tqyTTFVvxMykxQSQKILBSFlbXpypIw2T1Ml7+DDtw==}
    engines: {node: '>=8'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-limit@5.0.0:
    resolution: {integrity: sha512-/Eaoq+QyLSiXQ4lyYV23f14mZRQcXnxfHrN0vCai+ak9G0pp9iEQukIIZq5NccEvwRB8PUnZT0KsOoDCINS1qQ==}
    engines: {node: '>=18'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-ms@2.1.0:
    resolution: {integrity: sha512-kHt7kzLoS9VBZfUsiKjv43mr91ea+U05EyKkEtqp7vNbHxmaVuEqN7XxeEVnGrMtYOAxGrDElSi96K7EgO1zCA==}
    engines: {node: '>=6'}

  pascal-case@3.1.2:
    resolution: {integrity: sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==}

  path-browserify@1.0.1:
    resolution: {integrity: sha512-b7uo2UCUOYZcnF/3ID0lulOJi/bafxa1xPe7ZPsammBSpjSWQkjNxlt635YGS2MiR9GjvuXCtz2emr3jbsz98g==}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-key@4.0.0:
    resolution: {integrity: sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==}
    engines: {node: '>=12'}

  path-match@1.2.4:
    resolution: {integrity: sha512-UWlehEdqu36jmh4h5CWJ7tARp1OEVKGHKm6+dg9qMq5RKUTV5WJrGgaZ3dN2m7WFAXDbjlHzvJvL/IUpy84Ktw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-to-regexp@1.9.0:
    resolution: {integrity: sha512-xIp7/apCFJuUHdDLWe8O1HIkb0kQrOMb/0u6FXQjemHn/ii5LrIzU6bdECnsiTF/GjZkMEKg1xdiZwNqDYlZ6g==}

  path-to-regexp@6.1.0:
    resolution: {integrity: sha512-h9DqehX3zZZDCEm+xbfU0ZmwCGFCAAraPJWMXJ4+v32NjZJilVg3k1TcKsRgIb8IQ/izZSaydDc1OhJCZvs2Dw==}

  path-to-regexp@6.2.1:
    resolution: {integrity: sha512-JLyh7xT1kizaEvcaXOQwOc2/Yhw6KZOvPf1S8401UyLk86CU79LN3vl7ztXGm/pZ+YjoyAJ4rxmHwbkBXJX+yw==}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  pathe@1.1.2:
    resolution: {integrity: sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==}

  pathe@2.0.3:
    resolution: {integrity: sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==}

  pathval@1.1.1:
    resolution: {integrity: sha512-Dp6zGqpTdETdR63lehJYPeIOqpiNBNtc7BpWSLrOje7UaIsE5aY92r/AunQA7rsXvet3lrJ3JnZX29UPTKXyKQ==}

  peek-stream@1.1.3:
    resolution: {integrity: sha512-FhJ+YbOSBb9/rIl2ZeE/QHEsWn7PqNYt8ARAY3kIgNGOk13g9FGyIY6JIl/xB/3TFRVoTv5as0l11weORrTekA==}

  pend@1.2.0:
    resolution: {integrity: sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==}

  picocolors@1.0.0:
    resolution: {integrity: sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pidtree@0.6.0:
    resolution: {integrity: sha512-eG2dWTVw5bzqGRztnHExczNxt5VGsE6OwTeCG3fdUf9KBsZzO3R5OIIIzWR+iZA0NtZ+RDVdaoE2dK1cn6jH4g==}
    engines: {node: '>=0.10'}
    hasBin: true

  pino-abstract-transport@1.2.0:
    resolution: {integrity: sha512-Guhh8EZfPCfH+PMXAb6rKOjGQEoy0xlAIn+irODG5kgfYV+BQ0rGYYWTIel3P5mmyXqkYkPmdIkywsn6QKUR1Q==}

  pino-abstract-transport@2.0.0:
    resolution: {integrity: sha512-F63x5tizV6WCh4R6RHyi2Ml+M70DNRXt/+HANowMflpgGFMAym/VKm6G7ZOQRjqN7XbGxK1Lg9t6ZrtzOaivMw==}

  pino-pretty@10.3.1:
    resolution: {integrity: sha512-az8JbIYeN/1iLj2t0jR9DV48/LQ3RC6hZPpapKPkb84Q+yTidMCpgWxIT3N0flnBDilyBQ1luWNpOeJptjdp/g==}
    hasBin: true

  pino-std-serializers@6.2.2:
    resolution: {integrity: sha512-cHjPPsE+vhj/tnhCy/wiMh3M3z3h/j15zHQX+S9GkTBgqJuTuJzYJ4gUyACLhDaJ7kk9ba9iRDmbH2tJU03OiA==}

  pino-std-serializers@7.0.0:
    resolution: {integrity: sha512-e906FRY0+tV27iq4juKzSYPbUj2do2X2JX4EzSca1631EB2QJQUqGbDuERal7LCtOpxl6x3+nvo9NPZcmjkiFA==}

  pino@8.21.0:
    resolution: {integrity: sha512-ip4qdzjkAyDDZklUaZkcRFb2iA118H9SgRh8yzTkSQK8HilsOJF7rSY8HoW5+I0M46AZgX/pxbprf2vvzQCE0Q==}
    hasBin: true

  pino@9.6.0:
    resolution: {integrity: sha512-i85pKRCt4qMjZ1+L7sy2Ag4t1atFcdbEt76+7iRJn1g2BvsnRMGu9p8pivl9fs63M2kF/A0OacFZhTub+m/qMg==}
    hasBin: true

  pkg-types@1.3.1:
    resolution: {integrity: sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ==}

  postcss@8.5.2:
    resolution: {integrity: sha512-MjOadfU3Ys9KYoX0AdkBlFEF1Vx37uCCeN4ZHnmwm9FfpbsGWMZeBLMmmpY+6Ocqod7mkdZ0DT31OlbsFrLlkA==}
    engines: {node: ^10 || ^12 || >=14}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier@3.5.1:
    resolution: {integrity: sha512-hPpFQvHwL3Qv5AdRvBFMhnKo4tYxp0ReXiPn2bxkiohEX6mBeBwEpBSQTkD458RaaDKQMYSp4hX4UtfUTA5wDw==}
    engines: {node: '>=14'}
    hasBin: true

  pretty-format@29.7.0:
    resolution: {integrity: sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  pretty-ms@7.0.1:
    resolution: {integrity: sha512-973driJZvxiGOQ5ONsFhOF/DtzPMOMtgC11kCpUrPGMTgqp2q/1gwzCquocrN33is0VZ5GFHXZYMM9l6h67v2Q==}
    engines: {node: '>=10'}

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  process-warning@3.0.0:
    resolution: {integrity: sha512-mqn0kFRl0EoqhnL0GQ0veqFHyIN1yig9RHh/InzORTUiZHFRAur+aMtRkELNwGs9aNwKS6tg/An4NYBPGwvtzQ==}

  process-warning@4.0.1:
    resolution: {integrity: sha512-3c2LzQ3rY9d0hc1emcsHhfT9Jwz0cChib/QN89oME2R451w5fy3f0afAhERFZAwrbDU43wk12d0ORBpDVME50Q==}

  process@0.11.10:
    resolution: {integrity: sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==}
    engines: {node: '>= 0.6.0'}

  promisepipe@3.0.0:
    resolution: {integrity: sha512-V6TbZDJ/ZswevgkDNpGt/YqNCiZP9ASfgU+p83uJE6NrGtvSGoOcHLiDCqkMs2+yg7F5qHdLV8d0aS8O26G/KA==}

  proxy-addr@2.0.7:
    resolution: {integrity: sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==}
    engines: {node: '>= 0.10'}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  pump@3.0.2:
    resolution: {integrity: sha512-tUPXtzlGM8FE3P0ZL6DVs/3P58k9nk8/jZeQCurTJylQA8qFYzHFfhBJkuqyE0FifOsQ0uKWekiZ5g8wtr28cw==}

  pumpify@2.0.1:
    resolution: {integrity: sha512-m7KOje7jZxrmutanlkS1daj1dS6z6BgslzOXmcSEpIlCxM3VJH7lG5QLeck/6hgF6F4crFf01UtQmNsJfweTAw==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  quick-format-unescaped@4.0.4:
    resolution: {integrity: sha512-tYC1Q1hgyRuHgloV/YXs2w15unPVh8qfu/qCTfhTYamaw7fyhumKa2yGpdSo87vY32rIclj+4fWYQXUMs9EHvg==}

  quick-lru@5.1.1:
    resolution: {integrity: sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==}
    engines: {node: '>=10'}

  randombytes@2.1.0:
    resolution: {integrity: sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==}

  raw-body@2.4.1:
    resolution: {integrity: sha512-9WmIKF6mkvA0SLmA2Knm9+qj89e+j1zqgyn8aXGd7+nAduPoqgI9lO57SAZNn/Byzo5P7JhXTyg9PzaJbH73bA==}
    engines: {node: '>= 0.8'}

  react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readable-stream@4.7.0:
    resolution: {integrity: sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  readdirp@3.3.0:
    resolution: {integrity: sha512-zz0pAkSPOXXm1viEwygWIPSPkcBYjW1xU5j/JBh5t9bGCJwa6f9+BJa6VaB2g+b55yVrmXzqkyLf4xaWYM0IkQ==}
    engines: {node: '>=8.10.0'}

  real-require@0.2.0:
    resolution: {integrity: sha512-57frrGM/OCTLqLOAh0mhVA9VBMHd+9U7Zb2THMGdBUoZVOtGbJzjxsYGDJ3A9AYYCP4hn6y1TVbaOfzWtm5GFg==}
    engines: {node: '>= 12.13.0'}

  redis-errors@1.2.0:
    resolution: {integrity: sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==}
    engines: {node: '>=4'}

  redis-parser@3.0.0:
    resolution: {integrity: sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==}
    engines: {node: '>=4'}

  reflect-metadata@0.1.14:
    resolution: {integrity: sha512-ZhYeb6nRaXCfhnndflDK8qI6ZQ/YcWZCISRAWICW9XYqMUwjZM9Z0DveWX/ABN01oxSHwVxKQmxeYZSsm0jh5A==}

  require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  restore-cursor@5.1.0:
    resolution: {integrity: sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==}
    engines: {node: '>=18'}

  ret@0.4.3:
    resolution: {integrity: sha512-0f4Memo5QP7WQyUEAYUO3esD/XjOc3Zjjg5CPsAq1p8sIu0XPeMbHJemKA0BO7tV0X7+A0FoEpbmHXWxPyD3wQ==}
    engines: {node: '>=10'}

  retry@0.13.1:
    resolution: {integrity: sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==}
    engines: {node: '>= 4'}

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rfdc@1.4.1:
    resolution: {integrity: sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==}

  rimraf@3.0.2:
    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}
    deprecated: Rimraf versions prior to v4 are no longer supported
    hasBin: true

  ripemd160@2.0.2:
    resolution: {integrity: sha512-ii4iagi25WusVoiC4B4lq7pbXfAp3D9v5CwfkY33vffw2+pkDjY1D8GaN7spsxvCSx8dkPqOZCEZyfxcmJG2IA==}

  rollup@4.34.6:
    resolution: {integrity: sha512-wc2cBWqJgkU3Iz5oztRkQbfVkbxoz5EhnCGOrnJvnLnQ7O0WhQUYyv18qQI79O8L7DdHrrlJNeCHd4VGpnaXKQ==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-regex2@3.1.0:
    resolution: {integrity: sha512-RAAZAGbap2kBfbVhvmnTFv73NWLMvDGOITFYTZBAaY8eR+Ir4ef7Up/e7amo+y1+AH+3PtLkrt9mvcTsG9LXug==}

  safe-stable-stringify@2.5.0:
    resolution: {integrity: sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==}
    engines: {node: '>=10'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  scrypt-js@3.0.1:
    resolution: {integrity: sha512-cdwTTnqPu0Hyvf5in5asVdZocVDTNRmR7XEcJuIzMjJeSHybHl7vpB66AzwTaIg6CLSbtjcxc8fqcySfnTkccA==}

  secure-json-parse@2.7.0:
    resolution: {integrity: sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw==}

  seedrandom@3.0.5:
    resolution: {integrity: sha512-8OwmbklUNzwezjGInmZ+2clQmExQPvomqjL7LFqOYqtmuxRgQYqOD3mHaU+MvZn5FLUeVxVfQjwLZW/n/JFuqg==}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.3.5:
    resolution: {integrity: sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==}
    engines: {node: '>=10'}
    hasBin: true

  semver@7.7.1:
    resolution: {integrity: sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==}
    engines: {node: '>=10'}
    hasBin: true

  set-blocking@2.0.0:
    resolution: {integrity: sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==}

  set-cookie-parser@2.7.1:
    resolution: {integrity: sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==}

  setprototypeof@1.1.1:
    resolution: {integrity: sha512-JvdAWfbXeIGaZ9cILp38HntZSFSo3mWg6xGcJJsd+d4aRMOqauag1C63dJfDw7OaMYwEbHMOxEZ1lqVRYP2OAw==}

  setprototypeof@1.2.0:
    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}

  sha.js@2.4.11:
    resolution: {integrity: sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==}
    hasBin: true

  sha3@2.1.4:
    resolution: {integrity: sha512-S8cNxbyb0UGUM2VhRD4Poe5N58gJnJsLJ5vC7FYWGUmGhcsj4++WaIOBFVDxlG0W3To6xBuiRh+i0Qp2oNCOtg==}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  siginfo@2.0.0:
    resolution: {integrity: sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.0.2:
    resolution: {integrity: sha512-MY2/qGx4enyjprQnFaZsHib3Yadh3IXyV2C321GY0pjGfVBu4un0uDJkwgdxqO+Rdx8JMT8IfJIRwbYVz3Ob3Q==}
    engines: {node: '>=14'}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  simple-git-hooks@2.11.1:
    resolution: {integrity: sha512-tgqwPUMDcNDhuf1Xf6KTUsyeqGdgKMhzaH4PAZZuzguOgTl5uuyeYe/8mWgAr6IBxB5V06uqEf6Dy37gIWDtDg==}
    hasBin: true

  sirv@2.0.4:
    resolution: {integrity: sha512-94Bdh3cC2PKrbgSOUqTiGPWVZeSiXfKOVZNJniWoqrWrRkB1CJzBU3NEbiTsPcYy1lDsANA/THzS+9WBiy5nfQ==}
    engines: {node: '>= 10'}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  slice-ansi@5.0.0:
    resolution: {integrity: sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==}
    engines: {node: '>=12'}

  slice-ansi@7.1.0:
    resolution: {integrity: sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==}
    engines: {node: '>=18'}

  sonic-boom@3.8.1:
    resolution: {integrity: sha512-y4Z8LCDBuum+PBP3lSV7RHrXscqksve/bi0as7mhwVnBW+/wUqKT/2Kb7um8yqcFy0duYbbPxzt89Zy2nOCaxg==}

  sonic-boom@4.2.0:
    resolution: {integrity: sha512-INb7TM37/mAcsGmc9hyyI6+QR3rR1zVRu36B0NeGXKnOOLiZOfER5SA+N7X7k3yUYRzLWafduTDvJAfDswwEww==}

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  split2@4.2.0:
    resolution: {integrity: sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==}
    engines: {node: '>= 10.x'}

  stackback@0.0.2:
    resolution: {integrity: sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==}

  standard-as-callback@2.1.0:
    resolution: {integrity: sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A==}

  stat-mode@0.3.0:
    resolution: {integrity: sha512-QjMLR0A3WwFY2aZdV0okfFEJB5TRjkggXZjxP3A1RsWsNHNu3YPv8btmtc6iCFZ0Rul3FE93OYogvhOUClU+ng==}

  statuses@1.5.0:
    resolution: {integrity: sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==}
    engines: {node: '>= 0.6'}

  statuses@2.0.1:
    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}
    engines: {node: '>= 0.8'}

  std-env@3.8.0:
    resolution: {integrity: sha512-Bc3YwwCB+OzldMxOXJIIvC6cPRWr/LxOp48CdQTOkPyk/t4JWWJbrilwBd7RJzKV8QW7tJkcgAmeuLLJugl5/w==}

  steed@1.1.3:
    resolution: {integrity: sha512-EUkci0FAUiE4IvGTSKcDJIQ/eRUP2JJb56+fvZ4sdnguLTqIdKjSxUe138poW8mkvKWXW2sFPrgTsxqoISnmoA==}

  stream-shift@1.0.3:
    resolution: {integrity: sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==}

  stream-to-array@2.3.0:
    resolution: {integrity: sha512-UsZtOYEn4tWU2RGLOXr/o/xjRBftZRlG3dEWoaHr8j4GuypJ3isitGbVyjQKAuMu+xbiop8q224TjiZWc4XTZA==}

  stream-to-promise@2.2.0:
    resolution: {integrity: sha512-HAGUASw8NT0k8JvIVutB2Y/9iBk7gpgEyAudXwNJmZERdMITGdajOa4VJfD/kNiA3TppQpTP4J+CtcHwdzKBAw==}

  string-argv@0.3.2:
    resolution: {integrity: sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==}
    engines: {node: '>=0.6.19'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string-width@7.2.0:
    resolution: {integrity: sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==}
    engines: {node: '>=18'}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-final-newline@2.0.0:
    resolution: {integrity: sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==}
    engines: {node: '>=6'}

  strip-final-newline@3.0.0:
    resolution: {integrity: sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==}
    engines: {node: '>=12'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  strip-literal@2.1.1:
    resolution: {integrity: sha512-631UJ6O00eNGfMiWG78ck80dfBab8X6IVFB51jZK5Icd7XAs60Z5y7QdSd/wGIklnWvRbUNloVzhOKKmutxQ6Q==}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  tar@4.4.18:
    resolution: {integrity: sha512-ZuOtqqmkV9RE1+4odd+MhBpibmCxNP6PJhH/h2OqNuotTX7/XHPZQJv2pKvWMplFH9SIZZhitehh6vBH6LO8Pg==}
    engines: {node: '>=4.5'}

  tar@6.2.1:
    resolution: {integrity: sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==}
    engines: {node: '>=10'}

  test-exclude@6.0.0:
    resolution: {integrity: sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==}
    engines: {node: '>=8'}

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  thread-stream@2.7.0:
    resolution: {integrity: sha512-qQiRWsU/wvNolI6tbbCKd9iKaTnCXsTwVxhhKM6nctPdujTyztjlbUkUTUymidWcMnZ5pWR0ej4a0tjsW021vw==}

  thread-stream@3.1.0:
    resolution: {integrity: sha512-OqyPZ9u96VohAyMfJykzmivOrY2wfMSf3C5TtFJVgN+Hm6aj+voFhlK+kZEIv2FBh1X6Xp3DlnCOfEQ3B2J86A==}

  through2@2.0.5:
    resolution: {integrity: sha512-/mrRod8xqpA+IHSLyGCQ2s8SPHiCDEeQJSep1jqLYeEUClOFG2Qsh+4FU6G9VeqpZnGW/Su8LQGc4YKni5rYSQ==}

  time-span@4.0.0:
    resolution: {integrity: sha512-MyqZCTGLDZ77u4k+jqg4UlrzPTPZ49NDlaekU6uuFaJLzPIN1woaRXCbGeqOfxwc3Y37ZROGAJ614Rdv7Olt+g==}
    engines: {node: '>=10'}

  tiny-secp256k1@2.2.3:
    resolution: {integrity: sha512-SGcL07SxcPN2nGKHTCvRMkQLYPSoeFcvArUSCYtjVARiFAWU44cCIqYS0mYAU6nY7XfvwURuTIGo2Omt3ZQr0Q==}
    engines: {node: '>=14.0.0'}

  tinybench@2.9.0:
    resolution: {integrity: sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==}

  tinypool@0.8.4:
    resolution: {integrity: sha512-i11VH5gS6IFeLY3gMBQ00/MmLncVP7JLXOw1vlgkytLmJK7QnEr7NXf0LBdxfmNPAeyetukOk0bOYrJrFGjYJQ==}
    engines: {node: '>=14.0.0'}

  tinyspy@2.2.1:
    resolution: {integrity: sha512-KYad6Vy5VDWV4GH3fjpseMQ/XU2BhIYP7Vzd0LG44qRWm/Yt2WCOTicFdvmgo6gWaqooMQCawTtILVQJupKu7A==}
    engines: {node: '>=14.0.0'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  toad-cache@3.7.0:
    resolution: {integrity: sha512-/m8M+2BJUpoJdgAHoG+baCwBT+tf2VraSfkBgl0Y00qIWt41DJ8R5B8nsEw0I58YwF5IZH6z24/2TobDKnqSWw==}
    engines: {node: '>=12'}

  toidentifier@1.0.0:
    resolution: {integrity: sha512-yaOH/Pk/VEhBWWTlhI+qXxDFXlejDGcQipMlyxda9nthulaxLZUNcUqFxokp0vcYnvteJln5FNQDRrxj3YcbVw==}
    engines: {node: '>=0.6'}

  toidentifier@1.0.1:
    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}
    engines: {node: '>=0.6'}

  totalist@3.0.1:
    resolution: {integrity: sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==}
    engines: {node: '>=6'}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  tree-kill@1.2.2:
    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
    hasBin: true

  ts-api-utils@1.4.3:
    resolution: {integrity: sha512-i3eMG77UTMD0hZhgRS562pv83RC6ukSAC2GMNWc+9dieh/+jDM5u5YG+NHX6VNDRHQcHwmsTHctP9LhbC3WxVw==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'

  ts-morph@12.0.0:
    resolution: {integrity: sha512-VHC8XgU2fFW7yO1f/b3mxKDje1vmyzFXHWzOYmKEkCEwcLjDtbdLgBQviqj4ZwP4MJkQtRo6Ha2I29lq/B+VxA==}

  ts-node@10.9.1:
    resolution: {integrity: sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==}
    hasBin: true
    peerDependencies:
      '@swc/core': '>=1.2.50'
      '@swc/wasm': '>=1.2.50'
      '@types/node': '*'
      typescript: '>=2.7'
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      '@swc/wasm':
        optional: true

  ts-toolbelt@6.15.5:
    resolution: {integrity: sha512-FZIXf1ksVyLcfr7M317jbB67XFJhOO1YqdTcuGaq9q5jLUoTikukZ+98TPjKiP2jC5CgmYdWWYs0s2nLSU0/1A==}

  tslib@2.3.1:
    resolution: {integrity: sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw==}

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  tsx@4.19.2:
    resolution: {integrity: sha512-pOUl6Vo2LUq/bSa8S5q7b91cgNSjctn9ugq/+Mvow99qW6x/UZYwzxy/3NmqoT66eHYfCVvFvACC58UBPFf28g==}
    engines: {node: '>=18.0.0'}
    hasBin: true

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-detect@4.1.0:
    resolution: {integrity: sha512-Acylog8/luQ8L7il+geoSxhEkazvkslg7PSNKOX59mbB9cOveP5aq9h74Y7YU8yDpJwetzQQrfIwtf4Wp4LKcw==}
    engines: {node: '>=4'}

  type-fest@0.20.2:
    resolution: {integrity: sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==}
    engines: {node: '>=10'}

  type-fest@1.4.0:
    resolution: {integrity: sha512-yGSza74xk0UG8k+pLh5oeoYirvIiWo5t0/o3zHHAO2tRDiZcxWP7fywNlXhqb6/r6sWvwi+RsyQMWhVLe4BVuA==}
    engines: {node: '>=10'}

  type-is@1.6.18:
    resolution: {integrity: sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==}
    engines: {node: '>= 0.6'}

  typeforce@1.18.0:
    resolution: {integrity: sha512-7uc1O8h1M1g0rArakJdf0uLRSSgFcYexrVoKo+bzJd32gd4gDy2L/Z+8/FjPnU9ydY3pEnVPtr9FyscYY60K1g==}

  typescript@4.9.5:
    resolution: {integrity: sha512-1FXk9E2Hm+QzZQ7z+McJiHL4NW1F2EzMu9Nq9i3zAaGqibafqYwCVU6WyWAuyQRRzOlxou8xZSyXLEN8oKj24g==}
    engines: {node: '>=4.2.0'}
    hasBin: true

  typescript@5.7.3:
    resolution: {integrity: sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==}
    engines: {node: '>=14.17'}
    hasBin: true

  ufo@1.5.4:
    resolution: {integrity: sha512-UsUk3byDzKd04EyoZ7U4DOlxQaD14JUKQl6/P7wiX4FNvUfm3XL246n9W5AmqwW5RSFJ27NAuM0iLscAOYUiGQ==}

  uid-promise@1.0.0:
    resolution: {integrity: sha512-R8375j0qwXyIu/7R0tjdF06/sElHqbmdmWC9M2qQHpEVbvE4I5+38KJI7LUUmQMp7NVq4tKHiBMkT0NFM453Ig==}

  uint8array-tools@0.0.7:
    resolution: {integrity: sha512-vrrNZJiusLWoFWBqz5Y5KMCgP9W9hnjZHzZiZRT8oNAkq3d5Z5Oe76jAvVVSRh4U8GGR90N2X1dWtrhvx6L8UQ==}
    engines: {node: '>=14.0.0'}

  undici-types@6.19.8:
    resolution: {integrity: sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==}

  undici@5.26.5:
    resolution: {integrity: sha512-cSb4bPFd5qgR7qr2jYAi0hlX9n5YKK2ONKkLFkxl+v/9BvC0sOpZjBHDBSXc5lWAf5ty9oZdRXytBIHzgUcerw==}
    engines: {node: '>=14.0'}

  undici@5.28.5:
    resolution: {integrity: sha512-zICwjrDrcrUE0pyyJc1I2QzBkLM8FINsgOrt6WjA+BgajVq9Nxu2PbFFXUrAggLfDXlZGZBVZYw7WNV5KiBiBA==}
    engines: {node: '>=14.0'}

  universalify@0.1.2:
    resolution: {integrity: sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==}
    engines: {node: '>= 4.0.0'}

  universalify@2.0.1:
    resolution: {integrity: sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==}
    engines: {node: '>= 10.0.0'}

  unpipe@1.0.0:
    resolution: {integrity: sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==}
    engines: {node: '>= 0.8'}

  update-browserslist-db@1.1.2:
    resolution: {integrity: sha512-PPypAm5qvlD7XMZC3BujecnaOxwhrtoFR+Dqkk5Aa/6DssiH0ibKoketaj9w8LP7Bont1rYeoV5plxD7RTEPRg==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  uuid@3.3.2:
    resolution: {integrity: sha512-yXJmeNaw3DnnKAOKJE51sL/ZaYfWJRl1pK9dr19YFCu0ObS231AB1/LbqTKRAQ5kw8A90rA6fr4riOUpTZvQZA==}
    deprecated: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
    hasBin: true

  uuid@8.3.2:
    resolution: {integrity: sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==}
    hasBin: true

  uuid@9.0.1:
    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
    hasBin: true

  v8-compile-cache-lib@3.0.1:
    resolution: {integrity: sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==}

  varuint-bitcoin@1.1.2:
    resolution: {integrity: sha512-4EVb+w4rx+YfVM32HQX42AbbT7/1f5zwAYhIujKXKk8NQK+JfRVl3pqT3hjNn/L+RstigmGGKVwHA/P0wgITZw==}

  vary@1.1.2:
    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}
    engines: {node: '>= 0.8'}

  vercel@33.7.1:
    resolution: {integrity: sha512-6VFasn9euV13r6T4q0o5twCopkvm1hYzOJIvS2PAJuNEYcf1tk6gT2Ym0RrXd5sXaWtW1PNHdNVvberkDdsnMA==}
    engines: {node: '>= 16'}
    hasBin: true

  vite-node@1.6.1:
    resolution: {integrity: sha512-YAXkfvGtuTzwWbDSACdJSg4A4DZiAqckWe90Zapc/sEX3XvHcw1NdurM/6od8J207tSDqNbSsgdCacBgvJKFuA==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true

  vite@5.4.14:
    resolution: {integrity: sha512-EK5cY7Q1D8JNhSaPKVK4pwBFvaTmZxEnoKXLG/U9gmdDcihQGNzFlgIvaxezFR4glP1LsuiedwMBqCXH3wZccA==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^18.0.0 || >=20.0.0
      less: '*'
      lightningcss: ^1.21.0
      sass: '*'
      sass-embedded: '*'
      stylus: '*'
      sugarss: '*'
      terser: ^5.4.0
    peerDependenciesMeta:
      '@types/node':
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true

  vitest@1.6.1:
    resolution: {integrity: sha512-Ljb1cnSJSivGN0LqXd/zmDbWEM0RNNg2t1QW/XUhYl/qPqyu7CsqeWtqQXHVaJsecLPuDoak2oJcZN2QoRIOag==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@edge-runtime/vm': '*'
      '@types/node': ^18.0.0 || >=20.0.0
      '@vitest/browser': 1.6.1
      '@vitest/ui': 1.6.1
      happy-dom: '*'
      jsdom: '*'
    peerDependenciesMeta:
      '@edge-runtime/vm':
        optional: true
      '@types/node':
        optional: true
      '@vitest/browser':
        optional: true
      '@vitest/ui':
        optional: true
      happy-dom:
        optional: true
      jsdom:
        optional: true

  web-vitals@0.2.4:
    resolution: {integrity: sha512-6BjspCO9VriYy12z356nL6JBS0GYeEcA457YyRzD+dD6XYCQ75NKhcOHUMHentOE7OcVCIXXDvOm0jKFfQG2Gg==}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  why-is-node-running@2.3.0:
    resolution: {integrity: sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==}
    engines: {node: '>=8'}
    hasBin: true

  wide-align@1.1.5:
    resolution: {integrity: sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==}

  wif@2.0.6:
    resolution: {integrity: sha512-HIanZn1zmduSF+BQhkE+YXIbEiH0xPr1012QbFEGB0xsKqJii0/SqJjyn8dFv6y36kOznMgMB+LGcbZTJ1xACQ==}

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrap-ansi@9.0.0:
    resolution: {integrity: sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==}
    engines: {node: '>=18'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  ws@8.18.0:
    resolution: {integrity: sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  xdg-app-paths@5.1.0:
    resolution: {integrity: sha512-RAQ3WkPf4KTU1A8RtFx3gWywzVKe00tfOPFfl2NDGqbIFENQO4kqAJp7mhQjNj/33W5x5hiWWUdyfPq/5SU3QA==}
    engines: {node: '>=6'}

  xdg-portable@7.3.0:
    resolution: {integrity: sha512-sqMMuL1rc0FmMBOzCpd0yuy9trqF2yTTVe+E9ogwCSWQCdDEtQUwrZPT6AxqtsFGRNxycgncbP/xmOOSPw5ZUw==}
    engines: {node: '>= 6.0'}

  xtend@4.0.2:
    resolution: {integrity: sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==}
    engines: {node: '>=0.4'}

  xxhashjs@0.2.2:
    resolution: {integrity: sha512-AkTuIuVTET12tpsVIQo+ZU6f/qDmKuRUcjaqR+OIvm+aCBsZ95i7UVY5WJ9TMsSaZ0DA2WxoZ4acu0sPH+OKAw==}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yallist@4.0.0:
    resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}

  yaml@2.7.0:
    resolution: {integrity: sha512-+hSoy/QHluxmC9kCIJyL/uyFmLmc+e5CFR5Wa+bpIhIj85LVb9ZH2nVnqrHoSvKogwODv0ClqZkmiSSaIH5LTA==}
    engines: {node: '>= 14'}
    hasBin: true

  yauzl-clone@1.0.4:
    resolution: {integrity: sha512-igM2RRCf3k8TvZoxR2oguuw4z1xasOnA31joCqHIyLkeWrvAc2Jgay5ISQ2ZplinkoGaJ6orCz56Ey456c5ESA==}
    engines: {node: '>=6'}

  yauzl-promise@2.1.3:
    resolution: {integrity: sha512-A1pf6fzh6eYkK0L4Qp7g9jzJSDrM6nN0bOn5T0IbY4Yo3w+YkWlHFkJP7mzknMXjqusHFHlKsK2N+4OLsK2MRA==}
    engines: {node: '>=6'}

  yauzl@2.10.0:
    resolution: {integrity: sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==}

  yn@3.1.1:
    resolution: {integrity: sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==}
    engines: {node: '>=6'}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  yocto-queue@1.1.1:
    resolution: {integrity: sha512-b4JR1PFR10y1mKjhHY9LaGo6tmrgjit7hxVIeAmyMw3jegXR4dhYqLaQF5zMXZxY7tLpMyJeLjr1C4rLmkVe8g==}
    engines: {node: '>=12.20'}

  zod-to-json-schema@3.24.1:
    resolution: {integrity: sha512-3h08nf3Vw3Wl3PK+q3ow/lIil81IT2Oa7YpQyUUDsEWbXveMesdfK1xBd2RhCkynwZndAxixji/7SYJJowr62w==}
    peerDependencies:
      zod: ^3.24.1

  zod@3.24.2:
    resolution: {integrity: sha512-lY7CDW43ECgW9u1TcT3IoXHflywfVqDYze4waEz812jR/bZ8FHDsl7pFQoSZTz5N+2NqRXs8GBwnAwo3ZNxqhQ==}

snapshots:

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25

  '@babel/code-frame@7.26.2':
    dependencies:
      '@babel/helper-validator-identifier': 7.25.9
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/compat-data@7.26.8': {}

  '@babel/core@7.26.8':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.8
      '@babel/helper-compilation-targets': 7.26.5
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.8)
      '@babel/helpers': 7.26.7
      '@babel/parser': 7.26.8
      '@babel/template': 7.26.8
      '@babel/traverse': 7.26.8
      '@babel/types': 7.26.8
      '@types/gensync': 1.0.4
      convert-source-map: 2.0.0
      debug: 4.4.0
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.26.8':
    dependencies:
      '@babel/parser': 7.26.8
      '@babel/types': 7.26.8
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 3.1.0

  '@babel/helper-compilation-targets@7.26.5':
    dependencies:
      '@babel/compat-data': 7.26.8
      '@babel/helper-validator-option': 7.25.9
      browserslist: 4.24.4
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-module-imports@7.25.9':
    dependencies:
      '@babel/traverse': 7.26.8
      '@babel/types': 7.26.8
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.26.0(@babel/core@7.26.8)':
    dependencies:
      '@babel/core': 7.26.8
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9
      '@babel/traverse': 7.26.8
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-string-parser@7.25.9': {}

  '@babel/helper-validator-identifier@7.25.9': {}

  '@babel/helper-validator-option@7.25.9': {}

  '@babel/helpers@7.26.7':
    dependencies:
      '@babel/template': 7.26.8
      '@babel/types': 7.26.8

  '@babel/parser@7.26.8':
    dependencies:
      '@babel/types': 7.26.8

  '@babel/template@7.26.8':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/parser': 7.26.8
      '@babel/types': 7.26.8

  '@babel/traverse@7.26.8':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.8
      '@babel/parser': 7.26.8
      '@babel/template': 7.26.8
      '@babel/types': 7.26.8
      debug: 4.4.0
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.26.8':
    dependencies:
      '@babel/helper-string-parser': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9

  '@bitcoinerlab/secp256k1@1.2.0':
    dependencies:
      '@noble/curves': 1.8.1

  '@ckb-lumos/base@0.22.2':
    dependencies:
      '@ckb-lumos/bi': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@ckb-lumos/toolkit': 0.22.2
      '@types/blake2b': 2.1.3
      '@types/lodash.isequal': 4.5.8
      blake2b: 2.1.4
      js-xxhash: 1.0.4
      lodash.isequal: 4.5.0

  '@ckb-lumos/bi@0.22.2':
    dependencies:
      jsbi: 4.3.0

  '@ckb-lumos/ckb-indexer@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/bi': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@ckb-lumos/rpc': 0.22.2
      '@ckb-lumos/toolkit': 0.22.2
      cross-fetch: 3.2.0
      events: 3.3.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/codec@0.22.2':
    dependencies:
      '@ckb-lumos/bi': 0.22.2

  '@ckb-lumos/common-scripts@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/bi': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@ckb-lumos/config-manager': 0.22.2
      '@ckb-lumos/helpers': 0.22.2
      '@ckb-lumos/rpc': 0.22.2
      '@ckb-lumos/toolkit': 0.22.2
      bech32: 2.0.0
      bs58: 5.0.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/config-manager@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/bi': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@ckb-lumos/rpc': 0.22.2
      '@types/deep-freeze-strict': 1.1.2
      deep-freeze-strict: 1.1.1
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/hd@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/bi': 0.22.2
      bn.js: 5.2.1
      elliptic: 6.6.1
      scrypt-js: 3.0.1
      sha3: 2.1.4
      uuid: 8.3.2

  '@ckb-lumos/helpers@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/bi': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@ckb-lumos/config-manager': 0.22.2
      '@ckb-lumos/toolkit': 0.22.2
      bech32: 2.0.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/light-client@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/ckb-indexer': 0.22.2
      '@ckb-lumos/rpc': 0.22.2
      cross-fetch: 3.2.0
      events: 3.3.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/lumos@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/bi': 0.22.2
      '@ckb-lumos/ckb-indexer': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@ckb-lumos/common-scripts': 0.22.2
      '@ckb-lumos/config-manager': 0.22.2
      '@ckb-lumos/hd': 0.22.2
      '@ckb-lumos/helpers': 0.22.2
      '@ckb-lumos/light-client': 0.22.2
      '@ckb-lumos/rpc': 0.22.2
      '@ckb-lumos/toolkit': 0.22.2
      '@ckb-lumos/transaction-manager': 0.22.2
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/rpc@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/bi': 0.22.2
      abort-controller: 3.0.0
      cross-fetch: 3.2.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/toolkit@0.22.2':
    dependencies:
      '@ckb-lumos/bi': 0.22.2

  '@ckb-lumos/transaction-manager@0.22.2':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/ckb-indexer': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@ckb-lumos/rpc': 0.22.2
      '@ckb-lumos/toolkit': 0.22.2
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@cspotcode/source-map-support@0.8.1':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.9

  '@edge-runtime/format@2.2.1': {}

  '@edge-runtime/node-utils@2.3.0': {}

  '@edge-runtime/ponyfill@2.4.2': {}

  '@edge-runtime/primitives@4.1.0': {}

  '@edge-runtime/vm@3.2.0':
    dependencies:
      '@edge-runtime/primitives': 4.1.0

  '@esbuild/aix-ppc64@0.21.5':
    optional: true

  '@esbuild/aix-ppc64@0.23.1':
    optional: true

  '@esbuild/android-arm64@0.21.5':
    optional: true

  '@esbuild/android-arm64@0.23.1':
    optional: true

  '@esbuild/android-arm@0.21.5':
    optional: true

  '@esbuild/android-arm@0.23.1':
    optional: true

  '@esbuild/android-x64@0.21.5':
    optional: true

  '@esbuild/android-x64@0.23.1':
    optional: true

  '@esbuild/darwin-arm64@0.21.5':
    optional: true

  '@esbuild/darwin-arm64@0.23.1':
    optional: true

  '@esbuild/darwin-x64@0.21.5':
    optional: true

  '@esbuild/darwin-x64@0.23.1':
    optional: true

  '@esbuild/freebsd-arm64@0.21.5':
    optional: true

  '@esbuild/freebsd-arm64@0.23.1':
    optional: true

  '@esbuild/freebsd-x64@0.21.5':
    optional: true

  '@esbuild/freebsd-x64@0.23.1':
    optional: true

  '@esbuild/linux-arm64@0.21.5':
    optional: true

  '@esbuild/linux-arm64@0.23.1':
    optional: true

  '@esbuild/linux-arm@0.21.5':
    optional: true

  '@esbuild/linux-arm@0.23.1':
    optional: true

  '@esbuild/linux-ia32@0.21.5':
    optional: true

  '@esbuild/linux-ia32@0.23.1':
    optional: true

  '@esbuild/linux-loong64@0.21.5':
    optional: true

  '@esbuild/linux-loong64@0.23.1':
    optional: true

  '@esbuild/linux-mips64el@0.21.5':
    optional: true

  '@esbuild/linux-mips64el@0.23.1':
    optional: true

  '@esbuild/linux-ppc64@0.21.5':
    optional: true

  '@esbuild/linux-ppc64@0.23.1':
    optional: true

  '@esbuild/linux-riscv64@0.21.5':
    optional: true

  '@esbuild/linux-riscv64@0.23.1':
    optional: true

  '@esbuild/linux-s390x@0.21.5':
    optional: true

  '@esbuild/linux-s390x@0.23.1':
    optional: true

  '@esbuild/linux-x64@0.21.5':
    optional: true

  '@esbuild/linux-x64@0.23.1':
    optional: true

  '@esbuild/netbsd-x64@0.21.5':
    optional: true

  '@esbuild/netbsd-x64@0.23.1':
    optional: true

  '@esbuild/openbsd-arm64@0.23.1':
    optional: true

  '@esbuild/openbsd-x64@0.21.5':
    optional: true

  '@esbuild/openbsd-x64@0.23.1':
    optional: true

  '@esbuild/sunos-x64@0.21.5':
    optional: true

  '@esbuild/sunos-x64@0.23.1':
    optional: true

  '@esbuild/win32-arm64@0.21.5':
    optional: true

  '@esbuild/win32-arm64@0.23.1':
    optional: true

  '@esbuild/win32-ia32@0.21.5':
    optional: true

  '@esbuild/win32-ia32@0.23.1':
    optional: true

  '@esbuild/win32-x64@0.21.5':
    optional: true

  '@esbuild/win32-x64@0.23.1':
    optional: true

  '@eslint-community/eslint-utils@4.4.1(eslint@8.57.1)':
    dependencies:
      eslint: 8.57.1
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/eslintrc@2.1.4':
    dependencies:
      ajv: 6.12.6
      debug: 4.4.0
      espree: 9.6.1
      globals: 13.24.0
      ignore: 5.3.2
      import-fresh: 3.3.1
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@8.57.1': {}

  '@exact-realty/multipart-parser@1.0.14': {}

  '@fastify/accept-negotiator@1.1.0': {}

  '@fastify/ajv-compiler@3.6.0':
    dependencies:
      ajv: 8.17.1
      ajv-formats: 2.1.1(ajv@8.17.1)
      fast-uri: 2.4.0

  '@fastify/busboy@2.1.1': {}

  '@fastify/compress@7.0.3':
    dependencies:
      '@fastify/accept-negotiator': 1.1.0
      fastify-plugin: 4.5.1
      mime-db: 1.53.0
      minipass: 7.1.2
      peek-stream: 1.1.3
      pump: 3.0.2
      pumpify: 2.0.1
      readable-stream: 4.7.0

  '@fastify/cors@9.0.1':
    dependencies:
      fastify-plugin: 4.5.1
      mnemonist: 0.39.6

  '@fastify/error@3.4.1': {}

  '@fastify/fast-json-stringify-compiler@4.3.0':
    dependencies:
      fast-json-stringify: 5.16.1

  '@fastify/http-proxy@9.5.0':
    dependencies:
      '@fastify/reply-from': 9.8.0
      fast-querystring: 1.1.2
      fastify-plugin: 4.5.1
      ws: 8.18.0
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  '@fastify/jwt@8.0.1':
    dependencies:
      '@fastify/error': 3.4.1
      '@lukeed/ms': 2.0.2
      fast-jwt: 4.0.5
      fastify-plugin: 4.5.1
      steed: 1.1.3

  '@fastify/merge-json-schemas@0.1.1':
    dependencies:
      fast-deep-equal: 3.1.3

  '@fastify/rate-limit@9.1.0':
    dependencies:
      '@lukeed/ms': 2.0.2
      fastify-plugin: 4.5.1
      toad-cache: 3.7.0

  '@fastify/redis@6.2.0':
    dependencies:
      fastify-plugin: 4.5.1
      ioredis: 5.5.0
    transitivePeerDependencies:
      - supports-color

  '@fastify/reply-from@9.8.0':
    dependencies:
      '@fastify/error': 3.4.1
      end-of-stream: 1.4.4
      fast-content-type-parse: 1.1.0
      fast-querystring: 1.1.2
      fastify-plugin: 4.5.1
      toad-cache: 3.7.0
      undici: 5.28.5

  '@fastify/send@2.1.0':
    dependencies:
      '@lukeed/ms': 2.0.2
      escape-html: 1.0.3
      fast-decode-uri-component: 1.0.1
      http-errors: 2.0.0
      mime: 3.0.0

  '@fastify/sensible@5.6.0':
    dependencies:
      '@lukeed/ms': 2.0.2
      fast-deep-equal: 3.1.3
      fastify-plugin: 4.5.1
      forwarded: 0.2.0
      http-errors: 2.0.0
      type-is: 1.6.18
      vary: 1.1.2

  '@fastify/static@7.0.4':
    dependencies:
      '@fastify/accept-negotiator': 1.1.0
      '@fastify/send': 2.1.0
      content-disposition: 0.5.4
      fastify-plugin: 4.5.1
      fastq: 1.19.0
      glob: 10.4.5

  '@fastify/swagger-ui@3.1.0':
    dependencies:
      '@fastify/static': 7.0.4
      fastify-plugin: 4.5.1
      openapi-types: 12.1.3
      rfdc: 1.4.1
      yaml: 2.7.0

  '@fastify/swagger@8.14.0':
    dependencies:
      fastify-plugin: 4.5.1
      json-schema-resolver: 2.0.0
      openapi-types: 12.1.3
      rfdc: 1.4.1
      yaml: 2.7.0
    transitivePeerDependencies:
      - supports-color

  '@humanwhocodes/config-array@0.13.0':
    dependencies:
      '@humanwhocodes/object-schema': 2.0.3
      debug: 4.4.0
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/object-schema@2.0.3': {}

  '@immobiliarelabs/fastify-sentry@8.0.2':
    dependencies:
      '@sentry/node': 7.120.3
      '@sentry/tracing': 7.120.3
      '@sentry/utils': 7.120.3
      cookie: 0.7.2
      fastify-plugin: 4.5.1

  '@ioredis/commands@1.2.0': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@istanbuljs/schema@0.1.3': {}

  '@jest/schemas@29.6.3':
    dependencies:
      '@sinclair/typebox': 0.27.8

  '@jridgewell/gen-mapping@0.3.8':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@jridgewell/trace-mapping@0.3.9':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@lukeed/ms@2.0.2': {}

  '@mapbox/node-pre-gyp@1.0.11':
    dependencies:
      detect-libc: 2.0.3
      https-proxy-agent: 5.0.1
      make-dir: 3.1.0
      node-fetch: 2.7.0
      nopt: 5.0.0
      npmlog: 5.0.1
      rimraf: 3.0.2
      semver: 7.7.1
      tar: 6.2.1
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@mempool/mempool.js@3.0.0':
    dependencies:
      axios: 1.7.4
      ws: 8.18.0
    transitivePeerDependencies:
      - bufferutil
      - debug
      - utf-8-validate

  '@msgpackr-extract/msgpackr-extract-darwin-arm64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-darwin-x64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-arm64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-arm@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-x64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-win32-x64@3.0.3':
    optional: true

  '@nervosnetwork/ckb-sdk-core@0.109.5':
    dependencies:
      '@nervosnetwork/ckb-sdk-rpc': 0.109.5
      '@nervosnetwork/ckb-sdk-utils': 0.109.5
      '@nervosnetwork/ckb-types': 0.109.5
      tslib: 2.3.1
    transitivePeerDependencies:
      - debug

  '@nervosnetwork/ckb-sdk-rpc@0.109.5':
    dependencies:
      '@nervosnetwork/ckb-sdk-utils': 0.109.5
      axios: 1.7.4
      tslib: 2.3.1
    transitivePeerDependencies:
      - debug

  '@nervosnetwork/ckb-sdk-utils@0.109.5':
    dependencies:
      '@nervosnetwork/ckb-types': 0.109.5
      bech32: 2.0.0
      elliptic: 6.6.1
      jsbi: 3.1.3
      tslib: 2.3.1

  '@nervosnetwork/ckb-types@0.109.5': {}

  '@noble/curves@1.8.1':
    dependencies:
      '@noble/hashes': 1.7.1

  '@noble/hashes@1.7.1': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.19.0

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@polka/url@1.0.0-next.28': {}

  '@rgbpp-sdk/btc@0.7.0(@ckb-lumos/lumos@0.22.2)':
    dependencies:
      '@bitcoinerlab/secp256k1': 1.2.0
      '@ckb-lumos/codec': 0.22.2
      '@nervosnetwork/ckb-types': 0.109.5
      '@rgbpp-sdk/ckb': 0.7.0(@ckb-lumos/lumos@0.22.2)(lodash@4.17.21)
      '@rgbpp-sdk/service': 0.7.0
      bip32: 4.0.0
      bitcoinjs-lib: 6.1.7
      ecpair: 2.1.0
      lodash: 4.17.21
      p-limit: 3.1.0
    transitivePeerDependencies:
      - '@ckb-lumos/lumos'
      - debug

  '@rgbpp-sdk/ckb@0.7.0(@ckb-lumos/lumos@0.22.2)(lodash@4.17.21)':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@exact-realty/multipart-parser': 1.0.14
      '@nervosnetwork/ckb-sdk-core': 0.109.5
      '@nervosnetwork/ckb-sdk-utils': 0.109.5
      '@nervosnetwork/ckb-types': 0.109.5
      '@rgbpp-sdk/service': 0.7.0
      '@spore-sdk/core': 0.2.1(@ckb-lumos/lumos@0.22.2)(lodash@4.17.21)
      axios: 1.7.9
      camelcase-keys: 7.0.2
      js-sha256: 0.11.0
    transitivePeerDependencies:
      - '@ckb-lumos/lumos'
      - debug
      - lodash

  '@rgbpp-sdk/service@0.7.0':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@nervosnetwork/ckb-types': 0.109.5
      lodash: 4.17.21

  '@rollup/pluginutils@4.2.1':
    dependencies:
      estree-walker: 2.0.2
      picomatch: 2.3.1

  '@rollup/rollup-android-arm-eabi@4.34.6':
    optional: true

  '@rollup/rollup-android-arm64@4.34.6':
    optional: true

  '@rollup/rollup-darwin-arm64@4.34.6':
    optional: true

  '@rollup/rollup-darwin-x64@4.34.6':
    optional: true

  '@rollup/rollup-freebsd-arm64@4.34.6':
    optional: true

  '@rollup/rollup-freebsd-x64@4.34.6':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.34.6':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.34.6':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.34.6':
    optional: true

  '@rollup/rollup-linux-loongarch64-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.34.6':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.34.6':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.34.6':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.34.6':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.34.6':
    optional: true

  '@scure/base@1.2.4': {}

  '@sentry-internal/tracing@7.120.3':
    dependencies:
      '@sentry/core': 7.120.3
      '@sentry/types': 7.120.3
      '@sentry/utils': 7.120.3

  '@sentry/core@7.120.3':
    dependencies:
      '@sentry/types': 7.120.3
      '@sentry/utils': 7.120.3

  '@sentry/integrations@7.120.3':
    dependencies:
      '@sentry/core': 7.120.3
      '@sentry/types': 7.120.3
      '@sentry/utils': 7.120.3
      localforage: 1.10.0

  '@sentry/node@7.120.3':
    dependencies:
      '@sentry-internal/tracing': 7.120.3
      '@sentry/core': 7.120.3
      '@sentry/integrations': 7.120.3
      '@sentry/types': 7.120.3
      '@sentry/utils': 7.120.3

  '@sentry/profiling-node@7.120.3':
    dependencies:
      detect-libc: 2.0.3
      node-abi: 3.74.0

  '@sentry/tracing@7.120.3':
    dependencies:
      '@sentry-internal/tracing': 7.120.3

  '@sentry/types@7.120.3': {}

  '@sentry/utils@7.120.3':
    dependencies:
      '@sentry/types': 7.120.3

  '@sinclair/typebox@0.25.24': {}

  '@sinclair/typebox@0.27.8': {}

  '@spore-sdk/core@0.2.1(@ckb-lumos/lumos@0.22.2)(lodash@4.17.21)':
    dependencies:
      '@ckb-lumos/lumos': 0.22.2
      lodash: 4.17.21

  '@tootallnate/once@2.0.0': {}

  '@ts-morph/common@0.11.1':
    dependencies:
      fast-glob: 3.3.3
      minimatch: 3.1.2
      mkdirp: 1.0.4
      path-browserify: 1.0.1

  '@tsconfig/node10@1.0.11': {}

  '@tsconfig/node12@1.0.11': {}

  '@tsconfig/node14@1.0.3': {}

  '@tsconfig/node16@1.0.4': {}

  '@types/async-retry@1.4.9':
    dependencies:
      '@types/retry': 0.12.5

  '@types/blake2b@2.1.3': {}

  '@types/cron@2.4.3':
    dependencies:
      cron: 2.4.4

  '@types/deep-freeze-strict@1.1.2': {}

  '@types/estree@1.0.6': {}

  '@types/gensync@1.0.4': {}

  '@types/json-schema@7.0.15': {}

  '@types/lodash.isequal@4.5.8':
    dependencies:
      '@types/lodash': 4.17.15

  '@types/lodash@4.17.15': {}

  '@types/luxon@3.3.8': {}

  '@types/multicoin-address-validator@0.5.3': {}

  '@types/node@14.18.33': {}

  '@types/node@20.17.19':
    dependencies:
      undici-types: 6.19.8

  '@types/retry@0.12.5': {}

  '@types/seedrandom@3.0.8': {}

  '@types/semver@7.5.8': {}

  '@types/uuid@9.0.8': {}

  '@typescript-eslint/eslint-plugin@6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.1)(typescript@5.7.3))(eslint@8.57.1)(typescript@5.7.3)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 6.21.0(eslint@8.57.1)(typescript@5.7.3)
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/type-utils': 6.21.0(eslint@8.57.1)(typescript@5.7.3)
      '@typescript-eslint/utils': 6.21.0(eslint@8.57.1)(typescript@5.7.3)
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.4.0
      eslint: 8.57.1
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      semver: 7.7.1
      ts-api-utils: 1.4.3(typescript@5.7.3)
    optionalDependencies:
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@6.21.0(eslint@8.57.1)(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.7.3)
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.4.0
      eslint: 8.57.1
    optionalDependencies:
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@6.21.0':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/visitor-keys': 6.21.0

  '@typescript-eslint/type-utils@6.21.0(eslint@8.57.1)(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.7.3)
      '@typescript-eslint/utils': 6.21.0(eslint@8.57.1)(typescript@5.7.3)
      debug: 4.4.0
      eslint: 8.57.1
      ts-api-utils: 1.4.3(typescript@5.7.3)
    optionalDependencies:
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@6.21.0': {}

  '@typescript-eslint/typescript-estree@6.21.0(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.4.0
      globby: 11.1.0
      is-glob: 4.0.3
      minimatch: 9.0.3
      semver: 7.7.1
      ts-api-utils: 1.4.3(typescript@5.7.3)
    optionalDependencies:
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@6.21.0(eslint@8.57.1)(typescript@5.7.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@8.57.1)
      '@types/json-schema': 7.0.15
      '@types/semver': 7.5.8
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.7.3)
      eslint: 8.57.1
      semver: 7.7.1
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@typescript-eslint/visitor-keys@6.21.0':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      eslint-visitor-keys: 3.4.3

  '@ungap/structured-clone@1.3.0': {}

  '@utxostack/metadata@0.0.6': {}

  '@vercel/build-utils@7.11.0': {}

  '@vercel/error-utils@2.0.2': {}

  '@vercel/fun@1.1.0':
    dependencies:
      '@tootallnate/once': 2.0.0
      async-listen: 1.2.0
      debug: 4.1.1
      execa: 3.2.0
      fs-extra: 8.1.0
      generic-pool: 3.4.2
      micro: 9.3.5-canary.3
      ms: 2.1.1
      node-fetch: 2.6.7
      path-match: 1.2.4
      promisepipe: 3.0.0
      semver: 7.3.5
      stat-mode: 0.3.0
      stream-to-promise: 2.2.0
      tar: 4.4.18
      tree-kill: 1.2.2
      uid-promise: 1.0.0
      uuid: 3.3.2
      xdg-app-paths: 5.1.0
      yauzl-promise: 2.1.3
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@vercel/gatsby-plugin-vercel-analytics@1.0.11':
    dependencies:
      web-vitals: 0.2.4

  '@vercel/gatsby-plugin-vercel-builder@2.0.24':
    dependencies:
      '@sinclair/typebox': 0.25.24
      '@vercel/build-utils': 7.11.0
      '@vercel/routing-utils': 3.1.0
      esbuild: 0.14.47
      etag: 1.8.1
      fs-extra: 11.1.0

  '@vercel/go@3.1.1': {}

  '@vercel/hydrogen@1.0.2':
    dependencies:
      '@vercel/static-config': 3.0.0
      ts-morph: 12.0.0

  '@vercel/next@4.2.0':
    dependencies:
      '@vercel/nft': 0.26.4
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@vercel/nft@0.26.4':
    dependencies:
      '@mapbox/node-pre-gyp': 1.0.11
      '@rollup/pluginutils': 4.2.1
      acorn: 8.14.0
      acorn-import-attributes: 1.9.5(acorn@8.14.0)
      async-sema: 3.1.1
      bindings: 1.5.0
      estree-walker: 2.0.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      micromatch: 4.0.8
      node-gyp-build: 4.8.4
      resolve-from: 5.0.0
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@vercel/node@3.0.26':
    dependencies:
      '@edge-runtime/node-utils': 2.3.0
      '@edge-runtime/primitives': 4.1.0
      '@edge-runtime/vm': 3.2.0
      '@types/node': 14.18.33
      '@vercel/build-utils': 7.11.0
      '@vercel/error-utils': 2.0.2
      '@vercel/nft': 0.26.4
      '@vercel/static-config': 3.0.0
      async-listen: 3.0.0
      cjs-module-lexer: 1.2.3
      edge-runtime: 2.5.9
      es-module-lexer: 1.4.1
      esbuild: 0.14.47
      etag: 1.8.1
      node-fetch: 2.6.9
      path-to-regexp: 6.2.1
      ts-morph: 12.0.0
      ts-node: 10.9.1(@types/node@14.18.33)(typescript@4.9.5)
      typescript: 4.9.5
      undici: 5.26.5
    transitivePeerDependencies:
      - '@swc/core'
      - '@swc/wasm'
      - encoding
      - supports-color

  '@vercel/python@4.1.1': {}

  '@vercel/redwood@2.0.8':
    dependencies:
      '@vercel/nft': 0.26.4
      '@vercel/routing-utils': 3.1.0
      semver: 6.3.1
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@vercel/remix-builder@2.1.5':
    dependencies:
      '@vercel/error-utils': 2.0.2
      '@vercel/nft': 0.26.4
      '@vercel/static-config': 3.0.0
      ts-morph: 12.0.0
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@vercel/routing-utils@3.1.0':
    dependencies:
      path-to-regexp: 6.1.0
    optionalDependencies:
      ajv: 6.12.6

  '@vercel/ruby@2.0.5': {}

  '@vercel/static-build@2.4.6':
    dependencies:
      '@vercel/gatsby-plugin-vercel-analytics': 1.0.11
      '@vercel/gatsby-plugin-vercel-builder': 2.0.24
      '@vercel/static-config': 3.0.0
      ts-morph: 12.0.0

  '@vercel/static-config@3.0.0':
    dependencies:
      ajv: 8.6.3
      json-schema-to-ts: 1.6.4
      ts-morph: 12.0.0

  '@vitest/coverage-istanbul@1.6.1(vitest@1.6.1)':
    dependencies:
      debug: 4.4.0
      istanbul-lib-coverage: 3.2.2
      istanbul-lib-instrument: 6.0.3
      istanbul-lib-report: 3.0.1
      istanbul-lib-source-maps: 5.0.6
      istanbul-reports: 3.1.7
      magicast: 0.3.5
      picocolors: 1.1.1
      test-exclude: 6.0.0
      vitest: 1.6.1(@edge-runtime/vm@3.2.0)(@types/node@20.17.19)(@vitest/ui@1.6.1)
    transitivePeerDependencies:
      - supports-color

  '@vitest/expect@1.6.1':
    dependencies:
      '@vitest/spy': 1.6.1
      '@vitest/utils': 1.6.1
      chai: 4.5.0

  '@vitest/runner@1.6.1':
    dependencies:
      '@vitest/utils': 1.6.1
      p-limit: 5.0.0
      pathe: 1.1.2

  '@vitest/snapshot@1.6.1':
    dependencies:
      magic-string: 0.30.17
      pathe: 1.1.2
      pretty-format: 29.7.0

  '@vitest/spy@1.6.1':
    dependencies:
      tinyspy: 2.2.1

  '@vitest/ui@1.6.1(vitest@1.6.1)':
    dependencies:
      '@vitest/utils': 1.6.1
      fast-glob: 3.3.3
      fflate: 0.8.2
      flatted: 3.3.2
      pathe: 1.1.2
      picocolors: 1.1.1
      sirv: 2.0.4
      vitest: 1.6.1(@edge-runtime/vm@3.2.0)(@types/node@20.17.19)(@vitest/ui@1.6.1)

  '@vitest/utils@1.6.1':
    dependencies:
      diff-sequences: 29.6.3
      estree-walker: 3.0.3
      loupe: 2.3.7
      pretty-format: 29.7.0

  abbrev@1.1.1: {}

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  abstract-logging@2.0.1: {}

  acorn-import-attributes@1.9.5(acorn@8.14.0):
    dependencies:
      acorn: 8.14.0

  acorn-jsx@5.3.2(acorn@8.14.0):
    dependencies:
      acorn: 8.14.0

  acorn-walk@8.3.4:
    dependencies:
      acorn: 8.14.0

  acorn@8.14.0: {}

  agent-base@6.0.2:
    dependencies:
      debug: 4.4.0
    transitivePeerDependencies:
      - supports-color

  ajv-formats@2.1.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-formats@3.0.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ajv@8.17.1:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-uri: 3.0.6
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2

  ajv@8.6.3:
    dependencies:
      fast-deep-equal: 3.1.3
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2
      uri-js: 4.4.1

  ansi-escapes@7.0.0:
    dependencies:
      environment: 1.1.0

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  aproba@2.0.0: {}

  are-we-there-yet@2.0.0:
    dependencies:
      delegates: 1.0.0
      readable-stream: 3.6.2

  arg@4.1.0: {}

  arg@4.1.3: {}

  argparse@2.0.1: {}

  array-union@2.1.0: {}

  asn1.js@5.4.1:
    dependencies:
      bn.js: 4.12.1
      inherits: 2.0.4
      minimalistic-assert: 1.0.1
      safer-buffer: 2.1.2

  assertion-error@1.1.0: {}

  async-listen@1.2.0: {}

  async-listen@3.0.0: {}

  async-listen@3.0.1: {}

  async-retry@1.3.3:
    dependencies:
      retry: 0.13.1

  async-sema@3.1.1: {}

  asynckit@0.4.0: {}

  atomic-sleep@1.0.0: {}

  avvio@8.4.0:
    dependencies:
      '@fastify/error': 3.4.1
      fastq: 1.19.0

  awilix@10.0.2:
    dependencies:
      camel-case: 4.1.2
      fast-glob: 3.3.3

  axios@1.7.4:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.1
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  axios@1.7.9:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.1
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  b4a@1.6.7: {}

  balanced-match@1.0.2: {}

  base-x@3.0.10:
    dependencies:
      safe-buffer: 5.2.1

  base-x@4.0.0: {}

  base64-arraybuffer@1.0.2: {}

  base64-js@1.5.1: {}

  bech32@2.0.0: {}

  binary-extensions@2.3.0: {}

  bindings@1.5.0:
    dependencies:
      file-uri-to-path: 1.0.0

  bip174@2.1.1: {}

  bip32@4.0.0:
    dependencies:
      '@noble/hashes': 1.7.1
      '@scure/base': 1.2.4
      typeforce: 1.18.0
      wif: 2.0.6

  bitcoinjs-lib@6.1.7:
    dependencies:
      '@noble/hashes': 1.7.1
      bech32: 2.0.0
      bip174: 2.1.1
      bs58check: 3.0.1
      typeforce: 1.18.0
      varuint-bitcoin: 1.1.2

  blake2b-wasm@2.4.0:
    dependencies:
      b4a: 1.6.7
      nanoassert: 2.0.0

  blake2b@2.1.4:
    dependencies:
      blake2b-wasm: 2.4.0
      nanoassert: 2.0.0

  bloom-filters@3.0.4:
    dependencies:
      '@types/seedrandom': 3.0.8
      base64-arraybuffer: 1.0.2
      is-buffer: 2.0.5
      lodash: 4.17.21
      long: 5.3.0
      reflect-metadata: 0.1.14
      seedrandom: 3.0.5
      xxhashjs: 0.2.2

  bn.js@4.12.1: {}

  bn.js@5.2.1: {}

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  brorand@1.1.0: {}

  browserify-bignum@1.3.0-2: {}

  browserslist@4.24.4:
    dependencies:
      caniuse-lite: 1.0.30001699
      electron-to-chromium: 1.5.99
      node-releases: 2.0.19
      update-browserslist-db: 1.1.2(browserslist@4.24.4)

  bs58@4.0.1:
    dependencies:
      base-x: 3.0.10

  bs58@5.0.0:
    dependencies:
      base-x: 4.0.0

  bs58check@2.1.2:
    dependencies:
      bs58: 4.0.1
      create-hash: 1.2.0
      safe-buffer: 5.2.1

  bs58check@3.0.1:
    dependencies:
      '@noble/hashes': 1.7.1
      bs58: 5.0.0

  buffer-crc32@0.2.13: {}

  buffer-from@1.1.2: {}

  buffer@6.0.3:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  bullmq@5.4.2:
    dependencies:
      cron-parser: 4.9.0
      ioredis: 5.5.0
      lodash: 4.17.21
      msgpackr: 1.11.2
      node-abort-controller: 3.1.1
      semver: 7.7.1
      tslib: 2.8.1
      uuid: 9.0.1
    transitivePeerDependencies:
      - supports-color

  bundle@2.1.0: {}

  bytes@3.1.0: {}

  cac@6.7.14: {}

  callsites@3.1.0: {}

  camel-case@4.1.2:
    dependencies:
      pascal-case: 3.1.2
      tslib: 2.8.1

  camelcase-keys@7.0.2:
    dependencies:
      camelcase: 6.3.0
      map-obj: 4.3.0
      quick-lru: 5.1.1
      type-fest: 1.4.0

  camelcase@6.3.0: {}

  caniuse-lite@1.0.30001699: {}

  cbor-js@0.1.0: {}

  chai@4.5.0:
    dependencies:
      assertion-error: 1.1.0
      check-error: 1.0.3
      deep-eql: 4.1.4
      get-func-name: 2.0.2
      loupe: 2.3.7
      pathval: 1.1.1
      type-detect: 4.1.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.4.1: {}

  check-error@1.0.3:
    dependencies:
      get-func-name: 2.0.2

  chokidar@3.3.1:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.3.0
    optionalDependencies:
      fsevents: 2.1.3

  chownr@1.1.4: {}

  chownr@2.0.0: {}

  cipher-base@1.0.6:
    dependencies:
      inherits: 2.0.4
      safe-buffer: 5.2.1

  cjs-module-lexer@1.2.3: {}

  cli-cursor@5.0.0:
    dependencies:
      restore-cursor: 5.1.0

  cli-truncate@4.0.0:
    dependencies:
      slice-ansi: 5.0.0
      string-width: 7.2.0

  cluster-key-slot@1.1.2: {}

  code-block-writer@10.1.1: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  color-support@1.1.3: {}

  colorette@2.0.20: {}

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@13.1.0: {}

  concat-map@0.0.1: {}

  confbox@0.1.8: {}

  console-control-strings@1.1.0: {}

  content-disposition@0.5.4:
    dependencies:
      safe-buffer: 5.2.1

  content-type@1.0.4: {}

  convert-hrtime@3.0.0: {}

  convert-source-map@2.0.0: {}

  cookie@0.7.2: {}

  core-util-is@1.0.3: {}

  crc@4.3.2(buffer@6.0.3):
    optionalDependencies:
      buffer: 6.0.3

  create-hash@1.2.0:
    dependencies:
      cipher-base: 1.0.6
      inherits: 2.0.4
      md5.js: 1.3.5
      ripemd160: 2.0.2
      sha.js: 2.4.11

  create-require@1.1.1: {}

  cron-parser@4.9.0:
    dependencies:
      luxon: 3.5.0

  cron@2.4.4:
    dependencies:
      '@types/luxon': 3.3.8
      luxon: 3.3.0

  cross-env@7.0.3:
    dependencies:
      cross-spawn: 7.0.6

  cross-fetch@3.2.0:
    dependencies:
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  cuint@0.2.2: {}

  dateformat@4.6.3: {}

  debug@4.1.1:
    dependencies:
      ms: 2.1.1

  debug@4.4.0:
    dependencies:
      ms: 2.1.3

  deep-eql@4.1.4:
    dependencies:
      type-detect: 4.1.0

  deep-freeze-strict@1.1.1: {}

  deep-is@0.1.4: {}

  delayed-stream@1.0.0: {}

  delegates@1.0.0: {}

  denque@2.1.0: {}

  depd@1.1.2: {}

  depd@2.0.0: {}

  detect-libc@2.0.3: {}

  diff-sequences@29.6.3: {}

  diff@4.0.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  doctrine@3.0.0:
    dependencies:
      esutils: 2.0.3

  dotenv@16.4.7: {}

  duplexify@3.7.1:
    dependencies:
      end-of-stream: 1.4.4
      inherits: 2.0.4
      readable-stream: 2.3.8
      stream-shift: 1.0.3

  duplexify@4.1.3:
    dependencies:
      end-of-stream: 1.4.4
      inherits: 2.0.4
      readable-stream: 3.6.2
      stream-shift: 1.0.3

  eastasianwidth@0.2.0: {}

  ecdsa-sig-formatter@1.0.11:
    dependencies:
      safe-buffer: 5.2.1

  ecpair@2.1.0:
    dependencies:
      randombytes: 2.1.0
      typeforce: 1.18.0
      wif: 2.0.6

  edge-runtime@2.5.9:
    dependencies:
      '@edge-runtime/format': 2.2.1
      '@edge-runtime/ponyfill': 2.4.2
      '@edge-runtime/vm': 3.2.0
      async-listen: 3.0.1
      mri: 1.2.0
      picocolors: 1.0.0
      pretty-ms: 7.0.1
      signal-exit: 4.0.2
      time-span: 4.0.0

  electron-to-chromium@1.5.99: {}

  elliptic@6.6.1:
    dependencies:
      bn.js: 4.12.1
      brorand: 1.1.0
      hash.js: 1.1.7
      hmac-drbg: 1.0.1
      inherits: 2.0.4
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  emoji-regex@10.4.0: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  end-of-stream@1.1.0:
    dependencies:
      once: 1.3.3

  end-of-stream@1.4.4:
    dependencies:
      once: 1.4.0

  environment@1.1.0: {}

  es-module-lexer@1.4.1: {}

  esbuild-android-64@0.14.47:
    optional: true

  esbuild-android-arm64@0.14.47:
    optional: true

  esbuild-darwin-64@0.14.47:
    optional: true

  esbuild-darwin-arm64@0.14.47:
    optional: true

  esbuild-freebsd-64@0.14.47:
    optional: true

  esbuild-freebsd-arm64@0.14.47:
    optional: true

  esbuild-linux-32@0.14.47:
    optional: true

  esbuild-linux-64@0.14.47:
    optional: true

  esbuild-linux-arm64@0.14.47:
    optional: true

  esbuild-linux-arm@0.14.47:
    optional: true

  esbuild-linux-mips64le@0.14.47:
    optional: true

  esbuild-linux-ppc64le@0.14.47:
    optional: true

  esbuild-linux-riscv64@0.14.47:
    optional: true

  esbuild-linux-s390x@0.14.47:
    optional: true

  esbuild-netbsd-64@0.14.47:
    optional: true

  esbuild-openbsd-64@0.14.47:
    optional: true

  esbuild-sunos-64@0.14.47:
    optional: true

  esbuild-windows-32@0.14.47:
    optional: true

  esbuild-windows-64@0.14.47:
    optional: true

  esbuild-windows-arm64@0.14.47:
    optional: true

  esbuild@0.14.47:
    optionalDependencies:
      esbuild-android-64: 0.14.47
      esbuild-android-arm64: 0.14.47
      esbuild-darwin-64: 0.14.47
      esbuild-darwin-arm64: 0.14.47
      esbuild-freebsd-64: 0.14.47
      esbuild-freebsd-arm64: 0.14.47
      esbuild-linux-32: 0.14.47
      esbuild-linux-64: 0.14.47
      esbuild-linux-arm: 0.14.47
      esbuild-linux-arm64: 0.14.47
      esbuild-linux-mips64le: 0.14.47
      esbuild-linux-ppc64le: 0.14.47
      esbuild-linux-riscv64: 0.14.47
      esbuild-linux-s390x: 0.14.47
      esbuild-netbsd-64: 0.14.47
      esbuild-openbsd-64: 0.14.47
      esbuild-sunos-64: 0.14.47
      esbuild-windows-32: 0.14.47
      esbuild-windows-64: 0.14.47
      esbuild-windows-arm64: 0.14.47

  esbuild@0.21.5:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.21.5
      '@esbuild/android-arm': 0.21.5
      '@esbuild/android-arm64': 0.21.5
      '@esbuild/android-x64': 0.21.5
      '@esbuild/darwin-arm64': 0.21.5
      '@esbuild/darwin-x64': 0.21.5
      '@esbuild/freebsd-arm64': 0.21.5
      '@esbuild/freebsd-x64': 0.21.5
      '@esbuild/linux-arm': 0.21.5
      '@esbuild/linux-arm64': 0.21.5
      '@esbuild/linux-ia32': 0.21.5
      '@esbuild/linux-loong64': 0.21.5
      '@esbuild/linux-mips64el': 0.21.5
      '@esbuild/linux-ppc64': 0.21.5
      '@esbuild/linux-riscv64': 0.21.5
      '@esbuild/linux-s390x': 0.21.5
      '@esbuild/linux-x64': 0.21.5
      '@esbuild/netbsd-x64': 0.21.5
      '@esbuild/openbsd-x64': 0.21.5
      '@esbuild/sunos-x64': 0.21.5
      '@esbuild/win32-arm64': 0.21.5
      '@esbuild/win32-ia32': 0.21.5
      '@esbuild/win32-x64': 0.21.5

  esbuild@0.23.1:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.23.1
      '@esbuild/android-arm': 0.23.1
      '@esbuild/android-arm64': 0.23.1
      '@esbuild/android-x64': 0.23.1
      '@esbuild/darwin-arm64': 0.23.1
      '@esbuild/darwin-x64': 0.23.1
      '@esbuild/freebsd-arm64': 0.23.1
      '@esbuild/freebsd-x64': 0.23.1
      '@esbuild/linux-arm': 0.23.1
      '@esbuild/linux-arm64': 0.23.1
      '@esbuild/linux-ia32': 0.23.1
      '@esbuild/linux-loong64': 0.23.1
      '@esbuild/linux-mips64el': 0.23.1
      '@esbuild/linux-ppc64': 0.23.1
      '@esbuild/linux-riscv64': 0.23.1
      '@esbuild/linux-s390x': 0.23.1
      '@esbuild/linux-x64': 0.23.1
      '@esbuild/netbsd-x64': 0.23.1
      '@esbuild/openbsd-arm64': 0.23.1
      '@esbuild/openbsd-x64': 0.23.1
      '@esbuild/sunos-x64': 0.23.1
      '@esbuild/win32-arm64': 0.23.1
      '@esbuild/win32-ia32': 0.23.1
      '@esbuild/win32-x64': 0.23.1

  escalade@3.2.0: {}

  escape-html@1.0.3: {}

  escape-string-regexp@4.0.0: {}

  eslint-scope@7.2.2:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint@8.57.1:
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@8.57.1)
      '@eslint-community/regexpp': 4.12.1
      '@eslint/eslintrc': 2.1.4
      '@eslint/js': 8.57.1
      '@humanwhocodes/config-array': 0.13.0
      '@humanwhocodes/module-importer': 1.0.1
      '@nodelib/fs.walk': 1.2.8
      '@ungap/structured-clone': 1.3.0
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.0
      doctrine: 3.0.0
      escape-string-regexp: 4.0.0
      eslint-scope: 7.2.2
      eslint-visitor-keys: 3.4.3
      espree: 9.6.1
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 6.0.1
      find-up: 5.0.0
      glob-parent: 6.0.2
      globals: 13.24.0
      graphemer: 1.4.0
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      is-path-inside: 3.0.3
      js-yaml: 4.1.0
      json-stable-stringify-without-jsonify: 1.0.1
      levn: 0.4.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
      strip-ansi: 6.0.1
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color

  espree@9.6.1:
    dependencies:
      acorn: 8.14.0
      acorn-jsx: 5.3.2(acorn@8.14.0)
      eslint-visitor-keys: 3.4.3

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  estree-walker@2.0.2: {}

  estree-walker@3.0.3:
    dependencies:
      '@types/estree': 1.0.6

  esutils@2.0.3: {}

  etag@1.8.1: {}

  event-target-shim@5.0.1: {}

  eventemitter3@5.0.1: {}

  events-intercept@2.0.0: {}

  events@3.3.0: {}

  execa@3.2.0:
    dependencies:
      cross-spawn: 7.0.6
      get-stream: 5.2.0
      human-signals: 1.1.1
      is-stream: 2.0.1
      merge-stream: 2.0.0
      npm-run-path: 4.0.1
      onetime: 5.1.2
      p-finally: 2.0.1
      signal-exit: 3.0.7
      strip-final-newline: 2.0.0

  execa@8.0.1:
    dependencies:
      cross-spawn: 7.0.6
      get-stream: 8.0.1
      human-signals: 5.0.0
      is-stream: 3.0.0
      merge-stream: 2.0.0
      npm-run-path: 5.3.0
      onetime: 6.0.0
      signal-exit: 4.1.0
      strip-final-newline: 3.0.0

  fast-content-type-parse@1.1.0: {}

  fast-copy@3.0.2: {}

  fast-decode-uri-component@1.0.1: {}

  fast-deep-equal@3.1.3: {}

  fast-glob@3.3.3:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-json-stringify@5.16.1:
    dependencies:
      '@fastify/merge-json-schemas': 0.1.1
      ajv: 8.17.1
      ajv-formats: 3.0.1(ajv@8.17.1)
      fast-deep-equal: 3.1.3
      fast-uri: 2.4.0
      json-schema-ref-resolver: 1.0.1
      rfdc: 1.4.1

  fast-jwt@4.0.5:
    dependencies:
      '@lukeed/ms': 2.0.2
      asn1.js: 5.4.1
      ecdsa-sig-formatter: 1.0.11
      mnemonist: 0.39.8

  fast-levenshtein@2.0.6: {}

  fast-querystring@1.1.2:
    dependencies:
      fast-decode-uri-component: 1.0.1

  fast-redact@3.5.0: {}

  fast-safe-stringify@2.1.1: {}

  fast-uri@2.4.0: {}

  fast-uri@3.0.6: {}

  fastfall@1.5.1:
    dependencies:
      reusify: 1.0.4

  fastify-cron@1.3.1(fastify@4.29.0):
    dependencies:
      '@types/cron': 2.4.3
      cron: 2.4.4
      fastify: 4.29.0
      fastify-plugin: 3.0.1

  fastify-custom-healthcheck@3.1.0:
    dependencies:
      fast-deep-equal: 3.1.3
      fastify-plugin: 4.5.1

  fastify-plugin@3.0.1: {}

  fastify-plugin@4.5.1: {}

  fastify-type-provider-zod@1.2.0(fastify@4.29.0)(zod@3.24.2):
    dependencies:
      fastify: 4.29.0
      zod: 3.24.2
      zod-to-json-schema: 3.24.1(zod@3.24.2)

  fastify@4.29.0:
    dependencies:
      '@fastify/ajv-compiler': 3.6.0
      '@fastify/error': 3.4.1
      '@fastify/fast-json-stringify-compiler': 4.3.0
      abstract-logging: 2.0.1
      avvio: 8.4.0
      fast-content-type-parse: 1.1.0
      fast-json-stringify: 5.16.1
      find-my-way: 8.2.2
      light-my-request: 5.14.0
      pino: 9.6.0
      process-warning: 3.0.0
      proxy-addr: 2.0.7
      rfdc: 1.4.1
      secure-json-parse: 2.7.0
      semver: 7.7.1
      toad-cache: 3.7.0

  fastparallel@2.4.1:
    dependencies:
      reusify: 1.0.4
      xtend: 4.0.2

  fastq@1.19.0:
    dependencies:
      reusify: 1.0.4

  fastseries@1.7.2:
    dependencies:
      reusify: 1.0.4
      xtend: 4.0.2

  fd-slicer@1.1.0:
    dependencies:
      pend: 1.2.0

  fflate@0.8.2: {}

  file-entry-cache@6.0.1:
    dependencies:
      flat-cache: 3.2.0

  file-uri-to-path@1.0.0: {}

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-my-way@8.2.2:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-querystring: 1.1.2
      safe-regex2: 3.1.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@3.2.0:
    dependencies:
      flatted: 3.3.2
      keyv: 4.5.4
      rimraf: 3.0.2

  flatted@3.3.2: {}

  follow-redirects@1.15.9: {}

  foreground-child@3.3.0:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  form-data@4.0.1:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  forwarded@0.2.0: {}

  fs-extra@11.1.0:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 6.1.0
      universalify: 2.0.1

  fs-extra@8.1.0:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 4.0.0
      universalify: 0.1.2

  fs-minipass@1.2.7:
    dependencies:
      minipass: 2.9.0

  fs-minipass@2.1.0:
    dependencies:
      minipass: 3.3.6

  fs.realpath@1.0.0: {}

  fsevents@2.1.3:
    optional: true

  fsevents@2.3.3:
    optional: true

  gauge@3.0.2:
    dependencies:
      aproba: 2.0.0
      color-support: 1.1.3
      console-control-strings: 1.1.0
      has-unicode: 2.0.1
      object-assign: 4.1.1
      signal-exit: 3.0.7
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wide-align: 1.1.5

  generic-pool@3.4.2: {}

  gensync@1.0.0-beta.2: {}

  get-east-asian-width@1.3.0: {}

  get-func-name@2.0.2: {}

  get-stream@5.2.0:
    dependencies:
      pump: 3.0.2

  get-stream@8.0.1: {}

  get-tsconfig@4.10.0:
    dependencies:
      resolve-pkg-maps: 1.0.0

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  globals@11.12.0: {}

  globals@13.24.0:
    dependencies:
      type-fest: 0.20.2

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.3
      ignore: 5.3.2
      merge2: 1.4.1
      slash: 3.0.0

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  has-flag@4.0.0: {}

  has-unicode@2.0.1: {}

  hash-base@3.1.0:
    dependencies:
      inherits: 2.0.4
      readable-stream: 3.6.2
      safe-buffer: 5.2.1

  hash.js@1.1.7:
    dependencies:
      inherits: 2.0.4
      minimalistic-assert: 1.0.1

  help-me@5.0.0: {}

  hmac-drbg@1.0.1:
    dependencies:
      hash.js: 1.1.7
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  html-escaper@2.0.2: {}

  http-errors@1.4.0:
    dependencies:
      inherits: 2.0.1
      statuses: 1.5.0

  http-errors@1.7.3:
    dependencies:
      depd: 1.1.2
      inherits: 2.0.4
      setprototypeof: 1.1.1
      statuses: 1.5.0
      toidentifier: 1.0.0

  http-errors@2.0.0:
    dependencies:
      depd: 2.0.0
      inherits: 2.0.4
      setprototypeof: 1.2.0
      statuses: 2.0.1
      toidentifier: 1.0.1

  https-proxy-agent@5.0.1:
    dependencies:
      agent-base: 6.0.2
      debug: 4.4.0
    transitivePeerDependencies:
      - supports-color

  human-signals@1.1.1: {}

  human-signals@5.0.0: {}

  iconv-lite@0.4.24:
    dependencies:
      safer-buffer: 2.1.2

  ieee754@1.2.1: {}

  ignore@5.3.2: {}

  immediate@3.0.6: {}

  immutable@4.3.7: {}

  import-fresh@3.3.1:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  imurmurhash@0.1.4: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.1: {}

  inherits@2.0.4: {}

  ioredis@5.5.0:
    dependencies:
      '@ioredis/commands': 1.2.0
      cluster-key-slot: 1.1.2
      debug: 4.4.0
      denque: 2.1.0
      lodash.defaults: 4.2.0
      lodash.isarguments: 3.1.0
      redis-errors: 1.2.0
      redis-parser: 3.0.0
      standard-as-callback: 2.1.0
    transitivePeerDependencies:
      - supports-color

  ipaddr.js@1.9.1: {}

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-buffer@2.0.5: {}

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-fullwidth-code-point@4.0.0: {}

  is-fullwidth-code-point@5.0.0:
    dependencies:
      get-east-asian-width: 1.3.0

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-number@7.0.0: {}

  is-path-inside@3.0.3: {}

  is-stream@2.0.1: {}

  is-stream@3.0.0: {}

  isarray@0.0.1: {}

  isarray@1.0.0: {}

  isexe@2.0.0: {}

  istanbul-lib-coverage@3.2.2: {}

  istanbul-lib-instrument@6.0.3:
    dependencies:
      '@babel/core': 7.26.8
      '@babel/parser': 7.26.8
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 7.7.1
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-report@3.0.1:
    dependencies:
      istanbul-lib-coverage: 3.2.2
      make-dir: 4.0.0
      supports-color: 7.2.0

  istanbul-lib-source-maps@5.0.6:
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      debug: 4.4.0
      istanbul-lib-coverage: 3.2.2
    transitivePeerDependencies:
      - supports-color

  istanbul-reports@3.1.7:
    dependencies:
      html-escaper: 2.0.2
      istanbul-lib-report: 3.0.1

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  joycon@3.1.1: {}

  js-sha256@0.11.0: {}

  js-sha512@0.9.0: {}

  js-tokens@4.0.0: {}

  js-tokens@9.0.1: {}

  js-xxhash@1.0.4: {}

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsbi@3.1.3: {}

  jsbi@4.3.0: {}

  jsesc@3.1.0: {}

  json-buffer@3.0.1: {}

  json-schema-ref-resolver@1.0.1:
    dependencies:
      fast-deep-equal: 3.1.3

  json-schema-resolver@2.0.0:
    dependencies:
      debug: 4.4.0
      rfdc: 1.4.1
      uri-js: 4.4.1
    transitivePeerDependencies:
      - supports-color

  json-schema-to-ts@1.6.4:
    dependencies:
      '@types/json-schema': 7.0.15
      ts-toolbelt: 6.15.5

  json-schema-traverse@0.4.1: {}

  json-schema-traverse@1.0.0: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@2.2.3: {}

  jsonfile@4.0.0:
    optionalDependencies:
      graceful-fs: 4.2.11

  jsonfile@6.1.0:
    dependencies:
      universalify: 2.0.1
    optionalDependencies:
      graceful-fs: 4.2.11

  jssha@3.3.1: {}

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lie@3.1.1:
    dependencies:
      immediate: 3.0.6

  light-my-request@5.14.0:
    dependencies:
      cookie: 0.7.2
      process-warning: 3.0.0
      set-cookie-parser: 2.7.1

  lilconfig@3.1.3: {}

  lint-staged@15.4.3:
    dependencies:
      chalk: 5.4.1
      commander: 13.1.0
      debug: 4.4.0
      execa: 8.0.1
      lilconfig: 3.1.3
      listr2: 8.2.5
      micromatch: 4.0.8
      pidtree: 0.6.0
      string-argv: 0.3.2
      yaml: 2.7.0
    transitivePeerDependencies:
      - supports-color

  listr2@8.2.5:
    dependencies:
      cli-truncate: 4.0.0
      colorette: 2.0.20
      eventemitter3: 5.0.1
      log-update: 6.1.0
      rfdc: 1.4.1
      wrap-ansi: 9.0.0

  local-pkg@0.5.1:
    dependencies:
      mlly: 1.7.4
      pkg-types: 1.3.1

  localforage@1.10.0:
    dependencies:
      lie: 3.1.1

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.defaults@4.2.0: {}

  lodash.isarguments@3.1.0: {}

  lodash.isequal@4.5.0: {}

  lodash.merge@4.6.2: {}

  lodash@4.17.21: {}

  log-update@6.1.0:
    dependencies:
      ansi-escapes: 7.0.0
      cli-cursor: 5.0.0
      slice-ansi: 7.1.0
      strip-ansi: 7.1.0
      wrap-ansi: 9.0.0

  long@5.3.0: {}

  loupe@2.3.7:
    dependencies:
      get-func-name: 2.0.2

  lower-case@2.0.2:
    dependencies:
      tslib: 2.8.1

  lru-cache@10.4.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lru-cache@6.0.0:
    dependencies:
      yallist: 4.0.0

  luxon@3.3.0: {}

  luxon@3.5.0: {}

  magic-string@0.30.17:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0

  magicast@0.3.5:
    dependencies:
      '@babel/parser': 7.26.8
      '@babel/types': 7.26.8
      source-map-js: 1.2.1

  make-dir@3.1.0:
    dependencies:
      semver: 6.3.1

  make-dir@4.0.0:
    dependencies:
      semver: 7.7.1

  make-error@1.3.6: {}

  map-obj@4.3.0: {}

  md5.js@1.3.5:
    dependencies:
      hash-base: 3.1.0
      inherits: 2.0.4
      safe-buffer: 5.2.1

  media-typer@0.3.0: {}

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  micro@9.3.5-canary.3:
    dependencies:
      arg: 4.1.0
      content-type: 1.0.4
      raw-body: 2.4.1

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-db@1.53.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mime@3.0.0: {}

  mimic-fn@2.1.0: {}

  mimic-fn@4.0.0: {}

  mimic-function@5.0.1: {}

  minimalistic-assert@1.0.1: {}

  minimalistic-crypto-utils@1.0.1: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@9.0.3:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.8: {}

  minipass@2.9.0:
    dependencies:
      safe-buffer: 5.2.1
      yallist: 3.1.1

  minipass@3.3.6:
    dependencies:
      yallist: 4.0.0

  minipass@5.0.0: {}

  minipass@7.1.2: {}

  minizlib@1.3.3:
    dependencies:
      minipass: 2.9.0

  minizlib@2.1.2:
    dependencies:
      minipass: 3.3.6
      yallist: 4.0.0

  mkdirp@0.5.6:
    dependencies:
      minimist: 1.2.8

  mkdirp@1.0.4: {}

  mlly@1.7.4:
    dependencies:
      acorn: 8.14.0
      pathe: 2.0.3
      pkg-types: 1.3.1
      ufo: 1.5.4

  mnemonist@0.39.6:
    dependencies:
      obliterator: 2.0.5

  mnemonist@0.39.8:
    dependencies:
      obliterator: 2.0.5

  mri@1.2.0: {}

  mrmime@2.0.0: {}

  ms@2.1.1: {}

  ms@2.1.3: {}

  msgpackr-extract@3.0.3:
    dependencies:
      node-gyp-build-optional-packages: 5.2.2
    optionalDependencies:
      '@msgpackr-extract/msgpackr-extract-darwin-arm64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-darwin-x64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-arm': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-arm64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-x64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-win32-x64': 3.0.3
    optional: true

  msgpackr@1.11.2:
    optionalDependencies:
      msgpackr-extract: 3.0.3

  multicoin-address-validator@0.5.24:
    dependencies:
      base-x: 4.0.0
      browserify-bignum: 1.3.0-2
      buffer: 6.0.3
      bundle: 2.1.0
      cbor-js: 0.1.0
      crc: 4.3.2(buffer@6.0.3)
      js-sha512: 0.9.0
      jssha: 3.3.1
      lodash.isequal: 4.5.0

  nanoassert@2.0.0: {}

  nanoid@3.3.8: {}

  natural-compare@1.4.0: {}

  no-case@3.0.4:
    dependencies:
      lower-case: 2.0.2
      tslib: 2.8.1

  node-abi@3.74.0:
    dependencies:
      semver: 7.7.1

  node-abort-controller@3.1.1: {}

  node-fetch@2.6.7:
    dependencies:
      whatwg-url: 5.0.0

  node-fetch@2.6.9:
    dependencies:
      whatwg-url: 5.0.0

  node-fetch@2.7.0:
    dependencies:
      whatwg-url: 5.0.0

  node-gyp-build-optional-packages@5.2.2:
    dependencies:
      detect-libc: 2.0.3
    optional: true

  node-gyp-build@4.8.4: {}

  node-releases@2.0.19: {}

  nopt@5.0.0:
    dependencies:
      abbrev: 1.1.1

  normalize-path@3.0.0: {}

  npm-run-path@4.0.1:
    dependencies:
      path-key: 3.1.1

  npm-run-path@5.3.0:
    dependencies:
      path-key: 4.0.0

  npmlog@5.0.1:
    dependencies:
      are-we-there-yet: 2.0.0
      console-control-strings: 1.1.0
      gauge: 3.0.2
      set-blocking: 2.0.0

  object-assign@4.1.1: {}

  obliterator@2.0.5: {}

  on-exit-leak-free@2.1.2: {}

  once@1.3.3:
    dependencies:
      wrappy: 1.0.2

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  onetime@5.1.2:
    dependencies:
      mimic-fn: 2.1.0

  onetime@6.0.0:
    dependencies:
      mimic-fn: 4.0.0

  onetime@7.0.0:
    dependencies:
      mimic-function: 5.0.1

  openapi-types@12.1.3: {}

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  os-paths@4.4.0: {}

  p-finally@2.0.1: {}

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-limit@5.0.0:
    dependencies:
      yocto-queue: 1.1.1

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  package-json-from-dist@1.0.1: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-ms@2.1.0: {}

  pascal-case@3.1.2:
    dependencies:
      no-case: 3.0.4
      tslib: 2.8.1

  path-browserify@1.0.1: {}

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-key@4.0.0: {}

  path-match@1.2.4:
    dependencies:
      http-errors: 1.4.0
      path-to-regexp: 1.9.0

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-to-regexp@1.9.0:
    dependencies:
      isarray: 0.0.1

  path-to-regexp@6.1.0: {}

  path-to-regexp@6.2.1: {}

  path-type@4.0.0: {}

  pathe@1.1.2: {}

  pathe@2.0.3: {}

  pathval@1.1.1: {}

  peek-stream@1.1.3:
    dependencies:
      buffer-from: 1.1.2
      duplexify: 3.7.1
      through2: 2.0.5

  pend@1.2.0: {}

  picocolors@1.0.0: {}

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  pidtree@0.6.0: {}

  pino-abstract-transport@1.2.0:
    dependencies:
      readable-stream: 4.7.0
      split2: 4.2.0

  pino-abstract-transport@2.0.0:
    dependencies:
      split2: 4.2.0

  pino-pretty@10.3.1:
    dependencies:
      colorette: 2.0.20
      dateformat: 4.6.3
      fast-copy: 3.0.2
      fast-safe-stringify: 2.1.1
      help-me: 5.0.0
      joycon: 3.1.1
      minimist: 1.2.8
      on-exit-leak-free: 2.1.2
      pino-abstract-transport: 1.2.0
      pump: 3.0.2
      readable-stream: 4.7.0
      secure-json-parse: 2.7.0
      sonic-boom: 3.8.1
      strip-json-comments: 3.1.1

  pino-std-serializers@6.2.2: {}

  pino-std-serializers@7.0.0: {}

  pino@8.21.0:
    dependencies:
      atomic-sleep: 1.0.0
      fast-redact: 3.5.0
      on-exit-leak-free: 2.1.2
      pino-abstract-transport: 1.2.0
      pino-std-serializers: 6.2.2
      process-warning: 3.0.0
      quick-format-unescaped: 4.0.4
      real-require: 0.2.0
      safe-stable-stringify: 2.5.0
      sonic-boom: 3.8.1
      thread-stream: 2.7.0

  pino@9.6.0:
    dependencies:
      atomic-sleep: 1.0.0
      fast-redact: 3.5.0
      on-exit-leak-free: 2.1.2
      pino-abstract-transport: 2.0.0
      pino-std-serializers: 7.0.0
      process-warning: 4.0.1
      quick-format-unescaped: 4.0.4
      real-require: 0.2.0
      safe-stable-stringify: 2.5.0
      sonic-boom: 4.2.0
      thread-stream: 3.1.0

  pkg-types@1.3.1:
    dependencies:
      confbox: 0.1.8
      mlly: 1.7.4
      pathe: 2.0.3

  postcss@8.5.2:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.1.1
      source-map-js: 1.2.1

  prelude-ls@1.2.1: {}

  prettier@3.5.1: {}

  pretty-format@29.7.0:
    dependencies:
      '@jest/schemas': 29.6.3
      ansi-styles: 5.2.0
      react-is: 18.3.1

  pretty-ms@7.0.1:
    dependencies:
      parse-ms: 2.1.0

  process-nextick-args@2.0.1: {}

  process-warning@3.0.0: {}

  process-warning@4.0.1: {}

  process@0.11.10: {}

  promisepipe@3.0.0: {}

  proxy-addr@2.0.7:
    dependencies:
      forwarded: 0.2.0
      ipaddr.js: 1.9.1

  proxy-from-env@1.1.0: {}

  pump@3.0.2:
    dependencies:
      end-of-stream: 1.4.4
      once: 1.4.0

  pumpify@2.0.1:
    dependencies:
      duplexify: 4.1.3
      inherits: 2.0.4
      pump: 3.0.2

  punycode@2.3.1: {}

  queue-microtask@1.2.3: {}

  quick-format-unescaped@4.0.4: {}

  quick-lru@5.1.1: {}

  randombytes@2.1.0:
    dependencies:
      safe-buffer: 5.2.1

  raw-body@2.4.1:
    dependencies:
      bytes: 3.1.0
      http-errors: 1.7.3
      iconv-lite: 0.4.24
      unpipe: 1.0.0

  react-is@18.3.1: {}

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readable-stream@4.7.0:
    dependencies:
      abort-controller: 3.0.0
      buffer: 6.0.3
      events: 3.3.0
      process: 0.11.10
      string_decoder: 1.3.0

  readdirp@3.3.0:
    dependencies:
      picomatch: 2.3.1

  real-require@0.2.0: {}

  redis-errors@1.2.0: {}

  redis-parser@3.0.0:
    dependencies:
      redis-errors: 1.2.0

  reflect-metadata@0.1.14: {}

  require-from-string@2.0.2: {}

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  restore-cursor@5.1.0:
    dependencies:
      onetime: 7.0.0
      signal-exit: 4.1.0

  ret@0.4.3: {}

  retry@0.13.1: {}

  reusify@1.0.4: {}

  rfdc@1.4.1: {}

  rimraf@3.0.2:
    dependencies:
      glob: 7.2.3

  ripemd160@2.0.2:
    dependencies:
      hash-base: 3.1.0
      inherits: 2.0.4

  rollup@4.34.6:
    dependencies:
      '@types/estree': 1.0.6
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.34.6
      '@rollup/rollup-android-arm64': 4.34.6
      '@rollup/rollup-darwin-arm64': 4.34.6
      '@rollup/rollup-darwin-x64': 4.34.6
      '@rollup/rollup-freebsd-arm64': 4.34.6
      '@rollup/rollup-freebsd-x64': 4.34.6
      '@rollup/rollup-linux-arm-gnueabihf': 4.34.6
      '@rollup/rollup-linux-arm-musleabihf': 4.34.6
      '@rollup/rollup-linux-arm64-gnu': 4.34.6
      '@rollup/rollup-linux-arm64-musl': 4.34.6
      '@rollup/rollup-linux-loongarch64-gnu': 4.34.6
      '@rollup/rollup-linux-powerpc64le-gnu': 4.34.6
      '@rollup/rollup-linux-riscv64-gnu': 4.34.6
      '@rollup/rollup-linux-s390x-gnu': 4.34.6
      '@rollup/rollup-linux-x64-gnu': 4.34.6
      '@rollup/rollup-linux-x64-musl': 4.34.6
      '@rollup/rollup-win32-arm64-msvc': 4.34.6
      '@rollup/rollup-win32-ia32-msvc': 4.34.6
      '@rollup/rollup-win32-x64-msvc': 4.34.6
      fsevents: 2.3.3

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  safe-buffer@5.1.2: {}

  safe-buffer@5.2.1: {}

  safe-regex2@3.1.0:
    dependencies:
      ret: 0.4.3

  safe-stable-stringify@2.5.0: {}

  safer-buffer@2.1.2: {}

  scrypt-js@3.0.1: {}

  secure-json-parse@2.7.0: {}

  seedrandom@3.0.5: {}

  semver@6.3.1: {}

  semver@7.3.5:
    dependencies:
      lru-cache: 6.0.0

  semver@7.7.1: {}

  set-blocking@2.0.0: {}

  set-cookie-parser@2.7.1: {}

  setprototypeof@1.1.1: {}

  setprototypeof@1.2.0: {}

  sha.js@2.4.11:
    dependencies:
      inherits: 2.0.4
      safe-buffer: 5.2.1

  sha3@2.1.4:
    dependencies:
      buffer: 6.0.3

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  siginfo@2.0.0: {}

  signal-exit@3.0.7: {}

  signal-exit@4.0.2: {}

  signal-exit@4.1.0: {}

  simple-git-hooks@2.11.1: {}

  sirv@2.0.4:
    dependencies:
      '@polka/url': 1.0.0-next.28
      mrmime: 2.0.0
      totalist: 3.0.1

  slash@3.0.0: {}

  slice-ansi@5.0.0:
    dependencies:
      ansi-styles: 6.2.1
      is-fullwidth-code-point: 4.0.0

  slice-ansi@7.1.0:
    dependencies:
      ansi-styles: 6.2.1
      is-fullwidth-code-point: 5.0.0

  sonic-boom@3.8.1:
    dependencies:
      atomic-sleep: 1.0.0

  sonic-boom@4.2.0:
    dependencies:
      atomic-sleep: 1.0.0

  source-map-js@1.2.1: {}

  split2@4.2.0: {}

  stackback@0.0.2: {}

  standard-as-callback@2.1.0: {}

  stat-mode@0.3.0: {}

  statuses@1.5.0: {}

  statuses@2.0.1: {}

  std-env@3.8.0: {}

  steed@1.1.3:
    dependencies:
      fastfall: 1.5.1
      fastparallel: 2.4.1
      fastq: 1.19.0
      fastseries: 1.7.2
      reusify: 1.0.4

  stream-shift@1.0.3: {}

  stream-to-array@2.3.0:
    dependencies:
      any-promise: 1.3.0

  stream-to-promise@2.2.0:
    dependencies:
      any-promise: 1.3.0
      end-of-stream: 1.1.0
      stream-to-array: 2.3.0

  string-argv@0.3.2: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string-width@7.2.0:
    dependencies:
      emoji-regex: 10.4.0
      get-east-asian-width: 1.3.0
      strip-ansi: 7.1.0

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-final-newline@2.0.0: {}

  strip-final-newline@3.0.0: {}

  strip-json-comments@3.1.1: {}

  strip-literal@2.1.1:
    dependencies:
      js-tokens: 9.0.1

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  tar@4.4.18:
    dependencies:
      chownr: 1.1.4
      fs-minipass: 1.2.7
      minipass: 2.9.0
      minizlib: 1.3.3
      mkdirp: 0.5.6
      safe-buffer: 5.2.1
      yallist: 3.1.1

  tar@6.2.1:
    dependencies:
      chownr: 2.0.0
      fs-minipass: 2.1.0
      minipass: 5.0.0
      minizlib: 2.1.2
      mkdirp: 1.0.4
      yallist: 4.0.0

  test-exclude@6.0.0:
    dependencies:
      '@istanbuljs/schema': 0.1.3
      glob: 7.2.3
      minimatch: 3.1.2

  text-table@0.2.0: {}

  thread-stream@2.7.0:
    dependencies:
      real-require: 0.2.0

  thread-stream@3.1.0:
    dependencies:
      real-require: 0.2.0

  through2@2.0.5:
    dependencies:
      readable-stream: 2.3.8
      xtend: 4.0.2

  time-span@4.0.0:
    dependencies:
      convert-hrtime: 3.0.0

  tiny-secp256k1@2.2.3:
    dependencies:
      uint8array-tools: 0.0.7

  tinybench@2.9.0: {}

  tinypool@0.8.4: {}

  tinyspy@2.2.1: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  toad-cache@3.7.0: {}

  toidentifier@1.0.0: {}

  toidentifier@1.0.1: {}

  totalist@3.0.1: {}

  tr46@0.0.3: {}

  tree-kill@1.2.2: {}

  ts-api-utils@1.4.3(typescript@5.7.3):
    dependencies:
      typescript: 5.7.3

  ts-morph@12.0.0:
    dependencies:
      '@ts-morph/common': 0.11.1
      code-block-writer: 10.1.1

  ts-node@10.9.1(@types/node@14.18.33)(typescript@4.9.5):
    dependencies:
      '@cspotcode/source-map-support': 0.8.1
      '@tsconfig/node10': 1.0.11
      '@tsconfig/node12': 1.0.11
      '@tsconfig/node14': 1.0.3
      '@tsconfig/node16': 1.0.4
      '@types/node': 14.18.33
      acorn: 8.14.0
      acorn-walk: 8.3.4
      arg: 4.1.3
      create-require: 1.1.1
      diff: 4.0.2
      make-error: 1.3.6
      typescript: 4.9.5
      v8-compile-cache-lib: 3.0.1
      yn: 3.1.1

  ts-toolbelt@6.15.5: {}

  tslib@2.3.1: {}

  tslib@2.8.1: {}

  tsx@4.19.2:
    dependencies:
      esbuild: 0.23.1
      get-tsconfig: 4.10.0
    optionalDependencies:
      fsevents: 2.3.3

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-detect@4.1.0: {}

  type-fest@0.20.2: {}

  type-fest@1.4.0: {}

  type-is@1.6.18:
    dependencies:
      media-typer: 0.3.0
      mime-types: 2.1.35

  typeforce@1.18.0: {}

  typescript@4.9.5: {}

  typescript@5.7.3: {}

  ufo@1.5.4: {}

  uid-promise@1.0.0: {}

  uint8array-tools@0.0.7: {}

  undici-types@6.19.8: {}

  undici@5.26.5:
    dependencies:
      '@fastify/busboy': 2.1.1

  undici@5.28.5:
    dependencies:
      '@fastify/busboy': 2.1.1

  universalify@0.1.2: {}

  universalify@2.0.1: {}

  unpipe@1.0.0: {}

  update-browserslist-db@1.1.2(browserslist@4.24.4):
    dependencies:
      browserslist: 4.24.4
      escalade: 3.2.0
      picocolors: 1.1.1

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  util-deprecate@1.0.2: {}

  uuid@3.3.2: {}

  uuid@8.3.2: {}

  uuid@9.0.1: {}

  v8-compile-cache-lib@3.0.1: {}

  varuint-bitcoin@1.1.2:
    dependencies:
      safe-buffer: 5.2.1

  vary@1.1.2: {}

  vercel@33.7.1:
    dependencies:
      '@vercel/build-utils': 7.11.0
      '@vercel/fun': 1.1.0
      '@vercel/go': 3.1.1
      '@vercel/hydrogen': 1.0.2
      '@vercel/next': 4.2.0
      '@vercel/node': 3.0.26
      '@vercel/python': 4.1.1
      '@vercel/redwood': 2.0.8
      '@vercel/remix-builder': 2.1.5
      '@vercel/ruby': 2.0.5
      '@vercel/static-build': 2.4.6
      chokidar: 3.3.1
    transitivePeerDependencies:
      - '@swc/core'
      - '@swc/wasm'
      - encoding
      - supports-color

  vite-node@1.6.1(@types/node@20.17.19):
    dependencies:
      cac: 6.7.14
      debug: 4.4.0
      pathe: 1.1.2
      picocolors: 1.1.1
      vite: 5.4.14(@types/node@20.17.19)
    transitivePeerDependencies:
      - '@types/node'
      - less
      - lightningcss
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser

  vite@5.4.14(@types/node@20.17.19):
    dependencies:
      esbuild: 0.21.5
      postcss: 8.5.2
      rollup: 4.34.6
    optionalDependencies:
      '@types/node': 20.17.19
      fsevents: 2.3.3

  vitest@1.6.1(@edge-runtime/vm@3.2.0)(@types/node@20.17.19)(@vitest/ui@1.6.1):
    dependencies:
      '@vitest/expect': 1.6.1
      '@vitest/runner': 1.6.1
      '@vitest/snapshot': 1.6.1
      '@vitest/spy': 1.6.1
      '@vitest/utils': 1.6.1
      acorn-walk: 8.3.4
      chai: 4.5.0
      debug: 4.4.0
      execa: 8.0.1
      local-pkg: 0.5.1
      magic-string: 0.30.17
      pathe: 1.1.2
      picocolors: 1.1.1
      std-env: 3.8.0
      strip-literal: 2.1.1
      tinybench: 2.9.0
      tinypool: 0.8.4
      vite: 5.4.14(@types/node@20.17.19)
      vite-node: 1.6.1(@types/node@20.17.19)
      why-is-node-running: 2.3.0
    optionalDependencies:
      '@edge-runtime/vm': 3.2.0
      '@types/node': 20.17.19
      '@vitest/ui': 1.6.1(vitest@1.6.1)
    transitivePeerDependencies:
      - less
      - lightningcss
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser

  web-vitals@0.2.4: {}

  webidl-conversions@3.0.1: {}

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  why-is-node-running@2.3.0:
    dependencies:
      siginfo: 2.0.0
      stackback: 0.0.2

  wide-align@1.1.5:
    dependencies:
      string-width: 4.2.3

  wif@2.0.6:
    dependencies:
      bs58check: 2.1.2

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrap-ansi@9.0.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 7.2.0
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  ws@8.18.0: {}

  xdg-app-paths@5.1.0:
    dependencies:
      xdg-portable: 7.3.0

  xdg-portable@7.3.0:
    dependencies:
      os-paths: 4.4.0

  xtend@4.0.2: {}

  xxhashjs@0.2.2:
    dependencies:
      cuint: 0.2.2

  yallist@3.1.1: {}

  yallist@4.0.0: {}

  yaml@2.7.0: {}

  yauzl-clone@1.0.4:
    dependencies:
      events-intercept: 2.0.0

  yauzl-promise@2.1.3:
    dependencies:
      yauzl: 2.10.0
      yauzl-clone: 1.0.4

  yauzl@2.10.0:
    dependencies:
      buffer-crc32: 0.2.13
      fd-slicer: 1.1.0

  yn@3.1.1: {}

  yocto-queue@0.1.0: {}

  yocto-queue@1.1.1: {}

  zod-to-json-schema@3.24.1(zod@3.24.2):
    dependencies:
      zod: 3.24.2

  zod@3.24.2: {}


================================================
File: redis.conf
================================================
# Redis configuration
#
# Example: https://raw.githubusercontent.com/redis/redis/7.2/redis.conf

################################## NETWORK #####################################
# TODO: only bind to redis-internal network interface
bind 0.0.0.0

################################ SNAPSHOTTING  ################################

# Save the DB to disk.
#
# save <seconds> <changes> [<seconds> <changes> ...]
#
# Redis will save the DB if the given number of seconds elapsed and it
# surpassed the given number of write operations against the DB.
#
# Snapshotting can be completely disabled with a single empty string argument
# as in following example:
#
# save ""
#
# Unless specified otherwise, by default Redis will save the DB:
#   * After 3600 seconds (an hour) if at least 1 change was performed
#   * After 300 seconds (5 minutes) if at least 100 changes were performed
#   * After 60 seconds if at least 10000 changes were performed
#
# You can set these explicitly by uncommenting the following line.
#
save 3600 1 300 100 60 10000

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
#
# Please check https://redis.io/topics/persistence for more information.
appendonly yes

# Redis can create append-only base files in either RDB or AOF formats. Using
# the RDB format is always faster and more efficient, and disabling it is only
# supported for backward compatibility purposes.
aof-use-rdb-preamble yes


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es2017",
    "module": "commonjs",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "outDir": "dist",
    "typeRoots": [
      "node_modules/@types",
      "src/@types"
    ]
  }
}


================================================
File: vercel.json
================================================
{
  "rewrites": [
    {
      "source": "/(.*)",
      "destination": "/api/serverless.ts"
    }
  ]
}


================================================
File: vitest.config.ts
================================================
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    setupFiles: ['./test/setup.ts'],
    pool: 'forks',
    coverage: {
      provider: 'istanbul',
    },
    testTimeout: 30000,
  },
});


================================================
File: .dockerignore
================================================
.vercel
coverage
dist
node_modules
.env


================================================
File: .env.example
================================================
# Bitcoin network, testnet by default
NETWORK=testnet

# Set /token/generate default domain param
# DOMAIN=localhost

# Trust all proxies (true) or do not trust any proxies (false)
# TRUST_PROXY=true

REDIS_URL=redis://redis:6379

# Sentry DSN URL for error tracking and cron monitoring
SENTRY_DSN_URL=<sentry_dsn_url>
# SENTRY_TRACES_SAMPLE_RATE=0.5
# SENTRY_PROFILES_SAMPLE_RATE=0.5

# Rate limit per minute for the API, 100 by default
RATE_LIMIT_PER_MINUTE=100
# The blocklist of IP addresses that are denied access to the API.
# IP_BLOCKLIST=

# Required in production mode
# In mainnet env, only the administrator could generate access tokens.
ADMIN_USERNAME=<admin_username>
ADMIN_PASSWORD=<admin_password>

# JWT_SECRET is used to sign the JWT token for authentication
JWT_SECRET=<your_secret>
# JWT token denylist
# JWT_DENYLIST=

# Bitcoin data provider, support mempool and electrs
# use electrs as default, mempool as fallback
# change to mempool if you want to use mempool.space as default and electrs as fallback
BITCOIN_DATA_PROVIDER=electrs
# Bitcoin Mempool.space API URL
# optinal when BITCOIN_DATA_PROVIDER=electrs
BITCOIN_MEMPOOL_SPACE_API_URL=https://mempool.space
# Electrs API URL
# optinal when BITCOIN_DATA_PROVIDER=mempool
BITCOIN_ELECTRS_API_URL=<http://electrs:3002>

# SPV Service URL
BITCOIN_SPV_SERVICE_URL=<http://spv:3001>

# CKB RPC URL
CKB_RPC_URL=https://testnet.ckb.dev/rpc

# Paymaster private key for CKB, used to sign the transaction
PAYMASTER_PRIVATE_KEY=
# Paymaster cell capacity in shannons
PAYMASTER_CELL_CAPACITY=31600000000
# Check the paymaster BTC UTXO when processing rgb++ ckb transaction
PAYMASTER_RECEIVE_UTXO_CHECK=false
# Paymaster bitcoin address, used to receive BTC from users
PAYMASTER_RECEIVE_BTC_ADDRESS=<paymaster_btc_address>
# Paymaster receives BTC UTXO size in sats
PAYMASTER_BTC_CONTAINER_FEE_SATS=7000

# BTCTimeLock cell unlock cron job schedule, default is every 5 minutes
UNLOCKER_CRON_SCHEDULE='*/5 * * * *'
# BTCTimeLock cell unlock batch size
UNLOCKER_CELL_BATCH_SIZE=100

# RGB++ CKB transaction Queue cron job delay in milliseconds
# the /rgbpp/v1/transaction/ckb-tx endpoint is called, the transaction will be added to the queue
TRANSACTION_QUEUE_JOB_DELAY=120000
# RGB++ CKB transaction Queue cron job attempts
TRANSACTION_QUEUE_JOB_ATTEMPTS=6
# Pay fee for transaction with pool reject by min fee rate, false by default
TRANSACTION_PAY_FOR_MIN_FEE_RATE_REJECT=false


================================================
File: .eslintrc.json
================================================
{
    "env": {
        "browser": true,
        "es2021": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "rules": {
    }
}


================================================
File: .prettierrc
================================================
{
  "semi": true,
  "tabWidth": 2,
  "useTabs": false,
  "singleQuote": true,
  "jsxSingleQuote": false,
  "trailingComma": "all",
  "endOfLine": "lf",
  "printWidth": 120
}


================================================
File: api/serverless.ts
================================================
import { buildFastify } from '../src/app';

export const config = {
  maxDuration: 300,
};

const app = buildFastify();

export default async (req: Request, res: Response) => {
  await app.ready();
  app.server.emit('request', req, res);
};


================================================
File: docs/upgrading-to-v2.md
================================================
## Upgrading to V2

We have released v2.0.0 for support `mempool.space` API as a Bitcoin data provider, and it 
provides a set of [IBitcoinDataProvider](https://github.com/ckb-cell/btc-assets-api/blob/8fb495576c957e9006ef648d6c24312a3f10e34f/src/services/bitcoin/interface.ts#L3) interfaces. Note that it is still compatible with the `electrs` used previously. 

There are two ways to upgrade: 

### Upgrading from v1.x.x and use electrs (**compatible, by default**)
Suppose you do not want to use the mempool.space API as the main data provider, **you do not need to make any changes**. 

But we recommend you remove the following env vars for safety:

```env
BITCOIN_JSON_RPC_URL=<http://bitcoin:8332>
BITCOIN_JSON_RPC_USERNAME=<rpc_username>
BITCOIN_JSON_RPC_PASSWORD=<rpc_password>
```

and add the following env vars to make sure to use electrs as the primary data provider, and add mempool.space API as a fallback:

```env
BITCOIN_DATA_PROVIDER=electrs # recommend, electrs by default
BITCOIN_MEMPOOL_SPACE_API_URL=https://mempool.space # optional, mempool.space as the fallback
```

### Upgrading from v1.x.x and using mempool.space API (**new feature**)
The new feature in v2.0.0, we can use mempool.space API as the primary data provider, and use electrs as a fallback.

Add the following env vars:

```env
BITCOIN_DATA_PROVIDER=mempool 
BITCOIN_MEMPOOL_SPACE_API_URL=https://mempool.space
```

If you want to use the previous electrs as a fallback, keep the original `BITCOIN_ELECTRS_API_URL` env var. Otherwise, remove this var to avoid using electrs.

```env
BITCOIN_ELECTRS_API_URL=<http://electrs:3002> # optional, electrs as fallback
```

#### Recommended Fees API
If use mempool.space API as the primary data provider, then we can use `/bitcoin/v1/fees/recommended` to get the bitcoin fees. and we will calculate fees when mempool.space recommend fees API unavailable (see https://github.com/ckb-cell/btc-assets-api/pull/114).

**use electrs as the primary data provider and dosen't set `BITCOIN_MEMPOOL_SPACE_API_URL` as a fallback, then recommended fees API will be unavailable**






================================================
File: scripts/protect-branches.sh
================================================
#!/bin/bash

current_branch="$(git branch --show-current)"
for protected_branch in "main" "develop"; do
  if [[ "$protected_branch" == "$current_branch" ]]; then
    echo "ERROR: local branch $current_branch is protected"
    exit 1
  fi
done

exit 0


================================================
File: src/app.ts
================================================
import fastify, { type FastifySchemaCompiler } from 'fastify';
import { FastifyInstance } from 'fastify';
import sensible, { httpErrors } from '@fastify/sensible';
import compress from '@fastify/compress';
import bitcoinRoutes from './routes/bitcoin';
import tokenRoutes from './routes/token';
import swagger from './plugins/swagger';
import jwt from './plugins/jwt';
import cache from './plugins/cache';
import rateLimit from './plugins/rate-limit';
import { getSafeEnvs } from './env';
import container from './container';
import { asValue } from 'awilix';
import options from './options';
import { serializerCompiler, ZodTypeProvider } from 'fastify-type-provider-zod';
import cors from './plugins/cors';
import { NetworkType } from './constants';
import rgbppRoutes from './routes/rgbpp';
import cronRoutes from './routes/cron';
import { provider } from 'std-env';
import ipBlock from './plugins/ip-block';
import internalRoutes from './routes/internal';
import healthcheck from './plugins/healthcheck';
import sentry from './plugins/sentry';
import cron from './plugins/cron';
import { ZodAny } from 'zod';

async function routes(fastify: FastifyInstance) {
  fastify.log.info(`Process env: ${JSON.stringify(getSafeEnvs(), null, 2)}`);

  await fastify.register(cors);
  await fastify.register(sentry);
  fastify.register(sensible);
  fastify.register(compress);
  fastify.register(swagger);
  fastify.register(jwt);
  fastify.register(ipBlock);
  fastify.register(cache);
  fastify.register(rateLimit);
  fastify.register(healthcheck);

  const env = container.resolve('env');
  await container.resolve('bitcoin').checkNetwork(env.NETWORK as NetworkType);

  fastify.register(internalRoutes, { prefix: '/internal' });
  fastify.register(tokenRoutes, { prefix: '/token' });
  fastify.register(bitcoinRoutes, { prefix: '/bitcoin/v1' });
  fastify.register(rgbppRoutes, { prefix: '/rgbpp/v1' });

  // register cron routes only on Vercel
  if (provider === 'vercel' || env.NODE_ENV === 'test') {
    fastify.log.info('Cron routes is registered');
    fastify.register(cronRoutes, { prefix: '/cron' });
  } else {
    fastify.log.info('Cron plugin is registered');
    await fastify.register(cron);
    fastify.addHook('onReady', () => {
      fastify.cron.startAllJobs();
    });
  }
}

export const validatorCompiler: FastifySchemaCompiler<ZodAny> =
  ({ schema }) =>
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (data) => {
    const result = schema.safeParse(data);
    if (result.success) {
      return { value: result.data };
    }

    const error = result.error;
    if (error.errors.length) {
      const firstError = error.errors[0];
      const propName = firstError.path.length ? firstError.path.join('.') : 'param';
      return {
        error: httpErrors.badRequest(`Invalid ${propName}: ${error.errors[0].message}`),
      };
    }
    return { error };
  };

export function buildFastify() {
  const app = fastify(options).withTypeProvider<ZodTypeProvider>();
  app.setValidatorCompiler(validatorCompiler);
  app.setSerializerCompiler(serializerCompiler);

  container.register({ logger: asValue(app.log) });
  app.decorate('container', container);

  app.register(routes);
  return app;
}


================================================
File: src/constants.ts
================================================
import { env, isAdminMode } from './env';
import { BTCTestnetType } from '@rgbpp-sdk/ckb';

export enum NetworkType {
  mainnet = 'mainnet',
  testnet = 'testnet',
  signet = 'signet',
}

export const TestnetTypeMap: Record<NetworkType, BTCTestnetType | undefined> = {
  [NetworkType.mainnet]: undefined,
  [NetworkType.testnet]: 'Testnet3',
  [NetworkType.signet]: 'Signet',
};

export const CUSTOM_HEADERS = {
  ApiCache: 'x-api-cache',
  ResponseCacheable: 'x-response-cacheable',
  ResponseCacheMaxAge: 'x-response-cache-max-age',
};

export enum ApiCacheStatus {
  Hit = 'HIT',
  Miss = 'MISS',
}

export const JWT_IGNORE_URLS = ['/token', '/docs', '/cron', '/internal', '/healthcheck'];
export const SWAGGER_PROD_IGNORE_URLS = isAdminMode ? ['/token', '/cron'] : ['/cron'];

export const VERCEL_MAX_DURATION = 300;

// estimate time: 2024-04-03 09:45:17
// ref: https://mempool.space/testnet/block/000000000000000493ba5eebf0602f3e0e5381dd35f763a62ca7ea135343a0d6
export const BTC_TESTNET_SPV_START_BLOCK_HEIGHT = 2584900;

// estimate time: 2024-06-13 18:31:56
// ref: https://mempool.space/signet/block/000000b2af39a66ec81d414b102804d975c5c4527adfd9bd3cabf2b7b4634737
// Signet BTC SPV deployment time: https://pudge.explorer.nervos.org/transaction/0x61efdeddbaa0bb4132c0eb174b3e8002ff5ec430f61ba46f30768d683c516eec
export const BTC_SIGNET_SPV_START_BLOCK_HEIGHT = 199800;

// estimate time: 2024-04-02 06:20:03
// ref: https://mempool.space/block/0000000000000000000077d98a103858c7d7cbc5ba67a4135f348a436bec1748
export const BTC_MAINNET_SPV_START_BLOCK_HEIGHT = 837300;

export const IS_MAINNET = env.NETWORK === NetworkType.mainnet.toString();
export const TESTNET_TYPE = TestnetTypeMap[env.NETWORK];

// Using unique cell as xUDT information is recommended and refer: https://github.com/utxostack/unique-cell/metadata
export const COMPATIBLE_UDT_INFO_WHITELIST = [
  {
    // USDI: mainnet and testnet codeHashes and information
    // https://explorer.nervos.org/xudt/0x0cae1430516a0c744f6b7c7cb484615f31fb7348327e012181de98f763d02faf
    // https://testnet.explorer.nervos.org/xudt/0x07ac97b5ff3df4b49f59a59f4d80d33d22c1263a57467c512c93b9c29b7a0de3
    codeHashes: [
      '0xbfa35a9c38a676682b65ade8f02be164d48632281477e36f8dc2f41f79e56bfc',
      '0xcc9dc33ef234e14bc788c43a4848556a5fb16401a04662fc55db9bb201987037',
    ],
    hashType: 'type',
    name: 'USDI',
    symbol: 'USDI',
    decimal: 6,
  },
  {
    // RUSD: mainnet and testnet codeHashes and information
    // https://explorer.nervos.org/xudt/0x71ff665b40ba044b1981ea9a8965189559c8e01e8cdfa34a3cc565e1f870a95c
    // https://testnet.explorer.nervos.org/xudt/0x45b32a2bc4285d0a09678eb11960ddc8707bc2779887a09d482e9bfe9a2cdf52
    codeHashes: [
      '0x26a33e0815888a4a0614a0b7d09fa951e0993ff21e55905510104a0b1312032b',
      '0x1142755a044bf2ee358cba9f2da187ce928c91cd4dc8692ded0337efa677d21a',
    ],
    hashType: 'type',
    name: 'RUSD',
    symbol: 'RUSD',
    decimal: 8,
  },
];


================================================
File: src/container.ts
================================================
import { createContainer, InjectionMode, asValue, asClass } from 'awilix';
import { Redis } from 'ioredis';
import pino from 'pino';
import { env } from './env';
import TransactionProcessor from './services/transaction';
import Paymaster from './services/paymaster';
import Unlocker from './services/unlocker';
import SPVClient from './services/spv';
import CKBClient from './services/ckb';
import BitcoinClient from './services/bitcoin';
import RgbppCollector from './services/rgbpp';
import UTXOSyncer from './services/utxo';

export interface Cradle {
  env: typeof env;
  logger: pino.BaseLogger;
  redis: Redis;
  ckb: CKBClient;
  bitcoin: BitcoinClient;
  spv: SPVClient;
  paymaster: Paymaster;
  unlocker: Unlocker;
  transactionProcessor: TransactionProcessor;
  rgbppCollector: RgbppCollector;
  utxoSyncer: UTXOSyncer;
}

const container = createContainer<Cradle>({
  injectionMode: InjectionMode.PROXY,
  strict: true,
});

container.register({
  env: asValue(env),
  logger: asValue(pino()),
  redis: asValue(
    new Redis(env.REDIS_URL, {
      maxRetriesPerRequest: null,
    }),
  ),
  ckb: asClass(CKBClient).singleton(),
  bitcoin: asClass(BitcoinClient).singleton(),
  spv: asClass(SPVClient).singleton(),
  paymaster: asClass(Paymaster).singleton(),
  transactionProcessor: asClass(TransactionProcessor).singleton(),
  unlocker: asClass(Unlocker).singleton(),
  rgbppCollector: asClass(RgbppCollector).singleton(),
  utxoSyncer: asClass(UTXOSyncer).singleton(),
});

export default container;


================================================
File: src/env.ts
================================================
import 'dotenv/config';
import z from 'zod';
import process from 'node:process';
import { omit } from 'lodash';

const envSchema = z
  .object({
    NODE_ENV: z.string().default('development'),
    PORT: z.string().optional(),
    ADDRESS: z.string().optional(),
    NETWORK: z.enum(['mainnet', 'testnet', 'signet']).default('testnet'),
    LOGGER_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),

    /**
     * Set /token/generate default domain param
     */
    DOMAIN: z.string().optional(),

    /**
     * Fastify `trustProxy` option
     * - only supports true/false: Trust all proxies (true) or do not trust any proxies (false).
     *
     * https://fastify.dev/docs/latest/Reference/Server/#trustproxy
     */
    TRUST_PROXY: z
      .enum(['true', 'false'])
      .default('false')
      .transform((value) => value === 'true'),

    /**
     * Redis URL, used for caching and rate limiting.
     */
    REDIS_URL: z.string(),

    /**
     * Sentry Configuration
     */
    SENTRY_DSN_URL: z.string().optional(),
    SENTRY_TRACES_SAMPLE_RATE: z.coerce.number().default(0.5),
    SENTRY_PROFILES_SAMPLE_RATE: z.coerce.number().default(0.5),
    SENTRY_IGNORE_UTXO_SYNC_ERROR_ADDRESSES: z
      .string()
      .default('')
      .transform((value) => {
        const addresses = value.split(',');
        return addresses.map((address) => address.trim());
      }),

    /**
     * The rate limit per minute for each IP address.
     */
    RATE_LIMIT_PER_MINUTE: z.coerce.number().default(100),
    /**
     * The blocklist of IP addresses that are denied access to the API.
     */
    IP_BLOCKLIST: z
      .string()
      .default('')
      .transform((value) => value.split(','))
      .pipe(z.string().array()),

    ADMIN_USERNAME: z.string().optional(),
    ADMIN_PASSWORD: z.string().optional(),

    /**
     * JWT_SECRET is used to sign the JWT token for authentication.
     */
    JWT_SECRET: z.string(),
    /**
     * JWT_DENYLIST is used to store the denylisted JWT tokens.
     * support multiple tokens separated by comma, use token or jti to denylist.
     */
    JWT_DENYLIST: z
      .string()
      .default('')
      .transform((value) => value.split(','))
      .pipe(z.string().array()),

    /**
     * Bitcoin SPV service URL
     * https://github.com/ckb-cell/ckb-bitcoin-spv-service
     */
    BITCOIN_SPV_SERVICE_URL: z.string(),

    /**
     * Bitcoin additional broadcast electrs URL list
     * broadcast transaction to multiple electrs API when receive bitcoin transaction from users
     */
    BITCOIN_ADDITIONAL_BROADCAST_ELECTRS_URL_LIST: z
      .string()
      .transform((value) => value.split(','))
      .optional(),

    /**
     * The URL of the CKB JSON-RPC server.
     */
    CKB_RPC_URL: z.string(),

    /**
     * The async concurrency size limit for CKB RPC requests.
     */
    CKB_RPC_MAX_CONCURRENCY: z.coerce.number().default(100),
    /**
     * Paymaster private key, used to sign the transaction with paymaster cell.
     */
    PAYMASTER_PRIVATE_KEY: z.string(),
    /**
     * Paymaster cell capacity in shannons
     * (254 CKB for RGB++ capacity + 61 CKB for change cell capacity + 1 CKB for fee cell)
     */
    PAYMASTER_CELL_CAPACITY: z.coerce.number().default(316 * 10 ** 8),
    /**
     * Paymaster cell queue preset count, used to refill paymaster cell.
     */
    PAYMASTER_CELL_PRESET_COUNT: z.coerce.number().default(500),
    /**
     * Paymaster cell refill threshold, refill paymaster cell when the balance is less than this threshold.
     */
    PAYMASTER_CELL_REFILL_THRESHOLD: z.coerce.number().default(0.3),

    /**
     * Paymaster receive UTXO check flag, used to check the paymaster BTC UTXO when processing rgb++ ckb transaction.
     */
    PAYMASTER_RECEIVE_UTXO_CHECK: z
      .enum(['true', 'false'])
      .default('false')
      .transform((value) => value === 'true'),
    /**
     * Paymaster bitcoin address, used to receive BTC from users.
     * enable paymaster BTC UTXO check if set.
     */
    PAYMASTER_RECEIVE_BTC_ADDRESS: z.string().optional(),
    /**
     * Paymaster receives BTC UTXO size in sats
     */
    PAYMASTER_BTC_CONTAINER_FEE_SATS: z.coerce.number().default(7000),

    /**
     * BTCTimeLock cell unlock batch size
     */
    UNLOCKER_CRON_SCHEDULE: z.string().default('*/5 * * * *'),
    /**
     * BTCTimeLock cell unlock cron job schedule, default is every 5 minutes
     */
    UNLOCKER_CELL_BATCH_SIZE: z.coerce.number().default(100),
    /**
     * BTCTimeLock cell unlocker monitor slug, used for monitoring unlocker status on sentry
     */
    UNLOCKER_MONITOR_SLUG: z.string().default('btctimelock-cells-unlock'),

    /**
     * RGB++ CKB transaction Queue cron job delay in milliseconds
     * the /rgbpp/v1/transaction/ckb-tx endpoint is called, the transaction will be added to the queue
     */
    TRANSACTION_QUEUE_JOB_DELAY: z.coerce.number().default(120 * 1000),
    /**
     * RGB++ CKB transaction Queue cron job attempts
     * used to retry the transaction queue job when failed
     */
    TRANSACTION_QUEUE_JOB_ATTEMPTS: z.coerce.number().default(6),
    /**
     * Pay fee for transaction with pool reject by min fee rate, false by default
     * (If set to true, the transaction will be paid for the minimum fee rate and resent
     * when the transaction throw PoolRejectedTransactionByMinFeeRate error)
     *
     */
    TRANSACTION_PAY_FOR_MIN_FEE_RATE_REJECT: z
      .enum(['true', 'false'])
      .default('false')
      .transform((value) => value === 'true'),

    /**
     * UTXO sync data cache enable flag, used to cache the UTXO sync data
     * enable by default
     */
    UTXO_SYNC_DATA_CACHE_ENABLE: z
      .enum(['true', 'false'])
      .default('true')
      .transform((value) => value === 'true'),
    /**
     * UTXO sync repeat base duration, used to set the UTXO sync repeat interval
     * repeat job start interval is 10 seconds by default
     */
    UTXO_SYNC_REPEAT_BASE_DURATION: z.coerce.number().default(10 * 1000),
    /**
     * UTXO sync repeat max duration, used to maximum the UTXO sync repeat interval
     * 1 hour by default
     */
    UTXO_SYNC_REPEAT_MAX_DURATION: z.coerce.number().default(60 * 60 * 1000),
    /**
     * UTXO sync repeat expired duration, used to remove the expired UTXO sync job
     * 336 hours by default
     */
    UTXO_SYNC_REPEAT_EXPRIED_DURATION: z.coerce.number().default(336 * 60 * 60 * 1000),
    /**
     * UTXO sync data cache expire duration, used to cache the UTXO sync data
     * 30 minutes by default
     */
    UTXO_SYNC_DATA_CACHE_EXPIRE: z.coerce.number().default(30 * 60 * 1000),

    /**
     * RGB++ collect data cache enable flag, used to cache the RGB++ collect data
     * enable by default
     */
    RGBPP_COLLECT_DATA_CACHE_ENABLE: z
      .enum(['true', 'false'])
      .default('true')
      .transform((value) => value === 'true'),
    /**
     * RGB++ collect data cache expire duration, used to cache the RGB++ collect data
     */
    RGBPP_COLLECT_DATA_CACHE_EXPIRE: z.coerce.number().default(30 * 60 * 1000),
  })
  .and(
    z.union([
      z.object({
        /**
         * Bitcoin Mempool.space API URL
         * used to get bitcoin data and broadcast transaction.
         */
        BITCOIN_MEMPOOL_SPACE_API_URL: z.string(),
        /**
         * The URL of the Electrs API.
         * Electrs is a Rust implementation of Electrum Server.
         * used for fallback when the mempool.space API is not available.
         */
        BITCOIN_ELECTRS_API_URL: z.string().optional(),
        /**
         * The IBitcoinClient methods to use Electrs as default data provider
         * use electrs as default, mempool.space as fallback
         */
        BITCOIN_METHODS_USE_ELECTRS_BY_DEFAULT: z
          .string()
          .default('')
          .transform((value) => value.split(','))
          .pipe(z.string().array()),
        /**
         * Bitcoin data provider, support mempool and electrs
         * use mempool.space as default, electrs as fallback
         * change to electrs if you want to use electrs as default and mempool.space as fallback
         */
        BITCOIN_DATA_PROVIDER: z.literal('mempool'),
      }),
      z.object({
        /**
         * The URL of the Electrs API.
         * Electrs is a Rust implementation of Electrum Server.
         */
        BITCOIN_ELECTRS_API_URL: z.string(),
        /**
         * Bitcoin Mempool.space API URL
         * used to get bitcoin data and broadcast transaction.
         * used for fallback when the electrs API is not available.
         */
        BITCOIN_MEMPOOL_SPACE_API_URL: z.string().optional(),
        BITCOIN_DATA_PROVIDER: z.literal('electrs').default('electrs'),
      }),
    ]),
  );

export type Env = z.infer<typeof envSchema>;
export const env = envSchema.parse(process.env);

export const getSafeEnvs = () =>
  omit(env, ['ADMIN_PASSWORD', 'JWT_SECRET', 'BITCOIN_JSON_RPC_PASSWORD', 'PAYMASTER_PRIVATE_KEY']);

export const isAdminMode = env.NODE_ENV === 'production' && env.ADMIN_USERNAME && env.ADMIN_PASSWORD;


================================================
File: src/error.ts
================================================
export enum AppErrorCode {
  UnknownResponseError = 0x9999, // 39321
  AxiosResponseError = 0x9998, // 39320
}


================================================
File: src/index.ts
================================================
import { env } from './env';
import { buildFastify } from './app';
import * as Sentry from '@sentry/node';

const port = parseInt(env.PORT || '3000', 10);
const host = env.ADDRESS || '0.0.0.0';

const app = buildFastify();

app.listen({ port, host }, (err, address) => {
  if (err) {
    console.error(err);
    Sentry.captureException(err);
  }

  // eslint-disable-next-line no-console
  console.log(`Server listening at ${address}`);
});


================================================
File: src/options.ts
================================================
import { FastifyBaseLogger, FastifyHttpOptions } from 'fastify';
import { provider } from 'std-env';
import { Server } from 'http';
import { env } from './env';

const envToLogger = {
  development: {
    ...(provider !== 'vercel'
      ? {
          transport: {
            target: 'pino-pretty',
            options: {
              translateTime: 'HH:MM:ss Z',
              ignore: 'pid,hostname',
            },
          },
        }
      : {}),
    level: env.LOGGER_LEVEL ?? 'debug',
  },
  production: {
    level: env.LOGGER_LEVEL ?? 'info',
  },
};

const options: FastifyHttpOptions<Server, FastifyBaseLogger> = {
  logger: envToLogger[env.NODE_ENV as keyof typeof envToLogger],
  trustProxy: env.TRUST_PROXY,
};

export default options;


================================================
File: src/@types/fastify/index.d.ts
================================================
import { AwilixContainer, Cradle } from '../../container';
import TransactionProcessor from '../../services/transaction';
import Paymaster from '../../services/paymaster';
import SPVClient from '../../services/spv';
import CKBClient from '../../services/ckb';
import BitcoinClient from '../../services/bitcoin';
import RgbppCollector from '../../services/rgbpp';
import UTXOSyncer from '../../services/utxo';

declare module 'fastify' {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  export interface FastifyInstance<HttpServer = Server, HttpRequest = IncomingMessage, HttpResponse = ServerResponse>
    extends FastifyJwtNamespace<{ namespace: 'security' }> {
    container: AwilixContainer<Cradle>;
    ckb: CKBClient;
    bitcoin: BitcoinClient;
    spv: SPVClient;
    paymaster: Paymaster;
    transactionProcessor: TransactionProcessor;
    rgbppCollector: RgbppCollector;
    utxoSyncer: UTXOSyncer;
  }
}


================================================
File: src/hooks/admin-authorize.ts
================================================
import { FastifyReply, FastifyRequest } from 'fastify';
import { env } from '../env';

export default async function adminAuthorize(request: FastifyRequest, reply: FastifyReply) {
  const { authorization } = request.headers;
  if (!authorization) {
    reply.code(401).send({ error: 'Unauthorized' });
    return;
  }

  const [scheme, token] = authorization.split(' ');
  if (scheme.toLowerCase() !== 'basic') {
    reply.code(401).send({ error: 'Unauthorized' });
    return;
  }

  const [username, password] = Buffer.from(token, 'base64').toString().split(':');
  if (username !== env.ADMIN_USERNAME || password !== env.ADMIN_PASSWORD) {
    reply.code(401).send({ error: 'Unauthorized' });
    return;
  }
}


================================================
File: src/plugins/cache.ts
================================================
import fp from 'fastify-plugin';
import { env } from '../env';
import { FastifyReply, FastifyRequest } from 'fastify';
import { ApiCacheStatus, CUSTOM_HEADERS } from '../constants';
import { DOCS_ROUTE_PREFIX } from './swagger';

const getCacheKey = (request: FastifyRequest) => env.NODE_ENV + '@' + request.url;
const MAX_AGE_FOREVER = 60 * 60 * 24 * 365 * 5;

function setCacheControlHeaders(reply: FastifyReply) {
  reply.cacheControl('public');

  const maxAge = reply.getHeader(CUSTOM_HEADERS.ResponseCacheMaxAge) as number | undefined;
  if (maxAge) {
    reply.removeHeader(CUSTOM_HEADERS.ResponseCacheMaxAge);
    reply.cacheControl('max-age', maxAge);
    return;
  }

  reply.cacheControl('max-age', MAX_AGE_FOREVER);
}

export default fp(async (fastify) => {
  try {
    const redis = fastify.container.resolve('redis');
    await fastify.register(import('@fastify/redis'), { client: redis });

    fastify.addHook('onRequest', (request, reply, done) => {
      if (request.url.startsWith(DOCS_ROUTE_PREFIX)) {
        done();
        return;
      }

      // if the request cache is exist, return it
      const key = getCacheKey(request);
      fastify.Sentry.startSpan({ op: 'cache/get', name: key }, () => {
        fastify.redis.get(key, async (err, result) => {
          if (!err && result) {
            const response = JSON.parse(result);
            reply.header('Content-Type', 'application/json');

            const ttl = await fastify.redis.ttl(key);
            reply.header(CUSTOM_HEADERS.ApiCache, ApiCacheStatus.Hit);
            reply.header(CUSTOM_HEADERS.ResponseCacheMaxAge, ttl);

            reply.send(response);
            return;
          }
          if (err) {
            fastify.log.error(err);
            fastify.Sentry.captureException(err);
          }

          reply.header(CUSTOM_HEADERS.ApiCache, ApiCacheStatus.Miss);
          done();
        });
      });
    });

    fastify.addHook('onSend', (request, reply, payload, next) => {
      if (request.url.startsWith(DOCS_ROUTE_PREFIX)) {
        next();
        return;
      }

      // if the response is already cached, don't cache it again
      if (reply.getHeader(CUSTOM_HEADERS.ApiCache) === ApiCacheStatus.Hit) {
        setCacheControlHeaders(reply);
        next();
        return;
      }

      // if the response is cacheable, cache it for future requests
      if (reply.getHeader(CUSTOM_HEADERS.ResponseCacheable) === 'true' && payload) {
        const response = JSON.parse(payload as string);
        if (response.ok === false || !payload) {
          next();
          return;
        }
        const key = getCacheKey(request);
        const value = JSON.stringify(payload);
        const maxAge = reply.getHeader(CUSTOM_HEADERS.ResponseCacheMaxAge) as number | undefined;
        fastify.Sentry.startSpan({ op: 'cache/set', name: key }, () => {
          fastify.redis.set(key, value, 'EX', maxAge ?? MAX_AGE_FOREVER, (err) => {
            if (err) {
              fastify.log.error(err);
              fastify.Sentry.captureException(err);
            }
            reply.removeHeader(CUSTOM_HEADERS.ResponseCacheable);
            setCacheControlHeaders(reply);
            next();
          });
        });
        return;
      }

      next();
    });
  } catch (err) {
    fastify.log.error(err);
    fastify.Sentry.captureException(err);
  }
});


================================================
File: src/plugins/cors.ts
================================================
import { FastifyRequest } from 'fastify';
import cors, { FastifyCorsOptions } from '@fastify/cors';
import fp from 'fastify-plugin';
import { JWT_IGNORE_URLS } from '../constants';

export default fp(async (fastify) => {
  await fastify.register(cors, () => {
    return async (request: FastifyRequest) => {
      const corsOptions: FastifyCorsOptions = {
        hook: 'preHandler',
        origin: false,
        maxAge: 60 * 60 * 24,
      };

      if (
        request.method.toLowerCase() === 'options' ||
        JWT_IGNORE_URLS.some((prefix) => request.url.startsWith(prefix))
      ) {
        corsOptions.origin = true;
        return corsOptions;
      }

      const { origin } = request.headers;
      const jwt = (await request.jwtDecode()) as { aud: string };
      if (!origin || new URL(origin).hostname !== jwt.aud) {
        return corsOptions;
      }

      corsOptions.origin = origin;
      return corsOptions;
    };
  });
});


================================================
File: src/plugins/cron.ts
================================================
import fp from 'fastify-plugin';
import TransactionProcessor from '../services/transaction';
import cron from 'fastify-cron';
import { Env } from '../env';
import Unlocker from '../services/unlocker';
import RgbppCollector from '../services/rgbpp';
import UTXOSyncer from '../services/utxo';

export default fp(async (fastify) => {
  try {
    const env: Env = fastify.container.resolve('env');

    const getSentryCheckIn = (monitorSlug: string, crontab: string) => {
      const checkInId = fastify.Sentry.captureCheckIn(
        {
          monitorSlug,
          status: 'in_progress',
        },
        {
          schedule: {
            type: 'crontab',
            value: crontab,
          },
          // create a new issue when 3 times missed or error check-ins are processed
          failure_issue_threshold: 3,
          // close the issue when 3 times ok check-ins are processed
          recovery_threshold: 3,
        },
      );
      return {
        ok: () => {
          fastify.Sentry.captureCheckIn({
            checkInId,
            monitorSlug,
            status: 'ok',
          });
        },
        error: () => {
          fastify.Sentry.captureCheckIn({
            checkInId,
            monitorSlug,
            status: 'error',
          });
        },
      };
    };

    // processing rgb++ ckb transaction
    const transactionProcessor: TransactionProcessor = fastify.container.resolve('transactionProcessor');
    fastify.addHook('onReady', async () => {
      transactionProcessor.startProcess({
        onActive: (job) => {
          fastify.log.info(`[TransactionProcessor] job active: ${job.id}`);
        },
        onCompleted: (job) => {
          fastify.log.info(`[TransactionProcessor] job completed: ${job.id}`);
        },
      });
    });
    fastify.addHook('onClose', async () => {
      transactionProcessor.closeProcess();
    });

    const retryMissingTransactionsJob = {
      name: `retry-missing-transacitons-${env.NETWORK}`,
      cronTime: '*/5 * * * *',
      onTick: async () => {
        fastify.Sentry.startSpan({ op: 'cron', name: 'retry-missing-transactions' }, async () => {
          const { name, cronTime } = retryMissingTransactionsJob;
          const checkIn = getSentryCheckIn(name, cronTime);
          try {
            await transactionProcessor.retryMissingTransactions();
            checkIn.ok();
          } catch (err) {
            checkIn.error();
            fastify.log.error(err);
            fastify.Sentry.captureException(err);
          }
        });
      },
    };

    if (env.UTXO_SYNC_DATA_CACHE_ENABLE) {
      const utxoSyncer: UTXOSyncer = fastify.container.resolve('utxoSyncer');
      fastify.addHook('onReady', async () => {
        utxoSyncer.startProcess({
          onActive: (job) => {
            fastify.log.info(`[UTXOSyncer] job active: ${job.id}`);
          },
          onCompleted: async (job) => {
            fastify.log.info(`[UTXOSyncer] job completed: ${job.id}`);
            if (env.RGBPP_COLLECT_DATA_CACHE_ENABLE) {
              const { btcAddress } = job.data;
              const rgbppCollector: RgbppCollector = fastify.container.resolve('rgbppCollector');
              await rgbppCollector.enqueueCollectJob(btcAddress, true);
            }
          },
        });
      });
      fastify.addHook('onClose', async () => {
        utxoSyncer.closeProcess();
      });
    }

    if (env.RGBPP_COLLECT_DATA_CACHE_ENABLE) {
      const rgbppCollector: RgbppCollector = fastify.container.resolve('rgbppCollector');
      fastify.addHook('onReady', async () => {
        rgbppCollector.startProcess({
          onActive: (job) => {
            fastify.log.info(`[RgbppCollector] job active: ${job.id}`);
          },
          onCompleted: (job) => {
            fastify.log.info(`[RgbppCollector] job completed: ${job.id}`);
          },
        });
      });
      fastify.addHook('onClose', async () => {
        rgbppCollector.closeProcess();
      });
    }

    // processing unlock BTC_TIME_LOCK cells
    const unlocker: Unlocker = fastify.container.resolve('unlocker');
    const monitorSlug = env.UNLOCKER_MONITOR_SLUG;
    const unlockBTCTimeLockCellsJob = {
      name: monitorSlug,
      cronTime: env.UNLOCKER_CRON_SCHEDULE,
      onTick: async () => {
        fastify.Sentry.startSpan({ op: 'cron', name: monitorSlug }, async () => {
          const { name, cronTime } = unlockBTCTimeLockCellsJob;
          const checkIn = getSentryCheckIn(name, cronTime);
          try {
            await unlocker.unlockCells();
            checkIn.ok();
          } catch (err) {
            checkIn.error();
            fastify.log.error(err);
            fastify.Sentry.captureException(err);
          }
        });
      },
    };

    fastify.register(cron, {
      jobs: [retryMissingTransactionsJob, unlockBTCTimeLockCellsJob],
    });
  } catch (err) {
    fastify.log.error(err);
    fastify.Sentry.captureException(err);
  }
});


================================================
File: src/plugins/healthcheck.ts
================================================
import healthcheck from 'fastify-custom-healthcheck';
import fp from 'fastify-plugin';
import TransactionProcessor from '../services/transaction';
import Paymaster from '../services/paymaster';
import axios from 'axios';
import { Env } from '../env';

export default fp(async (fastify) => {
  const env: Env = fastify.container.resolve('env');
  await fastify.register(healthcheck, {
    path: '/healthcheck',
    exposeFailure: true,
    schema: false,
  });

  fastify.addHealthCheck('redis', async () => {
    const redis = fastify.container.resolve('redis');
    await redis.ping();
  });

  fastify.addHealthCheck('mempool', async () => {
    await axios.get(`${env.BITCOIN_MEMPOOL_SPACE_API_URL}/api/blocks/tip/height`);
  });

  fastify.addHealthCheck('electrs', async () => {
    await axios.get(`${env.BITCOIN_ELECTRS_API_URL}/blocks/tip/height`);
  });

  fastify.addHealthCheck('queue', async () => {
    const transactionProcessor: TransactionProcessor = fastify.container.resolve('transactionProcessor');
    const counts = await transactionProcessor.getQueueJobCounts();
    if (!counts) {
      throw new Error('Transaction queue is not available');
    }
    const isRunning = await transactionProcessor.isWorkerRunning();
    if (!isRunning) {
      throw new Error('Transaction worker is not running');
    }
  });

  fastify.addHealthCheck('paymaster', async () => {
    const paymaster: Paymaster = fastify.container.resolve('paymaster');
    const count = await paymaster.getPaymasterCellCount();
    if (!count) {
      throw new Error('Paymaster cell queue is empty');
    }
  });
});


================================================
File: src/plugins/ip-block.ts
================================================
import fp from 'fastify-plugin';
import { env } from '../env';

export default fp(async (fastify) => {
  try {
    fastify.addHook('onRequest', async (request, reply) => {
      const ip = request.ip;
      fastify.log.info(`IP: ${ip}`);
      if (env.IP_BLOCKLIST.includes(ip)) {
        reply.code(403).send('Forbidden');
        return;
      }
    });
  } catch (err) {
    fastify.log.error(err);
    fastify.Sentry.captureException(err);
  }
});


================================================
File: src/plugins/jwt.ts
================================================
import { FastifyReply, FastifyRequest } from 'fastify';
import fp from 'fastify-plugin';
import { env } from '../env';
import jwt from '@fastify/jwt';
import { JWT_IGNORE_URLS } from '../constants';
import { HttpStatusCode } from 'axios';

export interface JwtPayload {
  sub: string;
  aud: string;
  jti: string;
}

export default fp(async (fastify) => {
  fastify.register(jwt, {
    secret: env.JWT_SECRET,
    trusted: (_, decodedToken) => {
      // forwards capability, skip token validation if jti is not present
      if (decodedToken.jti === undefined) {
        return true;
      }
      // denylist check, if token or sub or jti is in denylist, return false
      const denylist = env.JWT_DENYLIST;
      const token = fastify.jwt.sign(decodedToken);
      if (
        denylist.includes(token) ||
        denylist.includes(decodedToken.sub) ||
        denylist.includes(decodedToken.aud) ||
        denylist.includes(decodedToken.jti)
      ) {
        return false;
      }
      return true;
    },
  });
  fastify.addHook('onRequest', async (request: FastifyRequest, reply: FastifyReply) => {
    fastify.Sentry.setTag('request.url', request.url);
    if (
      request.method.toLowerCase() === 'options' ||
      JWT_IGNORE_URLS.some((prefix) => request.url.startsWith(prefix))
    ) {
      return;
    }
    try {
      await request.jwtVerify();
      const jwt = (await request.jwtDecode()) as JwtPayload;
      if (jwt) {
        fastify.Sentry.setTags({
          'token.id': jwt.jti,
          'token.app': jwt.sub,
          'token.domain': jwt.aud,
        });
      }
      if (!jwt.aud) {
        reply.status(HttpStatusCode.Unauthorized).send('Invalid audience');
        return;
      }

      const { origin, referer } = request.headers;
      let domain = '';
      if (origin) {
        domain = new URL(origin).hostname;
      } else if (referer) {
        domain = new URL(referer).hostname;
      }
      if (!domain || domain !== jwt.aud) {
        reply.status(HttpStatusCode.Unauthorized).send('Invalid request origin or referer');
      }
    } catch (err) {
      reply.status(HttpStatusCode.Unauthorized).send(err);
    }
  });
});


================================================
File: src/plugins/rate-limit.ts
================================================
import fp from 'fastify-plugin';
import { env } from '../env';
import rateLimit from '@fastify/rate-limit';

export default fp(async (fastify) => {
  try {
    const redis = fastify.container.resolve('redis');
    fastify.register(rateLimit, {
      max: env.RATE_LIMIT_PER_MINUTE,
      redis,
    });
  } catch (err) {
    fastify.log.error(err);
    fastify.Sentry.captureException(err);
  }
});


================================================
File: src/plugins/sentry.ts
================================================
import fp from 'fastify-plugin';
import fastifySentry from '@immobiliarelabs/fastify-sentry';
import { ProfilingIntegration } from '@sentry/profiling-node';
import pkg from '../../package.json';
import { env } from '../env';
import { HttpStatusCode, isAxiosError } from 'axios';
import { BitcoinClientAPIError } from '../services/bitcoin';

export default fp(async (fastify) => {
  await fastify.register(fastifySentry, {
    dsn: env.SENTRY_DSN_URL,
    tracesSampleRate: env.SENTRY_TRACES_SAMPLE_RATE,
    profilesSampleRate: env.SENTRY_PROFILES_SAMPLE_RATE,
    integrations: [...(env.SENTRY_PROFILES_SAMPLE_RATE > 0 ? [new ProfilingIntegration()] : [])],
    environment: env.NODE_ENV,
    release: pkg.version,
    // handle error in the errorResponse function below
    shouldHandleError: () => false,
    errorResponse: (error, _, reply) => {
      if (error instanceof BitcoinClientAPIError) {
        reply.status(error.statusCode ?? HttpStatusCode.InternalServerError).send({ message: error.message });
        return;
      }

      if (isAxiosError(error)) {
        const { response } = error;
        reply.status(response?.status ?? HttpStatusCode.InternalServerError).send({
          message: response?.data ?? error.message,
        });
        return;
      }

      // captureException only for 5xx errors or unknown errors
      if (!error.statusCode || error.statusCode >= HttpStatusCode.InternalServerError) {
        fastify.log.error(error);
        fastify.Sentry.captureException(error);
      }
      reply.status(error.statusCode ?? HttpStatusCode.InternalServerError).send({
        message: error.message,
      });
    },
  });
});


================================================
File: src/plugins/swagger.ts
================================================
import fp from 'fastify-plugin';
import swagger from '@fastify/swagger';
import swaggerUI from '@fastify/swagger-ui';
import { jsonSchemaTransform } from 'fastify-type-provider-zod';
import { env } from '../env';
import { SWAGGER_PROD_IGNORE_URLS } from '../constants';
import pkg from '../../package.json';

export const DOCS_ROUTE_PREFIX = '/docs';

export default fp(async (fastify) => {
  fastify.register(swagger, {
    hideUntagged: true,
    openapi: {
      openapi: '3.1.0',
      info: {
        title: 'Bitcoin/RGB++ Assets API',
        version: pkg.version,
      },
      security: [{ apiKey: [] }],
      components: {
        securitySchemes: {
          apiKey: {
            type: 'apiKey',
            name: 'Authorization',
            in: 'header',
            description: 'JWT token for authentication. Example: Bearer <token>',
          },
        },
      },
    },
    transform: jsonSchemaTransform,
    transformObject: ({ openapiObject }) => {
      if (env.NODE_ENV === 'production') {
        const { paths = {} } = openapiObject;
        openapiObject.paths = Object.entries(paths).reduce((acc, [path, methods]) => {
          if (SWAGGER_PROD_IGNORE_URLS.some((ignorePath) => path.startsWith(ignorePath))) {
            return acc;
          }
          return { ...acc, [path]: methods };
        }, {});
      }
      return openapiObject;
    },
  });
  fastify.register(swaggerUI, {
    routePrefix: DOCS_ROUTE_PREFIX,
    uiConfig: {
      defaultModelRendering: 'model',
      defaultModelExpandDepth: 4,
      defaultModelsExpandDepth: 4,
    },
  });
});


================================================
File: src/routes/bitcoin/address.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { Balance, Transaction, UTXO } from './types';
import validateBitcoinAddress from '../../utils/validators';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import z from 'zod';
import { Env } from '../../env';

const addressRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  const env: Env = fastify.container.resolve('env');

  fastify.addHook('preHandler', async (request) => {
    const { address } = request.params as { address: string };
    const valid = validateBitcoinAddress(address);
    if (!valid) {
      throw fastify.httpErrors.badRequest('Invalid bitcoin address');
    }
  });

  fastify.get(
    '/:address/balance',
    {
      schema: {
        description: 'Get the balance of a bitcoin address',
        tags: ['Bitcoin'],
        params: z.object({
          address: z.string().describe('The Bitcoin address'),
        }),
        querystring: z.object({
          min_satoshi: z.coerce.number().optional().describe('The minimum value of the UTXO in satoshi'),
          no_cache: z
            .enum(['true', 'false'])
            .default('false')
            .describe('Whether to disable cache to get utxos, default is false'),
        }),
        response: {
          200: Balance,
        },
      },
    },
    async (request) => {
      const { address } = request.params;
      const { min_satoshi, no_cache } = request.query;

      const utxos = await fastify.utxoSyncer.getUtxosByAddress(address, no_cache === 'true');
      if (env.UTXO_SYNC_DATA_CACHE_ENABLE) {
        await fastify.utxoSyncer.enqueueSyncJob(address);
      }

      const rgbppUtxoCellsPairs = await fastify.rgbppCollector.getRgbppUtxoCellsPairs(
        address,
        utxos,
        no_cache === 'true',
      );
      if (env.RGBPP_COLLECT_DATA_CACHE_ENABLE) {
        await fastify.rgbppCollector.enqueueCollectJob(address);
      }

      const rgbppUtxoMap = rgbppUtxoCellsPairs.reduce((map, { utxo }) => {
        map.set(utxo.txid + ':' + utxo.vout, utxo);
        return map;
      }, new Map<string, UTXO>());

      const balance: Balance = {
        address,
        total_satoshi: 0,
        satoshi: 0,
        available_satoshi: 0,
        pending_satoshi: 0,
        dust_satoshi: 0,
        rgbpp_satoshi: 0,
        utxo_count: utxos.length,
      };

      for (const utxo of utxos) {
        const isDustUTXO = min_satoshi !== undefined && utxo.value < min_satoshi;
        const isRgbppBound = rgbppUtxoMap.has(utxo.txid + ':' + utxo.vout);

        balance.total_satoshi += utxo.value;
        if (utxo.status.confirmed) {
          if (!isDustUTXO && !isRgbppBound) {
            balance.available_satoshi += utxo.value;
          }
          if (isDustUTXO) {
            balance.dust_satoshi += utxo.value;
          }
          if (isRgbppBound) {
            balance.rgbpp_satoshi += utxo.value;
          }
        } else {
          balance.pending_satoshi += utxo.value;
        }
      }
      // @deprecated for compatibility
      balance.satoshi = balance.available_satoshi;
      return balance;
    },
  );

  fastify.get(
    '/:address/unspent',
    {
      schema: {
        tags: ['Bitcoin'],
        description: 'Get the unspent transaction outputs (UTXOs) of a bitcoin address',
        params: z.object({
          address: z.string().describe('The Bitcoin address'),
        }),
        querystring: z.object({
          only_confirmed: z
            .enum(['true', 'false', 'undefined'])
            .default('true')
            .describe('Only return confirmed UTXOs'),
          min_satoshi: z.coerce.number().optional().describe('The minimum value of the UTXO in satoshi'),
          only_non_rgbpp_utxos: z
            .enum(['true', 'false', 'undefined'])
            .default('false')
            .describe('Only return non-RGBPP UTXOs'),
          no_cache: z
            .enum(['true', 'false'])
            .default('false')
            .describe('Whether to disable cache to get utxos, default is false'),
        }),
        response: {
          200: z.array(UTXO),
        },
      },
    },
    async function (request) {
      const { address } = request.params;
      const { only_confirmed, min_satoshi, only_non_rgbpp_utxos, no_cache } = request.query;

      const utxos = await fastify.utxoSyncer.getUtxosByAddress(address, no_cache === 'true');
      if (env.UTXO_SYNC_DATA_CACHE_ENABLE) {
        await fastify.utxoSyncer.enqueueSyncJob(address);
      }

      const rgbppUtxoCellsPairs =
        only_non_rgbpp_utxos === 'true'
          ? await fastify.rgbppCollector.getRgbppUtxoCellsPairs(address, utxos, no_cache === 'true')
          : [];
      if (env.RGBPP_COLLECT_DATA_CACHE_ENABLE) {
        await fastify.rgbppCollector.enqueueCollectJob(address);
      }
      const rgbppUtxoSet = new Set(rgbppUtxoCellsPairs.map((pair) => pair.utxo.txid + ':' + pair.utxo.vout));

      const conditions: ((utxo: UTXO) => boolean)[] = [];
      if (only_confirmed === 'true') {
        conditions.push((utxo: UTXO) => utxo.status.confirmed);
      }
      if (min_satoshi !== undefined) {
        conditions.push((utxo: UTXO) => utxo.value >= min_satoshi);
      }
      if (only_non_rgbpp_utxos === 'true') {
        conditions.push((utxo: UTXO) => !rgbppUtxoSet.has(utxo.txid + ':' + utxo.vout));
      }

      if (conditions.length === 0) {
        return utxos;
      }

      return utxos.filter((utxo) => {
        const pass = conditions.every((condition) => condition(utxo));
        return pass;
      });
    },
  );

  fastify.get(
    '/:address/txs',
    {
      schema: {
        description: 'Get the transactions of a bitcoin address',
        tags: ['Bitcoin'],
        params: z.object({
          address: z.string().describe('The Bitcoin address'),
        }),
        querystring: z.object({
          after_txid: z.string().optional().describe('The txid of the transaction to start after'),
        }),
        response: {
          200: z.array(Transaction),
        },
      },
    },
    async (request) => {
      const { address } = request.params;
      const { after_txid } = request.query;
      const txs = await fastify.bitcoin.getAddressTxs({ address, after_txid });
      return txs;
    },
  );

  done();
};

export default addressRoutes;


================================================
File: src/routes/bitcoin/block.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { Block } from './types';
import { CUSTOM_HEADERS } from '../../constants';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import z from 'zod';

const blockRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.get(
    '/:hash',
    {
      schema: {
        description: 'Get a block by its hash',
        tags: ['Bitcoin'],
        params: z.object({
          hash: z.string().length(64, 'should be a 64-character hex string').describe('The Bitcoin block hash'),
        }),
        response: {
          200: Block,
        },
      },
    },
    async (request, reply) => {
      const { hash } = request.params;
      const block = await fastify.bitcoin.getBlock({ hash });
      reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
      return block;
    },
  );

  fastify.get(
    '/:hash/txids',
    {
      schema: {
        description: 'Get block transaction ids by its hash',
        tags: ['Bitcoin'],
        params: z.object({
          hash: z.string().length(64, 'should be a 64-character hex string').describe('The Bitcoin block hash'),
        }),
        response: {
          200: z.object({
            txids: z.array(z.string()),
          }),
        },
      },
    },
    async (request, reply) => {
      const { hash } = request.params;
      const txids = await fastify.bitcoin.getBlockTxids({ hash });
      reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
      return { txids };
    },
  );

  fastify.get(
    '/:hash/header',
    {
      schema: {
        description: 'Get a block header by its hash',
        tags: ['Bitcoin'],
        params: z.object({
          hash: z.string().length(64, 'should be a 64-character hex string').describe('The Bitcoin block hash'),
        }),
        response: {
          200: z.object({
            header: z.string(),
          }),
        },
      },
    },
    async (request, reply) => {
      const { hash } = request.params;
      const header = await fastify.bitcoin.getBlockHeader({ hash });
      reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
      return {
        header,
      };
    },
  );

  fastify.get(
    '/height/:height',
    {
      schema: {
        description: 'Get a block hash by its height',
        tags: ['Bitcoin'],
        params: z.object({
          height: z
            .string()
            .min(1, 'cannot be empty')
            .pipe(z.coerce.number().min(0, 'cannot be negative'))
            .describe('The Bitcoin block height'),
        }),
        response: {
          200: z.object({
            hash: z.string(),
          }),
        },
      },
    },
    async (request, reply) => {
      const { height } = request.params;
      const [hash, chain] = await Promise.all([
        fastify.bitcoin.getBlockHeight({ height }),
        fastify.bitcoin.getBlockchainInfo(),
      ]);
      if (height < chain.blocks) {
        reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
      }
      return { hash };
    },
  );

  done();
};

export default blockRoutes;


================================================
File: src/routes/bitcoin/fees.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { RecommendedFees } from './types';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { CUSTOM_HEADERS } from '../../constants';

const feesRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.get(
    '/recommended',
    {
      schema: {
        description: 'Get recommended fees for Bitcoin transactions',
        tags: ['Bitcoin'],
        response: {
          200: RecommendedFees,
        },
      },
    },
    async (_, reply) => {
      const fees = await fastify.bitcoin.getFeesRecommended();
      reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
      reply.header(CUSTOM_HEADERS.ResponseCacheMaxAge, 10);
      return fees;
    },
  );
  done();
};

export default feesRoutes;


================================================
File: src/routes/bitcoin/index.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import infoRoute from './info';
import blockRoutes from './block';
import transactionRoutes from './transaction';
import addressRoutes from './address';
import container from '../../container';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import BitcoinClient from '../../services/bitcoin';
import feesRoutes from './fees';
import UTXOSyncer from '../../services/utxo';
import RgbppCollector from '../../services/rgbpp';

const bitcoinRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.decorate('bitcoin', container.resolve<BitcoinClient>('bitcoin'));
  fastify.decorate('utxoSyncer', container.resolve<UTXOSyncer>('utxoSyncer'));
  fastify.decorate('rgbppCollector', container.resolve<RgbppCollector>('rgbppCollector'));

  fastify.register(infoRoute);
  fastify.register(blockRoutes, { prefix: '/block' });
  fastify.register(transactionRoutes, { prefix: '/transaction' });
  fastify.register(addressRoutes, { prefix: '/address' });
  fastify.register(feesRoutes, { prefix: '/fees' });
  done();
};

export default bitcoinRoutes;


================================================
File: src/routes/bitcoin/info.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { ChainInfo } from './types';
import { ZodTypeProvider } from 'fastify-type-provider-zod';

const infoRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.get(
    '/info',
    {
      schema: {
        description: 'Get information about the Bitcoin blockchain',
        tags: ['Bitcoin'],
        response: {
          200: ChainInfo,
        },
      },
    },
    async () => {
      const blockchainInfo = await fastify.bitcoin.getBlockchainInfo();
      return blockchainInfo;
    },
  );
  done();
};

export default infoRoute;


================================================
File: src/routes/bitcoin/transaction.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { Transaction } from './types';
import { CUSTOM_HEADERS } from '../../constants';
import z from 'zod';
import { ZodTypeProvider } from 'fastify-type-provider-zod';

const transactionRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.post(
    '',
    {
      schema: {
        description: 'Send a raw transaction to the Bitcoin network',
        tags: ['Bitcoin'],
        body: z.object({
          txhex: z.string().describe('The raw transaction hex'),
        }),
        response: {
          200: z.object({
            txid: z.string(),
          }),
        },
      },
    },
    async (request) => {
      const { txhex } = request.body;
      const txid = await fastify.bitcoin.postTx({ txhex });
      return {
        txid,
      };
    },
  );

  fastify.get(
    '/:txid',
    {
      schema: {
        description: 'Get a transaction by its txid',
        tags: ['Bitcoin'],
        params: z.object({
          txid: z.string().length(64, 'should be a 64-character hex string').describe('The Bitcoin transaction id'),
        }),
        response: {
          200: Transaction,
        },
      },
    },
    async (request, reply) => {
      const { txid } = request.params;
      const transaction = await fastify.bitcoin.getTx({ txid });
      if (transaction.status.confirmed) {
        reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
      }
      return transaction;
    },
  );

  fastify.get(
    '/:txid/hex',
    {
      schema: {
        description: 'Get a transaction hex by its txid',
        tags: ['Bitcoin'],
        params: z.object({
          txid: z.string().length(64, 'should be a 64-character hex string').describe('The Bitcoin transaction id'),
        }),
        response: {
          200: z.object({
            hex: z.string(),
          }),
        },
      },
    },
    async (request, reply) => {
      const { txid } = request.params;
      const hex = await fastify.bitcoin.getTxHex({ txid });
      reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
      return { hex };
    },
  );
  done();
};

export default transactionRoutes;


================================================
File: src/routes/bitcoin/types.ts
================================================
import { z } from 'zod';

export const ChainInfo = z.object({
  chain: z.string(),
  blocks: z.number(),
  bestblockhash: z.string(),
  difficulty: z.number(),
  mediantime: z.number(),
});

export const Block = z.object({
  id: z.string(),
  height: z.number(),
  version: z.number(),
  timestamp: z.number(),
  tx_count: z.number(),
  size: z.number(),
  weight: z.number(),
  merkle_root: z.string(),
  previousblockhash: z.string(),
  mediantime: z.number(),
  nonce: z.number(),
  bits: z.number(),
  difficulty: z.number(),
});

export const Status = z.object({
  confirmed: z.boolean(),
  block_height: z.number().optional(),
  block_hash: z.string().optional(),
  block_time: z.number().optional(),
});

export const Balance = z.object({
  address: z.string(),
  total_satoshi: z.number().describe('Total balance in satoshi (available + pending + dust/rgbpp-bound)'),
  pending_satoshi: z.number().describe('Pending balance in satoshi (unconfirmed)'),
  satoshi: z.number().describe('@deprecated Use available_satoshi'),
  available_satoshi: z.number().describe('Available balance in satoshi (confirmed and not dust/rgbpp-bound)'),
  dust_satoshi: z.number().describe('Dust balance in satoshi (confirmed and below min_satoshi threshold)'),
  rgbpp_satoshi: z.number().describe('RGB++ bound balance in satoshi (confirmed and RGB++ bound)'),
  utxo_count: z.number(),
});

export const UTXO = z.object({
  txid: z.string(),
  vout: z.number(),
  value: z.number(),
  status: Status,
});

const Output = z.object({
  scriptpubkey: z.string(),
  scriptpubkey_asm: z.string(),
  scriptpubkey_type: z.string(),
  scriptpubkey_address: z.string().optional(),
  value: z.number(),
});

const Input = z.object({
  txid: z.string(),
  vout: z.number(),
  prevout: Output.or(z.null()),
  scriptsig: z.string(),
  scriptsig_asm: z.string(),
  witness: z.array(z.string()).optional(),
  is_coinbase: z.boolean(),
  sequence: z.coerce.number(),
});

export const Transaction = z.object({
  txid: z.string(),
  version: z.number(),
  locktime: z.number(),
  vin: z.array(Input),
  vout: z.array(Output),
  size: z.number(),
  weight: z.number(),
  fee: z.number(),
  status: Status,
});

export const RecommendedFees = z.object({
  fastestFee: z.number(),
  halfHourFee: z.number(),
  hourFee: z.number(),
  economyFee: z.number(),
  minimumFee: z.number(),
});

export type ChainInfo = z.infer<typeof ChainInfo>;
export type Block = z.infer<typeof Block>;
export type Balance = z.infer<typeof Balance>;
export type UTXO = z.infer<typeof UTXO>;
export type Transaction = z.infer<typeof Transaction>;
export type RecommendedFees = z.infer<typeof RecommendedFees>;


================================================
File: src/routes/cron/collect-rgbpp-cells.ts
================================================
import pino from 'pino';
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import container from '../../container';
import { VERCEL_MAX_DURATION } from '../../constants';
import RgbppCollector from '../../services/rgbpp';

const collectRgbppCellsCronRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (
  fastify,
  _,
  done,
) => {
  fastify.get(
    '/collect-rgbpp-cells',
    {
      schema: {
        tags: ['Cron Task'],
        description: 'Run UTXO sync cron task to update data cache, used for serverless deployment',
      },
    },
    async () => {
      const logger = container.resolve<pino.BaseLogger>('logger');
      const rgbppCollector: RgbppCollector = container.resolve('rgbppCollector');
      try {
        await new Promise((resolve) => {
          setTimeout(resolve, (VERCEL_MAX_DURATION - 10) * 1000);
          rgbppCollector.startProcess({
            onActive: (job) => {
              logger.info(`[rgbppCollector] Job active: ${job.id}`);
            },
            onCompleted: (job) => {
              logger.info(`[rgbppCollector] Job completed: ${job.id}`);
            },
          });
        });
        await rgbppCollector.pauseProcess();
        await rgbppCollector.closeProcess();
      } catch (err) {
        logger.error(err);
        fastify.Sentry.captureException(err);
      }
    },
  );
  done();
};

export default collectRgbppCellsCronRoute;


================================================
File: src/routes/cron/index.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { Server } from 'http';
import processTransactionsCronRoute from './process-transactions';
import unlockCellsCronRoute from './unlock-cells';
import syncUTXOCronRoute from './sync-utxo';
import collectRgbppCellsCronRoute from './collect-rgbpp-cells';

const cronRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.register(processTransactionsCronRoute);
  fastify.register(unlockCellsCronRoute);
  fastify.register(syncUTXOCronRoute);
  fastify.register(collectRgbppCellsCronRoute);
  done();
};

export default cronRoutes;


================================================
File: src/routes/cron/process-transactions.ts
================================================
import pino from 'pino';
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import container from '../../container';
import TransactionProcessor from '../../services/transaction';
import { VERCEL_MAX_DURATION } from '../../constants';

const processTransactionsCronRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (
  fastify,
  _,
  done,
) => {
  fastify.get(
    '/process-transactions',
    {
      schema: {
        tags: ['Cron Task'],
        description: 'Run RGB++ CKB transaction cron task, used for serverless deployment',
      },
    },
    async () => {
      const logger = container.resolve<pino.BaseLogger>('logger');
      const transactionProcessor: TransactionProcessor = container.resolve('transactionProcessor');
      try {
        await new Promise((resolve) => {
          setTimeout(resolve, (VERCEL_MAX_DURATION - 10) * 1000);
          transactionProcessor.startProcess({
            onActive: (job) => {
              logger.info(`[TransactionProcessor] Job active: ${job.id}`);
            },
            onCompleted: (job) => {
              logger.info(`[TransactionProcessor] Job completed: ${job.id}`);
            },
          });
        });
        await transactionProcessor.pauseProcess();
        await transactionProcessor.closeProcess();
      } catch (err) {
        logger.error(err);
        fastify.Sentry.captureException(err);
      }
    },
  );
  done();
};

export default processTransactionsCronRoute;


================================================
File: src/routes/cron/sync-utxo.ts
================================================
import pino from 'pino';
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import container from '../../container';
import { VERCEL_MAX_DURATION } from '../../constants';
import UTXOSyncer from '../../services/utxo';

const syncUTXOCronRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.get(
    '/sync-utxo',
    {
      schema: {
        tags: ['Cron Task'],
        description: 'Run UTXO sync cron task to update data cache, used for serverless deployment',
      },
    },
    async () => {
      const logger = container.resolve<pino.BaseLogger>('logger');
      const utxoSyncer: UTXOSyncer = container.resolve('utxoSyncer');
      try {
        await new Promise((resolve) => {
          setTimeout(resolve, (VERCEL_MAX_DURATION - 10) * 1000);
          utxoSyncer.startProcess({
            onActive: (job) => {
              logger.info(`[UTXOSyncer] Job active: ${job.id}`);
            },
            onCompleted: (job) => {
              logger.info(`[UTXOSyncer] Job completed: ${job.id}`);
            },
          });
        });
        await utxoSyncer.pauseProcess();
        await utxoSyncer.closeProcess();
      } catch (err) {
        logger.error(err);
        fastify.Sentry.captureException(err);
      }
    },
  );
  done();
};

export default syncUTXOCronRoute;


================================================
File: src/routes/cron/unlock-cells.ts
================================================
import pino from 'pino';
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import container from '../../container';
import Unlocker from '../../services/unlocker';

const unlockCellsCronRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (
  fastify,
  _,
  done,
) => {
  fastify.get(
    '/unlock-cells',
    {
      schema: {
        tags: ['Cron Task'],
        description: 'Run BTC_TIME_LOCK cells unlock cron task, used for serverless deployment',
      },
    },
    async () => {
      const logger = container.resolve<pino.BaseLogger>('logger');
      const unlocker: Unlocker = container.resolve('unlocker');
      try {
        await unlocker.unlockCells();
      } catch (err) {
        logger.error(err);
        fastify.Sentry.captureException(err);
      }
    },
  );
  done();
};

export default unlockCellsCronRoute;


================================================
File: src/routes/internal/index.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { env } from '../../env';
import adminAuthorize from '../../hooks/admin-authorize';
import jobRoutes from './job';
import container from '../../container';

const internalRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  if (env.NODE_ENV === 'production' && env.ADMIN_USERNAME && env.ADMIN_PASSWORD) {
    fastify.addHook('onRequest', adminAuthorize);
  }

  fastify.decorate('transactionProcessor', container.resolve('transactionProcessor'));

  fastify.register(jobRoutes, { prefix: '/job' });
  done();
};

export default internalRoutes;


================================================
File: src/routes/internal/job.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { Server } from 'http';
import z from 'zod';
import { env } from '../../env';

const jobRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.post(
    '/retry-all-failed',
    {
      schema: {
        description: 'Retry all failed transactions.',
        body: z.object({
          max_attempts: z.coerce.number().optional().default(env.TRANSACTION_QUEUE_JOB_ATTEMPTS),
        }),
        response: {
          200: z.array(
            z.object({
              txid: z.string().describe('The list of BTC txids that have been retried'),
              state: z.string().describe('The state of the transactions'),
            }),
          ),
        },
      },
    },
    async (request) => {
      const { max_attempts } = request.body;
      const results = await fastify.transactionProcessor.retryAllFailedJobs(max_attempts);
      return results;
    },
  );

  done();
};

export default jobRoutes;


================================================
File: src/routes/rgbpp/address.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import validateBitcoinAddress from '../../utils/validators';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { CKBTransaction, Cell, IsomorphicTransaction, Script, XUDTBalance } from './types';
import z from 'zod';
import { Env } from '../../env';
import {
  isScriptEqual,
  buildPreLockArgs,
  getXudtTypeScript,
  isTypeAssetSupported,
  isUtxoAirdropBadgeType,
  unpackRgbppLockArgs,
} from '@rgbpp-sdk/ckb';
import { groupBy, uniq } from 'lodash';
import { BI } from '@ckb-lumos/lumos';
import { UTXO } from '../../services/bitcoin/schema';
import { Transaction as BTCTransaction } from '../bitcoin/types';
import { TransactionWithStatus } from '../../services/ckb';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';
import { filterCellsByTypeScript, getTypeScript } from '../../utils/typescript';
import { remove0x } from '@rgbpp-sdk/btc';
import { isRgbppLock } from '../../utils/lockscript';
import { IS_MAINNET } from '../../constants';

const addressRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  const env: Env = fastify.container.resolve('env');

  fastify.addHook('preHandler', async (request) => {
    const { btc_address } = request.params as { btc_address: string };
    const valid = validateBitcoinAddress(btc_address);
    if (!valid) {
      throw fastify.httpErrors.badRequest('Invalid bitcoin address');
    }
  });

  /**
   * Get UTXOs by btc address
   */
  async function getUtxos(btc_address: string, no_cache?: string) {
    const utxos = await fastify.utxoSyncer.getUtxosByAddress(btc_address, no_cache === 'true');
    if (env.UTXO_SYNC_DATA_CACHE_ENABLE) {
      await fastify.utxoSyncer.enqueueSyncJob(btc_address);
    }
    return utxos;
  }

  /**
   * Get RGB++ assets by btc address
   */
  async function getRgbppAssetsCells(btc_address: string, utxos: UTXO[], no_cache?: string) {
    const rgbppUtxoCellsPairs = await fastify.rgbppCollector.getRgbppUtxoCellsPairs(
      btc_address,
      utxos,
      no_cache === 'true',
    );
    if (env.RGBPP_COLLECT_DATA_CACHE_ENABLE) {
      await fastify.rgbppCollector.enqueueCollectJob(btc_address);
    }
    const cells = rgbppUtxoCellsPairs.map((pair) => pair.cells).flat();
    return cells;
  }

  /**
   * Filter RgbppLock cells by cells
   */
  function getRgbppLockCellsByCells(cells: Cell[]): Cell[] {
    return cells.filter((cell) => isRgbppLock(cell.cellOutput.lock));
  }

  fastify.get(
    '/:btc_address/assets',
    {
      schema: {
        description: 'Get RGB++ assets by btc address',
        tags: ['RGB++'],
        params: z.object({
          btc_address: z.string(),
        }),
        querystring: z.object({
          type_script: Script.or(z.string())
            .optional()
            .describe(
              `
              type script to filter cells

              two ways to provide:
              - as a object: 'encodeURIComponent(JSON.stringify({"codeHash":"0x...", "args":"0x...", "hashType":"type"}))'
              - as a hex string: '0x...' (You can pack by @ckb-lumos/codec blockchain.Script.pack({ "codeHash": "0x...", ... }))
            `,
            ),
          no_cache: z
            .enum(['true', 'false'])
            .default('false')
            .describe('Whether to disable cache to get RGB++ assets, default is false'),
        }),
        response: {
          200: z.array(Cell.merge(z.object({ typeHash: z.string().optional() }))),
        },
      },
    },
    async (request) => {
      const { btc_address } = request.params;
      const { no_cache } = request.query;
      const utxos = await getUtxos(btc_address, no_cache);
      const cells = await getRgbppAssetsCells(btc_address, utxos, no_cache);
      const typeScript = getTypeScript(request.query.type_script);
      const assetCells = typeScript ? filterCellsByTypeScript(cells, typeScript) : cells;
      return assetCells.map((cell) => {
        const typeHash = cell.cellOutput.type ? computeScriptHash(cell.cellOutput.type) : undefined;
        return {
          ...cell,
          typeHash,
        };
      });
    },
  );

  fastify.get(
    '/:btc_address/balance',
    {
      schema: {
        description: `
          Get RGB++ balance by btc address, support xUDT, compatible-xUDT and Pre-claim UTXO Airdrop Badge for now. 
          
          An address with more than 50 pending BTC transactions is uncommon. 
          However, if such a situation arises, it potentially affecting the returned total_amount.
        `,
        tags: ['RGB++'],
        params: z.object({
          btc_address: z.string(),
        }),
        querystring: z.object({
          type_script: Script.or(z.string())
            .describe(
              `
              type script to filter cells

              two ways to provide:
              - as a object: 'encodeURIComponent(JSON.stringify({"codeHash":"0x...", "args":"0x...", "hashType":"type"}))'
              - as a hex string: '0x...' (You can pack by @ckb-lumos/codec blockchain.Script.pack({ "codeHash": "0x...", ... }))
            `,
            )
            .default(getXudtTypeScript(IS_MAINNET)),
          no_cache: z
            .enum(['true', 'false'])
            .default('false')
            .describe('Whether to disable cache to get RGB++ assets, default is false'),
        }),
        response: {
          200: z.object({
            address: z.string(),
            xudt: z.array(XUDTBalance),
          }),
        },
      },
    },
    async (request) => {
      const { btc_address } = request.params;
      const { no_cache } = request.query;

      const typeScript = getTypeScript(request.query.type_script);
      if (
        !typeScript ||
        !(isTypeAssetSupported(typeScript, IS_MAINNET) || isUtxoAirdropBadgeType(typeScript, IS_MAINNET))
      ) {
        throw fastify.httpErrors.badRequest('Unsupported type asset');
      }

      const xudtBalances: Record<string, XUDTBalance> = {};
      const utxos = await getUtxos(btc_address, no_cache);

      // Find confirmed RgbppLock XUDT assets
      const confirmedUtxos = utxos.filter((utxo) => utxo.status.confirmed);
      const confirmedCells = await getRgbppAssetsCells(btc_address, confirmedUtxos, no_cache);
      const confirmedTargetCells = filterCellsByTypeScript(confirmedCells, typeScript);
      const availableXudtBalances = await fastify.rgbppCollector.getRgbppBalanceByCells(confirmedTargetCells);
      Object.keys(availableXudtBalances).forEach((key) => {
        const { amount, ...xudtInfo } = availableXudtBalances[key];
        xudtBalances[key] = {
          ...xudtInfo,
          total_amount: amount,
          available_amount: amount,
          pending_amount: '0x0',
        };
      });

      // Find all unconfirmed RgbppLock XUDT outputs
      const pendingUtxos = utxos.filter(
        (utxo) =>
          !utxo.status.confirmed ||
          // include utxo that confirmed in 20 minutes to avoid missing pending xudt
          (utxo.status.block_time && Date.now() / 1000 - utxo.status.block_time < 20 * 60),
      );
      const pendingUtxosGroup = groupBy(pendingUtxos, (utxo) => utxo.txid);
      const pendingTxids = Object.keys(pendingUtxosGroup);
      const pendingOutputCellsGroup = await Promise.all(
        pendingTxids.map(async (txid) => {
          const cells = await fastify.transactionProcessor.getPendingOutputCellsByTxid(txid);
          const lockArgsSet = new Set(pendingUtxosGroup[txid].map((utxo) => buildPreLockArgs(utxo.vout)));
          return cells.filter((cell) => lockArgsSet.has(cell.cellOutput.lock.args));
        }),
      );
      const pendingOutputCells = filterCellsByTypeScript(pendingOutputCellsGroup.flat(), typeScript);
      const pendingXudtBalances = await fastify.rgbppCollector.getRgbppBalanceByCells(pendingOutputCells);
      Object.values(pendingXudtBalances).forEach(({ amount, type_hash, ...xudtInfo }) => {
        if (!xudtBalances[type_hash]) {
          xudtBalances[type_hash] = {
            ...xudtInfo,
            type_hash,
            total_amount: '0x0',
            available_amount: '0x0',
            pending_amount: '0x0',
          };
        }

        xudtBalances[type_hash].pending_amount = BI.from(xudtBalances[type_hash].pending_amount)
          .add(BI.from(amount))
          .toHexString();
      });

      // Find spent RgbppLock XUDT assets in the inputs of the unconfirmed transactions
      // XXX: the bitcoin.getAddressTxs() API only returns up to 50 mempool transactions
      const latestTxs = await fastify.bitcoin.getAddressTxs({ address: btc_address });
      const unconfirmedTxids = latestTxs.filter((tx) => !tx.status.confirmed).map((tx) => tx.txid);
      const spendingInputCellsGroup = await Promise.all(
        unconfirmedTxids.map(async (txid) => {
          const inputCells = await fastify.transactionProcessor.getPendingInputCellsByTxid(txid);
          const inputRgbppCells = getRgbppLockCellsByCells(filterCellsByTypeScript(inputCells, typeScript));
          const inputCellLockArgs = inputRgbppCells.map((cell) => unpackRgbppLockArgs(cell.cellOutput.lock.args));

          const txids = uniq(inputCellLockArgs.map((args) => remove0x(args.btcTxId)));
          const txs = await Promise.all(txids.map((txid) => fastify.bitcoin.getTx({ txid })));
          const txsMap = txs.reduce(
            (sum, tx, index) => {
              const txid = txids[index];
              sum[txid] = tx ?? null;
              return sum;
            },
            {} as Record<string, BTCTransaction | null>,
          );

          return inputRgbppCells.filter((_, index) => {
            const lockArgs = inputCellLockArgs[index];
            const tx = txsMap[remove0x(lockArgs.btcTxId)];
            const utxo = tx?.vout[lockArgs.outIndex];
            return utxo?.scriptpubkey_address === btc_address;
          });
        }),
      );
      const spendingInputCells = spendingInputCellsGroup.flat();
      const spendingXudtBalances = await fastify.rgbppCollector.getRgbppBalanceByCells(spendingInputCells);
      Object.values(spendingXudtBalances).forEach(({ amount, type_hash, ...xudtInfo }) => {
        if (!xudtBalances[type_hash]) {
          xudtBalances[type_hash] = {
            ...xudtInfo,
            type_hash,
            total_amount: '0x0',
            available_amount: '0x0',
            pending_amount: '0x0',
          };
        }

        xudtBalances[type_hash].total_amount = BI.from(xudtBalances[type_hash].total_amount)
          .add(BI.from(amount))
          .toHexString();
      });

      return {
        address: btc_address,
        xudt: Object.values(xudtBalances),
      };
    },
  );

  async function getIsomorphicTx(btcTx: BTCTransaction) {
    const isomorphicTx: IsomorphicTransaction = {
      ckbVirtualTx: undefined,
      ckbTx: undefined,
      status: { confirmed: false },
    };
    const setCkbTxAndStatus = (tx: TransactionWithStatus) => {
      isomorphicTx.ckbTx = CKBTransaction.parse(tx.transaction);
      isomorphicTx.status.confirmed = tx.txStatus.status === 'committed';
    };

    const job = await fastify.transactionProcessor.getTransactionRequest(btcTx.txid);
    if (job) {
      const { ckbRawTx } = job.data.ckbVirtualResult;
      isomorphicTx.ckbVirtualTx = ckbRawTx;
      // if the job is completed, get the ckb tx hash and fetch the ckb tx
      const state = await job.getState();
      if (state === 'completed') {
        const ckbTx = await fastify.ckb.rpc.getTransaction(job.returnvalue);
        // remove ckbRawTx to reduce response size
        isomorphicTx.ckbVirtualTx = undefined;
        setCkbTxAndStatus(ckbTx);
      }
      return isomorphicTx;
    }
    const rgbppLockTx = await fastify.rgbppCollector.queryRgbppLockTxByBtcTx(btcTx);
    if (rgbppLockTx) {
      const ckbTx = await fastify.ckb.rpc.getTransaction(rgbppLockTx.txHash);
      setCkbTxAndStatus(ckbTx);
    } else {
      const btcTimeLockTx = await fastify.rgbppCollector.queryBtcTimeLockTxByBtcTx(btcTx);
      if (btcTimeLockTx) {
        setCkbTxAndStatus(btcTimeLockTx);
      }
    }
    return isomorphicTx;
  }

  fastify.get(
    '/:btc_address/activity',
    {
      schema: {
        description: 'Get RGB++ activity by btc address',
        tags: ['RGB++'],
        params: z.object({
          btc_address: z.string(),
        }),
        querystring: z.object({
          type_script: Script.or(z.string())
            .describe(
              `
              type script to filter cells

              two ways to provide:
              - as a object: 'encodeURIComponent(JSON.stringify({"codeHash":"0x...", "args":"0x...", "hashType":"type"}))'
              - as a hex string: '0x...' (You can pack by @ckb-lumos/codec blockchain.Script.pack({ "codeHash": "0x...", ... }))
            `,
            )
            .optional(),
          rgbpp_only: z
            .enum(['true', 'false'])
            .default('false')
            .describe('Whether to get RGB++ only activity, default is false'),
          after_btc_txid: z.string().optional().describe('Get activity after this btc txid'),
        }),
        response: {
          200: z.object({
            address: z.string(),
            txs: z.array(
              z
                .object({
                  btcTx: BTCTransaction,
                })
                .and(
                  z.union([
                    z.object({
                      isRgbpp: z.literal(true),
                      isomorphicTx: IsomorphicTransaction,
                    }),
                    z.object({ isRgbpp: z.literal(false) }),
                  ]),
                ),
            ),
            cursor: z.string().optional(),
          }),
        },
      },
    },
    async (request) => {
      const { btc_address } = request.params;
      const { rgbpp_only, after_btc_txid } = request.query;
      const typeScript = getTypeScript(request.query.type_script);

      const btcTxs = await fastify.bitcoin.getAddressTxs({
        address: btc_address,
        after_txid: after_btc_txid,
      });

      let txs = await Promise.all(
        btcTxs.map(async (btcTx) => {
          const isomorphicTx = await getIsomorphicTx(btcTx);
          const isRgbpp = isomorphicTx.ckbVirtualTx || isomorphicTx.ckbTx;
          if (!isRgbpp) {
            return {
              btcTx,
              isRgbpp: false,
            } as const;
          }

          const inputs = isomorphicTx.ckbVirtualTx?.inputs || isomorphicTx.ckbTx?.inputs || [];
          const inputCells = await fastify.ckb.getInputCellsByOutPoint(inputs.map((input) => input.previousOutput!));
          const inputCellOutputs = inputCells.map((cell) => cell.cellOutput);

          const outputs = isomorphicTx.ckbVirtualTx?.outputs || isomorphicTx.ckbTx?.outputs || [];

          return {
            btcTx,
            isRgbpp: true,
            isomorphicTx: {
              ...isomorphicTx,
              inputs: inputCellOutputs,
              outputs,
            },
          } as const;
        }),
      );

      if (rgbpp_only === 'true') {
        txs = txs.filter((tx) => tx.isRgbpp);
      }

      if (typeScript) {
        txs = txs.filter((tx) => {
          if (!tx.isRgbpp) {
            return false;
          }
          const cells = [...tx.isomorphicTx.inputs, ...tx.isomorphicTx.outputs];
          const filteredCells = cells.filter((cell) => {
            if (!cell.type) return false;
            if (!typeScript.args) {
              const script = { ...cell.type, args: '' };
              return isScriptEqual(script, typeScript);
            }
            return isScriptEqual(cell.type, typeScript);
          });
          return filteredCells.length > 0;
        });
      }

      const cursor = btcTxs.length > 0 ? btcTxs[btcTxs.length - 1].txid : undefined;
      return {
        address: btc_address,
        txs,
        cursor,
      };
    },
  );

  done();
};

export default addressRoutes;


================================================
File: src/routes/rgbpp/assets.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { Server } from 'http';
import z from 'zod';
import { Cell, Script, SporeTypeInfo, XUDTTypeInfo } from './types';
import { UTXO } from '../../services/bitcoin/schema';
import { getTypeScript } from '../../utils/typescript';
import { IndexerCell, isSporeTypeSupported, isUDTTypeSupported, isUtxoAirdropBadgeType } from '@rgbpp-sdk/ckb';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';
import { getSporeConfig, unpackToRawClusterData, unpackToRawSporeData } from '../../utils/spore';
import { SearchKey } from '../../services/rgbpp';
import { IS_MAINNET } from '../../constants';

const assetsRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.get(
    '/:btc_txid',
    {
      schema: {
        description: `Get RGB++ assets by BTC txid.`,
        tags: ['RGB++'],
        params: z.object({
          btc_txid: z.string().length(64, 'Should be a 64-character hex string'),
        }),
        response: {
          200: z.array(
            Cell.merge(
              z.object({
                typeHash: z.string().optional(),
              }),
            ),
          ),
        },
      },
    },
    async (request) => {
      const { btc_txid } = request.params;
      const transaction = await fastify.bitcoin.getTx({ txid: btc_txid });

      const utxos = transaction.vout.map((vout, index) => {
        return {
          txid: btc_txid,
          vout: index,
          value: vout.value,
          status: {
            confirmed: true,
          },
        } as UTXO;
      });

      const batchCells = await fastify.rgbppCollector.getRgbppCellsByBatchRequest(utxos);
      return batchCells.flat().map((cell) => {
        const typeHash = cell.cellOutput.type ? computeScriptHash(cell.cellOutput.type) : undefined;
        return {
          ...cell,
          typeHash,
        };
      });
    },
  );

  fastify.get(
    '/:btc_txid/:vout',
    {
      schema: {
        description: 'Get RGB++ assets by btc txid and vout',
        tags: ['RGB++'],
        params: z.object({
          btc_txid: z.string().length(64, 'should be a 64-character hex string'),
          vout: z.string().min(1, 'cannot be empty').pipe(z.coerce.number().min(0, 'cannot be negative')),
        }),
        response: {
          200: z.array(
            Cell.merge(
              z.object({
                typeHash: z.string().optional(),
              }),
            ),
          ),
        },
      },
    },
    async (request) => {
      const { btc_txid, vout } = request.params;
      const utxo: UTXO = {
        txid: btc_txid,
        vout,
        // We don't need the value here, so we just set it to 0
        value: 0,
        status: {
          confirmed: true,
        },
      };

      const batchCells = await fastify.rgbppCollector.getRgbppCellsByBatchRequest([utxo]);
      return batchCells.flat().map((cell) => {
        const typeHash = cell.cellOutput.type ? computeScriptHash(cell.cellOutput.type) : undefined;
        return {
          ...cell,
          typeHash,
        };
      });
    },
  );

  fastify.get(
    '/type',
    {
      schema: {
        description: 'Get RGB++ assets type info by typescript',
        tags: ['RGB++'],
        querystring: z.object({
          type_script: Script.or(z.string())
            .optional()
            .describe(
              `
              type script to filter cells

              two ways to provide:
              - as a object: 'encodeURIComponent(JSON.stringify({"codeHash":"0x...", "args":"0x...", "hashType":"type"}))'
              - as a hex string: '0x...' (You can pack by @ckb-lumos/codec blockchain.Script.pack({ "codeHash": "0x...", ... }))
            `,
            ),
        }),
        response: {
          200: z
            .union([
              z
                .object({
                  type: z.literal('xudt'),
                })
                .merge(XUDTTypeInfo),
              z
                .object({
                  type: z.literal('spore'),
                })
                .merge(SporeTypeInfo),
            ])
            .nullable(),
        },
      },
    },
    async (request) => {
      const typeScript = getTypeScript(request.query.type_script);
      if (!typeScript) {
        return null;
      }
      // The pre-claimed airdrop badge type script asset is not fully compatible with the standard xUDT
      // type script and its token info and metadata should be decoded from the info cells.
      if (isUDTTypeSupported(typeScript, IS_MAINNET) || isUtxoAirdropBadgeType(typeScript, IS_MAINNET)) {
        const infoCell = await fastify.ckb.getInfoCellData(typeScript);
        const typeHash = computeScriptHash(typeScript);
        if (!infoCell) {
          return null;
        }
        return {
          type: 'xudt' as const,
          type_hash: typeHash,
          type_script: typeScript,
          ...infoCell,
        };
      }
      if (isSporeTypeSupported(typeScript, IS_MAINNET)) {
        const searchKey: SearchKey = {
          script: typeScript,
          scriptType: 'type',
          withData: true,
        };
        const result = await fastify.ckb.rpc.getCells(searchKey, 'desc', '0x1');
        const [sporeCell] = result.objects;
        const sporeData = unpackToRawSporeData(sporeCell.outputData!);
        const sporeInfo: SporeTypeInfo = {
          contentType: sporeData.contentType,
        };
        if (sporeData.clusterId) {
          const sporeConfig = getSporeConfig(IS_MAINNET);
          const batchRequest = fastify.ckb.rpc.createBatchRequest(
            sporeConfig.scripts.Cluster.versions.map((version) => {
              const clusterScript = {
                ...version.script,
                args: sporeData.clusterId!,
              };
              const searchKey: SearchKey = {
                script: clusterScript,
                scriptType: 'type',
                withData: true,
              };
              return ['getCells', searchKey, 'desc', '0x1'];
            }),
          );
          const cells = await batchRequest.exec();
          const [cell] = cells.map(({ objects }: { objects: IndexerCell[] }) => objects).flat();
          const clusterData = unpackToRawClusterData(cell.outputData!);
          sporeInfo.cluster = {
            id: sporeData.clusterId,
            name: clusterData.name,
            description: clusterData.description,
          };
        }
        return {
          type: 'spore' as const,
          ...sporeInfo,
        };
      }
      return null;
    },
  );

  done();
};

export default assetsRoute;


================================================
File: src/routes/rgbpp/index.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import container from '../../container';
import transactionRoutes from './transaction';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import assetsRoute from './assets';
import addressRoutes from './address';
import spvRoute from './spv';
import paymasterRoutes from './paymaster';

const rgbppRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.decorate('transactionProcessor', container.resolve('transactionProcessor'));
  fastify.decorate('paymaster', container.resolve('paymaster'));
  fastify.decorate('rgbppCollector', container.resolve('rgbppCollector'));
  fastify.decorate('utxoSyncer', container.resolve('utxoSyncer'));
  fastify.decorate('ckb', container.resolve('ckb'));
  fastify.decorate('bitcoin', container.resolve('bitcoin'));
  fastify.decorate('spv', container.resolve('spv'));

  fastify.register(transactionRoutes, { prefix: '/transaction' });
  fastify.register(assetsRoute, { prefix: '/assets' });
  fastify.register(addressRoutes, { prefix: '/address' });
  fastify.register(spvRoute, { prefix: '/btc-spv' });
  fastify.register(paymasterRoutes, { prefix: '/paymaster' });
  done();
};

export default rgbppRoutes;


================================================
File: src/routes/rgbpp/paymaster.ts
================================================
import { HttpStatusCode } from 'axios';
import { FastifyPluginCallback } from 'fastify';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { Server } from 'http';
import z from 'zod';

const paymasterRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.get(
    '/info',
    {
      schema: {
        description: 'Get RGB++ paymaster information',
        tags: ['RGB++'],
        response: {
          200: z.object({
            btc_address: z.string().describe('Bitcoin address to send funds to'),
            ckb_address: z.string().describe('CKB address to pay cell capacity to'),
            fee: z.coerce.number().describe('Container fee in satoshis'),
          }),
        },
      },
    },
    async (_, reply) => {
      const btc_address = fastify.paymaster.btcAddress;
      if (!btc_address) {
        reply.status(HttpStatusCode.NotFound);
        return;
      }

      const ckb_address = fastify.paymaster.ckbAddress;
      const fee = fastify.paymaster.containerFee;
      return { btc_address, ckb_address, fee };
    },
  );
  done();
};

export default paymasterRoutes;


================================================
File: src/routes/rgbpp/spv.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { BitcoinSPVError, TxProof } from '../../services/spv';
import { CUSTOM_HEADERS } from '../../constants';
import { HttpStatusCode } from 'axios';
import { Server } from 'http';
import z from 'zod';

export const SPV_PROOF_CACHE_MAX_AGE = 60;

const spvRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.get(
    '/proof',
    {
      schema: {
        description: 'Get proof of a Bitcoin transaction from SPV service',
        tags: ['RGB++'],
        querystring: z.object({
          btc_txid: z.string().describe('The Bitcoin transaction id'),
          confirmations: z.coerce.number().describe('The number of confirmations'),
        }),
        response: {
          200: TxProof,
          503: BitcoinSPVError.schema,
        },
      },
    },
    async (request, reply) => {
      try {
        const { btc_txid, confirmations } = request.query;
        const proof = await fastify.spv.getTxProof(btc_txid, confirmations);
        if (proof) {
          reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
          reply.header(CUSTOM_HEADERS.ResponseCacheMaxAge, SPV_PROOF_CACHE_MAX_AGE);
        }
        return proof;
      } catch (err) {
        if (err instanceof BitcoinSPVError) {
          reply.status(HttpStatusCode.ServiceUnavailable);
          reply.header('Retry-After', (SPV_PROOF_CACHE_MAX_AGE * 1000).toString());
          return {
            code: err.code,
            message: err.message,
          };
        }
        throw err;
      }
    },
  );

  done();
};

export default spvRoute;


================================================
File: src/routes/rgbpp/transaction.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { Server } from 'http';
import z from 'zod';
import { CKBVirtualResult } from './types';
import { Job } from 'bullmq';
import { CUSTOM_HEADERS } from '../../constants';
import { JwtPayload } from '../../plugins/jwt';

const transactionRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.post(
    '/ckb-tx',
    {
      schema: {
        description: 'Submit a RGB++ CKB transaction',
        tags: ['RGB++'],
        body: z.object({
          btc_txid: z.string(),
          ckb_virtual_result: CKBVirtualResult.or(z.string()).transform((value) => {
            if (typeof value === 'string') {
              value = JSON.parse(value);
            }
            const parsed = CKBVirtualResult.safeParse(value);
            if (!parsed.success) {
              throw fastify.httpErrors.badRequest(
                `Invalid CKB virtual result: ${JSON.stringify(parsed.error.flatten())}`,
              );
            }
            return parsed.data;
          }),
        }),
        response: {
          200: z.object({
            state: z.string().describe('The state of the transaction, waiting by default'),
          }),
        },
      },
    },
    async (request, reply) => {
      const { btc_txid, ckb_virtual_result } = request.body;
      const jwt = (await request.jwtDecode()) as JwtPayload;
      const job: Job = await fastify.transactionProcessor.enqueueTransaction({
        txid: btc_txid,
        ckbVirtualResult: ckb_virtual_result,
        context: { jwt },
      });
      const state = await job.getState();
      reply.send({ state });
    },
  );

  fastify.get(
    '/:btc_txid',
    {
      schema: {
        description: `Get the CKB transaction hash by BTC txid.`,
        tags: ['RGB++'],
        params: z.object({
          btc_txid: z.string().length(64, 'should be a 64-character hex string'),
        }),
        response: {
          200: z.object({
            txhash: z.string().describe('The CKB transaction hash'),
          }),
        },
      },
    },
    async (request, reply) => {
      const { btc_txid } = request.params;
      // get the transaction hash from the job if it exists
      const job = await fastify.transactionProcessor.getTransactionRequest(btc_txid);
      if (job?.returnvalue) {
        return { txhash: job.returnvalue };
      }

      const btcTx = await fastify.bitcoin.getTx({ txid: btc_txid });
      const rgbppLockTx = await fastify.rgbppCollector.queryRgbppLockTxByBtcTx(btcTx);
      if (rgbppLockTx) {
        reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
        return { txhash: rgbppLockTx.txHash };
      }
      const btcTimeLockTx = await fastify.rgbppCollector.queryBtcTimeLockTxByBtcTx(btcTx);
      if (btcTimeLockTx) {
        reply.header(CUSTOM_HEADERS.ResponseCacheable, 'true');
        return { txhash: btcTimeLockTx.transaction.hash };
      }

      reply.status(404);
    },
  );

  const jobInfoSchema = z.object({
    state: z.string().describe('The state of the transaction'),
    attempts: z.number().describe('The number of attempts made to process the transaction'),
    failedReason: z.string().optional().describe('The reason why the transaction failed'),
    data: z
      .object({
        txid: z.string(),
        ckbVirtualResult: CKBVirtualResult,
      })
      .describe('The data of the transaction')
      .optional(),
  });

  fastify.get(
    '/:btc_txid/job',
    {
      schema: {
        description: `
          Get the job info of a transaction by BTC txid.

          The state of the transaction can be one of the following:
          * completed: The CKB transaction has been sent and confirmed.
          * failed: Something went wrong during the process, and it has failed.
          * delayed: The transaction has not been confirmed yet and is waiting for confirmation.
          * active: The transaction is currently being processed.
          * waiting: The transaction is pending and is waiting to be processed.
        `,
        tags: ['RGB++'],
        params: z.object({
          btc_txid: z.string().length(64, 'should be a 64-character hex string'),
        }),
        querystring: z.object({
          with_data: z.enum(['true', 'false']).default('false'),
        }),
        response: {
          200: jobInfoSchema,
        },
      },
    },
    async (request, reply) => {
      const { btc_txid } = request.params;
      const { with_data } = request.query;
      const job = await fastify.transactionProcessor.getTransactionRequest(btc_txid);
      if (!job) {
        reply.status(404);
        return;
      }
      const state = await job.getState();
      const attempts = job.attemptsMade;

      const jobInfo: z.infer<typeof jobInfoSchema> = {
        state,
        attempts,
      };

      if (with_data === 'true') {
        const { txid, ckbVirtualResult } = job.data;
        jobInfo.data = {
          txid,
          ckbVirtualResult,
        };
      }

      if (state === 'failed') {
        jobInfo.failedReason = job.failedReason;
      }
      return jobInfo;
    },
  );

  fastify.post(
    '/retry',
    {
      schema: {
        description: 'Retry a failed transaction by BTC txid, only failed transactions can be retried.',
        tags: ['RGB++'],
        body: z.object({
          btc_txid: z.string(),
        }),
        response: {
          200: z.object({
            success: z.boolean().describe('Whether the transaction has been retried successfully'),
            state: z.string().describe('The state of the transaction'),
          }),
        },
      },
    },
    async (request, reply) => {
      const { btc_txid } = request.body;
      const job = await fastify.transactionProcessor.getTransactionRequest(btc_txid);
      if (!job) {
        reply.status(404);
        return;
      }
      const state = await job.getState();
      if (state === 'failed') {
        await job.retry('failed');
        const newState = await job.getState();
        return {
          success: true,
          state: newState,
        };
      }
      return {
        success: false,
        state,
      };
    },
  );

  done();
};

export default transactionRoute;


================================================
File: src/routes/rgbpp/types.ts
================================================
import z from 'zod';

export const Script = z.object({
  codeHash: z.string(),
  args: z.string(),
  hashType: z.enum(['type', 'data', 'data1', 'data2']),
});
export type Script = z.infer<typeof Script>;

export const CellDep = z.object({
  outPoint: z
    .object({
      txHash: z.string(),
      index: z.string(),
    })
    .or(z.null()),
  depType: z.enum(['depGroup', 'code']),
});
export type CellDep = z.infer<typeof CellDep>;

export const InputCell = z.object({
  previousOutput: z
    .object({
      txHash: z.string(),
      index: z.string(),
    })
    .or(z.null()),
  since: z.string(),
});
export type InputCell = z.infer<typeof InputCell>;

export const OutputCell = z.object({
  capacity: z.string(),
  lock: Script,
  type: Script.or(z.null()).optional(),
});
export type OutputCell = z.infer<typeof OutputCell>;

export const Cell = z.object({
  cellOutput: OutputCell,
  data: z.string(),
  outPoint: z
    .object({
      txHash: z.string(),
      index: z.string(),
    })
    .or(z.null())
    .optional(),
  blockHash: z.string().optional(),
  blockNumber: z.string().optional(),
  txIndex: z.string().optional(),
});
export type Cell = z.infer<typeof Cell>;

export const CKBRawTransaction = z.object({
  version: z.string(),
  cellDeps: z.array(CellDep),
  headerDeps: z.array(z.string()),
  inputs: z.array(InputCell),
  outputs: z.array(OutputCell),
  outputsData: z.array(z.string()),
  witnesses: z.array(z.string()).default([]),
});
export type CKBRawTransaction = z.infer<typeof CKBRawTransaction>;

export const CKBTransaction = z.object({
  cellDeps: z.array(CellDep),
  inputs: z.array(InputCell),
  outputs: z.array(OutputCell),
  outputsData: z.array(z.string()),
  headerDeps: z.array(z.string()),
  hash: z.string(),
  version: z.string(),
  witnesses: z.array(z.string()),
});
export type CKBTransaction = z.infer<typeof CKBTransaction>;

export const CKBVirtualResult = z.object({
  ckbRawTx: CKBRawTransaction,
  commitment: z.string(),
  needPaymasterCell: z.boolean(),
  sumInputsCapacity: z.string(),
});
export type CKBVirtualResult = z.infer<typeof CKBVirtualResult>;

export const XUDTTypeInfo = z.object({
  symbol: z.string(),
  name: z.string(),
  decimal: z.number(),
  total_supply: z.string().optional(),
  issuer: z.string().optional(),
  circulating_supply: z.string().optional(),
  token_info_cell_type_hash: z.string().optional(),
  type_hash: z.string(),
  type_script: Script,
});
export type XUDTTypeInfo = z.infer<typeof XUDTTypeInfo>;

export const SporeTypeInfo = z.object({
  contentType: z.string(),
  cluster: z
    .object({
      id: z.string(),
      name: z.string(),
      description: z.string(),
    })
    .optional(),
});
export type SporeTypeInfo = z.infer<typeof SporeTypeInfo>;

export const XUDTBalance = XUDTTypeInfo.merge(
  z.object({
    total_amount: z.string(),
    available_amount: z.string(),
    pending_amount: z.string(),
  }),
);
export type XUDTBalance = z.infer<typeof XUDTBalance>;

export const IsomorphicTransaction = z.object({
  ckbVirtualTx: CKBRawTransaction.optional(),
  ckbTx: CKBTransaction.optional(),
  inputs: z.array(OutputCell).optional(),
  outputs: z.array(OutputCell).optional(),
  status: z.object({
    confirmed: z.boolean(),
  }),
});
export type IsomorphicTransaction = z.infer<typeof IsomorphicTransaction>;


================================================
File: src/routes/token/generate.ts
================================================
import { randomUUID } from 'crypto';
import { FastifyPluginCallback } from 'fastify';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import { Server } from 'http';
import { env } from 'std-env';
import z from 'zod';

const generateRoute: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  fastify.post(
    '/generate',
    {
      schema: {
        tags: ['Token'],
        description: 'Generate a JWT token for the requester',
        body: z.object({
          app: z.string().default('my-app').describe('The app name of the requester'),
          domain: z
            .string()
            .default(env.DOMAIN ?? process.env.VERCEL_BRANCH_URL ?? 'localhost')
            .describe(
              'The domain name of the requester, for CORS (needs to be consistent when calling origin request header)',
            ),
        }),
        response: {
          200: z.object({
            id: z.string().describe('The unique identifier of the JWT token'),
            token: z
              .string()
              .describe(
                'The JWT token for the requester, add this to the Authorization(Bearer) header to authenticate the request',
              ),
          }),
        },
      },
    },
    async (request) => {
      const { app, domain } = request.body;
      const uuid = randomUUID();

      try {
        // Ensure the domain is a valid URL and extract the host
        const url = domain.startsWith('http') ? domain : `https://${domain}`;
        const { host, pathname } = new URL(url);

        if (pathname !== '/') {
          throw new Error('Must be a valid domain without path');
        }

        const token = fastify.jwt.sign({ sub: app, aud: host, jti: uuid });
        return { id: uuid, token };
      } catch (e) {
        fastify.Sentry.captureException(e);
        throw new Error('Failed to generate token: ' + (e as Error).message);
      }
    },
  );
  done();
};

export default generateRoute;


================================================
File: src/routes/token/index.ts
================================================
import { FastifyPluginCallback } from 'fastify';
import { Server } from 'http';
import { ZodTypeProvider } from 'fastify-type-provider-zod';
import generateRoute from './generate';
import { env } from '../../env';
import adminAuthorize from '../../hooks/admin-authorize';

const tokenRoutes: FastifyPluginCallback<Record<never, never>, Server, ZodTypeProvider> = (fastify, _, done) => {
  if (env.NODE_ENV === 'production' && env.ADMIN_USERNAME && env.ADMIN_PASSWORD) {
    fastify.addHook('onRequest', adminAuthorize);
  }

  fastify.register(generateRoute);
  done();
};

export default tokenRoutes;


================================================
File: src/services/ckb.ts
================================================
import {
  Collector,
  getSporeTypeScript,
  getUniqueTypeScript,
  getXudtTypeScript,
  isScriptEqual,
  isTokenMetadataType,
  sendCkbTx,
} from '@rgbpp-sdk/ckb';
import { Cradle } from '../container';
import { BI, Indexer, RPC, Script } from '@ckb-lumos/lumos';
import { CKBRPC } from '@ckb-lumos/rpc';
import { UngroupedIndexerTransaction } from '@ckb-lumos/ckb-indexer/lib/type';
import { z } from 'zod';
import * as Sentry from '@sentry/node';
import {
  decodeUDTHashFromInscriptionData,
  getInscriptionInfoTypeScript,
  isInscriptionInfoTypeScript,
  isUniqueCellTypeScript,
} from '../utils/xudt';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';
import DataCache from './base/data-cache';
import { scriptToHash } from '@nervosnetwork/ckb-sdk-utils';
import { Cell } from '../routes/rgbpp/types';
import { uniq } from 'lodash';
import { COMPATIBLE_UDT_INFO_WHITELIST, IS_MAINNET } from '../constants';
import { decodeMetadata, decodeTokenInfo } from '@utxostack/metadata';

export type TransactionWithStatus = Awaited<ReturnType<CKBRPC['getTransaction']>>;

// https://github.com/nervosnetwork/ckb/blob/develop/rpc/src/error.rs#L33
export enum CKBRPCErrorCodes {
  /// (-1): CKB internal errors are considered to never happen or only happen when the system
  /// resources are exhausted.
  CKBInternalError = -1,
  /// (-2): The CKB method has been deprecated and disabled.
  ///
  /// Set `rpc.enable_deprecated_rpc` to `true` in the config file to enable all deprecated
  /// methods.
  Deprecated = -2,
  /// (-3): Error code -3 is no longer used.
  ///
  /// Before v0.35.0, CKB returns all RPC errors using the error code -3. CKB no longer uses
  /// -3 since v0.35.0.
  Invalid = -3,
  /// (-4): The RPC method is not enabled.
  ///
  /// CKB groups RPC methods into modules, and a method is enabled only when the module is
  /// explicitly enabled in the config file.
  RPCModuleIsDisabled = -4,
  /// (-5): DAO related errors.
  DaoError = -5,
  /// (-6): Integer operation overflow.
  IntegerOverflow = -6,
  /// (-7): The error is caused by a config file option.
  ///
  /// Users have to edit the config file to fix the error.
  ConfigError = -7,
  /// (-101): The CKB local node failed to broadcast a message to its peers.
  P2PFailedToBroadcast = -101,
  /// (-200): Internal database error.
  ///
  /// The CKB node persists data to the database. This is the error from the underlying database
  /// module.
  DatabaseError = -200,
  /// (-201): The chain index is inconsistent.
  ///
  /// An example of an inconsistent index is that the chain index says a block hash is in the chain
  /// but the block cannot be read from the database.
  ///
  /// This is a fatal error usually due to a serious bug. Please back up the data directory and
  /// re-sync the chain from scratch.
  ChainIndexIsInconsistent = -201,
  /// (-202): The underlying database is corrupt.
  ///
  /// This is a fatal error usually caused by the underlying database used by CKB. Please back up
  /// the data directory and re-sync the chain from scratch.
  DatabaseIsCorrupt = -202,
  /// (-301): Failed to resolve the referenced cells and headers used in the transaction, as inputs or
  /// dependencies.
  TransactionFailedToResolve = -301,
  /// (-302): Failed to verify the transaction.
  TransactionFailedToVerify = -302,
  /// (-1000): Some signatures in the submit alert are invalid.
  AlertFailedToVerifySignatures = -1000,
  /// (-1102): The transaction is rejected by the outputs validator specified by the RPC parameter.
  PoolRejectedTransactionByOutputsValidator = -1102,
  /// (-1103): Pool rejects some transactions which seem contain invalid VM instructions. See the issue
  /// link in the error message for details.
  PoolRejectedTransactionByIllTransactionChecker = -1103,
  /// (-1104): The transaction fee rate must be greater than or equal to the config option `tx_pool.min_fee_rate`
  ///
  /// The fee rate is calculated as:
  ///
  /// ```text
  /// fee / (1000 * tx_serialization_size_in_block_in_bytes)
  /// ```
  PoolRejectedTransactionByMinFeeRate = -1104,
  /// (-1105): The in-pool ancestors count must be less than or equal to the config option `tx_pool.max_ancestors_count`
  ///
  /// Pool rejects a large package of chained transactions to avoid certain kinds of DoS attacks.
  PoolRejectedTransactionByMaxAncestorsCountLimit = -1105,
  /// (-1106): The transaction is rejected because the pool has reached its limit.
  PoolIsFull = -1106,
  /// (-1107): The transaction is already in the pool.
  PoolRejectedDuplicatedTransaction = -1107,
  /// (-1108): The transaction is rejected because it does not make sense in the context.
  ///
  /// For example, a cellbase transaction is not allowed in `send_transaction` RPC.
  PoolRejectedMalformedTransaction = -1108,
  /// (-1109): The transaction is expired from tx-pool after `expiry_hours`.
  TransactionExpired = -1109,
  /// (-1110): The transaction exceeded maximum size limit.
  PoolRejectedTransactionBySizeLimit = -1110,
  /// (-1111): The transaction is rejected for RBF checking.
  PoolRejectedRBF = -1111,
  /// (-1112): The transaction is rejected for ref cell consuming.
  PoolRejectedInvalidated = -1112,
  /// (-1200): The indexer error.
  Indexer = -1200,
}

export class CKBRpcError extends Error {
  private messageSchema = z.object({
    code: z.number(),
    message: z.string(),
  });

  public code?: number;
  public message: string;

  constructor(message: string) {
    super(message);
    this.name = 'CKBRpcError';
    this.message = message;

    try {
      const error = JSON.parse(message);
      const parsed = this.messageSchema.safeParse(error);
      if (parsed.success) {
        this.code = parsed.data.code;
        this.message = parsed.data.message;
      }
    } catch (e) {
      Sentry.captureException(e);
    }
  }
}

type TokenInfoMetadata = {
  decimal: number;
  name: string;
  symbol: string;
  total_supply?: string;
  issuer?: string;
  circulating_supply?: string;
  token_info_cell_type_hash?: string;
};
export default class CKBClient {
  public rpc: RPC;
  public indexer: Indexer;
  private dataCache: DataCache<unknown>;

  constructor(private cradle: Cradle) {
    this.rpc = new RPC(cradle.env.CKB_RPC_URL);
    this.indexer = new Indexer(cradle.env.CKB_RPC_URL);
    this.dataCache = new DataCache(cradle.redis, {
      prefix: 'ckb-info-cell-txs',
      expire: 10 * 60 * 1000,
    });
  }

  /**
   * Get the ckb script configs
   */
  public getScripts() {
    const xudtTypeScript = getXudtTypeScript(IS_MAINNET);
    const sporeTypeScript = getSporeTypeScript(IS_MAINNET);
    const uniqueCellTypeScript = getUniqueTypeScript(IS_MAINNET);
    const inscriptionTypeScript = getInscriptionInfoTypeScript(IS_MAINNET);
    return {
      XUDT: xudtTypeScript,
      SPORE: sporeTypeScript,
      UNIQUE: uniqueCellTypeScript,
      INSCRIPTION: inscriptionTypeScript,
    };
  }

  /**
   * Get the information data of the given compatible xudt type script
   * @param xudtTypeScript - the compatible xudt type script
   */
  public getCompatibleXudtWhitelistInfo(xudtTypeScript: Script) {
    const { codeHash, hashType } = xudtTypeScript;
    const data = COMPATIBLE_UDT_INFO_WHITELIST.find((item) => {
      if (item.codeHashes.includes(codeHash) && item.hashType === hashType) {
        return item;
      }
    });
    if (!data) {
      return null;
    }
    return {
      name: data.name,
      symbol: data.symbol,
      decimal: data.decimal,
    };
  }

  /**
   * Get the unique cell data of the given xudt type script from the transaction
   * @param tx - the ckb transaction that contains the unique cell
   * @param index - the index of the unique cell in the transaction
   * @param xudtTypeScript - the xudt type script
   * reference:
   * - https://github.com/utxostack/unique-cell/metadata
   */
  public getUniqueCellData(tx: TransactionWithStatus, index: number, xudtTypeScript: Script) {
    // find the xudt cell index in the transaction
    // generally, the xudt cell and unique cell are in the same transaction
    const xudtCellIndex = tx.transaction.outputs.findIndex((cell) => {
      return cell.type && isScriptEqual(cell.type, xudtTypeScript);
    });
    if (xudtCellIndex === -1) {
      return null;
    }

    const encodeData = tx.transaction.outputsData[index];
    if (!encodeData) {
      return null;
    }
    const { symbol, name, decimal, totalSupply } = decodeTokenInfo(encodeData);
    return {
      symbol,
      name,
      decimal,
      total_supply: totalSupply,
    };
  }

  /**
   * Get the token metadata data of the given xudt type script from the transaction
   * @param tx - the ckb transaction that contains the token metadata cell
   * @param index - the index of the token metadata cell in the transaction
   * @param xudtTypeScript - the xudt type script
   * reference:
   * - https://github.com/utxostack/unique-cell/metadata
   */
  public getTokenMetadataData(tx: TransactionWithStatus, index: number, xudtTypeScript: Script) {
    // find the xudt cell index in the transaction
    // generally, the xudt cell and token metadata cell are in the same transaction
    const xudtCellIndex = tx.transaction.outputs.findIndex((cell) => {
      return cell.type && isScriptEqual(cell.type, xudtTypeScript);
    });
    if (xudtCellIndex === -1) {
      return null;
    }

    const encodeData = tx.transaction.outputsData[index];
    if (!encodeData) {
      return null;
    }
    const { issuer, circulatingSupply, tokenInfoCellTypeHash } = decodeMetadata(encodeData);
    return {
      issuer,
      circulating_supply: circulatingSupply,
      token_info_cell_type_hash: tokenInfoCellTypeHash,
    };
  }

  /**
   * Get the inscription cell data of the given xudt type script from the transaction
   * @param tx - the ckb transaction that contains the inscription cell
   * @param index - the index of the inscription cell in the transaction
   * @param xudtTypeScript - the xudt type script
   * reference:
   * - https://omiga-core.notion.site/Omiga-Inscritption-885f9073c1a6499db08f5815b7de20d7
   * - https://github.com/duanyytop/ckb-omiga/blob/master/src/inscription/helper.ts#L96-L109
   */
  public getInscriptionInfoCellData(tx: TransactionWithStatus, index: number, xudtTypeScript: Script) {
    const encodeData = tx.transaction.outputsData[index];
    if (!encodeData) {
      return null;
    }
    const xudtTypeHash = scriptToHash(xudtTypeScript);
    if (decodeUDTHashFromInscriptionData(encodeData) !== xudtTypeHash) {
      return null;
    }
    const data = decodeTokenInfo(encodeData);
    return data;
  }

  /**
   * Get all transactions that have the xudt type cell and info cell
   */
  public async getAllInfoCellTxs() {
    const cachedTxs = await this.dataCache.get('all');
    if (cachedTxs) {
      return cachedTxs as TransactionWithStatus[];
    }

    const scripts = this.getScripts();
    let batchRequest = this.rpc.createBatchRequest();

    // info cell script could be unique cell or inscription cell
    [scripts.UNIQUE, scripts.INSCRIPTION].forEach((script) => {
      const searchScript = { ...script, args: '0x' };
      batchRequest.add(
        'getTransactions',
        {
          script: searchScript,
          scriptType: 'type',
        },
        // XXX: The returned result is not asc-ordered, maybe it is a bug in ckb-indexer
        'asc',
        // TODO: There may be a maximum request limit.
        '0xffff', // 0xffff basically means no limit
      );
    });
    type getTransactionsResult = ReturnType<typeof this.rpc.getTransactions<false>>;
    const infoCellTxs: Awaited<getTransactionsResult>[] = await batchRequest.exec();
    const allIndexerTxs = infoCellTxs.reduce(
      (acc, txs) => acc.concat(txs.objects.filter(({ ioType }: UngroupedIndexerTransaction) => ioType === 'output')),
      [] as UngroupedIndexerTransaction[],
    );

    // get all transactions that have the xudt type cell and info cell
    batchRequest = this.rpc.createBatchRequest();
    allIndexerTxs
      .sort((txA: UngroupedIndexerTransaction, txB: UngroupedIndexerTransaction) => {
        // make sure `infoCellTxs` are asc-ordered
        // related issue: https://github.com/nervosnetwork/ckb/issues/4549
        const aBlockNumber = BI.from(txA.blockNumber).toNumber();
        const bBlockNumber = BI.from(txB.blockNumber).toNumber();
        if (aBlockNumber < bBlockNumber) return -1;
        else if (aBlockNumber > bBlockNumber) return 1;
        else if (aBlockNumber === bBlockNumber) {
          const aTxIndex = BI.from(txA.txIndex).toNumber();
          const bTxIndex = BI.from(txB.txIndex).toNumber();
          if (aTxIndex < bTxIndex) return -1;
          else if (aTxIndex > bTxIndex) return 1;
        }
        // unreachable: aBlockNumber === bBlockNumber && aTxIndex === bTxIndex
        return 0;
      })
      .forEach((tx: UngroupedIndexerTransaction) => {
        batchRequest.add('getTransaction', tx.txHash);
      });
    const txs: TransactionWithStatus[] = await batchRequest.exec();
    await this.dataCache.set('all', txs);
    return txs;
  }

  /**
   * Get the unique cell of the given xudt type
   * @param script - the xudt type script
   */
  public async getInfoCellData(script: Script): Promise<TokenInfoMetadata | null> {
    // If the type script is in the whitelist, return the info data directly
    let infoData: TokenInfoMetadata | null = this.getCompatibleXudtWhitelistInfo(script);
    if (infoData) {
      return infoData;
    }
    // If the type script is not in the whitelist, get the info data from the unique cell and metadata cell
    const typeHash = computeScriptHash(script);
    const cachedData = await this.dataCache.get(`type:${typeHash}`);
    if (cachedData) {
      return cachedData as TokenInfoMetadata;
    }
    const txs = await this.getAllInfoCellTxs();
    for (const tx of txs) {
      // check if the unique cell is one of the info cells of the xudt type
      const uniqueCellIndex = tx.transaction.outputs.findIndex(
        (cell) => cell.type && isUniqueCellTypeScript(cell.type, IS_MAINNET),
      );
      if (uniqueCellIndex !== -1) {
        infoData = this.getUniqueCellData(tx, uniqueCellIndex, script);
        if (infoData) {
          // check if the token metadata cell is one of the info cells of the xudt type
          const metadataCellIndex = tx.transaction.outputs.findIndex(
            (cell) => cell.type && isTokenMetadataType(cell.type, IS_MAINNET),
          );
          if (metadataCellIndex !== -1) {
            const metadataData = this.getTokenMetadataData(tx, metadataCellIndex, script);
            if (metadataData) {
              infoData = {
                ...infoData,
                ...metadataData,
              };
            }
          }
          await this.dataCache.set(`type:${typeHash}`, infoData);
          return infoData;
        }
      }

      // check if the inscription cell is the info cell of the xudt type
      const inscriptionCellIndex = tx.transaction.outputs.findIndex((cell) => {
        return cell.type && isInscriptionInfoTypeScript(cell.type, IS_MAINNET);
      });
      if (inscriptionCellIndex !== -1) {
        const infoCellData = this.getInscriptionInfoCellData(tx, inscriptionCellIndex, script);
        if (infoCellData) {
          // TODO: `type:${typeHash}` could be cached for a longer time
          await this.dataCache.set(`type:${typeHash}`, infoCellData);
          return infoCellData;
        }
      }
    }
    return null;
  }

  public async getInputCellsByOutPoint(outPoints: CKBComponents.OutPoint[]): Promise<Cell[]> {
    const txHashes = uniq(outPoints.map((outPoint) => outPoint.txHash));
    const batchRequest = this.rpc.createBatchRequest(txHashes.map((txHash) => ['getTransaction', txHash]));
    const txs: TransactionWithStatus[] = await batchRequest.exec();
    const txsMap = txs.reduce(
      (acc, tx: TransactionWithStatus) => {
        acc[tx.transaction.hash] = tx;
        return acc;
      },
      {} as Record<string, TransactionWithStatus>,
    );
    return outPoints.map((outPoint) => {
      const tx = txsMap[outPoint.txHash];
      const outPointIndex = BI.from(outPoint.index).toNumber();
      return Cell.parse({
        cellOutput: tx.transaction.outputs[outPointIndex],
        data: tx.transaction.outputsData[outPointIndex],
        blockHash: tx.txStatus.blockHash,
        outPoint,
      });
    });
  }

  /**
   * Wait for the ckb transaction to be confirmed
   * @param txHash - the ckb transaction hash
   */
  public waitForTranscationConfirmed(txHash: string) {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve) => {
      try {
        const transaction = await this.rpc.getTransaction(txHash);
        const { status } = transaction.txStatus;
        if (status === 'committed') {
          resolve(txHash);
        } else {
          setTimeout(() => {
            resolve(this.waitForTranscationConfirmed(txHash));
          }, 1000);
        }
      } catch (e) {
        Sentry.withScope((scope) => {
          scope.setTag('ckb_txhash', txHash);
          scope.captureException(e);
        });
        setTimeout(() => {
          resolve(this.waitForTranscationConfirmed(txHash));
        }, 1000);
      }
    });
  }

  /**
   * Send a ckb transaction
   * @param signedTx - the signed ckb transaction
   */
  public async sendTransaction(signedTx: CKBComponents.RawTransaction): Promise<string> {
    try {
      const txHash = await sendCkbTx({
        collector: new Collector({
          ckbNodeUrl: this.cradle.env.CKB_RPC_URL,
          ckbIndexerUrl: this.cradle.env.CKB_RPC_URL,
        }),
        signedTx,
      });
      return txHash;
    } catch (err) {
      if (err instanceof Error) {
        const rpcError = new CKBRpcError(err.message);
        rpcError.stack = err.stack;
        throw rpcError;
      }
      throw err;
    }
  }
}


================================================
File: src/services/paymaster.ts
================================================
import { Cell, helpers } from '@ckb-lumos/lumos';
import { Cradle } from '../container';
import { DelayedError, Queue, Worker } from 'bullmq';
import { AppendPaymasterCellAndSignTxParams, IndexerCell, appendPaymasterCellAndSignCkbTx } from '@rgbpp-sdk/ckb';
import { hd, config, BI } from '@ckb-lumos/lumos';
import * as Sentry from '@sentry/node';
import { Transaction } from '../routes/bitcoin/types';
import { IS_MAINNET } from '../constants';

interface IPaymaster {
  getNextCell(token: string): Promise<IndexerCell | null>;
  refillCellQueue(): Promise<number>;
  appendCellAndSignTx(
    txid: string,
    params: Pick<AppendPaymasterCellAndSignTxParams, 'ckbRawTx' | 'sumInputsCapacity'>,
  ): ReturnType<typeof appendPaymasterCellAndSignCkbTx>;
  markPaymasterCellAsSpent(txid: string, signedTx: CKBComponents.RawTransaction): Promise<void>;
}

export const PAYMASTER_CELL_QUEUE_NAME = 'rgbpp-ckb-paymaster-cell-queue';

class PaymasterCellNotEnoughError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'PaymasterCellNotEnoughError';
  }
}

/**
 * Paymaster
 * responsible for managing the paymaster cells and signing the CKB transactions.
 */
export default class Paymaster implements IPaymaster {
  private cradle: Cradle;
  private queue: Queue<Cell>;
  private worker: Worker<Cell>;

  private cellCapacity: number;
  private presetCount: number;
  // the threshold to refill the queue, default is 0.3
  private refillThreshold: number;
  // avoid the refilling to be triggered multiple times
  private refilling = false;

  constructor(cradle: Cradle) {
    this.cradle = cradle;
    this.queue = new Queue(PAYMASTER_CELL_QUEUE_NAME, {
      connection: cradle.redis,
    });
    this.worker = new Worker(PAYMASTER_CELL_QUEUE_NAME, undefined, {
      connection: cradle.redis,
      lockDuration: 60_000,
      removeOnComplete: { count: 0 },
      removeOnFail: { count: 0 },
    });
    this.cellCapacity = this.cradle.env.PAYMASTER_CELL_CAPACITY;
    this.presetCount = this.cradle.env.PAYMASTER_CELL_PRESET_COUNT;
    this.refillThreshold = this.cradle.env.PAYMASTER_CELL_REFILL_THRESHOLD;
    this.refillCellQueue();
  }

  private get lockScript() {
    const args = hd.key.privateKeyToBlake160(this.ckbPrivateKey);
    const scripts = IS_MAINNET ? config.MAINNET.SCRIPTS : config.TESTNET.SCRIPTS;
    const template = scripts['SECP256K1_BLAKE160']!;
    const lockScript = {
      codeHash: template.CODE_HASH,
      hashType: template.HASH_TYPE,
      args: args,
    };
    return lockScript;
  }

  /**
   * Get the paymaster cell job by the raw transaction
   * @param rawTx - the raw transaction may contains an input using one paymaster cell
   */
  private getPaymasterCellJobByRawTx(rawTx: CKBComponents.RawTransaction) {
    for (const input of rawTx.inputs) {
      const outPoint = input.previousOutput;
      if (!outPoint) {
        continue;
      }
      const id = `${outPoint.txHash}:${outPoint.index}`;
      const job = this.queue.getJob(id);
      if (job) {
        return job;
      }
    }
    return null;
  }

  private async captureExceptionToSentryScope(err: Error, attrs?: Record<string, unknown>) {
    const remaining = await this.queue.getWaitingCount();
    Sentry.withScope((scope) => {
      scope.setContext('paymaster', {
        address: this.ckbAddress,
        remaining: remaining,
        preset: this.presetCount,
        threshold: this.refillThreshold,
        ...attrs,
      });
      scope.captureException(err);
    });
    return;
  }

  /*
   * Get the private key of the paymaster ckb address, used to sign the transaction.
   */
  public get ckbPrivateKey() {
    return this.cradle.env.PAYMASTER_PRIVATE_KEY;
  }

  /**
   * is the paymaster receives UTXO check enabled
   */
  public get enablePaymasterReceivesUTXOCheck() {
    return this.cradle.env.PAYMASTER_RECEIVE_UTXO_CHECK && !!this.cradle.env.PAYMASTER_RECEIVE_BTC_ADDRESS;
  }

  /**
   * The paymaster CKB address to pay the time cells spent tx fee
   */
  public get ckbAddress() {
    const lumosConfig = IS_MAINNET ? config.MAINNET : config.TESTNET;
    const args = hd.key.privateKeyToBlake160(this.ckbPrivateKey);
    const template = lumosConfig.SCRIPTS['SECP256K1_BLAKE160'];
    const lockScript = {
      codeHash: template.CODE_HASH,
      hashType: template.HASH_TYPE,
      args: args,
    };
    return helpers.encodeToAddress(lockScript, {
      config: lumosConfig,
    });
  }

  /**
   * The paymaster BTC address to receive the BTC UTXO
   */
  public get btcAddress() {
    return this.cradle.env.PAYMASTER_RECEIVE_BTC_ADDRESS;
  }

  /**
   * The paymaster container fee in sats
   * Paymaster received utxo should be greater than or equal to the container fee
   */
  public get containerFee() {
    // XXX: fixed fee for now, may change in the future
    return this.cradle.env.PAYMASTER_BTC_CONTAINER_FEE_SATS;
  }

  /**
   * Get the paymaster cell count in the queue
   */
  public getPaymasterCellCount() {
    return this.queue.getWaitingCount();
  }

  /**
   * Check if the paymaster has received the BTC UTXO
   * @param btcTx - the BTC transaction
   */
  public hasPaymasterReceivedBtcUTXO(btcTx: Transaction) {
    const hasVaildOutput = btcTx.vout.some((output) => {
      return output.scriptpubkey_address === this.btcAddress && output.value >= this.containerFee;
    });
    return hasVaildOutput;
  }

  /**
   * Get the next paymaster cell from the queue
   * will refill the queue if the count is less than the threshold
   * @param token - the token to get the next job, using btc txid by default
   */
  public async getNextCell(token: string) {
    // avoid the refilling to be triggered multiple times
    if (!this.refilling) {
      const count = await this.queue.getWaitingCount();
      // refill if it's less than REFILL_THRESHOLD of the preset count
      if (count < this.presetCount * this.refillThreshold) {
        this.refilling = true;
        const filled = await this.refillCellQueue();
        if (filled + count < this.presetCount) {
          this.cradle.logger.warn('Filled paymaster cells less than the preset count');
          const error = new PaymasterCellNotEnoughError('Filled paymaster cells less than the preset count');
          this.captureExceptionToSentryScope(error, {
            filled,
          });
        }
        this.refilling = false;
      }
    }

    let cell: IndexerCell | null = null;
    while (!cell) {
      const job = await this.worker.getNextJob(token);
      if (!job) {
        break;
      }

      const data = job.data;
      const liveCell = await this.cradle.ckb.rpc.getLiveCell(data.outPoint!, false);
      if (!liveCell || liveCell.status !== 'live') {
        job.moveToFailed(new Error('The paymaster cell is not live'), token);
        continue;
      }

      cell = {
        output: data.cellOutput,
        outPoint: data.outPoint!,
        outputData: data.data,
        blockNumber: data.blockNumber!,
        txIndex: data.txIndex!,
      };
    }

    return cell;
  }

  /**
   * Refill the paymaster cell queue
   * get cells from the indexer and add them to the queue
   * make sure the queue has enough cells to use for the next transactions
   */
  public async refillCellQueue() {
    const queueSize = await this.queue.getWaitingCount();
    let filled = 0;
    if (queueSize >= this.presetCount) {
      return filled;
    }

    const collector = this.cradle.ckb.indexer.collector({
      lock: this.lockScript,
      type: 'empty',
      outputCapacityRange: [BI.from(this.cellCapacity).toHexString(), BI.from(this.cellCapacity + 1).toHexString()],
    });
    const cells = collector.collect();

    for await (const cell of cells) {
      const outPoint = cell.outPoint!;
      const jobId = `${outPoint.txHash}:${outPoint.index}`;

      // check if the cell is already in the queue
      const job = await this.queue.getJob(jobId);
      if (job) {
        this.cradle.logger.info(`[Paymaster] Paymaster cell already in the queue: ${jobId}`);
        // cause the issue that the job is not moved to delayed when appendCellAndSignTx throw error
        // try to remove the inactive job and add the cell back to the queue
        // (inactive job means the job is processed on 1 minute ago but not completed)
        const active = await job.isActive();
        if (active && job.processedOn && job.processedOn < Date.now() - 60_000) {
          this.cradle.logger.warn(`[Paymaster] Remove the inactive paymaster cell: ${jobId}`);
          await job.remove();
        } else {
          continue;
        }
      }
      // add the cell to the queue
      await this.queue.add(PAYMASTER_CELL_QUEUE_NAME, cell, { jobId });
      this.cradle.logger.info(`[Paymaster] Refill paymaster cell: ${jobId}`);
      filled += 1;
      // break if the filled cells are enough
      if (queueSize + filled >= this.presetCount) {
        break;
      }
    }
    return filled;
  }

  /**
   * Append the paymaster cell to the CKB transaction and sign the transactions
   * @param token - the token to get the next job, using btc txid by default
   * @param params - the ckb transaction parameters
   */
  public async appendCellAndSignTx(
    token: string,
    params: Pick<AppendPaymasterCellAndSignTxParams, 'ckbRawTx' | 'sumInputsCapacity'>,
  ) {
    try {
      const { ckbRawTx, sumInputsCapacity } = params;
      const paymasterCell = await this.getNextCell(token);
      this.cradle.logger.info(`[Paymaster] Get paymaster cell: ${JSON.stringify(paymasterCell)}`);

      if (!paymasterCell) {
        const error = new PaymasterCellNotEnoughError('No paymaster cell available');
        this.captureExceptionToSentryScope(error);
        throw error;
      }

      const signedTx = await appendPaymasterCellAndSignCkbTx({
        ckbRawTx,
        sumInputsCapacity,
        paymasterCell,
        secp256k1PrivateKey: this.ckbPrivateKey,
        isMainnet: IS_MAINNET,
      });
      this.cradle.logger.info(`[Paymaster] Signed transaction: ${JSON.stringify(signedTx)}`);
      return signedTx;
    } catch (err) {
      if (err instanceof PaymasterCellNotEnoughError) {
        // delay the job to retry later if the paymaster cell is not enough
        throw new DelayedError();
      }
      throw err;
    }
  }

  /**
   * Mark the paymaster cell as spent after the transaction is confirmed to avoid double spending
   * @param token - the job token moved from the queue to the completed
   * @param signedTx - the signed transaction to get the paymaster cell input to mark as spent
   */
  public async markPaymasterCellAsSpent(token: string, signedTx: CKBComponents.RawTransaction) {
    try {
      const job = await this.getPaymasterCellJobByRawTx(signedTx);
      if (job) {
        this.cradle.logger.info(`[Paymaster] Mark paymaster cell as spent: ${token}`);
        await job.moveToCompleted(null, token, false);
      }
    } catch (err) {
      this.cradle.logger.error(`[Paymaster] Mark paymaster cell as spent failed: ${token}`);
      this.captureExceptionToSentryScope(err as Error);
      // XXX: Don't throw the error to avoid the transaction marked as failed
    }
  }

  /**
   * Mark the paymaster cell as unspent after the transaction is failed
   * @param token - the job token moved from the queue to the delayed
   * @param signedTx - the signed transaction to get the paymaster cell input to mark as unspent
   */
  public async markPaymasterCellAsUnspent(token: string, signedTx: CKBComponents.RawTransaction) {
    try {
      const job = await this.getPaymasterCellJobByRawTx(signedTx);
      if (job) {
        this.cradle.logger.info(`[Paymaster] Mark paymaster cell as unspent: ${token}`);
        await job.moveToDelayed(Date.now(), token);
      }
    } catch (err) {
      this.cradle.logger.error(`[Paymaster] Mark paymaster cell as spent failed: ${token}`);
      this.captureExceptionToSentryScope(err as Error);
      // XXX: Don't throw the error to avoid the transaction marked as failed
    }
  }
}


================================================
File: src/services/rgbpp.ts
================================================
import pLimit from 'p-limit';
import asyncRetry from 'async-retry';
import * as Sentry from '@sentry/node';
import {
  IndexerCell,
  leToU128,
  buildRgbppLockArgs,
  genRgbppLockScript,
  btcTxIdAndAfterFromBtcTimeLockArgs,
  RGBPP_TX_ID_PLACEHOLDER,
  RGBPP_TX_INPUTS_MAX_LENGTH,
} from '@rgbpp-sdk/ckb';
import { remove0x } from '@rgbpp-sdk/btc';
import { unpackRgbppLockArgs } from '@rgbpp-sdk/ckb';
import { groupBy, findLastIndex } from 'lodash';
import { z } from 'zod';
import { Job } from 'bullmq';
import { BI, RPC, Script } from '@ckb-lumos/lumos';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';
import { Cell, XUDTBalance } from '../routes/rgbpp/types';
import { Transaction, UTXO } from './bitcoin/schema';
import BaseQueueWorker from './base/queue-worker';
import DataCache from './base/data-cache';
import { Cradle } from '../container';
import { isCommitmentMatchToCkbTx, tryGetCommitmentFromBtcTx } from '../utils/commitment';
import { getRgbppLock, isBtcTimeLock, isRgbppLock } from '../utils/lockscript';
import { IS_MAINNET, TESTNET_TYPE } from '../constants';

type GetCellsParams = Parameters<RPC['getCells']>;
export type SearchKey = GetCellsParams[0];
export type CKBBatchRequest = { exec: () => Promise<{ objects: IndexerCell[] }[]> };

export type RgbppUtxoCellsPair = {
  utxo: UTXO;
  cells: Cell[];
};

interface IRgbppCollectRequest {
  btcAddress: string;
}

interface IRgbppCollectJobReturn {
  [key: string]: Cell[];
}

export interface IProcessCallbacks {
  onActive?: (job: Job<IRgbppCollectRequest>) => void;
  onCompleted?: (job: Job<IRgbppCollectRequest>) => void;
  onFailed?: (job: Job<IRgbppCollectRequest> | undefined, err: Error) => void;
}

export const RGBPP_COLLECTOR_QUEUE_NAME = 'rgbpp-collector-queue';

class RgbppCollectorError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'RgbppCollectorError';
  }
}

/**
 * RgbppCollector is used to collect the cells for the utxos.
 * The cells are stored in the cache with the btc address as the key,
 * will be recollected when the utxos are updated or new collect job is enqueued.
 */
export default class RgbppCollector extends BaseQueueWorker<IRgbppCollectRequest, IRgbppCollectJobReturn> {
  private limit: pLimit.Limit;
  private dataCache: DataCache<IRgbppCollectJobReturn>;

  constructor(private cradle: Cradle) {
    super({
      name: RGBPP_COLLECTOR_QUEUE_NAME,
      connection: cradle.redis,
      worker: {
        lockDuration: 60_000,
        removeOnComplete: { count: 0 },
        removeOnFail: { count: 0 },
      },
    });
    this.dataCache = new DataCache(cradle.redis, {
      prefix: 'rgbpp-collector-data',
      schema: z.record(z.array(Cell)),
      expire: cradle.env.RGBPP_COLLECT_DATA_CACHE_EXPIRE,
    });
    this.limit = pLimit(100);
  }

  /**
   * Capture the exception to the sentry scope with the btc address and utxos
   * @param job - the job that failed
   * @param err - the error
   */
  private captureJobExceptionToSentryScope(job: Job<IRgbppCollectRequest>, err: Error) {
    const { btcAddress } = job.data;
    Sentry.withScope((scope) => {
      scope.setTag('btcAddress', btcAddress);
      this.cradle.logger.error(err);
      scope.captureException(err);
    });
  }

  /**
   * Save the rgbpp utxo cells pairs to the cache
   * @param btcAddress - the btc address
   * @param pairs - the rgbpp utxo cells pairs
   */
  private async saveRgbppUtxoCellsPairsToCache(btcAddress: string, pairs: RgbppUtxoCellsPair[]) {
    const data = pairs.reduce((acc, { utxo, cells }) => {
      const key = `${utxo.txid}:${utxo.vout}`;
      acc[key] = cells;
      return acc;
    }, {} as IRgbppCollectJobReturn);
    this.dataCache.set(btcAddress, data);
    return data;
  }

  /**
   * Get the rgbpp balance by cells
   * @param cells - the cells to calculate the balance
   */
  public async getRgbppBalanceByCells(cells: Cell[]) {
    const xudtBalances: Record<
      string,
      Omit<XUDTBalance, 'total_amount' | 'available_amount' | 'pending_amount'> & {
        amount: string;
      }
    > = {};
    for (const cell of cells) {
      const type = cell.cellOutput.type!;
      const typeHash = computeScriptHash(type);
      const infoCellData = await this.cradle.ckb.getInfoCellData(type);
      // https://blog.cryptape.com/enhance-sudts-programmability-with-xudt#heading-xudt-data-structures
      const amount = BI.from(leToU128(remove0x(cell.data).slice(0, 32))).toHexString();
      if (infoCellData) {
        if (!xudtBalances[typeHash]) {
          xudtBalances[typeHash] = {
            ...infoCellData,
            amount: amount,
            type_hash: typeHash,
            type_script: type,
          };
        } else {
          xudtBalances[typeHash].amount = BI.from(xudtBalances[typeHash].amount).add(BI.from(amount)).toHexString();
        }
      }
    }
    return xudtBalances;
  }

  /**
   * Get the rgbpp cells batch request for the utxos
   * @param utxos - the utxos to collect
   * @param typeScript - the type script to filter the cells
   */
  public async getRgbppCellsByBatchRequest(utxos: UTXO[], typeScript?: Script) {
    const batchRequest: CKBBatchRequest = this.cradle.ckb.rpc.createBatchRequest(
      utxos.map((utxo: UTXO) => {
        const { txid, vout } = utxo;
        const args = buildRgbppLockArgs(vout, txid);
        const searchKey: SearchKey = {
          script: genRgbppLockScript(args, IS_MAINNET, TESTNET_TYPE),
          scriptType: 'lock',
        };
        if (typeScript) {
          searchKey.filter = {
            script: typeScript,
          };
        }
        // TODO: In extreme cases, the num of search target cells may be more than limit=0x64=100
        // Priority: Low
        const params: GetCellsParams = [searchKey, 'desc', '0x64'];
        return ['getCells', ...params];
      }),
    );
    const result = await batchRequest.exec();
    const cells = result.map(({ objects }) => {
      return objects.map((indexerCell) => {
        const { output, outPoint, outputData, blockNumber, txIndex } = indexerCell;
        return {
          outPoint,
          cellOutput: output,
          data: outputData,
          blockNumber,
          txIndex,
        } as Cell;
      });
    });
    return cells;
  }

  /**
   * Get the rgbpp utxo cells pairs
   */
  public async getRgbppUtxoCellsPairs(btcAddress: string, utxos: UTXO[], noCache?: boolean) {
    if (this.cradle.env.RGBPP_COLLECT_DATA_CACHE_ENABLE && !noCache) {
      const cached = await this.dataCache.get(btcAddress);
      if (cached) {
        const pairs = utxos
          .map((utxo) => {
            const key = `${utxo.txid}:${utxo.vout}`;
            return { utxo, cells: cached[key] || [] };
          })
          .filter(({ cells }) => cells.length > 0);
        return pairs;
      }
    }
    const pairs = await this.collectRgbppUtxoCellsPairs(utxos);
    await this.saveRgbppUtxoCellsPairsToCache(btcAddress, pairs);
    return pairs;
  }

  /**
   * Collect the cells for the utxos, return the utxo and the cells
   * @param utxos - the utxos to collect
   * @param typeScript - the type script to filter the cells
   */
  public async collectRgbppUtxoCellsPairs(utxos: UTXO[], typeScript?: Script): Promise<RgbppUtxoCellsPair[]> {
    const bucketSize = Math.ceil(utxos.length / this.cradle.env.CKB_RPC_MAX_CONCURRENCY);
    // split the utxos into buckets, every bucket has almost the same size
    const buckets = groupBy(utxos, () => Math.floor(Math.random() * bucketSize)) as Record<number, UTXO[]>;
    const data = await Promise.all(
      Object.values(buckets).map((group: UTXO[]) => {
        return this.limit(() =>
          asyncRetry(
            async () => {
              const batchCells = await this.getRgbppCellsByBatchRequest(group, typeScript);
              return batchCells.map((cells: Cell[], index: number) => {
                const utxo = group[index];
                return { utxo, cells };
              });
            },
            {
              retries: 2,
            },
          ),
        );
      }),
    );
    const pairs = data.flat().filter(({ cells }: RgbppUtxoCellsPair) => cells.length > 0);
    return pairs;
  }

  public async queryRgbppLockTxByBtcTx(btcTx: Transaction) {
    // Only query the first RGBPP_TX_INPUTS_MAX_LENGTH transactions for performance reasons
    const maxRecords = `0x${RGBPP_TX_INPUTS_MAX_LENGTH.toString(16)}`;
    const batchRequest = this.cradle.ckb.rpc.createBatchRequest(
      btcTx.vout.map((_, index) => {
        const args = buildRgbppLockArgs(index, btcTx.txid);
        const lock = genRgbppLockScript(args, IS_MAINNET, TESTNET_TYPE);
        const searchKey: SearchKey = {
          script: lock,
          scriptType: 'lock',
        };
        return ['getTransactions', searchKey, 'asc', maxRecords];
      }),
    );
    type getTransactionsResult = ReturnType<typeof this.cradle.ckb.rpc.getTransactions<false>>;
    const transactions: Awaited<getTransactionsResult>[] = await batchRequest.exec();
    for (const tx of transactions) {
      for (const indexerTx of tx.objects) {
        const ckbTx = await this.cradle.ckb.rpc.getTransaction(indexerTx.txHash);
        const isIsomorphic = await this.isIsomorphicTx(btcTx, ckbTx.transaction);
        if (isIsomorphic) {
          return indexerTx;
        }
      }
    }
    return null;
  }

  public async queryBtcTimeLockTxByBtcTx(btcTx: Transaction) {
    const rgbppLock = getRgbppLock();
    const relatedCkbTxs = (
      await Promise.all(
        btcTx.vin.map(({ txid, vout }) => {
          const args = buildRgbppLockArgs(vout, txid);
          return this.cradle.ckb.rpc.getTransactions(
            {
              script: {
                ...rgbppLock,
                args,
              },
              scriptType: 'lock',
              groupByTransaction: true,
            },
            'asc',
            '0x64',
          );
        }),
      )
    )
      .map(({ objects }) => objects)
      .flat();

    for (const tx of relatedCkbTxs) {
      const ckbTx = await this.cradle.ckb.rpc.getTransaction(tx.txHash);
      const isBtcTimeLockTx = ckbTx.transaction.outputs.some((output) => {
        if (!isBtcTimeLock(output.lock)) {
          return false;
        }
        const { btcTxId: outputBtcTxId } = btcTxIdAndAfterFromBtcTimeLockArgs(output.lock.args);
        return remove0x(outputBtcTxId) === btcTx.txid;
      });
      if (isBtcTimeLockTx) {
        return ckbTx;
      }
    }
    return null;
  }

  async isIsomorphicTx(
    btcTx: Transaction,
    ckbTx: CKBComponents.RawTransaction,
    validateCommitment?: boolean,
  ): Promise<boolean> {
    // Find the commitment from the btc_tx
    const btcTxCommitment = tryGetCommitmentFromBtcTx(btcTx);
    if (!btcTxCommitment) {
      return false;
    }

    // Check inputs:
    // 1. Find the last index of the type inputs
    // 2. Check if all rgbpp_lock inputs can be found in the btc_tx.vin (regardless the position)
    // 3. Check if the inputs contain at least one rgbpp_lock cell (as L1-L1 and L1-L2 transactions should have)
    const inputs = await this.cradle.ckb.getInputCellsByOutPoint(ckbTx.inputs.map((input) => input.previousOutput!));
    const lastTypeInputIndex = findLastIndex(inputs, (input) => !!input.cellOutput.type);
    const anyRgbppLockInput = inputs.some((input) => isRgbppLock(input.cellOutput.lock));
    if (!anyRgbppLockInput) {
      return false;
    }
    const allInputsValid = inputs.every((input) => {
      if (!input.cellOutput.type) {
        return true;
      }
      if (!isRgbppLock(input.cellOutput.lock)) {
        return true;
      }
      const rgbppLockArgs = unpackRgbppLockArgs(input.cellOutput.lock.args);
      const matchingBtcInput = btcTx.vin.find(
        (btcInput) => btcInput.txid === remove0x(rgbppLockArgs.btcTxId) && btcInput.vout === rgbppLockArgs.outIndex,
      );
      return !!matchingBtcInput;
    });
    if (!allInputsValid) {
      return false;
    }

    // Check outputs:
    // 1. Find the last index of the type outputs
    // 2. Check if all type outputs are rgbpp_lock or btc_time_lock cells
    // 4. Check if each rgbpp_lock cell has an isomorphic UTXO in the btc_tx.vout
    // 5. Check if each btc_time_lock cell contains the corresponding btc_txid in the lock args
    const lastTypeOutputIndex = findLastIndex(ckbTx.outputs, (output) => !!output.type);
    const allOutputsValid = ckbTx.outputs.every((output) => {
      if (!output.type) {
        return true;
      }
      if (isRgbppLock(output.lock)) {
        const rgbppLockArgs = unpackRgbppLockArgs(output.lock.args);
        const btcTxId = remove0x(rgbppLockArgs.btcTxId);
        if (btcTxId === RGBPP_TX_ID_PLACEHOLDER) {
          return true;
        }
        if (btcTxId === btcTx.txid && btcTx.vout[rgbppLockArgs.outIndex] !== undefined) {
          return true;
        }
      }
      if (isBtcTimeLock(output.lock)) {
        const btcTxId = remove0x(btcTxIdAndAfterFromBtcTimeLockArgs(output.lock.args).btcTxId);
        if (btcTxId === RGBPP_TX_ID_PLACEHOLDER || btcTx.txid === btcTxId) {
          return true;
        }
      }
      return false;
    });
    if (!allOutputsValid) {
      return false;
    }

    // Compare commitment between btc_tx and ckb_tx
    if (!validateCommitment) {
      return true;
    }
    const btcTxCommitmentHex = btcTxCommitment.toString('hex');
    return isCommitmentMatchToCkbTx(btcTxCommitmentHex, ckbTx, lastTypeInputIndex, lastTypeOutputIndex);
  }

  /**
   * Enqueue a collect job to the queue
   */
  public async enqueueCollectJob(btcAddress: string, allowDuplicate?: boolean): Promise<Job<IRgbppCollectRequest>> {
    let jobId = btcAddress;
    if (allowDuplicate) {
      // add a timestamp to the job id to allow duplicate jobs
      // used for the case that the utxos are updated
      jobId = `${btcAddress}:${Date.now()}`;
    }
    return this.addJob(
      jobId,
      { btcAddress },
      {
        removeOnComplete: true,
        removeOnFail: true,
      },
    );
  }

  /**
   * Process the collect job, collect the cells for the utxos
   * concurrently controlled by the CKB_RPC_MAX_CONCURRENCY
   * retry 2 times if failed, and return the utxo and cells
   */
  public async process(job: Job<IRgbppCollectRequest>) {
    try {
      const { btcAddress } = job.data;
      const utxos = await this.cradle.utxoSyncer.getUtxosByAddress(btcAddress);
      const pairs = await this.collectRgbppUtxoCellsPairs(utxos);
      await this.saveRgbppUtxoCellsPairsToCache(btcAddress, pairs);
    } catch (e) {
      const { message, stack } = e as Error;
      const error = new RgbppCollectorError(message);
      error.stack = stack;
      this.captureJobExceptionToSentryScope(job, error);
      throw e;
    }
  }
}


================================================
File: src/services/spv.ts
================================================
import axios, { AxiosInstance } from 'axios';
import * as Sentry from '@sentry/node';
import { addLoggerInterceptor } from '../utils/interceptors';
import { Cradle } from '../container';
import { randomUUID } from 'node:crypto';
import * as z from 'zod';
import { remove0x } from '@rgbpp-sdk/btc';

export const TxProof = z.object({
  spv_client: z.object({
    tx_hash: z.string(),
    index: z.string(),
  }),
  proof: z.string(),
});
export type TxProof = z.infer<typeof TxProof>;

// https://github.com/ckb-cell/ckb-bitcoin-spv-service/blob/master/src/components/api_service/error.rs
export enum BitcoinSPVErrorCode {
  StorageTxTooNew = 23101,
  StorageTxUnconfirmed,
  StorageHeaderMissing = 23301,
  StorageHeaderUnmatched,
  OnchainTxUnconfirmed = 25101,
  OnchainReorgRequired = 25901,
}

export class BitcoinSPVError extends Error {
  public code: BitcoinSPVErrorCode;

  public static schema = z.object({
    code: z.number(),
    message: z.string(),
  });

  constructor(code: BitcoinSPVErrorCode, message: string) {
    super(message);
    this.name = this.constructor.name;
    this.code = code;
  }
}

/**
 * Bitcoin SPV service client
 */
export default class SPVClient {
  private request: AxiosInstance;
  private cradle: Cradle;

  constructor(cradle: Cradle) {
    const { env, logger } = cradle;
    this.cradle = cradle;
    this.request = axios.create({
      baseURL: env.BITCOIN_SPV_SERVICE_URL,
    });
    addLoggerInterceptor(this.request, logger);
  }

  private async callMethod<T>(method: string, params: unknown): Promise<T> {
    return Sentry.startSpan({ op: this.constructor.name, name: method }, async () => {
      const id = randomUUID();
      const response = await this.request.post('', {
        jsonrpc: '2.0',
        id,
        method,
        params,
      });
      if (response.data?.error) {
        const { code, message } = BitcoinSPVError.schema.parse(response.data.error);
        throw new BitcoinSPVError(code, message);
      }
      return response.data?.result;
    });
  }

  // https://github.com/ckb-cell/ckb-bitcoin-spv-service?tab=readme-ov-file#json-rpc-api-reference
  private async _getTxProof(txid: string, index: number, confirmations: number) {
    return this.callMethod<TxProof>('getTxProof', [remove0x(txid), index, confirmations]);
  }

  public async getTxProof(btcTxid: string, confirmations: number = 0) {
    const txid = remove0x(btcTxid);
    const btcTx = await this.cradle.bitcoin.getTx({ txid });
    const btcTxids = await this.cradle.bitcoin.getBlockTxids({ hash: btcTx.status.block_hash! });
    const btcIdxInBlock = btcTxids.findIndex((id) => id === txid);
    return this._getTxProof(txid, btcIdxInBlock, confirmations);
  }
}


================================================
File: src/services/transaction.ts
================================================
import { bytes } from '@ckb-lumos/codec';
import { remove0x, transactionToHex } from '@rgbpp-sdk/btc';
import {
  RGBPPLock,
  RGBPP_TX_ID_PLACEHOLDER,
  appendCkbTxWitnesses,
  generateSporeTransferCoBuild,
  getSecp256k1CellDep,
  getSporeTypeDep,
  isClusterSporeTypeSupported,
  updateCkbTxWithRealBtcTxId,
} from '@rgbpp-sdk/ckb';
import {
  btcTxIdAndAfterFromBtcTimeLockArgs,
  buildPreLockArgs,
  calculateCommitment,
  genBtcTimeLockScript,
  genRgbppLockScript,
  lockScriptFromBtcTimeLockArgs,
} from '@rgbpp-sdk/ckb';
import * as Sentry from '@sentry/node';
import { Transaction as BitcoinTransaction } from 'bitcoinjs-lib';
import { DelayedError, Job } from 'bullmq';
import { Cradle } from '../container';
import { Transaction } from '../routes/bitcoin/types';
import { CKBRawTransaction, CKBVirtualResult, Cell } from '../routes/rgbpp/types';
import { BitcoinSPVError } from './spv';
import { BloomFilter } from 'bloom-filters';
import { BI } from '@ckb-lumos/lumos';
import { CKBRpcError, CKBRPCErrorCodes } from './ckb';
import { cloneDeep } from 'lodash';
import { JwtPayload } from '../plugins/jwt';
import { serializeCellDep } from '@nervosnetwork/ckb-sdk-utils';
import { BitcoinClientAPIError } from './bitcoin';
import { HttpStatusCode } from 'axios';
import BaseQueueWorker from './base/queue-worker';
import { Env } from '../env';
import { getCommitmentFromBtcTx } from '../utils/commitment';
import { isBtcTimeLock, isRgbppLock } from '../utils/lockscript';
import { IS_MAINNET } from '../constants';

export interface ITransactionRequest {
  txid: string;
  ckbVirtualResult: CKBVirtualResult;
  context?: {
    jwt: JwtPayload;
  };
}

export interface IProcessCallbacks {
  onActive?: (job: Job<ITransactionRequest>) => void;
  onCompleted?: (job: Job<ITransactionRequest>) => void;
  onFailed?: (job: Job<ITransactionRequest> | undefined, err: Error) => void;
}

interface ITransactionProcessor {
  enqueueTransaction(request: ITransactionRequest): Promise<Job<ITransactionRequest>>;
  getTransactionRequest(txid: string): Promise<Job<ITransactionRequest> | undefined>;
  retryAllFailedJobs(): Promise<{ txid: string; state: string }[]>;
  startProcess(callbacks?: IProcessCallbacks): Promise<void>;
  pauseProcess(): Promise<void>;
  closeProcess(): Promise<void>;
}

export const TRANSACTION_QUEUE_NAME = 'rgbpp-ckb-transaction-queue';

class InvalidTransactionError extends Error {
  public data?: ITransactionRequest;

  constructor(message: string, data?: ITransactionRequest) {
    super(message);
    this.name = this.constructor.name;
    this.data = data;
  }
}

class TransactionNotConfirmedError extends Error {
  constructor(txid: string) {
    super(`Transaction not confirmed: ${txid}`);
    this.name = this.constructor.name;
  }
}

/**
 * TransactionProcessor
 * responsible for processing RGB++ CKB transactions, including:
 * - enqueueing transaction requests to the queue
 * - verifying transaction requests, including checking the commitment
 * - processing transaction when it's confirmed on L1(Bitcoin)
 * - generate RGB_lock witness into the CKB transaction
 * - add paymaster cell and sign the CKB transaction if needed
 * - sending CKB transaction to the network and waiting for confirmation
 */
export default class TransactionProcessor
  extends BaseQueueWorker<ITransactionRequest, string | undefined>
  implements ITransactionProcessor
{
  private cradle: Cradle;

  constructor(cradle: Cradle) {
    const defaultJobOptions = TransactionProcessor.getDefaultJobOptions(cradle.env);
    super({
      name: TRANSACTION_QUEUE_NAME,
      connection: cradle.redis,
      queue: {
        defaultJobOptions,
      },
      worker: {
        concurrency: 10,
      },
    });
    this.cradle = cradle;
  }

  public static getDefaultJobOptions(env: Env) {
    return {
      attempts: env.TRANSACTION_QUEUE_JOB_ATTEMPTS,
      backoff: {
        type: 'exponential',
        delay: env.TRANSACTION_QUEUE_JOB_DELAY,
      },
    };
  }

  /**
   * Clear the btcTxId in the RGBPP_LOCK/BTC_TIME_LOCK script to avoid the mismatch between the CKB and BTC transactions
   * @param ckbRawTx - CKB Raw Transaction
   * @param txid - Bitcoin transaction id
   */
  private async resetOutputLockScript(ckbRawTx: CKBRawTransaction, txid: string) {
    const outputs = ckbRawTx.outputs.map((output) => {
      const { lock } = output;
      if (isRgbppLock(lock)) {
        const unpack = RGBPPLock.unpack(lock.args);
        // https://github.com/ckb-cell/rgbpp-sdk/tree/main/examples/rgbpp#what-you-must-know-about-btc-transaction-id
        const btcTxid = bytes.hexify(bytes.bytify(unpack.btcTxid).reverse());
        if (remove0x(btcTxid) !== txid) {
          return output;
        }
        return {
          ...output,
          lock: genRgbppLockScript(buildPreLockArgs(unpack.outIndex), IS_MAINNET),
        };
      }
      if (isBtcTimeLock(lock)) {
        const { btcTxId } = btcTxIdAndAfterFromBtcTimeLockArgs(lock.args);
        if (remove0x(btcTxId) !== txid) {
          return output;
        }
        const toLock = lockScriptFromBtcTimeLockArgs(lock.args);
        return {
          ...output,
          lock: genBtcTimeLockScript(toLock, IS_MAINNET),
        };
      }
      return output;
    });
    return {
      ...ckbRawTx,
      outputs,
    };
  }

  /**
   * Get commitment from Bitcoin transactions
   * depended on @rgbpp-sdk/btc opReturnScriptPubKeyToData method
   * @param tx - Bitcoin transaction
   */
  private getCommitmentFromBtcTx(tx: Transaction): Buffer {
    return getCommitmentFromBtcTx(tx);
  }

  /**
   * Verify transaction request
   * - check if the commitment matches the Bitcoin transaction
   * - check if the CKB Virtual Transaction is valid
   * - check if the Bitcoin transaction is confirmed
   * @param request - transaction request, including txid and ckbVirtualResult
   * @param btcTx - Bitcoin transaction
   */
  public async verifyTransaction(request: ITransactionRequest, btcTx: Transaction): Promise<boolean> {
    const { txid, ckbVirtualResult } = request;
    const { commitment, ckbRawTx } = ckbVirtualResult;

    // make sure the commitment matches the Bitcoin transaction
    const btcTxCommitment = this.getCommitmentFromBtcTx(btcTx);
    if (commitment !== btcTxCommitment.toString('hex')) {
      this.cradle.logger.info(`[TransactionProcessor] Bitcoin Transaction Commitment Mismatch: ${txid}`);
      return false;
    }

    // make sure the CKB Virtual Transaction is valid
    const ckbRawTxWithoutBtcTxId = await this.resetOutputLockScript(ckbRawTx, txid);
    if (commitment !== calculateCommitment(ckbRawTxWithoutBtcTxId)) {
      this.cradle.logger.info(`[TransactionProcessor] Invalid CKB Virtual Transaction: ${txid}`);
      return false;
    }

    // make sure the Bitcoin transaction is confirmed
    if (!btcTx.status.confirmed) {
      // https://docs.bullmq.io/patterns/process-step-jobs#delaying
      this.cradle.logger.info(`[TransactionProcessor] Bitcoin Transaction Not Confirmed: ${txid}`);
      throw new TransactionNotConfirmedError(txid);
    }

    this.cradle.logger.info(`[TransactionProcessor] Transaction Verified: ${txid}`);
    return true;
  }

  /**
   * Move job to delayed
   * @param job - the job to move
   * @param token - the token to move the job
   */
  private async moveJobToDelayed(job: Job<ITransactionRequest>, token?: string) {
    this.cradle.logger.info(`[TransactionProcessor] Moving job ${job.id} to delayed queue`);
    const timestamp = Date.now() + this.cradle.env.TRANSACTION_QUEUE_JOB_DELAY;
    await job.moveToDelayed(timestamp, token);
    // https://docs.bullmq.io/patterns/process-step-jobs#delaying
    throw new DelayedError();
  }

  /**
   * Get the CKB Raw Transaction with the real BTC transaction id
   * @param ckbVirtualResult - the CKB Virtual Transaction
   * @param txid - the real BTC transaction id
   */
  private getCkbRawTxWithRealBtcTxid(ckbVirtualResult: CKBVirtualResult, txid: string) {
    let ckbRawTx = ckbVirtualResult.ckbRawTx;
    const needUpdateCkbTx = ckbRawTx.outputs.some((output) => {
      if (isRgbppLock(output.lock)) {
        const { btcTxid } = RGBPPLock.unpack(output.lock.args);
        const txid = remove0x(btcTxid);
        this.cradle.logger.debug(`[TransactionProcessor] RGBPP_LOCK args txid: ${btcTxid}`);
        return txid === RGBPP_TX_ID_PLACEHOLDER;
      }
      if (isBtcTimeLock(output.lock)) {
        const { btcTxId } = btcTxIdAndAfterFromBtcTimeLockArgs(output.lock.args);
        const txid = remove0x(btcTxId);
        this.cradle.logger.debug(`[TransactionProcessor] BTC_TIME_LOCK args txid: ${txid}`);
        return txid === RGBPP_TX_ID_PLACEHOLDER;
      }
      return false;
    });
    if (needUpdateCkbTx) {
      this.cradle.logger.info(`[TransactionProcessor] Update CKB Raw Transaction with real BTC txid: ${txid}`);
      ckbRawTx = updateCkbTxWithRealBtcTxId({ ckbRawTx, btcTxId: txid, isMainnet: IS_MAINNET });
    }
    return ckbRawTx;
  }

  private captureJobExceptionToSentryScope(job: Job<ITransactionRequest>, err: Error) {
    const { ckbVirtualResult, txid, context } = job.data;
    Sentry.withScope((scope) => {
      if (context?.jwt) {
        scope.setTag('token.id', context?.jwt.jti);
        scope.setTag('token.app', context?.jwt.sub);
        scope.setTag('token.domain', context?.jwt.aud);
      }

      scope.setTag('btcTxid', txid);
      scope.setContext('job', {
        btcTxid: txid,
        ckbVirtualResult: {
          ...ckbVirtualResult,
          // serialize the ckbRawTx to string, otherwise it will be [object]
          ckbRawTx: JSON.stringify(ckbVirtualResult.ckbRawTx),
        },
      });
      this.cradle.logger.error(err);
      scope.captureException(err);
    });
  }

  /**
   * Append the transaction witnesses to the CKB transaction using SPV proof
   * @param txid - the transaction id
   * @param ckbRawTx - the CKB Raw Transaction
   */
  private async appendTxWitnesses(txid: string, ckbRawTx: CKBRawTransaction) {
    const [hex, rgbppApiSpvProof] = await Promise.all([
      this.cradle.bitcoin.getTxHex({ txid }),
      this.cradle.spv.getTxProof(txid),
    ]);
    // using for spv proof, we need to remove the witness data from the transaction
    const hexWithoutWitness = transactionToHex(BitcoinTransaction.fromHex(hex), false);
    const signedTx = await appendCkbTxWitnesses({
      ckbRawTx,
      btcTxBytes: hexWithoutWitness,
      rgbppApiSpvProof,
    })!;

    return signedTx;
  }

  /**
   * check if the transaction has spore type dep
   * if the transaction has spore type dep, we need to append the spore cobuild witness to the transaction
   */
  private hasSporeTypeDep(tx: CKBRawTransaction) {
    const sporeTypeDep = getSporeTypeDep(IS_MAINNET);
    const hasSporeTypeDep = tx.cellDeps.some((cellDep) => {
      return serializeCellDep(cellDep) === serializeCellDep(sporeTypeDep);
    });
    return hasSporeTypeDep;
  }

  /**
   * Append the spore cobuild witness to the transaction if the input contains spore cell
   * (support spore transfer only for now, will support more in the future)
   * @param signedTx - the signed CKB transaction
   */
  private async appendSporeCobuildWitness(signedTx: CKBRawTransaction) {
    const inputs = await Promise.all(
      signedTx.inputs.map(async (input) => {
        return this.cradle.ckb.rpc.getLiveCell(input.previousOutput!, true);
      }),
    );
    const sporeLiveCells = inputs
      .filter(({ status, cell }) => {
        return status === 'live' && cell?.output.type && isClusterSporeTypeSupported(cell?.output.type, IS_MAINNET);
      })
      .map((liveCell) => liveCell.cell!);
    if (sporeLiveCells.length > 0) {
      signedTx.witnesses[signedTx.witnesses.length - 1] = generateSporeTransferCoBuild(
        sporeLiveCells,
        signedTx.outputs.slice(0, 1),
      );
    }
    return signedTx;
  }

  /**
   * Append the paymaster cell and sign the transaction if needed
   * @param btcTx - the Bitcoin transaction
   * @param ckbVirtualResult - the CKB virtual result
   * @param signedTx - the signed CKB transaction
   */
  private async appendPaymasterCellAndSignTx(
    btcTx: Transaction,
    ckbVirtualResult: CKBVirtualResult,
    signedTx: CKBRawTransaction,
  ) {
    if (this.cradle.paymaster.enablePaymasterReceivesUTXOCheck) {
      // make sure the paymaster received a UTXO as container fee
      const hasPaymasterUTXO = this.cradle.paymaster.hasPaymasterReceivedBtcUTXO(btcTx);
      if (!hasPaymasterUTXO) {
        this.cradle.logger.info(`[TransactionProcessor] Paymaster receives UTXO not found: ${btcTx.txid}`);
        throw new InvalidTransactionError('Paymaster receives UTXO not found', {
          txid: btcTx.txid,
          ckbVirtualResult,
        });
      }
    } else {
      this.cradle.logger.warn(`[TransactionProcessor] Paymaster receives UTXO check disabled`);
    }

    const isSporeTransfer = this.hasSporeTypeDep(signedTx);
    if (isSporeTransfer) {
      signedTx.witnesses = signedTx.witnesses.slice(0, -1);
    }
    const tx = await this.cradle.paymaster.appendCellAndSignTx(btcTx.txid, {
      ...ckbVirtualResult,
      ckbRawTx: signedTx!,
    });
    if (isSporeTransfer) {
      tx.witnesses.push('0x');
    }
    return tx;
  }

  /**
   * Fix the pool rejected transaction by increasing the fee rate
   * set the needPaymasterCell to true to append the paymaster cell to pay the rest of the fee
   */
  private async fixPoolRejectedTransactionByMinFeeRate(job: Job<ITransactionRequest>) {
    this.cradle.logger.debug(
      `[TransactionProcessor] Fix pool rejected transaction by increasing the fee rate: ${job.data.txid}`,
    );
    const { txid, ckbVirtualResult } = job.data;
    const { ckbRawTx } = ckbVirtualResult;
    // append the secp256k1 cell dep to the transaction
    ckbRawTx.cellDeps.push(getSecp256k1CellDep(IS_MAINNET));
    // update the job data to append the paymaster cell next time
    job.updateData({
      txid,
      ckbVirtualResult: {
        ...ckbVirtualResult,
        ckbRawTx,
        needPaymasterCell: true,
      },
    });
    await this.moveJobToDelayed(job);
  }

  /**
   * Process the transaction request, called by the worker
   * - get the Bitcoin transaction
   * - verify the transaction request
   * - append the RGBPP lock witness to the CKB transaction
   * - append the paymaster cell and sign the transaction if needed
   * - send the CKB transaction to the network and wait for the transaction to be confirmed
   * - mark the paymaster cell as spent to avoid double spending
   * @param job - the job to process
   * @param token - the token to get the next job
   */
  public async process(job: Job<ITransactionRequest>, token?: string) {
    try {
      const { ckbVirtualResult, txid } = cloneDeep(job.data);
      const btcTx = await this.cradle.bitcoin.getTx({ txid });
      const isVerified = await this.verifyTransaction({ ckbVirtualResult, txid }, btcTx);
      if (!isVerified) {
        throw new InvalidTransactionError('Invalid transaction', job.data);
      }

      const ckbRawTx = this.getCkbRawTxWithRealBtcTxid(ckbVirtualResult, txid);
      let signedTx = await this.appendTxWitnesses(txid, ckbRawTx);

      try {
        // append paymaster cell and sign the transaction if needed
        if (ckbVirtualResult.needPaymasterCell) {
          signedTx = await this.appendPaymasterCellAndSignTx(btcTx, ckbVirtualResult, signedTx);
        }
        this.cradle.logger.debug(`[TransactionProcessor] Transaction signed: ${JSON.stringify(signedTx)}`);

        // append the spore cobuild witness to the transaction
        if (this.hasSporeTypeDep(signedTx)) {
          signedTx = await this.appendSporeCobuildWitness(signedTx);
        }

        const txHash = await this.cradle.ckb.sendTransaction(signedTx);
        job.returnvalue = txHash;
        this.cradle.logger.info(`[TransactionProcessor] Transaction sent: ${txHash}`);

        await this.cradle.ckb.waitForTranscationConfirmed(txHash);
        this.cradle.logger.info(`[TransactionProcessor] Transaction confirmed: ${txHash}`);
        // mark the paymaster cell as spent to avoid double spending
        if (ckbVirtualResult.needPaymasterCell) {
          this.cradle.logger.info(`[TransactionProcessor] Mark paymaster cell as spent: ${txHash}`);
          await this.cradle.paymaster.markPaymasterCellAsSpent(txid, signedTx!);
        }

        // trigger the UTXO sync job if the cache is enabled
        // after the transaction is confirmed, the UTXO sync job will be triggered to sync the UTXO data
        // then the RGB++ cells cache will be updated with the latest UTXO data
        if (this.cradle.env.UTXO_SYNC_DATA_CACHE_ENABLE) {
          try {
            const addresses = btcTx.vout.map((vout) => vout.scriptpubkey_address).filter((address) => address);
            await Promise.all(addresses.map((address) => this.cradle.utxoSyncer.enqueueSyncJob(address!)));
          } catch (err) {
            // ignore the error if enqueue sync job failed, to avoid the transaction failed
            // already catch the error inside the utxo syncer
          }
        }
        return txHash;
      } catch (err) {
        // fix the pool rejected transaction by increasing the fee rate
        if (
          err instanceof CKBRpcError &&
          err.code === CKBRPCErrorCodes.PoolRejectedTransactionByMinFeeRate &&
          this.cradle.env.TRANSACTION_PAY_FOR_MIN_FEE_RATE_REJECT
        ) {
          await this.fixPoolRejectedTransactionByMinFeeRate(job);
          return;
        }
        // mark the paymaster cell as unspent if the transaction failed
        this.cradle.paymaster.markPaymasterCellAsUnspent(txid, signedTx!);
        throw err;
      }
    } catch (err) {
      this.cradle.logger.debug(err);
      if (err instanceof BitcoinClientAPIError && err.statusCode === HttpStatusCode.NotFound) {
        // move the job to delayed queue if the transaction is not found yet
        // only delay the job when the job is created less than 1 hour to make sure the transaction is existed
        // let the job failed if the transaction is not found after 1 hour
        const { TRANSACTION_QUEUE_JOB_DELAY, TRANSACTION_QUEUE_JOB_ATTEMPTS } = this.cradle.env;
        // for example, if the delay is 120s and the attempts is 6, the not found tolerance time is 120 * (2 ** 6) ~= 2 hours
        const notFoundToleranceTime = TRANSACTION_QUEUE_JOB_DELAY * 2 ** TRANSACTION_QUEUE_JOB_ATTEMPTS;
        if (Date.now() - job.timestamp < notFoundToleranceTime) {
          await this.moveJobToDelayed(job, token);
          return;
        }
      }

      // move the job to delayed queue if the transaction not confirmed or spv proof not found yet
      const transactionNotConfirmed = err instanceof TransactionNotConfirmedError;
      const spvProofNotReady = err instanceof BitcoinSPVError;
      if (transactionNotConfirmed || spvProofNotReady) {
        await this.moveJobToDelayed(job, token);
        return;
      }
      this.captureJobExceptionToSentryScope(job, err as Error);
      throw err;
    }
  }

  /**
   * Retry missing transactions
   * retry the mempool missing transactions when the blockchain block is confirmed
   */
  public async retryMissingTransactions() {
    const blockchainInfo = await this.cradle.bitcoin.getBlockchainInfo();
    // get the block height that has latest one confirmation
    const targetHeight = blockchainInfo.blocks - 1;

    const previousHeight = await this.cradle.redis.get('missing-transactions-height');
    const startHeight = BI.from(previousHeight ?? targetHeight - 1).toNumber();

    if (targetHeight > startHeight) {
      this.cradle.logger.info(`[TransactionProcessor] Missing transactions handling started`);
      // get all the txids from previousHeight to currentHeight
      const heights = Array.from({ length: targetHeight - startHeight }, (_, i) => startHeight + i + 1);
      const txidsGroups = await Promise.all(
        heights.map(async (height) => {
          const blockHash = await this.cradle.bitcoin.getBlockHeight({ height });
          return this.cradle.bitcoin.getBlockTxids({ hash: blockHash });
        }),
      );
      const txids = txidsGroups.flat();
      // create a bloom filter to test if the txid is in the filter
      const filter = BloomFilter.create(txids.length, 0.01);
      txids.forEach((txid) => filter.add(txid));
      // get all failed jobs from the queue and retry the transactions that are missing
      const jobs = await this.queue.getJobs(['failed']);
      await Promise.all(
        jobs.map(async (job) => {
          const txid = job.id as string;
          if (filter.has(txid)) {
            this.cradle.logger.info(`[TransactionProcessor] Retry missing transaction: ${txid}`);
            await job.retry();
          }
        }),
      );
      await this.cradle.redis.set('missing-transactions-height', BI.from(targetHeight).toHexString());
    }
  }

  /**
   * Enqueue a transaction request to the Queue, waiting for processing
   * @param request - the transaction request
   */
  public async enqueueTransaction(request: ITransactionRequest): Promise<Job<ITransactionRequest>> {
    const job = await this.queue.add(request.txid, request, {
      jobId: request.txid,
      delay: this.cradle.env.TRANSACTION_QUEUE_JOB_DELAY,
    });
    return job;
  }

  /**
   * Get the transaction request from the queue
   * @param txid - the transaction id
   */
  public async getTransactionRequest(txid: string): Promise<Job<ITransactionRequest> | undefined> {
    const job = await this.queue.getJob(txid);
    return job;
  }

  /**
   * get pending output cells by txid, get ckb output cells from the uncompleted job
   * @param txid - the transaction id
   */
  public async getPendingOutputCellsByTxid(txid: string): Promise<Cell[]> {
    const job = await this.getTransactionRequest(txid);
    if (!job) {
      return [];
    }

    // get ckb output cells from the uncompleted job only
    const state = await job.getState();
    if (state === 'completed' || state === 'failed') {
      return [];
    }

    const { ckbVirtualResult } = job.data;
    const outputs = ckbVirtualResult.ckbRawTx.outputs;
    return outputs.map((output, index) => {
      return Cell.parse({
        cellOutput: output,
        data: ckbVirtualResult.ckbRawTx.outputsData[index],
      });
    });
  }

  /**
   * get pending input cells by txid, get ckb input cells from the uncompleted job
   * @param txid - the transaction id
   */
  public async getPendingInputCellsByTxid(txid: string): Promise<Cell[]> {
    const job = await this.getTransactionRequest(txid);
    if (!job) {
      return [];
    }

    // get ckb input cells from the uncompleted job only
    const state = await job.getState();
    if (state === 'completed' || state === 'failed') {
      return [];
    }

    const { ckbVirtualResult } = job.data;
    const inputOutPoints = ckbVirtualResult.ckbRawTx.inputs.map((input) => input.previousOutput!);
    return await this.cradle.ckb.getInputCellsByOutPoint(inputOutPoints);
  }

  /**
   * Retry all failed jobs in the queue
   * @param maxAttempts - the max attempts to retry
   */
  public async retryAllFailedJobs(maxAttempts?: number): Promise<{ txid: string; state: string }[]> {
    let jobs = await this.queue.getJobs(['failed']);
    if (maxAttempts !== undefined) {
      jobs = jobs.filter((job) => job.attemptsMade <= maxAttempts);
    }
    const results = await Promise.all(
      jobs.map(async (job) => {
        this.cradle.logger.info(`[TransactionProcessor] Retry failed job: ${job.id}`);
        await job.retry();
        const state = await job.getState();
        return {
          txid: job.id!,
          state,
        };
      }),
    );
    return results;
  }
}


================================================
File: src/services/unlocker.ts
================================================
import { BI, CellCollector } from '@ckb-lumos/lumos';
import {
  BTCTimeLock,
  BTC_JUMP_CONFIRMATION_BLOCKS,
  Collector,
  IndexerCell,
  buildBtcTimeCellsSpentTx,
  buildSporeBtcTimeCellsSpentTx,
  isClusterSporeTypeSupported,
  isTypeAssetSupported,
  isUDTTypeSupported,
  remove0x,
  sendCkbTx,
  signBtcTimeCellSpentTx,
} from '@rgbpp-sdk/ckb';
import { btcTxIdAndAfterFromBtcTimeLockArgs } from '@rgbpp-sdk/ckb';
import { BtcAssetsApi } from '@rgbpp-sdk/service';
import { Cradle } from '../container';
import {
  BTC_MAINNET_SPV_START_BLOCK_HEIGHT,
  BTC_SIGNET_SPV_START_BLOCK_HEIGHT,
  BTC_TESTNET_SPV_START_BLOCK_HEIGHT,
  TESTNET_TYPE,
  IS_MAINNET,
} from '../constants';
import { getBtcTimeLock } from '../utils/lockscript';

interface IUnlocker {
  getNextBatchLockCell(): Promise<IndexerCell[]>;
  unlockCells(): Promise<string[]>;
}

/**
 * BTC Time lock cell unlocker
 * responsible for unlocking the BTC time lock cells and sending the CKB transactions.
 */
export default class Unlocker implements IUnlocker {
  private cradle: Cradle;
  private collector: CellCollector;

  constructor(cradle: Cradle) {
    this.cradle = cradle;
    this.collector = this.cradle.ckb.indexer.collector({
      lock: {
        ...this.lockScript,
        args: '0x',
      },
    }) as CellCollector;
  }

  private get lockScript() {
    return getBtcTimeLock();
  }

  private get btcSpvStartBlockHeight() {
    const network = this.cradle.env.NETWORK;
    if (network === 'mainnet') {
      return BTC_MAINNET_SPV_START_BLOCK_HEIGHT;
    }
    if (network === 'testnet') {
      return BTC_TESTNET_SPV_START_BLOCK_HEIGHT;
    }
    return BTC_SIGNET_SPV_START_BLOCK_HEIGHT;
  }

  /**
   * Get next batch of BTC time lock cells
   */
  public async getNextBatchLockCell() {
    const collect = this.collector.collect();
    const cells: IndexerCell[] = [];

    const { blocks } = await this.cradle.bitcoin.getBlockchainInfo();
    for await (const cell of collect) {
      // allow supported asset types only
      if (!cell.cellOutput.type || !isTypeAssetSupported(cell.cellOutput.type, IS_MAINNET)) {
        continue;
      }

      const btcTxid = remove0x(btcTxIdAndAfterFromBtcTimeLockArgs(cell.cellOutput.lock.args).btcTxId);
      const { after } = BTCTimeLock.unpack(cell.cellOutput.lock.args);
      const btcTx = await this.cradle.bitcoin.getTx({ txid: btcTxid });
      const blockHeight = btcTx.status.block_height;

      // skip if the block height of the btc txid is less than the BTC SPV start block height
      if (blockHeight && blockHeight < this.btcSpvStartBlockHeight) {
        continue;
      }

      // skip if btc tx not confirmed $after blocks yet
      if (!blockHeight || blocks - blockHeight < after) {
        continue;
      }

      if (after < BTC_JUMP_CONFIRMATION_BLOCKS) {
        // Discussion: Is it better to delay these types of unlock jobs?
        const info = {
          after,
          output: cell.cellOutput,
        };
        this.cradle.logger.warn(
          `[Unlocker] Unlocking a BTC_TIME_LOCK cell with a small confirmations: ${JSON.stringify(info)}`,
        );
      }

      cells.push({
        blockNumber: cell.blockNumber!,
        outPoint: cell.outPoint!,
        output: cell.cellOutput,
        outputData: cell.data,
        txIndex: cell.txIndex!,
      });
      if (cells.length >= this.cradle.env.UNLOCKER_CELL_BATCH_SIZE) {
        break;
      }
    }
    return cells;
  }

  /**
   * Build CKB transaction to spend the BTC time lock cells
   * @param cells - BTC time lock cells
   */
  private async buildSpentTxs(cells: IndexerCell[]): Promise<CKBComponents.RawTransaction[]> {
    const btcAssetsApi = {
      getRgbppSpvProof: this.cradle.spv.getTxProof.bind(this.cradle.spv),
    } as unknown as BtcAssetsApi;

    const ckbRawTxs = [];

    // udt type cells unlock
    const udtTypeCells = cells.filter((cell) => isUDTTypeSupported(cell.output.type!, IS_MAINNET));
    if (udtTypeCells.length > 0) {
      const ckbRawTx = await buildBtcTimeCellsSpentTx({
        btcTimeCells: udtTypeCells,
        btcAssetsApi,
        isMainnet: IS_MAINNET,
        btcTestnetType: TESTNET_TYPE,
      });
      ckbRawTxs.push(ckbRawTx);
    }

    // spore type cells unlock
    const sporeTypeCells = cells.filter((cell) => isClusterSporeTypeSupported(cell.output.type!, IS_MAINNET));
    if (sporeTypeCells.length > 0) {
      const ckbRawTx = await buildSporeBtcTimeCellsSpentTx({
        btcTimeCells: sporeTypeCells,
        btcAssetsApi,
        isMainnet: IS_MAINNET,
        btcTestnetType: TESTNET_TYPE,
      });
      ckbRawTxs.push(ckbRawTx);
    }
    return ckbRawTxs;
  }

  /**
   * Sign and send the CKB transaction to unlock the BTC time lock cells
   * @param ckbRawTx - CKB raw transaction
   */
  private async sendUnlockTx(ckbRawTx: CKBComponents.RawTransaction) {
    const collector = new Collector({
      ckbNodeUrl: this.cradle.env.CKB_RPC_URL,
      ckbIndexerUrl: this.cradle.env.CKB_RPC_URL,
    });

    const outputCapacityRange = [
      BI.from(1).toHexString(),
      BI.from(this.cradle.env.PAYMASTER_CELL_CAPACITY).toHexString(),
    ];
    const signedTx = await signBtcTimeCellSpentTx({
      secp256k1PrivateKey: this.cradle.paymaster.ckbPrivateKey,
      masterCkbAddress: this.cradle.paymaster.ckbAddress,
      collector,
      outputCapacityRange,
      ckbRawTx,
      isMainnet: IS_MAINNET,
    });
    this.cradle.logger.debug(`[Unlocker] Transaction signed: ${JSON.stringify(signedTx)}`);

    const txHash = await sendCkbTx({
      collector,
      signedTx,
    });
    this.cradle.logger.info(`[Unlocker] Transaction sent: ${txHash}`);
    return txHash;
  }

  /**
   * Unlock the BTC time lock cells and send the CKB transaction
   */
  public async unlockCells() {
    const cells = await this.getNextBatchLockCell();
    if (cells.length === 0) {
      return [];
    }
    this.cradle.logger.info(`[Unlocker] Unlock ${cells.length} BTC time lock cells`);

    const ckbRawTxs = await this.buildSpentTxs(cells);
    const txhashs = await Promise.all(ckbRawTxs.map(async (ckbRawTx) => this.sendUnlockTx(ckbRawTx)));
    return txhashs;
  }
}


================================================
File: src/services/utxo.ts
================================================
import { sha256 } from 'bitcoinjs-lib/src/crypto';
import { Cradle } from '../container';
import BaseQueueWorker from './base/queue-worker';
import { UTXO } from './bitcoin/schema';
import { z } from 'zod';
import { Job, RepeatOptions } from 'bullmq';
import * as Sentry from '@sentry/node';
import DataCache from './base/data-cache';
import { throttle } from 'lodash';
import validateBitcoinAddress from '../utils/validators';

interface IUTXOSyncRequest {
  btcAddress: string;
}

interface IUTXOSyncJobReturn {
  btcAddress: string;
  utxos: UTXO[];
  // use sha256(latest_txs_id) as the key, so we can check if the data is updated
  txsHash: string;
}

export const UTXO_SYNCER_QUEUE_NAME = 'utxo-syncer-queue';

class UTXOSyncerError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'UTXOSyncerError';
  }
}

/**
 * UTXOSyncer is used to sync the utxos for the btc address.
 * The utxos are stored in the cache with the btc address as the key,
 * will be resync when the btc address txs are updated.
 */
export default class UTXOSyncer extends BaseQueueWorker<IUTXOSyncRequest, IUTXOSyncJobReturn> {
  private cradle: Cradle;
  private dataCache: DataCache<IUTXOSyncJobReturn>;

  constructor(cradle: Cradle) {
    const defaultJobOptions = UTXOSyncer.getDefaultJobOptions(cradle);
    const repeatStrategy = UTXOSyncer.getRepeatStrategy(cradle);
    super({
      name: UTXO_SYNCER_QUEUE_NAME,
      connection: cradle.redis,
      queue: {
        defaultJobOptions,
        settings: {
          repeatStrategy,
        },
      },
      worker: {
        lockDuration: 60_000,
        removeOnComplete: { count: 0 },
        removeOnFail: { count: 0 },
        settings: {
          repeatStrategy,
        },
      },
    });
    this.cradle = cradle;
    this.dataCache = new DataCache(cradle.redis, {
      prefix: 'utxo-syncer-data',
      schema: z.object({
        btcAddress: z.string(),
        utxos: z.array(UTXO),
        txsHash: z.string(),
      }),
      expire: cradle.env.UTXO_SYNC_DATA_CACHE_EXPIRE,
    });
  }

  public static getDefaultJobOptions(cradle: Cradle) {
    return {
      attempts: 2,
      backoff: {
        type: 'exponential',
        delay: cradle.env.UTXO_SYNC_REPEAT_BASE_DURATION,
      },
    };
  }

  public static getRepeatStrategy(cradle: Cradle) {
    return (millis: number, opts: RepeatOptions) => {
      const { count = 0 } = opts;
      if (count === 0) {
        // immediately process the job when first added
        return millis;
      }
      // Exponential increase the repeat interval, with a maximum of maxDuration
      // For default values (base=10s, max=3600s), the interval will be 10s, 20s, 40s, 80s, 160s, ..., 3600s, 3600s, ...
      const baseDuration = cradle.env.UTXO_SYNC_REPEAT_BASE_DURATION;
      const maxDuration = cradle.env.UTXO_SYNC_REPEAT_MAX_DURATION;
      // Add some random delay to avoid all jobs being processed at the same time
      const duration = Math.min(Math.pow(2, count) * baseDuration, maxDuration) + Math.random() * 1000;
      cradle.logger.info(`[UTXOSyncer] Repeat job ${opts.jobId} in ${duration}ms`);
      return millis + duration;
    };
  }

  /**
   * Capture the job exception to Sentry with the btcAddress tag
   * @param job - the job that failed
   * @param err - the error that caused the job to fail
   */
  private captureJobExceptionToSentryScope(job: Job<IUTXOSyncRequest>, err: Error) {
    const { btcAddress } = job.data;
    Sentry.withScope((scope) => {
      // Ignore the error for the specified addresses to avoid too many errors
      if (this.cradle.env.SENTRY_IGNORE_UTXO_SYNC_ERROR_ADDRESSES.includes(btcAddress)) {
        return;
      }
      scope.setTag('btcAddress', btcAddress);
      this.cradle.logger.error(err);
      scope.captureException(err);
    });
  }

  /**
   * Get the utxos by btc address
   */
  public async getUtxosByAddress(btcAddress: string, noCache?: boolean) {
    if (this.cradle.env.UTXO_SYNC_DATA_CACHE_ENABLE && !noCache) {
      const cached = await this.dataCache.get(btcAddress);
      if (cached) {
        return cached.utxos;
      }
    }
    const utxos = await this.cradle.bitcoin.getAddressTxsUtxo({ address: btcAddress });
    return utxos;
  }

  private async _enqueueSyncJob(btcAddress: string) {
    if (!validateBitcoinAddress(btcAddress)) {
      throw new UTXOSyncerError(`Invalid btc address: ${btcAddress}`);
    }

    const jobs = await this.queue.getRepeatableJobs();
    const repeatableJob = jobs.find((job) => job.name === btcAddress);

    if (repeatableJob) {
      // Remove the existing repeatable job to update the start date, let the job be processed immediately
      this.cradle.logger.info(`[UTXOSyncer] Remove existing repeatable job for ${btcAddress}`);
      await this.queue.removeRepeatableByKey(repeatableJob.key);
    }

    return this.addJob(
      btcAddress,
      { btcAddress },
      {
        repeat: {
          pattern: 'exponential',
          // bullmq will end the repeat job when the end date is reached
          // https://github.com/taskforcesh/bullmq/blob/cce0774cffcee591407eee4d4530daa37aab3eca/src/classes/repeat.ts#L51
          endDate: Date.now() + this.cradle.env.UTXO_SYNC_REPEAT_EXPRIED_DURATION,
        },
        removeOnComplete: true,
        removeOnFail: true,
      },
    );
  }

  private enqueueSyncJobThrottle = throttle((address) => this._enqueueSyncJob(address), 1000, {
    leading: true,
  });

  /**
   * Enqueue a sync job for the btc address, with a throttle to avoid too many jobs being enqueued at the same time
   */
  public enqueueSyncJob(btcAddress: string) {
    this.cradle.logger.info(`[UTXOSyncer] Enqueue sync job for ${btcAddress}, ${Date.now()}`);
    return this.enqueueSyncJobThrottle(btcAddress);
  }

  public async process(job: Job<IUTXOSyncRequest>) {
    try {
      const { btcAddress } = job.data;
      if (!validateBitcoinAddress(btcAddress)) {
        if (job.repeatJobKey) {
          await this.queue.removeRepeatableByKey(job.repeatJobKey);
        }
        throw new Error(`Invalid btc address: ${btcAddress}`);
      }

      const txs = await this.cradle.bitcoin.getAddressTxs({ address: btcAddress });
      const txsHash = sha256(Buffer.from(txs.map((tx) => tx.txid + JSON.stringify(tx.status)).join(','))).toString();

      // check if the data is updated
      const cached = await this.dataCache.get(btcAddress);
      if (cached && txsHash === cached.txsHash) {
        this.cradle.logger.info(`[UTXOSyncer] ${btcAddress} is up to date, skip sync job`);
        return cached;
      }

      const utxos = await this.cradle.bitcoin.getAddressTxsUtxo({ address: btcAddress });
      const data = { btcAddress, utxos, txsHash };
      await this.dataCache.set(btcAddress, data);
    } catch (e) {
      const { message, stack } = e as Error;
      const error = new UTXOSyncerError(message);
      error.stack = stack;
      this.captureJobExceptionToSentryScope(job, error);
      throw e;
    }
  }
}


================================================
File: src/services/base/data-cache.ts
================================================
import { Redis } from 'ioredis';
import { z } from 'zod';

interface IDataCacheOptions<T> {
  prefix: string;
  expire: number;
  schema?: z.ZodType<T>;
}

class DataCacheError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'DataCacheError';
  }
}

export default class DataCache<T> {
  private redis: Redis;
  private prefix: string;
  private schema: z.ZodType<T>;
  private expire: number;

  constructor(redis: Redis, options: IDataCacheOptions<T>) {
    this.redis = redis;
    this.prefix = options.prefix;
    this.schema = options.schema ?? z.any();
    this.expire = options.expire;
  }

  public async set(id: string, data: unknown) {
    const parsed = this.schema.safeParse(data);
    if (!parsed.success) {
      throw new DataCacheError(parsed.error.message);
    }
    const key = `data-cache:${this.prefix}:${id}`;
    await this.redis.set(key, JSON.stringify(parsed.data), 'PX', this.expire);
    return parsed.data;
  }

  public async get(id: string): Promise<T | null> {
    const key = `data-cache:${this.prefix}:${id}`;
    const data = await this.redis.get(key);
    if (data) {
      const parsed = this.schema.safeParse(JSON.parse(data));
      if (parsed.success) {
        return parsed.data;
      }
    }
    return null;
  }
}


================================================
File: src/services/base/queue-worker.ts
================================================
import { Job, JobsOptions, Queue, QueueOptions, Worker, WorkerOptions } from 'bullmq';
import Redis from 'ioredis';
import * as Sentry from '@sentry/node';

interface IQueueWorkerOptions {
  name: string;
  connection: Redis;
  queue?: Omit<QueueOptions, 'connection'>;
  worker?: Omit<WorkerOptions, 'connection'>;
}

interface IProcessCallbacks<T> {
  onActive?: (job: Job<T>) => void;
  onCompleted?: (job: Job<T>) => void;
  onFailed?: (job: Job<T> | undefined, err: Error) => void;
}

export default abstract class BaseQueueWorker<T, R> {
  protected queue: Queue<T>;
  protected worker: Worker<T>;

  constructor(options: IQueueWorkerOptions) {
    const { name, connection, queue, worker } = options;
    this.queue = new Queue(name, {
      connection,
      ...queue,
    });
    this.worker = new Worker(
      name,
      async (job: Job<T>) => {
        const span = Sentry.startInactiveSpan({ name: this.constructor.name, op: 'process' });
        const returnvalue = await this.process(job);
        span?.end();
        return returnvalue;
      },
      {
        connection,
        autorun: false,
        ...worker,
      },
    );
  }

  abstract process(job: Job<T>): Promise<R | void>;

  /**
   * Add a job to the queue
   * @param jobId - the job id
   * @param data - the data for the job
   */
  public async addJob(jobId: string, data: T, options?: Omit<JobsOptions, 'jobId'>) {
    const job = await this.queue.add(jobId, data, {
      ...options,
      jobId,
    });
    return job;
  }

  /**
   * Get the queue job counts
   */
  public async getQueueJobCounts() {
    const counts = await this.queue.getJobCounts();
    return counts;
  }

  /**
   * Check if the worker is running
   */
  public async isWorkerRunning() {
    return this.worker.isRunning();
  }

  /**
   * Start the process
   * @param callbacks - the callbacks for the process
   * - onCompleted: the callback when the job is completed
   * - onFailed: the callback when the job is failed
   */
  public async startProcess(callbacks?: IProcessCallbacks<T>): Promise<void> {
    if (callbacks?.onActive) {
      this.worker.on('active', callbacks?.onActive);
    }
    if (callbacks?.onCompleted) {
      this.worker.on('completed', callbacks.onCompleted);
    }
    if (callbacks?.onFailed) {
      this.worker.on('failed', callbacks.onFailed);
    }
    await this.worker.run();
  }

  /**
   * Pause the process
   */
  public async pauseProcess(): Promise<void> {
    await this.worker.pause();
  }

  /**
   * Close the process
   */
  public async closeProcess(): Promise<void> {
    await this.worker.close();
    await this.queue.close();
  }
}


================================================
File: src/services/bitcoin/electrs.ts
================================================
import axios, { AxiosInstance } from 'axios';
import { IBitcoinDataProvider } from './interface';
import { Block, RecommendedFees, Transaction, UTXO } from './schema';

export class ElectrsClient implements IBitcoinDataProvider {
  private request: AxiosInstance;

  constructor(private baseURL: string) {
    this.request = axios.create({
      baseURL,
    });
  }

  public async getBaseURL(): Promise<string> {
    return this.baseURL;
  }

  public async getFeesRecommended(): Promise<RecommendedFees> {
    throw new Error('Electrs: Recommended fees not available');
  }

  public async postTx({ txhex }: { txhex: string }) {
    const response = await this.request.post('/tx', txhex);
    return response.data;
  }

  public async getAddressTxsUtxo({ address }: { address: string }) {
    const response = await this.request.get<UTXO[]>(`/address/${address}/utxo`);
    return response.data;
  }

  public async getAddressTxs({ address, after_txid }: { address: string; after_txid?: string }) {
    let url = `/address/${address}/txs`;
    if (after_txid) {
      url += `?after_txid=${after_txid}`;
    }
    const response = await this.request.get<Transaction[]>(url);
    return response.data.map((tx) => Transaction.parse(tx));
  }

  public async getTx({ txid }: { txid: string }) {
    const response = await this.request.get<Transaction>(`/tx/${txid}`);
    return Transaction.parse(response.data);
  }

  public async getTxHex({ txid }: { txid: string }) {
    const response = await this.request.get<string>(`/tx/${txid}/hex`);
    return response.data;
  }

  public async getBlock({ hash }: { hash: string }) {
    const response = await this.request.get<Block>(`/block/${hash}`);
    return Block.parse(response.data);
  }

  public async getBlockHeight({ height }: { height: number }) {
    const response = await this.request.get<string>(`/block-height/${height}`);
    return response.data;
  }

  public async getBlockHeader({ hash }: { hash: string }) {
    const response = await this.request.get<string>(`/block/${hash}/header`);
    return response.data;
  }

  public async getBlockTxids({ hash }: { hash: string }) {
    const response = await this.request.get<string[]>(`/block/${hash}/txids`);
    return response.data;
  }

  public async getBlocksTipHash() {
    const response = await this.request.get<string>('/blocks/tip/hash');
    return response.data;
  }
}


================================================
File: src/services/bitcoin/index.ts
================================================
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/ban-types */
import { HttpStatusCode, isAxiosError } from 'axios';
import * as Sentry from '@sentry/node';
import { Cradle } from '../../container';
import { IBitcoinBroadcastBackuper, IBitcoinDataProvider } from './interface';
import { MempoolClient } from './mempool';
import { ElectrsClient } from './electrs';
import { IS_MAINNET, NetworkType } from '../../constants';
import { ChainInfo } from './schema';

// https://github.com/mempool/electrs/blob/d4f788fc3d7a2b4eca4c5629270e46baba7d0f19/src/errors.rs#L6
export enum BitcoinClientErrorMessage {
  Connection = 'Connection error',
  Interrupt = 'Interruption by external signal',
  TooManyUtxos = 'Too many unspent transaction outputs',
  TooManyTxs = 'Too many history transactions',
  ElectrumClient = 'Electrum client error',
}

export enum BitcoinClientErrorCode {
  Connection = 0x1000, // 4096
  Interrupt = 0x1001, // 4097
  TooManyUtxos = 0x1002, // 4098
  TooManyTxs = 0x1003, // 4099
  ElectrumClient = 0x1004, // 4100
}

const BitcoinClientErrorMap = {
  [BitcoinClientErrorMessage.Connection]: BitcoinClientErrorCode.Connection,
  [BitcoinClientErrorMessage.Interrupt]: BitcoinClientErrorCode.Interrupt,
  [BitcoinClientErrorMessage.TooManyUtxos]: BitcoinClientErrorCode.TooManyUtxos,
  [BitcoinClientErrorMessage.TooManyTxs]: BitcoinClientErrorCode.TooManyTxs,
  [BitcoinClientErrorMessage.ElectrumClient]: BitcoinClientErrorCode.ElectrumClient,
};

export class BitcoinClientAPIError extends Error {
  public statusCode = HttpStatusCode.ServiceUnavailable;
  public errorCode: BitcoinClientErrorCode;

  constructor(message: string) {
    super(message);
    this.name = this.constructor.name;

    const errorKey = Object.keys(BitcoinClientErrorMap).find((msg) => message.startsWith(msg));
    this.errorCode = BitcoinClientErrorMap[errorKey as BitcoinClientErrorMessage];
  }
}

interface IBitcoinClient extends IBitcoinDataProvider {
  checkNetwork(network: NetworkType): Promise<void>;
  getBlockchainInfo(): Promise<ChainInfo>;
}

type MethodParameters<T, K extends keyof T> = T[K] extends (...args: infer P) => any ? P : never;
type MethodReturnType<T, K extends keyof T> = T[K] extends (...args: any[]) => infer R ? R : never;

export default class BitcoinClient implements IBitcoinClient {
  private cradle: Cradle;
  private source: IBitcoinDataProvider;
  private fallback?: IBitcoinDataProvider;
  private backupers: IBitcoinBroadcastBackuper[] = [];

  constructor(cradle: Cradle) {
    this.cradle = cradle;

    const { env } = cradle;
    switch (env.BITCOIN_DATA_PROVIDER) {
      case 'mempool':
        this.cradle.logger.info('Using Mempool.space API as the bitcoin data provider');
        this.source = new MempoolClient(env.BITCOIN_MEMPOOL_SPACE_API_URL, cradle);
        if (env.BITCOIN_ELECTRS_API_URL) {
          this.cradle.logger.info('Using Electrs API as the fallback bitcoin data provider');
          this.fallback = new ElectrsClient(env.BITCOIN_ELECTRS_API_URL);
        }
        break;
      case 'electrs':
        this.cradle.logger.info('Using Electrs API as the bitcoin data provider');
        this.source = new ElectrsClient(env.BITCOIN_ELECTRS_API_URL);
        if (env.BITCOIN_MEMPOOL_SPACE_API_URL) {
          this.cradle.logger.info('Using Mempool.space API as the fallback bitcoin data provider');
          this.fallback = new MempoolClient(env.BITCOIN_MEMPOOL_SPACE_API_URL, cradle);
        }
        break;
      default:
        throw new Error('Invalid bitcoin data provider');
    }

    if (this.fallback) {
      this.backupers.push(this.fallback);
    }
    if (
      env.BITCOIN_ADDITIONAL_BROADCAST_ELECTRS_URL_LIST &&
      env.BITCOIN_ADDITIONAL_BROADCAST_ELECTRS_URL_LIST.length > 0
    ) {
      const additionalElectrs = env.BITCOIN_ADDITIONAL_BROADCAST_ELECTRS_URL_LIST.map((url) => new ElectrsClient(url));
      this.backupers.push(...additionalElectrs);
    }
  }

  private async call<K extends keyof IBitcoinDataProvider>(
    method: K,
    ...args: MethodParameters<IBitcoinDataProvider, K>
  ): Promise<MethodReturnType<IBitcoinDataProvider, K>> {
    const dataSource = { source: this.source, fallback: this.fallback };

    const { env } = this.cradle;
    if (env.BITCOIN_DATA_PROVIDER === 'mempool' && env.BITCOIN_METHODS_USE_ELECTRS_BY_DEFAULT.includes(method)) {
      if (this.fallback) {
        dataSource.source = this.fallback;
        dataSource.fallback = this.source;
      } else {
        this.cradle.logger.warn('No fallback provider, skip using Electrs as default');
      }
    }

    const { source, fallback } = dataSource;
    try {
      this.cradle.logger.debug(`Calling ${method} with args: ${JSON.stringify(args)}`);
      const result = await (source[method] as Function).apply(source, args);
      return result as MethodReturnType<IBitcoinDataProvider, K>;
    } catch (err) {
      let calledError = err;
      this.cradle.logger.error(err);
      Sentry.captureException(err);
      if (fallback) {
        this.cradle.logger.warn(`Fallback to ${fallback.constructor.name} due to error: ${(err as Error).message}`);
        try {
          const result = await (fallback[method] as Function).apply(fallback, args);
          return result as MethodReturnType<IBitcoinDataProvider, K>;
        } catch (fallbackError) {
          this.cradle.logger.error(fallbackError);
          Sentry.captureException(fallbackError);
          calledError = fallbackError;
        }
      }
      if (isAxiosError(calledError)) {
        const error = new BitcoinClientAPIError(calledError.response?.data ?? calledError.message);
        if (calledError.response?.status) {
          error.statusCode = calledError.response.status;
        }
        throw error;
      }
      throw err;
    }
  }

  public async getBaseURL(): Promise<string> {
    return this.source.getBaseURL();
  }

  public async checkNetwork(network: NetworkType) {
    const hash = await this.getBlockHeight({ height: 0 });
    switch (network) {
      case NetworkType.mainnet:
        // Bitcoin mainnet genesis block hash
        if (hash !== '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f') {
          throw new Error('Bitcoin client is not running on mainnet');
        }
        break;
      case NetworkType.testnet:
        // Bitcoin testnet genesis block hash
        if (hash !== '000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943') {
          throw new Error('Bitcoin client is not running on testnet');
        }
        break;
      case NetworkType.signet:
        // Bitcoin signet genesis block hash
        if (hash !== '00000008819873e925422c1ff0f99f7cc9bbb232af63a077a480a3633bee1ef6') {
          throw new Error('Bitcoin client is not running on signet');
        }
        break;
      default:
    }
  }

  public async getBlockchainInfo(): Promise<ChainInfo> {
    const hash = await this.getBlocksTipHash();
    const tip = await this.getBlock({ hash });

    const { difficulty, mediantime } = tip;
    return {
      chain: IS_MAINNET ? 'main' : 'test',
      blocks: tip.height,
      bestblockhash: hash,
      difficulty,
      mediantime,
    };
  }

  public async getFeesRecommended() {
    return this.call('getFeesRecommended');
  }

  public async postTx({ txhex }: { txhex: string }) {
    const txid = await this.call('postTx', { txhex });
    Promise.allSettled(
      this.backupers.map(async (backuper) => {
        const baseURL = await backuper.getBaseURL();
        try {
          await backuper.postTx({ txhex });
        } catch (err) {
          Sentry.withScope((scope) => {
            scope.setTag('bitcoin.baseURL', baseURL);
            scope.captureException(err);
          });
        }
      }),
    );
    return txid;
  }

  public async getAddressTxsUtxo({ address }: { address: string }) {
    return this.call('getAddressTxsUtxo', { address });
  }

  public async getAddressTxs({ address, after_txid }: { address: string; after_txid?: string }) {
    return this.call('getAddressTxs', { address, after_txid });
  }

  public async getTx({ txid }: { txid: string }) {
    return this.call('getTx', { txid });
  }

  public async getTxHex({ txid }: { txid: string }) {
    return this.call('getTxHex', { txid });
  }

  public async getBlock({ hash }: { hash: string }) {
    return this.call('getBlock', { hash });
  }

  public async getBlockHeight({ height }: { height: number }) {
    return this.call('getBlockHeight', { height });
  }

  public async getBlockHeader({ hash }: { hash: string }) {
    return this.call('getBlockHeader', { hash });
  }

  public async getBlockTxids({ hash }: { hash: string }) {
    return this.call('getBlockTxids', { hash });
  }

  public async getBlocksTipHash() {
    return this.call('getBlocksTipHash');
  }
}


================================================
File: src/services/bitcoin/interface.ts
================================================
import { Block, RecommendedFees, Transaction, UTXO } from './schema';

export interface IBitcoinDataProvider {
  getBaseURL(): Promise<string>;
  getFeesRecommended(): Promise<RecommendedFees>;
  postTx({ txhex }: { txhex: string }): Promise<string>;
  getAddressTxsUtxo({ address }: { address: string }): Promise<UTXO[]>;
  getAddressTxs({ address, after_txid }: { address: string; after_txid?: string }): Promise<Transaction[]>;
  getTx({ txid }: { txid: string }): Promise<Transaction>;
  getTxHex({ txid }: { txid: string }): Promise<string>;
  getBlock({ hash }: { hash: string }): Promise<Block>;
  getBlockHeight({ height }: { height: number }): Promise<string>;
  getBlockHeader({ hash }: { hash: string }): Promise<string>;
  getBlockTxids({ hash }: { hash: string }): Promise<string[]>;
  getBlocksTipHash(): Promise<string>;
}

export type IBitcoinBroadcastBackuper = Pick<IBitcoinDataProvider, 'getBaseURL' | 'postTx'>;


================================================
File: src/services/bitcoin/mempool.ts
================================================
import { Cradle } from '../../container';
import { IBitcoinDataProvider } from './interface';
import mempoolJS from '@mempool/mempool.js';
import { Block, RecommendedFees, Transaction, UTXO } from './schema';
import * as Sentry from '@sentry/node';
import { FeesMempoolBlocks } from '@mempool/mempool.js/lib/interfaces/bitcoin/fees';

export class MempoolClient implements IBitcoinDataProvider {
  private mempool: ReturnType<typeof mempoolJS>;
  private defaultFee = 1;

  constructor(
    private baseURL: string,
    cradle: Cradle,
  ) {
    const url = new URL(baseURL);
    this.mempool = mempoolJS({
      hostname: url.hostname,
      network: cradle.env.NETWORK,
    });
  }

  public async getBaseURL(): Promise<string> {
    return this.baseURL;
  }

  // https://github.com/mempool/mempool/blob/dbd4d152ce831859375753fb4ca32ac0e5b1aff8/backend/src/api/fee-api.ts#L77
  private roundUpToNearest(value: number, nearest: number): number {
    return Math.ceil(value / nearest) * nearest;
  }

  // https://github.com/mempool/mempool/blob/dbd4d152ce831859375753fb4ca32ac0e5b1aff8/backend/src/api/fee-api.ts#L65
  private optimizeMedianFee(
    pBlock: FeesMempoolBlocks,
    nextBlock: FeesMempoolBlocks | undefined,
    previousFee?: number,
  ): number {
    const useFee = previousFee ? (pBlock.medianFee + previousFee) / 2 : pBlock.medianFee;
    if (pBlock.blockVSize <= 500000) {
      return this.defaultFee;
    }
    if (pBlock.blockVSize <= 950000 && !nextBlock) {
      const multiplier = (pBlock.blockVSize - 500000) / 500000;
      return Math.max(Math.round(useFee * multiplier), this.defaultFee);
    }
    return this.roundUpToNearest(useFee, this.defaultFee);
  }

  // https://github.com/mempool/mempool/blob/dbd4d152ce831859375753fb4ca32ac0e5b1aff8/backend/src/api/fee-api.ts#L22
  private async calculateRecommendedFee(): Promise<RecommendedFees> {
    const pBlocks = await this.mempool.bitcoin.fees.getFeesMempoolBlocks();
    const minimumFee = this.defaultFee;
    const defaultMinFee = this.defaultFee;

    if (!pBlocks.length) {
      return {
        fastestFee: defaultMinFee,
        halfHourFee: defaultMinFee,
        hourFee: defaultMinFee,
        economyFee: minimumFee,
        minimumFee: minimumFee,
      };
    }

    const firstMedianFee = this.optimizeMedianFee(pBlocks[0], pBlocks[1]);
    const secondMedianFee = pBlocks[1]
      ? this.optimizeMedianFee(pBlocks[1], pBlocks[2], firstMedianFee)
      : this.defaultFee;
    const thirdMedianFee = pBlocks[2]
      ? this.optimizeMedianFee(pBlocks[2], pBlocks[3], secondMedianFee)
      : this.defaultFee;

    let fastestFee = Math.max(minimumFee, firstMedianFee);
    let halfHourFee = Math.max(minimumFee, secondMedianFee);
    let hourFee = Math.max(minimumFee, thirdMedianFee);
    const economyFee = Math.max(minimumFee, Math.min(2 * minimumFee, thirdMedianFee));

    fastestFee = Math.max(fastestFee, halfHourFee, hourFee, economyFee);
    halfHourFee = Math.max(halfHourFee, hourFee, economyFee);
    hourFee = Math.max(hourFee, economyFee);

    return {
      fastestFee: fastestFee,
      halfHourFee: halfHourFee,
      hourFee: hourFee,
      economyFee: economyFee,
      minimumFee: minimumFee,
    };
  }

  public async getFeesRecommended() {
    try {
      const response = await this.mempool.bitcoin.fees.getFeesRecommended();
      return RecommendedFees.parse(response);
    } catch (e) {
      Sentry.withScope((scope) => {
        scope.captureException(e);
      });
      const fees = await this.calculateRecommendedFee();
      return RecommendedFees.parse(fees);
    }
  }

  public async postTx({ txhex }: { txhex: string }) {
    const response = await this.mempool.bitcoin.transactions.postTx({ txhex });
    return response as string;
  }

  public async getAddressTxsUtxo({ address }: { address: string }) {
    const response = await this.mempool.bitcoin.addresses.getAddressTxsUtxo({ address });
    return response.map((utxo) => UTXO.parse(utxo));
  }

  public async getAddressTxs({ address, after_txid }: { address: string; after_txid?: string }) {
    const response = await this.mempool.bitcoin.addresses.getAddressTxs({ address, after_txid });
    return response.map((tx) => Transaction.parse(tx));
  }

  public async getTx({ txid }: { txid: string }) {
    const response = await this.mempool.bitcoin.transactions.getTx({ txid });
    return Transaction.parse(response);
  }

  public async getTxHex({ txid }: { txid: string }) {
    const response = await this.mempool.bitcoin.transactions.getTxHex({ txid });
    return response;
  }

  public async getBlock({ hash }: { hash: string }) {
    const response = await this.mempool.bitcoin.blocks.getBlock({ hash });
    return Block.parse(response);
  }

  public async getBlockHeight({ height }: { height: number }) {
    const response = await this.mempool.bitcoin.blocks.getBlockHeight({ height });
    return response;
  }

  public async getBlockHeader({ hash }: { hash: string }) {
    const response = await this.mempool.bitcoin.blocks.getBlockHeader({ hash });
    return response;
  }

  public async getBlockTxids({ hash }: { hash: string }) {
    const response = await this.mempool.bitcoin.blocks.getBlockTxids({ hash });
    return response;
  }

  public async getBlocksTipHash() {
    const response = await this.mempool.bitcoin.blocks.getBlocksTipHash();
    return response;
  }
}


================================================
File: src/services/bitcoin/schema.ts
================================================
import { z } from 'zod';

export const ChainInfo = z.object({
  chain: z.string(),
  blocks: z.number(),
  bestblockhash: z.string(),
  difficulty: z.number(),
  mediantime: z.number(),
});

export const Block = z.object({
  id: z.string(),
  height: z.number(),
  version: z.number(),
  timestamp: z.number(),
  tx_count: z.number(),
  size: z.number(),
  weight: z.number(),
  merkle_root: z.string(),
  previousblockhash: z.string(),
  mediantime: z.number(),
  nonce: z.number(),
  bits: z.number(),
  difficulty: z.number(),
});

export const Status = z.object({
  confirmed: z.boolean(),
  block_height: z.number().optional(),
  block_hash: z.string().optional(),
  block_time: z.number().optional(),
});

export const Balance = z.object({
  address: z.string(),
  satoshi: z.number(),
  pending_satoshi: z.number(),
  dust_satoshi: z.number(),
  utxo_count: z.number(),
});

export const UTXO = z.object({
  txid: z.string(),
  vout: z.number(),
  value: z.number(),
  status: Status,
});

const Output = z.object({
  scriptpubkey: z.string(),
  scriptpubkey_asm: z.string(),
  scriptpubkey_type: z.string(),
  scriptpubkey_address: z.string().optional(),
  value: z.number(),
});

const Input = z.object({
  txid: z.string(),
  vout: z.number(),
  prevout: Output.or(z.null()),
  scriptsig: z.string(),
  scriptsig_asm: z.string(),
  witness: z.array(z.string()).optional(),
  is_coinbase: z.boolean(),
  sequence: z.coerce.number(),
});

export const Transaction = z.object({
  txid: z.string(),
  version: z.number(),
  locktime: z.number(),
  vin: z.array(Input),
  vout: z.array(Output),
  size: z.number(),
  weight: z.number(),
  fee: z.number(),
  status: Status,
});

export const RecommendedFees = z.object({
  fastestFee: z.number(),
  halfHourFee: z.number(),
  hourFee: z.number(),
  economyFee: z.number(),
  minimumFee: z.number(),
});

export type ChainInfo = z.infer<typeof ChainInfo>;
export type Block = z.infer<typeof Block>;
export type Balance = z.infer<typeof Balance>;
export type UTXO = z.infer<typeof UTXO>;
export type Transaction = z.infer<typeof Transaction>;
export type RecommendedFees = z.infer<typeof RecommendedFees>;


================================================
File: src/utils/commitment.ts
================================================
import { cloneDeep } from 'lodash';
import { opReturnScriptPubKeyToData } from '@rgbpp-sdk/btc';
import { calculateCommitment } from '@rgbpp-sdk/ckb';
import { RGBPP_TX_ID_PLACEHOLDER, BTCTimeLock, buildPreLockArgs, genBtcTimeLockArgs } from '@rgbpp-sdk/ckb';
import { Transaction } from '../routes/bitcoin/types';
import { isBtcTimeLock, isRgbppLock } from './lockscript';

export class OpReturnNotFoundError extends Error {
  constructor(txid: string) {
    super(`OP_RETURN output not found: ${txid}`);
    this.name = this.constructor.name;
  }
}

/**
 * Get commitment from the Bitcoin transaction
 * depended on @rgbpp-sdk/btc opReturnScriptPubKeyToData method
 * @param tx - Bitcoin transaction
 */
export function getCommitmentFromBtcTx(tx: Transaction): Buffer {
  const opReturn = tx.vout.find((vout) => vout.scriptpubkey_type === 'op_return');
  if (!opReturn) {
    throw new OpReturnNotFoundError(tx.txid);
  }
  const buffer = Buffer.from(opReturn.scriptpubkey, 'hex');
  return opReturnScriptPubKeyToData(buffer);
}

/**
 * Try to get commitment from the Bitcoin transactions, returns null if OP_RETURN output not found
 * depended on @rgbpp-sdk/btc opReturnScriptPubKeyToData method
 * @param tx - Bitcoin transaction
 */
export function tryGetCommitmentFromBtcTx(tx: Transaction): Buffer | null {
  try {
    return getCommitmentFromBtcTx(tx);
  } catch (error) {
    if (error instanceof OpReturnNotFoundError) {
      return null;
    }
    throw error;
  }
}

/**
 * Validate if the commitment matches the CKB transaction
 * @param commitment - The expected commitment from a Bitcoin transaction
 * @param ckbTx - The target CKB transaction or RawTransaction to compare with
 * @param lastTypeInputIndex - The last index of type script input in the ckbTx
 * @param lastTypeOutputIndex - The last index of type script output in the ckbTx
 */
export function isCommitmentMatchToCkbTx(
  commitment: string,
  ckbTx: CKBComponents.RawTransaction,
  lastTypeInputIndex: number,
  lastTypeOutputIndex: number,
) {
  function replaceLockArgsWithPlaceholder(cell: CKBComponents.CellOutput, outputIndex: number) {
    if (isRgbppLock(cell.lock)) {
      cell.lock.args = buildPreLockArgs(outputIndex + 1);
    }
    if (isBtcTimeLock(cell.lock)) {
      const { lockScript, after } = BTCTimeLock.unpack(cell.lock.args);
      cell.lock.args = genBtcTimeLockArgs(lockScript as CKBComponents.Script, RGBPP_TX_ID_PLACEHOLDER, after);
    }
    return cell;
  }

  // Use the ckb_tx to compare with the btc_tx commitment directly
  const finalTx = cloneDeep(ckbTx);
  finalTx.outputs = finalTx.outputs.map(replaceLockArgsWithPlaceholder);
  const finalTxCommitment = calculateCommitment(finalTx);
  if (commitment === finalTxCommitment) {
    return true;
  }

  // Slice inputs and outputs of the ckb_tx to simulate how the original ckb_virtual_result looks like
  const slicedTx = cloneDeep(ckbTx);
  slicedTx.inputs = slicedTx.inputs.slice(0, Math.max(lastTypeInputIndex, 0) + 1);
  slicedTx.outputs = slicedTx.outputs.slice(0, lastTypeOutputIndex + 1).map(replaceLockArgsWithPlaceholder);
  const slicedTxCommitment = calculateCommitment(slicedTx);
  if (commitment === slicedTxCommitment) {
    return true;
  }

  // If both commitments don't match the btc_tx commitment:
  // 1. The ckb_tx does not match to the commitment from the btc_tx (the usual case)
  // 2. The provided btc_tx commitment calculation is different from this function
  return false;
}


================================================
File: src/utils/interceptors.ts
================================================
import { AxiosInstance } from 'axios';
import pino from 'pino';

export function addLoggerInterceptor(request: AxiosInstance, logger: pino.BaseLogger) {
  request.interceptors.request.use((config) => {
    logger.debug(`[${config.url}] ${JSON.stringify(config.data)}`);
    return config;
  });

  request.interceptors.response.use(
    (response) => {
      logger.debug(`[${response.config.url}] ${response.status} ${JSON.stringify(response.data)}`);
      return response;
    },
    (error) => {
      logger.error(`${error.response?.status} ${JSON.stringify(error.response?.data)}`);
      return Promise.reject(error);
    },
  );
}


================================================
File: src/utils/lockscript.ts
================================================
import { getBtcTimeLockScript, getRgbppLockScript } from '@rgbpp-sdk/ckb';
import { IS_MAINNET, TESTNET_TYPE } from '../constants';

export function getRgbppLock(): CKBComponents.Script {
  return getRgbppLockScript(IS_MAINNET, TESTNET_TYPE);
}

export function getBtcTimeLock(): CKBComponents.Script {
  return getBtcTimeLockScript(IS_MAINNET, TESTNET_TYPE);
}

export function isRgbppLock(script: CKBComponents.Script): boolean {
  const rgbppLock = getRgbppLock();
  return script.codeHash === rgbppLock.codeHash && script.hashType === rgbppLock.hashType;
}

export function isBtcTimeLock(script: CKBComponents.Script): boolean {
  const btcTimeLock = getBtcTimeLock();
  return script.codeHash === btcTimeLock.codeHash && script.hashType === btcTimeLock.hashType;
}


================================================
File: src/utils/spore.ts
================================================
import { unpackToRawSporeData, unpackToRawClusterData, predefinedSporeConfigs } from '@spore-sdk/core';

export { unpackToRawSporeData, unpackToRawClusterData };

export function getSporeConfig(isMainnet: boolean) {
  const config = predefinedSporeConfigs[isMainnet ? 'Mainnet' : 'Testnet'];
  return config;
}


================================================
File: src/utils/typescript.ts
================================================
import { blockchain } from '@ckb-lumos/base';
import { Script } from '@ckb-lumos/lumos';
import { isScriptEqual } from '@rgbpp-sdk/ckb';
import { Cell } from '../routes/rgbpp/types';

/**
 * Get type script from request query
 */
export function getTypeScript(type_script: string | Script | undefined) {
  if (!type_script) {
    return undefined;
  }
  let typeScript: Script | undefined = undefined;
  if (type_script) {
    if (typeof type_script === 'string') {
      if (type_script.startsWith('0x')) {
        typeScript = blockchain.Script.unpack(type_script);
      } else {
        typeScript = JSON.parse(decodeURIComponent(type_script));
      }
    } else {
      typeScript = type_script;
    }
  }
  return typeScript;
}

/**
 * Filter cells by type script
 */
export function filterCellsByTypeScript(cells: Cell[], typeScript: Script) {
  return cells.filter((cell) => {
    if (!cell.cellOutput.type) {
      return false;
    }
    // if typeScript.args is empty, only compare codeHash and hashType
    if (!typeScript.args) {
      const script = { ...cell.cellOutput.type, args: '' };
      return isScriptEqual(script, typeScript);
    }
    return isScriptEqual(cell.cellOutput.type, typeScript);
  });
}


================================================
File: src/utils/validators.ts
================================================
import * as AddressValidator from 'multicoin-address-validator';
import { env } from '../env';
import { NetworkType } from '../constants';

export default function validateBitcoinAddress(address: string): boolean {
  return AddressValidator.validate(address, 'BTC', env.NETWORK === NetworkType.mainnet.toString() ? 'prod' : 'testnet');
}


================================================
File: src/utils/xudt.ts
================================================
import { BI } from '@ckb-lumos/lumos';
import { remove0x } from '@rgbpp-sdk/btc';
import { getUniqueTypeScript } from '@rgbpp-sdk/ckb';

export function decodeUDTHashFromInscriptionData(data: string) {
  try {
    const hex = remove0x(data);
    const nameSize = BI.from(`0x${hex.slice(2, 4)}`).toNumber() * 2;
    const symbolSize = BI.from(`0x${hex.slice(4 + nameSize, 4 + nameSize + 2)}`).toNumber() * 2;
    const udtHashStart = 4 + nameSize + 2 + symbolSize;
    return `0x${hex.slice(udtHashStart, udtHashStart + 64)}`;
  } catch (e) {
    return null;
  }
}

export function getInscriptionInfoTypeScript(isMainnet: boolean) {
  const TESTNET_INSCRIPTION_INFO_TYPE_SCRIPT: CKBComponents.Script = {
    codeHash: '0x50fdea2d0030a8d0b3d69f883b471cab2a29cae6f01923f19cecac0f27fdaaa6',
    hashType: 'type',
    args: '',
  };

  const MAINNET_INSCRIPTION_INFO_TYPE_SCRIPT: CKBComponents.Script = {
    codeHash: '0x5c33fc69bd72e895a63176147c6ab0bb5758d1c7a32e0914f99f9ec1bed90d41',
    hashType: 'type',
    args: '',
  };
  return isMainnet ? MAINNET_INSCRIPTION_INFO_TYPE_SCRIPT : TESTNET_INSCRIPTION_INFO_TYPE_SCRIPT;
}

export function getInscriptionTypeScript(isMainnet: boolean) {
  const TESTNET_INSCRIPTION_TYPE_SCRIPT: CKBComponents.Script = {
    codeHash: '0x3a241ceceede72a5f55c8fb985652690f09a517d6c9070f0df0d3572fa03fb70',
    hashType: 'type',
    args: '',
  };

  const MAINNET_INSCRIPTION_TYPE_SCRIPT: CKBComponents.Script = {
    codeHash: '0x7490970e6af9b9fe63fc19fc523a12b2ec69027e6ae484edffb97334f74e8c97',
    hashType: 'type',
    args: '',
  };
  return isMainnet ? MAINNET_INSCRIPTION_TYPE_SCRIPT : TESTNET_INSCRIPTION_TYPE_SCRIPT;
}

export function getInscriptionRebaseTypeScript(isMainnet: boolean) {
  const TEST_INSCRIPTION_REBASE_TYPE_SCRIPT: CKBComponents.Script = {
    codeHash: '0x93043b66bb20797caad0deacaadbada5e58f0893d770ecdddb8806aff8877e29',
    hashType: 'type',
    args: '',
  };
  const MAIN_INSCRIPTION_REBASE_TYPE_SCRIPT: CKBComponents.Script = {
    codeHash: '0xda8fbf9b8497c0a34fad89377026e51128817c60167a2b7673b27c1a3f2a331f',
    hashType: 'type',
    args: '',
  };
  return isMainnet ? MAIN_INSCRIPTION_REBASE_TYPE_SCRIPT : TEST_INSCRIPTION_REBASE_TYPE_SCRIPT;
}

export function isUniqueCellTypeScript(script: CKBComponents.Script, isMainnet: boolean) {
  const uniqueCellTypeScript = getUniqueTypeScript(isMainnet);
  return script.codeHash === uniqueCellTypeScript.codeHash && script.hashType === uniqueCellTypeScript.hashType;
}

export function isInscriptionInfoTypeScript(script: CKBComponents.Script, isMainnet: boolean) {
  const inscriptionTypeScript = getInscriptionInfoTypeScript(isMainnet);
  return script.codeHash === inscriptionTypeScript.codeHash && script.hashType === inscriptionTypeScript.hashType;
}

export function isInscriptionRebaseTypeScript(script: CKBComponents.Script, isMainnet: boolean) {
  const inscriptionRebaseTypeScript = getInscriptionRebaseTypeScript(isMainnet);
  return (
    script.codeHash === inscriptionRebaseTypeScript.codeHash && script.hashType === inscriptionRebaseTypeScript.hashType
  );
}


================================================
File: test/app.test.ts
================================================
import { expect, test } from 'vitest';
import { buildFastify } from '../src/app';

test('`/docs/json` - 200', async () => {
  const fastify = buildFastify();
  await fastify.ready();

  const response = await fastify.inject({
    method: 'GET',
    url: '/docs/json',
  });
  const data = response.json();

  expect(response.statusCode).toBe(200);
  expect(data.openapi).toBe('3.1.0');
  expect(Object.keys(data.paths)).toStrictEqual([
    '/token/generate',
    '/bitcoin/v1/info',
    '/bitcoin/v1/block/{hash}',
    '/bitcoin/v1/block/{hash}/txids',
    '/bitcoin/v1/block/{hash}/header',
    '/bitcoin/v1/block/height/{height}',
    '/bitcoin/v1/transaction',
    '/bitcoin/v1/transaction/{txid}',
    '/bitcoin/v1/transaction/{txid}/hex',
    '/bitcoin/v1/address/{address}/balance',
    '/bitcoin/v1/address/{address}/unspent',
    '/bitcoin/v1/address/{address}/txs',
    '/bitcoin/v1/fees/recommended',
    '/rgbpp/v1/transaction/ckb-tx',
    '/rgbpp/v1/transaction/{btc_txid}',
    '/rgbpp/v1/transaction/{btc_txid}/job',
    '/rgbpp/v1/transaction/retry',
    '/rgbpp/v1/assets/{btc_txid}',
    '/rgbpp/v1/assets/{btc_txid}/{vout}',
    '/rgbpp/v1/assets/type',
    '/rgbpp/v1/address/{btc_address}/assets',
    '/rgbpp/v1/address/{btc_address}/balance',
    '/rgbpp/v1/address/{btc_address}/activity',
    '/rgbpp/v1/btc-spv/proof',
    '/rgbpp/v1/paymaster/info',
    '/cron/process-transactions',
    '/cron/unlock-cells',
    '/cron/sync-utxo',
    '/cron/collect-rgbpp-cells',
  ]);

  await fastify.close();
});


================================================
File: test/setup.ts
================================================
import { afterAll, vi } from 'vitest';
import container from '../src/container';

if (process.env.CI_REDIS_URL) {
  vi.stubEnv('REDIS_URL', process.env.CI_REDIS_URL);
}

afterAll(async () => {
  container.cradle.redis.flushall();
});


================================================
File: test/__fixtures__/rgbpp-utxo-pairs.mock.json
================================================
[
  {
    "utxo": {
      "txid": "0c05a2ba51c6284eb1411bd7d49df455da97a482a8ce47266b50a4d3d857ee29",
      "vout": 2,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2585022,
        "block_hash": "00000000000000000b871290b8d050dc6b57104deada7f6c26d59d567c7ac94a",
        "block_time": 1712125215
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9f5203e",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x0200000029ee57d8d3a4506b2647cea882a497da55f49dd4d71b41b14e28c651baa2050c",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
            "hashType": "type"
          }
        },
        "data": "0xc0d45407000000000000000000000000",
        "outPoint": {
          "txHash": "0x4f8f6042b3646e677c871be1629150407b520e48174612d428506995f6055558",
          "index": "0x0"
        },
        "blockNumber": "0xc35b01",
        "txIndex": "0x8"
      }
    ]
  },
  {
    "utxo": {
      "txid": "0bd22675d00f3b958dd25cef3c6bf4df6a63511393ff59c959d158d1cf3626f4",
      "vout": 2,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2811244,
        "block_hash": "000000000000009de2006782c905136c925bbb4bb89e504e970affe1c20bbfee",
        "block_time": 1714790623
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9e620d3",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x02000000f42636cfd158d159c959ff931351636adff46b3cef5cd28d953b0fd07526d20b",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
            "hashType": "type"
          }
        },
        "data": "0x008c8647000000000000000000000000",
        "outPoint": {
          "txHash": "0xe098e5919e496fc6efb601307578cc436df7d554b9a3994f03b85d0ad2e8e7a6",
          "index": "0x0"
        },
        "blockNumber": "0xc87015",
        "txIndex": "0x1"
      }
    ]
  },
  {
    "utxo": {
      "txid": "ed1a688bc23811a386cb517f7430701e7f3a059e88eff184a237168a79fb8a8c",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2817185,
        "block_hash": "00000000000000074d01a1844db22ada24e70043bac0d05a83aa2234cd5c3de9",
        "block_time": 1716459057
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0xa7a358200",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x000000008c8afb798a1637a284f1ef889e053a7f1e7030747f51cb86a31138c28b681aed",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
            "args": "0xaf68a7bcf1423b57e7ce8636c28dedb463c6e69f62b1b35ca1ed9abf9a6b3d18",
            "hashType": "data1"
          }
        },
        "data": "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
        "outPoint": {
          "txHash": "0xdd0226408c4c31b2466f7c3d661d4e3e3c8b429631212a525f6668765baadc80",
          "index": "0x0"
        },
        "blockNumber": "0xcc3842",
        "txIndex": "0x1"
      }
    ]
  },
  {
    "utxo": {
      "txid": "3ef5c0de31f0fdf051cf5658ad278b6726839dcb16996b530e719104f4c0189b",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2816698,
        "block_hash": "0000000000000007270b0f8be9b3b61c49a09dd7af0bb0f800aef8dbbf594e35",
        "block_time": 1716276487
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x000000009b18c0f40491710e536b9916cb9d8326678b27ad5856cf51f0fdf031dec0f53e",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
            "hashType": "type"
          }
        },
        "data": "0x80969800000000000000000000000000",
        "outPoint": {
          "txHash": "0x3aeb2a7f8e00ca32fae9b658da88274f2dcfeff41108ea28b567dc9b79c7dd3c",
          "index": "0x0"
        },
        "blockNumber": "0xcb4375",
        "txIndex": "0x3"
      }
    ]
  },
  {
    "utxo": {
      "txid": "057d3146e3ad62b82ac33c4a39c4aca5e21c2c8770dd8c9e6dc1dcf05dd2d4bb",
      "vout": 2,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2585023,
        "block_hash": "0000000000000365f0619dc58091519f4e7bdddc44b3b10f0a4ccfa668da1a31",
        "block_time": 1712126418
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9f52f1f",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x02000000bbd4d25df0dcc16d9e8cdd70872c1ce2a5acc4394a3cc32ab862ade346317d05",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
            "hashType": "type"
          }
        },
        "data": "0xa08d7313000000000000000000000000",
        "outPoint": {
          "txHash": "0x71b4f66ac7f657e3b96b5b0694de5fadb61740d2644eabb91090dd9bce93316a",
          "index": "0x0"
        },
        "blockNumber": "0xc35ba6",
        "txIndex": "0x4"
      }
    ]
  },
  {
    "utxo": {
      "txid": "f7b43efe2d16d6bf352a774478f26589408af010e874598bf7524973ad6147b2",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2816698,
        "block_hash": "0000000000000007270b0f8be9b3b61c49a09dd7af0bb0f800aef8dbbf594e35",
        "block_time": 1716276487
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x00000000b24761ad734952f78b5974e810f08a408965f27844772a35bfd6162dfe3eb4f7",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
            "hashType": "type"
          }
        },
        "data": "0x80f0fa02000000000000000000000000",
        "outPoint": {
          "txHash": "0xb5ab02c1583387fa7bc3cb7e61daccead6d4d6b9a1294555328d4bc209ed5f8f",
          "index": "0x0"
        },
        "blockNumber": "0xcb4378",
        "txIndex": "0x1"
      }
    ]
  },
  {
    "utxo": {
      "txid": "fdfa7aa12825e77996b67eaa6f0bcb11515138927e070ca196a13ed40a626f90",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2816987,
        "block_hash": "0000000000000002d2dc7f2a5ff816564d746298563451852b9d33a5452bd206",
        "block_time": 1716365229
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x94a39af00",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x00000000906f620ad43ea196a10c077e9238515111cb0b6faa7eb69679e72528a17afafd",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
            "args": "0xacb57628e8814a675ac3dfcdcd86b89da85399a82bfceedccb2c8a2200c48c1e",
            "hashType": "data1"
          }
        },
        "data": "0xa100000010000000190000007d00000005000000646f622f30600000007b22626c6f636b5f6e756d626572223a31333038343932382c2263656c6c5f6964223a363132303533383831383036373235383030302c22646e61223a226166323566336565383563383734623030343638316334333162373835626231227d20000000c1097c85aa781d2cd3c017dc911eceab94644cfe2dd714ae7f7bbe4b75accb08",
        "outPoint": {
          "txHash": "0x3b1a2d2d00a5ef95b45d93cc1d9394a411319f956121d95104b784e8b469f538",
          "index": "0x0"
        },
        "blockNumber": "0xcc383d",
        "txIndex": "0x3"
      }
    ]
  },
  {
    "utxo": {
      "txid": "a46315f568b38160b2c9e0c68f678b5fe787e6eb0b5c70b55a64e9255e946e97",
      "vout": 2,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2585023,
        "block_hash": "0000000000000365f0619dc58091519f4e7bdddc44b3b10f0a4ccfa668da1a31",
        "block_time": 1712126418
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9f52f1f",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x02000000976e945e25e9645ab5705c0bebe687e75f8b678fc6e0c9b26081b368f51563a4",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
            "hashType": "type"
          }
        },
        "data": "0x01000000000000000000000000000000",
        "outPoint": {
          "txHash": "0x274865dc9e754ab8fc96cbc7be20093feca0073b91d3157aed2639f6e89ada90",
          "index": "0x0"
        },
        "blockNumber": "0xc35ba6",
        "txIndex": "0x8"
      }
    ]
  },
  {
    "utxo": {
      "txid": "368df7f60e443a12a4c13ce75866d6e1e9ade576e200851e3e278669a661fda7",
      "vout": 1,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2818010,
        "block_hash": "000000000000000136b682e35e2ccce1a8b2d408f81607237ddf27f3acdb92ba",
        "block_time": 1716787908
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x01000000a7fd61a66986273e1e8500e276e5ade9e1d66658e73cc1a4123a440ef6f78d36",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
            "hashType": "type"
          }
        },
        "data": "0x00e1f505000000000000000000000000",
        "outPoint": {
          "txHash": "0xefcada73aa020bfc4c4dc7192f9a6a6e6152af77d1bb2c2380314b4130751bc4",
          "index": "0x1"
        },
        "blockNumber": "0xcc3d9d",
        "txIndex": "0x6"
      }
    ]
  },
  {
    "utxo": {
      "txid": "6569ef36067b822a25a7741e0d17f46e042ae64a1add22e21192b96b3c317efe",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2816662,
        "block_hash": "0000000000000001f67d59ba0b956a30a68bed4154c02c29a34b4ff84e54eb26",
        "block_time": 1716265235
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x00000000fe7e313c6bb99211e222dd1a4ae62a046ef4170d1e74a7252a827b0636ef6965",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
            "hashType": "type"
          }
        },
        "data": "0x00e1f505000000000000000000000000",
        "outPoint": {
          "txHash": "0xeec5c357338f622f9bf586532be687f8fc1918566f27b4abb7fa5f9c1891af6b",
          "index": "0x0"
        },
        "blockNumber": "0xcb42df",
        "txIndex": "0x2"
      }
    ]
  },
  {
    "utxo": {
      "txid": "fc9f146aeda2134bd6ab488dcd2d2f04090e3f4d4916c9c073ba93591ec4b34d",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2816711,
        "block_hash": "000000000000000a2d71867394388670e82b65ae1588306d06a2e6c070dec47e",
        "block_time": 1716280561
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x000000004db3c41e5993ba73c0c916494d3f0e09042f2dcd8d48abd64b13a2ed6a149ffc",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
            "hashType": "type"
          }
        },
        "data": "0xa0860100000000000000000000000000",
        "outPoint": {
          "txHash": "0x2f6b86c4311dc854e779c0bbce110f397a0acc03dfe435aedf832b4f3de1a485",
          "index": "0x0"
        },
        "blockNumber": "0xcb669c",
        "txIndex": "0x1"
      }
    ]
  },
  {
    "utxo": {
      "txid": "f3618e2a8e5b091fd1381cd7d67c3dececb2727fdbeb9887965b577b6c2239ab",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2816899,
        "block_hash": "000000000000000838d3bf989d702597827cd9830b8bedeaba49a5f2621053fa",
        "block_time": 1716348699
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0xa7a358200",
          "lock": {
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "args": "0x00000000ab39226c7b575b968798ebdb7f72b2ecec3d7cd6d71c38d11f095b8e2a8e61f3",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
            "args": "0x76fd065c31d24a2c8219e7d56942fed3d49ff728697d98a1079edb06187ec91c",
            "hashType": "data1"
          }
        },
        "data": "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
        "outPoint": {
          "txHash": "0xbd1886d03da82d0a012af423044d8f192598d3a7be454397497fd22aba2a784e",
          "index": "0x0"
        },
        "blockNumber": "0xcb7072",
        "txIndex": "0x1"
      }
    ]
  },
  {
    "utxo": {
      "txid": "13618e2a8e5b091fd1381cd7d67c3dececb2727fdbeb9887965b577b6c2239ab",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2816899,
        "block_hash": "000000000000000838d3bf989d702597827cd9830b8bedeaba49a5f2621053fa",
        "block_time": 1716348699
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0x1b381be34e00",
          "lock": {
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "args": "0x9787495f518fec240d7857067f3016daf705286d",
            "hashType": "type"
          },
          "type": {
            "codeHash": "0xf5da9003e31fa9301a3915fe304de9bdb80524b5f0d8fc325fb699317998ee7a",
            "args": "0xa63d308c04b4c075eb1d7d5cac891cf20276e3ddb2ec855fc981c88d8134dbe2",
            "hashType": "type"
          }
        },
        "data": "0x00000000000000000000000000000000",
        "outPoint": {
          "txHash": "0xe4e156943c82ee5500d39343a01dda0c48946a6000f449c58ac91708576cf669",
          "index": "0x2"
        },
        "blockNumber": "0xf17dd7",
        "txIndex": "0x1"
      }
    ]
  },
  {
    "utxo": {
      "txid": "45618e2a8e5b091fd1381cd7d67c3dececb2727fdbeb9887965b577b6c2239ab",
      "vout": 0,
      "value": 546,
      "status": {
        "confirmed": true,
        "block_height": 2816899,
        "block_hash": "000000000000000838d3bf989d702597827cd9830b8bedeaba49a5f2621053fa",
        "block_time": 1716348699
      }
    },
    "cells": [
      {
        "cellOutput": {
          "capacity": "0xbe5cc1f00",
          "lock": {
            "args": "0x5ee4738bd0a9a6b94fc203cf76e95790e05fd740",
            "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
            "hashType": "type"
          },
          "type": {
            "args": "0x878fcc6f1f08d48e87bb1c3b3d5083f23f8a39c5d5c764f253b55b998526439b",
            "codeHash": "0x1142755a044bf2ee358cba9f2da187ce928c91cd4dc8692ded0337efa677d21a",
            "hashType": "type"
          }
        },
        "data": "0x00c817a8040000000000000000000000",
        "outPoint": {
          "index": "0x2",
          "txHash": "0xe6b4da0fe4f1bad78c0d404bd92753373092c21ac58694425cf104e953a01964"
        },
        "txIndex": "0x1",
        "typeHash": "0x45b32a2bc4285d0a09678eb11960ddc8707bc2779887a09d482e9bfe9a2cdf52"
      }
    ]
  }
]


================================================
File: test/__fixtures__/transactions.mock.json
================================================
[
  {
    "txid": "be3cd87c020a74d14918eca5f6fde489d29e05306633e9bf400e05f9c16a984a",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "b298e48b6975e527e065569d930af17b9100b82cdc14eefd08e86cf1a2529da0",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 745766
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30440220047f67b54ac52c1941c1f49a2152dafd946944e22778b272f70d3bcd0eeb72af02204f6ea6943bfe9987ef7490d5379e0d2febb86250dc413f6d4c5f07d50ec2737601",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 708278
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 36942,
    "status": {
      "confirmed": true,
      "block_height": 2822267,
      "block_hash": "00000000a3ca017e047736df9f5a7eecc0873d453b978ffe00edd75f5be2c7fc",
      "block_time": 1719235852
    }
  },
  {
    "txid": "a57b1fed4a832fda31899cfdf407800f1e8aeb599483e96b7ef156fc66b8c8c9",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "6974c8248d6c0349422acfedb81494dee5a21b11b36301ddcd3149edf94ee816",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100d92135302e38d94f178b823756255c63cc09de84c995009606941437fad3131902207d7310127d0bfd13787a4c0996961b8449e73c07326c80c2e1536b43827ac9fe01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "4b1494422cedf66799fa4aed57e5e3c62841ba12b79b4095b0d8c54688e4e339",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 26081
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30450221009974269d9b0e04f3a946e340ba8efb4d6f3fc90e7da4f11a1114116b6c82c735022059e3a340ba3d66619ab395dd4f4d14bbe766949e35e96c96194a612c040581a901",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "6974c8248d6c0349422acfedb81494dee5a21b11b36301ddcd3149edf94ee816",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 529703
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100f093438a2ff7d6dc5551553e7d786c9c4644cb26213d08b3d0635128d1ad95ca02207305c0ab8fd5fcd38cc279fcbaf7ee94cbaabd0b563dc10a63c5145ad8cb387401",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20dfe3522837b4dff757c583b4c8025478ad020ae4f6b026029f328156571d1f78",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 dfe3522837b4dff757c583b4c8025478ad020ae4f6b026029f328156571d1f78",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
        "value": 12000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 448678
      }
    ],
    "size": 607,
    "weight": 1450,
    "fee": 95106,
    "status": {
      "confirmed": true,
      "block_height": 2822262,
      "block_hash": "00000000b06bc6e43ff905b5e2b900c87733b6eb544950e73973b3bfaf69dd01",
      "block_time": 1719229747
    }
  },
  {
    "txid": "b298e48b6975e527e065569d930af17b9100b82cdc14eefd08e86cf1a2529da0",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "4b1494422cedf66799fa4aed57e5e3c62841ba12b79b4095b0d8c54688e4e339",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100c5021f7d8e00d203152658cc8abf61e24dac4538a38c85829b5adf1c5754f5dd02204c554e23a3deb9c839d7bc14e1e1dcbd25010e202a905dcd5b66193c47e7af8701",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "fec895ab19c7bb7e14f315691adde21d62f759b0eb323a122b1edfa35a571fc0",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 803122
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100939a89468b854371b3bb0986fa8decef41c8af820e1b85839f1bcc118ffe21d00220231400f9a35686c707917b4408bc0d0579a95bdf59606ea62dda68093e9c3b0101",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20c0cc27b12593a61071c59012f6f2f4fb2674960659e2670a2249a082b13a1c12",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 c0cc27b12593a61071c59012f6f2f4fb2674960659e2670a2249a082b13a1c12",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 745766
      }
    ],
    "size": 384,
    "weight": 882,
    "fee": 57902,
    "status": {
      "confirmed": true,
      "block_height": 2822262,
      "block_hash": "00000000b06bc6e43ff905b5e2b900c87733b6eb544950e73973b3bfaf69dd01",
      "block_time": 1719229747
    }
  },
  {
    "txid": "c81b46eded09268da540dc207af08ed1737acfb6da37854b85e1751f3d02956f",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "d6e2daf713b33d7e60ba48c8300ce102f07f869f7c29c58d0123d5ee0f334720",
        "vout": 3,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 428237
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402206b5a55fbb71a036d3f3a91daab501a21fd7facd8204f8253520ae4a3cd0c1114022025e04b1892eb93bfa64f94b5b1e34ec40a0561dc5d5cae124dd5d087fe4229e801",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 390749
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 36942,
    "status": {
      "confirmed": true,
      "block_height": 2822262,
      "block_hash": "00000000b06bc6e43ff905b5e2b900c87733b6eb544950e73973b3bfaf69dd01",
      "block_time": 1719229747
    }
  },
  {
    "txid": "fec895ab19c7bb7e14f315691adde21d62f759b0eb323a122b1edfa35a571fc0",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "95f45c8834a6d80b1f5cd33f12565406b3b537228f65485044cde68a0517d2f1",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30440220020239bcf1956bfb8a20a7d3c57af7eab2f4df53b56d1e99af0ed768ebb3baf302202e0a1c16426848a4f5bf6196855c67864818c1781fe79f085b1a0a8bda895d3001",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "9b524dad1078024d6bc274854857ef2bd7a1db56add2df364574ceda952e36bb",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 860478
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30450221009f708fc5a496f6f69898b582417340437ee4c1d62b57fcef19fd0a327fc484e6022012befa331005980fe148042d9a2a4ffaabd0aa157fa8701f8e3008fa9efae25101",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20fdcacc58dcc4a9c0abd579afd468c084219ca61fb22ae44976cc17d42948c471",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 fdcacc58dcc4a9c0abd579afd468c084219ca61fb22ae44976cc17d42948c471",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 803122
      }
    ],
    "size": 383,
    "weight": 881,
    "fee": 57902,
    "status": {
      "confirmed": true,
      "block_height": 2822254,
      "block_hash": "000000001237393a91dc9071043f36f4e9cde544db02e0ce5908c1d1dc23b667",
      "block_time": 1719219815
    }
  },
  {
    "txid": "d6e2daf713b33d7e60ba48c8300ce102f07f869f7c29c58d0123d5ee0f334720",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "f6e2123b18280db695238f00c45eaf18b06f274b1c10a462866cea186e046ff2",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022058b7629c18d38e8a15c093ef78381d4fe2f3c04fc633ec12f5d31b3666c941670220321ef611f1d1ef29dde979b9a24620a9e8e25ef436ffc94e83b6f6951911004001",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "41c8c4f7da7c2bda56128465a3c645d2c3117afe3e67845b075a8f1f98d68d69",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 517527
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100dd533db1656f44a5f2737ed053ddac584e9e671020dddf041038d65c503f4b3c022035701c4038fd0d519899d972c76c5353d3c43b274b62a80dd71674901597b3a201",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20742df9c559b3a70ae7887c88f7ad8840ece38649aef0f2661799f2b4b231077d",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 742df9c559b3a70ae7887c88f7ad8840ece38649aef0f2661799f2b4b231077d",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
        "value": 12000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 428237
      }
    ],
    "size": 457,
    "weight": 1177,
    "fee": 77290,
    "status": {
      "confirmed": true,
      "block_height": 2822254,
      "block_hash": "000000001237393a91dc9071043f36f4e9cde544db02e0ce5908c1d1dc23b667",
      "block_time": 1719219815
    }
  },
  {
    "txid": "4b1494422cedf66799fa4aed57e5e3c62841ba12b79b4095b0d8c54688e4e339",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "db4b684848550d6d37f96a0e439e9469382bbf6d45fc14a42566cf364818b5b9",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 63569
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304502210084eb22abb525dbef0cc2d06a4ea21eb46f8beb92f0610db960563d11fcda3c2902201e7ee9c4e27505d5d2c50908416f3f4347b1a8f80f81399708865a2b820a4bf601",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 26081
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 36942,
    "status": {
      "confirmed": true,
      "block_height": 2822252,
      "block_hash": "0000000069834a4aa838316f9c2eb96777761bd9d71ce00ce6004f856088ab8c",
      "block_time": 1719217272
    }
  },
  {
    "txid": "6974c8248d6c0349422acfedb81494dee5a21b11b36301ddcd3149edf94ee816",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "95f45c8834a6d80b1f5cd33f12565406b3b537228f65485044cde68a0517d2f1",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 567191
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022024f73809729b74596a37602cca70b601848bdeafa71a52d896ffa5c00d56321f02204b904011e5e90a65752b25ff0aaccc3ecbccdf6ebace0cbf88ce34c8188ef54c01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 529703
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 36942,
    "status": {
      "confirmed": true,
      "block_height": 2822252,
      "block_hash": "0000000069834a4aa838316f9c2eb96777761bd9d71ce00ce6004f856088ab8c",
      "block_time": 1719217272
    }
  },
  {
    "txid": "9b524dad1078024d6bc274854857ef2bd7a1db56add2df364574ceda952e36bb",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "ee126c4030e35fe4d7f79f389c1c64e152c1ae04edb303ec58bbe6ffb2b6272c",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "5120456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c772",
          "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c772",
          "scriptpubkey_type": "v1_p2tr",
          "scriptpubkey_address": "tb1pg43j05xe0wzajw99m9qs7f2dp8j0ywtn5pmqkwjcq2en5gyecaeqvxwe7p",
          "value": 886678
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "8efa0fa264aabf5a0c450c3f90855e51e1487b6172e73d3f7bf2eb763aec9ae920c3e9960212f7881bce91126285ed39d2b3c1977d6135bcea4ac3cfd5e99aa4"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 860478
      }
    ],
    "size": 150,
    "weight": 396,
    "fee": 26200,
    "status": {
      "confirmed": true,
      "block_height": 2822252,
      "block_hash": "0000000069834a4aa838316f9c2eb96777761bd9d71ce00ce6004f856088ab8c",
      "block_time": 1719217272
    }
  },
  {
    "txid": "41c8c4f7da7c2bda56128465a3c645d2c3117afe3e67845b075a8f1f98d68d69",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "7afac559c8c6b5449fc7588997bd0126d52ab8702346b057aa150df281ead4e6",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014261ff6056c97453e3bea2f162c754b95df816721",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 261ff6056c97453e3bea2f162c754b95df816721",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1qyc0lvptvjaznuwl29utzca2tjh0czeepdt63ax",
          "value": 546347
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402207bfc6d3a3a30434f2fc11f206f60c92bb8f4b5e4ddf18becb6ab037f603ca1c502203e86ba0bdbb816159da0349393d67ccccf34ea7b7764a82f690aca69caedda3d01",
          "03a63a7345679d9b573364725275f9f2790cc27382bba101d506dddfbb74d9a86c"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 517527
      }
    ],
    "size": 191,
    "weight": 437,
    "fee": 28820,
    "status": {
      "confirmed": true,
      "block_height": 2822251,
      "block_hash": "00000000466e54c4da003f5d6879823bf1611ce8d5c1e1575fb6a37cfaca5524",
      "block_time": 1719216011
    }
  },
  {
    "txid": "95f45c8834a6d80b1f5cd33f12565406b3b537228f65485044cde68a0517d2f1",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "e9f718f2819ff3727ee0a219663a7e1935041e0d0585a1dc80836c64ef2c7557",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 604679
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022038edcad992a6c4e78a0092393f1314af8dd8d5f4b30fa1e9aeefca96d88ce9c7022070995759469475f67eae1463051115415120e67cd957f7bc860103a405130c5601",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 567191
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 36942,
    "status": {
      "confirmed": true,
      "block_height": 2822232,
      "block_hash": "00000000c2b29cb30345a303b75a984ea2662c6eccf13dfb01d4f62a76ca35cf",
      "block_time": 1719201633
    }
  },
  {
    "txid": "db4b684848550d6d37f96a0e439e9469382bbf6d45fc14a42566cf364818b5b9",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "bcde41c186e00d9881fda06d3f7c1088e9151c99daeb53e791d13e53f3a81fcc",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022010f55c2b62ff86439913512974897961a2cb460581046617dc6a1096507f0ac402205ef2fa3c48b60cdab646142d2f2bbd8c3e40c7f7c31235f8a4819d17c5234f5d01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "f6e2123b18280db695238f00c45eaf18b06f274b1c10a462866cea186e046ff2",
        "vout": 3,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 120925
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402206dad3adaaa8c7a237903883dfaadeb767853aee2fb7994d90367bffc806f97310220248e8bf08ca20c950179400829120d029fd133d94ba2bb6fc1b9c3bc4108539c01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20047c23cc337ac78379b3b8daef7c572daca48d097b3de7b8cfea8484c7ff8a9c",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 047c23cc337ac78379b3b8daef7c572daca48d097b3de7b8cfea8484c7ff8a9c",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 63569
      }
    ],
    "size": 382,
    "weight": 880,
    "fee": 57902,
    "status": {
      "confirmed": true,
      "block_height": 2822232,
      "block_hash": "00000000c2b29cb30345a303b75a984ea2662c6eccf13dfb01d4f62a76ca35cf",
      "block_time": 1719201633
    }
  },
  {
    "txid": "f6e2123b18280db695238f00c45eaf18b06f274b1c10a462866cea186e046ff2",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "cb7b66080966215f6a539da2ceeda13404b703392bf68183eba3fe337c5658e0",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402203008f35616a21cf10508383dc73050eef8ab29a3915a02a14f26f4f906627e59022075057fd2d13c8e4ef69bf84338779e7ab84f67fd148b6e61b34061c1b8b0fefe01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "8bd67c75660fa72d7eab38fc5c015afb4d92af9ee5d206a8a7dcda25ececf411",
        "vout": 2,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 210510
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402206652ca42c0f7af2e411852bde876e9bf970129722caaf60483bceec00930573002201d2ff4bdf4c160873169c83f3a46352368d9f8769ad9230183154abefab881c601",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a2053b2a56ac5a8b6842e24d0a016736d2e58352025637c71ca49f911f4b263fc7f",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 53b2a56ac5a8b6842e24d0a016736d2e58352025637c71ca49f911f4b263fc7f",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
        "value": 12000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 120925
      }
    ],
    "size": 456,
    "weight": 1176,
    "fee": 77585,
    "status": {
      "confirmed": true,
      "block_height": 2822231,
      "block_hash": "0000000083c9a8c2e365a6fa79e4651fefac8e75b0d682a2a749f5fb1b75134f",
      "block_time": 1719200372
    }
  },
  {
    "txid": "e9f718f2819ff3727ee0a219663a7e1935041e0d0585a1dc80836c64ef2c7557",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "afb19caf6cae2adabe64980a8deb2de734eaf7167684724024d29f260d238e12",
        "vout": 3,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 642308
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30440220614795b12fbb707d78c06091bdcf4d4d1ee2d8020b2350473653d72212d852ee0220672877971343cbf94806d27e45f21f5d88a2ab2dc5349e4928522319977f90ce01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 604679
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 37083,
    "status": {
      "confirmed": true,
      "block_height": 2822231,
      "block_hash": "0000000083c9a8c2e365a6fa79e4651fefac8e75b0d682a2a749f5fb1b75134f",
      "block_time": 1719200372
    }
  },
  {
    "txid": "8bd67c75660fa72d7eab38fc5c015afb4d92af9ee5d206a8a7dcda25ececf411",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "afb19caf6cae2adabe64980a8deb2de734eaf7167684724024d29f260d238e12",
        "vout": 2,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100e2862bb3f9a0d1dd290746092cfa6ad484b76356d89ca9bfda2a5717e9f95d9a02201deae2551b603fa3581ed86a243490d5c99ccf6252a7bd8f04084371e4e3c7a401",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "bcde41c186e00d9881fda06d3f7c1088e9151c99daeb53e791d13e53f3a81fcc",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 281790
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022011cbb8be5590910068fb41500d8495db7bcd71fca911e8f3d8c0e33f0d7f38ee02206dc09320a8f73698b35c095ef078e70e87ea8713066251566b13a0bea072dbae01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a2032a52071295c4c6768bb737f15687df79d00496d706c323fc929d607221a13ff",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 32a52071295c4c6768bb737f15687df79d00496d706c323fc929d607221a13ff",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "5120456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c772",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c772",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pg43j05xe0wzajw99m9qs7f2dp8j0ywtn5pmqkwjcq2en5gyecaeqvxwe7p",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 210510
      }
    ],
    "size": 426,
    "weight": 1053,
    "fee": 71280,
    "status": {
      "confirmed": true,
      "block_height": 2821940,
      "block_hash": "00000000000000058a8c6aa08b259b2a6356549a3c25393ef54f8c13c78670e9",
      "block_time": 1718957136
    }
  },
  {
    "txid": "afb19caf6cae2adabe64980a8deb2de734eaf7167684724024d29f260d238e12",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "cb7b66080966215f6a539da2ceeda13404b703392bf68183eba3fe337c5658e0",
        "vout": 3,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 717546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402204c301ab0043bfb5b8a05e00a17cb321df199f78b664d8e35037adc99daa5ff3b02201984f61b83c73a4487a532d972b25860e07a6abfc0941fdd5a10287bdb37862101",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "7bb43ceef1d3f603141ead9fc0852e23c7eb84f868bf866bbc670ed9f4378665",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "00149c76450de82d1ce126b3a90846775b60f343631a",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 9c76450de82d1ce126b3a90846775b60f343631a",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1qn3my2r0g95wwzf4n4yyyva6mvre5xcc6l72uzk",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30440220131db7ee6a75eaf4529023f60233f79dc54a12015a3db7e1da7235fd1fdd2ef2022000b54660fd8fd736b5e64176033991ae14c42cde7c822608bd8e6c98b2c7440583",
          "034941782143891c72ce81dd5ba5c5ab64c6a5e269a86d33010c7a6149dc237a13"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a206eb1ead0366a45ce9926ac5bc7165e32b3efd2ddc642be71b3b483acc83e5f64",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 6eb1ead0366a45ce9926ac5bc7165e32b3efd2ddc642be71b3b483acc83e5f64",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "00149c76450de82d1ce126b3a90846775b60f343631a",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 9c76450de82d1ce126b3a90846775b60f343631a",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1qn3my2r0g95wwzf4n4yyyva6mvre5xcc6l72uzk",
        "value": 1092
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 642308
      }
    ],
    "size": 444,
    "weight": 1128,
    "fee": 74146,
    "status": {
      "confirmed": true,
      "block_height": 2821933,
      "block_hash": "00000000249b997629764f03d49522897759937c7fde948c61a8e40669e17f97",
      "block_time": 1718958336
    }
  },
  {
    "txid": "cb7b66080966215f6a539da2ceeda13404b703392bf68183eba3fe337c5658e0",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "03d0a2a3b2487f04f6e6f83c151473d40e1be0e142c7fb35f85c7560a89fc383",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022047349dddeb6d661223ccb6cbf12eed9a1131d4923eaa39dc4f84eb121dc3edfb022064357721251ac68d16f14ef675f1cf901d4145d9506b76a683d7943c6f8aa68801",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "1df3be4ff641c8dabb52ddf81a57193eedfef855ff5d90bb757b1d73381346bd",
        "vout": 3,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 809196
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100da36ff5e92b7bcfd08d7ce9501fcfacaa8489d4b2fe238d8d54e8a20e2688da6022027a961499875e5510d2a2c52aa3a39a8121c0b44706157414d224991dc1a641701",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20863c75f6f8cb37ef47e65ed9e2f773d7eaa6070e35ef4ec35f15320b6c2a61d2",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 863c75f6f8cb37ef47e65ed9e2f773d7eaa6070e35ef4ec35f15320b6c2a61d2",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
        "value": 12000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 717546
      }
    ],
    "size": 457,
    "weight": 1177,
    "fee": 79650,
    "status": {
      "confirmed": true,
      "block_height": 2821923,
      "block_hash": "00000000bb90992acbf2db204324c909f18630f1d4c1df68d88135444db72ff8",
      "block_time": 1718946041
    }
  },
  {
    "txid": "bcde41c186e00d9881fda06d3f7c1088e9151c99daeb53e791d13e53f3a81fcc",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "4ceea45c565b22dd0477334ecb18d2d07fb7aa4329b6a99ce8e44dd7ebd26bb3",
        "vout": 3,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 320406
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100c56b06ed4ff2bcca9687cc889ba6a865bae3f18bd8f1dee655ebf5a8212858cd02204d6ac98e6e3a8b769d026e441cb555d74b76ddbd7032119c73a042fb47fccf8f01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 281790
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 38070,
    "status": {
      "confirmed": true,
      "block_height": 2821923,
      "block_hash": "00000000bb90992acbf2db204324c909f18630f1d4c1df68d88135444db72ff8",
      "block_time": 1718946041
    }
  },
  {
    "txid": "4ceea45c565b22dd0477334ecb18d2d07fb7aa4329b6a99ce8e44dd7ebd26bb3",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "665c750546a1baf364818a7c0306f327a721a4b74865f91292c608a39dcd8bfb",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402201b3d54eab8142ff46b69c149af038bd6e7b60997afb6546c6a2188442799f76a0220158266501e762d8199706c564e68026451764deeb970203513fcff9ba800d34901",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "fbb568ce9e0e6810d0a119b4e478c05d0bea390959cb475c2acd055e94e03b66",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 412056
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022009a1a2ab2ee77dd02681b139cf7ac5d1beaae0429d03d24ea5946e8c56c524f7022003b721a9e49b745143000ed395d0ea9fd8758ae54edf3790467ab219472e0cc001",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20a204e2240c9893bd6809c12c9f5bc4fa488a4a87f6ff8f1e1b7d22626a079716",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 a204e2240c9893bd6809c12c9f5bc4fa488a4a87f6ff8f1e1b7d22626a079716",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
        "value": 12000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 320406
      }
    ],
    "size": 456,
    "weight": 1176,
    "fee": 79650,
    "status": {
      "confirmed": true,
      "block_height": 2821861,
      "block_hash": "0000000011052d6636e804ebab1897a153dbf2d89fb53a5b462457c9d2e79a77",
      "block_time": 1718894123
    }
  },
  {
    "txid": "1df3be4ff641c8dabb52ddf81a57193eedfef855ff5d90bb757b1d73381346bd",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "9c6882b24f8d856f8f16c4f20775f2ce1c42bb88881567ce5d84cd0951a18e0b",
        "vout": 2,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022057340d900d15ccab889a5f22e37dc1621a4d24c1f5b2c53f46cbecd9f243fade02205780e3bc4da86a1238cb8f1f5aafe7f6a3cc41e15d28ea472fa8a36709b6cb3801",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "7d7dbc412104882732fa9a59a2cfa055abd2232bd2ece37ce8f751b2eb510b85",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 3295
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022061ba2241714ed9f49a2bbefd7692f34dec973233a8b476f6a2b9c946faabc48802202aa2f282f23c62569f61609e61a5ab7fb4fef30dd9459e1b5c9d2bf5437a0d1301",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "665c750546a1baf364818a7c0306f327a721a4b74865f91292c608a39dcd8bfb",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 915911
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100b687ab50daac7c9d8a483071c8aad45f102abe38af51c55e7947134e28bfb294022055be486578d093869a6192532a16d3c6f2a2a6249897f2df9aece45caa571f3c01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a2055ab80e171643106b1161fdefbecce9c408fd4af0ea7a22a03bca372379a7a4d",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 55ab80e171643106b1161fdefbecce9c408fd4af0ea7a22a03bca372379a7a4d",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
        "value": 12000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 809196
      }
    ],
    "size": 605,
    "weight": 1448,
    "fee": 98010,
    "status": {
      "confirmed": true,
      "block_height": 2821851,
      "block_hash": "00000000000000044c78e4590a913067ad14b38e23c0140364529192193cdb4d",
      "block_time": 1718877901
    }
  },
  {
    "txid": "fbb568ce9e0e6810d0a119b4e478c05d0bea390959cb475c2acd055e94e03b66",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "7d7dbc412104882732fa9a59a2cfa055abd2232bd2ece37ce8f751b2eb510b85",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402203c84b87ca4010d0f116b72e1cfa9f6a36749fdd3da0fcad599c5cab63255fa01022076b281e76c6cfd4f7bceccf7183f5d372598950ee93c6e115d583d9b6223a06801",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "8d1b4b0485e189751c3ff20ce9de29bc87d0a8ed05c352ff9b05b095018cee7a",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 471180
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100c5ee9ad44cdb81373309b485e60ee471b346dea836a32393e15dea991192b68402200a0455bf0bbab994090bb10392cc4f153c54c65e6d72216512384541ce6db41f01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20957c6f5e6298792860ca29cd3ee404fc230e37da6c6a3de39f44b8f8d9a9a3da",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 957c6f5e6298792860ca29cd3ee404fc230e37da6c6a3de39f44b8f8d9a9a3da",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 412056
      }
    ],
    "size": 383,
    "weight": 881,
    "fee": 59670,
    "status": {
      "confirmed": true,
      "block_height": 2821851,
      "block_hash": "00000000000000044c78e4590a913067ad14b38e23c0140364529192193cdb4d",
      "block_time": 1718877901
    }
  },
  {
    "txid": "8d1b4b0485e189751c3ff20ce9de29bc87d0a8ed05c352ff9b05b095018cee7a",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "2a3c6ee79a1e6b5ddffdc346127a7d341959cd85cdce605e66f9aaa9434c129d",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "00148011520beef49668b15704cdef6f24d2b0a824ef",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 8011520beef49668b15704cdef6f24d2b0a824ef",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1qsqg4yzlw7jtx3v2hqnx77mey62c2sf807yrpde",
          "value": 500000
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100c3a8cb55aa7be65f5b74074b53c949005d7574a07c80bdff24cec97afc49db8502206bd0cce9e4c9b73a1b11cf49cfb7f541a316eda22c9fcbe5914ced6accf2ca1501",
          "022c549b5610158e675d48ec030b9324e08ac76f24b4293e0753a32e17fef5242d"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 471180
      }
    ],
    "size": 192,
    "weight": 438,
    "fee": 28820,
    "status": {
      "confirmed": true,
      "block_height": 2821835,
      "block_hash": "00000000000000011083e4a1ee505f7e4b9f13183f945e65f8a9bf6872b6f0c3",
      "block_time": 1718862279
    }
  },
  {
    "txid": "665c750546a1baf364818a7c0306f327a721a4b74865f91292c608a39dcd8bfb",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "e381866844b0dc184e42f61207c2ea863f2895d14528c13dcf1f2afc2b26a66f",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 954527
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30450221008e17b76c7cb14350fc8eac82d8fb7a59b1060cb8edcc300615147af78af0da99022060a0cb485f5c075807b611446faf2dcb779a2ddae77c880a8eb17ab971fd114101",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 915911
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 38070,
    "status": {
      "confirmed": true,
      "block_height": 2821823,
      "block_hash": "0000000000000002aed0ef4f8485f292d8c99d9b7735abdab660bbe500cd9121",
      "block_time": 1718850332
    }
  },
  {
    "txid": "7d7dbc412104882732fa9a59a2cfa055abd2232bd2ece37ce8f751b2eb510b85",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "2a3c6ee79a1e6b5ddffdc346127a7d341959cd85cdce605e66f9aaa9434c129d",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 41911
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402206c9e794012fdd5e6d0e4a19afc7735a86be6048ab80a039b1a7df63ba5d9926402204f48b86ddb02ed4af035719183e9d583211bcf5433a39a12d2d9cab8c6a8f17601",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 3295
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 38070,
    "status": {
      "confirmed": true,
      "block_height": 2821823,
      "block_hash": "0000000000000002aed0ef4f8485f292d8c99d9b7735abdab660bbe500cd9121",
      "block_time": 1718850332
    }
  },
  {
    "txid": "2a3c6ee79a1e6b5ddffdc346127a7d341959cd85cdce605e66f9aaa9434c129d",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "03d0a2a3b2487f04f6e6f83c151473d40e1be0e142c7fb35f85c7560a89fc383",
        "vout": 3,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 578994
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402206aba075d1631990a3576e768d2f642e09ed54d322df721dae1b4ab6cb0de079c0220796ca992cab005c3b17d50b7aeccdc009f97dd45d4d5ccfa46a324ccbd98c9c701",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "00148011520beef49668b15704cdef6f24d2b0a824ef",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 8011520beef49668b15704cdef6f24d2b0a824ef",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1qsqg4yzlw7jtx3v2hqnx77mey62c2sf807yrpde",
        "value": 500000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 41911
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 37083,
    "status": {
      "confirmed": true,
      "block_height": 2821782,
      "block_hash": "00000000000000040b1a1a679ecc22ed0acc23b12835f29106376efe1e4314ee",
      "block_time": 1718823470
    }
  },
  {
    "txid": "e381866844b0dc184e42f61207c2ea863f2895d14528c13dcf1f2afc2b26a66f",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "acfec398fa6a6a72ba012d46ebba08ad96df73ab9ad54c5b5118d46c13f1cd13",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100fde39ece5f667dc04abf7e6025ae0fd025f331cb0df936220b94daf164157829022014d73f87c3ceedff1be5de226cbab943d56af613397fce9c5aafd2936000a1d901",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "684f7edf1e4d43fb7078d0e7d01e545c8d310a67ab121bc140be93c5cbe0206e",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022065e33e97ee0f8e2f1b38ded94c7e93eab092c1f92cd930d114628505d32252aa022007a18695cbe28286f1e843547acbc8dcffe5d7d374b62a0c8d4b8feadaee3b6201",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "e061afdb4a5e04332e272fd6db7099fa6f5892fedc9877447566ef84c1d3a0e4",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 1034355
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100aebb323e913e551718ae79e2cd0848585a467799b24a72750be75d1102a02d29022001410ae47273b53a7592eb547fc2c9801070e9640ae6be4d48361e5c0cd14b7a01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20a4a91d0af09dc38047bec37e1e2dbfefda309ff6cf1eff9f05aba5621061f5cb",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 a4a91d0af09dc38047bec37e1e2dbfefda309ff6cf1eff9f05aba5621061f5cb",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 954527
      }
    ],
    "size": 532,
    "weight": 1153,
    "fee": 80920,
    "status": {
      "confirmed": true,
      "block_height": 2821768,
      "block_hash": "0000000000000001a4eb8cc991e82584b49f85dd563c56e68c07f21e39c7c8f4",
      "block_time": 1718809175
    }
  },
  {
    "txid": "e061afdb4a5e04332e272fd6db7099fa6f5892fedc9877447566ef84c1d3a0e4",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "2f785b55bd57eca60616eda29f181550941b3387b1e41855ff137442d677734c",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402200d6ef09a5d76b8258d3737b39aa5b141c744d0068ce5797d393d5befef727525022045a1ffdd44f81ce13e55765196064e1774b6e2280925d2e8576a940a92fa370301",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "92b3f696c2ac610393fcae22fcc0392b847307517f4c643fe468d4d49d91b8d1",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 1101656
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100862b69d23238400a3f12b6ed634b238dd3efc4f423950fa5d0df3d6224bd2ed20220045bce569a7efbb85a4774fc96ea2a68bd7e4d82a10ef6e1fda9d84678e490bf01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a2055163a7891e4e573537e2c69304910677fb1d588ef645152eda35b7172e0ee1e",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 55163a7891e4e573537e2c69304910677fb1d588ef645152eda35b7172e0ee1e",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 1034355
      }
    ],
    "size": 383,
    "weight": 881,
    "fee": 67847,
    "status": {
      "confirmed": true,
      "block_height": 2821682,
      "block_hash": "0000000000000006a13e08f6d958b854cf1ad86be8862244e3f89964c3780525",
      "block_time": 1718714304
    }
  },
  {
    "txid": "170d5617a688377ad6df85c220dface4f4547ef5e2e5c325f5f70ac2deca11d1",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "74520c1f43d8994a7ff7901151604fa3939b728f20c280ae7e9f348fd9d5764e",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "51206778612f67ba478fe8033aefa90e522d939e976a3d8e174f7c141be182008709",
          "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 6778612f67ba478fe8033aefa90e522d939e976a3d8e174f7c141be182008709",
          "scriptpubkey_type": "v1_p2tr",
          "scriptpubkey_address": "tb1pvauxztm8hfrcl6qr8th6jrjj9kfea9m28k8pwnmuzsd7rqsqsuys8ntuuj",
          "value": 942170
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "f0d8e64f729d731ee368ef0857a6a0ecda844502aa226c1e6f3df7bd2f8af5d34a55f780b27270143f9e769e9ef028e2be5258e8efddabc7d0ec1e43cce83f9c"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "51206778612f67ba478fe8033aefa90e522d939e976a3d8e174f7c141be182008709",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 6778612f67ba478fe8033aefa90e522d939e976a3d8e174f7c141be182008709",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pvauxztm8hfrcl6qr8th6jrjj9kfea9m28k8pwnmuzsd7rqsqsuys8ntuuj",
        "value": 894148
      }
    ],
    "size": 193,
    "weight": 568,
    "fee": 47476,
    "status": {
      "confirmed": true,
      "block_height": 2821672,
      "block_hash": "00000000000000045a7c60c2b59cfd33978614733aa85a7f4afc70bbce527274",
      "block_time": 1718709499
    }
  },
  {
    "txid": "2f785b55bd57eca60616eda29f181550941b3387b1e41855ff137442d677734c",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "dcc0201a66c1e2c77b6f2be8283329fb1d72e24691e884d51f41e4367f1693c6",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "00142da26a98096dc553a64e95eccc02f18a6b5a9542",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2da26a98096dc553a64e95eccc02f18a6b5a9542",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q9k3x4xqfdhz48fjwjhkvcqh33f44492z2yv2ck",
          "value": 1386458
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100fb64afcfdb47b5193529abc52d57490378afda95ed14ef3ba5af699fc654a4d702206e24c92abbf14d907a95ace7fae38827d604166735bd56abbff4d585378bd20501",
          "0339bb9d28334d77af7693d831ba93027605861fe8c35ae8590cc5c5339fd26703"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "00142da26a98096dc553a64e95eccc02f18a6b5a9542",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2da26a98096dc553a64e95eccc02f18a6b5a9542",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q9k3x4xqfdhz48fjwjhkvcqh33f44492z2yv2ck",
        "value": 1339100
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 46812,
    "status": {
      "confirmed": true,
      "block_height": 2821672,
      "block_hash": "00000000000000045a7c60c2b59cfd33978614733aa85a7f4afc70bbce527274",
      "block_time": 1718709499
    }
  },
  {
    "txid": "03d0a2a3b2487f04f6e6f83c151473d40e1be0e142c7fb35f85c7560a89fc383",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "d813bcf584301a72d8311c22540d838c995a3c2b57b7cbf07aaa58a76b35c4fd",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30440220012cf2c12d0db7ba957c2b5c8e7db4be8d6653616ece5c47127616a5d1577a0c022039f3bd4e4b25ecb834dda6b5b867558a2237363181453679f77873c5795a81b001",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "f00d8101d43634d037c387ffbd4f3e4bba613751c11ef23b4e0bd4590d6d90f5",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 691294
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100a878e0eb99215547b69a0cadd103538d2620f7c163bd0259377922166903825b022026d4b26414f915add29ec8ef5bf7126aa4f98d588dbb18bee2b9673614dfada601",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a201649966e603ee1e93d439e4edbf44449549e18a702afb200d9b7a985f998c737",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 1649966e603ee1e93d439e4edbf44449549e18a702afb200d9b7a985f998c737",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
        "value": 12000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 578994
      }
    ],
    "size": 457,
    "weight": 1177,
    "fee": 100300,
    "status": {
      "confirmed": true,
      "block_height": 2821662,
      "block_hash": "00000000000000045158e83c0e0ed825542eb2c6bea868ca5d54ae13605ba38a",
      "block_time": 1718703494
    }
  },
  {
    "txid": "92b3f696c2ac610393fcae22fcc0392b847307517f4c643fe468d4d49d91b8d1",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "1d165109e5e5de613aad29a34e7ed9a77169716de45fde7ed0508b1dfba61636",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 1625524
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100fafc6e1b09f07c94cfb8792f12bf073f610fda7022b4016195ca03d034e04824022067ab725feb91a24516b76abdbc750e50a918517297685dcbe1a9401de0c6cbf301",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "512024b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 24b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pyjckvauud0k53zpw574slye057vjs74afw4acar4l0v2yayx2uxsmpgz73",
        "value": 500000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 1101656
      }
    ],
    "size": 235,
    "weight": 610,
    "fee": 23868,
    "status": {
      "confirmed": true,
      "block_height": 2818471,
      "block_hash": "0000000000000004964d471a87adbb53d501517311776610ffd41359e8c3d7a9",
      "block_time": 1716960113
    }
  },
  {
    "txid": "f00d8101d43634d037c387ffbd4f3e4bba613751c11ef23b4e0bd4590d6d90f5",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "d813bcf584301a72d8311c22540d838c995a3c2b57b7cbf07aaa58a76b35c4fd",
        "vout": 2,
        "prevout": {
          "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
          "value": 707244
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30440220462e33267c49e0f704f05dc60de6973210b8e7df8bfd26eaaa9239e36ab7489802200dc36417a4dc23de598170c3f6d0ee02fcb392d7cfc37a344e48a99494fd587601",
          "03b89c6262769be17d3430a2884733c441b385ddc21fc38b17daaab6bf0c3f07bb"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 691294
      }
    ],
    "size": 191,
    "weight": 437,
    "fee": 15950,
    "status": {
      "confirmed": true,
      "block_height": 2818452,
      "block_hash": "0000000000000009f97953c30580cdf297202edbb161f01f006e584bac36665a",
      "block_time": 1716954375
    }
  },
  {
    "txid": "d813bcf584301a72d8311c22540d838c995a3c2b57b7cbf07aaa58a76b35c4fd",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "7c205eb0b6414227830012ffbd7a473d51b58158bbe937e88d30d60b1cd57e3e",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402203d9a87c34f1c93588e009293f7fcc6f9bde4305c7c50e4fcf61d3c68c4e5b381022058656b951e4d40c451f01c5c668ce65c6414dcc9bee8dbf820fd38a12864042f01",
          "03b89c6262769be17d3430a2884733c441b385ddc21fc38b17daaab6bf0c3f07bb"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "2a997dcc87945be04e699aadb6d7b9b2f8b62ac5a601fbad35dbbe13f1db80a9",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100ff7052e07f55ec44fea3636e77b423002c2806ba7111bf3da9043b59c1928c0002205e7bc3c59c8a0af77f5d291ad1d4938c63c7220af59584229b13dfce06d2bbd601",
          "03b89c6262769be17d3430a2884733c441b385ddc21fc38b17daaab6bf0c3f07bb"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "8f6e5088832eb01c12ded6654e02932d77b9153e7aefbdd4066716668a9506e0",
        "vout": 2,
        "prevout": {
          "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
          "value": 745218
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022075ee238add900cac6244a2636ccc7e70fb7482fd4d0d88cd3ac11cef2f743be4022016fe8fb3aa2017274db48fa9f261815b1490b0a4c697ccc5a938f6d4bab856bd01",
          "03b89c6262769be17d3430a2884733c441b385ddc21fc38b17daaab6bf0c3f07bb"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20a30ae2f3c88bf301b4ce260fd3fea3072afb059de5e208c192c8cf2ae159d10e",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 a30ae2f3c88bf301b4ce260fd3fea3072afb059de5e208c192c8cf2ae159d10e",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
        "value": 707244
      }
    ],
    "size": 562,
    "weight": 1276,
    "fee": 38520,
    "status": {
      "confirmed": true,
      "block_height": 2818306,
      "block_hash": "000000000000000382f7b69104546c822e0063ddb5831bdd40ecb83d4c8ca68a",
      "block_time": 1716892587
    }
  },
  {
    "txid": "1d165109e5e5de613aad29a34e7ed9a77169716de45fde7ed0508b1dfba61636",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "ee5015e6a8af50d0bc0279a7305875a84a7bfa40ef277b3d1ae04669d080ef2a",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "00142386bbfe6d8651821a6fb43dca4f6f4b89cf1548",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2386bbfe6d8651821a6fb43dca4f6f4b89cf1548",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1qywrthlndsegcyxn0ks7u5nm0fwyu792gwlzy88",
          "value": 1637624
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100baaee8a5ef7e3931356edcc39e10babc6185fcd7cbc0a9a5bc4f21b5077c547702203d0a7bef61fd8ff43ff69fa697cf50f3b1744d8c012e2d31360d47bb530c110201",
          "0241f57b732c4e764cce56c6f6526059729924aa462b29b3d05b5d7d681616a4c5"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 1625524
      }
    ],
    "size": 192,
    "weight": 438,
    "fee": 12100,
    "status": {
      "confirmed": true,
      "block_height": 2818226,
      "block_hash": "000000000000000d6187f2ee7db1dd4252a62f286b812ee62f06bd2951ad4c8a",
      "block_time": 1716875569
    }
  },
  {
    "txid": "e77d544ab9918513fd81e19139685d95741520a69cf47d33fa628c4ef2dd7a4c",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "10961aa2938081a4bfdfa620546ff88602a5eccbffca8e77520b38bc93f9bf0f",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 1673488
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402207523908f0900dae56097286a95b09ec5c6ddbe26fe660cb7df0a8d4342eba9d60220232e789cb2f1680d292167996da50cfafc7bcff99998a35179635597e5009e1301",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "00142386bbfe6d8651821a6fb43dca4f6f4b89cf1548",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2386bbfe6d8651821a6fb43dca4f6f4b89cf1548",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1qywrthlndsegcyxn0ks7u5nm0fwyu792gwlzy88",
        "value": 1661388
      }
    ],
    "size": 191,
    "weight": 437,
    "fee": 12100,
    "status": {
      "confirmed": true,
      "block_height": 2818210,
      "block_hash": "00000000000000018e4716d52839e0b73603c6a1d6b09fda9081a36ea6d87482",
      "block_time": 1716874246
    }
  },
  {
    "txid": "10961aa2938081a4bfdfa620546ff88602a5eccbffca8e77520b38bc93f9bf0f",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "5683591ffad73e34d2b47ccc9f14fd3029b33a332d33c49f30f38b9b82e4c6a8",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 1982056
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100dcb0014677fd250afbbd71afb7d9945f305419dab3641b9887f5d4fe7db94d3702203b484cc4c641d5bda326df8c206700054914c4e67abf7854432994b47415ffe901",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "51202c5543e80f639c7ced357af40a751f17231756c14aadbfaa5fd1d5c54f960a5c",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 2c5543e80f639c7ced357af40a751f17231756c14aadbfaa5fd1d5c54f960a5c",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1p932586q0vww8emf40t6q5aglzu33w4kpf2kml2jl682u2nukpfwq9eujld",
        "value": 300000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 1673488
      }
    ],
    "size": 235,
    "weight": 610,
    "fee": 8568,
    "status": {
      "confirmed": true,
      "block_height": 2816905,
      "block_hash": "0000000000000004bd111a4681831ab1fbce603d742e9398e1a1ea504071294b",
      "block_time": 1716349900
    }
  },
  {
    "txid": "5683591ffad73e34d2b47ccc9f14fd3029b33a332d33c49f30f38b9b82e4c6a8",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "00131f7541b4dbefda8d304b23d96b8448aadfdec574b28644749c29a2131830",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100a1165f4ef31c0c7f24d426ae92433e32a2513a192aba883eee4e34d5136737a302206e1e1d7c4d11ff4e6b63d03e1df24979966854a9c00b0fc6821690f2d53db72701",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "079fdd6a855a1f2023f0dba3e33488ec2db57a62631039bc5b259ec8c1254545",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 1993886
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402205d511ec180c0f5db0ded739442fa86fae378547ecc57a46edad224f4638d0d4702205133b2b399b7d2dd03648573cfc6cc7637488064b5bb1606ed42f8216453748501",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20c27eda9bf8377f9db44696f0fee0dd0edb2ec3d3788e64d61bc5fd71de8d183f",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 c27eda9bf8377f9db44696f0fee0dd0edb2ec3d3788e64d61bc5fd71de8d183f",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 1982056
      }
    ],
    "size": 383,
    "weight": 881,
    "fee": 12376,
    "status": {
      "confirmed": true,
      "block_height": 2816899,
      "block_hash": "000000000000000838d3bf989d702597827cd9830b8bedeaba49a5f2621053fa",
      "block_time": 1716348699
    }
  },
  {
    "txid": "079fdd6a855a1f2023f0dba3e33488ec2db57a62631039bc5b259ec8c1254545",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "47c6e77113318cb1b76061b2ff7a659b099a729ffd72de92264f5e0bf6928ced",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 2303831
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100c833c5f2b7747486d6218ccd8804cf4282524d243cfb4a1763acf3dab3a55cad022062c17393e90ede92ec35fb5cc7ca368331bf3d1a923ccfb11ea0ec1bccb5fab501",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "512077e854665964f3af39060b7ff465ddf7faf004c3acbe5602cf46c626f6433a06",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 77e854665964f3af39060b7ff465ddf7faf004c3acbe5602cf46c626f6433a06",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pwl59gejevne67wgxpdllgewa7la0qpxr4jl9vqk0gmrzdajr8grqqlgc6s",
        "value": 300000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 1993886
      }
    ],
    "size": 235,
    "weight": 610,
    "fee": 9945,
    "status": {
      "confirmed": true,
      "block_height": 2816665,
      "block_hash": "000000000000000d6888399e9b8b25b722ccf35183b1019fb8d4b9b13d381b1e",
      "block_time": 1716266436
    }
  },
  {
    "txid": "47c6e77113318cb1b76061b2ff7a659b099a729ffd72de92264f5e0bf6928ced",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "c3d49266fbe2b43c708a85d521d56bd0540c050bb240ac7c00844c3e3882e34a",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 3313701
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100efd7617275c53e3755a0352a6b339c6f48579b1189ffac3da860e86e1444d7320220116eca154064e844eabaf4492b07aacf4d3e8a43fc8b40b96f5ea615eef9706d01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014e006833d49802a94320f677d9533485e797aaf4e",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 e006833d49802a94320f677d9533485e797aaf4e",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1quqrgx02fsq4fgvs0va7e2v6gteuh4t6wy429m6",
        "value": 1000000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 2303831
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 9870,
    "status": {
      "confirmed": true,
      "block_height": 2816532,
      "block_hash": "0000000000000007dd931dacf1c2a409f3c468e9b78c251a76e573e9e01ebdb4",
      "block_time": 1716207222
    }
  },
  {
    "txid": "c3d49266fbe2b43c708a85d521d56bd0540c050bb240ac7c00844c3e3882e34a",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "5885684ef9e144ed3eface46d064f409116a0e38c5d912aa02a5e9db61f0637c",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 3326181
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3044022051d89e3bc34b27dea75beb86c66768b4dac80123184f791237c4589ad2a745e502207aad30d8bbfbc6ba6e62515cc085442ce44f774e345ee0f74dce148a267a32f701",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "512024b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 24b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pyjckvauud0k53zpw574slye057vjs74afw4acar4l0v2yayx2uxsmpgz73",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 3313701
      }
    ],
    "size": 234,
    "weight": 609,
    "fee": 11934,
    "status": {
      "confirmed": true,
      "block_height": 2816523,
      "block_hash": "000000000000000381d45eceb7cad601fddf7ac3e4f7c0b9f384182931ce9071",
      "block_time": 1716204797
    }
  },
  {
    "txid": "00131f7541b4dbefda8d304b23d96b8448aadfdec574b28644749c29a2131830",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "deefc44cfea597a8933bc0c9f49bd01ecc90acfea5a9c6e1ea75449f508c3d72",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "00143534cc09d6d13c3770d308a66bd9d59f75b73601",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 3534cc09d6d13c3770d308a66bd9d59f75b73601",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1qx56vczwk6y7rwuxnpznxhkw4na6mwdspg7pst5",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402205610b742adb35e3bdb0120ad9529e66a522ca3cabe1982ebb410f5e8c0fe9b220220479a9c4ff6a534ec0f463e6587f37efe3ae5463e1aee5573a67b07c2e4016aa701",
          "027abb20f66f43b85bdd4faefb0a533e5189d5544ff89e098195c31fbd13eaacd0"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "d994e4b77955a2397f0f16464c8dda0f185d7917b12f0e46b3760233eccd5f93",
        "vout": 2,
        "prevout": {
          "scriptpubkey": "00143534cc09d6d13c3770d308a66bd9d59f75b73601",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 3534cc09d6d13c3770d308a66bd9d59f75b73601",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1qx56vczwk6y7rwuxnpznxhkw4na6mwdspg7pst5",
          "value": 967050
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100aead61ed95e2bbdea9ab19f861e10b323cb103b6d120dd7cb59707efb69cbd0f022039aadeabda3f54f694ca5ae85939fb488ec6a4d6d014fa611a5f0f68b53fd77701",
          "027abb20f66f43b85bdd4faefb0a533e5189d5544ff89e098195c31fbd13eaacd0"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a2098ab6178dfd719ec0a63983705ba892cba877b53f395ecb73ca73c7188b7238f",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 98ab6178dfd719ec0a63983705ba892cba877b53f395ecb73ca73c7188b7238f",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "00143534cc09d6d13c3770d308a66bd9d59f75b73601",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 3534cc09d6d13c3770d308a66bd9d59f75b73601",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1qx56vczwk6y7rwuxnpznxhkw4na6mwdspg7pst5",
        "value": 951930
      }
    ],
    "size": 414,
    "weight": 1005,
    "fee": 15120,
    "status": {
      "confirmed": true,
      "block_height": 2816523,
      "block_hash": "000000000000000381d45eceb7cad601fddf7ac3e4f7c0b9f384182931ce9071",
      "block_time": 1716204797
    }
  },
  {
    "txid": "5885684ef9e144ed3eface46d064f409116a0e38c5d912aa02a5e9db61f0637c",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "d1df18bc34e515c84b90ddc2cdc8868822c22f15ac43fa013d0b1bfb3519a021",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 4335361
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100ba9d4af039f9a30be45f3a7c24d8e88645cbaea2cabb8c5967394bb64f3bc3e2022035c280199cee3bb23152499abebcdc6baec285de3fc9f8a4159e4fd5e749e57c01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "512024b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 24b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pyjckvauud0k53zpw574slye057vjs74afw4acar4l0v2yayx2uxsmpgz73",
        "value": 1000000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 3326181
      }
    ],
    "size": 235,
    "weight": 610,
    "fee": 9180,
    "status": {
      "confirmed": true,
      "block_height": 2816520,
      "block_hash": "000000000000000719c90725b1401689c793e9fed5199ef42f3a868875e7338d",
      "block_time": 1716203596
    }
  },
  {
    "txid": "d8a96a13a8d8220abb93035a07bc26a78cca729d74ef58cd10d1199033a9971d",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "673f754f9d1faa9153e988426a3e76e4634f998cbd00e04adc271a8f5f28740e",
        "vout": 0,
        "prevout": {
          "scriptpubkey": "0014b486414ad11c81e97a2149b4cb0f795ab8f878fe",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 b486414ad11c81e97a2149b4cb0f795ab8f878fe",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1qkjryzjk3rjq7j73pfx6vkrmet2u0s7878ry32x",
          "value": 546
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100f419ada7b4b5ccb300a0b7f9d1d20ef1903f3673c9b21d6751da1d608ce8dbe7022021c5aec032d90c49210a793aa2e112c8020e5e50fb9c53559126739eb4cdccc501",
          "03e6bcd9c558403f1f5e6a1bc3293009c5157ce49fb4c4d886eccdc5cb8cf8e47c"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      },
      {
        "txid": "48dc4e3a79ac32a1db104fe9c7294243440479227e73a82265d5b421f1939cff",
        "vout": 2,
        "prevout": {
          "scriptpubkey": "0014b486414ad11c81e97a2149b4cb0f795ab8f878fe",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 b486414ad11c81e97a2149b4cb0f795ab8f878fe",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1qkjryzjk3rjq7j73pfx6vkrmet2u0s7878ry32x",
          "value": 882823
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30440220571d5c804f80a5332039447aab1a5fb0cb42ea16c310aeff0e3773a0663b7bd102202ecba962069324be7e0ff93f5732fdc2a09bb2ac28a058da6ed21de1c2ce4dd001",
          "03e6bcd9c558403f1f5e6a1bc3293009c5157ce49fb4c4d886eccdc5cb8cf8e47c"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "6a20a6cb9ed957691a4f73b587ed0f62ee077921c775c0feed7c0a6ae697ed9ec764",
        "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 a6cb9ed957691a4f73b587ed0f62ee077921c775c0feed7c0a6ae697ed9ec764",
        "scriptpubkey_type": "op_return",
        "value": 0
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 546
      },
      {
        "scriptpubkey": "0014b486414ad11c81e97a2149b4cb0f795ab8f878fe",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 b486414ad11c81e97a2149b4cb0f795ab8f878fe",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1qkjryzjk3rjq7j73pfx6vkrmet2u0s7878ry32x",
        "value": 867703
      }
    ],
    "size": 414,
    "weight": 1005,
    "fee": 15120,
    "status": {
      "confirmed": true,
      "block_height": 2816520,
      "block_hash": "000000000000000719c90725b1401689c793e9fed5199ef42f3a868875e7338d",
      "block_time": 1716203596
    }
  },
  {
    "txid": "d1df18bc34e515c84b90ddc2cdc8868822c22f15ac43fa013d0b1bfb3519a021",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "abb1d61b86a10c1188c52a1d66565b84c7ebca9236f24d672cbd41beeb1469c3",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 4346617
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402204002df944838d6d056b45251fb22df22a9ee3379705c6a63786f0c25078a730d022053105d46b4963de9a6a4f3e436a1ed4d864aef5d2deaffa6452dce48bcf2814b01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "512024b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
        "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 24b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
        "scriptpubkey_type": "v1_p2tr",
        "scriptpubkey_address": "tb1pyjckvauud0k53zpw574slye057vjs74afw4acar4l0v2yayx2uxsmpgz73",
        "value": 546
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 4335361
      }
    ],
    "size": 234,
    "weight": 609,
    "fee": 10710,
    "status": {
      "confirmed": true,
      "block_height": 2816517,
      "block_hash": "000000000000000d8ce61a5211738d37a90c09c1a9b67ee9269e8e69151a3f36",
      "block_time": 1716201194
    }
  },
  {
    "txid": "abb1d61b86a10c1188c52a1d66565b84c7ebca9236f24d672cbd41beeb1469c3",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "cc0732f2f3301b041ca94ee01a16e0f3bb8a10226d8ec7db103d8518afc7ffd8",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 5354513
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30450221009623155b4d7ea4ec1b3a612eb75f922adfbcb60e3de7f89d26865c4cd634386002204dd0b264e27c5a941fbbc09a17aa015bff019959f08d512ec56340837af4abd801",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "00143534cc09d6d13c3770d308a66bd9d59f75b73601",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 3534cc09d6d13c3770d308a66bd9d59f75b73601",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1qx56vczwk6y7rwuxnpznxhkw4na6mwdspg7pst5",
        "value": 1000000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 4346617
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 7896,
    "status": {
      "confirmed": true,
      "block_height": 2816472,
      "block_hash": "000000000000000b1d4e24c7bae38e6565bb74b23eb1db84291e80c7cc7e7af5",
      "block_time": 1716171903
    }
  },
  {
    "txid": "cc0732f2f3301b041ca94ee01a16e0f3bb8a10226d8ec7db103d8518afc7ffd8",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "dc12d4f3b714a3f6f3a0c9f7caf601b26490b7f225e4c040b051854a25bc9cef",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 6364383
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "3045022100fbc305ee1050813c27e2acfd464767a2ab48f4b3a5c629f32926181539ebd68c02200dfaf1ceb9c9fcf2b864d84bc67defef168e468084fa19f10d708a46261281ff01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
        "value": 1000000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 5354513
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 9870,
    "status": {
      "confirmed": true,
      "block_height": 2816007,
      "block_hash": "000000000000000f84409b8e9526becc3fe236fc785e9e3775236f78c1206f33",
      "block_time": 1715947603
    }
  },
  {
    "txid": "dc12d4f3b714a3f6f3a0c9f7caf601b26490b7f225e4c040b051854a25bc9cef",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "178b01bae4a5e3694aad5550ee6c2892acd5e9caeea0aa74d71cb0b3fb80e13e",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 7372279
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "30450221008525822e3bef602402bb81872a8891f8be41e7357557b90035dc29871219bd210220292b54c68bca4850d92f86c601ff356be415693d9194a67b4516112f3826729001",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014b486414ad11c81e97a2149b4cb0f795ab8f878fe",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 b486414ad11c81e97a2149b4cb0f795ab8f878fe",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1qkjryzjk3rjq7j73pfx6vkrmet2u0s7878ry32x",
        "value": 1000000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 6364383
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 7896,
    "status": {
      "confirmed": true,
      "block_height": 2815933,
      "block_hash": "000000000000001872e9c1605894f149301b05bc2e53a52931fc5ebeaf42f301",
      "block_time": 1715921192
    }
  },
  {
    "txid": "178b01bae4a5e3694aad5550ee6c2892acd5e9caeea0aa74d71cb0b3fb80e13e",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "e6a6af548aada0b50ccc73c0313e7d96cbd59a0edc3a5e2261580976e22e17f6",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 7980175
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402205a8ec8b59510afb9840f19a696c5ba9f63e43652b522c1728c0f3f6142b8778c022076e181e1583128b85abb88e837ebb04cdadb1fade7bc64d3c528d11fe063b42d01",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014270c0c26251a3e4f217195ad66e2987982801c62",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 270c0c26251a3e4f217195ad66e2987982801c62",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1qyuxqcf39rgly7gt3jkkkdc5c0xpgq8rz6aec8s",
        "value": 600000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 7372279
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 7896,
    "status": {
      "confirmed": true,
      "block_height": 2815737,
      "block_hash": "00000000000000158cdf4744674e7b137d315d627d70dbdbfccaac379c1109a0",
      "block_time": 1715857503
    }
  },
  {
    "txid": "e6a6af548aada0b50ccc73c0313e7d96cbd59a0edc3a5e2261580976e22e17f6",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "024af1f0ace74f327a68ae2447c1d401f7b093704825c1ee3215859c937e7d2d",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 8588071
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304502210095aece5c6d2b14f99b2ccbf2e31d89e645bbde4d17b62b991867c9ae4ddbada1022043027b0aa12ad94806bddaaeca207ad0655330e321fd1b6dd1213a242d02ec9101",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "00142ab835d76e59d7f897b0b9a40e8fd27b09c815d0",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2ab835d76e59d7f897b0b9a40e8fd27b09c815d0",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q92urt4mwt8tl39ashxjqar7j0vyus9wsfemsfw",
        "value": 600000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 7980175
      }
    ],
    "size": 223,
    "weight": 562,
    "fee": 7896,
    "status": {
      "confirmed": true,
      "block_height": 2815662,
      "block_hash": "000000000000000c9e5e7ebccdbf3bef8dbe853c4df91ad7e512b53cc7ac3f1d",
      "block_time": 1715833881
    }
  },
  {
    "txid": "024af1f0ace74f327a68ae2447c1d401f7b093704825c1ee3215859c937e7d2d",
    "version": 2,
    "locktime": 0,
    "vin": [
      {
        "txid": "a94f4d6f7e0e8f703af5b2c7cda35eb106f69e524a69be067ce9d0109432c172",
        "vout": 1,
        "prevout": {
          "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
          "scriptpubkey_type": "v0_p2wpkh",
          "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
          "value": 9595967
        },
        "scriptsig": "",
        "scriptsig_asm": "",
        "witness": [
          "304402200ad9e5155d2fff5742c1cd628fd87c22670c2118e27651b338642e2eea19a3b80220719508e176b10b97ffe9faf16303a48d9e5b01097aefaf3cb4821f36a95ade4501",
          "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac"
        ],
        "is_coinbase": false,
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "scriptpubkey": "0014a925e2d1a11418ec75fba570f1361ddde0a29306",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 a925e2d1a11418ec75fba570f1361ddde0a29306",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q4yj795dpzsvwca0m54c0zdsamhs29ycx40xsuj",
        "value": 1000000
      },
      {
        "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
        "scriptpubkey_type": "v0_p2wpkh",
        "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
        "value": 8588071
      }
    ],
    "size": 222,
    "weight": 561,
    "fee": 7896,
    "status": {
      "confirmed": true,
      "block_height": 2815659,
      "block_hash": "000000000000000c6d1cf0adfe6fc9c3d787994e4def105c0303f9fe246ea8c0",
      "block_time": 1715833880
    }
  }
]


================================================
File: test/__fixtures__/utxo.mock.json
================================================
[
  {
    "txid": "989f4e03179e17cbb6edd446f57ea6107a40ba23441056653f1cc34b7dd1e5ba",
    "vout": 1,
    "value": 546,
    "status": {
      "confirmed": false,
      "block_height": 2812535,
      "block_hash": "000000000000001d4c78f85fd7fda56916f448bb25f4b3b275f1cf6634e17bf8",
      "block_time": 1715047029
    }
  },
  {
    "txid": "aab2d8fc3f064087450057ccb6012893cf219043d8c915fe64c5322c0eeb6fd2",
    "vout": 1,
    "value": 880,
    "status": {
      "confirmed": false,
      "block_height": 2814587,
      "block_hash": "000000000000001496bd5ab5f0c5cc6a46652f13ab60d20c2767beefe8d2391a",
      "block_time": 1715338294
    }
  },
  {
    "txid": "2478902e01d85aa04fea79efa89f3cd4b9d86ac66b1276d89c844076906c6a44",
    "vout": 1,
    "value": 89888317,
    "status": {
      "confirmed": true,
      "block_height": 2818025,
      "block_hash": "00000000000000090eca5064939d4e2a20fe072e5b48815a08055ef7c2be7986",
      "block_time": 1716792964
    }
  },
  {
    "txid": "0c05a2ba51c6284eb1411bd7d49df455da97a482a8ce47266b50a4d3d857ee29",
    "vout": 2,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2585022,
      "block_hash": "00000000000000000b871290b8d050dc6b57104deada7f6c26d59d567c7ac94a",
      "block_time": 1712125215
    }
  },
  {
    "txid": "0bd22675d00f3b958dd25cef3c6bf4df6a63511393ff59c959d158d1cf3626f4",
    "vout": 2,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2811244,
      "block_hash": "000000000000009de2006782c905136c925bbb4bb89e504e970affe1c20bbfee",
      "block_time": 1714790623
    }
  },
  {
    "txid": "37849336280a290998afa9614afac39a640898f607eed7cbaed638daeb0f023a",
    "vout": 1,
    "value": 849120,
    "status": {
      "confirmed": true,
      "block_height": 2818192,
      "block_hash": "000000000000000d53d74e0d8ae89528145d52c4e94bd9a6f25503f821701343",
      "block_time": 1716870027
    }
  },
  {
    "txid": "e905a6e466bf7f06b8385b5cf21057697500faf12b39da7b127eba91bc61bc3a",
    "vout": 1,
    "value": 880,
    "status": {
      "confirmed": true,
      "block_height": 2814568,
      "block_hash": "000000000000000cb1c4d274f92a59a0e73cd99cec4a91f4deb7702f0d028b22",
      "block_time": 1715333489
    }
  },
  {
    "txid": "ed1a688bc23811a386cb517f7430701e7f3a059e88eff184a237168a79fb8a8c",
    "vout": 0,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2817185,
      "block_hash": "00000000000000074d01a1844db22ada24e70043bac0d05a83aa2234cd5c3de9",
      "block_time": 1716459057
    }
  },
  {
    "txid": "3ef5c0de31f0fdf051cf5658ad278b6726839dcb16996b530e719104f4c0189b",
    "vout": 0,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2816698,
      "block_hash": "0000000000000007270b0f8be9b3b61c49a09dd7af0bb0f800aef8dbbf594e35",
      "block_time": 1716276487
    }
  },
  {
    "txid": "057d3146e3ad62b82ac33c4a39c4aca5e21c2c8770dd8c9e6dc1dcf05dd2d4bb",
    "vout": 2,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2585023,
      "block_hash": "0000000000000365f0619dc58091519f4e7bdddc44b3b10f0a4ccfa668da1a31",
      "block_time": 1712126418
    }
  },
  {
    "txid": "f7b43efe2d16d6bf352a774478f26589408af010e874598bf7524973ad6147b2",
    "vout": 0,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2816698,
      "block_hash": "0000000000000007270b0f8be9b3b61c49a09dd7af0bb0f800aef8dbbf594e35",
      "block_time": 1716276487
    }
  },
  {
    "txid": "fdfa7aa12825e77996b67eaa6f0bcb11515138927e070ca196a13ed40a626f90",
    "vout": 0,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2816987,
      "block_hash": "0000000000000002d2dc7f2a5ff816564d746298563451852b9d33a5452bd206",
      "block_time": 1716365229
    }
  },
  {
    "txid": "a46315f568b38160b2c9e0c68f678b5fe787e6eb0b5c70b55a64e9255e946e97",
    "vout": 2,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2585023,
      "block_hash": "0000000000000365f0619dc58091519f4e7bdddc44b3b10f0a4ccfa668da1a31",
      "block_time": 1712126418
    }
  },
  {
    "txid": "368df7f60e443a12a4c13ce75866d6e1e9ade576e200851e3e278669a661fda7",
    "vout": 1,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2818010,
      "block_hash": "000000000000000136b682e35e2ccce1a8b2d408f81607237ddf27f3acdb92ba",
      "block_time": 1716787908
    }
  },
  {
    "txid": "6569ef36067b822a25a7741e0d17f46e042ae64a1add22e21192b96b3c317efe",
    "vout": 0,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2816662,
      "block_hash": "0000000000000001f67d59ba0b956a30a68bed4154c02c29a34b4ff84e54eb26",
      "block_time": 1716265235
    }
  },
  {
    "txid": "fc9f146aeda2134bd6ab488dcd2d2f04090e3f4d4916c9c073ba93591ec4b34d",
    "vout": 0,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2816711,
      "block_hash": "000000000000000a2d71867394388670e82b65ae1588306d06a2e6c070dec47e",
      "block_time": 1716280561
    }
  },
  {
    "txid": "f3618e2a8e5b091fd1381cd7d67c3dececb2727fdbeb9887965b577b6c2239ab",
    "vout": 0,
    "value": 546,
    "status": {
      "confirmed": true,
      "block_height": 2816899,
      "block_hash": "000000000000000838d3bf989d702597827cd9830b8bedeaba49a5f2621053fa",
      "block_time": 1716348699
    }
  }
]


================================================
File: test/plugins/ip-block.test.ts
================================================
import { afterEach } from 'node:test';
import { describe, expect, test } from 'vitest';
import container from '../../src/container';
import { Env } from '../../src/env';
import { buildFastify } from '../../src/app';

describe('IP Blocklist Plugin', () => {
  afterEach(() => {
    const env: Env = container.resolve('env');
    env.IP_BLOCKLIST = [];
  });

  test('should block IP if it is in the blocklist', async () => {
    const env: Env = container.resolve('env');
    env.IP_BLOCKLIST = ['127.0.0.1'];

    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/docs',
    });

    expect(response.statusCode).toBe(403);

    await fastify.close();
  });

  test('should not block IP if it is not in the blocklist', async () => {
    const env: Env = container.resolve('env');
    env.IP_BLOCKLIST = [];

    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/docs',
    });

    expect(response.statusCode).not.toBe(403);

    await fastify.close();
  });
});


================================================
File: test/plugins/jwt.test.ts
================================================
import { beforeAll, afterEach, describe, test, expect } from 'vitest';
import { buildFastify } from '../../src/app';
import container from '../../src/container';
import { JwtPayload } from '../../src/plugins/jwt';

describe('JWT Plugin', () => {
  let token: string;
  let decodedToken: JwtPayload;

  beforeAll(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const payload = {
      sub: 'test',
      aud: 'test.com',
    };
    const tokenResponse = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: payload.sub,
        domain: payload.aud,
      },
    });
    const data = tokenResponse.json();
    token = data.token;
    decodedToken = { ...payload, jti: data.id };
  });

  afterEach(() => {
    const env = container.resolve('env');
    env.JWT_DENYLIST = [];
  });

  test('should fastify.jwt be defined', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    expect(fastify.hasDecorator('jwt')).toBeDefined();

    await fastify.close();
  });

  test('should be return 401 if token is not provided', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/info',
    });

    expect(response.statusCode).toBe(401);

    await fastify.close();
  });

  test('should be return 401 if token origin/referer is not match', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/info',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://example.com',
      },
    });

    expect(response.statusCode).toBe(401);

    await fastify.close();
  });

  test('should be return 401 if token is denied', async () => {
    const env = container.resolve('env');
    env.JWT_DENYLIST = [token];

    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/info',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });

    expect(response.statusCode).toBe(401);
    await fastify.close();
  });

  test.each<keyof JwtPayload>(['sub', 'aud', 'jti'])('should be return 401 if token.%s is denied', async (key) => {
    const env = container.resolve('env');
    env.JWT_DENYLIST = [decodedToken[key]];

    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/info',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });

    expect(response.statusCode).toBe(401);
    await fastify.close();
  });
});


================================================
File: test/routes/token.test.ts
================================================
import { expect, test } from 'vitest';
import { buildFastify } from '../../src/app';

test('`/token/generate` - successfuly', async () => {
  const fastify = buildFastify();
  await fastify.ready();

  const response = await fastify.inject({
    method: 'POST',
    url: '/token/generate',
    payload: {
      app: 'test',
      domain: 'test.com',
    },
  });
  const data = response.json();

  expect(response.statusCode).toBe(200);
  expect(data.token).toBeDefined();

  await fastify.close();
});

test('`/token/generate` - without params', async () => {
  const fastify = buildFastify();
  await fastify.ready();

  const response = await fastify.inject({
    method: 'POST',
    url: '/token/generate',
  });
  const data = response.json();

  expect(response.statusCode).toBe(400);
  expect(data.message).toMatchSnapshot();

  await fastify.close();
});

test('`/token/generate` - invalid domain', async () => {
  const fastify = buildFastify();
  await fastify.ready();

  const response = await fastify.inject({
    method: 'POST',
    url: '/token/generate',
    payload: {
      app: 'test',
      domain: '\\',
    },
  });
  const data = response.json();

  expect(response.statusCode).toBe(500);
  expect(data.message).toEqual('Failed to generate token: Invalid URL');

  await fastify.close();
});

test('`/token/generate` - with pathname', async () => {
  const fastify = buildFastify();
  await fastify.ready();

  const response = await fastify.inject({
    method: 'POST',
    url: '/token/generate',
    payload: {
      app: 'test',
      domain: 'http://test.com/abc',
    },
  });
  const data = response.json();

  expect(response.statusCode).toBe(500);
  expect(data.message).toEqual('Failed to generate token: Must be a valid domain without path');

  await fastify.close();
});

test('`/token/generate` - with protocol', async () => {
  const fastify = buildFastify();
  await fastify.ready();

  const response = await fastify.inject({
    method: 'POST',
    url: '/token/generate',
    payload: {
      app: 'test',
      domain: 'https://test.com',
    },
  });
  const data = response.json();

  expect(response.statusCode).toBe(200);
  expect(data.token).toBeDefined();

  await fastify.close();
});

test('`/token/generate` - with port', async () => {
  const fastify = buildFastify();
  await fastify.ready();

  const response = await fastify.inject({
    method: 'POST',
    url: '/token/generate',
    payload: {
      app: 'test',
      domain: 'test.com:3000',
    },
  });
  const data = response.json();

  expect(response.statusCode).toBe(200);
  expect(data.token).toBeDefined();

  await fastify.close();
});


================================================
File: test/routes/__snapshots__/token.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`\`/token/generate\` - without params 1`] = `"Invalid param: Expected object, received null"`;


================================================
File: test/routes/bitcoin/address.test.ts
================================================
import { describe, expect, test, beforeEach, vi } from 'vitest';
import { buildFastify } from '../../../src/app';
import { afterEach } from 'node:test';
import mockUTXOs from '../../__fixtures__/utxo.mock.json';
import mockRgbppUtxoPairs from '../../__fixtures__/rgbpp-utxo-pairs.mock.json';
import { RgbppUtxoCellsPair } from '../../../src/services/rgbpp';

let token: string;

describe('/bitcoin/v1/address', () => {
  beforeEach(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: 'test',
        domain: 'test.com',
      },
    });
    const data = response.json();
    token = data.token;

    await fastify.close();
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  test('Get address balance', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/balance',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get address balance with min_satoshi param', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/balance?min_satoshi=10000',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get address balance with invalid address', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/address/tb1qlrg2mhyxrq7ns5rpa6qvrvttr9674n6z0try/balance',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(400);
    expect(data.message).toBe('Invalid bitcoin address');

    await fastify.close();
  });

  test('Get address unspent transaction outputs', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/unspent',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchObject(mockUTXOs.filter((utxo) => utxo.status.confirmed));

    await fastify.close();
  });

  test('Get address unspent transaction outputs with only_confirmed = true', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/unspent?only_confirmed=true',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchObject(mockUTXOs.filter((utxo) => utxo.status.confirmed));

    await fastify.close();
  });

  test('Get address unspent transaction outputs with only_confirmed = false', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/unspent?only_confirmed=false',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchObject(mockUTXOs);

    await fastify.close();
  });

  test('Get address unspent transaction outputs with min_satoshi = 10000', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/unspent?min_satoshi=10000',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchObject(mockUTXOs.filter((utxo) => utxo.value >= 10000));

    await fastify.close();
  });

  test('Get address unspent transaction outputs with onlyNonRgbppUtxos = true', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/unspent?only_non_rgbpp_utxos=true',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchObject(
      mockUTXOs.filter((utxo) => {
        if (utxo.status.confirmed === false) return false;
        const pair = mockRgbppUtxoPairs.find((pair) => pair.utxo.txid === utxo.txid && pair.utxo.vout === utxo.vout);
        return !pair;
      }),
    );

    await fastify.close();
  });
});


================================================
File: test/routes/bitcoin/block.test.ts
================================================
import { describe, beforeEach, expect, test } from 'vitest';
import { buildFastify } from '../../../src/app';

describe('/bitcoin/v1/block', () => {
  let token: string;

  beforeEach(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: 'test',
        domain: 'test.com',
      },
    });
    const data = response.json();
    token = data.token;

    await fastify.close();
  });

  test('Get block by hash', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/block/000000000000009c08dc77c3f224d9f5bbe335a78b996ec1e0701e065537ca81',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get block header by hash', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/block/0000000000000005ae0b929ee3afbf2956aaa0059f9d7608dc396cf5f8f4dda6/header',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get block hash by height', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/block/height/0',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });
});


================================================
File: test/routes/bitcoin/info.test.ts
================================================
import { beforeEach, expect, test } from 'vitest';
import { buildFastify } from '../../../src/app';
import { describe } from 'node:test';

let token: string;

describe('/bitcoin/v1/info', () => {
  beforeEach(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: 'test',
        domain: 'test.com',
      },
    });
    const data = response.json();
    token = data.token;

    await fastify.close();
  });

  test('Get blockchain info', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/info',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toHaveProperty('bestblockhash');
    expect(data).toHaveProperty('blocks');
    expect(data).toHaveProperty('chain');
    expect(data).toHaveProperty('difficulty');
    expect(data).toHaveProperty('mediantime');

    await fastify.close();
  });
});


================================================
File: test/routes/bitcoin/transaction.test.ts
================================================
import { beforeEach, expect, test } from 'vitest';
import { buildFastify } from '../../../src/app';
import { describe } from 'node:test';

let token: string;

describe('/bitcoin/v1/transaction', () => {
  beforeEach(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: 'test',
        domain: 'test.com',
      },
    });
    const data = response.json();
    token = data.token;

    await fastify.close();
  });

  test('Get transaction by txid', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/transaction/9706131c1e327a068a6aafc16dc69a46c50bc7c65f180513896bdad39a6babfc',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get not exists transaction', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/transaction/9706131c1e327a068a6aafc16dc69a46c50bc7c65f180513896bdad39a6babf1',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = await response.json();

    expect(response.statusCode).toBe(404);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get transaction hex', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/bitcoin/v1/transaction/9706131c1e327a068a6aafc16dc69a46c50bc7c65f180513896bdad39a6babfc/hex',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = await response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toEqual({
      hex: '020000000001013115e849359a46737e7bf3e121a5a5de666a1ad01933e3df7dc48f97199f18d00000000000ffffffff02e803000000000000160014dd72437bde53e22df65feb845a1dd35784f3e66cacc1020000000000160014f8d0addc86183d385061ee80c1b16b1975eacf4202483045022100f50e2e6ee5ea04e4f7029d29a28e80266969f91357055e1d53b0715b768c448102204ccd9dbb38d0cc007e07b9c8b4088d4fac4ab65fef49774bafe27acbfc3d1111012102d05848540f152d730e272bc9628dd4e4a5f4126fdf118ad6a4fd6afd26b0831300000000',
    });

    await fastify.close();
  });

  test('Send exists raw transaction', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/bitcoin/v1/transaction',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
      body: {
        txhex:
          '02000000000101fe7b9cd0f75741e2ec1e3a6142eab945e64fab0ef15de4a66c635c0a789e986f0100000000ffffffff02e803000000000000160014dbf4360c0791098b0b14679e5e78015df3f2caad6a88000000000000160014dbf4360c0791098b0b14679e5e78015df3f2caad02473044022065829878f51581488f44c37064b46f552ea7354196fae5536906797b76b370bf02201c459081578dc4e1098fbe3ab68d7d56a99e8e9810bf2806d10053d6b36ffa4d0121037dff8ff2e0bd222690d785f9277e0c4800fc88b0fad522f1442f21a8226253ce00000000',
      },
    });

    expect(response.statusCode).toBe(400);
    await fastify.close();
  });
});


================================================
File: test/routes/bitcoin/__snapshots__/address.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`/bitcoin/v1/address > Get address balance 1`] = `
{
  "address": "tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu",
  "available_satoshi": 90738317,
  "dust_satoshi": 0,
  "pending_satoshi": 1426,
  "rgbpp_satoshi": 6552,
  "satoshi": 90738317,
  "total_satoshi": 90746295,
  "utxo_count": 17,
}
`;

exports[`/bitcoin/v1/address > Get address balance with min_satoshi param 1`] = `
{
  "address": "tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu",
  "available_satoshi": 90737437,
  "dust_satoshi": 7432,
  "pending_satoshi": 1426,
  "rgbpp_satoshi": 6552,
  "satoshi": 90737437,
  "total_satoshi": 90746295,
  "utxo_count": 17,
}
`;


================================================
File: test/routes/bitcoin/__snapshots__/block.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`/bitcoin/v1/block > Get block by hash 1`] = `
{
  "bits": 436273151,
  "difficulty": 16777216,
  "height": 2091140,
  "id": "000000000000009c08dc77c3f224d9f5bbe335a78b996ec1e0701e065537ca81",
  "mediantime": 1630621997,
  "merkle_root": "5d10d8d158bb8eb217d01fecc435bd10eda028043a913dc2bfe0ccf536a51cc9",
  "nonce": 1600805744,
  "previousblockhash": "0000000000000073f95d1fc0a93d449f82a754410c635e46264ec6c7c4d5741e",
  "size": 575,
  "timestamp": 1630625150,
  "tx_count": 2,
  "version": 543162372,
  "weight": 1865,
}
`;

exports[`/bitcoin/v1/block > Get block hash by height 1`] = `
{
  "hash": "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943",
}
`;

exports[`/bitcoin/v1/block > Get block header by hash 1`] = `
{
  "header": "0000202000af62594f79b6390c6ee3de56aad6658d35a9481cd8bb0ce047523800000000652cad111d076bf8aa3417670781154fd79533fb91fe782d70d300e9e95b4c5b6d60dd6518fe27190343494f",
}
`;


================================================
File: test/routes/bitcoin/__snapshots__/transaction.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Get not exists transaction 1`] = `
{
  "message": "Transaction not found",
}
`;

exports[`Get transaction by txid 1`] = `
{
  "fee": 141,
  "locktime": 0,
  "size": 223,
  "status": {
    "block_hash": "000000000000000cef4a1d6264fe63f543128518a466d31c7e2a8d6395b52522",
    "block_height": 2579043,
    "block_time": 1708580004,
    "confirmed": true,
  },
  "txid": "9706131c1e327a068a6aafc16dc69a46c50bc7c65f180513896bdad39a6babfc",
  "version": 2,
  "vin": [
    {
      "is_coinbase": false,
      "prevout": {
        "scriptpubkey": "0014f8d0addc86183d385061ee80c1b16b1975eacf42",
        "scriptpubkey_address": "tb1qlrg2mhyxrq7ns5rpa6qvrvttr9674n6z0trymp",
        "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f8d0addc86183d385061ee80c1b16b1975eacf42",
        "scriptpubkey_type": "v0_p2wpkh",
        "value": 181793,
      },
      "scriptsig": "",
      "scriptsig_asm": "",
      "sequence": 4294967295,
      "txid": "d0189f19978fc47ddfe33319d01a6a66dea5a521e1f37b7e73469a3549e81531",
      "vout": 0,
      "witness": [
        "3045022100f50e2e6ee5ea04e4f7029d29a28e80266969f91357055e1d53b0715b768c448102204ccd9dbb38d0cc007e07b9c8b4088d4fac4ab65fef49774bafe27acbfc3d111101",
        "02d05848540f152d730e272bc9628dd4e4a5f4126fdf118ad6a4fd6afd26b08313",
      ],
    },
  ],
  "vout": [
    {
      "scriptpubkey": "0014dd72437bde53e22df65feb845a1dd35784f3e66c",
      "scriptpubkey_address": "tb1qm4eyx777203zmajlawz958wn27z08envm2jelm",
      "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 dd72437bde53e22df65feb845a1dd35784f3e66c",
      "scriptpubkey_type": "v0_p2wpkh",
      "value": 1000,
    },
    {
      "scriptpubkey": "0014f8d0addc86183d385061ee80c1b16b1975eacf42",
      "scriptpubkey_address": "tb1qlrg2mhyxrq7ns5rpa6qvrvttr9674n6z0trymp",
      "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f8d0addc86183d385061ee80c1b16b1975eacf42",
      "scriptpubkey_type": "v0_p2wpkh",
      "value": 180652,
    },
  ],
  "weight": 562,
}
`;


================================================
File: test/routes/rgbpp/address.test.ts
================================================
import { beforeEach, expect, test, vi } from 'vitest';
import { buildFastify } from '../../../src/app';
import { describe } from 'node:test';
import mockUTXOs from '../../__fixtures__/utxo.mock.json';
import mockRgbppUtxoPairs from '../../__fixtures__/rgbpp-utxo-pairs.mock.json';
import mockTransactions from '../../__fixtures__/transactions.mock.json';
import { RgbppUtxoCellsPair } from '../../../src/services/rgbpp';

let token: string;

describe('/rgbpp/v1/address', () => {
  beforeEach(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: 'test',
        domain: 'test.com',
      },
    });
    const data = response.json();
    token = data.token;

    await fastify.close();
  });

  test('/:btc_address/assets', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/assets',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('/:btc_address/balance - without pending_amount', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/balance',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('/:btc_address/balance - with pending_amount', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const utxoSyncer = fastify.container.resolve('utxoSyncer');
    vi.spyOn(utxoSyncer, 'getUtxosByAddress').mockResolvedValueOnce(mockUTXOs);
    const rgbppCollector = fastify.container.resolve('rgbppCollector');
    vi.spyOn(rgbppCollector, 'getRgbppUtxoCellsPairs').mockResolvedValueOnce(
      mockRgbppUtxoPairs as RgbppUtxoCellsPair[],
    );
    const transactionProcessor = fastify.container.resolve('transactionProcessor');
    const getPendingOutputCellsByTxidSpy = vi
      .spyOn(transactionProcessor, 'getPendingOutputCellsByTxid')
      .mockResolvedValueOnce([
        {
          cellOutput: {
            capacity: '0x5e9f52687',
            lock: {
              codeHash: '0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248',
              args: '0x010000000000000000000000000000000000000000000000000000000000000000000000',
              hashType: 'type',
            },
            type: {
              codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
              args: '0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7',
              hashType: 'type',
            },
          },
          data: '0x00e1f505000000000000000000000000',
        },
        {
          cellOutput: {
            capacity: '0x5e9f52687',
            lock: {
              codeHash: '0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248',
              args: '0x010000000000000000000000000000000000000000000000000000000000000000000000',
              hashType: 'type',
            },
            type: {
              codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
              args: '0x8c556e92974a8dd8237719020a259d606359ac2cc958cb8bda77a1c3bb3cd93b',
              hashType: 'type',
            },
          },
          data: '0x00e1f505000000000000000000000000',
        },
        {
          cellOutput: {
            capacity: '0x5e9f52687',
            lock: {
              codeHash: '0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248',
              args: '0x010000000000000000000000000000000000000000000000000000000000000001234567',
              hashType: 'type',
            },
            type: {
              codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
              args: '0x8c556e92974a8dd8237719020a259d606359ac2cc958cb8bda77a1c3bb3cd93b',
              hashType: 'type',
            },
          },
          data: '0x00e1f505000000000000000000000000',
        },
      ]);

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/address/tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu/balance',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(getPendingOutputCellsByTxidSpy).toBeCalledTimes(2);
    expect(getPendingOutputCellsByTxidSpy).toHaveBeenCalledWith(
      'aab2d8fc3f064087450057ccb6012893cf219043d8c915fe64c5322c0eeb6fd2',
    );
    expect(getPendingOutputCellsByTxidSpy).toHaveBeenCalledWith(
      '989f4e03179e17cbb6edd446f57ea6107a40ba23441056653f1cc34b7dd1e5ba',
    );
    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('/:btc_address/activity', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const bitcoin = fastify.container.resolve('bitcoin');
    vi.spyOn(bitcoin, 'getAddressTxs').mockResolvedValueOnce(mockTransactions);

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/address/tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl/activity',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });
});


================================================
File: test/routes/rgbpp/assets.test.ts
================================================
import { beforeEach, expect, test } from 'vitest';
import { buildFastify } from '../../../src/app';
import { describe } from 'node:test';
import { blockchain } from '@ckb-lumos/base';
import { hexify } from '@ckb-lumos/codec/lib/bytes';

let token: string;

describe('/rgbpp/v1/assets', () => {
  beforeEach(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: 'test',
        domain: 'test.com',
      },
    });
    const data = response.json();
    token = data.token;

    await fastify.close();
  });

  test('Get RGB++ assets by BTC txid', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/assets/ca159e04767c25cb012f0d1c0731c767e2b58468d4cd7b505de0b184dcf97017',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get RGB++ assets by BTC txid and vout', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/assets/ca159e04767c25cb012f0d1c0731c767e2b58468d4cd7b505de0b184dcf97017/1',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get RGB++ assets type info (xUDT)', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const typeScript = blockchain.Script.pack({
      codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
      hashType: 'type',
      args: '0x8c556e92974a8dd8237719020a259d606359ac2cc958cb8bda77a1c3bb3cd93b',
    });
    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/assets/type?type_script=' + hexify(typeScript),
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });

  test('Get RGB++ assets type info (Spore)', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const typeScript = blockchain.Script.pack({
      codeHash: '0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d',
      hashType: 'data1',
      args: '0xc966bd9131e7f23629a022b1310adfb3c5c98c1ac0c0ce11871685b4c8199959',
    });
    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/assets/type?type_script=' + hexify(typeScript),
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toMatchSnapshot();

    await fastify.close();
  });
});


================================================
File: test/routes/rgbpp/paymaster.test.ts
================================================
import { beforeEach, expect, test } from 'vitest';
import { buildFastify } from '../../../src/app';
import { describe } from 'node:test';
import { Env } from '../../../src/env';

let token: string;

describe('/rgbpp/v1/paymaster', () => {
  beforeEach(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: 'test',
        domain: 'test.com',
      },
    });
    const data = response.json();
    token = data.token;

    await fastify.close();
  });

  test('Get paymaster btc address', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const env: Env = fastify.container.resolve('env');

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/paymaster/info',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data.btc_address).toEqual(env.PAYMASTER_RECEIVE_BTC_ADDRESS);
    expect(data.ckb_address).not.toBeUndefined();
    expect(data.fee).toEqual(env.PAYMASTER_BTC_CONTAINER_FEE_SATS);

    await fastify.close();
  });
});


================================================
File: test/routes/rgbpp/transaction.test.ts
================================================
import { beforeEach, expect, test, vi } from 'vitest';
import { buildFastify } from '../../../src/app';
import { describe } from 'node:test';
import TransactionProcessor, { ITransactionRequest } from '../../../src/services/transaction';
import { CKBVirtualResult } from '../../../src/routes/rgbpp/types';
import { Job } from 'bullmq';

let token: string;

describe('/rgbpp/v1/transaction', () => {
  beforeEach(async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/token/generate',
      payload: {
        app: 'test',
        domain: 'test.com',
      },
    });
    const data = response.json();
    token = data.token;

    await fastify.close();
  });

  const mockCkbVirtualResult: CKBVirtualResult = {
    ckbRawTx: {
      version: '0x0',
      cellDeps: [
        {
          outPoint: {
            txHash: '0x04c5c3e69f1aa6ee27fb9de3d15a81704e387ab3b453965adbe0b6ca343c6f41',
            index: '0x0',
          },
          depType: 'code',
        },
        {
          outPoint: {
            txHash: '0xc07844ce21b38e4b071dd0e1ee3b0e27afd8d7532491327f39b786343f558ab7',
            index: '0x0',
          },
          depType: 'code',
        },
        {
          outPoint: {
            txHash: '0x04c5c3e69f1aa6ee27fb9de3d15a81704e387ab3b453965adbe0b6ca343c6f41',
            index: '0x1',
          },
          depType: 'code',
        },
      ],
      headerDeps: [],
      inputs: [
        {
          previousOutput: {
            txHash: '0x56756961892340bb675138fb4a4055a97b340179530cd9c508f601a821ce28b8',
            index: '0x0',
          },
          since: '0x0',
        },
      ],
      outputs: [
        {
          capacity: '0x5e9f5203e',
          lock: {
            codeHash: '0xbc6c568a1a0d0a09f6844dc9d74ddb4343c32143ff25f727c59edf4fb72d6936',
            args: '0x010000000000000000000000000000000000000000000000000000000000000000000000',
            hashType: 'type',
          },
          type: {
            codeHash: '0x50bd8d6680b8b9cf98b73f3c08faf8b2a21914311954118ad6609be6e78a1b95',
            args: '0x2ae639d6233f9b15545573b8e78f38ff7aa6c7bf8ef6460bf1f12d0a76c09c4e',
            hashType: 'data1',
          },
        },
      ],
      outputsData: ['0x00e87648170000000000000000000000'],
      witnesses: ['0xFF'],
    },
    commitment: '1f434e4bc1eb8ccb9ac37fd018dcb6989ac1a95ae340db96a030822bd2f268ed',
    needPaymasterCell: false,
    sumInputsCapacity: '0x5e9f52f1f',
  };

  test('Post transaction', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/rgbpp/v1/transaction/ckb-tx',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
      body: {
        btc_txid: '0662cbe5a6666f36d3c6c431e22ef5073acf059d4ea1c7cd8d158b4107ab0d68',
        ckb_virtual_result: mockCkbVirtualResult,
      },
    });

    expect(response.statusCode).toBe(200);

    await fastify.close();
  });

  test('Post transaction with ckb_virtual_result JSON string', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const response = await fastify.inject({
      method: 'POST',
      url: '/rgbpp/v1/transaction/ckb-tx',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
      body: {
        btc_txid: '0662cbe5a6666f36d3c6c431e22ef5073acf059d4ea1c7cd8d158b4107ab0d68',
        ckb_virtual_result: JSON.stringify(mockCkbVirtualResult),
      },
    });

    expect(response.statusCode).toBe(200);

    await fastify.close();
  });

  test('Post transaction with Invalid ckb_virtual_result JSON string', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { commitment, ...incorrectCkbVirtualResult } = mockCkbVirtualResult;

    const response = await fastify.inject({
      method: 'POST',
      url: '/rgbpp/v1/transaction/ckb-tx',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
      body: {
        btc_txid: '0662cbe5a6666f36d3c6c431e22ef5073acf059d4ea1c7cd8d158b4107ab0d69',
        ckb_virtual_result: JSON.stringify(incorrectCkbVirtualResult),
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(400);
    expect(data).toEqual({
      message: 'Invalid CKB virtual result: {"formErrors":[],"fieldErrors":{"commitment":["Required"]}}',
    });

    await fastify.close();
  });

  test('Get transaction job info with completed state', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const transactionProcessor: TransactionProcessor = fastify.container.resolve('transactionProcessor');

    vi.spyOn(transactionProcessor, 'getTransactionRequest').mockResolvedValue({
      getState: vi.fn().mockResolvedValue('completed'),
      attemptsMade: 1,
      data: {
        txid: 'ccee39f38e5ad162c21a44bc6add20577811f13e35575fcb9103ef725a73c79d',
        ckbVirtualResult: mockCkbVirtualResult,
      },
    } as unknown as Job<ITransactionRequest, unknown, string>);

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/transaction/ccee39f38e5ad162c21a44bc6add20577811f13e35575fcb9103ef725a73c79d/job',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toEqual({
      state: 'completed',
      attempts: 1,
    });

    await fastify.close();
  });

  test('Get transaction job info with failed state', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const transactionProcessor: TransactionProcessor = fastify.container.resolve('transactionProcessor');

    vi.spyOn(transactionProcessor, 'getTransactionRequest').mockResolvedValue({
      getState: vi.fn().mockResolvedValue('failed'),
      attemptsMade: 1,
      failedReason: 'Failed to send transaction',
      data: {
        txid: 'ccee39f38e5ad162c21a44bc6add20577811f13e35575fcb9103ef725a73c79d',
        ckbVirtualResult: mockCkbVirtualResult,
      },
    } as unknown as Job<ITransactionRequest, unknown, string>);

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/transaction/ccee39f38e5ad162c21a44bc6add20577811f13e35575fcb9103ef725a73c79d/job',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toEqual({
      state: 'failed',
      attempts: 1,
      failedReason: 'Failed to send transaction',
    });

    await fastify.close();
  });

  test('Get transaction job info with data', async () => {
    const fastify = buildFastify();
    await fastify.ready();

    const transactionProcessor: TransactionProcessor = fastify.container.resolve('transactionProcessor');

    vi.spyOn(transactionProcessor, 'getTransactionRequest').mockResolvedValue({
      getState: vi.fn().mockResolvedValue('completed'),
      attemptsMade: 1,
      data: {
        txid: 'ccee39f38e5ad162c21a44bc6add20577811f13e35575fcb9103ef725a73c79d',
        ckbVirtualResult: mockCkbVirtualResult,
      },
    } as unknown as Job<ITransactionRequest, unknown, string>);

    const response = await fastify.inject({
      method: 'GET',
      url: '/rgbpp/v1/transaction/ccee39f38e5ad162c21a44bc6add20577811f13e35575fcb9103ef725a73c79d/job?with_data=true',
      headers: {
        Authorization: `Bearer ${token}`,
        Origin: 'https://test.com',
      },
    });
    const data = response.json();

    expect(response.statusCode).toBe(200);
    expect(data).toEqual({
      state: 'completed',
      attempts: 1,
      data: {
        txid: 'ccee39f38e5ad162c21a44bc6add20577811f13e35575fcb9103ef725a73c79d',
        ckbVirtualResult: mockCkbVirtualResult,
      },
    });

    await fastify.close();
  });
});


================================================
File: test/routes/rgbpp/__snapshots__/address.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`/:btc_address/activity 1`] = `
{
  "address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
  "cursor": "024af1f0ace74f327a68ae2447c1d401f7b093704825c1ee3215859c937e7d2d",
  "txs": [
    {
      "btcTx": {
        "fee": 36942,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "00000000a3ca017e047736df9f5a7eecc0873d453b978ffe00edd75f5be2c7fc",
          "block_height": 2822267,
          "block_time": 1719235852,
          "confirmed": true,
        },
        "txid": "be3cd87c020a74d14918eca5f6fde489d29e05306633e9bf400e05f9c16a984a",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 745766,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "b298e48b6975e527e065569d930af17b9100b82cdc14eefd08e86cf1a2529da0",
            "vout": 1,
            "witness": [
              "30440220047f67b54ac52c1941c1f49a2152dafd946944e22778b272f70d3bcd0eeb72af02204f6ea6943bfe9987ef7490d5379e0d2febb86250dc413f6d4c5f07d50ec2737601",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 708278,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 95106,
        "locktime": 0,
        "size": 607,
        "status": {
          "block_hash": "00000000b06bc6e43ff905b5e2b900c87733b6eb544950e73973b3bfaf69dd01",
          "block_height": 2822262,
          "block_time": 1719229747,
          "confirmed": true,
        },
        "txid": "a57b1fed4a832fda31899cfdf407800f1e8aeb599483e96b7ef156fc66b8c8c9",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "6974c8248d6c0349422acfedb81494dee5a21b11b36301ddcd3149edf94ee816",
            "vout": 0,
            "witness": [
              "3045022100d92135302e38d94f178b823756255c63cc09de84c995009606941437fad3131902207d7310127d0bfd13787a4c0996961b8449e73c07326c80c2e1536b43827ac9fe01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 26081,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "4b1494422cedf66799fa4aed57e5e3c62841ba12b79b4095b0d8c54688e4e339",
            "vout": 1,
            "witness": [
              "30450221009974269d9b0e04f3a946e340ba8efb4d6f3fc90e7da4f11a1114116b6c82c735022059e3a340ba3d66619ab395dd4f4d14bbe766949e35e96c96194a612c040581a901",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 529703,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "6974c8248d6c0349422acfedb81494dee5a21b11b36301ddcd3149edf94ee816",
            "vout": 1,
            "witness": [
              "3045022100f093438a2ff7d6dc5551553e7d786c9c4644cb26213d08b3d0635128d1ad95ca02207305c0ab8fd5fcd38cc279fcbaf7ee94cbaabd0b563dc10a63c5145ad8cb387401",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20dfe3522837b4dff757c583b4c8025478ad020ae4f6b026029f328156571d1f78",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 dfe3522837b4dff757c583b4c8025478ad020ae4f6b026029f328156571d1f78",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_type": "v1_p2tr",
            "value": 12000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 448678,
          },
        ],
        "weight": 1450,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "depGroup",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x1444a8763cd9a5ce6dd7e6a04aae6d1c82987f272031417203ae67b8f05d6a5f",
              },
            },
          ],
          "hash": "0x4b0f0c4b58b8093842ef764897dff8278b20121d14c42cb0f4f057db1d451315",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0xc8b34f32662cdab4d0cbd7201a9758010b56a777e4cd634ac13eb741e87e5c6a",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0xd2",
                "txHash": "0x52f7e48dbd24d9e97a3cec32ef638f277c112af0f012916b1ef4c54bf4c83a0d",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000c9c8b866fc56f17e6be9839459eb8a1e0f8007f4fd9c8931da2f834aed1f7ba5",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0xd69ea0079ef7a194a75aadcff2bd8d27718dc0e99a71780b607fdc480f7673d5",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x01000000c9c8b866fc56f17e6be9839459eb8a1e0f8007f4fd9c8931da2f834aed1f7ba5",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0xd69ea0079ef7a194a75aadcff2bd8d27718dc0e99a71780b607fdc480f7673d5",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x1718c72b8",
              "lock": {
                "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type",
              },
              "type": null,
            },
          ],
          "outputsData": [
            "0x00e1f505000000000000000000000000",
            "0x000bc57d020000000000000000000000",
            "0x",
          ],
          "version": "0x0",
          "witnesses": [
            "0x13060000100000001306000013060000ff050000ff050000140000001600000018000000350100000000010219010000020000000316e84ef9ed4931cddd0163b3111ba2e5de9414b8edcf2a4249036c8d24c874690000000000ffffffff39e3e48846c5d8b095409bb712ba4128c6e3e557ed4afa9967f6ed2c4294144b0100000000ffffffff16e84ef9ed4931cddd0163b3111ba2e5de9414b8edcf2a4249036c8d24c874690100000000ffffffff040000000000000000226a20dfe3522837b4dff757c583b4c8025478ad020ae4f6b026029f328156571d1f782202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67be02e000000000000225120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1a6d8060000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a020000b406000076102b001a0200000000002026d417031455be4cd340132c611361609f82983b2effb6b6c29e4cd90000000079ec1d6ce0829f93daeac85e6c95d8ea60a33c36164c1682471cc1f94a9b7f74335d7966ffff001d1c9d4e7b051700000e07476aada5b6a1d5a99e2482802b3f9832346930590ef43dd6ecb2669ad40b4f82c61151fa5a1a71b8a3594a426692ef60e7aea93c2fd8394438b986efafba280d824e6b4fca224f7683c8d46f1485518561662b274acb03faea3d577df22855a06fbcaa117c4b67fc00026e0cffdcc8b8023375eeff27e9a6f834062c83f9ad16af5b3f9cde6ade1fa075a26fe00ffd8b7c40d14000a44a52c536db21defe14cb15c5aaf7b231e7f3ec622d3c6170d3bf0d8047e626a46ad60070682848b0dfc9c8b866fc56f17e6be9839459eb8a1e0f8007f4fd9c8931da2f834aed1f7ba5caee93146b90564930e8e2841077b73ceca23e8e693e9dfa6d471fb379d80d42ca322cfc0b14d3827cee8a85133d176d97e34b60e153a487fe317bce4dc7b33509cd56e6e349ed29584e94601edc8c32fabfb0b74f533f7a28ae5a6d533c88e090247af331c55af5b244e46e9d4d65ae08e8202266e5f2a4b2fde8a1af367ca9e4c4db9017704ecf82d9cce902da3df28c8fba9ba936d28940091ca8a3ec40e1c0c31703613f3966567d289f2c4e58b17e1c13131d235f3ef3d79fa951bd6aac020e404ae7e42f0047d6e36dfc42188d91e72756014a34b86e73491cf92da84804d7d60e0009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0f2b00173cb6436c032a611d0000000000000000000000000000000000000000000000ca4f561bfea2c0c758d74cece399da6288596aefe532af1c6702699f39fa9439e00f2b005f102b00e44cefb269bcd98d02000000000000000000000000000000000000000000000024d17af112fc88fda603fe5cd46b09a4d70bf56e979592b89a30b1c7944c3dd460102b006f102b0024dcbf23a525c58200000000000000000000000000000000000000000000000069911e7db7957ba71e6ba737b9a9e3670feb68e5cfbaea0eba05f9c703715c4370102b0073102b0004000400040000000000000000000000000000000000000000000000000000000c4381d72c113362fd6cb965cd35fd7993c22ac366c0c888435eeba20a76325974102b0075102b000200020002000000000000000000000000000000000000000000000000000000544c287f2047f1b330cab2423be5838982c093eb25672d97d4a832c610204db2",
            "0x5500000010000000550000005500000041000000b3553170bdc3b9759ce1684a359627f417a731ff199c553f6357465fe3a939c00e0e7bfb318f61491e84962cce83a3dd4a3b1865f2cd0769e1612b12a792514b00",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x0000000016e84ef9ed4931cddd0163b3111ba2e5de9414b8edcf2a4249036c8d24c87469",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0xd69ea0079ef7a194a75aadcff2bd8d27718dc0e99a71780b607fdc480f7673d5",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x75b81bc00",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000c9c8b866fc56f17e6be9839459eb8a1e0f8007f4fd9c8931da2f834aed1f7ba5",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0xd69ea0079ef7a194a75aadcff2bd8d27718dc0e99a71780b607fdc480f7673d5",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x01000000c9c8b866fc56f17e6be9839459eb8a1e0f8007f4fd9c8931da2f834aed1f7ba5",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0xd69ea0079ef7a194a75aadcff2bd8d27718dc0e99a71780b607fdc480f7673d5",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x1718c72b8",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 57902,
        "locktime": 0,
        "size": 384,
        "status": {
          "block_hash": "00000000b06bc6e43ff905b5e2b900c87733b6eb544950e73973b3bfaf69dd01",
          "block_height": 2822262,
          "block_time": 1719229747,
          "confirmed": true,
        },
        "txid": "b298e48b6975e527e065569d930af17b9100b82cdc14eefd08e86cf1a2529da0",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "4b1494422cedf66799fa4aed57e5e3c62841ba12b79b4095b0d8c54688e4e339",
            "vout": 0,
            "witness": [
              "3045022100c5021f7d8e00d203152658cc8abf61e24dac4538a38c85829b5adf1c5754f5dd02204c554e23a3deb9c839d7bc14e1e1dcbd25010e202a905dcd5b66193c47e7af8701",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 803122,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "fec895ab19c7bb7e14f315691adde21d62f759b0eb323a122b1edfa35a571fc0",
            "vout": 1,
            "witness": [
              "3045022100939a89468b854371b3bb0986fa8decef41c8af820e1b85839f1bcc118ffe21d00220231400f9a35686c707917b4408bc0d0579a95bdf59606ea62dda68093e9c3b0101",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20c0cc27b12593a61071c59012f6f2f4fb2674960659e2670a2249a082b13a1c12",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 c0cc27b12593a61071c59012f6f2f4fb2674960659e2670a2249a082b13a1c12",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 745766,
          },
        ],
        "weight": 882,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0x5e8d2a517d50fd4bb4d01737a7952a1f1d35c8afc77240695bb569cd7d9d5a1f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x1444a8763cd9a5ce6dd7e6a04aae6d1c82987f272031417203ae67b8f05d6a5f",
              },
            },
          ],
          "hash": "0x90bd8b7f120fa808249a21029c7ff31cf9e464dfabb016994868199bf647b6d5",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x83078f4ba34e1556a23b73576cb17f687febb32c4f8e345d5672414e9638d8f8",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x9502f758c",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000a09d52a2f16ce808fdee14dc2cb800917bf10a939d5665e027e575698be498b2",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0xad6f99db6e63b3dadd1939d85c210f834b76bb508731a51ef540680ad17e6af8",
                "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
                "hashType": "data1",
              },
            },
          ],
          "outputsData": [
            "0xa200000010000000190000007e00000005000000646f622f30610000007b22626c6f636b5f6e756d626572223a31333230333531322c2263656c6c5f6964223a31333330333434383439393839393937363030302c22646e61223a223831363161396536636130336130366333323461623637653361306166646535227d20000000c1097c85aa781d2cd3c017dc911eceab94644cfe2dd714ae7f7bbe4b75accb08",
          ],
          "version": "0x0",
          "witnesses": [
            "0xa005000010000000a0050000a00500008c0500008c050000140000001600000018000000c200000000000101a6000000020000000239e3e48846c5d8b095409bb712ba4128c6e3e557ed4afa9967f6ed2c4294144b0000000000ffffffffc01f575aa3df1e2b123a32ebb059f7621de2dd1a6915f3147ebbc719ab95c8fe0100000000ffffffff020000000000000000226a20c0cc27b12593a61071c59012f6f2f4fb2674960659e2670a2249a082b13a1c1226610b0000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a0200008906000076102b001a0200000000002026d417031455be4cd340132c611361609f82983b2effb6b6c29e4cd90000000079ec1d6ce0829f93daeac85e6c95d8ea60a33c36164c1682471cc1f94a9b7f74335d7966ffff001d1c9d4e7b051700000e07476aada5b6a1d5a99e2482802b3f9832346930590ef43dd6ecb2669ad40b4f82c61151fa5a1a71b8a3594a426692ef60e7aea93c2fd8394438b986efafba280d824e6b4fca224f7683c8d46f1485518561662b274acb03faea3d577df22855ade36e7eac2b7ca0c583b069b1627b74a161039ca95052d441d337c40a44fdb39fe69f6561a2027342cfb1d135353d48c952905dbe22734ecd7b9ba16fc9a80fa09d52a2f16ce808fdee14dc2cb800917bf10a939d5665e027e575698be498b2ae104c258f094c46398963dfa32a04a68ba004bd82b28f106a80102735ecdfe257099bc44073a9e429dbbc1bb1eecd41c0ec48fb4c3eaf8c754f36a0ad6eb70608d4d3b2f7b60aae57e3059f469247ee98fcab41dcdcd8ee1ee7f6057bb918f78225d807bc8daffc027ec19b15393128d7db82e44e0e5d8827a8de3b2c9b592490247af331c55af5b244e46e9d4d65ae08e8202266e5f2a4b2fde8a1af367ca9e4c4db9017704ecf82d9cce902da3df28c8fba9ba936d28940091ca8a3ec40e1c0c31703613f3966567d289f2c4e58b17e1c13131d235f3ef3d79fa951bd6aac020e404ae7e42f0047d6e36dfc42188d91e72756014a34b86e73491cf92da84804d7de050009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0f2b00173cb6436c032a611d0000000000000000000000000000000000000000000000ca4f561bfea2c0c758d74cece399da6288596aefe532af1c6702699f39fa9439e00f2b005f102b00e44cefb269bcd98d02000000000000000000000000000000000000000000000024d17af112fc88fda603fe5cd46b09a4d70bf56e979592b89a30b1c7944c3dd460102b006f102b0024dcbf23a525c58200000000000000000000000000000000000000000000000069911e7db7957ba71e6ba737b9a9e3670feb68e5cfbaea0eba05f9c703715c4370102b0073102b0004000400040000000000000000000000000000000000000000000000000000000c4381d72c113362fd6cb965cd35fd7993c22ac366c0c888435eeba20a76325974102b0075102b000200020002000000000000000000000000000000000000000000000000000000544c287f2047f1b330cab2423be5838982c093eb25672d97d4a832c610204db2",
            "0x010000ffbd0100000c0000001000000000000000ad01000008000000a5010000080000009d0100001000000030000000500000005490760feb68efb3e3c158660bd86792ad1c4f55c36025dda6c0e5bdc91e483f913ce0ad6f0ec0884cb9427c342c44ba6dcdd5ee559c2f17f3310987187c1cc449010000010000004501000010000000300000008d000000ad6f99db6e63b3dadd1939d85c210f834b76bb508731a51ef540680ad17e6af8000000005900000010000000300000003100000061ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c324801240000000000000039e3e48846c5d8b095409bb712ba4128c6e3e557ed4afa9967f6ed2c4294144b00000000b400000010000000300000003100000000cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326017f0000007f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000a09d52a2f16ce808fdee14dc2cb800917bf10a939d5665e027e575698be498b2",
          ],
        },
        "inputs": [
          {
            "capacity": "0x9502f9000",
            "lock": {
              "args": "0x0000000039e3e48846c5d8b095409bb712ba4128c6e3e557ed4afa9967f6ed2c4294144b",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0xad6f99db6e63b3dadd1939d85c210f834b76bb508731a51ef540680ad17e6af8",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0x9502f758c",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000a09d52a2f16ce808fdee14dc2cb800917bf10a939d5665e027e575698be498b2",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0xad6f99db6e63b3dadd1939d85c210f834b76bb508731a51ef540680ad17e6af8",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 36942,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "00000000b06bc6e43ff905b5e2b900c87733b6eb544950e73973b3bfaf69dd01",
          "block_height": 2822262,
          "block_time": 1719229747,
          "confirmed": true,
        },
        "txid": "c81b46eded09268da540dc207af08ed1737acfb6da37854b85e1751f3d02956f",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 428237,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "d6e2daf713b33d7e60ba48c8300ce102f07f869f7c29c58d0123d5ee0f334720",
            "vout": 3,
            "witness": [
              "304402206b5a55fbb71a036d3f3a91daab501a21fd7facd8204f8253520ae4a3cd0c1114022025e04b1892eb93bfa64f94b5b1e34ec40a0561dc5d5cae124dd5d087fe4229e801",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 390749,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 57902,
        "locktime": 0,
        "size": 383,
        "status": {
          "block_hash": "000000001237393a91dc9071043f36f4e9cde544db02e0ce5908c1d1dc23b667",
          "block_height": 2822254,
          "block_time": 1719219815,
          "confirmed": true,
        },
        "txid": "fec895ab19c7bb7e14f315691adde21d62f759b0eb323a122b1edfa35a571fc0",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "95f45c8834a6d80b1f5cd33f12565406b3b537228f65485044cde68a0517d2f1",
            "vout": 0,
            "witness": [
              "30440220020239bcf1956bfb8a20a7d3c57af7eab2f4df53b56d1e99af0ed768ebb3baf302202e0a1c16426848a4f5bf6196855c67864818c1781fe79f085b1a0a8bda895d3001",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 860478,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "9b524dad1078024d6bc274854857ef2bd7a1db56add2df364574ceda952e36bb",
            "vout": 0,
            "witness": [
              "30450221009f708fc5a496f6f69898b582417340437ee4c1d62b57fcef19fd0a327fc484e6022012befa331005980fe148042d9a2a4ffaabd0aa157fa8701f8e3008fa9efae25101",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20fdcacc58dcc4a9c0abd579afd468c084219ca61fb22ae44976cc17d42948c471",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 fdcacc58dcc4a9c0abd579afd468c084219ca61fb22ae44976cc17d42948c471",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 803122,
          },
        ],
        "weight": 881,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0x5e8d2a517d50fd4bb4d01737a7952a1f1d35c8afc77240695bb569cd7d9d5a1f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x95c94fcca474dcbdb54f3485659af6288cd0cee0a8c3058abeac5c675e0baa66",
              },
            },
          ],
          "hash": "0x9e0aca460eb2cbc1c56e52e5c20093c657b37d0f7ff8be267c17e0a365ec223f",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x66e98781debb036d720c2f27e3add3a9451733fd47976e75c4b415c40c7d7601",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x9502f758c",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000c01f575aa3df1e2b123a32ebb059f7621de2dd1a6915f3147ebbc719ab95c8fe",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0xf93eaac0a2dcb1f85aa00dcd7d239155452fe88401c626adade16441b46d3193",
                "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
                "hashType": "data1",
              },
            },
          ],
          "outputsData": [
            "0xa200000010000000190000007e00000005000000646f622f30610000007b22626c6f636b5f6e756d626572223a31333230333534332c2263656c6c5f6964223a31313233373437313536303933363930333030302c22646e61223a223035653764353933643065376536336334393238626563653939663966343433227d20000000c1097c85aa781d2cd3c017dc911eceab94644cfe2dd714ae7f7bbe4b75accb08",
          ],
          "version": "0x0",
          "witnesses": [
            "0xa005000010000000a0050000a00500008c0500008c050000140000001600000018000000c200000000000101a60000000200000002f1d217058ae6cd445048658f2237b5b3065456123fd35c1f0bd8a634885cf4950000000000ffffffffbb362e95dace744536dfd2ad56dba1d72bef57488574c26b4d027810ad4d529b0000000000ffffffff020000000000000000226a20fdcacc58dcc4a9c0abd579afd468c084219ca61fb22ae44976cc17d42948c47132410c0000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a020000b60200006e102b001a0200000000002009e6e1df1f2b5c8574ff28a6a503f8c967a505a6d1471da90e9ff7090000000057ef2e64d03f789e8635e050fd75e0cefc35e959bfadd6591ff5d1af89ea932467367966ffff001d54786de6081700000ef06f1205650a4a778bf0e4f86aec86df5a942c906b2a3a3b07d8bcf52ebf3e565ba93abd6d79ad6c91063c90e217537dfa99c596f0c995440b1dc36dd33f32b3c8500e856632314316bd5278dbd946e1cb5129476c372daa723c1fdad93f8231756165dad521d22bc21fa5d810b4b74c61b3db8c837d0a4a9ba9a8201629d96c9ada424bf4e62acf4adf98c0419ecedf0b9419ff09a0098ec374371cb7151540036e9a0992116c679705d40416191a463097910f39849e975091a75658887b10c01f575aa3df1e2b123a32ebb059f7621de2dd1a6915f3147ebbc719ab95c8fec158b1c9522ef2fdc3398e30fcb6510daa3023fd0e71facaf8187dd036fef64999de6fb9d33e0a80c867cebb9af07c08e838d24505e4e290b8daf7c6b2c0e2d3891782628a9bc52581d726d09add0d6237292e90815099bb00da7771ddcc7522497c423f4c544991fff6612c402412fb8c34e8df7194b992595ef2e29f49f3acd4cc519cde69870473572249ad864083c52296a9d973c7240ffc0831890d757a6ed36fff37dbcc7ae2fa0fc29546d203662d9a9b19631821e5d7d775b7cc0ae8de25af6b96b773b392f438a2f282942334473d45750c1d6332da00aa40afa6e9046f6b0d0009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0f2b00173cb6436c032a611d0000000000000000000000000000000000000000000000ca4f561bfea2c0c758d74cece399da6288596aefe532af1c6702699f39fa9439e00f2b005f102b00e44cefb269bcd98d02000000000000000000000000000000000000000000000024d17af112fc88fda603fe5cd46b09a4d70bf56e979592b89a30b1c7944c3dd460102b0067102b0017e5cbda37dc1362000000000000000000000000000000000000000000000000e84102aaada025b85934828444b613f5bdcd9f199447b86c9e1db1ba8cb1b39a68102b006b102b0009f7ef486949b12000000000000000000000000000000000000000000000000079e70174021af70ad6692d649c13a93e01fce94f161caf2df0bd2fd96def06306c102b006d102b0002000200020000000000000000000000000000000000000000000000000000008b17d0eecab9188b9440571c10138832e0277d326327690cea9adc55d009eed4",
            "0x010000ffbd0100000c0000001000000000000000ad01000008000000a5010000080000009d010000100000003000000050000000610d6afa7d47e0c813bcb6e11635ab66eaddebe82b7c5faf8c9cb0a36279e169f8c08a400e8990955dafb47d4bfcd9a716a822022daff68b511334491b59a5dd49010000010000004501000010000000300000008d000000f93eaac0a2dcb1f85aa00dcd7d239155452fe88401c626adade16441b46d3193000000005900000010000000300000003100000061ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248012400000000000000f1d217058ae6cd445048658f2237b5b3065456123fd35c1f0bd8a634885cf49500000000b400000010000000300000003100000000cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326017f0000007f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000c01f575aa3df1e2b123a32ebb059f7621de2dd1a6915f3147ebbc719ab95c8fe",
          ],
        },
        "inputs": [
          {
            "capacity": "0x9502f9000",
            "lock": {
              "args": "0x00000000f1d217058ae6cd445048658f2237b5b3065456123fd35c1f0bd8a634885cf495",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0xf93eaac0a2dcb1f85aa00dcd7d239155452fe88401c626adade16441b46d3193",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0x9502f758c",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000c01f575aa3df1e2b123a32ebb059f7621de2dd1a6915f3147ebbc719ab95c8fe",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0xf93eaac0a2dcb1f85aa00dcd7d239155452fe88401c626adade16441b46d3193",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 77290,
        "locktime": 0,
        "size": 457,
        "status": {
          "block_hash": "000000001237393a91dc9071043f36f4e9cde544db02e0ce5908c1d1dc23b667",
          "block_height": 2822254,
          "block_time": 1719219815,
          "confirmed": true,
        },
        "txid": "d6e2daf713b33d7e60ba48c8300ce102f07f869f7c29c58d0123d5ee0f334720",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "f6e2123b18280db695238f00c45eaf18b06f274b1c10a462866cea186e046ff2",
            "vout": 1,
            "witness": [
              "3044022058b7629c18d38e8a15c093ef78381d4fe2f3c04fc633ec12f5d31b3666c941670220321ef611f1d1ef29dde979b9a24620a9e8e25ef436ffc94e83b6f6951911004001",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 517527,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "41c8c4f7da7c2bda56128465a3c645d2c3117afe3e67845b075a8f1f98d68d69",
            "vout": 0,
            "witness": [
              "3045022100dd533db1656f44a5f2737ed053ddac584e9e671020dddf041038d65c503f4b3c022035701c4038fd0d519899d972c76c5353d3c43b274b62a80dd71674901597b3a201",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20742df9c559b3a70ae7887c88f7ad8840ece38649aef0f2661799f2b4b231077d",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 742df9c559b3a70ae7887c88f7ad8840ece38649aef0f2661799f2b4b231077d",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_type": "v1_p2tr",
            "value": 12000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 428237,
          },
        ],
        "weight": 1177,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "depGroup",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x95c94fcca474dcbdb54f3485659af6288cd0cee0a8c3058abeac5c675e0baa66",
              },
            },
          ],
          "hash": "0x9d4de5023c48358581d5a0accdc0b70d29b3705faf5e51ee1684b4222032d0a4",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x1",
                "txHash": "0x0f01520ecb33492cdcf46cbf61dbe0990a5a576432e1da8404a5b64bceb4fd51",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0xd0",
                "txHash": "0x52f7e48dbd24d9e97a3cec32ef638f277c112af0f012916b1ef4c54bf4c83a0d",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd03060000002047330feed523018dc5297c9f867ff002e10c30c848ba607e3db313f7dae2d6",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x010000002047330feed523018dc5297c9f867ff002e10c30c848ba607e3db313f7dae2d6",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x1718c72e5",
              "lock": {
                "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type",
              },
              "type": null,
            },
          ],
          "outputsData": [
            "0x00e1f505000000000000000000000000",
            "0x0008af2f000000000000000000000000",
            "0x",
          ],
          "version": "0x0",
          "witnesses": [
            "0xea05000010000000ea050000ea050000d6050000d60500001400000016000000180000000c01000000000102f00000000200000002f26f046e18ea6c8662a4101c4b276fb018af5ec4008f2395b60d28183b12e2f60100000000ffffffff698dd6981f8f5a075b84673efe7a11c3d245c6a365841256da2b7cdaf7c4c8410000000000ffffffff040000000000000000226a20742df9c559b3a70ae7887c88f7ad8840ece38649aef0f2661799f2b4b231077d2202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67be02e000000000000225120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1cd88060000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a020000000200006e102b001a0200000000002009e6e1df1f2b5c8574ff28a6a503f8c967a505a6d1471da90e9ff7090000000057ef2e64d03f789e8635e050fd75e0cefc35e959bfadd6591ff5d1af89ea932467367966ffff001d54786de6081700000ef06f1205650a4a778bf0e4f86aec86df5a942c906b2a3a3b07d8bcf52ebf3e562047330feed523018dc5297c9f867ff002e10c30c848ba607e3db313f7dae2d6212034ad1b1ca243afb675fc352304754d99929b0d2a2bfa1d4d660ff7ab8328a2af2ba365663cfa30e292b197f647bb54356c4e527633e5ed3d1506f50509efa6f6eb7d434d3dc47cfab9a7fe2329b004198868ab32505f9e8a709ed2ca6832191856e6fa35ec2feb8d072f0a827403730f724f1153e76814d6ffa08049607dba24c44808658fb5819d2b339b1696f46f234a433a24433eaa9a7ded55d1fec75d70870663947b3913aa28d476b5deb591d8595016fc88140c660fdb9f61f2ab641834bfb77619fcac9c00bbd5e7b2770420b8094bd327def2d036a0a207abf89db3301721019e11b41c9d7c927f54011b8658f124c3425d39f380608e9175e8497c423f4c544991fff6612c402412fb8c34e8df7194b992595ef2e29f49f3acd4cc519cde69870473572249ad864083c52296a9d973c7240ffc0831890d757a6ed36fff37dbcc7ae2fa0fc29546d203662d9a9b19631821e5d7d775b7cc0ae8de25af6b96b773b392f438a2f282942334473d45750c1d6332da00aa40afa6e904ef7f000009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0f2b00173cb6436c032a611d0000000000000000000000000000000000000000000000ca4f561bfea2c0c758d74cece399da6288596aefe532af1c6702699f39fa9439e00f2b005f102b00e44cefb269bcd98d02000000000000000000000000000000000000000000000024d17af112fc88fda603fe5cd46b09a4d70bf56e979592b89a30b1c7944c3dd460102b0067102b0017e5cbda37dc1362000000000000000000000000000000000000000000000000e84102aaada025b85934828444b613f5bdcd9f199447b86c9e1db1ba8cb1b39a68102b006b102b0009f7ef486949b12000000000000000000000000000000000000000000000000079e70174021af70ad6692d649c13a93e01fce94f161caf2df0bd2fd96def06306c102b006d102b0002000200020000000000000000000000000000000000000000000000000000008b17d0eecab9188b9440571c10138832e0277d326327690cea9adc55d009eed4",
            "0x550000001000000055000000550000004100000098cb25c666b59670def1a2592fa1cd13a7e9b3f09a18c2597c6682c0cb25040c41360f829e05684b284508b019c8757b4d5b1853345b39aa0962620ec83193c100",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x01000000f26f046e18ea6c8662a4101c4b276fb018af5ec4008f2395b60d28183b12e2f6",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x75b81bc00",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd03060000002047330feed523018dc5297c9f867ff002e10c30c848ba607e3db313f7dae2d6",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x010000002047330feed523018dc5297c9f867ff002e10c30c848ba607e3db313f7dae2d6",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x1718c72e5",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 36942,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "0000000069834a4aa838316f9c2eb96777761bd9d71ce00ce6004f856088ab8c",
          "block_height": 2822252,
          "block_time": 1719217272,
          "confirmed": true,
        },
        "txid": "4b1494422cedf66799fa4aed57e5e3c62841ba12b79b4095b0d8c54688e4e339",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 63569,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "db4b684848550d6d37f96a0e439e9469382bbf6d45fc14a42566cf364818b5b9",
            "vout": 1,
            "witness": [
              "304502210084eb22abb525dbef0cc2d06a4ea21eb46f8beb92f0610db960563d11fcda3c2902201e7ee9c4e27505d5d2c50908416f3f4347b1a8f80f81399708865a2b820a4bf601",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 26081,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 36942,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "0000000069834a4aa838316f9c2eb96777761bd9d71ce00ce6004f856088ab8c",
          "block_height": 2822252,
          "block_time": 1719217272,
          "confirmed": true,
        },
        "txid": "6974c8248d6c0349422acfedb81494dee5a21b11b36301ddcd3149edf94ee816",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 567191,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "95f45c8834a6d80b1f5cd33f12565406b3b537228f65485044cde68a0517d2f1",
            "vout": 1,
            "witness": [
              "3044022024f73809729b74596a37602cca70b601848bdeafa71a52d896ffa5c00d56321f02204b904011e5e90a65752b25ff0aaccc3ecbccdf6ebace0cbf88ce34c8188ef54c01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 529703,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 26200,
        "locktime": 0,
        "size": 150,
        "status": {
          "block_hash": "0000000069834a4aa838316f9c2eb96777761bd9d71ce00ce6004f856088ab8c",
          "block_height": 2822252,
          "block_time": 1719217272,
          "confirmed": true,
        },
        "txid": "9b524dad1078024d6bc274854857ef2bd7a1db56add2df364574ceda952e36bb",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "5120456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c772",
              "scriptpubkey_address": "tb1pg43j05xe0wzajw99m9qs7f2dp8j0ywtn5pmqkwjcq2en5gyecaeqvxwe7p",
              "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c772",
              "scriptpubkey_type": "v1_p2tr",
              "value": 886678,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "ee126c4030e35fe4d7f79f389c1c64e152c1ae04edb303ec58bbe6ffb2b6272c",
            "vout": 1,
            "witness": [
              "8efa0fa264aabf5a0c450c3f90855e51e1487b6172e73d3f7bf2eb763aec9ae920c3e9960212f7881bce91126285ed39d2b3c1977d6135bcea4ac3cfd5e99aa4",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 860478,
          },
        ],
        "weight": 396,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 28820,
        "locktime": 0,
        "size": 191,
        "status": {
          "block_hash": "00000000466e54c4da003f5d6879823bf1611ce8d5c1e1575fb6a37cfaca5524",
          "block_height": 2822251,
          "block_time": 1719216011,
          "confirmed": true,
        },
        "txid": "41c8c4f7da7c2bda56128465a3c645d2c3117afe3e67845b075a8f1f98d68d69",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014261ff6056c97453e3bea2f162c754b95df816721",
              "scriptpubkey_address": "tb1qyc0lvptvjaznuwl29utzca2tjh0czeepdt63ax",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 261ff6056c97453e3bea2f162c754b95df816721",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546347,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "7afac559c8c6b5449fc7588997bd0126d52ab8702346b057aa150df281ead4e6",
            "vout": 1,
            "witness": [
              "304402207bfc6d3a3a30434f2fc11f206f60c92bb8f4b5e4ddf18becb6ab037f603ca1c502203e86ba0bdbb816159da0349393d67ccccf34ea7b7764a82f690aca69caedda3d01",
              "03a63a7345679d9b573364725275f9f2790cc27382bba101d506dddfbb74d9a86c",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 517527,
          },
        ],
        "weight": 437,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 36942,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "00000000c2b29cb30345a303b75a984ea2662c6eccf13dfb01d4f62a76ca35cf",
          "block_height": 2822232,
          "block_time": 1719201633,
          "confirmed": true,
        },
        "txid": "95f45c8834a6d80b1f5cd33f12565406b3b537228f65485044cde68a0517d2f1",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 604679,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "e9f718f2819ff3727ee0a219663a7e1935041e0d0585a1dc80836c64ef2c7557",
            "vout": 1,
            "witness": [
              "3044022038edcad992a6c4e78a0092393f1314af8dd8d5f4b30fa1e9aeefca96d88ce9c7022070995759469475f67eae1463051115415120e67cd957f7bc860103a405130c5601",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 567191,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 57902,
        "locktime": 0,
        "size": 382,
        "status": {
          "block_hash": "00000000c2b29cb30345a303b75a984ea2662c6eccf13dfb01d4f62a76ca35cf",
          "block_height": 2822232,
          "block_time": 1719201633,
          "confirmed": true,
        },
        "txid": "db4b684848550d6d37f96a0e439e9469382bbf6d45fc14a42566cf364818b5b9",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "bcde41c186e00d9881fda06d3f7c1088e9151c99daeb53e791d13e53f3a81fcc",
            "vout": 0,
            "witness": [
              "3044022010f55c2b62ff86439913512974897961a2cb460581046617dc6a1096507f0ac402205ef2fa3c48b60cdab646142d2f2bbd8c3e40c7f7c31235f8a4819d17c5234f5d01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 120925,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "f6e2123b18280db695238f00c45eaf18b06f274b1c10a462866cea186e046ff2",
            "vout": 3,
            "witness": [
              "304402206dad3adaaa8c7a237903883dfaadeb767853aee2fb7994d90367bffc806f97310220248e8bf08ca20c950179400829120d029fd133d94ba2bb6fc1b9c3bc4108539c01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20047c23cc337ac78379b3b8daef7c572daca48d097b3de7b8cfea8484c7ff8a9c",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 047c23cc337ac78379b3b8daef7c572daca48d097b3de7b8cfea8484c7ff8a9c",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 63569,
          },
        ],
        "weight": 880,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0x5e8d2a517d50fd4bb4d01737a7952a1f1d35c8afc77240695bb569cd7d9d5a1f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x02e658b9d490ed911d22b59dc8f8ca4a868a8e7f77b5c9f2b0d738df989b53cf",
              },
            },
          ],
          "hash": "0x0ac7356169f8f41a4435a474dfb8189eb0337528777df5aee0187533b76a20d7",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x2a5c8fa1ec9f61ad8efa16cb4d95af13fa46583544a495b702f188cde31fe3e4",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x9502f758c",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000b9b5184836cf6625a414fc456dbf2b3869949e430e6af9376d0d554848684bdb",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0xad6f99db6e63b3dadd1939d85c210f834b76bb508731a51ef540680ad17e6af8",
                "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
                "hashType": "data1",
              },
            },
          ],
          "outputsData": [
            "0xa200000010000000190000007e00000005000000646f622f30610000007b22626c6f636b5f6e756d626572223a31333230333531322c2263656c6c5f6964223a31333330333434383439393839393937363030302c22646e61223a223831363161396536636130336130366333323461623637653361306166646535227d20000000c1097c85aa781d2cd3c017dc911eceab94644cfe2dd714ae7f7bbe4b75accb08",
          ],
          "version": "0x0",
          "witnesses": [
            "0xa005000010000000a0050000a00500008c0500008c050000140000001600000018000000c200000000000101a60000000200000002cc1fa8f3533ed191e753ebda991c15e988107c3f6da0fd81980de086c141debc0000000000fffffffff26f046e18ea6c8662a4101c4b276fb018af5ec4008f2395b60d28183b12e2f60300000000ffffffff020000000000000000226a20047c23cc337ac78379b3b8daef7c572daca48d097b3de7b8cfea8484c7ff8a9c51f8000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a020000a201000058102b001a020000000000204f13751bfbf549a7a282d6b0758eacef1f65e479faa665e3c2a8c98300000000ce6c16d5dd863fb7232ccb8d6c40226f71f31e973e0eca9532c03a33aac81db061ef7866ffff001d09b23375d41700000e3f718888f28d683b8fa86fd966663607360769bacfa8dc8f84b79dd445405ca9e499f95c604754eb83708e5955993a003cc544b620b1c196f1884d84ac173f943df6e0dc4b3936c226d8e89a62343670d5e319bff42eb474eae6eae2dc8384f9aae09be4fd74e409a16132e7541a1ab8a54f3b31afb98d8b9f65570dde970416b9b5184836cf6625a414fc456dbf2b3869949e430e6af9376d0d554848684bdb461129fa23a88d1c7b7fca85bc1d7234cd98653ba9a3cbd40652d6e39ee1f51ce4b3f90eedb20fe820064ed1a8cb1b5c1a5c571a3671b2cc5021729bf9cd152786363cfe1ed04601e0ca44585770b47670f8d5dcb9699bffe2e4d46e3874242a13aeb2360cd70239eb399ecb951845645d9c53b12c75f444c38436f6b71d03082afdf3f4ea672587e71e1397f61a2aba6e7d163ee901c18bbb022ebe5d4a8819a3d2fdb1e9b364927d5b4e0df8710346e189c327a8ed0ea1e2d27e0c42654d43549061ca2f59c3107f789d4a719cc183949dc9acff4dffa6f47d06f3a60f901b9149bd88a05bb83070d886752f6b001fd13648901ba7d04dc6dec0def85512230752bb275c41c4d1382baaba8407014dae878311cd16c5fb5f90160d3747c4b1045f7b030009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0f2b00173cb6436c032a611d0000000000000000000000000000000000000000000000ca4f561bfea2c0c758d74cece399da6288596aefe532af1c6702699f39fa9439e00f2b001f102b00779d63229a279e67010000000000000000000000000000000000000000000000f1224c3403bef8cf76f36b316d71d70700c2d9b395ee85782c64b62893c9fdf920102b003f102b003ecaa7b57fb827c40000000000000000000000000000000000000000000000002e6fd6b0c0531fcf03bf3fb0ea71162dc126b70fd96945ba51c48f208ceef5cf40102b004f102b001aeee791da926241000000000000000000000000000000000000000000000000aaadfd0d522dd8c9bed875dfe1bee3236f14bf23c68fda5c339e9817868d984e50102b0057102b000800080008000000000000000000000000000000000000000000000000000000e455fef8c4e7b3049215b2e906848cf344a3ec7c7f2f9a7d01dc08d1262307f2",
            "0x010000ffbd0100000c0000001000000000000000ad01000008000000a5010000080000009d0100001000000030000000500000005490760feb68efb3e3c158660bd86792ad1c4f55c36025dda6c0e5bdc91e483f913ce0ad6f0ec0884cb9427c342c44ba6dcdd5ee559c2f17f3310987187c1cc449010000010000004501000010000000300000008d000000ad6f99db6e63b3dadd1939d85c210f834b76bb508731a51ef540680ad17e6af8000000005900000010000000300000003100000061ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248012400000000000000cc1fa8f3533ed191e753ebda991c15e988107c3f6da0fd81980de086c141debc00000000b400000010000000300000003100000000cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326017f0000007f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000b9b5184836cf6625a414fc456dbf2b3869949e430e6af9376d0d554848684bdb",
          ],
        },
        "inputs": [
          {
            "capacity": "0x9502f9000",
            "lock": {
              "args": "0x00000000cc1fa8f3533ed191e753ebda991c15e988107c3f6da0fd81980de086c141debc",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0xad6f99db6e63b3dadd1939d85c210f834b76bb508731a51ef540680ad17e6af8",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0x9502f758c",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000b9b5184836cf6625a414fc456dbf2b3869949e430e6af9376d0d554848684bdb",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0xad6f99db6e63b3dadd1939d85c210f834b76bb508731a51ef540680ad17e6af8",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 77585,
        "locktime": 0,
        "size": 456,
        "status": {
          "block_hash": "0000000083c9a8c2e365a6fa79e4651fefac8e75b0d682a2a749f5fb1b75134f",
          "block_height": 2822231,
          "block_time": 1719200372,
          "confirmed": true,
        },
        "txid": "f6e2123b18280db695238f00c45eaf18b06f274b1c10a462866cea186e046ff2",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "cb7b66080966215f6a539da2ceeda13404b703392bf68183eba3fe337c5658e0",
            "vout": 1,
            "witness": [
              "304402203008f35616a21cf10508383dc73050eef8ab29a3915a02a14f26f4f906627e59022075057fd2d13c8e4ef69bf84338779e7ab84f67fd148b6e61b34061c1b8b0fefe01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 210510,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "8bd67c75660fa72d7eab38fc5c015afb4d92af9ee5d206a8a7dcda25ececf411",
            "vout": 2,
            "witness": [
              "304402206652ca42c0f7af2e411852bde876e9bf970129722caaf60483bceec00930573002201d2ff4bdf4c160873169c83f3a46352368d9f8769ad9230183154abefab881c601",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a2053b2a56ac5a8b6842e24d0a016736d2e58352025637c71ca49f911f4b263fc7f",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 53b2a56ac5a8b6842e24d0a016736d2e58352025637c71ca49f911f4b263fc7f",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_type": "v1_p2tr",
            "value": 12000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 120925,
          },
        ],
        "weight": 1176,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "depGroup",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xe5dee3c600f52db9b2cac7e493d7b394b3006934311304f49eddc2e72e575ccb",
              },
            },
          ],
          "hash": "0x0f01520ecb33492cdcf46cbf61dbe0990a5a576432e1da8404a5b64bceb4fd51",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x1",
                "txHash": "0xd8bc498c3d6bd8e1c483f19473b34dd5e5d5928ca9b6dccb2497c2ac8e3fae3b",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0x95",
                "txHash": "0x52f7e48dbd24d9e97a3cec32ef638f277c112af0f012916b1ef4c54bf4c83a0d",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000f26f046e18ea6c8662a4101c4b276fb018af5ec4008f2395b60d28183b12e2f6",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x01000000f26f046e18ea6c8662a4101c4b276fb018af5ec4008f2395b60d28183b12e2f6",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x1718c7247",
              "lock": {
                "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type",
              },
              "type": null,
            },
          ],
          "outputsData": [
            "0x00e1f505000000000000000000000000",
            "0x00e9a435000000000000000000000000",
            "0x",
          ],
          "version": "0x0",
          "witnesses": [
            "0x7a060000100000007a0600007a06000066060000660600001400000016000000180000000c01000000000102f00000000200000002e058567c33fea3eb8381f62b3903b70434a1edcea29d536a5f21660908667bcb0100000000ffffffff11f4ecec25dadca7a806d2e59eaf924dfb5a015cfc38ab7e2da70f66757cd68b0200000000ffffffff040000000000000000226a2053b2a56ac5a8b6842e24d0a016736d2e58352025637c71ca49f911f4b263fc7f2202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67be02e000000000000225120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d15dd8010000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000560500005605000014000000180000001c0000003a0200009201000057102b001a02000000000020cd65f350fad585ea412a502ec9bf6fc0a759d44404cd6740e98f02fd00000000159bf9bbad78d14a5db1b8d35c209041b5e38ecff5547aff6f936a368d5f543d74ea7866ffff001d82a7eeb77e1900000ecfc0c7664f0f49820b5340139fe5e17e8e60ea8f4f58e8a598255f70eb2f58c0174f862fefbfbc85fc71a28530685f06b7db6b7b07c3177ccbebdcd78addcbd8686222d6bed94a3fa5d411d897fa71647e0ae636584db1cbed8c6c979b9a126d7da1c1bde9167cc8961e54f16dda1811eff15aab09d859308f46e4c449b8bbbef26f046e18ea6c8662a4101c4b276fb018af5ec4008f2395b60d28183b12e2f65387800e258569755cd0a63a2511d460a857e5ec3fc4d384be18987cd9577521eccf2d8ebde3c7031bf8a36da8905a47edef250a049ac7c82472171fa9573016190b46018a99e9dab381d6f8abc3f2f8fddac6ad618ab7abeaf57a31b92b5c3f7d159e99e21cac474d3bdb6c5117cf75737db49b3e5d05c128bbfab466af43bccba6506d12bdf2f1ab5a1ecd6143a6e95b8cb424cb99edea3a7a96c30d474d9b029c793fa6ab0a059efd7c6b8c4c04aa8b2595ab54618b9e0be73ec71d8a5a818ebe35db1b031525b3d2ad30a9c43333379b69db0c021ca22d6ae48ebf295b75613386fa602d7b74bf0bc9c3ab28539d9f0152389ecabf5bea80bf322b2b7e72b8d2bdbafa610df0cd15ae03f0fdcf50d325f3ee4680a9e25769f27a1dccfcb2045f7703000b000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0f2b00173cb6436c032a611d0000000000000000000000000000000000000000000000ca4f561bfea2c0c758d74cece399da6288596aefe532af1c6702699f39fa9439e00f2b001f102b00779d63229a279e67010000000000000000000000000000000000000000000000f1224c3403bef8cf76f36b316d71d70700c2d9b395ee85782c64b62893c9fdf920102b003f102b003ecaa7b57fb827c40000000000000000000000000000000000000000000000002e6fd6b0c0531fcf03bf3fb0ea71162dc126b70fd96945ba51c48f208ceef5cf40102b004f102b001aeee791da926241000000000000000000000000000000000000000000000000aaadfd0d522dd8c9bed875dfe1bee3236f14bf23c68fda5c339e9817868d984e56102b0056102b000100010001000000000000000000000000000000000000000000000000000000cd65f350fad585ea412a502ec9bf6fc0a759d44404cd6740e98f02fd0000000054102b0055102b0002000200020000000000000000000000000000000000000000000000000000007c23ce06b35e1018f5e1bf43dc6df9bb030770117d7a9bc5fca8223ffea501c050102b0053102b000400040004000000000000000000000000000000000000000000000000000000974fbddf41974dba95aa86cf76a877699969d0c560f6cc1a75d2dc61f9772930",
            "0x55000000100000005500000055000000410000003d01b62c431fa73238751d27e869a757a9ef54ccfdc19c1fc091c3677e7e394204112a52b61799dd79730ea3b7a29d404fab94e0daabda503b3917d06a06a44800",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x01000000e058567c33fea3eb8381f62b3903b70434a1edcea29d536a5f21660908667bcb",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x75b81bc00",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000f26f046e18ea6c8662a4101c4b276fb018af5ec4008f2395b60d28183b12e2f6",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x01000000f26f046e18ea6c8662a4101c4b276fb018af5ec4008f2395b60d28183b12e2f6",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x1718c7247",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 37083,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "0000000083c9a8c2e365a6fa79e4651fefac8e75b0d682a2a749f5fb1b75134f",
          "block_height": 2822231,
          "block_time": 1719200372,
          "confirmed": true,
        },
        "txid": "e9f718f2819ff3727ee0a219663a7e1935041e0d0585a1dc80836c64ef2c7557",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 642308,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "afb19caf6cae2adabe64980a8deb2de734eaf7167684724024d29f260d238e12",
            "vout": 3,
            "witness": [
              "30440220614795b12fbb707d78c06091bdcf4d4d1ee2d8020b2350473653d72212d852ee0220672877971343cbf94806d27e45f21f5d88a2ab2dc5349e4928522319977f90ce01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 604679,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 71280,
        "locktime": 0,
        "size": 426,
        "status": {
          "block_hash": "00000000000000058a8c6aa08b259b2a6356549a3c25393ef54f8c13c78670e9",
          "block_height": 2821940,
          "block_time": 1718957136,
          "confirmed": true,
        },
        "txid": "8bd67c75660fa72d7eab38fc5c015afb4d92af9ee5d206a8a7dcda25ececf411",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "afb19caf6cae2adabe64980a8deb2de734eaf7167684724024d29f260d238e12",
            "vout": 2,
            "witness": [
              "3045022100e2862bb3f9a0d1dd290746092cfa6ad484b76356d89ca9bfda2a5717e9f95d9a02201deae2551b603fa3581ed86a243490d5c99ccf6252a7bd8f04084371e4e3c7a401",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 281790,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "bcde41c186e00d9881fda06d3f7c1088e9151c99daeb53e791d13e53f3a81fcc",
            "vout": 1,
            "witness": [
              "3044022011cbb8be5590910068fb41500d8495db7bcd71fca911e8f3d8c0e33f0d7f38ee02206dc09320a8f73698b35c095ef078e70e87ea8713066251566b13a0bea072dbae01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a2032a52071295c4c6768bb737f15687df79d00496d706c323fc929d607221a13ff",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 32a52071295c4c6768bb737f15687df79d00496d706c323fc929d607221a13ff",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "5120456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c772",
            "scriptpubkey_address": "tb1pg43j05xe0wzajw99m9qs7f2dp8j0ywtn5pmqkwjcq2en5gyecaeqvxwe7p",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c772",
            "scriptpubkey_type": "v1_p2tr",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 210510,
          },
        ],
        "weight": 1053,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xce8981a333201d337b5ea42c29d560c44f1135db5a30e6c702c3c22363729ebc",
              },
            },
          ],
          "hash": "0xecf18a6ee5f24fad9df3a7ea980d83fcc744a77c56e0695c67ff104506b25390",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x296978f0952148ab9b4828f875e7cb646cfd2d8cd56702113d50d9cdf7c7dc86",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9e6095a",
              "lock": {
                "args": "0x0100000011f4ecec25dadca7a806d2e59eaf924dfb5a015cfc38ab7e2da70f66757cd68b",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
          ],
          "outputsData": [
            "0x02000000000000000000000000000000",
          ],
          "version": "0x0",
          "witnesses": [
            "0x13060000100000001306000013060000ff050000ff050000140000001600000018000000ed00000000000101d10000000200000002128e230d269fd2244072847616f7ea34e72deb8d0a9864beda2aae6caf9cb1af0200000000ffffffffcc1fa8f3533ed191e753ebda991c15e988107c3f6da0fd81980de086c141debc0100000000ffffffff030000000000000000226a2032a52071295c4c6768bb737f15687df79d00496d706c323fc929d607221a13ff2202000000000000225120456327d0d97b85d938a5d9410f254d09e4f23973a0760b3a5802b33a2099c7724e36030000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b000000000e0500000e05000014000000180000001c0000003a020000d1000000340f2b001a0200000060a1272b9a1bfc2c3e781c92b7c26873f35a3ab1ceb5d34c2b6e382ea3a95600000000302e1c69e07a4836591c1cc8f1f491ce1366e6d6b7ba4ce30fde79d2960d5495503475669ed40719515d14f7de1700000e6b486d5abd63c09c5638c1bf4bb603d0d597d6ef779353ffa1e0c360d2e06966ac97b9f648e04d42370bd14f69b95e236c874a9e1b5457ff5a151d45d694c8ba61212f42af5321850945fdcbb89bf7f1fd91eabd856ca4c30c1f31a9b37c3632f469e4006b47cbaec133633a8c0851dc13fd0ac8ee4572c824a00ef96c15878711f4ecec25dadca7a806d2e59eaf924dfb5a015cfc38ab7e2da70f66757cd68b65b3932694674aa61e47a6330ef922edaa9f37949502c936840295d15ee27c66ab9d5e803587ee56aa4a4900d52d0f34004d85939ae51e7ebad147fc4161aa45ab193ec07022b37d6aad7b55ea45cbca25b3d46d96de4cb0ddc39f8a9f6159d4194a8986a0960af774e40268c1e3ca5b33a1824e751d629556a180314ec2466bf4b2c1d6467db63dc4afc7336a17f01a4cd2ffc5026cfc6ac99e1eb7f69babff127a98474459a86edaad57309a1e81aa9f0052b403b9f0afc3840551189066444355f36cdbb657737182d648bffcd9bd3f18af618aa71d1fdbef628e11744f382501226565f93713f1882ff26c5ab769f22a0c183a87411451f10f73340d6f05f36f59b47d9cc9a1712b7517315bc9a67d71d4eb98ed2a205697496bd0543eaa04bff602000a000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b00df0e2b0091fcba43795115b4030000000000000000000000000000000000000000000000131fda1af5e45a8e0dd691c19d416609869ec7d973b97805b2ae827ca4d32116e00e2b001f0f2b007c944f6bff704f880100000000000000000000000000000000000000000000008c9cb7aafeddc2343caf4e6b48c4566087238dc50b921b4620e428e4e31d03cd200f2b002f0f2b0015f7fb487549b120000000000000000000000000000000000000000000000000dfdf7c0bb1f689d5a95b76da0ebc9349313edc5dbfd18a1ab22478da36a7e585300f2b00330f2b0009f7ef486949b120000000000000000000000000000000000000000000000000ad17626af3d26bf1fca05f599198aaba4cf36f7db9cc6331162dc83dd8a800a3",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9e620d3",
            "lock": {
              "args": "0x02000000128e230d269fd2244072847616f7ea34e72deb8d0a9864beda2aae6caf9cb1af",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9e6095a",
            "lock": {
              "args": "0x0100000011f4ecec25dadca7a806d2e59eaf924dfb5a015cfc38ab7e2da70f66757cd68b",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 74146,
        "locktime": 0,
        "size": 444,
        "status": {
          "block_hash": "00000000249b997629764f03d49522897759937c7fde948c61a8e40669e17f97",
          "block_height": 2821933,
          "block_time": 1718958336,
          "confirmed": true,
        },
        "txid": "afb19caf6cae2adabe64980a8deb2de734eaf7167684724024d29f260d238e12",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 717546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "cb7b66080966215f6a539da2ceeda13404b703392bf68183eba3fe337c5658e0",
            "vout": 3,
            "witness": [
              "304402204c301ab0043bfb5b8a05e00a17cb321df199f78b664d8e35037adc99daa5ff3b02201984f61b83c73a4487a532d972b25860e07a6abfc0941fdd5a10287bdb37862101",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "00149c76450de82d1ce126b3a90846775b60f343631a",
              "scriptpubkey_address": "tb1qn3my2r0g95wwzf4n4yyyva6mvre5xcc6l72uzk",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 9c76450de82d1ce126b3a90846775b60f343631a",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "7bb43ceef1d3f603141ead9fc0852e23c7eb84f868bf866bbc670ed9f4378665",
            "vout": 0,
            "witness": [
              "30440220131db7ee6a75eaf4529023f60233f79dc54a12015a3db7e1da7235fd1fdd2ef2022000b54660fd8fd736b5e64176033991ae14c42cde7c822608bd8e6c98b2c7440583",
              "034941782143891c72ce81dd5ba5c5ab64c6a5e269a86d33010c7a6149dc237a13",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a206eb1ead0366a45ce9926ac5bc7165e32b3efd2ddc642be71b3b483acc83e5f64",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 6eb1ead0366a45ce9926ac5bc7165e32b3efd2ddc642be71b3b483acc83e5f64",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "00149c76450de82d1ce126b3a90846775b60f343631a",
            "scriptpubkey_address": "tb1qn3my2r0g95wwzf4n4yyyva6mvre5xcc6l72uzk",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 9c76450de82d1ce126b3a90846775b60f343631a",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1092,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 642308,
          },
        ],
        "weight": 1128,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x49153359c02d71b50097ca3580f16df9f58456e1336e0d91652d433590f2b163",
              },
            },
          ],
          "hash": "0x296978f0952148ab9b4828f875e7cb646cfd2d8cd56702113d50d9cdf7c7dc86",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0xcfd5296560be20bc424d758206b28e9744e6446079f3b58351e31596c3e6e0fa",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9e620d3",
              "lock": {
                "args": "0x02000000128e230d269fd2244072847616f7ea34e72deb8d0a9864beda2aae6caf9cb1af",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
          ],
          "outputsData": [
            "0x02000000000000000000000000000000",
          ],
          "version": "0x0",
          "witnesses": [
            "0x0d060000100000000d0600000d060000f9050000f90500001400000016000000180000000001000000000101e40000000200000002e058567c33fea3eb8381f62b3903b70434a1edcea29d536a5f21660908667bcb0300000000ffffffff658637f4d90e67bc6b86bf68f884ebc7232e85c09fad1e1403f6d3f1ee3cb47b0000000000ffffffff040000000000000000226a206eb1ead0366a45ce9926ac5bc7165e32b3efd2ddc642be71b3b483acc83e5f6444040000000000001600149c76450de82d1ce126b3a90846775b60f343631a2202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b04cd090000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000f5040000f504000014000000180000001c000000d9010000970200002d0f2b00b90100009b4de420185884460bf1e676a191c406b51d9e41cc6dc590e73085fc03e7efe500000000da15626c16e0afbf86dc42a3284a6718ca935ecd0c7282ad1784338efefaf94800397566ffff001d698cd301870300000b6ee76436d3aa142ec9976e5ca9cec455443ea94c8c7623330d1c9f719d273f7686f8ff6827acf1711b2bec40e74347958f48f9d4921e6ab816dc322b2e473d2daefaf3dfc33a66bcbe9e6ebbca5a038bf3ce88fd84c4224fc91400502eb02582a890cb10aa46516251db23b10bc20407ec325fbe0097bc3d8cc08e851ef9da92295f45274efc91968c02c50badd1a22b38de65c7b096109307e4c15a0cc0033e467b123e705aca56a3dac625721eb66170952da945ab5aa0856506fa2feb16a2128e230d269fd2244072847616f7ea34e72deb8d0a9864beda2aae6caf9cb1af6b3d80c77b58ec2dae1eedfa4430855a22df004ad2e73d27849a2cd24386189df10310b48aeb69fa2e620491356590fc7c60525eb741038aeb65931d3c0a2a41dcfdee9c752b5910528d76cd3c13c1c26e720236cd14cfbe15b4fae7bd1039ea533e9d8188fc6be9272eb0ae2685399f91a3c738c208f2751f9643875d644cee03ed56010b000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b00df0e2b0091fcba43795115b4030000000000000000000000000000000000000000000000131fda1af5e45a8e0dd691c19d416609869ec7d973b97805b2ae827ca4d32116e00e2b001f0f2b007c944f6bff704f880100000000000000000000000000000000000000000000008c9cb7aafeddc2343caf4e6b48c4566087238dc50b921b4620e428e4e31d03cd200f2b00270f2b000800080008000000000000000000000000000000000000000000000000000000a80d66843600912e5f866f319624b926cd2928bcaae0c85a0c534cf2dec810a9280f2b002b0f2b00040004000400000000000000000000000000000000000000000000000000000047be37e8977ffc1127498964c70db38db16adf140890484557a91bafcf5cfef42c0f2b002c0f2b000100010001000000000000000000000000000000000000000000000000000000185884460bf1e676a191c406b51d9e41cc6dc590e73085fc03e7efe500000000",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x00000000658637f4d90e67bc6b86bf68f884ebc7232e85c09fad1e1403f6d3f1ee3cb47b",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9e620d3",
            "lock": {
              "args": "0x02000000128e230d269fd2244072847616f7ea34e72deb8d0a9864beda2aae6caf9cb1af",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 79650,
        "locktime": 0,
        "size": 457,
        "status": {
          "block_hash": "00000000bb90992acbf2db204324c909f18630f1d4c1df68d88135444db72ff8",
          "block_height": 2821923,
          "block_time": 1718946041,
          "confirmed": true,
        },
        "txid": "cb7b66080966215f6a539da2ceeda13404b703392bf68183eba3fe337c5658e0",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "03d0a2a3b2487f04f6e6f83c151473d40e1be0e142c7fb35f85c7560a89fc383",
            "vout": 1,
            "witness": [
              "3044022047349dddeb6d661223ccb6cbf12eed9a1131d4923eaa39dc4f84eb121dc3edfb022064357721251ac68d16f14ef675f1cf901d4145d9506b76a683d7943c6f8aa68801",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 809196,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "1df3be4ff641c8dabb52ddf81a57193eedfef855ff5d90bb757b1d73381346bd",
            "vout": 3,
            "witness": [
              "3045022100da36ff5e92b7bcfd08d7ce9501fcfacaa8489d4b2fe238d8d54e8a20e2688da6022027a961499875e5510d2a2c52aa3a39a8121c0b44706157414d224991dc1a641701",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20863c75f6f8cb37ef47e65ed9e2f773d7eaa6070e35ef4ec35f15320b6c2a61d2",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 863c75f6f8cb37ef47e65ed9e2f773d7eaa6070e35ef4ec35f15320b6c2a61d2",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_type": "v1_p2tr",
            "value": 12000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 717546,
          },
        ],
        "weight": 1177,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "depGroup",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xad4411470da2bc552bbbd46afa9fcbf3e053f29bba9bb9acd0505df950fd4981",
              },
            },
          ],
          "hash": "0xd8bc498c3d6bd8e1c483f19473b34dd5e5d5928ca9b6dccb2497c2ac8e3fae3b",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x1",
                "txHash": "0x7150550d29d327cca878d8d7de64ac145ee14005828eaec5bb2c9a3081b13a07",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0x2b",
                "txHash": "0x52f7e48dbd24d9e97a3cec32ef638f277c112af0f012916b1ef4c54bf4c83a0d",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000e058567c33fea3eb8381f62b3903b70434a1edcea29d536a5f21660908667bcb",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x01000000e058567c33fea3eb8381f62b3903b70434a1edcea29d536a5f21660908667bcb",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x1718c7296",
              "lock": {
                "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type",
              },
              "type": null,
            },
          ],
          "outputsData": [
            "0x00e1f505000000000000000000000000",
            "0x00ca9a3b000000000000000000000000",
            "0x",
          ],
          "version": "0x0",
          "witnesses": [
            "0x320600001000000032060000320600001e0600001e0600001400000016000000180000000c01000000000102f0000000020000000283c39fa860755cf835fbc742e1e01b0ed47314153cf8e6f6047f48b2a3a2d0030100000000ffffffffbd461338731d7b75bb905dff55f8feed3e19571af8dd52bbdac841f64fbef31d0300000000ffffffff040000000000000000226a20863c75f6f8cb37ef47e65ed9e2f773d7eaa6070e35ef4ec35f15320b6c2a61d22202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67be02e000000000000225120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1eaf20a0000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b000000000e0500000e05000014000000180000001c0000003a0200002e010000230f2b001a02000000000020e7a8e4812edb6babf7ea1bc4ba72f938e6f51b9bfaea092993d71bdf000000002f6230e3f0a1a7da98f3dc5984dbc88dae41b4717dc1804af33684e2eea7eca1f9087566ffff001d16ad4508bf1700000e968a7b6f4404f4ad403f5f9aacdaa70112e9e0a2e37930b55d16aa46118bacf9a92ddbbc805453b00158025d624ea86dc72e8b94f6e0eec8aaa5167b0227c52197b191ce46d06e91c738a60543eaa87fffe1a5859bf85b7e82e8cf8f69f27dccbfeeaaecd5182c5f3c3e379c279f6c4b3f4c4daf1a0ba6ecd631741c206d8843161be79033c82cc5e5df0020925e496417418bdab8d9e60292890ddc4274af46e058567c33fea3eb8381f62b3903b70434a1edcea29d536a5f21660908667bcb0a2fb51a0c2f8bda03b653e83516c28a399539e1357c7f5948bb226e0b4ec48d2d9fb86b274a9c71e79636714321dccf7a2e294d50981469342db42276470552b5669e093a48e6a2cf00a49ff0644b46fabb2ed0318e28a29b36e36e46b063067b9e0eaebd2a6f6d432ba883395356fbd64415736c633cf3aa699ca458477ebab5fc3528cfbb37086d3f4fc88a1c7e24a0187d31640247045034cf6b69a3c905bc3231eb273e309ebda8ce0562b58f4e9fa46af32f9cc43c4c7e5a842c2eb8e04c40fe83e32ba590706a62ed2b245adbbfd60debd302a9e49fcaabd140fe4d05a514213503895204c35ce56a3046a000032d71542343ab904f1a6d12b66c8ddd04dfad06000a000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b00df0e2b0091fcba43795115b4030000000000000000000000000000000000000000000000131fda1af5e45a8e0dd691c19d416609869ec7d973b97805b2ae827ca4d32116e00e2b001f0f2b007c944f6bff704f880100000000000000000000000000000000000000000000008c9cb7aafeddc2343caf4e6b48c4566087238dc50b921b4620e428e4e31d03cd220f2b00220f2b000100010001000000000000000000000000000000000000000000000000000000e7a8e4812edb6babf7ea1bc4ba72f938e6f51b9bfaea092993d71bdf00000000200f2b00210f2b000200020002000000000000000000000000000000000000000000000000000000f2f199a67c066e9536ad3fb01c1a1909838b6dd5131a87f8ad440c1129249112",
            "0x5500000010000000550000005500000041000000d221c837e6c0701d90d7c8968e0df91e5b2d98fb13ab70d459dda70b14de6894097b5f7f140b4666a2fb940188bd2cb0a843128682a7d780f596adba287a266b00",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x0100000083c39fa860755cf835fbc742e1e01b0ed47314153cf8e6f6047f48b2a3a2d003",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x75b81bc00",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000e058567c33fea3eb8381f62b3903b70434a1edcea29d536a5f21660908667bcb",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x01000000e058567c33fea3eb8381f62b3903b70434a1edcea29d536a5f21660908667bcb",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x1718c7296",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 38070,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "00000000bb90992acbf2db204324c909f18630f1d4c1df68d88135444db72ff8",
          "block_height": 2821923,
          "block_time": 1718946041,
          "confirmed": true,
        },
        "txid": "bcde41c186e00d9881fda06d3f7c1088e9151c99daeb53e791d13e53f3a81fcc",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 320406,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "4ceea45c565b22dd0477334ecb18d2d07fb7aa4329b6a99ce8e44dd7ebd26bb3",
            "vout": 3,
            "witness": [
              "3045022100c56b06ed4ff2bcca9687cc889ba6a865bae3f18bd8f1dee655ebf5a8212858cd02204d6ac98e6e3a8b769d026e441cb555d74b76ddbd7032119c73a042fb47fccf8f01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 281790,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 79650,
        "locktime": 0,
        "size": 456,
        "status": {
          "block_hash": "0000000011052d6636e804ebab1897a153dbf2d89fb53a5b462457c9d2e79a77",
          "block_height": 2821861,
          "block_time": 1718894123,
          "confirmed": true,
        },
        "txid": "4ceea45c565b22dd0477334ecb18d2d07fb7aa4329b6a99ce8e44dd7ebd26bb3",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "665c750546a1baf364818a7c0306f327a721a4b74865f91292c608a39dcd8bfb",
            "vout": 0,
            "witness": [
              "304402201b3d54eab8142ff46b69c149af038bd6e7b60997afb6546c6a2188442799f76a0220158266501e762d8199706c564e68026451764deeb970203513fcff9ba800d34901",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 412056,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "fbb568ce9e0e6810d0a119b4e478c05d0bea390959cb475c2acd055e94e03b66",
            "vout": 1,
            "witness": [
              "3044022009a1a2ab2ee77dd02681b139cf7ac5d1beaae0429d03d24ea5946e8c56c524f7022003b721a9e49b745143000ed395d0ea9fd8758ae54edf3790467ab219472e0cc001",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20a204e2240c9893bd6809c12c9f5bc4fa488a4a87f6ff8f1e1b7d22626a079716",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 a204e2240c9893bd6809c12c9f5bc4fa488a4a87f6ff8f1e1b7d22626a079716",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_type": "v1_p2tr",
            "value": 12000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 320406,
          },
        ],
        "weight": 1176,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "depGroup",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xd14ff48929d8cf3c46b0550cdcdd7f461c819b23d7c0f4f5420030367ca94c69",
              },
            },
          ],
          "hash": "0x208c8db6f61a442f1f925f787336718e47d7262ace2038da43276ecf56c5694b",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x7fa62e53eb85fafcda43e6d8c4ae34d1e3edb5bb353802dcd44fcbde3820cd77",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0xf",
                "txHash": "0x52f7e48dbd24d9e97a3cec32ef638f277c112af0f012916b1ef4c54bf4c83a0d",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000b36bd2ebd74de4e89ca9b62943aab77fd0d218cb4e337704dd225b565ca4ee4c",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x1e98a341f65a881e813211d8f76db7e08af6b9fdeded6abdff03377ea3eb76ca",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x01000000b36bd2ebd74de4e89ca9b62943aab77fd0d218cb4e337704dd225b565ca4ee4c",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x1e98a341f65a881e813211d8f76db7e08af6b9fdeded6abdff03377ea3eb76ca",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x1718c72e5",
              "lock": {
                "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type",
              },
              "type": null,
            },
          ],
          "outputsData": [
            "0x00e1f505000000000000000000000000",
            "0x00e1f505000000000000000000000000",
            "0x",
          ],
          "version": "0x0",
          "witnesses": [
            "0xea05000010000000ea050000ea050000d6050000d60500001400000016000000180000000c01000000000102f00000000200000002fb8bcd9da308c69212f96548b7a421a727f306037c8a8164f3baa14605755c660000000000ffffffff663be0945e05cd2a5c47cb590939ea0b5dc078e4b419a1d010680e9ece68b5fb0100000000ffffffff040000000000000000226a20a204e2240c9893bd6809c12c9f5bc4fa488a4a87f6ff8f1e1b7d22626a0797162202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67be02e000000000000225120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d196e3040000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a02000002020000e50e2b001a0200000000002008b643b0e64197ebe267ee037b7fa8113ba2f2b5ca982791868c4f5e00000000365d725f251ccf481994dcf04853cd3518cf5cb98f60ce5816730b6c53b1d3332b3e7466ffff001dcfad7a78b71700000ecb4e6a3b036692299ab7643fef6a72392bafde62f3288095bb2092079bf33022d4db98ff09bd13546625071f4b70cd25ecf72261756bf4c8f42a1e945de1a16bb36bd2ebd74de4e89ca9b62943aab77fd0d218cb4e337704dd225b565ca4ee4c3d0bb4edfcdfc5d78ae457fb445a938d7f1d6047f130899c7377ed9bb8e5d71b2da3b22a7b3b4ee4d3ba629b820c3149bfbf08dad126614e560f5f1bb15864074bc87ee723ef60bd13dd6e401ffa9794c1170805c3fc25a142e18643831589ee48da83f38a2d7863d1d4e8e46f657c9b337b5ed2dc1d08423b410bda99c951a27d5242f0298b26ae5562e5d2d619b57a1273677f8c11c045853174fdf07bf4db3757a780eb1a9b4c10354737aace014ee716866899aa20294dcceb9ca2aec61885d797f72aa8e6439881da3d37e9bc22e1ce11afe9b640f0d4ba57fc619952401846841c38e4fb2d11bdf06437277616d1d974e88dd2933470db01585b3fc07e29a3b3b7d66dd3565d0e94cbb37caab157ae824924ef6b9f6ef1854d28378e3668b07bfc1a335634555b9d90a7bff9c575a50cac606882d99d0295e3a85b260610962b03ca3d457f5ebed7582cd4284f55eae1d58b791aa0606a7cb1a29fdc0f04efdf000009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b00df0e2b0091fcba43795115b4030000000000000000000000000000000000000000000000131fda1af5e45a8e0dd691c19d416609869ec7d973b97805b2ae827ca4d32116e00e2b00e30e2b0009f7ef486949b120000000000000000000000000000000000000000000000000b60d74d5269a2515f7438b032afd9d84ffdeaf356022963df0ffcdcbd254ef27e40e2b00e40e2b00010001000100000000000000000000000000000000000000000000000000000008b643b0e64197ebe267ee037b7fa8113ba2f2b5ca982791868c4f5e00000000",
            "0x5500000010000000550000005500000041000000b5fe71cd131bceda8a4589c7216fa814e562348eccac4a02028f3c44a37ae684706f1a48dde43ba9a23ebebd0e8a1f94c7ec4df4ce7c54e8bd17db0aa5a9acfc01",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x00000000fb8bcd9da308c69212f96548b7a421a727f306037c8a8164f3baa14605755c66",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x1e98a341f65a881e813211d8f76db7e08af6b9fdeded6abdff03377ea3eb76ca",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x75b81bc00",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000b36bd2ebd74de4e89ca9b62943aab77fd0d218cb4e337704dd225b565ca4ee4c",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x1e98a341f65a881e813211d8f76db7e08af6b9fdeded6abdff03377ea3eb76ca",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x01000000b36bd2ebd74de4e89ca9b62943aab77fd0d218cb4e337704dd225b565ca4ee4c",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x1e98a341f65a881e813211d8f76db7e08af6b9fdeded6abdff03377ea3eb76ca",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x1718c72e5",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 98010,
        "locktime": 0,
        "size": 605,
        "status": {
          "block_hash": "00000000000000044c78e4590a913067ad14b38e23c0140364529192193cdb4d",
          "block_height": 2821851,
          "block_time": 1718877901,
          "confirmed": true,
        },
        "txid": "1df3be4ff641c8dabb52ddf81a57193eedfef855ff5d90bb757b1d73381346bd",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "9c6882b24f8d856f8f16c4f20775f2ce1c42bb88881567ce5d84cd0951a18e0b",
            "vout": 2,
            "witness": [
              "3044022057340d900d15ccab889a5f22e37dc1621a4d24c1f5b2c53f46cbecd9f243fade02205780e3bc4da86a1238cb8f1f5aafe7f6a3cc41e15d28ea472fa8a36709b6cb3801",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 3295,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "7d7dbc412104882732fa9a59a2cfa055abd2232bd2ece37ce8f751b2eb510b85",
            "vout": 1,
            "witness": [
              "3044022061ba2241714ed9f49a2bbefd7692f34dec973233a8b476f6a2b9c946faabc48802202aa2f282f23c62569f61609e61a5ab7fb4fef30dd9459e1b5c9d2bf5437a0d1301",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 915911,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "665c750546a1baf364818a7c0306f327a721a4b74865f91292c608a39dcd8bfb",
            "vout": 1,
            "witness": [
              "3045022100b687ab50daac7c9d8a483071c8aad45f102abe38af51c55e7947134e28bfb294022055be486578d093869a6192532a16d3c6f2a2a6249897f2df9aece45caa571f3c01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a2055ab80e171643106b1161fdefbecce9c408fd4af0ea7a22a03bca372379a7a4d",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 55ab80e171643106b1161fdefbecce9c408fd4af0ea7a22a03bca372379a7a4d",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_type": "v1_p2tr",
            "value": 12000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 809196,
          },
        ],
        "weight": 1448,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "depGroup",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x2392b9fb776e99ed6ffc0130ca0777975a4ee9a58e9be6f70b9b97ee75ce6c14",
              },
            },
          ],
          "hash": "0x79c9467a08cca6ec8b442ef7dc81cc7ec40e4960ffcd3e740d62a4231bce915a",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x1",
                "txHash": "0x2533771e313bafd16a0d70a34d5725140540baa67499ebb78c489af8f1e3fbcb",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0xc",
                "txHash": "0x52f7e48dbd24d9e97a3cec32ef638f277c112af0f012916b1ef4c54bf4c83a0d",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000bd461338731d7b75bb905dff55f8feed3e19571af8dd52bbdac841f64fbef31d",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x01000000bd461338731d7b75bb905dff55f8feed3e19571af8dd52bbdac841f64fbef31d",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x1718c717b",
              "lock": {
                "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type",
              },
              "type": null,
            },
          ],
          "outputsData": [
            "0x00a3e111000000000000000000000000",
            "0x002f6859000000000000000000000000",
            "0x",
          ],
          "version": "0x0",
          "witnesses": [
            "0x330700001000000033070000330700001f0700001f07000014000000160000001800000035010000000001021901000002000000030b8ea15109cd845dce67158888bb421ccef27507f2c4168f6f858d4fb282689c0200000000ffffffff850b51ebb251f7e87ce3ecd22b23d2ab55a0cfa2599afa322788042141bc7d7d0100000000fffffffffb8bcd9da308c69212f96548b7a421a727f306037c8a8164f3baa14605755c660100000000ffffffff040000000000000000226a2055ab80e171643106b1161fdefbecce9c408fd4af0ea7a22a03bca372379a7a4d2202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67be02e000000000000225120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1ec580c0000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000e6050000e605000014000000180000001c0000003a02000012050000db0e2b001a02000000004b228d419ff0d79f2d7709bc07da75ed1d738a69ec51418e11fc3d691b9000000000e8f415de17c7aa164deaf2d0875195e42f47250739c1135444dd0de2cf24985ccdfe73669ed407194619b945061300000e98e02bc3cd709769360459ee6e476cad63f069ceb896e26bb15377d8845ee998dd9c5d02d8cc5ba1fc9fff1621422c9dfc875262391f3fe727924145bb692b1d5134415f6cbd4320d7691f5a82e7ff74064b2244d870e4dc536060b2d5a7ce3b5eb47867eeb4762e9978ca6d7234bb78c95f817280089c7d7c0aff84d50a502abd461338731d7b75bb905dff55f8feed3e19571af8dd52bbdac841f64fbef31d09b275b2554370f371058ba2a3f140a9136cf549671f82e0845dd051957859fbe3b9a3d39e7f1a46d2fad9fa4485bc069aaab4c440a4a4a74d351ef378e5262b72e6a83dbe8584ff8690f9fbf5004c349b0400294672d1f1bce07df35a305113c5743487b02b95e576fae7969e309a256ef49b1b4cfce1abf0d7ca345416b763e7865144452f1e3fcfb33c913bc5bf2d167d8e5fd4f66aea2ff3f0bf9dcdff2f5ff766b07e0eb0ca9f74c0417df2aa029921187e6f40a724970bd1dbf43325673621b45b02ca985e756541ebdcef6dcff303b18e862ca681770a6a56701e34e66d79473295cdd4099a8d1ce3f436eb921c0058ec04545a0ce4b3ec57bb28994f07e534f3ecd21cd630d04897d88ec7e4acec91d4f084c8869ec27ef1671179b804b77703000d000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b005f0e2b00adafcb900f953b2601000000000000000000000000000000000000000000000003c23dfa193370f0eb4f617ca6da2279223c0942008ccc0d3e4efba2d0c27de4600e2b009f0e2b005ecac7b59fb827c4000000000000000000000000000000000000000000000000ad5f208c0ddb1583f22895d2c6131d117b11b9802e6bb89a3c465bd07f198325a00e2b00bf0e2b0048b87f474a4b8a05010000000000000000000000000000000000000000000000c807f649547f0736a0b30df5dfcd0fd5d071700ebe704b63627a41a0d7aed9afc00e2b00cf0e2b001fe5d3da3fdc1362000000000000000000000000000000000000000000000000d2d1e7e30fd66ec7fd1f4e48e280b5a628334096073c664465ed99a3a3645d1dd00e2b00d70e2b000df7f3486d49b120000000000000000000000000000000000000000000000000932372e3c0a237951dbee560389e73318610e9b8f4b8312855a53ffbe03849cdda0e2b00da0e2b0001000100010000000000000000000000000000000000000000000000000000008d419ff0d79f2d7709bc07da75ed1d738a69ec51418e11fc3d691b9000000000d80e2b00d90e2b000200020002000000000000000000000000000000000000000000000000000000d9913d21d6130755e7790b646c34d8599a6927524ea8d4830b229821c3f4da7e",
            "0x55000000100000005500000055000000410000003e0d834abffd875ecc256a751f52d2559d4b9568ce710e609a835cbbb3e19cda612d8baff1957b317163ac394f2f2619689dbdded351228f5e56d6cbd0d11a4401",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x020000000b8ea15109cd845dce67158888bb421ccef27507f2c4168f6f858d4fb282689c",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x75b81bc00",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000bd461338731d7b75bb905dff55f8feed3e19571af8dd52bbdac841f64fbef31d",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x01000000bd461338731d7b75bb905dff55f8feed3e19571af8dd52bbdac841f64fbef31d",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x1718c717b",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 59670,
        "locktime": 0,
        "size": 383,
        "status": {
          "block_hash": "00000000000000044c78e4590a913067ad14b38e23c0140364529192193cdb4d",
          "block_height": 2821851,
          "block_time": 1718877901,
          "confirmed": true,
        },
        "txid": "fbb568ce9e0e6810d0a119b4e478c05d0bea390959cb475c2acd055e94e03b66",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "7d7dbc412104882732fa9a59a2cfa055abd2232bd2ece37ce8f751b2eb510b85",
            "vout": 0,
            "witness": [
              "304402203c84b87ca4010d0f116b72e1cfa9f6a36749fdd3da0fcad599c5cab63255fa01022076b281e76c6cfd4f7bceccf7183f5d372598950ee93c6e115d583d9b6223a06801",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 471180,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "8d1b4b0485e189751c3ff20ce9de29bc87d0a8ed05c352ff9b05b095018cee7a",
            "vout": 0,
            "witness": [
              "3045022100c5ee9ad44cdb81373309b485e60ee471b346dea836a32393e15dea991192b68402200a0455bf0bbab994090bb10392cc4f153c54c65e6d72216512384541ce6db41f01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20957c6f5e6298792860ca29cd3ee404fc230e37da6c6a3de39f44b8f8d9a9a3da",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 957c6f5e6298792860ca29cd3ee404fc230e37da6c6a3de39f44b8f8d9a9a3da",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 412056,
          },
        ],
        "weight": 881,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0x5e8d2a517d50fd4bb4d01737a7952a1f1d35c8afc77240695bb569cd7d9d5a1f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x2392b9fb776e99ed6ffc0130ca0777975a4ee9a58e9be6f70b9b97ee75ce6c14",
              },
            },
          ],
          "hash": "0xdd76d2abf75d02713550b6023ddcdc601d8ff575735966f4a807df47921c9321",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x620655606e54cd6866c96dca745fa974c978e217700cbf01f241d0e78c4ea810",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0xa7a356755",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000663be0945e05cd2a5c47cb590939ea0b5dc078e4b419a1d010680e9ece68b5fb",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x081755ac3fb992ced84ba476ce253b4fecb468d64f9ba76154d92ef12b28fc30",
                "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
                "hashType": "data1",
              },
            },
          ],
          "outputsData": [
            "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
          ],
          "version": "0x0",
          "witnesses": [
            "0xc006000010000000c0060000c0060000ac060000ac060000140000001600000018000000c200000000000101a60000000200000002850b51ebb251f7e87ce3ecd22b23d2ab55a0cfa2599afa322788042141bc7d7d0000000000ffffffff7aee8c0195b0059bff52c305eda8d087bc29dee90cf23f1c7589e185044b1b8d0000000000ffffffff020000000000000000226a20957c6f5e6298792860ca29cd3ee404fc230e37da6c6a3de39f44b8f8d9a9a3da9849060000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000e6050000e605000014000000180000001c0000003a02000020050000db0e2b001a02000000004b228d419ff0d79f2d7709bc07da75ed1d738a69ec51418e11fc3d691b9000000000e8f415de17c7aa164deaf2d0875195e42f47250739c1135444dd0de2cf24985ccdfe73669ed407194619b945061300000e98e02bc3cd709769360459ee6e476cad63f069ceb896e26bb15377d8845ee998dd9c5d02d8cc5ba1fc9fff1621422c9dfc875262391f3fe727924145bb692b1d87b5cdcc4dea794d1baf83058ef0c3df5f872f410e62bf2086e3b51fa0605555663be0945e05cd2a5c47cb590939ea0b5dc078e4b419a1d010680e9ece68b5fbc164b50846875a08880af614c105a1b50e93cc370c0b40bc72dcedb53f183aa6bb63d4a6fcf606ae98eeea3f5c8c77c1ec751e4cdcf062ea1c40be3d2c1692fa6c341c3a210c952b949943ca08a13f17e86f1f81c25e9d1c66e10a09f1cefbf8ca7a3841426e5541f86dabfe7403c9b9040c5c96d64040fac06a12d1ce6077211e2f96855c183c9cb6dc3682d750cb7860473d38894b1e0ed508f3d2f363de57e7865144452f1e3fcfb33c913bc5bf2d167d8e5fd4f66aea2ff3f0bf9dcdff2f5ff766b07e0eb0ca9f74c0417df2aa029921187e6f40a724970bd1dbf43325673621b45b02ca985e756541ebdcef6dcff303b18e862ca681770a6a56701e34e66d79473295cdd4099a8d1ce3f436eb921c0058ec04545a0ce4b3ec57bb28994f07e534f3ecd21cd630d04897d88ec7e4acec91d4f084c8869ec27ef1671179b804b7fb01000d000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b005f0e2b00adafcb900f953b2601000000000000000000000000000000000000000000000003c23dfa193370f0eb4f617ca6da2279223c0942008ccc0d3e4efba2d0c27de4600e2b009f0e2b005ecac7b59fb827c4000000000000000000000000000000000000000000000000ad5f208c0ddb1583f22895d2c6131d117b11b9802e6bb89a3c465bd07f198325a00e2b00bf0e2b0048b87f474a4b8a05010000000000000000000000000000000000000000000000c807f649547f0736a0b30df5dfcd0fd5d071700ebe704b63627a41a0d7aed9afc00e2b00cf0e2b001fe5d3da3fdc1362000000000000000000000000000000000000000000000000d2d1e7e30fd66ec7fd1f4e48e280b5a628334096073c664465ed99a3a3645d1dd00e2b00d70e2b000df7f3486d49b120000000000000000000000000000000000000000000000000932372e3c0a237951dbee560389e73318610e9b8f4b8312855a53ffbe03849cdda0e2b00da0e2b0001000100010000000000000000000000000000000000000000000000000000008d419ff0d79f2d7709bc07da75ed1d738a69ec51418e11fc3d691b9000000000d80e2b00d90e2b000200020002000000000000000000000000000000000000000000000000000000d9913d21d6130755e7790b646c34d8599a6927524ea8d4830b229821c3f4da7e",
            "0x010000ffbd0100000c0000001000000000000000ad01000008000000a5010000080000009d0100001000000030000000500000005557202ef8dee3c23a77e77d276ffd0b574a62dd8ab9fa24f2df77275a0f0f38e2b32995d87f94fd51b7da38d2045f6a64adc586409155a678b6b0f51a82750a49010000010000004501000010000000300000008d000000081755ac3fb992ced84ba476ce253b4fecb468d64f9ba76154d92ef12b28fc30000000005900000010000000300000003100000061ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248012400000000000000850b51ebb251f7e87ce3ecd22b23d2ab55a0cfa2599afa322788042141bc7d7d00000000b400000010000000300000003100000000cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326017f0000007f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000663be0945e05cd2a5c47cb590939ea0b5dc078e4b419a1d010680e9ece68b5fb",
          ],
        },
        "inputs": [
          {
            "capacity": "0xa7a358200",
            "lock": {
              "args": "0x00000000850b51ebb251f7e87ce3ecd22b23d2ab55a0cfa2599afa322788042141bc7d7d",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x081755ac3fb992ced84ba476ce253b4fecb468d64f9ba76154d92ef12b28fc30",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0xa7a356755",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000663be0945e05cd2a5c47cb590939ea0b5dc078e4b419a1d010680e9ece68b5fb",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x081755ac3fb992ced84ba476ce253b4fecb468d64f9ba76154d92ef12b28fc30",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 28820,
        "locktime": 0,
        "size": 192,
        "status": {
          "block_hash": "00000000000000011083e4a1ee505f7e4b9f13183f945e65f8a9bf6872b6f0c3",
          "block_height": 2821835,
          "block_time": 1718862279,
          "confirmed": true,
        },
        "txid": "8d1b4b0485e189751c3ff20ce9de29bc87d0a8ed05c352ff9b05b095018cee7a",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "00148011520beef49668b15704cdef6f24d2b0a824ef",
              "scriptpubkey_address": "tb1qsqg4yzlw7jtx3v2hqnx77mey62c2sf807yrpde",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 8011520beef49668b15704cdef6f24d2b0a824ef",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 500000,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "2a3c6ee79a1e6b5ddffdc346127a7d341959cd85cdce605e66f9aaa9434c129d",
            "vout": 0,
            "witness": [
              "3045022100c3a8cb55aa7be65f5b74074b53c949005d7574a07c80bdff24cec97afc49db8502206bd0cce9e4c9b73a1b11cf49cfb7f541a316eda22c9fcbe5914ced6accf2ca1501",
              "022c549b5610158e675d48ec030b9324e08ac76f24b4293e0753a32e17fef5242d",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 471180,
          },
        ],
        "weight": 438,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 38070,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "0000000000000002aed0ef4f8485f292d8c99d9b7735abdab660bbe500cd9121",
          "block_height": 2821823,
          "block_time": 1718850332,
          "confirmed": true,
        },
        "txid": "665c750546a1baf364818a7c0306f327a721a4b74865f91292c608a39dcd8bfb",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 954527,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "e381866844b0dc184e42f61207c2ea863f2895d14528c13dcf1f2afc2b26a66f",
            "vout": 1,
            "witness": [
              "30450221008e17b76c7cb14350fc8eac82d8fb7a59b1060cb8edcc300615147af78af0da99022060a0cb485f5c075807b611446faf2dcb779a2ddae77c880a8eb17ab971fd114101",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 915911,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 38070,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "0000000000000002aed0ef4f8485f292d8c99d9b7735abdab660bbe500cd9121",
          "block_height": 2821823,
          "block_time": 1718850332,
          "confirmed": true,
        },
        "txid": "7d7dbc412104882732fa9a59a2cfa055abd2232bd2ece37ce8f751b2eb510b85",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 41911,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "2a3c6ee79a1e6b5ddffdc346127a7d341959cd85cdce605e66f9aaa9434c129d",
            "vout": 1,
            "witness": [
              "304402206c9e794012fdd5e6d0e4a19afc7735a86be6048ab80a039b1a7df63ba5d9926402204f48b86ddb02ed4af035719183e9d583211bcf5433a39a12d2d9cab8c6a8f17601",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 3295,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 37083,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "00000000000000040b1a1a679ecc22ed0acc23b12835f29106376efe1e4314ee",
          "block_height": 2821782,
          "block_time": 1718823470,
          "confirmed": true,
        },
        "txid": "2a3c6ee79a1e6b5ddffdc346127a7d341959cd85cdce605e66f9aaa9434c129d",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 578994,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "03d0a2a3b2487f04f6e6f83c151473d40e1be0e142c7fb35f85c7560a89fc383",
            "vout": 3,
            "witness": [
              "304402206aba075d1631990a3576e768d2f642e09ed54d322df721dae1b4ab6cb0de079c0220796ca992cab005c3b17d50b7aeccdc009f97dd45d4d5ccfa46a324ccbd98c9c701",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "00148011520beef49668b15704cdef6f24d2b0a824ef",
            "scriptpubkey_address": "tb1qsqg4yzlw7jtx3v2hqnx77mey62c2sf807yrpde",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 8011520beef49668b15704cdef6f24d2b0a824ef",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 500000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 41911,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 80920,
        "locktime": 0,
        "size": 532,
        "status": {
          "block_hash": "0000000000000001a4eb8cc991e82584b49f85dd563c56e68c07f21e39c7c8f4",
          "block_height": 2821768,
          "block_time": 1718809175,
          "confirmed": true,
        },
        "txid": "e381866844b0dc184e42f61207c2ea863f2895d14528c13dcf1f2afc2b26a66f",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "acfec398fa6a6a72ba012d46ebba08ad96df73ab9ad54c5b5118d46c13f1cd13",
            "vout": 1,
            "witness": [
              "3045022100fde39ece5f667dc04abf7e6025ae0fd025f331cb0df936220b94daf164157829022014d73f87c3ceedff1be5de226cbab943d56af613397fce9c5aafd2936000a1d901",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "684f7edf1e4d43fb7078d0e7d01e545c8d310a67ab121bc140be93c5cbe0206e",
            "vout": 1,
            "witness": [
              "3044022065e33e97ee0f8e2f1b38ded94c7e93eab092c1f92cd930d114628505d32252aa022007a18695cbe28286f1e843547acbc8dcffe5d7d374b62a0c8d4b8feadaee3b6201",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 1034355,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "e061afdb4a5e04332e272fd6db7099fa6f5892fedc9877447566ef84c1d3a0e4",
            "vout": 1,
            "witness": [
              "3045022100aebb323e913e551718ae79e2cd0848585a467799b24a72750be75d1102a02d29022001410ae47273b53a7592eb547fc2c9801070e9640ae6be4d48361e5c0cd14b7a01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20a4a91d0af09dc38047bec37e1e2dbfefda309ff6cf1eff9f05aba5621061f5cb",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 a4a91d0af09dc38047bec37e1e2dbfefda309ff6cf1eff9f05aba5621061f5cb",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 954527,
          },
        ],
        "weight": 1153,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x62aadc3bb29b50c16150f49f3d2b67bdb601e88c687b1693a300451c2b36dfc3",
              },
            },
          ],
          "hash": "0x94319c341a4360b3f78f210579735e169d93fada265b138f04c5ff5da0e455aa",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0xdf4520f7eabe786404895a36a81ec2ccb5225c189fb5a7328658d1096673302f",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x226fc61ce2a19eb2938420b945d81a5ba17dabeff7a8b414c36cb77afcfbdc10",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0xbd3ea30ab",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac011600000000015bc506bf1a48c209d068ae4d68655309ddcf818c060000006fa6262bfc2a1fcf3dc12845d195283f86eac20712f6424e18dcb044688681e3",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
          ],
          "outputsData": [
            "0x00c2eb0b000000000000000000000000",
          ],
          "version": "0x0",
          "witnesses": [
            "0xc905000010000000c9050000c9050000b5050000b5050000140000001600000018000000eb00000000000201cf000000020000000313cdf1136cd418515b4cd59aab73df96ad08baeb462d01ba726a6afa98c3feac0100000000ffffffff6e20e0cbc593be40c11b12ab670a318d5c541ed0e7d07870fb434d1edf7e4f680100000000ffffffffe4a0d3c184ef6675447798dcfe92586ffa9970dbd62f272e33045e4adbaf61e00100000000ffffffff020000000000000000226a20a4a91d0af09dc38047bec37e1e2dbfefda309ff6cf1eff9f05aba5621061f5cb9f900e0000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a020000500a0000880e2b001a0200000000e726ac8436732ae89cbe4222558b0e597e6fa6e88601927139ca3050db66000000003a939d25c2b4e56f26e350ac419b7672cbe413c7af9bc97e0b89f1f4db40c91e57f272669ed407197d5659069a1400000ec10db918511f1f1215cf2f6e2647095811ebf19adc7e1276d596706de7c4723c9ab2adb5cc6f0736e122086811e8a718e15a9819c823de2e35ae49d2e5257b7f168727fc300d8c315a4ad9e7fc35263eb709e0e8a6ecdaac88d90d21eaf0628aadc76adc912e60fe3b8ef98317aa8a9eb4abdc63bbc52d2cd29e9cf4aa6556e56fa6262bfc2a1fcf3dc12845d195283f86eac20712f6424e18dcb044688681e3818aa13c991187a2859861022c265cd4a7d0b15673c53c9aee0a6b33694544689fdce9f70d7e38a0ac7299275628feeca08291dcbea469f9b0599b9e5b0f92089d742c68a36fc8f020c3a15576e90d2c2805bec5daba1d48d8db38a1b69617066568449c46ecef6bebe1a53a62a8d76fc0252926eb92e128d111ec89ea2ad0e126a65125ffa6d399e8ba6944f6033a6952b275339df0668a0d228060da4dc72eef325ca82ce5a5b86969a3aa8decff33b4986db506a9cd628f145dd8e49f75f95bcfc7da7e6d82a89a17391be5853e5f188e00c39b32bba0ae37d206d9211eb41c4ab2411e60d9ed87def22ffbd970e0af64991177c35b7b27b0514926ddf718549727f337389b7693430dc84bb056c583a4d7156fbb0b1147ff5d3418295a6404dbed030009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b005f0e2b00adafcb900f953b2601000000000000000000000000000000000000000000000003c23dfa193370f0eb4f617ca6da2279223c0942008ccc0d3e4efba2d0c27de4600e2b007f0e2b0025f70b498549b120000000000000000000000000000000000000000000000000463463317f917f39c31aca3b0cc8270f1d899fadebbb531941978389f61e0f01800e2b00870e2b0008000800080000000000000000000000000000000000000000000000000000000ce35aa27ddd2835e46603c4d4ef7cdc08eb76e9c52bcb37e2a1a81ebf095c74",
            "0xc905000010000000c9050000c9050000b5050000b5050000140000001600000018000000eb00000000000201cf000000020000000313cdf1136cd418515b4cd59aab73df96ad08baeb462d01ba726a6afa98c3feac0100000000ffffffff6e20e0cbc593be40c11b12ab670a318d5c541ed0e7d07870fb434d1edf7e4f680100000000ffffffffe4a0d3c184ef6675447798dcfe92586ffa9970dbd62f272e33045e4adbaf61e00100000000ffffffff020000000000000000226a20a4a91d0af09dc38047bec37e1e2dbfefda309ff6cf1eff9f05aba5621061f5cb9f900e0000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a020000500a0000880e2b001a0200000000e726ac8436732ae89cbe4222558b0e597e6fa6e88601927139ca3050db66000000003a939d25c2b4e56f26e350ac419b7672cbe413c7af9bc97e0b89f1f4db40c91e57f272669ed407197d5659069a1400000ec10db918511f1f1215cf2f6e2647095811ebf19adc7e1276d596706de7c4723c9ab2adb5cc6f0736e122086811e8a718e15a9819c823de2e35ae49d2e5257b7f168727fc300d8c315a4ad9e7fc35263eb709e0e8a6ecdaac88d90d21eaf0628aadc76adc912e60fe3b8ef98317aa8a9eb4abdc63bbc52d2cd29e9cf4aa6556e56fa6262bfc2a1fcf3dc12845d195283f86eac20712f6424e18dcb044688681e3818aa13c991187a2859861022c265cd4a7d0b15673c53c9aee0a6b33694544689fdce9f70d7e38a0ac7299275628feeca08291dcbea469f9b0599b9e5b0f92089d742c68a36fc8f020c3a15576e90d2c2805bec5daba1d48d8db38a1b69617066568449c46ecef6bebe1a53a62a8d76fc0252926eb92e128d111ec89ea2ad0e126a65125ffa6d399e8ba6944f6033a6952b275339df0668a0d228060da4dc72eef325ca82ce5a5b86969a3aa8decff33b4986db506a9cd628f145dd8e49f75f95bcfc7da7e6d82a89a17391be5853e5f188e00c39b32bba0ae37d206d9211eb41c4ab2411e60d9ed87def22ffbd970e0af64991177c35b7b27b0514926ddf718549727f337389b7693430dc84bb056c583a4d7156fbb0b1147ff5d3418295a6404dbed030009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b005f0e2b00adafcb900f953b2601000000000000000000000000000000000000000000000003c23dfa193370f0eb4f617ca6da2279223c0942008ccc0d3e4efba2d0c27de4600e2b007f0e2b0025f70b498549b120000000000000000000000000000000000000000000000000463463317f917f39c31aca3b0cc8270f1d899fadebbb531941978389f61e0f01800e2b00870e2b0008000800080000000000000000000000000000000000000000000000000000000ce35aa27ddd2835e46603c4d4ef7cdc08eb76e9c52bcb37e2a1a81ebf095c74",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f5203e",
            "lock": {
              "args": "0x0100000013cdf1136cd418515b4cd59aab73df96ad08baeb462d01ba726a6afa98c3feac",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x010000006e20e0cbc593be40c11b12ab670a318d5c541ed0e7d07870fb434d1edf7e4f68",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0xbd3ea30ab",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac011600000000015bc506bf1a48c209d068ae4d68655309ddcf818c060000006fa6262bfc2a1fcf3dc12845d195283f86eac20712f6424e18dcb044688681e3",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 67847,
        "locktime": 0,
        "size": 383,
        "status": {
          "block_hash": "0000000000000006a13e08f6d958b854cf1ad86be8862244e3f89964c3780525",
          "block_height": 2821682,
          "block_time": 1718714304,
          "confirmed": true,
        },
        "txid": "e061afdb4a5e04332e272fd6db7099fa6f5892fedc9877447566ef84c1d3a0e4",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "2f785b55bd57eca60616eda29f181550941b3387b1e41855ff137442d677734c",
            "vout": 0,
            "witness": [
              "304402200d6ef09a5d76b8258d3737b39aa5b141c744d0068ce5797d393d5befef727525022045a1ffdd44f81ce13e55765196064e1774b6e2280925d2e8576a940a92fa370301",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 1101656,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "92b3f696c2ac610393fcae22fcc0392b847307517f4c643fe468d4d49d91b8d1",
            "vout": 1,
            "witness": [
              "3045022100862b69d23238400a3f12b6ed634b238dd3efc4f423950fa5d0df3d6224bd2ed20220045bce569a7efbb85a4774fc96ea2a68bd7e4d82a10ef6e1fda9d84678e490bf01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a2055163a7891e4e573537e2c69304910677fb1d588ef645152eda35b7172e0ee1e",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 55163a7891e4e573537e2c69304910677fb1d588ef645152eda35b7172e0ee1e",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1034355,
          },
        ],
        "weight": 881,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0x5e8d2a517d50fd4bb4d01737a7952a1f1d35c8afc77240695bb569cd7d9d5a1f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x5fc3b2217f642041a654e417064e480617af7d05d433662dcf4539576bb1ee93",
              },
            },
          ],
          "hash": "0xe226f4e84c1dbe8711352b1fcb11554500dc64efc20acb827954695e5fa4ea33",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x18e0cb3d4d531ae2a255ea4e0fab0d8cda2885b7bc094ddf9e18efb4bc86cc1e",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x9502f758c",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac011600000000015c5323927c21b0d2595e38e736d324cca4cf789b06000000e4a0d3c184ef6675447798dcfe92586ffa9970dbd62f272e33045e4adbaf61e0",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0xf9b4d0922dc91106328b93bcda3eae2ccc63f60b8120e4a827c66c8521a6608b",
                "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
                "hashType": "data1",
              },
            },
          ],
          "outputsData": [
            "0xa200000010000000190000007e00000005000000646f622f30610000007b22626c6f636b5f6e756d626572223a31333230333530382c2263656c6c5f6964223a31343836363738383638333430393935393030302c22646e61223a223366316562663966306436633562636432313035366432633461393232623838227d20000000c1097c85aa781d2cd3c017dc911eceab94644cfe2dd714ae7f7bbe4b75accb08",
          ],
          "version": "0x0",
          "witnesses": [
            "0xa005000010000000a0050000a00500008c0500008c050000140000001600000018000000c200000000000101a600000002000000024c7377d6427413ff5518e4b187331b945015189fa2ed1606a6ec57bd555b782f0000000000ffffffffd1b8919dd4d468e43f644c7f510773842b39c0fc22aefc930361acc296f6b3920100000000ffffffff020000000000000000226a2055163a7891e4e573537e2c69304910677fb1d588ef645152eda35b7172e0ee1e73c80f0000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b00000000c6040000c604000014000000180000001c0000003a020000be060000320e2b001a020000000016333be2d9e22eb111e53bc5c284a6326e8754b14389855d18615cd6456e0000000052e1f22c1c0f8425cb2bf9ddfb6c9135ab767ab5fb091d15883bd8746440dbe7c07f71669ed407195a9899236d1800000e7642049355eb7838916c241a5daae9fce0f8653da8e51fdfc1bb1ea83566c26fdb62b1f4991d5e6bde3eed78f231145647d62cbddb2cf5f059af9c33c39f42ce694ce86b943a4dc3f82fbfb6d8dca77f2e850262962975ea64ee5a1b9184c0cb43bddedd37dae6e9262a9af54487b301b4a1e641d642274f7b529fe7d2e025e2e9dec6d347aa1f90f56c363f5b0698159ea03fb855097853d47c9c5026f5d00483582e0cadaeb64234082fa06da5144e4a67cd201341f9c850255f0c4b99ef93a79247edfb1d797da3a00bcda7f2ec0ea89a470395570bd073b4ceb460436cac7de907481510a8d94deb268599f7a64def4f1be59deb580cc1d060cdabcfed3ee4a0d3c184ef6675447798dcfe92586ffa9970dbd62f272e33045e4adbaf61e0a0056d3a0d81a43e989f341b25c6900de6c556fdbc7b57a5a12738750dad98545411ce1e155f7c8c4fedc892fe3513ba4dadcafe24b4131105397c08ac4888dd5b2ab68f83e57cafe9f262d9cd419ac34d689dd39c660c61c8e00538e6ea7991a9cbb93b4d32dc96615976f063b7446ed4175626f77a44902dba8492b13a7eae6f036acfd39cad5682cfac3d73da44358a3fc45bc49254608ee08082816de35c04d756350009000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d370283e00d2b001f0e2b0054dcef23d525c582000000000000000000000000000000000000000000000000b0b07747d831c3173868ffb9f38e4a7cbbcacdca0923da6759aac2740a9766e7200e2b002f0e2b0015f7fb487549b120000000000000000000000000000000000000000000000000d901c7b48ff1a9630a83bc90dd4c3fb536dd381e4e11d2ae0ed7ebe17910e3eb300e2b00310e2b000200020002000000000000000000000000000000000000000000000000000000633a9ecaee8d5f33e0a4a5b4045df5235f387e65d1d03570d62c7b6fe5604e9a",
            "0x010000ffbd0100000c0000001000000000000000ad01000008000000a5010000080000009d0100001000000030000000500000007c571d089037b49e0194d2e2ea2a35ee6a4cd47f3080709c6498614fa91ddd92a49af9fca99947a730411d739f4fc7a621328db8ae89fdaba53397f4891a668349010000010000004501000010000000300000008d000000f9b4d0922dc91106328b93bcda3eae2ccc63f60b8120e4a827c66c8521a6608b000000005900000010000000300000003100000061ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c32480124000000000000004c7377d6427413ff5518e4b187331b945015189fa2ed1606a6ec57bd555b782f00000000b400000010000000300000003100000000cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326017f0000007f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac011600000000015c5323927c21b0d2595e38e736d324cca4cf789b06000000e4a0d3c184ef6675447798dcfe92586ffa9970dbd62f272e33045e4adbaf61e0",
          ],
        },
        "inputs": [
          {
            "capacity": "0x9502f9000",
            "lock": {
              "args": "0x000000004c7377d6427413ff5518e4b187331b945015189fa2ed1606a6ec57bd555b782f",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0xf9b4d0922dc91106328b93bcda3eae2ccc63f60b8120e4a827c66c8521a6608b",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0x9502f758c",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac011600000000015c5323927c21b0d2595e38e736d324cca4cf789b06000000e4a0d3c184ef6675447798dcfe92586ffa9970dbd62f272e33045e4adbaf61e0",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0xf9b4d0922dc91106328b93bcda3eae2ccc63f60b8120e4a827c66c8521a6608b",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 47476,
        "locktime": 0,
        "size": 193,
        "status": {
          "block_hash": "00000000000000045a7c60c2b59cfd33978614733aa85a7f4afc70bbce527274",
          "block_height": 2821672,
          "block_time": 1718709499,
          "confirmed": true,
        },
        "txid": "170d5617a688377ad6df85c220dface4f4547ef5e2e5c325f5f70ac2deca11d1",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "51206778612f67ba478fe8033aefa90e522d939e976a3d8e174f7c141be182008709",
              "scriptpubkey_address": "tb1pvauxztm8hfrcl6qr8th6jrjj9kfea9m28k8pwnmuzsd7rqsqsuys8ntuuj",
              "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 6778612f67ba478fe8033aefa90e522d939e976a3d8e174f7c141be182008709",
              "scriptpubkey_type": "v1_p2tr",
              "value": 942170,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "74520c1f43d8994a7ff7901151604fa3939b728f20c280ae7e9f348fd9d5764e",
            "vout": 0,
            "witness": [
              "f0d8e64f729d731ee368ef0857a6a0ecda844502aa226c1e6f3df7bd2f8af5d34a55f780b27270143f9e769e9ef028e2be5258e8efddabc7d0ec1e43cce83f9c",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "51206778612f67ba478fe8033aefa90e522d939e976a3d8e174f7c141be182008709",
            "scriptpubkey_address": "tb1pvauxztm8hfrcl6qr8th6jrjj9kfea9m28k8pwnmuzsd7rqsqsuys8ntuuj",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 6778612f67ba478fe8033aefa90e522d939e976a3d8e174f7c141be182008709",
            "scriptpubkey_type": "v1_p2tr",
            "value": 894148,
          },
        ],
        "weight": 568,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 46812,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "00000000000000045a7c60c2b59cfd33978614733aa85a7f4afc70bbce527274",
          "block_height": 2821672,
          "block_time": 1718709499,
          "confirmed": true,
        },
        "txid": "2f785b55bd57eca60616eda29f181550941b3387b1e41855ff137442d677734c",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "00142da26a98096dc553a64e95eccc02f18a6b5a9542",
              "scriptpubkey_address": "tb1q9k3x4xqfdhz48fjwjhkvcqh33f44492z2yv2ck",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2da26a98096dc553a64e95eccc02f18a6b5a9542",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 1386458,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "dcc0201a66c1e2c77b6f2be8283329fb1d72e24691e884d51f41e4367f1693c6",
            "vout": 0,
            "witness": [
              "3045022100fb64afcfdb47b5193529abc52d57490378afda95ed14ef3ba5af699fc654a4d702206e24c92abbf14d907a95ace7fae38827d604166735bd56abbff4d585378bd20501",
              "0339bb9d28334d77af7693d831ba93027605861fe8c35ae8590cc5c5339fd26703",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "00142da26a98096dc553a64e95eccc02f18a6b5a9542",
            "scriptpubkey_address": "tb1q9k3x4xqfdhz48fjwjhkvcqh33f44492z2yv2ck",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2da26a98096dc553a64e95eccc02f18a6b5a9542",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1339100,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 100300,
        "locktime": 0,
        "size": 457,
        "status": {
          "block_hash": "00000000000000045158e83c0e0ed825542eb2c6bea868ca5d54ae13605ba38a",
          "block_height": 2821662,
          "block_time": 1718703494,
          "confirmed": true,
        },
        "txid": "03d0a2a3b2487f04f6e6f83c151473d40e1be0e142c7fb35f85c7560a89fc383",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "d813bcf584301a72d8311c22540d838c995a3c2b57b7cbf07aaa58a76b35c4fd",
            "vout": 1,
            "witness": [
              "30440220012cf2c12d0db7ba957c2b5c8e7db4be8d6653616ece5c47127616a5d1577a0c022039f3bd4e4b25ecb834dda6b5b867558a2237363181453679f77873c5795a81b001",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 691294,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "f00d8101d43634d037c387ffbd4f3e4bba613751c11ef23b4e0bd4590d6d90f5",
            "vout": 0,
            "witness": [
              "3045022100a878e0eb99215547b69a0cadd103538d2620f7c163bd0259377922166903825b022026d4b26414f915add29ec8ef5bf7126aa4f98d588dbb18bee2b9673614dfada601",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a201649966e603ee1e93d439e4edbf44449549e18a702afb200d9b7a985f998c737",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 1649966e603ee1e93d439e4edbf44449549e18a702afb200d9b7a985f998c737",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "5120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_address": "tb1pu5dmpz9l9lj67w3wakxkmr2uwpgzyjweax7ztvqhq58zxca738gs0l0lk2",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1",
            "scriptpubkey_type": "v1_p2tr",
            "value": 12000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 578994,
          },
        ],
        "weight": 1177,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "depGroup",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x46a727026a7073355c9422e718d09ac55bafd5ec15aaa3de6dd829fce81931fa",
              },
            },
          ],
          "hash": "0x7150550d29d327cca878d8d7de64ac145ee14005828eaec5bb2c9a3081b13a07",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0xbcbd5a6973e468d3b79ab7b790df60bdfe95b11308f944a26d7a267583f5ec6b",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0x372",
                "txHash": "0xc08becbcceb53233d48cb79b77b4aaabed3b8ca53d8924b1059109f9fbdb9757",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0xbd3ea4ed1",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac011600000000015c5323927c21b0d2595e38e736d324cca4cf789b0600000083c39fa860755cf835fbc742e1e01b0ed47314153cf8e6f6047f48b2a3a2d003",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x5e9f53e00",
              "lock": {
                "args": "0x0100000083c39fa860755cf835fbc742e1e01b0ed47314153cf8e6f6047f48b2a3a2d003",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
            {
              "capacity": "0x1718c71f8",
              "lock": {
                "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
                "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                "hashType": "type",
              },
              "type": null,
            },
          ],
          "outputsData": [
            "0x00ca9a3b000000000000000000000000",
            "0x00ab9041000000000000000000000000",
            "0x",
          ],
          "version": "0x0",
          "witnesses": [
            "0xc206000010000000c2060000c2060000ae060000ae0600001400000016000000180000000c01000000000102f00000000200000002fdc4356ba758aa7af0cbb7572b3c5a998c830d54221c31d8721a3084f5bc13d80100000000fffffffff5906d0d59d40b4e3bf21ec1513761ba4b3e4fbdff87c337d03436d401810df00000000000ffffffff040000000000000000226a201649966e603ee1e93d439e4edbf44449549e18a702afb200d9b7a985f998c7372202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67be02e000000000000225120e51bb088bf2fe5af3a2eed8d6d8d5c70502249d9e9bc25b017050e2363be89d1b2d5080000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b000000009e0500009e05000014000000180000001c0000003a020000f70200001e0e2b001a02000000404928dc793ae6d04006b631e9a7992c191cc353fc44cc98a8a6e25ba0418d0000000077d918491070189d05b001bb6a3b56dffb66ac235780089ac8a72b9ca5df1d3f865571669ed407190f053954781500000e980d300b48d4326a9a718bf95bb2a6a08cd8b1990b6d896ed923aa25a283172985216dd22b67784e97f57b91725d38e146431310ff14de39107dec9fb3a8fd1fd6fc18f34306e05403c54642691b636bec4a2f74fd35a454174a383a6adf2f8a783d875411fd089d8d4730dd01e841e6823768dedf2d82a8d2919eda5731b09db80db4be073618a960e1f407e7215a85fe637a3c41c90f5aa84c941c62f45cef0ce1770adbc32e462203aeafcc02ba5fdaa673d9b95f3051f9f534e729ae080125ef5737c9cc9acbb8bfd02d0c5686050e35d09d7da79426cbea2689b3c87bb2b078ec831c9f7bdfff886588095a899c18a6b5426cb8cde2993b9a04e5e4d1fc83c39fa860755cf835fbc742e1e01b0ed47314153cf8e6f6047f48b2a3a2d0037b825b46c425f7c50ffc1b0ff96ee5a94595fc54db5b5256d403f76946a5ba19c990090b4e36ed86eb659e85b467f153ccffb766ef677ca0984d3d600fbd73806f218bd9e87f2b0bad500d2fb3c39aa1587c1a094b284d0282ad160c546f116a1cf320fca1ad6ff30cce9d016bb4003bea46f02b3c8fe77c91394a620c4a6e608c11b3b803ff0b713a9f4f538597fa8aa81fa98571ef5b6317bca3138f813919046fd52a000c000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00df072b00870ecde1f47863f77f0000000000000000000000000000000000000000000000d300ab3836b9ae6b7e2efac3aaf018a418892d62e5019420783d107476c0bafae0072b00df0b2b0014d5c5e8ab77d5391000000000000000000000000000000000000000000000004df8954eb31a4d820673ba3d423fc1e47f83972824e9b3d88785812fc408b1c7e00b2b00df0d2b00aad056b173c18b57040000000000000000000000000000000000000000000000f732324505b1bb19e81eca2bcae7223fe3db1c4a6a20c350effa72f15d3702831f0e2b001f0e2b000100010001000000000000000000000000000000000000000000000000000000c9d22878b047a4c22b940e2a712adcc09bc9983e0d166d9d11f95d56000000001c0e2b001d0e2b000200020002000000000000000000000000000000000000000000000000000000a1cb1598d7ee35eb204c641357f85e76add0a19a04ed2a6a1d928e514c80dd3f180e2b001b0e2b0004000400040000000000000000000000000000000000000000000000000000007d8b6667217e7b03aff0fad0f4868663e0551ae3beef04b907833ceb04ac05c2100e2b00170e2b000800080008000000000000000000000000000000000000000000000000000000fab706662f7d4de3e76591596a7f2f26f7424411485b83e914c4935a45427765000e2b000f0e2b0015f7fb487549b1200000000000000000000000000000000000000000000000009138dfe7e19cd85e5bc7c1a051f4b9693aaff81897fc59a82a00570d75f83354e00d2b00ff0d2b002aeef791ea926241000000000000000000000000000000000000000000000000a5145bfa1bdf7c5cc38d8b73fe0cd3882654236877f0ada87cf95d5ff04f40a5",
            "0x55000000100000005500000055000000410000003bcc2878d27abb6e7bd2a703e4975fa704976afcbb8cbb593f78ccc49ccc92fe7f3af79d1ba44c377510bb1950691c5fa888b9468cda808058ad0aae79b608e700",
          ],
        },
        "inputs": [
          {
            "capacity": "0xbd3ea4ed1",
            "lock": {
              "args": "0x01000000fdc4356ba758aa7af0cbb7572b3c5a998c830d54221c31d8721a3084f5bc13d8",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x75b81bc00",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "outputs": [
          {
            "capacity": "0xbd3ea4ed1",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac011600000000015c5323927c21b0d2595e38e736d324cca4cf789b0600000083c39fa860755cf835fbc742e1e01b0ed47314153cf8e6f6047f48b2a3a2d003",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x0100000083c39fa860755cf835fbc742e1e01b0ed47314153cf8e6f6047f48b2a3a2d003",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x1718c71f8",
            "lock": {
              "args": "0x4bd6033211b760f7cdce59df6ab3133d32cac941",
              "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
              "hashType": "type",
            },
            "type": null,
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 23868,
        "locktime": 0,
        "size": 235,
        "status": {
          "block_hash": "0000000000000004964d471a87adbb53d501517311776610ffd41359e8c3d7a9",
          "block_height": 2818471,
          "block_time": 1716960113,
          "confirmed": true,
        },
        "txid": "92b3f696c2ac610393fcae22fcc0392b847307517f4c643fe468d4d49d91b8d1",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 1625524,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "1d165109e5e5de613aad29a34e7ed9a77169716de45fde7ed0508b1dfba61636",
            "vout": 0,
            "witness": [
              "3045022100fafc6e1b09f07c94cfb8792f12bf073f610fda7022b4016195ca03d034e04824022067ab725feb91a24516b76abdbc750e50a918517297685dcbe1a9401de0c6cbf301",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "512024b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
            "scriptpubkey_address": "tb1pyjckvauud0k53zpw574slye057vjs74afw4acar4l0v2yayx2uxsmpgz73",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 24b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
            "scriptpubkey_type": "v1_p2tr",
            "value": 500000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1101656,
          },
        ],
        "weight": 610,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 15950,
        "locktime": 0,
        "size": 191,
        "status": {
          "block_hash": "0000000000000009f97953c30580cdf297202edbb161f01f006e584bac36665a",
          "block_height": 2818452,
          "block_time": 1716954375,
          "confirmed": true,
        },
        "txid": "f00d8101d43634d037c387ffbd4f3e4bba613751c11ef23b4e0bd4590d6d90f5",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
              "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 707244,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "d813bcf584301a72d8311c22540d838c995a3c2b57b7cbf07aaa58a76b35c4fd",
            "vout": 2,
            "witness": [
              "30440220462e33267c49e0f704f05dc60de6973210b8e7df8bfd26eaaa9239e36ab7489802200dc36417a4dc23de598170c3f6d0ee02fcb392d7cfc37a344e48a99494fd587601",
              "03b89c6262769be17d3430a2884733c441b385ddc21fc38b17daaab6bf0c3f07bb",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 691294,
          },
        ],
        "weight": 437,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 38520,
        "locktime": 0,
        "size": 562,
        "status": {
          "block_hash": "000000000000000382f7b69104546c822e0063ddb5831bdd40ecb83d4c8ca68a",
          "block_height": 2818306,
          "block_time": 1716892587,
          "confirmed": true,
        },
        "txid": "d813bcf584301a72d8311c22540d838c995a3c2b57b7cbf07aaa58a76b35c4fd",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
              "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "7c205eb0b6414227830012ffbd7a473d51b58158bbe937e88d30d60b1cd57e3e",
            "vout": 0,
            "witness": [
              "304402203d9a87c34f1c93588e009293f7fcc6f9bde4305c7c50e4fcf61d3c68c4e5b381022058656b951e4d40c451f01c5c668ce65c6414dcc9bee8dbf820fd38a12864042f01",
              "03b89c6262769be17d3430a2884733c441b385ddc21fc38b17daaab6bf0c3f07bb",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
              "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "2a997dcc87945be04e699aadb6d7b9b2f8b62ac5a601fbad35dbbe13f1db80a9",
            "vout": 0,
            "witness": [
              "3045022100ff7052e07f55ec44fea3636e77b423002c2806ba7111bf3da9043b59c1928c0002205e7bc3c59c8a0af77f5d291ad1d4938c63c7220af59584229b13dfce06d2bbd601",
              "03b89c6262769be17d3430a2884733c441b385ddc21fc38b17daaab6bf0c3f07bb",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
              "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 745218,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "8f6e5088832eb01c12ded6654e02932d77b9153e7aefbdd4066716668a9506e0",
            "vout": 2,
            "witness": [
              "3044022075ee238add900cac6244a2636ccc7e70fb7482fd4d0d88cd3ac11cef2f743be4022016fe8fb3aa2017274db48fa9f261815b1490b0a4c697ccc5a938f6d4bab856bd01",
              "03b89c6262769be17d3430a2884733c441b385ddc21fc38b17daaab6bf0c3f07bb",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20a30ae2f3c88bf301b4ce260fd3fea3072afb059de5e208c192c8cf2ae159d10e",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 a30ae2f3c88bf301b4ce260fd3fea3072afb059de5e208c192c8cf2ae159d10e",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
            "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 707244,
          },
        ],
        "weight": 1276,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xc1874ffacda5e883851359d6232a0a1231b77d7fb5228f05bed2ce0810f01cb0",
              },
            },
          ],
          "hash": "0xbcbd5a6973e468d3b79ab7b790df60bdfe95b11308f944a26d7a267583f5ec6b",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0xf8e7d868a33e136ee4b3adc4dc47c5bf77ad582fbbc72965aa269ad0b2a79fe4",
              },
              "since": "0x0",
            },
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0x6e9f195cb3e793325134261d4db5a6cf616ac5578bf03ed9a8db6283cd99b357",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0xbd3ea4ed1",
              "lock": {
                "args": "0x01000000fdc4356ba758aa7af0cbb7572b3c5a998c830d54221c31d8721a3084f5bc13d8",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
          ],
          "outputsData": [
            "0x00752b7d000000000000000000000000",
          ],
          "version": "0x0",
          "witnesses": [
            "0xa005000010000000a0050000a00500008c0500008c0500001400000016000000180000000a01000000000201ee00000002000000033e7ed51c0bd6308de837e9bb5881b5513d477abdff120083274241b6b05e207c0000000000ffffffffa980dbf113bedb35adfb01a6c52ab6f8b2b9d7b6ad9a694ee05b9487cc7d992a0000000000ffffffffe006958a66166706d4bdef7a3e15b9772d93024e65d6de121cb02e8388506e8f0200000000ffffffff030000000000000000226a20a30ae2f3c88bf301b4ce260fd3fea3072afb059de5e208c192c8cf2ae159d10e2202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67bacca0a0000000000160014525af4851c54af86b6cee28bac44fa75573d9402000000007e0400007e04000014000000180000001c0000003a020000b60d000002012b001a0200000000202030c658372afc47216f11ba2c16e26bca7d0cdf5d90aa54ac09000000000000004cda2b93b5ad6ef929b5728209c4c262bd42148a31f643fde590200fcf55f2a7abb35566ecd410190a96eaeb9e1800000e6c62b334dcd9703f7d047f14ce1f26ed7244b3002bfc0146dc52338f1f2b51c4ba0c367fdc0b46d8fef0296cb0d59fa5777a07b4d7975402f35c4a927b9fe81c9cbd0ba6f7858294ef4e486d2fffe14730a2c3cd8dba34aae2e8aa67ae9af7b414efcf879635ca3b352bebcda8d25df98f7257f90d053246945e4fa612accb18884037589c28a68c693df03501689d4b6fc5792afc1d3ea8935988cc9eba49274ab7b33b232f3d0b26642f0fcbaa2ef22ababaec25055d0cd7c10d43f8e8233e54603a920ab87cf46b54d554e9e20cf31e96a7c3e15eaccf28f996b084d41b707df05b9e890b1eb26388696335918b1baf1aafe71c6af050e0a0afd75edf20d6fdc4356ba758aa7af0cbb7572b3c5a998c830d54221c31d8721a3084f5bc13d8d3ed4d519c30ca9797ac014c922282e28b26725c772fdd764e9bdfc7a0af86943fa311aa89c0c3a8d55082dd41a28039f72e750e7f178857977a925fdd7d71eaac0350e74b212afa50e9bbc2697b2fa0ad4aea2e6a08b53db01c6c3729af90e0c8557542ae7d023b20f714431307743d0c2b8eeadb27cb2edb65bda781dd2947803914a31109d9a5e9e225b847bb56d048d6d9d9049af2ba4e6a3654df3d59ec046bad350008000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00dff72a00aba0e15d795f37bf26000000000000000000000000000000000000000000000029bf93152aef8539cb7dfde2ded3e145d9d3ccf6a096e339e04d4d2ed3df3b88e0f72a00dfff2a006c370369f5f33b6c2b0000000000000000000000000000000000000000000000fe55359d453b655d362dd766e02162648da4f809e63b9890ddb0de61dcdb5071e0ff2a00df002b009c9bf06767ef37b9070000000000000000000000000000000000000000000000a2fab9ee21a6c1b0377bbaadeda52982de46ae5b9e31b5b4e99fc3cfa0d47ab8e0002b00ff002b00706b4cc84663066d01000000000000000000000000000000000000000000000058cfb3aab4e127c6eec8be9cb3b07452418c629a27f2b1f574d00e2581b3c11500012b0001012b009eb305e6ef326b1e000000000000000000000000000000000000000000000000ef56b0307e93a7fbb3782367536ecc1d59288632047ef1c995c622ab1f51397a",
            "0xa005000010000000a0050000a00500008c0500008c0500001400000016000000180000000a01000000000201ee00000002000000033e7ed51c0bd6308de837e9bb5881b5513d477abdff120083274241b6b05e207c0000000000ffffffffa980dbf113bedb35adfb01a6c52ab6f8b2b9d7b6ad9a694ee05b9487cc7d992a0000000000ffffffffe006958a66166706d4bdef7a3e15b9772d93024e65d6de121cb02e8388506e8f0200000000ffffffff030000000000000000226a20a30ae2f3c88bf301b4ce260fd3fea3072afb059de5e208c192c8cf2ae159d10e2202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67bacca0a0000000000160014525af4851c54af86b6cee28bac44fa75573d9402000000007e0400007e04000014000000180000001c0000003a020000b60d000002012b001a0200000000202030c658372afc47216f11ba2c16e26bca7d0cdf5d90aa54ac09000000000000004cda2b93b5ad6ef929b5728209c4c262bd42148a31f643fde590200fcf55f2a7abb35566ecd410190a96eaeb9e1800000e6c62b334dcd9703f7d047f14ce1f26ed7244b3002bfc0146dc52338f1f2b51c4ba0c367fdc0b46d8fef0296cb0d59fa5777a07b4d7975402f35c4a927b9fe81c9cbd0ba6f7858294ef4e486d2fffe14730a2c3cd8dba34aae2e8aa67ae9af7b414efcf879635ca3b352bebcda8d25df98f7257f90d053246945e4fa612accb18884037589c28a68c693df03501689d4b6fc5792afc1d3ea8935988cc9eba49274ab7b33b232f3d0b26642f0fcbaa2ef22ababaec25055d0cd7c10d43f8e8233e54603a920ab87cf46b54d554e9e20cf31e96a7c3e15eaccf28f996b084d41b707df05b9e890b1eb26388696335918b1baf1aafe71c6af050e0a0afd75edf20d6fdc4356ba758aa7af0cbb7572b3c5a998c830d54221c31d8721a3084f5bc13d8d3ed4d519c30ca9797ac014c922282e28b26725c772fdd764e9bdfc7a0af86943fa311aa89c0c3a8d55082dd41a28039f72e750e7f178857977a925fdd7d71eaac0350e74b212afa50e9bbc2697b2fa0ad4aea2e6a08b53db01c6c3729af90e0c8557542ae7d023b20f714431307743d0c2b8eeadb27cb2edb65bda781dd2947803914a31109d9a5e9e225b847bb56d048d6d9d9049af2ba4e6a3654df3d59ec046bad350008000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00dff72a00aba0e15d795f37bf26000000000000000000000000000000000000000000000029bf93152aef8539cb7dfde2ded3e145d9d3ccf6a096e339e04d4d2ed3df3b88e0f72a00dfff2a006c370369f5f33b6c2b0000000000000000000000000000000000000000000000fe55359d453b655d362dd766e02162648da4f809e63b9890ddb0de61dcdb5071e0ff2a00df002b009c9bf06767ef37b9070000000000000000000000000000000000000000000000a2fab9ee21a6c1b0377bbaadeda52982de46ae5b9e31b5b4e99fc3cfa0d47ab8e0002b00ff002b00706b4cc84663066d01000000000000000000000000000000000000000000000058cfb3aab4e127c6eec8be9cb3b07452418c629a27f2b1f574d00e2581b3c11500012b0001012b009eb305e6ef326b1e000000000000000000000000000000000000000000000000ef56b0307e93a7fbb3782367536ecc1d59288632047ef1c995c622ab1f51397a",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x000000003e7ed51c0bd6308de837e9bb5881b5513d477abdff120083274241b6b05e207c",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x00000000a980dbf113bedb35adfb01a6c52ab6f8b2b9d7b6ad9a694ee05b9487cc7d992a",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0xbd3ea4ed1",
            "lock": {
              "args": "0x01000000fdc4356ba758aa7af0cbb7572b3c5a998c830d54221c31d8721a3084f5bc13d8",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x661cfbe2124b3e79e50e505c406be5b2dcf9da15d8654b749ec536fa4c2eaaae",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 12100,
        "locktime": 0,
        "size": 192,
        "status": {
          "block_hash": "000000000000000d6187f2ee7db1dd4252a62f286b812ee62f06bd2951ad4c8a",
          "block_height": 2818226,
          "block_time": 1716875569,
          "confirmed": true,
        },
        "txid": "1d165109e5e5de613aad29a34e7ed9a77169716de45fde7ed0508b1dfba61636",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "00142386bbfe6d8651821a6fb43dca4f6f4b89cf1548",
              "scriptpubkey_address": "tb1qywrthlndsegcyxn0ks7u5nm0fwyu792gwlzy88",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2386bbfe6d8651821a6fb43dca4f6f4b89cf1548",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 1637624,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "ee5015e6a8af50d0bc0279a7305875a84a7bfa40ef277b3d1ae04669d080ef2a",
            "vout": 1,
            "witness": [
              "3045022100baaee8a5ef7e3931356edcc39e10babc6185fcd7cbc0a9a5bc4f21b5077c547702203d0a7bef61fd8ff43ff69fa697cf50f3b1744d8c012e2d31360d47bb530c110201",
              "0241f57b732c4e764cce56c6f6526059729924aa462b29b3d05b5d7d681616a4c5",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1625524,
          },
        ],
        "weight": 438,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 12100,
        "locktime": 0,
        "size": 191,
        "status": {
          "block_hash": "00000000000000018e4716d52839e0b73603c6a1d6b09fda9081a36ea6d87482",
          "block_height": 2818210,
          "block_time": 1716874246,
          "confirmed": true,
        },
        "txid": "e77d544ab9918513fd81e19139685d95741520a69cf47d33fa628c4ef2dd7a4c",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 1673488,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "10961aa2938081a4bfdfa620546ff88602a5eccbffca8e77520b38bc93f9bf0f",
            "vout": 1,
            "witness": [
              "304402207523908f0900dae56097286a95b09ec5c6ddbe26fe660cb7df0a8d4342eba9d60220232e789cb2f1680d292167996da50cfafc7bcff99998a35179635597e5009e1301",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "00142386bbfe6d8651821a6fb43dca4f6f4b89cf1548",
            "scriptpubkey_address": "tb1qywrthlndsegcyxn0ks7u5nm0fwyu792gwlzy88",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2386bbfe6d8651821a6fb43dca4f6f4b89cf1548",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1661388,
          },
        ],
        "weight": 437,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 8568,
        "locktime": 0,
        "size": 235,
        "status": {
          "block_hash": "0000000000000004bd111a4681831ab1fbce603d742e9398e1a1ea504071294b",
          "block_height": 2816905,
          "block_time": 1716349900,
          "confirmed": true,
        },
        "txid": "10961aa2938081a4bfdfa620546ff88602a5eccbffca8e77520b38bc93f9bf0f",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 1982056,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "5683591ffad73e34d2b47ccc9f14fd3029b33a332d33c49f30f38b9b82e4c6a8",
            "vout": 1,
            "witness": [
              "3045022100dcb0014677fd250afbbd71afb7d9945f305419dab3641b9887f5d4fe7db94d3702203b484cc4c641d5bda326df8c206700054914c4e67abf7854432994b47415ffe901",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "51202c5543e80f639c7ced357af40a751f17231756c14aadbfaa5fd1d5c54f960a5c",
            "scriptpubkey_address": "tb1p932586q0vww8emf40t6q5aglzu33w4kpf2kml2jl682u2nukpfwq9eujld",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 2c5543e80f639c7ced357af40a751f17231756c14aadbfaa5fd1d5c54f960a5c",
            "scriptpubkey_type": "v1_p2tr",
            "value": 300000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1673488,
          },
        ],
        "weight": 610,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 12376,
        "locktime": 0,
        "size": 383,
        "status": {
          "block_hash": "000000000000000838d3bf989d702597827cd9830b8bedeaba49a5f2621053fa",
          "block_height": 2816899,
          "block_time": 1716348699,
          "confirmed": true,
        },
        "txid": "5683591ffad73e34d2b47ccc9f14fd3029b33a332d33c49f30f38b9b82e4c6a8",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "00131f7541b4dbefda8d304b23d96b8448aadfdec574b28644749c29a2131830",
            "vout": 1,
            "witness": [
              "3045022100a1165f4ef31c0c7f24d426ae92433e32a2513a192aba883eee4e34d5136737a302206e1e1d7c4d11ff4e6b63d03e1df24979966854a9c00b0fc6821690f2d53db72701",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 1993886,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "079fdd6a855a1f2023f0dba3e33488ec2db57a62631039bc5b259ec8c1254545",
            "vout": 1,
            "witness": [
              "304402205d511ec180c0f5db0ded739442fa86fae378547ecc57a46edad224f4638d0d4702205133b2b399b7d2dd03648573cfc6cc7637488064b5bb1606ed42f8216453748501",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20c27eda9bf8377f9db44696f0fee0dd0edb2ec3d3788e64d61bc5fd71de8d183f",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 c27eda9bf8377f9db44696f0fee0dd0edb2ec3d3788e64d61bc5fd71de8d183f",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1982056,
          },
        ],
        "weight": 881,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0x5e8d2a517d50fd4bb4d01737a7952a1f1d35c8afc77240695bb569cd7d9d5a1f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xdf33e144780ccf715356e118becab962913f9266336993659d310d1b37f609d0",
              },
            },
          ],
          "hash": "0xfa2eb5071be1ffca64297cd30510de1e2751ab2e8ce3d7bff9f7c27fe06d3710",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0xec1125242292fa8cca336c22dd6c400db17c740064c523f506bb0983173fb324",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0xa7a354d72",
              "lock": {
                "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000a8c6e4829b8bf3309fc4332d333ab32930fd149fcc7cb4d2343ed7fa1f598356",
                "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
                "hashType": "type",
              },
              "type": {
                "args": "0x53aa7e6dce52c4f6af8af0425ea63d8e6c7b4651a4197e81b71d7ad2784ef9d6",
                "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
                "hashType": "data1",
              },
            },
          ],
          "outputsData": [
            "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
          ],
          "version": "0x0",
          "witnesses": [
            "0xe805000010000000e8050000e8050000d4050000d4050000140000001600000018000000c200000000000101a60000000200000002301813a2299c744486b274c5dedfaa48846bd9234b308ddaefdbb441751f13000100000000ffffffff454525c1c89e255bbc391063627ab52dec8834e3a3dbf023201f5a856add9f070100000000ffffffff020000000000000000226a20c27eda9bf8377f9db44696f0fee0dd0edb2ec3d3788e64d61bc5fd71de8d183f683e1e0000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b000000000e0500000e05000014000000180000001c0000003a020000da09000083fb2a001a02000000003a200150f9b85aa9ba819a520535fd9770aeee7179920dc7bee84366690600000000c4d9913fcc21929102f936dea32c22285f50d1be6a77a73e2fb20159a4e903651b674d66ecd41019a734cc256e1600000ecc3d4612d6aad2c62228a9072df35260f99054478dd6861f4fdd3b67da381af0d24c1a47d85886f89020c5d428c94d3df4906dbee3d835fddd688ccc314edfe6ba1a08cf4a92757a0bff462c072cebc3b2fae8e9f3bb2fd35fbd9f0ec729a1e6a48a1ad781a8d4ab0ae0c0569a60b57ddccb055e9e31733f5f032bf9f660ba42f4d53d774fd9ce9b61906c70817461396602a1e02925489ba54102fd3d3b206b1cfb833318e5b1d4fa8a155279728e7bb1ac9e3d54cf3cc67e32795da445295e5f91d02d48ed79f45f9c202da82fa38354b127c2d9df0a27a87c18d10c9066d8a8c6e4829b8bf3309fc4332d333ab32930fd149fcc7cb4d2343ed7fa1f598356ac8982fc553bb113e7a976c9258b529f4a8364eef5ceb3ef8500be41f582885fba2edc169976db9947cf4771eb0381d0dc378457329f3c86bfa31158b5a4d74d2e720850222c7934c97dc24fac616fa8d4263603e4e3a7b47765a8b7d7416bc9d3ede25c8ff2ee0e9869f5e3f8c9d3a27986509b921c0e59fa71d675304913f6a4fbfe0346a9b2e3e627e6145c265e4f875666c7175439a6f08aee80f2589320ecc13888361e39ccbbb67563aae32893dbfef11cc1fcdb15234c5f8d0eac167e04bb5a1b000a000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00dff72a00aba0e15d795f37bf26000000000000000000000000000000000000000000000029bf93152aef8539cb7dfde2ded3e145d9d3ccf6a096e339e04d4d2ed3df3b88e0f72a00dff92a00300bf3e8d30691080a00000000000000000000000000000000000000000000004a22768a7aa76c0e464ff0038284f80183c1da584d3567d9a2db0e9f63663e34e0f92a00dffa2a0098789bbd075c96fd0400000000000000000000000000000000000000000000007010d30d7c7bde0b97217737e0920ef784d38284e942848564e1c73fb5910601e0fa2a005ffb2a001a96cfd17ac7008e0200000000000000000000000000000000000000000000001d7e4cf4be9526be4694bad9fed032f24dde00c330149fa0125010302e2f74b460fb2a007ffb2a00fa5b34713c984da7000000000000000000000000000000000000000000000000ded39a85d003ff4ad6987c9ce2a4aa778d02b03ad2ae74ee200fa29a8e70a66382fb2a0082fb2a0001000100010000000000000000000000000000000000000000000000000000000150f9b85aa9ba819a520535fd9770aeee7179920dc7bee8436669060000000080fb2a0081fb2a00020002000200000000000000000000000000000000000000000000000000000026a0b0ca1a5d3dc0a258d98482a8d928cfe5938ab4d5363e6408426c4a61ec8f",
            "0x010000ffbd0100000c0000001000000000000000ad01000008000000a5010000080000009d01000010000000300000005000000062010a89d9b568fa3da5c53175ecbc59702d7307d3ed587473b89c4f476e2b366b9deaebf02bdbdf6864e1815649912171037186aee516b6190f51142889c3c449010000010000004501000010000000300000008d00000053aa7e6dce52c4f6af8af0425ea63d8e6c7b4651a4197e81b71d7ad2784ef9d6000000005900000010000000300000003100000061ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248012400000001000000301813a2299c744486b274c5dedfaa48846bd9234b308ddaefdbb441751f130000000000b400000010000000300000003100000000cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326017f0000007f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000a8c6e4829b8bf3309fc4332d333ab32930fd149fcc7cb4d2343ed7fa1f598356",
          ],
        },
        "inputs": [
          {
            "capacity": "0xa7a35681d",
            "lock": {
              "args": "0x01000000301813a2299c744486b274c5dedfaa48846bd9234b308ddaefdbb441751f1300",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x53aa7e6dce52c4f6af8af0425ea63d8e6c7b4651a4197e81b71d7ad2784ef9d6",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0xa7a354d72",
            "lock": {
              "args": "0x7f000000100000005b0000005f0000004b000000100000003000000031000000d23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac01160000000001e9d0cd4c9daa757cc83863cb45e3f1e039e1fd0306000000a8c6e4829b8bf3309fc4332d333ab32930fd149fcc7cb4d2343ed7fa1f598356",
              "codeHash": "0x00cdf8fab0f8ac638758ebf5ea5e4052b1d71e8a77b9f43139718621f6849326",
              "hashType": "type",
            },
            "type": {
              "args": "0x53aa7e6dce52c4f6af8af0425ea63d8e6c7b4651a4197e81b71d7ad2784ef9d6",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 9945,
        "locktime": 0,
        "size": 235,
        "status": {
          "block_hash": "000000000000000d6888399e9b8b25b722ccf35183b1019fb8d4b9b13d381b1e",
          "block_height": 2816665,
          "block_time": 1716266436,
          "confirmed": true,
        },
        "txid": "079fdd6a855a1f2023f0dba3e33488ec2db57a62631039bc5b259ec8c1254545",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 2303831,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "47c6e77113318cb1b76061b2ff7a659b099a729ffd72de92264f5e0bf6928ced",
            "vout": 1,
            "witness": [
              "3045022100c833c5f2b7747486d6218ccd8804cf4282524d243cfb4a1763acf3dab3a55cad022062c17393e90ede92ec35fb5cc7ca368331bf3d1a923ccfb11ea0ec1bccb5fab501",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "512077e854665964f3af39060b7ff465ddf7faf004c3acbe5602cf46c626f6433a06",
            "scriptpubkey_address": "tb1pwl59gejevne67wgxpdllgewa7la0qpxr4jl9vqk0gmrzdajr8grqqlgc6s",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 77e854665964f3af39060b7ff465ddf7faf004c3acbe5602cf46c626f6433a06",
            "scriptpubkey_type": "v1_p2tr",
            "value": 300000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1993886,
          },
        ],
        "weight": 610,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 9870,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "0000000000000007dd931dacf1c2a409f3c468e9b78c251a76e573e9e01ebdb4",
          "block_height": 2816532,
          "block_time": 1716207222,
          "confirmed": true,
        },
        "txid": "47c6e77113318cb1b76061b2ff7a659b099a729ffd72de92264f5e0bf6928ced",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 3313701,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "c3d49266fbe2b43c708a85d521d56bd0540c050bb240ac7c00844c3e3882e34a",
            "vout": 1,
            "witness": [
              "3045022100efd7617275c53e3755a0352a6b339c6f48579b1189ffac3da860e86e1444d7320220116eca154064e844eabaf4492b07aacf4d3e8a43fc8b40b96f5ea615eef9706d01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014e006833d49802a94320f677d9533485e797aaf4e",
            "scriptpubkey_address": "tb1quqrgx02fsq4fgvs0va7e2v6gteuh4t6wy429m6",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 e006833d49802a94320f677d9533485e797aaf4e",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1000000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 2303831,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 11934,
        "locktime": 0,
        "size": 234,
        "status": {
          "block_hash": "000000000000000381d45eceb7cad601fddf7ac3e4f7c0b9f384182931ce9071",
          "block_height": 2816523,
          "block_time": 1716204797,
          "confirmed": true,
        },
        "txid": "c3d49266fbe2b43c708a85d521d56bd0540c050bb240ac7c00844c3e3882e34a",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 3326181,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "5885684ef9e144ed3eface46d064f409116a0e38c5d912aa02a5e9db61f0637c",
            "vout": 1,
            "witness": [
              "3044022051d89e3bc34b27dea75beb86c66768b4dac80123184f791237c4589ad2a745e502207aad30d8bbfbc6ba6e62515cc085442ce44f774e345ee0f74dce148a267a32f701",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "512024b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
            "scriptpubkey_address": "tb1pyjckvauud0k53zpw574slye057vjs74afw4acar4l0v2yayx2uxsmpgz73",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 24b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
            "scriptpubkey_type": "v1_p2tr",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 3313701,
          },
        ],
        "weight": 609,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 15120,
        "locktime": 0,
        "size": 414,
        "status": {
          "block_hash": "000000000000000381d45eceb7cad601fddf7ac3e4f7c0b9f384182931ce9071",
          "block_height": 2816523,
          "block_time": 1716204797,
          "confirmed": true,
        },
        "txid": "00131f7541b4dbefda8d304b23d96b8448aadfdec574b28644749c29a2131830",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "00143534cc09d6d13c3770d308a66bd9d59f75b73601",
              "scriptpubkey_address": "tb1qx56vczwk6y7rwuxnpznxhkw4na6mwdspg7pst5",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 3534cc09d6d13c3770d308a66bd9d59f75b73601",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "deefc44cfea597a8933bc0c9f49bd01ecc90acfea5a9c6e1ea75449f508c3d72",
            "vout": 0,
            "witness": [
              "304402205610b742adb35e3bdb0120ad9529e66a522ca3cabe1982ebb410f5e8c0fe9b220220479a9c4ff6a534ec0f463e6587f37efe3ae5463e1aee5573a67b07c2e4016aa701",
              "027abb20f66f43b85bdd4faefb0a533e5189d5544ff89e098195c31fbd13eaacd0",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "00143534cc09d6d13c3770d308a66bd9d59f75b73601",
              "scriptpubkey_address": "tb1qx56vczwk6y7rwuxnpznxhkw4na6mwdspg7pst5",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 3534cc09d6d13c3770d308a66bd9d59f75b73601",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 967050,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "d994e4b77955a2397f0f16464c8dda0f185d7917b12f0e46b3760233eccd5f93",
            "vout": 2,
            "witness": [
              "3045022100aead61ed95e2bbdea9ab19f861e10b323cb103b6d120dd7cb59707efb69cbd0f022039aadeabda3f54f694ca5ae85939fb488ec6a4d6d014fa611a5f0f68b53fd77701",
              "027abb20f66f43b85bdd4faefb0a533e5189d5544ff89e098195c31fbd13eaacd0",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a2098ab6178dfd719ec0a63983705ba892cba877b53f395ecb73ca73c7188b7238f",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 98ab6178dfd719ec0a63983705ba892cba877b53f395ecb73ca73c7188b7238f",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "00143534cc09d6d13c3770d308a66bd9d59f75b73601",
            "scriptpubkey_address": "tb1qx56vczwk6y7rwuxnpznxhkw4na6mwdspg7pst5",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 3534cc09d6d13c3770d308a66bd9d59f75b73601",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 951930,
          },
        ],
        "weight": 1005,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0x5e8d2a517d50fd4bb4d01737a7952a1f1d35c8afc77240695bb569cd7d9d5a1f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x9a086fd24eb52ec90f035acc3bf240b55654325d2203b1c11d5e1e8f4f63b243",
              },
            },
          ],
          "hash": "0xec1125242292fa8cca336c22dd6c400db17c740064c523f506bb0983173fb324",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0xe988ad079e803179a0e6f2076581498a59590675d316602a8326b08b560af260",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0xa7a35681d",
              "lock": {
                "args": "0x01000000301813a2299c744486b274c5dedfaa48846bd9234b308ddaefdbb441751f1300",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x53aa7e6dce52c4f6af8af0425ea63d8e6c7b4651a4197e81b71d7ad2784ef9d6",
                "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
                "hashType": "data1",
              },
            },
          ],
          "outputsData": [
            "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
          ],
          "version": "0x0",
          "witnesses": [
            "0x5e050000100000005e0500005e0500004a0500004a050000140000001600000018000000e100000000000101c50000000200000002723d8c509f4475eae1c6a9a5feac90cc1ed09bf4c9c03b93a897a5fe4cc4efde0000000000ffffffff935fcdec330276b3460e2fb117795d180fda8d4c46160f7f39a25579b7e494d90200000000ffffffff030000000000000000226a2098ab6178dfd719ec0a63983705ba892cba877b53f395ecb73ca73c7188b7238f2202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b7a860e00000000001600143534cc09d6d13c3770d308a66bd9d59f75b7360100000000650400006504000014000000180000001c000000d9010000fd0100000bfa2a00b901000000a07130e8f167d66c7e93866b76b0ab6e96be1b18cee2bb478c12d0099df97100000000cf5f1afa01fad3a9cae2d4d73c75497b5055e21a0d2704c6eca9f429331a70c0fd344b66ecd41019a5acb6e5580200000b5a804107db63f7c1d73966cb24dacdaa9002d64d85ea300b39dc675174e379e69cfc440eeac7e499dd738f183b1856442a3b7f61ea07acf6224cb10542995d1c2699d24c9c43c3010a0750f8a846275a2bc1873e009919243568bef12766014fd84ace8d3497afea48ef8e335062e3ff52a69cdcaefb28dbcd52c16299d4b3b7f88834a1e3ebd14128fa10882fa4341f3555248386ca61300e67da9ab1461f465fb72ed7c1fd5c4c03ff7324a4c383d949a91ecb9e63a50df8a09066288b352c965f3c865dfc0e4389a24d45a54203b21339b4bd939849d393dc45d56aef1fc9a18073a3e0d5fb4bd0752ea24362f378f1cf3a987d99bdf95f8a8bab3949d3e4301813a2299c744486b274c5dedfaa48846bd9234b308ddaefdbb441751f1300fbdc417f5dbe00b1fcd967a60e9da0d1cbe92b130f57248a3d46feb774a5e808bdb9efee66cb32b3aaa81b462dc79844d440c63d926202e60a51303ac0f73c3303abaa0509000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00dff72a00aba0e15d795f37bf26000000000000000000000000000000000000000000000029bf93152aef8539cb7dfde2ded3e145d9d3ccf6a096e339e04d4d2ed3df3b88e0f72a00dff92a00300bf3e8d30691080a00000000000000000000000000000000000000000000004a22768a7aa76c0e464ff0038284f80183c1da584d3567d9a2db0e9f63663e34e0f92a00fff92a00c8353664b33183b6000000000000000000000000000000000000000000000000e47b35185c8a99a9735373cdb97bbd26ca0ff706fa78cd0d61a8c8a0683776f400fa2a0007fa2a00a4b30be6f5326b1e00000000000000000000000000000000000000000000000073f15d6408a24eab03571b4db2d15f8606c1ed6f1f6b3fb6e423a4a427e02b510afa2a000afa2a000100010001000000000000000000000000000000000000000000000000000000e8f167d66c7e93866b76b0ab6e96be1b18cee2bb478c12d0099df9710000000008fa2a0009fa2a00d0d903f37899350f000000000000000000000000000000000000000000000000b03652a485cd9b0e94f5bb43e8d43b7916ae8a458b674775d8c23449b7339776",
            "0x010000ff620100000c000000100000000000000052010000080000004a010000080000004201000010000000300000005000000062010a89d9b568fa3da5c53175ecbc59702d7307d3ed587473b89c4f476e2b366b9deaebf02bdbdf6864e1815649912171037186aee516b6190f51142889c3c4ee00000001000000ea00000010000000300000008d00000053aa7e6dce52c4f6af8af0425ea63d8e6c7b4651a4197e81b71d7ad2784ef9d6000000005900000010000000300000003100000061ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248012400000000000000723d8c509f4475eae1c6a9a5feac90cc1ed09bf4c9c03b93a897a5fe4cc4efde000000005900000010000000300000003100000061ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248012400000001000000301813a2299c744486b274c5dedfaa48846bd9234b308ddaefdbb441751f1300",
          ],
        },
        "inputs": [
          {
            "capacity": "0xa7a358200",
            "lock": {
              "args": "0x00000000723d8c509f4475eae1c6a9a5feac90cc1ed09bf4c9c03b93a897a5fe4cc4efde",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x53aa7e6dce52c4f6af8af0425ea63d8e6c7b4651a4197e81b71d7ad2784ef9d6",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0xa7a35681d",
            "lock": {
              "args": "0x01000000301813a2299c744486b274c5dedfaa48846bd9234b308ddaefdbb441751f1300",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x53aa7e6dce52c4f6af8af0425ea63d8e6c7b4651a4197e81b71d7ad2784ef9d6",
              "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
              "hashType": "data1",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 9180,
        "locktime": 0,
        "size": 235,
        "status": {
          "block_hash": "000000000000000719c90725b1401689c793e9fed5199ef42f3a868875e7338d",
          "block_height": 2816520,
          "block_time": 1716203596,
          "confirmed": true,
        },
        "txid": "5885684ef9e144ed3eface46d064f409116a0e38c5d912aa02a5e9db61f0637c",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 4335361,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "d1df18bc34e515c84b90ddc2cdc8868822c22f15ac43fa013d0b1bfb3519a021",
            "vout": 1,
            "witness": [
              "3045022100ba9d4af039f9a30be45f3a7c24d8e88645cbaea2cabb8c5967394bb64f3bc3e2022035c280199cee3bb23152499abebcdc6baec285de3fc9f8a4159e4fd5e749e57c01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "512024b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
            "scriptpubkey_address": "tb1pyjckvauud0k53zpw574slye057vjs74afw4acar4l0v2yayx2uxsmpgz73",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 24b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
            "scriptpubkey_type": "v1_p2tr",
            "value": 1000000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 3326181,
          },
        ],
        "weight": 610,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 15120,
        "locktime": 0,
        "size": 414,
        "status": {
          "block_hash": "000000000000000719c90725b1401689c793e9fed5199ef42f3a868875e7338d",
          "block_height": 2816520,
          "block_time": 1716203596,
          "confirmed": true,
        },
        "txid": "d8a96a13a8d8220abb93035a07bc26a78cca729d74ef58cd10d1199033a9971d",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014b486414ad11c81e97a2149b4cb0f795ab8f878fe",
              "scriptpubkey_address": "tb1qkjryzjk3rjq7j73pfx6vkrmet2u0s7878ry32x",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 b486414ad11c81e97a2149b4cb0f795ab8f878fe",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 546,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "673f754f9d1faa9153e988426a3e76e4634f998cbd00e04adc271a8f5f28740e",
            "vout": 0,
            "witness": [
              "3045022100f419ada7b4b5ccb300a0b7f9d1d20ef1903f3673c9b21d6751da1d608ce8dbe7022021c5aec032d90c49210a793aa2e112c8020e5e50fb9c53559126739eb4cdccc501",
              "03e6bcd9c558403f1f5e6a1bc3293009c5157ce49fb4c4d886eccdc5cb8cf8e47c",
            ],
          },
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014b486414ad11c81e97a2149b4cb0f795ab8f878fe",
              "scriptpubkey_address": "tb1qkjryzjk3rjq7j73pfx6vkrmet2u0s7878ry32x",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 b486414ad11c81e97a2149b4cb0f795ab8f878fe",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 882823,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "48dc4e3a79ac32a1db104fe9c7294243440479227e73a82265d5b421f1939cff",
            "vout": 2,
            "witness": [
              "30440220571d5c804f80a5332039447aab1a5fb0cb42ea16c310aeff0e3773a0663b7bd102202ecba962069324be7e0ff93f5732fdc2a09bb2ac28a058da6ed21de1c2ce4dd001",
              "03e6bcd9c558403f1f5e6a1bc3293009c5157ce49fb4c4d886eccdc5cb8cf8e47c",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "6a20a6cb9ed957691a4f73b587ed0f62ee077921c775c0feed7c0a6ae697ed9ec764",
            "scriptpubkey_asm": "OP_RETURN OP_PUSHBYTES_32 a6cb9ed957691a4f73b587ed0f62ee077921c775c0feed7c0a6ae697ed9ec764",
            "scriptpubkey_type": "op_return",
            "value": 0,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 546,
          },
          {
            "scriptpubkey": "0014b486414ad11c81e97a2149b4cb0f795ab8f878fe",
            "scriptpubkey_address": "tb1qkjryzjk3rjq7j73pfx6vkrmet2u0s7878ry32x",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 b486414ad11c81e97a2149b4cb0f795ab8f878fe",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 867703,
          },
        ],
        "weight": 1005,
      },
      "isRgbpp": true,
      "isomorphicTx": {
        "ckbTx": {
          "cellDeps": [
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x0",
                "txHash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0xf1de59e973b85791ec32debbba08dff80c63197e895eb95d67fc1e9f6b413e00",
              },
            },
            {
              "depType": "code",
              "outPoint": {
                "index": "0x1",
                "txHash": "0x95669dd1b42b6e497cf4edb0cacb9e26ed5df35f68e357de311486662b8f655a",
              },
            },
          ],
          "hash": "0x6ac6578ffcb46f4c43a39a7eadaf2f7844819ca3fc1cb560cf321902022d4415",
          "headerDeps": [],
          "inputs": [
            {
              "previousOutput": {
                "index": "0x0",
                "txHash": "0xcb68f772d76f05461e95d327fefeaf4d818928d53d9d7409bf4bfaf3e9be5b63",
              },
              "since": "0x0",
            },
          ],
          "outputs": [
            {
              "capacity": "0x5e9f52687",
              "lock": {
                "args": "0x010000001d97a9339019d110cd58ef749d72ca8ca726bc075a0393bb0a22d8a8136aa9d8",
                "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
                "hashType": "type",
              },
              "type": {
                "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
                "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
                "hashType": "type",
              },
            },
          ],
          "outputsData": [
            "0x00ca9a3b000000000000000000000000",
          ],
          "version": "0x0",
          "witnesses": [
            "0x2f050000100000002f0500002f0500001b0500001b050000140000001600000018000000e100000000000101c500000002000000020e74285f8f1a27dc4ae000bd8c994f63e4763e6a4288e95391aa1f9d4f753f670000000000ffffffffff9c93f121b4d56522a8737e22790444434229c7e94f10dba132ac793a4edc480200000000ffffffff030000000000000000226a20a6cb9ed957691a4f73b587ed0f62ee077921c775c0feed7c0a6ae697ed9ec7642202000000000000160014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b773d0d0000000000160014b486414ad11c81e97a2149b4cb0f795ab8f878fe00000000360400003604000014000000180000001c0000003a020000b300000008fa2a001a0200000080542fb52eaa810d7e9e483c61e5e3523db71616372edfe21a029cf397dbb000000000dba6aa4653e7bfd9322454b15928110c866befb8a85fa949345932a905b79e6d4c304b66ecd41019a26e25be5a1700000e1af7256af6178c99f9e12c57bd7eb0755f7625a6fada38abe722f3aace19576fd790fe18f37d3f64d01176c6ea0a69d12533d80e255fe120da810eb348e4e6e4ded9cce2af016085e4e4fd9990e4951ae34c72e2e67c573681adb3fb028be1aadfb6153dad4be9038632c5908141c4361926882cc117b60d26c69788431fbeaeffb6e91099a310419b5d1318b7931230e52b643cd8ad3d757fa193a33e8b5a1e1d97a9339019d110cd58ef749d72ca8ca726bc075a0393bb0a22d8a8136aa9d809a6f6f61b866a939983300e1af23ba4b60f0d33a44fcbe007c7be799a1af7b8ca7c8cc4a62874b9dfc1307cef5942bd34a99c666004dfba727b67852e5ac7b354c4088b8d7482a767abc5134a96730e3ddff87c6b12e5c72b385a25273e5a11f4a5065bdf8e677a73a901654ce61378ac9a961f2069c879fe423ca7ea977a2c4f94728dc28b65950dfc6de213cc67ef863d6e81b4e315cb97b70c5ae6d62db11501a72e7a6d7d6db1997b4441e9c9a2ba5790435d1ffbc353c35d092654cbd2acc17b57e3f50235867ab0862a669d012bec0cf1092ff3c75d00e2c03a18ed3a70442c564c8f9b05c8c617136d049e8add4cd11ed96eb12d84bdd1f0d699354604bf75050007000000e0672700df67290069b4d9814579d491670000000000000000000000000000000000000000000000960ec53250c03cf0e5edbacb1c99cb6ffa6eb759604cb8598d51ea47d2993ff5e0672900df672a006b5a4c634c63aee405000000000000000000000000000000000000000000000027b94c903d1fc48132fa8d4c31397a15d128a141cec05daefe0ddfe5c9c7b6b8e0672a00dfe72a007cbc1dc01dc06a7a080000000000000000000000000000000000000000000000e2846a5834b9c17e73cf6f22a688ffc68037bfadcaec09f1ede5980e40300e0ee0e72a00dff72a00aba0e15d795f37bf26000000000000000000000000000000000000000000000029bf93152aef8539cb7dfde2ded3e145d9d3ccf6a096e339e04d4d2ed3df3b88e0f72a00dff92a00300bf3e8d30691080a00000000000000000000000000000000000000000000004a22768a7aa76c0e464ff0038284f80183c1da584d3567d9a2db0e9f63663e34e0f92a00fff92a00c8353664b33183b6000000000000000000000000000000000000000000000000e47b35185c8a99a9735373cdb97bbd26ca0ff706fa78cd0d61a8c8a0683776f400fa2a0007fa2a00a4b30be6f5326b1e00000000000000000000000000000000000000000000000073f15d6408a24eab03571b4db2d15f8606c1ed6f1f6b3fb6e423a4a427e02b51",
          ],
        },
        "inputs": [
          {
            "capacity": "0x5e9f53e00",
            "lock": {
              "args": "0x000000000e74285f8f1a27dc4ae000bd8c994f63e4763e6a4288e95391aa1f9d4f753f67",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "outputs": [
          {
            "capacity": "0x5e9f52687",
            "lock": {
              "args": "0x010000001d97a9339019d110cd58ef749d72ca8ca726bc075a0393bb0a22d8a8136aa9d8",
              "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
              "hashType": "type",
            },
            "type": {
              "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
              "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
              "hashType": "type",
            },
          },
        ],
        "status": {
          "confirmed": true,
        },
      },
    },
    {
      "btcTx": {
        "fee": 10710,
        "locktime": 0,
        "size": 234,
        "status": {
          "block_hash": "000000000000000d8ce61a5211738d37a90c09c1a9b67ee9269e8e69151a3f36",
          "block_height": 2816517,
          "block_time": 1716201194,
          "confirmed": true,
        },
        "txid": "d1df18bc34e515c84b90ddc2cdc8868822c22f15ac43fa013d0b1bfb3519a021",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 4346617,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "abb1d61b86a10c1188c52a1d66565b84c7ebca9236f24d672cbd41beeb1469c3",
            "vout": 1,
            "witness": [
              "304402204002df944838d6d056b45251fb22df22a9ee3379705c6a63786f0c25078a730d022053105d46b4963de9a6a4f3e436a1ed4d864aef5d2deaffa6452dce48bcf2814b01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "512024b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
            "scriptpubkey_address": "tb1pyjckvauud0k53zpw574slye057vjs74afw4acar4l0v2yayx2uxsmpgz73",
            "scriptpubkey_asm": "OP_PUSHNUM_1 OP_PUSHBYTES_32 24b166779c6bed48882ea7ab0f932fa799287abd4babdc7475fbd8a27486570d",
            "scriptpubkey_type": "v1_p2tr",
            "value": 546,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 4335361,
          },
        ],
        "weight": 609,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 7896,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "000000000000000b1d4e24c7bae38e6565bb74b23eb1db84291e80c7cc7e7af5",
          "block_height": 2816472,
          "block_time": 1716171903,
          "confirmed": true,
        },
        "txid": "abb1d61b86a10c1188c52a1d66565b84c7ebca9236f24d672cbd41beeb1469c3",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 5354513,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "cc0732f2f3301b041ca94ee01a16e0f3bb8a10226d8ec7db103d8518afc7ffd8",
            "vout": 1,
            "witness": [
              "30450221009623155b4d7ea4ec1b3a612eb75f922adfbcb60e3de7f89d26865c4cd634386002204dd0b264e27c5a941fbbc09a17aa015bff019959f08d512ec56340837af4abd801",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "00143534cc09d6d13c3770d308a66bd9d59f75b73601",
            "scriptpubkey_address": "tb1qx56vczwk6y7rwuxnpznxhkw4na6mwdspg7pst5",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 3534cc09d6d13c3770d308a66bd9d59f75b73601",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1000000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 4346617,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 9870,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "000000000000000f84409b8e9526becc3fe236fc785e9e3775236f78c1206f33",
          "block_height": 2816007,
          "block_time": 1715947603,
          "confirmed": true,
        },
        "txid": "cc0732f2f3301b041ca94ee01a16e0f3bb8a10226d8ec7db103d8518afc7ffd8",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 6364383,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "dc12d4f3b714a3f6f3a0c9f7caf601b26490b7f225e4c040b051854a25bc9cef",
            "vout": 1,
            "witness": [
              "3045022100fbc305ee1050813c27e2acfd464767a2ab48f4b3a5c629f32926181539ebd68c02200dfaf1ceb9c9fcf2b864d84bc67defef168e468084fa19f10d708a46261281ff01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014525af4851c54af86b6cee28bac44fa75573d9402",
            "scriptpubkey_address": "tb1q2fd0fpgu2jhcddkwu296c386w4tnm9qzp9dazj",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 525af4851c54af86b6cee28bac44fa75573d9402",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1000000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 5354513,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 7896,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "000000000000001872e9c1605894f149301b05bc2e53a52931fc5ebeaf42f301",
          "block_height": 2815933,
          "block_time": 1715921192,
          "confirmed": true,
        },
        "txid": "dc12d4f3b714a3f6f3a0c9f7caf601b26490b7f225e4c040b051854a25bc9cef",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 7372279,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "178b01bae4a5e3694aad5550ee6c2892acd5e9caeea0aa74d71cb0b3fb80e13e",
            "vout": 1,
            "witness": [
              "30450221008525822e3bef602402bb81872a8891f8be41e7357557b90035dc29871219bd210220292b54c68bca4850d92f86c601ff356be415693d9194a67b4516112f3826729001",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014b486414ad11c81e97a2149b4cb0f795ab8f878fe",
            "scriptpubkey_address": "tb1qkjryzjk3rjq7j73pfx6vkrmet2u0s7878ry32x",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 b486414ad11c81e97a2149b4cb0f795ab8f878fe",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1000000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 6364383,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 7896,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "00000000000000158cdf4744674e7b137d315d627d70dbdbfccaac379c1109a0",
          "block_height": 2815737,
          "block_time": 1715857503,
          "confirmed": true,
        },
        "txid": "178b01bae4a5e3694aad5550ee6c2892acd5e9caeea0aa74d71cb0b3fb80e13e",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 7980175,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "e6a6af548aada0b50ccc73c0313e7d96cbd59a0edc3a5e2261580976e22e17f6",
            "vout": 1,
            "witness": [
              "304402205a8ec8b59510afb9840f19a696c5ba9f63e43652b522c1728c0f3f6142b8778c022076e181e1583128b85abb88e837ebb04cdadb1fade7bc64d3c528d11fe063b42d01",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014270c0c26251a3e4f217195ad66e2987982801c62",
            "scriptpubkey_address": "tb1qyuxqcf39rgly7gt3jkkkdc5c0xpgq8rz6aec8s",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 270c0c26251a3e4f217195ad66e2987982801c62",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 600000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 7372279,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 7896,
        "locktime": 0,
        "size": 223,
        "status": {
          "block_hash": "000000000000000c9e5e7ebccdbf3bef8dbe853c4df91ad7e512b53cc7ac3f1d",
          "block_height": 2815662,
          "block_time": 1715833881,
          "confirmed": true,
        },
        "txid": "e6a6af548aada0b50ccc73c0313e7d96cbd59a0edc3a5e2261580976e22e17f6",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 8588071,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "024af1f0ace74f327a68ae2447c1d401f7b093704825c1ee3215859c937e7d2d",
            "vout": 1,
            "witness": [
              "304502210095aece5c6d2b14f99b2ccbf2e31d89e645bbde4d17b62b991867c9ae4ddbada1022043027b0aa12ad94806bddaaeca207ad0655330e321fd1b6dd1213a242d02ec9101",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "00142ab835d76e59d7f897b0b9a40e8fd27b09c815d0",
            "scriptpubkey_address": "tb1q92urt4mwt8tl39ashxjqar7j0vyus9wsfemsfw",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 2ab835d76e59d7f897b0b9a40e8fd27b09c815d0",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 600000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 7980175,
          },
        ],
        "weight": 562,
      },
      "isRgbpp": false,
    },
    {
      "btcTx": {
        "fee": 7896,
        "locktime": 0,
        "size": 222,
        "status": {
          "block_hash": "000000000000000c6d1cf0adfe6fc9c3d787994e4def105c0303f9fe246ea8c0",
          "block_height": 2815659,
          "block_time": 1715833880,
          "confirmed": true,
        },
        "txid": "024af1f0ace74f327a68ae2447c1d401f7b093704825c1ee3215859c937e7d2d",
        "version": 2,
        "vin": [
          {
            "is_coinbase": false,
            "prevout": {
              "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
              "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
              "scriptpubkey_type": "v0_p2wpkh",
              "value": 9595967,
            },
            "scriptsig": "",
            "scriptsig_asm": "",
            "sequence": 4294967295,
            "txid": "a94f4d6f7e0e8f703af5b2c7cda35eb106f69e524a69be067ce9d0109432c172",
            "vout": 1,
            "witness": [
              "304402200ad9e5155d2fff5742c1cd628fd87c22670c2118e27651b338642e2eea19a3b80220719508e176b10b97ffe9faf16303a48d9e5b01097aefaf3cb4821f36a95ade4501",
              "0200225a2f27f88aedc79c94c43e7d66578039e09a3bdbb2af333cbce530c503ac",
            ],
          },
        ],
        "vout": [
          {
            "scriptpubkey": "0014a925e2d1a11418ec75fba570f1361ddde0a29306",
            "scriptpubkey_address": "tb1q4yj795dpzsvwca0m54c0zdsamhs29ycx40xsuj",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 a925e2d1a11418ec75fba570f1361ddde0a29306",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 1000000,
          },
          {
            "scriptpubkey": "0014f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_address": "tb1q7yuyvms6z49qd65vwmtlpa4rp2rdt3nmjmpnpl",
            "scriptpubkey_asm": "OP_0 OP_PUSHBYTES_20 f138466e1a154a06ea8c76d7f0f6a30a86d5c67b",
            "scriptpubkey_type": "v0_p2wpkh",
            "value": 8588071,
          },
        ],
        "weight": 561,
      },
      "isRgbpp": false,
    },
  ],
}
`;

exports[`/:btc_address/assets 1`] = `
[
  {
    "blockNumber": "0xc35b01",
    "cellOutput": {
      "capacity": "0x5e9f5203e",
      "lock": {
        "args": "0x0200000029ee57d8d3a4506b2647cea882a497da55f49dd4d71b41b14e28c651baa2050c",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0xc0d45407000000000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0x4f8f6042b3646e677c871be1629150407b520e48174612d428506995f6055558",
    },
    "txIndex": "0x8",
    "typeHash": "0x7337d2075479d5c6789564516be1db11478e1d3ca70ad88050fe0bf3ff05acc2",
  },
  {
    "blockNumber": "0xc87015",
    "cellOutput": {
      "capacity": "0x5e9e620d3",
      "lock": {
        "args": "0x02000000f42636cfd158d159c959ff931351636adff46b3cef5cd28d953b0fd07526d20b",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0x008c8647000000000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0xe098e5919e496fc6efb601307578cc436df7d554b9a3994f03b85d0ad2e8e7a6",
    },
    "txIndex": "0x1",
    "typeHash": "0x7337d2075479d5c6789564516be1db11478e1d3ca70ad88050fe0bf3ff05acc2",
  },
  {
    "blockNumber": "0xcc3842",
    "cellOutput": {
      "capacity": "0xa7a358200",
      "lock": {
        "args": "0x000000008c8afb798a1637a284f1ef889e053a7f1e7030747f51cb86a31138c28b681aed",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0xaf68a7bcf1423b57e7ce8636c28dedb463c6e69f62b1b35ca1ed9abf9a6b3d18",
        "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
        "hashType": "data1",
      },
    },
    "data": "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
    "outPoint": {
      "index": "0x0",
      "txHash": "0xdd0226408c4c31b2466f7c3d661d4e3e3c8b429631212a525f6668765baadc80",
    },
    "txIndex": "0x1",
    "typeHash": "0x4e3ae370563059382617a4cb4a28f12811bf16ec0e7d4bf38c7974ba99d52024",
  },
  {
    "blockNumber": "0xcb4375",
    "cellOutput": {
      "capacity": "0x5e9f53e00",
      "lock": {
        "args": "0x000000009b18c0f40491710e536b9916cb9d8326678b27ad5856cf51f0fdf031dec0f53e",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0x80969800000000000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0x3aeb2a7f8e00ca32fae9b658da88274f2dcfeff41108ea28b567dc9b79c7dd3c",
    },
    "txIndex": "0x3",
    "typeHash": "0x6d7dd4497d1ef095644e422d30b2456cfe32c6469346c77752a4d6b56f432a73",
  },
  {
    "blockNumber": "0xc35ba6",
    "cellOutput": {
      "capacity": "0x5e9f52f1f",
      "lock": {
        "args": "0x02000000bbd4d25df0dcc16d9e8cdd70872c1ce2a5acc4394a3cc32ab862ade346317d05",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0xa08d7313000000000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0x71b4f66ac7f657e3b96b5b0694de5fadb61740d2644eabb91090dd9bce93316a",
    },
    "txIndex": "0x4",
    "typeHash": "0x7337d2075479d5c6789564516be1db11478e1d3ca70ad88050fe0bf3ff05acc2",
  },
  {
    "blockNumber": "0xcb4378",
    "cellOutput": {
      "capacity": "0x5e9f53e00",
      "lock": {
        "args": "0x00000000b24761ad734952f78b5974e810f08a408965f27844772a35bfd6162dfe3eb4f7",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0x80f0fa02000000000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0xb5ab02c1583387fa7bc3cb7e61daccead6d4d6b9a1294555328d4bc209ed5f8f",
    },
    "txIndex": "0x1",
    "typeHash": "0x6d7dd4497d1ef095644e422d30b2456cfe32c6469346c77752a4d6b56f432a73",
  },
  {
    "blockNumber": "0xcc383d",
    "cellOutput": {
      "capacity": "0x94a39af00",
      "lock": {
        "args": "0x00000000906f620ad43ea196a10c077e9238515111cb0b6faa7eb69679e72528a17afafd",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0xacb57628e8814a675ac3dfcdcd86b89da85399a82bfceedccb2c8a2200c48c1e",
        "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
        "hashType": "data1",
      },
    },
    "data": "0xa100000010000000190000007d00000005000000646f622f30600000007b22626c6f636b5f6e756d626572223a31333038343932382c2263656c6c5f6964223a363132303533383831383036373235383030302c22646e61223a226166323566336565383563383734623030343638316334333162373835626231227d20000000c1097c85aa781d2cd3c017dc911eceab94644cfe2dd714ae7f7bbe4b75accb08",
    "outPoint": {
      "index": "0x0",
      "txHash": "0x3b1a2d2d00a5ef95b45d93cc1d9394a411319f956121d95104b784e8b469f538",
    },
    "txIndex": "0x3",
    "typeHash": "0xc1b4ba4b70e7d819df97052db2c8f397818fff778fe558f6f4cbdd1a7188a90c",
  },
  {
    "blockNumber": "0xc35ba6",
    "cellOutput": {
      "capacity": "0x5e9f52f1f",
      "lock": {
        "args": "0x02000000976e945e25e9645ab5705c0bebe687e75f8b678fc6e0c9b26081b368f51563a4",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0x01000000000000000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0x274865dc9e754ab8fc96cbc7be20093feca0073b91d3157aed2639f6e89ada90",
    },
    "txIndex": "0x8",
    "typeHash": "0x7337d2075479d5c6789564516be1db11478e1d3ca70ad88050fe0bf3ff05acc2",
  },
  {
    "blockNumber": "0xcc3d9d",
    "cellOutput": {
      "capacity": "0x5e9f53e00",
      "lock": {
        "args": "0x01000000a7fd61a66986273e1e8500e276e5ade9e1d66658e73cc1a4123a440ef6f78d36",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0x00e1f505000000000000000000000000",
    "outPoint": {
      "index": "0x1",
      "txHash": "0xefcada73aa020bfc4c4dc7192f9a6a6e6152af77d1bb2c2380314b4130751bc4",
    },
    "txIndex": "0x6",
    "typeHash": "0x78e21efcf107e7886eadeadecd1a01cfb88f1e5617f4438685db55b3a540d202",
  },
  {
    "blockNumber": "0xcb42df",
    "cellOutput": {
      "capacity": "0x5e9f53e00",
      "lock": {
        "args": "0x00000000fe7e313c6bb99211e222dd1a4ae62a046ef4170d1e74a7252a827b0636ef6965",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0x00e1f505000000000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0xeec5c357338f622f9bf586532be687f8fc1918566f27b4abb7fa5f9c1891af6b",
    },
    "txIndex": "0x2",
    "typeHash": "0x6d7dd4497d1ef095644e422d30b2456cfe32c6469346c77752a4d6b56f432a73",
  },
  {
    "blockNumber": "0xcb669c",
    "cellOutput": {
      "capacity": "0x5e9f53e00",
      "lock": {
        "args": "0x000000004db3c41e5993ba73c0c916494d3f0e09042f2dcd8d48abd64b13a2ed6a149ffc",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0xa0860100000000000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0x2f6b86c4311dc854e779c0bbce110f397a0acc03dfe435aedf832b4f3de1a485",
    },
    "txIndex": "0x1",
    "typeHash": "0x6d7dd4497d1ef095644e422d30b2456cfe32c6469346c77752a4d6b56f432a73",
  },
  {
    "blockNumber": "0xcb7072",
    "cellOutput": {
      "capacity": "0xa7a358200",
      "lock": {
        "args": "0x00000000ab39226c7b575b968798ebdb7f72b2ecec3d7cd6d71c38d11f095b8e2a8e61f3",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0x76fd065c31d24a2c8219e7d56942fed3d49ff728697d98a1079edb06187ec91c",
        "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
        "hashType": "data1",
      },
    },
    "data": "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
    "outPoint": {
      "index": "0x0",
      "txHash": "0xbd1886d03da82d0a012af423044d8f192598d3a7be454397497fd22aba2a784e",
    },
    "txIndex": "0x1",
    "typeHash": "0xf0d58aed78476f0aa4fab18f45de1fdcf4f42426fb03570de236dfd36638f3ed",
  },
  {
    "blockNumber": "0xf17dd7",
    "cellOutput": {
      "capacity": "0x1b381be34e00",
      "lock": {
        "args": "0x9787495f518fec240d7857067f3016daf705286d",
        "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
        "hashType": "type",
      },
      "type": {
        "args": "0xa63d308c04b4c075eb1d7d5cac891cf20276e3ddb2ec855fc981c88d8134dbe2",
        "codeHash": "0xf5da9003e31fa9301a3915fe304de9bdb80524b5f0d8fc325fb699317998ee7a",
        "hashType": "type",
      },
    },
    "data": "0x00000000000000000000000000000000",
    "outPoint": {
      "index": "0x2",
      "txHash": "0xe4e156943c82ee5500d39343a01dda0c48946a6000f449c58ac91708576cf669",
    },
    "txIndex": "0x1",
    "typeHash": "0xe5ee2fdd79aaa218bd74a821c305fa40305408fae2dbfedf8243ea2b4d7af8e4",
  },
  {
    "cellOutput": {
      "capacity": "0xbe5cc1f00",
      "lock": {
        "args": "0x5ee4738bd0a9a6b94fc203cf76e95790e05fd740",
        "codeHash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
        "hashType": "type",
      },
      "type": {
        "args": "0x878fcc6f1f08d48e87bb1c3b3d5083f23f8a39c5d5c764f253b55b998526439b",
        "codeHash": "0x1142755a044bf2ee358cba9f2da187ce928c91cd4dc8692ded0337efa677d21a",
        "hashType": "type",
      },
    },
    "data": "0x00c817a8040000000000000000000000",
    "outPoint": {
      "index": "0x2",
      "txHash": "0xe6b4da0fe4f1bad78c0d404bd92753373092c21ac58694425cf104e953a01964",
    },
    "txIndex": "0x1",
    "typeHash": "0x45b32a2bc4285d0a09678eb11960ddc8707bc2779887a09d482e9bfe9a2cdf52",
  },
]
`;

exports[`/:btc_address/balance - with pending_amount 1`] = `
{
  "address": "tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu",
  "xudt": [
    {
      "available_amount": "0x624eee61",
      "decimal": 8,
      "name": "CKB Fist Inscription",
      "pending_amount": "0x0",
      "symbol": "CKBI",
      "total_amount": "0x624eee61",
      "type_hash": "0x7337d2075479d5c6789564516be1db11478e1d3ca70ad88050fe0bf3ff05acc2",
      "type_script": {
        "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    {
      "available_amount": "0x98aeea0",
      "decimal": 8,
      "name": "JoyID Dex Test Inscription",
      "pending_amount": "0x0",
      "symbol": "JDI",
      "total_amount": "0x98aeea0",
      "type_hash": "0x6d7dd4497d1ef095644e422d30b2456cfe32c6469346c77752a4d6b56f432a73",
      "type_script": {
        "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    {
      "available_amount": "0x5f5e100",
      "decimal": 8,
      "name": "Unique BBQ",
      "pending_amount": "0x5f5e100",
      "symbol": "",
      "total_amount": "0x5f5e100",
      "type_hash": "0x78e21efcf107e7886eadeadecd1a01cfb88f1e5617f4438685db55b3a540d202",
      "type_script": {
        "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    {
      "available_amount": "0x0",
      "decimal": 8,
      "name": "XUDT Test Token",
      "pending_amount": "0x5f5e100",
      "symbol": "PDD",
      "total_amount": "0x0",
      "type_hash": "0x10f511f2efb0027191b97ac5b4bd77374ffdac7399e8527d76f5f9bd32e7d35b",
      "type_script": {
        "args": "0x8c556e92974a8dd8237719020a259d606359ac2cc958cb8bda77a1c3bb3cd93b",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
  ],
}
`;

exports[`/:btc_address/balance - without pending_amount 1`] = `
{
  "address": "tb1pusqtndhyt8mcrggngd0lmah4xshc0aa8vpfsttvtzxd0hxhkrwns7977yu",
  "xudt": [
    {
      "available_amount": "0x624eee61",
      "decimal": 8,
      "name": "CKB Fist Inscription",
      "pending_amount": "0x0",
      "symbol": "CKBI",
      "total_amount": "0x624eee61",
      "type_hash": "0x7337d2075479d5c6789564516be1db11478e1d3ca70ad88050fe0bf3ff05acc2",
      "type_script": {
        "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    {
      "available_amount": "0x98aeea0",
      "decimal": 8,
      "name": "JoyID Dex Test Inscription",
      "pending_amount": "0x0",
      "symbol": "JDI",
      "total_amount": "0x98aeea0",
      "type_hash": "0x6d7dd4497d1ef095644e422d30b2456cfe32c6469346c77752a4d6b56f432a73",
      "type_script": {
        "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    {
      "available_amount": "0x5f5e100",
      "decimal": 8,
      "name": "Unique BBQ",
      "pending_amount": "0x0",
      "symbol": "",
      "total_amount": "0x5f5e100",
      "type_hash": "0x78e21efcf107e7886eadeadecd1a01cfb88f1e5617f4438685db55b3a540d202",
      "type_script": {
        "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
  ],
}
`;


================================================
File: test/routes/rgbpp/__snapshots__/assets.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Get RGB++ assets by BTC txid 1`] = `
[
  {
    "blockNumber": "0xc6067f",
    "cellOutput": {
      "capacity": "0x5e9f52520",
      "lock": {
        "args": "0x010000001770f9dc84b1e05d507bcdd46884b5e267c731071c0d2f01cb257c76049e15ca",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0x7e96affc517fe2b286e309e88d6b331911fc319baa3f8a830dcf59a9756f2c25",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0x0040075af07507000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0xb799ae6896875f2a1a1e765d614cf864c444242babc4bfd7808b37fdea66c4cc",
    },
    "txIndex": "0x2",
    "typeHash": "0x27b36bd74aec3ffccb1c1351c3e3db64cba33ee1b5651059fe468fbcbb8c81bd",
  },
]
`;

exports[`Get RGB++ assets by BTC txid and vout 1`] = `
[
  {
    "blockNumber": "0xc6067f",
    "cellOutput": {
      "capacity": "0x5e9f52520",
      "lock": {
        "args": "0x010000001770f9dc84b1e05d507bcdd46884b5e267c731071c0d2f01cb257c76049e15ca",
        "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
        "hashType": "type",
      },
      "type": {
        "args": "0x7e96affc517fe2b286e309e88d6b331911fc319baa3f8a830dcf59a9756f2c25",
        "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
        "hashType": "type",
      },
    },
    "data": "0x0040075af07507000000000000000000",
    "outPoint": {
      "index": "0x0",
      "txHash": "0xb799ae6896875f2a1a1e765d614cf864c444242babc4bfd7808b37fdea66c4cc",
    },
    "txIndex": "0x2",
    "typeHash": "0x27b36bd74aec3ffccb1c1351c3e3db64cba33ee1b5651059fe468fbcbb8c81bd",
  },
]
`;

exports[`Get RGB++ assets type info (Spore) 1`] = `
{
  "cluster": {
    "description": "{"description":"Lower body gear is custom-made to provide comfort, mobility, and fashion for our short-legged Nervapes, gearing them up for whatever adventure lies ahead.","dob":{"ver":0,"decoder":{"type":"code_hash","hash":"0x1c84212ebd817e9de09d2a79f85cc421b684eda63409cfa75688f98716e77b5f"},"pattern":[["prev.type","string",0,1,"options",["image"]],["prev.bg","string",0,74,"utf8"],["prev.view","number",74,1,"range",[0,255]],["Entity","number",75,8,"raw"]]}}",
    "id": "0x99f2d34427694b1188d7ba462bd43e82c15f3a8238adab3bf5863c9bf97c9373",
    "name": "Nervape Lower Body",
  },
  "contentType": "dob/0",
  "type": "spore",
}
`;

exports[`Get RGB++ assets type info (xUDT) 1`] = `
{
  "decimal": 8,
  "name": "XUDT Test Token",
  "symbol": "PDD",
  "type": "xudt",
  "type_hash": "0x10f511f2efb0027191b97ac5b4bd77374ffdac7399e8527d76f5f9bd32e7d35b",
  "type_script": {
    "args": "0x8c556e92974a8dd8237719020a259d606359ac2cc958cb8bda77a1c3bb3cd93b",
    "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
    "hashType": "type",
  },
}
`;


================================================
File: test/services/bitcoin.test.ts
================================================
import container from '../../src/container';
import { describe, test, beforeEach, expect, vi } from 'vitest';
import BitcoinClient, { BitcoinClientAPIError } from '../../src/services/bitcoin';
import { ElectrsClient } from '../../src/services/bitcoin/electrs';
import { MempoolClient } from '../../src/services/bitcoin/mempool';
import { AxiosError } from 'axios';

describe('BitcoinClient', () => {
  let bitcoin: BitcoinClient;

  beforeEach(async () => {
    const cradle = container.cradle;
    bitcoin = new BitcoinClient(cradle);
  });

  test('BitcoinClient: Should be use data providers', async () => {
    if (container.cradle.env.BITCOIN_DATA_PROVIDER === 'mempool') {
      expect(bitcoin['source'].constructor).toBe(MempoolClient);
      expect(bitcoin['fallback']?.constructor).toBe(ElectrsClient);
    } else {
      expect(bitcoin['source'].constructor).toBe(ElectrsClient);
      expect(bitcoin['fallback']?.constructor).toBe(MempoolClient);
    }
  });

  test('BitcoinClient: Should be use Electrs as default data provider for methods', async () => {
    const cradle = container.cradle;
    if (cradle.env.BITCOIN_DATA_PROVIDER === 'mempool') {
      cradle.env.BITCOIN_METHODS_USE_ELECTRS_BY_DEFAULT = ['getAddressTxs'];
      bitcoin = new BitcoinClient(cradle);
      expect(bitcoin['source'].constructor).toBe(MempoolClient);
      expect(bitcoin['fallback']?.constructor).toBe(ElectrsClient);

      // @ts-expect-error just for test, so we don't need to check the return value
      const mempoolFn = vi.spyOn(bitcoin['source']!, 'getAddressTxs').mockResolvedValue([{}]);
      const electrsFn = vi.spyOn(bitcoin['fallback']!, 'getAddressTxs').mockResolvedValue([]);
      expect(await bitcoin.getAddressTxs({ address: 'test' })).toEqual([]);
      expect(mempoolFn).not.toHaveBeenCalled();
      expect(electrsFn).toHaveBeenCalled();
    }
  });

  test('BitcoinClient: throw BitcoinClientError when source provider failed', async () => {
    bitcoin['fallback'] = undefined;
    vi.spyOn(bitcoin['source'], 'postTx').mockRejectedValue(new AxiosError('source provider error'));
    expect(bitcoin.postTx({ txhex: 'test' })).rejects.toBeInstanceOf(BitcoinClientAPIError);
    expect(bitcoin.postTx({ txhex: 'test' })).rejects.toThrowError('source provider error');
  });

  test('BitcoinClient: throw BitcoinClientError when fallback provider failed', async () => {
    vi.spyOn(bitcoin['source'], 'postTx').mockRejectedValue(new AxiosError('source provider error'));
    vi.spyOn(bitcoin['fallback']!, 'postTx').mockRejectedValue(new AxiosError('fallback provider error'));
    expect(bitcoin.postTx({ txhex: 'test' })).rejects.toBeInstanceOf(BitcoinClientAPIError);
    expect(bitcoin.postTx({ txhex: 'test' })).rejects.toThrowError('fallback provider error');
  });
});


================================================
File: test/services/ckb.test.ts
================================================
import container from '../../src/container';
import { describe, test, beforeEach, afterEach, vi, expect } from 'vitest';
import CKBClient from '../../src/services/ckb';
import { isInscriptionInfoTypeScript, isUniqueCellTypeScript } from '../../src/utils/xudt';
import { Script } from '@ckb-lumos/lumos';

describe('CKBClient', () => {
  let ckb: CKBClient;

  beforeEach(async () => {
    const cradle = container.cradle;
    ckb = new CKBClient(cradle);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  // PDD
  const xudtTypeScript: Script = {
    codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
    args: '0x8c556e92974a8dd8237719020a259d606359ac2cc958cb8bda77a1c3bb3cd93b',
    hashType: 'type',
  };

  // {"name":"tUTXO","symbol":"tUTXO","decimal":8}
  const tUtxoTypeScript: Script = {
    codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
    args: '0x92b419a8d8e03c683a47b960f707f2b866f6114b70327b6628762719b243c5ca',
    hashType: 'type',
  };

  // CKBI
  const inscriptionTypeScript: Script = {
    codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
    args: '0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b',
    hashType: 'type',
  };

  // MEMES
  const inscriptionRebaseTypeScript: Script = {
    codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
    args: '0xe6cd7bc3111c0f1edc91efe8e13be24e611653c3633c3fbe97f823eeef8e5d3c',
    hashType: 'type',
  };

  test('getUniqueCellData: should return the unique cell data', async () => {
    // PDD (Unique cell transaction)
    const tx = await ckb.rpc.getTransaction('0x6a35da16ab1198008545c78b91abe22999f0dc823055553a13d7de29f3063111');
    const index = tx.transaction.outputs.findIndex(
      (output) => output.type && isUniqueCellTypeScript(output.type, false),
    );
    const data = ckb.getUniqueCellData(tx, index, xudtTypeScript);
    expect(data).toEqual({
      decimal: 8,
      name: 'XUDT Test Token',
      symbol: 'PDD',
    });
  });

  test('getInfoCellData: should return the info cell data', async () => {
    // related tx:
    // https://pudge.explorer.nervos.org/transaction/0x38f88df8b0ce98ec0dee86249c8640b06439105a2500b4ca0638a1a229a52a48
    const infoCellData = await ckb.getInfoCellData(tUtxoTypeScript);
    expect(infoCellData).toEqual({
      decimal: 8,
      name: 'tUTXO',
      symbol: 'tUTXO',
    });
  });

  test('getInscriptionCellData: should return the inscription cell data (before rebase)', async () => {
    // CKBI (Inscription cell transaction)
    const tx = await ckb.rpc.getTransaction('0xd1195131f13eca1b4ec1c4b58f7a16f27a239b1064270d703d0c3eb5b6c1b332');
    const index = tx.transaction.outputs.findIndex(
      (output) => output.type && isInscriptionInfoTypeScript(output.type, false),
    );
    const data = ckb.getInscriptionInfoCellData(tx, index, inscriptionTypeScript);
    expect(data).toEqual({
      decimal: 8,
      name: 'CKB Fist Inscription',
      symbol: 'CKBI',
    });
  });

  test('getInscriptionCellData: should return the inscription cell data (after rebase)', async () => {
    // MEMES (Inscription cell transaction (rebased))
    const tx = await ckb.rpc.getTransaction('0xf1a0413641d84fc86e4ea3d55178c6f181538347cea47dc27f35c50ff8b4ec19');
    const index = tx.transaction.outputs.findIndex(
      (output) => output.type && isInscriptionInfoTypeScript(output.type, false),
    );
    const data = ckb.getInscriptionInfoCellData(tx, index, inscriptionRebaseTypeScript);
    expect(data).toEqual({
      decimal: 8,
      name: 'MemesCoin',
      symbol: 'MEMES',
    });
  });

  test('getInscriptionCellData: should not return the inscription cell data by incorrect tx', async () => {
    // MEMES (Inscription cell transaction (rebased))
    const tx = await ckb.rpc.getTransaction('0xe402f225dd76103fa720f41e6bc3a49329d4e3732863b6f32d2ab19f3c6569b6');
    const index = tx.transaction.outputs.findIndex(
      (output) => output.type && isInscriptionInfoTypeScript(output.type, false),
    );
    const data = ckb.getInscriptionInfoCellData(tx, index, inscriptionRebaseTypeScript);
    expect(data).toBeNull();
  });
});


================================================
File: test/services/paymaster.test.ts
================================================
/* eslint-disable @typescript-eslint/ban-ts-comment */
import container from '../../src/container';
import Paymaster from '../../src/services/paymaster';
import { Cell, hd } from '@ckb-lumos/lumos';
import { describe, beforeEach, expect, test, vi } from 'vitest';
import { Job } from 'bullmq';
import { asValue } from 'awilix';
import { Transaction } from '../../src/routes/bitcoin/types';

const { mnemonic, ExtendedPrivateKey, AddressType } = hd;

function generatePrivateKey() {
  const myMnemonic = mnemonic.generateMnemonic();
  const seed = mnemonic.mnemonicToSeedSync(myMnemonic);
  const extendedPrivKey = ExtendedPrivateKey.fromSeed(seed);
  return extendedPrivKey.privateKeyInfo(AddressType.Receiving, 0).privateKey;
}

describe('Paymaster', () => {
  let paymaster: Paymaster;

  beforeEach(async () => {
    const cradle = container.cradle;
    cradle.env.PAYMASTER_PRIVATE_KEY = generatePrivateKey();
    cradle.env.PAYMASTER_CELL_CAPACITY = 10;
    cradle.env.PAYMASTER_CELL_PRESET_COUNT = 10;
    cradle.env.PAYMASTER_CELL_REFILL_THRESHOLD = 0.3;
    cradle.env.PAYMASTER_RECEIVE_BTC_ADDRESS = 'tb1q93nrfpmfz0h2u4ef94eew37qvmvrks4ataf42c';

    paymaster = new Paymaster(cradle);
  });

  test('hasPaymasterReceivedBtcUTXO: should return true when paymaster has received BTC UTXO', async () => {
    const tx = {
      vout: [
        {
          scriptpubkey: '00142c6634876913eeae57292d739747c066d83b42bd',
          scriptpubkey_type: 'v0_p2wpkh',
          scriptpubkey_address: 'tb1q93nrfpmfz0h2u4ef94eew37qvmvrks4ataf42c',
          value: 9999,
        },
      ],
    } as unknown as Transaction;
    const received = paymaster.hasPaymasterReceivedBtcUTXO(tx);
    expect(received).toBeTruthy();
  });

  test('hasPaymasterReceivedBtcUTXO: should return false when paymaster has not received BTC UTXO', async () => {
    const tx = {
      vout: [
        {
          scriptpubkey: '00142c6634876913eeae57292d739747c066d83b42bd',
          scriptpubkey_type: 'v0_p2wpkh',
          scriptpubkey_address: 'tb1q93nrfpmfz0h2u4ef94eew37qvmvrks4ataf42b',
          value: 9999,
        },
      ],
    } as unknown as Transaction;
    const received = paymaster.hasPaymasterReceivedBtcUTXO(tx);
    expect(received).toBeFalsy();
  });

  test('hasPaymasterReceivedBtcUTXO: should return false when paymaster has received BTC UTXO but value is less than container fee', async () => {
    const tx = {
      vout: [
        {
          scriptpubkey: '00142c6634876913eeae57292d739747c066d83b42bd',
          scriptpubkey_type: 'v0_p2wpkh',
          scriptpubkey_address: 'tb1q93nrfpmfz0h2u4ef94eew37qvmvrks4ataf42c',
          value: 6999,
        },
      ],
    } as unknown as Transaction;
    const received = paymaster.hasPaymasterReceivedBtcUTXO(tx);
    expect(received).toBeFalsy();
  });

  test('getNextCell: should not trigger refill if already refilling', async () => {
    paymaster['refilling'] = true;
    vi.spyOn(paymaster['queue'], 'getWaitingCount').mockResolvedValue(2);
    vi.spyOn(paymaster, 'refillCellQueue');

    await paymaster.getNextCell('token');
    expect(paymaster.refillCellQueue).not.toHaveBeenCalled();
  });

  test('getNextCell: should return the next job when queue has sufficient jobs', async () => {
    const originalCkb = container.resolve('ckb');
    container.register(
      'ckb',
      asValue({
        rpc: {
          getLiveCell: vi.fn().mockResolvedValue({
            status: 'live',
          }),
        },
      }),
    );
    vi.spyOn(paymaster['queue'], 'getWaitingCount').mockResolvedValue(10);
    vi.spyOn(paymaster['worker'], 'getNextJob').mockResolvedValue(
      new Job(paymaster['queue'], 'test-job', { outPoint: {}, cellOutput: {}, data: '0x123' }) as Job<Cell>,
    );
    vi.spyOn(paymaster, 'refillCellQueue');

    const cell = await paymaster.getNextCell('token');
    container.register('ckb', asValue(originalCkb));
    expect(cell?.outputData).toEqual('0x123');
    expect(paymaster.refillCellQueue).not.toHaveBeenCalled();
    expect(paymaster['refilling']).toBeFalsy();
  });

  test('getNextCell: should trigger refill when queue has fewer jobs than threshold', async () => {
    const originalCkb = container.resolve('ckb');
    container.register(
      'ckb',
      asValue({
        rpc: {
          getLiveCell: vi.fn().mockResolvedValue({
            status: 'live',
          }),
        },
      }),
    );
    vi.spyOn(paymaster['queue'], 'getWaitingCount').mockResolvedValue(2);
    vi.spyOn(paymaster, 'refillCellQueue').mockResolvedValue(8);
    vi.spyOn(paymaster['worker'], 'getNextJob').mockResolvedValue(
      new Job(paymaster['queue'], 'test-job', { outPoint: {}, cellOutput: {}, data: '0x123' }) as Job<Cell>,
    );

    const cell = await paymaster.getNextCell('token');
    container.register('ckb', asValue(originalCkb));
    expect(cell?.outputData).toEqual('0x123');
    expect(paymaster.refillCellQueue).toHaveBeenCalled();
  });

  test('getNextCell: should return a job when queue is empty and refill is successful', async () => {
    const originalCkb = container.resolve('ckb');
    container.register(
      'ckb',
      asValue({
        rpc: {
          getLiveCell: vi.fn().mockResolvedValue({
            status: 'live',
          }),
        },
      }),
    );
    vi.spyOn(paymaster['queue'], 'getWaitingCount').mockResolvedValue(0);
    vi.spyOn(paymaster, 'refillCellQueue').mockResolvedValue(1);
    vi.spyOn(paymaster['worker'], 'getNextJob').mockResolvedValue(
      new Job(paymaster['queue'], 'refilled-job', {}) as Job<Cell>,
    );

    await paymaster.getNextCell('token');
    container.register('ckb', asValue(originalCkb));
    expect(paymaster.refillCellQueue).toHaveBeenCalled();
  });

  test('getNextCell: should handle error when queue is empty and refill fails', async () => {
    const originalCkb = container.resolve('ckb');
    container.register(
      'ckb',
      asValue({
        rpc: {
          getLiveCell: vi.fn().mockResolvedValue({
            status: 'live',
          }),
        },
      }),
    );
    vi.spyOn(paymaster['queue'], 'getWaitingCount').mockResolvedValue(0);
    vi.spyOn(paymaster, 'refillCellQueue').mockRejectedValue(new Error('Refill failed'));
    vi.spyOn(paymaster['worker'], 'getNextJob');

    await expect(paymaster.getNextCell('token')).rejects.toThrow('Refill failed');
    container.register('ckb', asValue(originalCkb));
    expect(paymaster.refillCellQueue).toHaveBeenCalled();
    expect(paymaster['worker'].getNextJob).not.toHaveBeenCalled();
  });

  test('refillCellQueue: should add cells to the queue successfully', async () => {
    const mockCells: Cell[] = [
      {
        cellOutput: {
          capacity: '0xa',
          lock: paymaster['lockScript'],
        },
        outPoint: {
          txHash: '0x123',
          index: '0x0',
        },
        data: '0x',
      },
      {
        cellOutput: {
          capacity: '0xa',
          lock: paymaster['lockScript'],
        },
        outPoint: {
          txHash: '0x456',
          index: '0x0',
        },
        data: '0x',
      },
    ];
    const mockCollector = {
      collect: async function* () {
        yield* mockCells;
      },
    };
    vi.spyOn(paymaster['cradle'].ckb.indexer, 'collector').mockReturnValue(mockCollector);
    vi.spyOn(paymaster['queue'], 'getWaitingCount').mockResolvedValue(9);
    vi.spyOn(paymaster['queue'], 'add');

    const filled = await paymaster.refillCellQueue();
    expect(filled).toBe(1);
    expect(paymaster['queue'].add).toHaveBeenCalledTimes(1);
  });

  test('refillCellQueue: should return 0 when no cells are found to add', async () => {
    const mockCollector = {
      collect: async function* () {
        // No cells yielded
      },
    };
    vi.spyOn(paymaster['cradle'].ckb.indexer, 'collector').mockReturnValue(mockCollector);
    vi.spyOn(paymaster['queue'], 'add');

    const filled = await paymaster.refillCellQueue();
    expect(filled).toBe(0);
    expect(paymaster['queue'].add).not.toHaveBeenCalled();
  });
});


================================================
File: test/services/rgbpp.test.ts
================================================
import container from '../../src/container';
import { describe, test, beforeEach, afterEach, vi, expect } from 'vitest';
import RgbppCollector from '../../src/services/rgbpp';
import { Cell, Script } from '@ckb-lumos/base';
import mockUtxos from '../__fixtures__/utxo.mock.json';
import mockRgbppUtxoPairs from '../__fixtures__/rgbpp-utxo-pairs.mock.json';

describe('RgbppCollector', () => {
  let rgbppCollector: RgbppCollector;

  beforeEach(async () => {
    const cradle = container.cradle;
    rgbppCollector = new RgbppCollector(cradle);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  test('getRgbppCellsByBatchRequest: should return the batch request for the utxos', async () => {
    const cells = await rgbppCollector.getRgbppCellsByBatchRequest(mockUtxos);
    expect(cells).toMatchSnapshot();
  });

  test('getRgbppCellsByBatchRequest: should be filtered by typeScript', async () => {
    const typeScript: Script = {
      codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
      hashType: 'type',
      args: '0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9',
    };

    const cells = await rgbppCollector.getRgbppCellsByBatchRequest(mockUtxos, typeScript);
    expect(cells).toMatchSnapshot();
  });

  test('getRgbppCellsByBatchRequest: should return the utxo and the cells', async () => {
    const rgbppUtxoCellsPairs = await rgbppCollector.collectRgbppUtxoCellsPairs(mockUtxos);
    expect(rgbppUtxoCellsPairs).toMatchSnapshot();
  });

  test('getRgbppBalanceByCells: should return the rgbpp balance by cells', async () => {
    const cells = mockRgbppUtxoPairs.map((pair) => pair.cells).flat();
    const balance = await rgbppCollector.getRgbppBalanceByCells(cells as Cell[]);
    expect(balance).toMatchSnapshot();
  });
});


================================================
File: test/services/spv.test.ts
================================================
import container from '../../src/container';
import { describe, test, beforeEach, afterEach, vi, expect } from 'vitest';
import SPVClient from '../../src/services/spv';

describe('BitcoinSPV', () => {
  let spv: SPVClient;

  beforeEach(async () => {
    const cradle = container.cradle;
    spv = new SPVClient(cradle);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  test('getTxProof: throw BitcoinSPVError', async () => {
    vi.spyOn(spv['request'], 'post').mockResolvedValue({
      data: {
        jsonrpc: '2.0',
        error: {
          code: 23102,
          message:
            'target transaction is in header#2583777 and it requires 5 confirmations, but the tip header in local storage is header#2583781',
        },
        id: 'aa1a7882-9c0a-4eaa-87e8-1ed906b957f8',
      },
    });
    await expect(
      spv.getTxProof('ede749ecee5e607e761e4fffb6d754799498056872456a7d33abe426d7b9951c', 100),
    ).rejects.toThrowErrorMatchingSnapshot();
  });

  test('getTxProof: get proof successfuly', async () => {
    vi.spyOn(spv['request'], 'post').mockResolvedValue({
      data: {
        jsonrpc: '2.0',
        result: {
          spv_client: {
            tx_hash: '0x5e570545c3ffd656199d3babd85f05377ac91b396126b166cf370e2f0edddae5',
            index: '0x1',
          },
          proof: '00000000000000',
        },
        id: 'aa1a7882-9c0a-4eaa-87e8-1ed906b957f8',
      },
    });
    const proof = await spv.getTxProof('ede749ecee5e607e761e4fffb6d754799498056872456a7d33abe426d7b9951c', 100);
    expect(proof).toHaveProperty('spv_client');
    expect(proof).toHaveProperty('proof');
  });
});


================================================
File: test/services/transaction.test.ts
================================================
import { describe, beforeEach, expect, test, vi } from 'vitest';
import TransactionProcessor, { ITransactionRequest } from '../../src/services/transaction';
import container from '../../src/container';
import { CKBVirtualResult, InputCell, OutputCell } from '../../src/routes/rgbpp/types';
import { ChainInfo, Transaction } from '../../src/routes/bitcoin/types';
import { calculateCommitment } from '@rgbpp-sdk/ckb';
import { Job } from 'bullmq';

const commitment = calculateCommitment({
  inputs: [] as InputCell[],
  outputs: [] as OutputCell[],
} as CKBVirtualResult['ckbRawTx']);

describe('transactionProcessor', () => {
  let transactionProcessor: TransactionProcessor;
  const cradle = container.cradle;

  beforeEach(async () => {
    transactionProcessor = new TransactionProcessor(cradle);
  });

  test('verifyTransaction: should return true for valid transaction', async () => {
    vi.spyOn(
      transactionProcessor as unknown as {
        getCommitmentFromBtcTx: (txid: string) => Buffer;
      },
      'getCommitmentFromBtcTx',
    ).mockReturnValueOnce(Buffer.from(commitment, 'hex'));

    const transactionRequest: ITransactionRequest = {
      txid: 'bb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a0568ea0f',
      ckbVirtualResult: {
        ckbRawTx: { inputs: [] as InputCell[], outputs: [] as OutputCell[] } as CKBVirtualResult['ckbRawTx'],
        commitment,
        sumInputsCapacity: '1000',
        needPaymasterCell: false,
      },
    };
    const btcTx = await cradle.bitcoin.getTx({ txid: transactionRequest.txid });
    const isValid = await transactionProcessor.verifyTransaction(transactionRequest, btcTx);
    expect(isValid).toBe(true);
  });

  test('verifyTransaction: should return false for mismatch commitment', async () => {
    vi.spyOn(
      transactionProcessor as unknown as {
        getCommitmentFromBtcTx: (txid: string) => Buffer;
      },
      'getCommitmentFromBtcTx',
    ).mockReturnValueOnce(Buffer.from('mismatchcommitment', 'hex'));

    const transactionRequest: ITransactionRequest = {
      txid: 'bb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a0568ea0f',
      ckbVirtualResult: {
        ckbRawTx: { inputs: [] as InputCell[], outputs: [] as OutputCell[] } as CKBVirtualResult['ckbRawTx'],
        commitment,
        sumInputsCapacity: '1000',
        needPaymasterCell: false,
      },
    };
    const btcTx = await cradle.bitcoin.getTx({ txid: transactionRequest.txid });
    const isValid = await transactionProcessor.verifyTransaction(transactionRequest, btcTx);
    expect(isValid).toBe(false);
  });

  test('verifyTransaction: should return false for mismatch ckb tx', async () => {
    const commitment = 'mismatchcommitment';
    vi.spyOn(
      transactionProcessor as unknown as {
        getCommitmentFromBtcTx: (txid: string) => Buffer;
      },
      'getCommitmentFromBtcTx',
    ).mockReturnValueOnce(Buffer.from(commitment, 'hex'));

    const transactionRequest: ITransactionRequest = {
      txid: 'bb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a0568ea0f',
      ckbVirtualResult: {
        ckbRawTx: { inputs: [] as InputCell[], outputs: [] as OutputCell[] } as CKBVirtualResult['ckbRawTx'],
        commitment,
        sumInputsCapacity: '1000',
        needPaymasterCell: false,
      },
    };
    const btcTx = await cradle.bitcoin.getTx({ txid: transactionRequest.txid });
    const isValid = await transactionProcessor.verifyTransaction(transactionRequest, btcTx);
    expect(isValid).toBe(false);
  });

  test('verifyTransaction: should throw TransactionNotConfirmedError for unconfirmed transaction', async () => {
    vi.spyOn(
      transactionProcessor as unknown as {
        getCommitmentFromBtcTx: (txid: string) => Buffer;
      },
      'getCommitmentFromBtcTx',
    ).mockReturnValueOnce(Buffer.from(commitment, 'hex'));
    vi.spyOn(transactionProcessor['cradle']['bitcoin'], 'getTx').mockResolvedValueOnce({
      status: { confirmed: false, block_height: 0 },
    } as unknown as Transaction);

    const transactionRequest: ITransactionRequest = {
      txid: 'bb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a0568ea0f',
      ckbVirtualResult: {
        ckbRawTx: { inputs: [] as InputCell[], outputs: [] as OutputCell[] } as CKBVirtualResult['ckbRawTx'],
        commitment,
        sumInputsCapacity: '1000',
        needPaymasterCell: false,
      },
    };

    const btcTx = await cradle.bitcoin.getTx({ txid: transactionRequest.txid });
    await expect(
      transactionProcessor.verifyTransaction(transactionRequest, btcTx),
    ).rejects.toThrowErrorMatchingSnapshot();
  });

  test('enqueueTransaction: should be add transaction request to queue', async () => {
    const transactionRequest: ITransactionRequest = {
      txid: '0x123',
      ckbVirtualResult: {
        ckbRawTx: {} as CKBVirtualResult['ckbRawTx'],
        commitment: '0x123',
        sumInputsCapacity: '1000',
        needPaymasterCell: false,
      },
    };

    await transactionProcessor.enqueueTransaction(transactionRequest);
    const jobs = await transactionProcessor['queue'].getJobs('delayed');
    const jobFromApi = await transactionProcessor['queue'].getJob(transactionRequest.txid);
    const jobFromList = jobs.find((row) => row.id === transactionRequest.txid);

    expect(jobFromApi).toBeDefined();
    expect(jobFromApi!.id).toStrictEqual(jobFromList?.id);
    expect(jobFromApi!.delay).toBe(cradle.env.TRANSACTION_QUEUE_JOB_DELAY);
  });

  test('retryMissingTransactions: should be retry transaction job when missing', async () => {
    vi.spyOn(cradle.bitcoin, 'getBlockchainInfo').mockResolvedValue({
      blocks: 123456,
    } as unknown as ChainInfo);
    vi.spyOn(cradle.bitcoin, 'getBlockHeight').mockResolvedValue('00000000abcdefghijklmnopqrstuvwxyz');
    vi.spyOn(cradle.bitcoin, 'getBlockTxids').mockResolvedValue([
      'bb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a0568ea0f',
      '8ea0fbb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a056',
      '8eb22b379c0ef491dea2d819e721d5df296bebc67a056a0fbb8c92f11920824d',
    ]);
    const retry = vi.fn();
    vi.spyOn(transactionProcessor['queue'], 'getJobs').mockResolvedValue([
      {
        id: 'bb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a0568ea0f',
        retry,
      } as unknown as Job,
    ]);

    await transactionProcessor.retryMissingTransactions();

    expect(retry).toHaveBeenCalled();
  });

  test('retryMissingTransactions: should not retry transaction job when not match', async () => {
    vi.spyOn(cradle.bitcoin, 'getBlockchainInfo').mockResolvedValue({
      blocks: 123456,
    } as unknown as ChainInfo);
    vi.spyOn(cradle.bitcoin, 'getBlockHeight').mockResolvedValue('00000000abcdefghijklmnopqrstuvwxyz');
    vi.spyOn(cradle.bitcoin, 'getBlockTxids').mockResolvedValue([
      'bb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a0568ea0f',
      '8ea0fbb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a056',
      '8eb22b379c0ef491dea2d819e721d5df296bebc67a056a0fbb8c92f11920824d',
    ]);
    const retry = vi.fn();
    vi.spyOn(transactionProcessor['queue'], 'getJobs').mockResolvedValue([
      {
        id: 'bb8c92f119208248ea0fdb22b379c0ef491dea2d819e721d5df296bebc67a056',
        retry,
      } as unknown as Job,
    ]);

    await transactionProcessor.retryMissingTransactions();

    expect(retry).not.toHaveBeenCalled();
  });
});


================================================
File: test/services/unlocker.test.ts
================================================
/* eslint-disable @typescript-eslint/ban-ts-comment */
import container from '../../src/container';
import { describe, test, beforeEach, afterEach, vi, expect } from 'vitest';
import Unlocker from '../../src/services/unlocker';
import { Cell } from '@ckb-lumos/lumos';
import { BTCTimeLock, genBtcTimeLockScript, buildBtcTimeCellsSpentTx } from '@rgbpp-sdk/ckb';

vi.mock('@rgbpp-sdk/ckb', async (importOriginal) => {
  const original = await importOriginal();
  return {
    ...(original as object),
    buildBtcTimeCellsSpentTx: vi.fn(),
  };
});

describe('Unlocker', () => {
  let unlocker: Unlocker;

  beforeEach(async () => {
    const cradle = container.cradle;
    // TODO: mock env.TRANSACTION_SPV_SERVICE_URL
    unlocker = new Unlocker(cradle);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  const xudtTypeScript = {
    codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
    hashType: 'type',
    args: '0x',
  };

  function mockBtcTimeLockCell() {
    vi.spyOn(BTCTimeLock, 'unpack').mockReturnValue({
      after: 6,
      btcTxid: '0x12345',
      lockScript: {} as unknown as CKBComponents.Script,
    });
    vi.spyOn(unlocker['collector'], 'collect').mockImplementation(async function* () {
      const toLock: CKBComponents.Script = {
        args: '0xc0a45d9d7c024adcc8076c18b3f07c08de7c42120cdb7e6cbc05a28266b15b5f',
        codeHash: '0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5',
        hashType: 'data',
      };
      yield {
        blockNumber: '0x123',
        outPoint: {
          txHash: '0x',
          index: '0x0',
        },
        cellOutput: {
          lock: genBtcTimeLockScript(toLock, false),
          type: xudtTypeScript,
          capacity: '0x123',
        },
        data: '0x',
      } as Cell;
      yield {
        blockNumber: '0x456',
        outPoint: {
          txHash: '0x',
          index: '0x0',
        },
        cellOutput: {
          lock: genBtcTimeLockScript(toLock, false),
          type: xudtTypeScript,
          capacity: '0x456',
        },
        data: '0x',
      } as Cell;
    });
  }

  test('getNextBatchLockCell: should skip unconfirmed btc tx', async () => {
    // @ts-expect-error
    vi.spyOn(unlocker['cradle'].bitcoin, 'getBlockchainInfo').mockResolvedValue({ blocks: 2685000 });
    // @ts-expect-error
    vi.spyOn(unlocker['cradle'].bitcoin, 'getTx').mockResolvedValue({ status: { block_height: 2684995 } });
    mockBtcTimeLockCell();

    const cells = await unlocker.getNextBatchLockCell();
    expect(cells).toHaveLength(0);
  });

  test('getNextBatchLockCell: should return cells when btc tx is confirmed', async () => {
    // @ts-expect-error
    vi.spyOn(unlocker['cradle'].bitcoin, 'getBlockchainInfo').mockResolvedValue({ blocks: 2685001 });
    // @ts-expect-error
    vi.spyOn(unlocker['cradle'].bitcoin, 'getTx').mockResolvedValue({ status: { block_height: 2684995 } });
    mockBtcTimeLockCell();

    const cells = await unlocker.getNextBatchLockCell();
    expect(cells).toHaveLength(2);
  });

  test('getNextBatchLockCell: should break when cells reach batch size', async () => {
    unlocker['cradle'].env.UNLOCKER_CELL_BATCH_SIZE = 1;

    // @ts-expect-error
    vi.spyOn(unlocker['cradle'].bitcoin, 'getBlockchainInfo').mockResolvedValue({ blocks: 2685001 });
    // @ts-expect-error
    vi.spyOn(unlocker['cradle'].bitcoin, 'getTx').mockResolvedValue({ status: { block_height: 2684995 } });
    mockBtcTimeLockCell();

    const cells = await unlocker.getNextBatchLockCell();
    expect(cells).toHaveLength(1);
  });

  test('unlockCells: should do nothing when no cells to unlock', async () => {
    vi.spyOn(unlocker, 'getNextBatchLockCell').mockResolvedValue([]);
    await unlocker.unlockCells();
    expect(buildBtcTimeCellsSpentTx).not.toHaveBeenCalled();
  });
});


================================================
File: test/services/utxo.test.ts
================================================
import container, { Cradle } from '../../src/container';
import { describe, test, beforeEach, afterEach, vi, expect } from 'vitest';
import UTXOSyncer from '../../src/services/utxo';

describe('UTXOSyncer', () => {
  let cradle: Cradle;
  let utxoSyncer: UTXOSyncer;

  beforeEach(async () => {
    cradle = container.cradle;
    utxoSyncer = new UTXOSyncer(cradle);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  test('getRepetStrategy: should be return current time when first run', () => {
    const strategy = UTXOSyncer.getRepeatStrategy(cradle);
    const now = Date.now();
    const excuteAt = strategy(now, { count: 0 });
    expect(excuteAt).toBe(now);
  });

  test('getRepetStrategy: should be exponential increase the repeat interval', () => {
    const strategy = UTXOSyncer.getRepeatStrategy(container.cradle);
    const now = Date.now();
    const excuteAt = strategy(now, { count: 2 });
    expect(excuteAt).toBeGreaterThan(now + cradle.env.UTXO_SYNC_REPEAT_BASE_DURATION * 2 ** 2);
  });

  test('getRepetStrategy: should be return maxDuration when interval is greater than maxDuration', () => {
    const strategy = UTXOSyncer.getRepeatStrategy(container.cradle);
    cradle.env.UTXO_SYNC_REPEAT_MAX_DURATION = 60 * 1000;
    const now = Date.now();
    const excuteAt = strategy(now, { count: 100 });
    expect(excuteAt).toBeGreaterThan(now + cradle.env.UTXO_SYNC_REPEAT_MAX_DURATION);
  });

  test('enqueueSyncJob: should be add job to queue', async () => {
    const spy = vi.spyOn(utxoSyncer, 'addJob');
    await utxoSyncer.enqueueSyncJob('tb1quqtqsh5jrlr9p5wnpu3rs883lqh4avpwc766x3');
    expect(spy).toHaveBeenCalled();
  });

  test('enqueueSyncJob: should not be remove repeat job when enqueued duplicate jobs', async () => {
    await utxoSyncer.enqueueSyncJob('tb1quqtqsh5jrlr9p5wnpu3rs883lqh4avpwc766x3');
    const spy = vi.spyOn(utxoSyncer['queue'], 'removeRepeatableByKey');
    await utxoSyncer.enqueueSyncJob('tb1quqtqsh5jrlr9p5wnpu3rs883lqh4avpwc766x3');
    expect(spy).not.toHaveBeenCalled();
  });

  test('enqueueSyncJob: should be remove repeat job when is exists', async () => {
    await utxoSyncer.enqueueSyncJob('tb1quqtqsh5jrlr9p5wnpu3rs883lqh4avpwc766x3');
    await new Promise((resolve) => setTimeout(resolve, 1100));
    const spy = vi.spyOn(utxoSyncer['queue'], 'removeRepeatableByKey');
    await utxoSyncer.enqueueSyncJob('tb1quqtqsh5jrlr9p5wnpu3rs883lqh4avpwc766x3');
    expect(spy).toHaveBeenCalled();
  });
});


================================================
File: test/services/__snapshots__/rgbpp.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`RgbppCollector > getRgbppBalanceByCells: should return the rgbpp balance by cells 1`] = `
{
  "0x45b32a2bc4285d0a09678eb11960ddc8707bc2779887a09d482e9bfe9a2cdf52": {
    "amount": "0x4a817c800",
    "decimal": 8,
    "name": "RUSD",
    "symbol": "RUSD",
    "type_hash": "0x45b32a2bc4285d0a09678eb11960ddc8707bc2779887a09d482e9bfe9a2cdf52",
    "type_script": {
      "args": "0x878fcc6f1f08d48e87bb1c3b3d5083f23f8a39c5d5c764f253b55b998526439b",
      "codeHash": "0x1142755a044bf2ee358cba9f2da187ce928c91cd4dc8692ded0337efa677d21a",
      "hashType": "type",
    },
  },
  "0x6d7dd4497d1ef095644e422d30b2456cfe32c6469346c77752a4d6b56f432a73": {
    "amount": "0x98aeea0",
    "decimal": 8,
    "name": "JoyID Dex Test Inscription",
    "symbol": "JDI",
    "type_hash": "0x6d7dd4497d1ef095644e422d30b2456cfe32c6469346c77752a4d6b56f432a73",
    "type_script": {
      "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
      "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
      "hashType": "type",
    },
  },
  "0x7337d2075479d5c6789564516be1db11478e1d3ca70ad88050fe0bf3ff05acc2": {
    "amount": "0x624eee61",
    "decimal": 8,
    "name": "CKB Fist Inscription",
    "symbol": "CKBI",
    "type_hash": "0x7337d2075479d5c6789564516be1db11478e1d3ca70ad88050fe0bf3ff05acc2",
    "type_script": {
      "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
      "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
      "hashType": "type",
    },
  },
  "0x78e21efcf107e7886eadeadecd1a01cfb88f1e5617f4438685db55b3a540d202": {
    "amount": "0x5f5e100",
    "decimal": 8,
    "name": "Unique BBQ",
    "symbol": "",
    "total_supply": undefined,
    "type_hash": "0x78e21efcf107e7886eadeadecd1a01cfb88f1e5617f4438685db55b3a540d202",
    "type_script": {
      "args": "0x30d3fbec9ceba691770d57c6d06bdb98cf0f82bef0ca6e87687a118d6ce1e7b7",
      "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
      "hashType": "type",
    },
  },
  "0xe5ee2fdd79aaa218bd74a821c305fa40305408fae2dbfedf8243ea2b4d7af8e4": {
    "amount": "0x0",
    "circulating_supply": "0x0",
    "decimal": 0,
    "issuer": "0x75f11d14d0d8dfc084ce777961cfd9e75ace8c77282217bcc16f57533ea2ee09",
    "name": "Pre-claim -Airdrop Badge",
    "symbol": "UTXO-AIRDROP",
    "token_info_cell_type_hash": "0xb18540dcfde52a96232ec865401284b8b94e1692db54f45803e90d93a4e0d9c7",
    "total_supply": "0x3e8",
    "type_hash": "0xe5ee2fdd79aaa218bd74a821c305fa40305408fae2dbfedf8243ea2b4d7af8e4",
    "type_script": {
      "args": "0xa63d308c04b4c075eb1d7d5cac891cf20276e3ddb2ec855fc981c88d8134dbe2",
      "codeHash": "0xf5da9003e31fa9301a3915fe304de9bdb80524b5f0d8fc325fb699317998ee7a",
      "hashType": "type",
    },
  },
}
`;

exports[`RgbppCollector > getRgbppCellsByBatchRequest: should be filtered by typeScript 1`] = `
[
  [],
  [],
  [],
  [],
  [],
  [],
  [],
  [],
  [
    {
      "blockNumber": "0xcb4375",
      "cellOutput": {
        "capacity": "0x5e9f53e00",
        "lock": {
          "args": "0x000000009b18c0f40491710e536b9916cb9d8326678b27ad5856cf51f0fdf031dec0f53e",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0x80969800000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0x3aeb2a7f8e00ca32fae9b658da88274f2dcfeff41108ea28b567dc9b79c7dd3c",
      },
      "txIndex": "0x3",
    },
  ],
  [],
  [
    {
      "blockNumber": "0xcb4378",
      "cellOutput": {
        "capacity": "0x5e9f53e00",
        "lock": {
          "args": "0x00000000b24761ad734952f78b5974e810f08a408965f27844772a35bfd6162dfe3eb4f7",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0x80f0fa02000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0xb5ab02c1583387fa7bc3cb7e61daccead6d4d6b9a1294555328d4bc209ed5f8f",
      },
      "txIndex": "0x1",
    },
  ],
  [],
  [],
  [],
  [
    {
      "blockNumber": "0xcb42df",
      "cellOutput": {
        "capacity": "0x5e9f53e00",
        "lock": {
          "args": "0x00000000fe7e313c6bb99211e222dd1a4ae62a046ef4170d1e74a7252a827b0636ef6965",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0x00e1f505000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0xeec5c357338f622f9bf586532be687f8fc1918566f27b4abb7fa5f9c1891af6b",
      },
      "txIndex": "0x2",
    },
  ],
  [
    {
      "blockNumber": "0xcb669c",
      "cellOutput": {
        "capacity": "0x5e9f53e00",
        "lock": {
          "args": "0x000000004db3c41e5993ba73c0c916494d3f0e09042f2dcd8d48abd64b13a2ed6a149ffc",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0xa0860100000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0x2f6b86c4311dc854e779c0bbce110f397a0acc03dfe435aedf832b4f3de1a485",
      },
      "txIndex": "0x1",
    },
  ],
  [],
]
`;

exports[`RgbppCollector > getRgbppCellsByBatchRequest: should return the batch request for the utxos 1`] = `
[
  [],
  [],
  [],
  [
    {
      "blockNumber": "0xc35b01",
      "cellOutput": {
        "capacity": "0x5e9f5203e",
        "lock": {
          "args": "0x0200000029ee57d8d3a4506b2647cea882a497da55f49dd4d71b41b14e28c651baa2050c",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0xc0d45407000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0x4f8f6042b3646e677c871be1629150407b520e48174612d428506995f6055558",
      },
      "txIndex": "0x8",
    },
  ],
  [
    {
      "blockNumber": "0xc87015",
      "cellOutput": {
        "capacity": "0x5e9e620d3",
        "lock": {
          "args": "0x02000000f42636cfd158d159c959ff931351636adff46b3cef5cd28d953b0fd07526d20b",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0x008c8647000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0xe098e5919e496fc6efb601307578cc436df7d554b9a3994f03b85d0ad2e8e7a6",
      },
      "txIndex": "0x1",
    },
  ],
  [],
  [],
  [
    {
      "blockNumber": "0xcc3842",
      "cellOutput": {
        "capacity": "0xa7a358200",
        "lock": {
          "args": "0x000000008c8afb798a1637a284f1ef889e053a7f1e7030747f51cb86a31138c28b681aed",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xaf68a7bcf1423b57e7ce8636c28dedb463c6e69f62b1b35ca1ed9abf9a6b3d18",
          "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
          "hashType": "data1",
        },
      },
      "data": "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
      "outPoint": {
        "index": "0x0",
        "txHash": "0xdd0226408c4c31b2466f7c3d661d4e3e3c8b429631212a525f6668765baadc80",
      },
      "txIndex": "0x1",
    },
  ],
  [
    {
      "blockNumber": "0xcb4375",
      "cellOutput": {
        "capacity": "0x5e9f53e00",
        "lock": {
          "args": "0x000000009b18c0f40491710e536b9916cb9d8326678b27ad5856cf51f0fdf031dec0f53e",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0x80969800000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0x3aeb2a7f8e00ca32fae9b658da88274f2dcfeff41108ea28b567dc9b79c7dd3c",
      },
      "txIndex": "0x3",
    },
  ],
  [
    {
      "blockNumber": "0xc35ba6",
      "cellOutput": {
        "capacity": "0x5e9f52f1f",
        "lock": {
          "args": "0x02000000bbd4d25df0dcc16d9e8cdd70872c1ce2a5acc4394a3cc32ab862ade346317d05",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0xa08d7313000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0x71b4f66ac7f657e3b96b5b0694de5fadb61740d2644eabb91090dd9bce93316a",
      },
      "txIndex": "0x4",
    },
  ],
  [
    {
      "blockNumber": "0xcb4378",
      "cellOutput": {
        "capacity": "0x5e9f53e00",
        "lock": {
          "args": "0x00000000b24761ad734952f78b5974e810f08a408965f27844772a35bfd6162dfe3eb4f7",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0x80f0fa02000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0xb5ab02c1583387fa7bc3cb7e61daccead6d4d6b9a1294555328d4bc209ed5f8f",
      },
      "txIndex": "0x1",
    },
  ],
  [
    {
      "blockNumber": "0xcc383d",
      "cellOutput": {
        "capacity": "0x94a39af00",
        "lock": {
          "args": "0x00000000906f620ad43ea196a10c077e9238515111cb0b6faa7eb69679e72528a17afafd",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xacb57628e8814a675ac3dfcdcd86b89da85399a82bfceedccb2c8a2200c48c1e",
          "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
          "hashType": "data1",
        },
      },
      "data": "0xa100000010000000190000007d00000005000000646f622f30600000007b22626c6f636b5f6e756d626572223a31333038343932382c2263656c6c5f6964223a363132303533383831383036373235383030302c22646e61223a226166323566336565383563383734623030343638316334333162373835626231227d20000000c1097c85aa781d2cd3c017dc911eceab94644cfe2dd714ae7f7bbe4b75accb08",
      "outPoint": {
        "index": "0x0",
        "txHash": "0x3b1a2d2d00a5ef95b45d93cc1d9394a411319f956121d95104b784e8b469f538",
      },
      "txIndex": "0x3",
    },
  ],
  [
    {
      "blockNumber": "0xc35ba6",
      "cellOutput": {
        "capacity": "0x5e9f52f1f",
        "lock": {
          "args": "0x02000000976e945e25e9645ab5705c0bebe687e75f8b678fc6e0c9b26081b368f51563a4",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0x01000000000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0x274865dc9e754ab8fc96cbc7be20093feca0073b91d3157aed2639f6e89ada90",
      },
      "txIndex": "0x8",
    },
  ],
  [],
  [
    {
      "blockNumber": "0xcb42df",
      "cellOutput": {
        "capacity": "0x5e9f53e00",
        "lock": {
          "args": "0x00000000fe7e313c6bb99211e222dd1a4ae62a046ef4170d1e74a7252a827b0636ef6965",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0x00e1f505000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0xeec5c357338f622f9bf586532be687f8fc1918566f27b4abb7fa5f9c1891af6b",
      },
      "txIndex": "0x2",
    },
  ],
  [
    {
      "blockNumber": "0xcb669c",
      "cellOutput": {
        "capacity": "0x5e9f53e00",
        "lock": {
          "args": "0x000000004db3c41e5993ba73c0c916494d3f0e09042f2dcd8d48abd64b13a2ed6a149ffc",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
          "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
          "hashType": "type",
        },
      },
      "data": "0xa0860100000000000000000000000000",
      "outPoint": {
        "index": "0x0",
        "txHash": "0x2f6b86c4311dc854e779c0bbce110f397a0acc03dfe435aedf832b4f3de1a485",
      },
      "txIndex": "0x1",
    },
  ],
  [
    {
      "blockNumber": "0xcb7072",
      "cellOutput": {
        "capacity": "0xa7a358200",
        "lock": {
          "args": "0x00000000ab39226c7b575b968798ebdb7f72b2ecec3d7cd6d71c38d11f095b8e2a8e61f3",
          "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
          "hashType": "type",
        },
        "type": {
          "args": "0x76fd065c31d24a2c8219e7d56942fed3d49ff728697d98a1079edb06187ec91c",
          "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
          "hashType": "data1",
        },
      },
      "data": "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
      "outPoint": {
        "index": "0x0",
        "txHash": "0xbd1886d03da82d0a012af423044d8f192598d3a7be454397497fd22aba2a784e",
      },
      "txIndex": "0x1",
    },
  ],
]
`;

exports[`RgbppCollector > getRgbppCellsByBatchRequest: should return the utxo and the cells 1`] = `
[
  {
    "cells": [
      {
        "blockNumber": "0xc35b01",
        "cellOutput": {
          "capacity": "0x5e9f5203e",
          "lock": {
            "args": "0x0200000029ee57d8d3a4506b2647cea882a497da55f49dd4d71b41b14e28c651baa2050c",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "hashType": "type",
          },
        },
        "data": "0xc0d45407000000000000000000000000",
        "outPoint": {
          "index": "0x0",
          "txHash": "0x4f8f6042b3646e677c871be1629150407b520e48174612d428506995f6055558",
        },
        "txIndex": "0x8",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "00000000000000000b871290b8d050dc6b57104deada7f6c26d59d567c7ac94a",
        "block_height": 2585022,
        "block_time": 1712125215,
        "confirmed": true,
      },
      "txid": "0c05a2ba51c6284eb1411bd7d49df455da97a482a8ce47266b50a4d3d857ee29",
      "value": 546,
      "vout": 2,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xc87015",
        "cellOutput": {
          "capacity": "0x5e9e620d3",
          "lock": {
            "args": "0x02000000f42636cfd158d159c959ff931351636adff46b3cef5cd28d953b0fd07526d20b",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "hashType": "type",
          },
        },
        "data": "0x008c8647000000000000000000000000",
        "outPoint": {
          "index": "0x0",
          "txHash": "0xe098e5919e496fc6efb601307578cc436df7d554b9a3994f03b85d0ad2e8e7a6",
        },
        "txIndex": "0x1",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "000000000000009de2006782c905136c925bbb4bb89e504e970affe1c20bbfee",
        "block_height": 2811244,
        "block_time": 1714790623,
        "confirmed": true,
      },
      "txid": "0bd22675d00f3b958dd25cef3c6bf4df6a63511393ff59c959d158d1cf3626f4",
      "value": 546,
      "vout": 2,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xcc3842",
        "cellOutput": {
          "capacity": "0xa7a358200",
          "lock": {
            "args": "0x000000008c8afb798a1637a284f1ef889e053a7f1e7030747f51cb86a31138c28b681aed",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0xaf68a7bcf1423b57e7ce8636c28dedb463c6e69f62b1b35ca1ed9abf9a6b3d18",
            "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
            "hashType": "data1",
          },
        },
        "data": "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
        "outPoint": {
          "index": "0x0",
          "txHash": "0xdd0226408c4c31b2466f7c3d661d4e3e3c8b429631212a525f6668765baadc80",
        },
        "txIndex": "0x1",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "00000000000000074d01a1844db22ada24e70043bac0d05a83aa2234cd5c3de9",
        "block_height": 2817185,
        "block_time": 1716459057,
        "confirmed": true,
      },
      "txid": "ed1a688bc23811a386cb517f7430701e7f3a059e88eff184a237168a79fb8a8c",
      "value": 546,
      "vout": 0,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xcb4375",
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "args": "0x000000009b18c0f40491710e536b9916cb9d8326678b27ad5856cf51f0fdf031dec0f53e",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "hashType": "type",
          },
        },
        "data": "0x80969800000000000000000000000000",
        "outPoint": {
          "index": "0x0",
          "txHash": "0x3aeb2a7f8e00ca32fae9b658da88274f2dcfeff41108ea28b567dc9b79c7dd3c",
        },
        "txIndex": "0x3",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "0000000000000007270b0f8be9b3b61c49a09dd7af0bb0f800aef8dbbf594e35",
        "block_height": 2816698,
        "block_time": 1716276487,
        "confirmed": true,
      },
      "txid": "3ef5c0de31f0fdf051cf5658ad278b6726839dcb16996b530e719104f4c0189b",
      "value": 546,
      "vout": 0,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xc35ba6",
        "cellOutput": {
          "capacity": "0x5e9f52f1f",
          "lock": {
            "args": "0x02000000bbd4d25df0dcc16d9e8cdd70872c1ce2a5acc4394a3cc32ab862ade346317d05",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "hashType": "type",
          },
        },
        "data": "0xa08d7313000000000000000000000000",
        "outPoint": {
          "index": "0x0",
          "txHash": "0x71b4f66ac7f657e3b96b5b0694de5fadb61740d2644eabb91090dd9bce93316a",
        },
        "txIndex": "0x4",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "0000000000000365f0619dc58091519f4e7bdddc44b3b10f0a4ccfa668da1a31",
        "block_height": 2585023,
        "block_time": 1712126418,
        "confirmed": true,
      },
      "txid": "057d3146e3ad62b82ac33c4a39c4aca5e21c2c8770dd8c9e6dc1dcf05dd2d4bb",
      "value": 546,
      "vout": 2,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xcb4378",
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "args": "0x00000000b24761ad734952f78b5974e810f08a408965f27844772a35bfd6162dfe3eb4f7",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "hashType": "type",
          },
        },
        "data": "0x80f0fa02000000000000000000000000",
        "outPoint": {
          "index": "0x0",
          "txHash": "0xb5ab02c1583387fa7bc3cb7e61daccead6d4d6b9a1294555328d4bc209ed5f8f",
        },
        "txIndex": "0x1",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "0000000000000007270b0f8be9b3b61c49a09dd7af0bb0f800aef8dbbf594e35",
        "block_height": 2816698,
        "block_time": 1716276487,
        "confirmed": true,
      },
      "txid": "f7b43efe2d16d6bf352a774478f26589408af010e874598bf7524973ad6147b2",
      "value": 546,
      "vout": 0,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xcc383d",
        "cellOutput": {
          "capacity": "0x94a39af00",
          "lock": {
            "args": "0x00000000906f620ad43ea196a10c077e9238515111cb0b6faa7eb69679e72528a17afafd",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0xacb57628e8814a675ac3dfcdcd86b89da85399a82bfceedccb2c8a2200c48c1e",
            "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
            "hashType": "data1",
          },
        },
        "data": "0xa100000010000000190000007d00000005000000646f622f30600000007b22626c6f636b5f6e756d626572223a31333038343932382c2263656c6c5f6964223a363132303533383831383036373235383030302c22646e61223a226166323566336565383563383734623030343638316334333162373835626231227d20000000c1097c85aa781d2cd3c017dc911eceab94644cfe2dd714ae7f7bbe4b75accb08",
        "outPoint": {
          "index": "0x0",
          "txHash": "0x3b1a2d2d00a5ef95b45d93cc1d9394a411319f956121d95104b784e8b469f538",
        },
        "txIndex": "0x3",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "0000000000000002d2dc7f2a5ff816564d746298563451852b9d33a5452bd206",
        "block_height": 2816987,
        "block_time": 1716365229,
        "confirmed": true,
      },
      "txid": "fdfa7aa12825e77996b67eaa6f0bcb11515138927e070ca196a13ed40a626f90",
      "value": 546,
      "vout": 0,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xc35ba6",
        "cellOutput": {
          "capacity": "0x5e9f52f1f",
          "lock": {
            "args": "0x02000000976e945e25e9645ab5705c0bebe687e75f8b678fc6e0c9b26081b368f51563a4",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0x1ba116c119d1cfd98a53e9d1a615cf2af2bb87d95515c9d217d367054cfc696b",
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "hashType": "type",
          },
        },
        "data": "0x01000000000000000000000000000000",
        "outPoint": {
          "index": "0x0",
          "txHash": "0x274865dc9e754ab8fc96cbc7be20093feca0073b91d3157aed2639f6e89ada90",
        },
        "txIndex": "0x8",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "0000000000000365f0619dc58091519f4e7bdddc44b3b10f0a4ccfa668da1a31",
        "block_height": 2585023,
        "block_time": 1712126418,
        "confirmed": true,
      },
      "txid": "a46315f568b38160b2c9e0c68f678b5fe787e6eb0b5c70b55a64e9255e946e97",
      "value": 546,
      "vout": 2,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xcb42df",
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "args": "0x00000000fe7e313c6bb99211e222dd1a4ae62a046ef4170d1e74a7252a827b0636ef6965",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "hashType": "type",
          },
        },
        "data": "0x00e1f505000000000000000000000000",
        "outPoint": {
          "index": "0x0",
          "txHash": "0xeec5c357338f622f9bf586532be687f8fc1918566f27b4abb7fa5f9c1891af6b",
        },
        "txIndex": "0x2",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "0000000000000001f67d59ba0b956a30a68bed4154c02c29a34b4ff84e54eb26",
        "block_height": 2816662,
        "block_time": 1716265235,
        "confirmed": true,
      },
      "txid": "6569ef36067b822a25a7741e0d17f46e042ae64a1add22e21192b96b3c317efe",
      "value": 546,
      "vout": 0,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xcb669c",
        "cellOutput": {
          "capacity": "0x5e9f53e00",
          "lock": {
            "args": "0x000000004db3c41e5993ba73c0c916494d3f0e09042f2dcd8d48abd64b13a2ed6a149ffc",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0xc625c4ac0ba3ece5886d04958c3fc2d5558a21841c03577fad2d7c46e5b2b2b9",
            "codeHash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
            "hashType": "type",
          },
        },
        "data": "0xa0860100000000000000000000000000",
        "outPoint": {
          "index": "0x0",
          "txHash": "0x2f6b86c4311dc854e779c0bbce110f397a0acc03dfe435aedf832b4f3de1a485",
        },
        "txIndex": "0x1",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "000000000000000a2d71867394388670e82b65ae1588306d06a2e6c070dec47e",
        "block_height": 2816711,
        "block_time": 1716280561,
        "confirmed": true,
      },
      "txid": "fc9f146aeda2134bd6ab488dcd2d2f04090e3f4d4916c9c073ba93591ec4b34d",
      "value": 546,
      "vout": 0,
    },
  },
  {
    "cells": [
      {
        "blockNumber": "0xcb7072",
        "cellOutput": {
          "capacity": "0xa7a358200",
          "lock": {
            "args": "0x00000000ab39226c7b575b968798ebdb7f72b2ecec3d7cd6d71c38d11f095b8e2a8e61f3",
            "codeHash": "0x61ca7a4796a4eb19ca4f0d065cb9b10ddcf002f10f7cbb810c706cb6bb5c3248",
            "hashType": "type",
          },
          "type": {
            "args": "0x76fd065c31d24a2c8219e7d56942fed3d49ff728697d98a1079edb06187ec91c",
            "codeHash": "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d",
            "hashType": "data1",
          },
        },
        "data": "0xd40000001000000024000000b0000000100000006170706c69636174696f6e2f6a736f6e880000007b226e616d65223a22556e69636f726e20426f78222c227265736f75726365223a7b2275726c223a2268747470733a2f2f6172736565642e77656233696e6672612e6465762f306b4e437450376169417253596f6c6e424f656466705545493948554b7273323142443772495247735677222c2274797065223a22696d6167652f6a706567227d7d20000000ed3d643329453a418a8902a40c225ca81f405904b4ec9509ff09048240d30a86",
        "outPoint": {
          "index": "0x0",
          "txHash": "0xbd1886d03da82d0a012af423044d8f192598d3a7be454397497fd22aba2a784e",
        },
        "txIndex": "0x1",
      },
    ],
    "utxo": {
      "status": {
        "block_hash": "000000000000000838d3bf989d702597827cd9830b8bedeaba49a5f2621053fa",
        "block_height": 2816899,
        "block_time": 1716348699,
        "confirmed": true,
      },
      "txid": "f3618e2a8e5b091fd1381cd7d67c3dececb2727fdbeb9887965b577b6c2239ab",
      "value": 546,
      "vout": 0,
    },
  },
]
`;


================================================
File: test/services/__snapshots__/spv.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`BitcoinSPV > getTxProof: throw BitcoinSPVError 1`] = `[BitcoinSPVError: target transaction is in header#2583777 and it requires 5 confirmations, but the tip header in local storage is header#2583781]`;


================================================
File: test/services/__snapshots__/transaction.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`transactionProcessor > verifyTransaction: should throw TransactionNotConfirmedError for unconfirmed transaction 1`] = `[TransactionNotConfirmedError: Transaction not confirmed: bb8c92f11920824db22b379c0ef491dea2d819e721d5df296bebc67a0568ea0f]`;


================================================
File: test/utils/xudt.test.ts
================================================
import { describe, expect, test } from 'vitest';
import { decodeUDTHashFromInscriptionData } from '../../src/utils/xudt';
import { decodeMetadata, decodeTokenInfo } from '@utxostack/metadata';

describe('XUDT utils', () => {
  test('decodeTokenInfo: should decode the inscription info cell', async () => {
    const data1 = '0x08094d656d6573436f696e054d454d4553';
    const decoded1 = decodeTokenInfo(data1);
    expect(decoded1).toEqual({
      decimal: 8,
      name: 'MemesCoin',
      symbol: 'MEMES',
    });

    const data2 = '0x08094d656d6573436f696e054d454d455301000000100000000040075af07507000000000000000000';
    const decoded2 = decodeTokenInfo(data2);
    expect(decoded2).toEqual({
      decimal: 8,
      name: 'MemesCoin',
      symbol: 'MEMES',
      totalSupply: '0x775f05a074000',
    });
  });

  test('decodeMetadata: should decode the token metadata', async () => {
    const data =
      '0x04000000200000000f251aec82b7d329bfe94ac8456fd96c463248aec5551b18fd215ca5dcb94be70300000020000000a8efe3e8d534fbad88251c1f82cf2428f87637a27cfbf28b6365e9b74d895d1802000000100000000000a40731af05000000000000000000';
    const decoded = decodeMetadata(data);
    expect(decoded).toEqual({
      issuer: '0xa8efe3e8d534fbad88251c1f82cf2428f87637a27cfbf28b6365e9b74d895d18',
      circulatingSupply: `0x${BigInt(1600_0000_0000_0000).toString(16)}`,
      tokenInfoCellTypeHash: '0x0f251aec82b7d329bfe94ac8456fd96c463248aec5551b18fd215ca5dcb94be7',
    });
  });

  test('decodeUDTHashFromInscriptionData: should decode the udt_hash from inscription cell data', async () => {
    const data =
      '0x08094d656d6573436f696e054d454d45538a139905afdd927a56e3dbf2c3993a8d26a69e7ba35f92894460882e3fa6b6ef0040075af0750700000000000000000000ca9a3b00000000000000000000000000';
    const decoded = decodeUDTHashFromInscriptionData(data);
    expect(decoded).toEqual('0x8a139905afdd927a56e3dbf2c3993a8d26a69e7ba35f92894460882e3fa6b6ef');
  });
});


================================================
File: .github/workflows/deploy.yaml
================================================
name: Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - Docker Publish
    branches:
      - develop
    types:
      - completed

jobs:
  deploy-testnet:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Testnet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.SSH_WORK_DIR }}
            echo ${{ secrets.PACKAGE_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            bash ./update.sh
  
  # The signet instance is maintained by the https://github.com/ckb-devrel team.
  # deploy-signet:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy Signet
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.SSH_HOST_SIGNET }}
  #         username: ${{ secrets.SSH_USERNAME_SIGNET }}
  #         password: ${{ secrets.PASSWORD }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #           cd ${{ secrets.SSH_WORK_DIR_SIGNET }}
  #           echo ${{ secrets.PACKAGE_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #           bash ./update.sh


================================================
File: .github/workflows/docker.yaml
================================================
name: Docker Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
    tags:
      - release/*

jobs:
  docker-build-push:
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          context: git
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=auto
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=branch,suffix=-{{date 'YYYYMMDDHHmm'}}
            type=sha,enable=true,prefix=sha-,format=short
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          provenance: false
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}


================================================
File: .github/workflows/test.yaml
================================================
---
name: Unit Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        BITCOIN_DATA_PROVIDER: [mempool, electrs]

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "21"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run Unit Tests
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          BITCOIN_DATA_PROVIDER: ${{ matrix.BITCOIN_DATA_PROVIDER }}
          BITCOIN_MEMPOOL_SPACE_API_URL: ${{ secrets.BITCOIN_MEMPOOL_SPACE_API_URL }}
          BITCOIN_ELECTRS_API_URL: ${{ secrets.BITCOIN_ELECTRS_API_URL }}
          BITCOIN_SPV_SERVICE_URL: ${{ secrets.BITCOIN_SPV_SERVICE_URL }}
          PAYMASTER_PRIVATE_KEY: ${{ secrets.PAYMASTER_PRIVATE_KEY }}
          PAYMASTER_RECEIVE_BTC_ADDRESS: ${{ secrets.PAYMASTER_RECEIVE_BTC_ADDRESS }}
          CKB_RPC_URL: ${{ secrets.CKB_RPC_URL }}
          CKB_INDEXER_URL: ${{ secrets.CKB_INDEXER_URL }}
          REDIS_URL: redis://localhost:6379
          CI_REDIS_URL: redis://localhost:6379
        run: pnpm test


