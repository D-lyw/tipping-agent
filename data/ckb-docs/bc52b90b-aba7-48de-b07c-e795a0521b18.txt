Directory structure:
└── ckb-devrel-nervdao/
    ├── README.md
    ├── next.config.mjs
    ├── package.json
    ├── pnpm-lock.yaml
    ├── postcss.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── .eslintrc.json
    ├── doc-resource/
    ├── public/
    │   └── svg/
    ├── src/
    │   ├── app/
    │   │   ├── globals.css
    │   │   ├── layout.tsx
    │   │   ├── layoutProvider.tsx
    │   │   ├── page.tsx
    │   │   ├── components/
    │   │   │   ├── AppLayout.tsx
    │   │   │   ├── CircularProgress.tsx
    │   │   │   ├── ConnectWallet.tsx
    │   │   │   ├── DaoCard.tsx
    │   │   │   ├── DaoDepositDetailModal.tsx
    │   │   │   ├── DaoWithdrawDetailModal.tsx
    │   │   │   ├── Dashboard.tsx
    │   │   │   ├── DashboardHistoryItem.tsx
    │   │   │   ├── DashboardProfile.tsx
    │   │   │   ├── DashboardRecentTransactions.tsx
    │   │   │   ├── Deposit.tsx
    │   │   │   ├── DepositFAQ.tsx
    │   │   │   ├── DepositForm.tsx
    │   │   │   ├── Ickb.tsx
    │   │   │   ├── IckbActiveOrders.tsx
    │   │   │   ├── IckbDeposit.tsx
    │   │   │   ├── IckbForm.tsx
    │   │   │   ├── IckbHistoryOrderItems.tsx
    │   │   │   ├── IckbHistoryOrders.tsx
    │   │   │   ├── IckbInfo.tsx
    │   │   │   ├── IckbMaturityItems.tsx
    │   │   │   ├── IckbModal.tsx
    │   │   │   ├── IckbOrderInfo.tsx
    │   │   │   ├── IckbOrderItem.tsx
    │   │   │   ├── IckbPendingDetail.tsx
    │   │   │   ├── IckbRecepitsItems.tsx
    │   │   │   ├── IckbStatus.tsx
    │   │   │   ├── IckbWithdraw.tsx
    │   │   │   ├── Notification.tsx
    │   │   │   ├── SkeletonLoader.tsx
    │   │   │   ├── Sorter.tsx
    │   │   │   ├── TransactionSkeleton.tsx
    │   │   │   └── Ttitle.tsx
    │   │   └── fonts/
    │   │       ├── GeistMonoVF.woff
    │   │       └── GeistVF.woff
    │   ├── context/
    │   │   └── NotificationProvider.tsx
    │   ├── cores/
    │   │   ├── config.ts
    │   │   ├── queries.ts
    │   │   ├── transaction.ts
    │   │   └── utils.ts
    │   ├── hooks/
    │   │   ├── DaoCollect.tsx
    │   │   ├── Explorer.tsx
    │   │   └── UseSorter.tsx
    │   └── utils/
    │       ├── epoch.ts
    │       └── stringUtils.ts
    └── types/
        └── apexcharts.d.ts

================================================
File: README.md
================================================
# **Nerv DAO**

## **What is Nerv DAO**

Nerv DAO is an advanced implementation of the Nervos DAO, designed to deliver a more user-friendly and accessible experience for CKB holders. By leveraging the latest wallet abstraction technologies through the Common Chain Connector (CCC), Nerv DAO provides a seamless interface that integrates with various wallets. This modern tool simplifies the process of managing deposits and withdrawals in the Nervos DAO, allowing CKB holders to protect their investments while earning rewards with ease.
<img width="100%" alt="image" src="doc-resource/preview.png">

## **What Nerv DAO Has Accomplished So Far**

Currently, Nerv DAO has successfully built and deployed a platform that integrates wallet abstraction with a wide range of wallets, including MetaMask, Unisat, OKX Wallet, and passkey wallets like JoyID. This functionality allows users from different blockchain ecosystems to easily interact with the Nervos DAO, making it a versatile and accessible solution for protecting CKBytes. Nerv DAO has also ensured that its interface is user-friendly and secure, making it simpler for users to manage their DAO interactions while safeguarding their investments.

## **What’s Next for Nerv DAO**

Looking ahead, Nerv DAO is set to introduce several new features and enhancements to further benefit the CKB community:

- **UI Optimization**: Ongoing improvements to the user interface will ensure that Nerv DAO remains intuitive and accessible, even as new features are added. The goal is to provide a seamless experience for both new and experienced users.
- **NFT Credentials**: Nerv DAO is exploring the integration of NFT credentials as a way to provide users with unique, verifiable identities and access rights within the platform. These NFT credentials could be used to represent user achievements, participation in specific events, or even governance rights within the DAO ecosystem. This feature aims to enhance user engagement and bring an additional layer of security and personalization to the Nerv DAO experience.
- **Expanded Wallet Compatibility**: Nerv DAO will continue to expand its compatibility with more wallets across various blockchain ecosystems, ensuring that users have a broad choice of platforms to interact with the Nervos DAO.

## **How to Use Nerv DAO**

To use Nerv DAO, follow these simple steps:

1. **Visit the Platform**: Go to [Nerv DAO Mainnet](https://www.nervdao.com/) to access the platform.
2. **Connect Your Wallet**: Nerv DAO supports multiple wallets like MetaMask, OKX Wallet, and JoyID. Simply choose your preferred wallet and connect it to Nerv DAO.
3. **Deposit CKBytes**: After connecting your wallet, you can deposit CKBytes into the Nervos DAO by following the on-screen instructions. The platform will guide you through the process of locking your CKBytes in a "Nervos DAO" cell.
4. **Manage Your Deposits**: Nerv DAO allows you to manage your deposits and track your rewards within the platform. You can also withdraw your CKBytes when needed by following the provided steps.
5. **Earn Rewards**: Once your CKBytes are locked in the Nervos DAO, you will start earning rewards based on the amount deposited.
6. **Redeem CKBytes**: If you want to stop staking and get your CKBytes back, you can Redeem your CKBytes(But a locking period will be applied to determine when exactly the tokens can be withdrew)

## How does the NervDAO/NervosDAO Annual Yield Rate (APY) work?

When you deposit CKB in the NervosDAO, those funds are locked in a smart contract for at least ~1 month and will earn interest immediately.

The Annual Yield Rate (APY) automatically compounds, therefore, you do not need to withdraw and redeposit funds at the end of the month to gain compounding interest.

Since NervosDAO is not staking in the traditional sense, but acts as an inflation shelter, the earned interest is automatically compounded upon withdrawing funds.

The smart contract that locks your funds into the NervosDAO calculates the following:
When you deposited the funds in the Nervos DAO.
When the withdrawal request was made.

Calculate the rewards and compounding interest for the period.

## **How to Deploy Nerv DAO**

If you are a developer and would like to deploy Nerv DAO yourself, follow these steps:

1. **Clone the Repository**: Download the code for Nerv DAO from the repository.
2. **Install Dependencies**: Navigate to the project directory and run the following commands to install the necessary packages:

   ```bash
   pnpm install
   ```

3. **Build the Project**: After installing dependencies, build the project with:

   ```bash
   pnpm run build
   ```

4. **Run the Development Server**: Finally, start the development server in development mode:

   ```bash
   pnpm run dev
   ```

By following these steps, you can customize and deploy your own instance of Nerv DAO, making it possible to explore and contribute to its development.

## **Relevant Links**

- **Nerv DAO Mainnet**: https://www.nervdao.com/
- **Nerv DAO Testnet**: https://test.nervdao.com/
- **CCC Demo**: https://app.ckbccc.com/
- **Nervos DAO Overview**: [Understanding the Nervos DAO and Cell Model](https://medium.com/nervosnetwork/understanding-the-nervos-dao-and-cell-model-d68f38272c24)
- **Deposit and Withdraw in Nervos DAO**: [Deposit and Withdraw in Nervos DAO](https://docs.ckb.dev/docs/rfcs/0023-dao-deposit-withdraw/0023-dao-deposit-withdraw)

If you have any feedback or suggestions for improving Nerv DAO, please share them in the issue section on our GitHub or join the CKB dev chat on Discord to connect with us.

Find us:

- Discord: https://discord.gg/nVWSNeqn
- Twitter: https://x.com/CKBDevrel


================================================
File: next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;


================================================
File: package.json
================================================
{
  "name": "nervdao-new",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ckb-ccc/connector-react": "^1.0.11",
    "@ckb-lumos/base": "^0.23.0",
    "@ckb-lumos/lumos": "^0.23.0",
    "@ickb/lumos-utils": "1.4.2",
    "@ickb/v1-core": "1.4.2",
    "@tanstack/react-query": "^5.59.15",
    "apexcharts": "^3.54.0",
    "framer-motion": "^11.5.4",
    "lucide-react": "^0.445.0",
    "next": "14.2.10",
    "react": "^18",
    "react-dom": "^18",
    "react-loader-spinner": "^6.1.6",
    "react-spinners": "^0.14.1",
    "react-tooltip": "^5.28.0",
    "styled-components": "^6.1.13",
    "tailwindcss-pseudo-elements": "^2.0.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.8",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@ckb-ccc/connector-react':
        specifier: ^1.0.11
        version: 1.0.11(@types/react@18.3.8)(react@18.3.1)(typescript@5.6.2)
      '@ckb-lumos/base':
        specifier: ^0.23.0
        version: 0.23.0
      '@ckb-lumos/lumos':
        specifier: ^0.23.0
        version: 0.23.0
      '@ickb/lumos-utils':
        specifier: 1.4.2
        version: 1.4.2
      '@ickb/v1-core':
        specifier: 1.4.2
        version: 1.4.2
      '@tanstack/react-query':
        specifier: ^5.59.15
        version: 5.59.15(react@18.3.1)
      apexcharts:
        specifier: ^3.54.0
        version: 3.54.1
      framer-motion:
        specifier: ^11.5.4
        version: 11.5.6(@emotion/is-prop-valid@1.2.2)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      lucide-react:
        specifier: ^0.445.0
        version: 0.445.0(react@18.3.1)
      next:
        specifier: 14.2.10
        version: 14.2.10(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      react:
        specifier: ^18
        version: 18.3.1
      react-dom:
        specifier: ^18
        version: 18.3.1(react@18.3.1)
      react-loader-spinner:
        specifier: ^6.1.6
        version: 6.1.6(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      react-spinners:
        specifier: ^0.14.1
        version: 0.14.1(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      react-tooltip:
        specifier: ^5.28.0
        version: 5.28.0(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      styled-components:
        specifier: ^6.1.13
        version: 6.1.13(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      tailwindcss-pseudo-elements:
        specifier: ^2.0.0
        version: 2.0.0(tailwindcss@3.4.12)
    devDependencies:
      '@types/node':
        specifier: ^20
        version: 20.16.5
      '@types/react':
        specifier: ^18
        version: 18.3.8
      '@types/react-dom':
        specifier: ^18
        version: 18.3.0
      eslint:
        specifier: ^8
        version: 8.57.1
      eslint-config-next:
        specifier: 14.2.8
        version: 14.2.8(eslint@8.57.1)(typescript@5.6.2)
      postcss:
        specifier: ^8
        version: 8.4.47
      tailwindcss:
        specifier: ^3.4.1
        version: 3.4.12
      typescript:
        specifier: ^5
        version: 5.6.2

packages:

  '@adraffy/ens-normalize@1.10.1':
    resolution: {integrity: sha512-96Z2IP3mYmF1Xg2cDm8f1gWGf/HUVedQ3FMifV4kG/PQ4yEP51xDtRAEfhVNt5f/uzpNkZHwWQuUcu6D6K+Ekw==}

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@ckb-ccc/ccc@1.1.3':
    resolution: {integrity: sha512-roriRWLg1YlW7x8LETIKK88DAVbkP8KguKiHYGHXUaDW0ck2sDc4obLSexTsMuW5AFL7NS3EHfez2/b9P3Elew==}

  '@ckb-ccc/connector-react@1.0.11':
    resolution: {integrity: sha512-vhINHFXQh0++9quDYr3gkQkQy1dX7SjKChtMBeHkE0PIU3VKql54/ZuVSQCoHIDhceMQ9/zxs9VLmqwSdoPy1w==}
    peerDependencies:
      react: '>=16'

  '@ckb-ccc/connector@1.0.11':
    resolution: {integrity: sha512-E8sOlZnW18/W4XLwmfg2OXfzrNTx7CUhroaUjQAAvPSL8YzIB1F7m12WUSIfVG/gTT4wdQBCqF8Rj8Y6QFbOQQ==}

  '@ckb-ccc/core@1.5.0':
    resolution: {integrity: sha512-4ccRWgXjapumfIw6iBMfbcaSA6AesMGCf8dAD1XshP1utcFkBNGZx0ANAillF4/tAIj2ZqOT6P56iP5R2ZpCog==}

  '@ckb-ccc/eip6963@1.0.11':
    resolution: {integrity: sha512-D83XqWEV4WME033NNuMpWslMbEd1ysiTZElJdC4UZ0Q/FOiLuGrmLM67uDbmXL6qwed5buaNuX+yyjWg3DC5NA==}

  '@ckb-ccc/joy-id@1.0.11':
    resolution: {integrity: sha512-wbK5+Sapw965GG0s7IkHOjO6Js8s5Y7j7owMpab/IOWkuTJAtB2pmi5DKsCshsrV5KwnLk0xmGq2SwKXAs1B2Q==}

  '@ckb-ccc/nip07@1.0.11':
    resolution: {integrity: sha512-MmHnPwF0QwGdSNGlyrHeT2QfafXEnf0dHxpUyg0qeL/2aoJqET0HILodFOcT57WPD3d7//ljylxh3z9hzyfejQ==}

  '@ckb-ccc/okx@1.0.11':
    resolution: {integrity: sha512-gPXV/h0BNidwK7uMa2E/rocLKcTx93kZe9m+DfWTyououDwHwZbFVwMrI7oWB5pO6znffWqzd2D7woY3KjmBIg==}

  '@ckb-ccc/rei@1.0.11':
    resolution: {integrity: sha512-MIw/k5GPapjI3PWvXLtmRnZswVS0ofi8zs7AljrzglC23jTPuQTOWQsE0VjYdXav+y15K89b900xXRjZ4ASNwQ==}

  '@ckb-ccc/shell@1.1.3':
    resolution: {integrity: sha512-mG/YxRALrWJ4FKdEJQEygb/2NF67oLZN/MM0YxkkiyUnXdKJO8zhbtlBtXpPrluXsRzYlrcGcKmx86eZmu3Myw==}

  '@ckb-ccc/spore@1.2.1':
    resolution: {integrity: sha512-C3LzBK3ldkEmhzDAvNLLzll+aHtQf9bsn7joNrQcoCQIPOaROji/XuOKQBQJXpBvy0sE4R5Mj9tdudVI34M8Hg==}

  '@ckb-ccc/ssri@0.2.1':
    resolution: {integrity: sha512-mDnikY3ABZ79E/de1ZCLK0EDDLJ3ikUw5Czq659yE6IusHF4qBQQj/urErayPo4GANye3ggpjZWlIkdh/GP5KA==}

  '@ckb-ccc/udt@0.1.3':
    resolution: {integrity: sha512-kBGpb/BwNUbXR0274XkyDLpFBiS5yQBgYrfLFbxF74vSGvZ2WCDk+y6/B88R4tXv0lpuuvfzjeBlRKasTTJBXg==}

  '@ckb-ccc/uni-sat@1.0.11':
    resolution: {integrity: sha512-UFOu9KhGdatp8+B4KgD3uuGZpwKrVnvJDTiX51TKWVf0D6mBErrAyvvF2H+JylfOEFE1qbQ+g7picmVRVb01vA==}

  '@ckb-ccc/utxo-global@1.0.11':
    resolution: {integrity: sha512-XEGWF3netwvIR1Vp63+MN1dz9L07i9663BEj/mmBWN4NJCLRC8qG+uevg9PYSs4e38I95QJmbL7gU8Rt4M9buQ==}

  '@ckb-ccc/xverse@1.0.11':
    resolution: {integrity: sha512-X/RF2VXMiaMIK19kOny5g01smqb5gMnU5kIGT8UkjYCiyiy7MAsLKyAebLTJvWeYOmTOGXmMXbCMqQKfYRPQ+w==}

  '@ckb-lumos/base@0.23.0':
    resolution: {integrity: sha512-8aLFsUyWIK0rT7GQlYFuXyiG5lQ2bLRK2GvUsxv5G7I3nJ1UyxjwvVOdtlsR/cwhzOam3ujwqASqBIayBL6GLA==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/bi@0.23.0':
    resolution: {integrity: sha512-KAy+lyVpL+Al4XD+c9tHrA9DSpHkMusyXtTS81aNZi5MyL6F9jrVmFcqLorhfyfl8Fsv2sEjMe5Neo2Y+w/RJQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/ckb-indexer@0.23.0':
    resolution: {integrity: sha512-yLODLJzvtz4M6W6OJR4iRbBTUGrKReV2dhVePPjbH/HRkRY6f6J6cEM9+qM2I3QABmaCXeAM3hWvnWU9hjalQQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/codec@0.23.0':
    resolution: {integrity: sha512-FwYooXnsFDjlHHnlFnCTB1UbBzV72I0VjkRpeauFk5nQ4+/75xl28ywK3J14M+0aHTnYU9msXUTRDAGqC0CaNQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/common-scripts@0.23.0':
    resolution: {integrity: sha512-Dwic0Al94afdGNu+TGAMmZiU5OVF/zvXbzhCvNmkFS25t8BxPdFjGEc0MlWBI4ZSEoGRrC0O+BOxjzfl5VxSYg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/config-manager@0.23.0':
    resolution: {integrity: sha512-MvNyzGIJTmIpEf5WJB3TkE4icZyZ2HZhFIfJB2SXDRAC84E02jxENPelCnqRbM1rlFHnxjh/5a/oCi5LcXefag==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/hd@0.23.0':
    resolution: {integrity: sha512-z7EsR/GeX54hq4ukqwW3nrqLCsYrTWIFAjZLR1Ao8xycqQp0IBjCWZLLjRrZY6krbUQpVOoiKo3NBLpPW36LXg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/helpers@0.23.0':
    resolution: {integrity: sha512-yfD28vSn1BBk8BA+/ivL7pF3rMsx4OPQ+UUJjsQiR1zGdkNR3zhJOecgICeddJGYDTBBDVgwHcuyoekLxQzmGg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/light-client@0.23.0':
    resolution: {integrity: sha512-O+dbfubDjl0iODiQ8Q+RVJLfuXYNCN6c0am8xEv4vvazLwfw1y/vn6fG/pFu9Mc1GahZ58y9o6fkUgs8ujH3Mg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/lumos@0.23.0':
    resolution: {integrity: sha512-ocsmzgTgevVwyQeQkUZrg4PLJCfX48D5MEBNYTMoGh5b1g0f1iEBHcAgw4WBGOKgMJQmGRmWB5P6tPDZ3OZBwQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/rpc@0.23.0':
    resolution: {integrity: sha512-NEY1Wb2cNMYdHwcZYtd8XZ3CP6WGPd25hcsudoDAFlAt9vjHsPlNiwSS7tcZCZfg1XiJy3taViVgG8pFemgpbA==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/toolkit@0.23.0':
    resolution: {integrity: sha512-7LTsUFfoNCBWJLgh+V/QFnemjGw+y4mmLeQvubwYuJqIPIhIpwKUuKRzkvVG8snA8xVQSfjSSQOs5m3mKp66Kg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/transaction-manager@0.23.0':
    resolution: {integrity: sha512-sfwt2g8JlYxr5jRx5r/UZNffTpkwn3sh4dD2THzKmX0S1CsSgww2D1ZD7yruWwSu05ZLKlDPFVKyJ50tNc3LuQ==}
    engines: {node: '>=12.0.0'}

  '@emotion/is-prop-valid@1.2.2':
    resolution: {integrity: sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==}

  '@emotion/memoize@0.8.1':
    resolution: {integrity: sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==}

  '@emotion/unitless@0.8.1':
    resolution: {integrity: sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==}

  '@eslint-community/eslint-utils@4.4.0':
    resolution: {integrity: sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.11.1':
    resolution: {integrity: sha512-m4DVN9ZqskZoLU5GlWZadwDnYo3vAEydiUayB9widCl9ffWx2IvPnp6n3on5rJmziJSw9Bv+Z3ChDVdMwXCY8Q==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/eslintrc@2.1.4':
    resolution: {integrity: sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@eslint/js@8.57.1':
    resolution: {integrity: sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@floating-ui/core@1.6.8':
    resolution: {integrity: sha512-7XJ9cPU+yI2QeLS+FCSlqNFZJq8arvswefkZrYI1yQBbftw6FyrZOxYSh+9S7z7TpeWlRt9zJ5IhM1WIL334jA==}

  '@floating-ui/dom@1.6.11':
    resolution: {integrity: sha512-qkMCxSR24v2vGkhYDo/UzxfJN3D4syqSjyuTFz6C7XcpU1pASPRieNI0Kj5VP3/503mOfYiGY891ugBX1GlABQ==}

  '@floating-ui/utils@0.2.8':
    resolution: {integrity: sha512-kym7SodPp8/wloecOpcmSnWJsK7M0E5Wg8UcFA+uO4B9s5d0ywXOEro/8HM9x0rW+TljRzul/14UYz3TleT3ig==}

  '@humanwhocodes/config-array@0.13.0':
    resolution: {integrity: sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==}
    engines: {node: '>=10.10.0'}
    deprecated: Use @eslint/config-array instead

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/object-schema@2.0.3':
    resolution: {integrity: sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==}
    deprecated: Use @eslint/object-schema instead

  '@ickb/lumos-utils@1.4.2':
    resolution: {integrity: sha512-sN9wZ5U9sUhK/hvLkRH7TpTgbweszLKNSOSJ6Ber9EKVqyQ0eD7qnJlGzDudmHt1Z/uEPlWBvD0cYOi61sK8Dg==}

  '@ickb/v1-core@1.4.2':
    resolution: {integrity: sha512-39UKHX2DnCO9fWvM2nqLnDHLzHFSNuaWmTnNfc8Tg4/XD/1iNhafKsqcQXtExcHXji5iUPtAbGWqA4H8beIlhw==}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@joyid/ckb@1.0.1':
    resolution: {integrity: sha512-pKAJouigChqcwKgtLw4RNOwi+nBh3NVjpU+qZd+uu3wmoTpivnSRLbJH8/SlkgQcWn2aJ+mDJchR8GpQYh5H6Q==}

  '@joyid/common@0.2.0':
    resolution: {integrity: sha512-WBZtgdEccWxjiGHIoDgRFIbnC42ZvmfvFRCTxmx9D4BLvtiFdhAa+g70lUmiHwO28GjgHIHgzHRGNRdLuk81xw==}

  '@jridgewell/gen-mapping@0.3.5':
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@lit-labs/ssr-dom-shim@1.2.1':
    resolution: {integrity: sha512-wx4aBmgeGvFmOKucFKY+8VFJSYZxs9poN3SDNQFF6lT6NrQUnHiPB2PWz2sc4ieEcAaYYzN+1uWahEeTq2aRIQ==}

  '@lit/react@1.0.5':
    resolution: {integrity: sha512-RSHhrcuSMa4vzhqiTenzXvtQ6QDq3hSPsnHHO3jaPmmvVFeoNNm4DHoQ0zLdKAUvY3wP3tTENSUf7xpyVfrDEA==}
    peerDependencies:
      '@types/react': 17 || 18

  '@lit/reactive-element@2.0.4':
    resolution: {integrity: sha512-GFn91inaUa2oHLak8awSIigYz0cU0Payr1rcFsrkf5OJ5eSPxElyZfKh0f2p9FsTiZWXQdWGJeXZICEfXXYSXQ==}

  '@nervosnetwork/ckb-sdk-utils@0.109.3':
    resolution: {integrity: sha512-sV3WXlZmd765qtFsXpwl0Bl3hOgGev15Og810acO6iC0cVHEVvv/Uiabd8a2xkqyfziRDI0tfWC0DewOJB28rg==}

  '@nervosnetwork/ckb-types@0.109.3':
    resolution: {integrity: sha512-i9EVTXCT0bTLpAQXAoF5zHGLWYCXNE5AP4Zl0Niwl3ZplaVAZHNU6ygsh2O3EGmCFv5qlkoY2DuLmsjysEaNLA==}

  '@next/env@14.2.10':
    resolution: {integrity: sha512-dZIu93Bf5LUtluBXIv4woQw2cZVZ2DJTjax5/5DOs3lzEOeKLy7GxRSr4caK9/SCPdaW6bCgpye6+n4Dh9oJPw==}

  '@next/eslint-plugin-next@14.2.8':
    resolution: {integrity: sha512-ue5vcq9Fjk3asACRDrzYjcGMEN7pMMDQ5zUD+FenkqvlPCVUD1x7PxBNOLfPYDZOrk/Vnl4GHmjj2mZDqPW8TQ==}

  '@next/swc-darwin-arm64@14.2.10':
    resolution: {integrity: sha512-V3z10NV+cvMAfxQUMhKgfQnPbjw+Ew3cnr64b0lr8MDiBJs3eLnM6RpGC46nhfMZsiXgQngCJKWGTC/yDcgrDQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@next/swc-darwin-x64@14.2.10':
    resolution: {integrity: sha512-Y0TC+FXbFUQ2MQgimJ/7Ina2mXIKhE7F+GUe1SgnzRmwFY3hX2z8nyVCxE82I2RicspdkZnSWMn4oTjIKz4uzA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@next/swc-linux-arm64-gnu@14.2.10':
    resolution: {integrity: sha512-ZfQ7yOy5zyskSj9rFpa0Yd7gkrBnJTkYVSya95hX3zeBG9E55Z6OTNPn1j2BTFWvOVVj65C3T+qsjOyVI9DQpA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-arm64-musl@14.2.10':
    resolution: {integrity: sha512-n2i5o3y2jpBfXFRxDREr342BGIQCJbdAUi/K4q6Env3aSx8erM9VuKXHw5KNROK9ejFSPf0LhoSkU/ZiNdacpQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-x64-gnu@14.2.10':
    resolution: {integrity: sha512-GXvajAWh2woTT0GKEDlkVhFNxhJS/XdDmrVHrPOA83pLzlGPQnixqxD8u3bBB9oATBKB//5e4vpACnx5Vaxdqg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-linux-x64-musl@14.2.10':
    resolution: {integrity: sha512-opFFN5B0SnO+HTz4Wq4HaylXGFV+iHrVxd3YvREUX9K+xfc4ePbRrxqOuPOFjtSuiVouwe6uLeDtabjEIbkmDA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-win32-arm64-msvc@14.2.10':
    resolution: {integrity: sha512-9NUzZuR8WiXTvv+EiU/MXdcQ1XUvFixbLIMNQiVHuzs7ZIFrJDLJDaOF1KaqttoTujpcxljM/RNAOmw1GhPPQQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@next/swc-win32-ia32-msvc@14.2.10':
    resolution: {integrity: sha512-fr3aEbSd1GeW3YUMBkWAu4hcdjZ6g4NBl1uku4gAn661tcxd1bHs1THWYzdsbTRLcCKLjrDZlNp6j2HTfrw+Bg==}
    engines: {node: '>= 10'}
    cpu: [ia32]
    os: [win32]

  '@next/swc-win32-x64-msvc@14.2.10':
    resolution: {integrity: sha512-UjeVoRGKNL2zfbcQ6fscmgjBAS/inHBh63mjIlfPg/NG8Yn2ztqylXt5qilYb6hoHIwaU2ogHknHWWmahJjgZQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@noble/ciphers@0.5.3':
    resolution: {integrity: sha512-B0+6IIHiqEs3BPMT0hcRmHvEj2QHOLu+uwt+tqDDeVd0oyVzh7BPrDcPjRnV1PV/5LaknXJJQvOuRGR0zQJz+w==}

  '@noble/curves@1.2.0':
    resolution: {integrity: sha512-oYclrNgRaM9SsBUBVbb8M6DTV7ZHRTKugureoYEncY5c65HOmRzvSiTE3y5CYaPYJA/GVkrhXEoF0M3Ya9PMnw==}

  '@noble/curves@1.6.0':
    resolution: {integrity: sha512-TlaHRXDehJuRNR9TfZDNQ45mMEd5dwUwmicsafcIX4SsNiqnCHKjE/1alYPd/lDRVhxdhUAlv8uEhMCI5zjIJQ==}
    engines: {node: ^14.21.3 || >=16}

  '@noble/hashes@1.3.2':
    resolution: {integrity: sha512-MVC8EAQp7MvEcm30KWENFjgR+Mkmf+D189XJTkFIlwohU5hcBbn1ZkKq7KVTi2Hme3PMGF390DaL52beVrIihQ==}
    engines: {node: '>= 16'}

  '@noble/hashes@1.5.0':
    resolution: {integrity: sha512-1j6kQFb7QRru7eKN3ZDvRcP13rugwdxZqCjbiAVZfIJwgj2A65UmT4TgARXGlXgnRkORLTDTrO19ZErt7+QXgA==}
    engines: {node: ^14.21.3 || >=16}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nolyfill/is-core-module@1.0.39':
    resolution: {integrity: sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==}
    engines: {node: '>=12.4.0'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@rtsao/scc@1.1.0':
    resolution: {integrity: sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==}

  '@rushstack/eslint-patch@1.10.4':
    resolution: {integrity: sha512-WJgX9nzTqknM393q1QJDJmoW28kUfEnybeTfVNcNAPnIx210RXm2DiXiHzfNPJNIUUb1tJnz/l4QGtJ30PgWmA==}

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/helpers@0.5.5':
    resolution: {integrity: sha512-KGYxvIOXcceOAbEk4bi/dVLEK9z8sZ0uBB3Il5b1rhfClSpcX0yfRO0KmTkqR2cnQDymwLB+25ZyMzICg/cm/A==}

  '@tanstack/query-core@5.59.13':
    resolution: {integrity: sha512-Oou0bBu/P8+oYjXsJQ11j+gcpLAMpqW42UlokQYEz4dE7+hOtVO9rVuolJKgEccqzvyFzqX4/zZWY+R/v1wVsQ==}

  '@tanstack/react-query@5.59.15':
    resolution: {integrity: sha512-QbVlAkTI78wB4Mqgf2RDmgC0AOiJqer2c5k9STOOSXGv1S6ZkY37r/6UpE8DbQ2Du0ohsdoXgFNEyv+4eDoPEw==}
    peerDependencies:
      react: ^18 || ^19

  '@types/blake2b@2.1.3':
    resolution: {integrity: sha512-MFCdX0MNxFBP/xEILO5Td0kv6nI7+Q2iRWZbTL/yzH2/eDVZS5Wd1LHdsmXClvsCyzqaZfHFzZaN6BUeUCfSDA==}

  '@types/deep-freeze-strict@1.1.2':
    resolution: {integrity: sha512-VvMETBojHvhX4f+ocYTySQlXMZfxKV3Jyb7iCWlWaC+exbedkv6Iv2bZZqI736qXjVguH6IH7bzwMBMfTT+zuQ==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/json5@0.0.29':
    resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}

  '@types/lodash.isequal@4.5.8':
    resolution: {integrity: sha512-uput6pg4E/tj2LGxCZo9+y27JNyB2OZuuI/T5F+ylVDYuqICLG2/ktjxx0v6GvVntAf8TvEzeQLcV0ffRirXuA==}

  '@types/lodash@4.17.12':
    resolution: {integrity: sha512-sviUmCE8AYdaF/KIHLDJBQgeYzPBI0vf/17NaYehBJfYD1j6/L95Slh07NlyK2iNyBNaEkb3En2jRt+a8y3xZQ==}

  '@types/node@18.15.13':
    resolution: {integrity: sha512-N+0kuo9KgrUQ1Sn/ifDXsvg0TTleP7rIy4zOBGECxAljqvqfqpTfzx0Q1NUedOixRMBfe2Whhb056a42cWs26Q==}

  '@types/node@20.16.5':
    resolution: {integrity: sha512-VwYCweNo3ERajwy0IUlqqcyZ8/A7Zwa9ZP3MnENWcB11AejO+tLy3pu850goUW2FC/IJMdZUfKpX/yxL1gymCA==}

  '@types/prop-types@15.7.13':
    resolution: {integrity: sha512-hCZTSvwbzWGvhqxp/RqVqwU999pBf2vp7hzIjiYOsl8wqOmUxkQ6ddw1cV3l8811+kdUFus/q4d1Y3E3SyEifA==}

  '@types/react-dom@18.3.0':
    resolution: {integrity: sha512-EhwApuTmMBmXuFOikhQLIBUn6uFg81SwLMOAUgodJF14SOBOCMdU04gDoYi0WOJJHD144TL32z4yDqCW3dnkQg==}

  '@types/react@18.3.8':
    resolution: {integrity: sha512-syBUrW3/XpnW4WJ41Pft+I+aPoDVbrBVQGEnbD7NijDGlVC+8gV/XKRY+7vMDlfPpbwYt0l1vd/Sj8bJGMbs9Q==}

  '@types/semver@7.5.8':
    resolution: {integrity: sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==}

  '@types/stylis@4.2.5':
    resolution: {integrity: sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==}

  '@types/trusted-types@2.0.7':
    resolution: {integrity: sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==}

  '@typescript-eslint/eslint-plugin@7.2.0':
    resolution: {integrity: sha512-mdekAHOqS9UjlmyF/LSs6AIEvfceV749GFxoBAjwAv0nkevfKHWQFDMcBZWUiIC5ft6ePWivXoS36aKQ0Cy3sw==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      '@typescript-eslint/parser': ^7.0.0
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@7.2.0':
    resolution: {integrity: sha512-5FKsVcHTk6TafQKQbuIVkXq58Fnbkd2wDL4LB7AURN7RUOu1utVP+G8+6u3ZhEroW3DF6hyo3ZEXxgKgp4KeCg==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/scope-manager@7.2.0':
    resolution: {integrity: sha512-Qh976RbQM/fYtjx9hs4XkayYujB/aPwglw2choHmf3zBjB4qOywWSdt9+KLRdHubGcoSwBnXUH2sR3hkyaERRg==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/type-utils@7.2.0':
    resolution: {integrity: sha512-xHi51adBHo9O9330J8GQYQwrKBqbIPJGZZVQTHHmy200hvkLZFWJIFtAG/7IYTWUyun6DE6w5InDReePJYJlJA==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/types@7.2.0':
    resolution: {integrity: sha512-XFtUHPI/abFhm4cbCDc5Ykc8npOKBSJePY3a3s+lwumt7XWJuzP5cZcfZ610MIPHjQjNsOLlYK8ASPaNG8UiyA==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/typescript-estree@7.2.0':
    resolution: {integrity: sha512-cyxS5WQQCoBwSakpMrvMXuMDEbhOo9bNHHrNcEWis6XHx6KF518tkF1wBvKIn/tpq5ZpUYK7Bdklu8qY0MsFIA==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/utils@7.2.0':
    resolution: {integrity: sha512-YfHpnMAGb1Eekpm3XRK8hcMwGLGsnT6L+7b2XyRv6ouDuJU1tZir1GS2i0+VXRatMwSI1/UfcyPe53ADkU+IuA==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^8.56.0

  '@typescript-eslint/visitor-keys@7.2.0':
    resolution: {integrity: sha512-c6EIQRHhcpl6+tO8EMR+kjkkV+ugUNXOmeASA1rlzkd8EPIriavpWoiEz1HR/VLhbVIdhqnV6E7JZm00cBDx2A==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@ungap/structured-clone@1.2.0':
    resolution: {integrity: sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==}

  '@yr/monotone-cubic-spline@1.0.3':
    resolution: {integrity: sha512-FQXkOta0XBSUPHndIKON2Y9JeQz5ZeMqLYZVVK93FliNBFm7LNMIZmY6FrMEB9XPcDbE2bekMbZD6kzDkxwYjA==}

  abitype@0.8.7:
    resolution: {integrity: sha512-wQ7hV8Yg/yKmGyFpqrNZufCxbszDe5es4AZGYPBitocfSqXtjrTG9JMWFcc4N30ukl2ve48aBTwt7NJxVQdU3w==}
    peerDependencies:
      typescript: '>=5.0.4'
      zod: ^3 >=3.19.1
    peerDependenciesMeta:
      zod:
        optional: true

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn@8.12.1:
    resolution: {integrity: sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  aes-js@4.0.0-beta.5:
    resolution: {integrity: sha512-G965FqalsNyrPqgEGON7nIx1e/OVENSgiEIzyC63haUMuvNnwIgIjMs52hlTCKhkBny7A2ORNlfY9Zu+jmGk1Q==}

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  apexcharts@3.54.1:
    resolution: {integrity: sha512-E4et0h/J1U3r3EwS/WlqJCQIbepKbp6wGUmaAwJOMjHUP4Ci0gxanLa7FR3okx6p9coi4st6J853/Cb1NP0vpA==}

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  aria-query@5.1.3:
    resolution: {integrity: sha512-R5iJ5lkuHybztUfuOAznmboyjWq8O6sqNqtK7CLOqdydi54VNbORp49mb14KbWgG1QD3JFO9hJdZ+y4KutfdOQ==}

  array-buffer-byte-length@1.0.1:
    resolution: {integrity: sha512-ahC5W1xgou+KTXix4sAO8Ki12Q+jf4i0+tmk3sC+zgcynshkHxzpXdImBehiUYKKKDwvfFiJl1tZt6ewscS1Mg==}
    engines: {node: '>= 0.4'}

  array-includes@3.1.8:
    resolution: {integrity: sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==}
    engines: {node: '>= 0.4'}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  array.prototype.findlast@1.2.5:
    resolution: {integrity: sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlastindex@1.2.5:
    resolution: {integrity: sha512-zfETvRFA8o7EiNn++N5f/kaCw221hrpGsDmcpndVupkPzEc1Wuf3VgC0qby1BbHs7f5DVYjgtEU2LLh5bqeGfQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.2:
    resolution: {integrity: sha512-djYB+Zx2vLewY8RWlNCUdHjDXs2XOgm602S9E7P/UpHgfeHL00cRiIF+IN/G/aUJ7kGPb6yO/ErDI5V2s8iycA==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.2:
    resolution: {integrity: sha512-Ewyx0c9PmpcsByhSW4r+9zDU7sGjFc86qf/kKtuSCRdhfbk0SNLLkaT5qvcHnRGgc5NP/ly/y+qkXkqONX54CQ==}
    engines: {node: '>= 0.4'}

  array.prototype.tosorted@1.1.4:
    resolution: {integrity: sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.3:
    resolution: {integrity: sha512-bMxMKAjg13EBSVscxTaYA4mRc5t1UAXa2kXiGTNfZ079HIWXEkKmkgFrh/nJqamaLSrXO5H4WFFkPEaLJWbs3A==}
    engines: {node: '>= 0.4'}

  ast-types-flow@0.0.8:
    resolution: {integrity: sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  axe-core@4.10.0:
    resolution: {integrity: sha512-Mr2ZakwQ7XUAjp7pAwQWRhhK8mQQ6JAaNWSjmjxil0R8BPioMtQsTLOolGYkji1rcL++3dCqZA3zWqpT+9Ew6g==}
    engines: {node: '>=4'}

  axios@1.7.9:
    resolution: {integrity: sha512-LhLcE7Hbiryz8oMDdDptSrWowmB4Bl6RCt6sIJKpRB4XtVf0iEgewX3au/pJqm+Py1kCASkb/FFKjxQaLtxJvw==}

  axobject-query@4.1.0:
    resolution: {integrity: sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==}
    engines: {node: '>= 0.4'}

  b4a@1.6.7:
    resolution: {integrity: sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base-x@3.0.10:
    resolution: {integrity: sha512-7d0s06rR9rYaIWHkpfLIFICM/tkSVdoPC9qYAQRpxn9DdKNWNsKC0uk++akckyLq16Tx2WIinnZ6WRriAt6njQ==}

  base-x@4.0.0:
    resolution: {integrity: sha512-FuwxlW4H5kh37X/oW59pwTzzTKRzfrrQwhmyspRM7swOEZcHtDZSCt45U6oKgtuFE+WYPblePMVIPR4RZrh/hw==}

  base-x@5.0.0:
    resolution: {integrity: sha512-sMW3VGSX1QWVFA6l8U62MLKz29rRfpTlYdCqLdpLo1/Yd4zZwSbnUaDfciIAowAqvq7YFnWq9hrhdg1KYgc1lQ==}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  bech32@1.1.4:
    resolution: {integrity: sha512-s0IrSOzLlbvX7yp4WBfPITzpAU8sqQcpsmwXDiKwrG4r491vwCO/XpejasRNl0piBMe/DvP4Tz0mIS/X1DPJBQ==}

  bech32@2.0.0:
    resolution: {integrity: sha512-LcknSilhIGatDAsY1ak2I8VtGaHNhgMSYVxFrGLXv+xLHytaKZKcaUJJUE7qmBr7h33o5YQwP55pMI0xmkpJwg==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  bindings@1.5.0:
    resolution: {integrity: sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==}

  bip66@1.1.5:
    resolution: {integrity: sha512-nemMHz95EmS38a26XbbdxIYj5csHd3RMP3H5bwQknX0WYHF01qhpufP42mLOwVICuH2JmhIhXiWs89MfUGL7Xw==}

  bitcoinjs-message@2.2.0:
    resolution: {integrity: sha512-103Wy3xg8Y9o+pdhGP4M3/mtQQuUWs6sPuOp1mYphSUoSMHjHTlkj32K4zxU8qMH0Ckv23emfkGlFWtoWZ7YFA==}
    engines: {node: '>=0.10'}

  blake2b-wasm@2.4.0:
    resolution: {integrity: sha512-S1kwmW2ZhZFFFOghcx73+ZajEfKBqhP82JMssxtLVMxlaPea1p9uoLiUZ5WYyHn0KddwbLc+0vh4wR0KBNoT5w==}

  blake2b@2.1.4:
    resolution: {integrity: sha512-AyBuuJNI64gIvwx13qiICz6H6hpmjvYS5DGkG6jbXMOT8Z3WUJ3V1X0FlhIoT1b/5JtHE3ki+xjtMvu1nn+t9A==}

  bn.js@4.12.0:
    resolution: {integrity: sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA==}

  bn.js@5.2.1:
    resolution: {integrity: sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ==}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  brorand@1.1.0:
    resolution: {integrity: sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==}

  browserify-aes@1.2.0:
    resolution: {integrity: sha512-+7CHXqGuspUn/Sl5aO7Ea0xWGAtETPXNSAjHo48JfLdPWcMng33Xe4znFvQweqc/uzk5zSOI3H52CYnjCfb5hA==}

  bs58@4.0.1:
    resolution: {integrity: sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==}

  bs58@5.0.0:
    resolution: {integrity: sha512-r+ihvQJvahgYT50JD05dyJNKlmmSlMoOGwn1lCcEzanPglg7TxYjioQUYehQ9mAR/+hOSd2jRc/Z2y5UxBymvQ==}

  bs58@6.0.0:
    resolution: {integrity: sha512-PD0wEnEYg6ijszw/u8s+iI3H17cTymlrwkKhDhPZq+Sokl3AU4htyBFTjAeNAlCCmg0f53g6ih3jATyCKftTfw==}

  bs58check@2.1.2:
    resolution: {integrity: sha512-0TS1jicxdU09dwJMNZtVAfzPi6Q6QeN0pM1Fkzrjn+XYHvzMKPU3pHVpva+769iNVSfIYWf7LJ6WR+BuuMf8cA==}

  bs58check@4.0.0:
    resolution: {integrity: sha512-FsGDOnFg9aVI9erdriULkd/JjEWONV/lQE5aYziB5PoBsXRind56lh8doIZIc9X4HoxT5x4bLjMWN1/NB8Zp5g==}

  buffer-equals@1.0.4:
    resolution: {integrity: sha512-99MsCq0j5+RhubVEtKQgKaD6EM+UP3xJgIvQqwJ3SOLDUekzxMX1ylXBng+Wa2sh7mGT0W6RUly8ojjr1Tt6nA==}
    engines: {node: '>=0.10.0'}

  buffer-xor@1.0.3:
    resolution: {integrity: sha512-571s0T7nZWK6vB67HI5dyUF7wXiNcfaPPPTl6zYCNApANjIvYJTg7hlud/+cJpdAhS7dVzqMLmfhfHR3rAcOjQ==}

  buffer@6.0.3:
    resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  call-bind@1.0.7:
    resolution: {integrity: sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}

  camelize@1.0.1:
    resolution: {integrity: sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==}

  caniuse-lite@1.0.30001662:
    resolution: {integrity: sha512-sgMUVwLmGseH8ZIrm1d51UbrhqMCH3jvS7gF/M6byuHOnKyLOBL7W8yz5V02OHwgLGA36o/AFhWzzh4uc5aqTA==}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  cipher-base@1.0.4:
    resolution: {integrity: sha512-Kkht5ye6ZGmwv40uUDZztayT2ThLQGfnj/T71N/XzeZeo3nf8foyW7zGTsPYkEya3m5f3cAypH+qe7YOrM1U2Q==}

  classnames@2.5.1:
    resolution: {integrity: sha512-saHYOzhIQs6wy2sVxTM6bUDsQO4F50V9RQ22qBpEdCW+I+/Wmke2HOl6lS6dTpdxVhb88/I6+Hs+438c3lfUow==}

  client-only@0.0.1:
    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  create-hash@1.2.0:
    resolution: {integrity: sha512-z00bCGNHDG8mHAkP7CtT1qVu+bFQUPjYq/4Iv3C3kWjTFV10zIjfSoeqXo9Asws8gwSHDGj/hl2u4OGIjapeCg==}

  create-hmac@1.1.7:
    resolution: {integrity: sha512-MJG9liiZ+ogc4TzUwuvbER1JRdgvUFSB5+VR/g5h82fGaIRWMWddtKBHi7/sVhfjQZ6SehlyhvQYrcYkaUIpLg==}

  cross-fetch@3.1.8:
    resolution: {integrity: sha512-cvA+JwZoU0Xq+h6WkMvAUqPEYy92Obet6UdKLfW60qn99ftItKjB5T+BkyWOFWe2pUyfQ+IJHmpOTznqk1M6Kg==}

  cross-fetch@4.0.0:
    resolution: {integrity: sha512-e4a5N8lVvuLgAWgnCrLr2PP0YyDOTHa9H/Rj54dirp61qXnNq46m82bRhNqIA5VccJtWBvPTFRV3TtvHUKPB1g==}

  cross-spawn@7.0.3:
    resolution: {integrity: sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==}
    engines: {node: '>= 8'}

  css-color-keywords@1.0.0:
    resolution: {integrity: sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==}
    engines: {node: '>=4'}

  css-to-react-native@3.2.0:
    resolution: {integrity: sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  damerau-levenshtein@1.0.8:
    resolution: {integrity: sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==}

  data-view-buffer@1.0.1:
    resolution: {integrity: sha512-0lht7OugA5x3iJLOWFhWK/5ehONdprk0ISXqVFn/NFrDu+cuc8iADFrGQz5BnRK7LLU3JmkbXSxaqX+/mXYtUA==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.1:
    resolution: {integrity: sha512-4J7wRJD3ABAzr8wP+OcIcqq2dlUKp4DVflx++hs5h5ZKydWMI6/D/fAot+yh6g2tHh8fLFTvNOaVN357NvSrOQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.0:
    resolution: {integrity: sha512-t/Ygsytq+R995EJ5PZlD4Cu56sWa8InXySaViRzw9apusqsOO2bQP+SbYzAhR0pFKoB+43lYy8rWban9JSuXnA==}
    engines: {node: '>= 0.4'}

  debug@3.2.7:
    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.3.7:
    resolution: {integrity: sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  deep-equal@2.2.3:
    resolution: {integrity: sha512-ZIwpnevOurS8bpT4192sqAowWM76JDKSHYzMLty3BZGSswgq6pBaH3DhCSW5xVAZICZyKdOBPjwww5wfgT/6PA==}
    engines: {node: '>= 0.4'}

  deep-freeze-strict@1.1.1:
    resolution: {integrity: sha512-QemROZMM2IvhAcCFvahdX2Vbm4S/txeq5rFYU9fh4mQP79WTMW5c/HkQ2ICl1zuzcDZdPZ6zarDxQeQMsVYoNA==}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  doctrine@3.0.0:
    resolution: {integrity: sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==}
    engines: {node: '>=6.0.0'}

  drbg.js@1.0.1:
    resolution: {integrity: sha512-F4wZ06PvqxYLFEZKkFxTDcns9oFNk34hvmJSEwdzsxVQ8YI5YaxtACgQatkYgv2VI2CFkUd2Y+xosPQnHv809g==}
    engines: {node: '>=0.10'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  elliptic@6.5.4:
    resolution: {integrity: sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==}

  elliptic@6.5.7:
    resolution: {integrity: sha512-ESVCtTwiA+XhY3wyh24QqRGBoP3rEdDUl3EDUUo9tft074fi19IrdpH7hLCMMP3CIj7jb3W96rn8lt/BqIlt5Q==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  enhanced-resolve@5.17.1:
    resolution: {integrity: sha512-LMHl3dXhTcfv8gM4kEzIUeTQ+7fpdA0l2tUf34BddXPkz2A5xJ5L/Pchd5BL6rdccM9QGvu0sWZzK1Z1t4wwyg==}
    engines: {node: '>=10.13.0'}

  es-abstract@1.23.3:
    resolution: {integrity: sha512-e+HfNH61Bj1X9/jLc5v1owaLYuHdeHHSQlkhCBiTK8rBvKaULl/beGMxwrMXjpYrv4pz22BlY570vVePA2ho4A==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.0:
    resolution: {integrity: sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-get-iterator@1.1.3:
    resolution: {integrity: sha512-sPZmqHBe6JIiTfN5q2pEi//TwxmAFHwj/XEuYjTuse78i8KxaqMTTzxPoFKuzRpDpTJ+0NAbpfenkmH2rePtuw==}

  es-iterator-helpers@1.0.19:
    resolution: {integrity: sha512-zoMwbCcH5hwUkKJkT8kDIBZSz9I6mVG//+lDCinLCGov4+r7NIy0ld8o03M0cJxl2spVf6ESYVS6/gpIfq1FFw==}
    engines: {node: '>= 0.4'}

  es-object-atoms@1.0.0:
    resolution: {integrity: sha512-MZ4iQ6JwHOBQjahnjwaC1ZtIBH+2ohjamzAO3oaHcXYup7qxjF2fixyH+Q71voWHeOkI2q/TnJao/KfXYIZWbw==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.0.3:
    resolution: {integrity: sha512-3T8uNMC3OQTHkFUsFq8r/BwAXLHvU/9O9mE0fBc/MY5iq/8H7ncvO947LmYA6ldWw9Uh8Yhf25zu6n7nML5QWQ==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.0.2:
    resolution: {integrity: sha512-J3yBRXCzDu4ULnQwxyToo/OjdMx6akgVC7K6few0a7F/0wLtmKKN7I73AH5T2836UuXRqN7Qg+IIUw/+YJksRw==}

  es-to-primitive@1.2.1:
    resolution: {integrity: sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==}
    engines: {node: '>= 0.4'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-next@14.2.8:
    resolution: {integrity: sha512-gRqxHkSuCrQro6xqXnmXphcq8rdiw7FI+nLXpWmIlp/AfUzHCgXNQE7mOK+oco+SRaJbhqCg/68uRln1qjkF+Q==}
    peerDependencies:
      eslint: ^7.23.0 || ^8.0.0
      typescript: '>=3.3.1'
    peerDependenciesMeta:
      typescript:
        optional: true

  eslint-import-resolver-node@0.3.9:
    resolution: {integrity: sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==}

  eslint-import-resolver-typescript@3.6.3:
    resolution: {integrity: sha512-ud9aw4szY9cCT1EWWdGv1L1XR6hh2PaRWif0j2QjQ0pgTY/69iw+W0Z4qZv5wHahOl8isEr+k/JnyAqNQkLkIA==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      eslint: '*'
      eslint-plugin-import: '*'
      eslint-plugin-import-x: '*'
    peerDependenciesMeta:
      eslint-plugin-import:
        optional: true
      eslint-plugin-import-x:
        optional: true

  eslint-module-utils@2.11.0:
    resolution: {integrity: sha512-gbBE5Hitek/oG6MUVj6sFuzEjA/ClzNflVrLovHi/JgLdC7fiN5gLAY1WIPW1a0V5I999MnsrvVrCOGmmVqDBQ==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: '*'
      eslint-import-resolver-node: '*'
      eslint-import-resolver-typescript: '*'
      eslint-import-resolver-webpack: '*'
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true
      eslint:
        optional: true
      eslint-import-resolver-node:
        optional: true
      eslint-import-resolver-typescript:
        optional: true
      eslint-import-resolver-webpack:
        optional: true

  eslint-plugin-import@2.30.0:
    resolution: {integrity: sha512-/mHNE9jINJfiD2EKkg1BKyPyUk4zdnT54YgbOgfjSakWT5oyX/qQLVNTkehyfpcMxZXMy1zyonZ2v7hZTX43Yw==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: ^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true

  eslint-plugin-jsx-a11y@6.10.0:
    resolution: {integrity: sha512-ySOHvXX8eSN6zz8Bywacm7CvGNhUtdjvqfQDVe6020TUK34Cywkw7m0KsCCk1Qtm9G1FayfTN1/7mMYnYO2Bhg==}
    engines: {node: '>=4.0'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9

  eslint-plugin-react-hooks@4.6.2:
    resolution: {integrity: sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0

  eslint-plugin-react@7.36.1:
    resolution: {integrity: sha512-/qwbqNXZoq+VP30s1d4Nc1C5GTxjJQjk4Jzs4Wq2qzxFM7dSmuG2UkIjg2USMLh3A/aVcUNrK7v0J5U1XEGGwA==}
    engines: {node: '>=4'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7

  eslint-scope@7.2.2:
    resolution: {integrity: sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint@8.57.1:
    resolution: {integrity: sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    hasBin: true

  espree@9.6.1:
    resolution: {integrity: sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  ethers@6.13.2:
    resolution: {integrity: sha512-9VkriTTed+/27BGuY1s0hf441kqwHJ1wtN2edksEtiRvXx+soxRX3iSXTfFqq2+YwrOqbDoTHjIhQnjJRlzKmg==}
    engines: {node: '>=14.0.0'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  evp_bytestokey@1.0.3:
    resolution: {integrity: sha512-/f2Go4TognH/KvCISP7OUsHn85hT9nUkxxA9BEWxFn+Oj9o8ZNLm/40hdlgSLyuOimsrTKLUMEorQexp/aPQeA==}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}

  file-entry-cache@6.0.1:
    resolution: {integrity: sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==}
    engines: {node: ^10.12.0 || >=12.0.0}

  file-uri-to-path@1.0.0:
    resolution: {integrity: sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@3.2.0:
    resolution: {integrity: sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==}
    engines: {node: ^10.12.0 || >=12.0.0}

  flatted@3.3.1:
    resolution: {integrity: sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.3:
    resolution: {integrity: sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==}

  foreground-child@3.3.0:
    resolution: {integrity: sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==}
    engines: {node: '>=14'}

  form-data@4.0.1:
    resolution: {integrity: sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==}
    engines: {node: '>= 6'}

  framer-motion@11.5.6:
    resolution: {integrity: sha512-JMwUpAxv/DWgul9vPgX0ElKn0G66sUc6O9tOXsYwn3zxwvhxFljSXC0XT2QCzuTYBshwC8nyDAa1SYcV0Ldbhw==}
    peerDependencies:
      '@emotion/is-prop-valid': '*'
      react: ^18.0.0
      react-dom: ^18.0.0
    peerDependenciesMeta:
      '@emotion/is-prop-valid':
        optional: true
      react:
        optional: true
      react-dom:
        optional: true

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.6:
    resolution: {integrity: sha512-Z5kx79swU5P27WEayXM1tBi5Ze/lbIyiNgU3qyXUOf9b2rgXYyF9Dy9Cx+IQv/Lc8WCG6L82zwUPpSS9hGehIg==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  get-intrinsic@1.2.4:
    resolution: {integrity: sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==}
    engines: {node: '>= 0.4'}

  get-symbol-description@1.0.2:
    resolution: {integrity: sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.8.1:
    resolution: {integrity: sha512-k9PN+cFBmaLWtVz29SkUoqU5O0slLuHJXt/2P+tMVFT+phsSGXGkp9t3rQIqdz0e+06EHNGs3oM6ZX1s2zHxRg==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.3.10:
    resolution: {integrity: sha512-fa46+tv1Ak0UPK1TOy/pZrIybNNt4HCv7SDzwyfiOZkvZLEbjsZkJBPtDHVshZjbecAoAGSC20MjLDG/qr679g==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  globals@13.24.0:
    resolution: {integrity: sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==}
    engines: {node: '>=8'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  gopd@1.0.1:
    resolution: {integrity: sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-bigints@1.0.2:
    resolution: {integrity: sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.0.3:
    resolution: {integrity: sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==}
    engines: {node: '>= 0.4'}

  has-symbols@1.0.3:
    resolution: {integrity: sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hash-base@3.1.0:
    resolution: {integrity: sha512-1nmYp/rhMDiE7AYkDw+lLwlAzz0AntGIe51F3RfFfEqyQ3feY2eI/NcwC6umIQVOASPMsWJLJScWKSSvzL9IVA==}
    engines: {node: '>=4'}

  hash.js@1.1.7:
    resolution: {integrity: sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hmac-drbg@1.0.1:
    resolution: {integrity: sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  immutable@4.3.7:
    resolution: {integrity: sha512-1hqclzwYwjRDFLjcFxOM5AYkkG0rpFPpr1RLPMEuGczoS7YA8gLhy8SWXYRAA/XwfEHpfo3cw5JGioS32fnMRw==}

  import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  internal-slot@1.0.7:
    resolution: {integrity: sha512-NGnrKwXzSms2qUUih/ILZ5JBqNTSa1+ZmP6flaIp6KmSElgE9qdndzS3cqjrDovwFdmwsGsLdeFgB6suw+1e9g==}
    engines: {node: '>= 0.4'}

  is-arguments@1.1.1:
    resolution: {integrity: sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==}
    engines: {node: '>= 0.4'}

  is-array-buffer@3.0.4:
    resolution: {integrity: sha512-wcjaerHw0ydZwfhiKbXJWLDY8A7yV7KhjQOpb83hGgGfId/aQa4TOvwyzn2PuswW2gPCYEL/nEAiSVpdOj1lXw==}
    engines: {node: '>= 0.4'}

  is-async-function@2.0.0:
    resolution: {integrity: sha512-Y1JXKrfykRJGdlDwdKlLpLyMIiWqWvuSd17TvZk68PLAOGOoF4Xyav1z0Xhoi+gCYjZVeC5SI+hYFOfvXmGRCA==}
    engines: {node: '>= 0.4'}

  is-bigint@1.0.4:
    resolution: {integrity: sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-boolean-object@1.1.2:
    resolution: {integrity: sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==}
    engines: {node: '>= 0.4'}

  is-bun-module@1.2.1:
    resolution: {integrity: sha512-AmidtEM6D6NmUiLOvvU7+IePxjEjOzra2h0pSrsfSAcXwl/83zLLXDByafUJy9k/rKK0pvXMLdwKwGHlX2Ke6Q==}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.15.1:
    resolution: {integrity: sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.1:
    resolution: {integrity: sha512-AHkaJrsUVW6wq6JS8y3JnM/GJF/9cf+k20+iDzlSaJrinEo5+7vRiteOSwBhHRiAyQATN1AmY4hwzxJKPmYf+w==}
    engines: {node: '>= 0.4'}

  is-date-object@1.0.5:
    resolution: {integrity: sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-finalizationregistry@1.0.2:
    resolution: {integrity: sha512-0by5vtUJs8iFQb5TYUHHPudOR+qXYIMKtiUzvLIZITZUjknFmziyBJuLhVRc+Ds0dREFlskDNJKYIdIzu/9pfw==}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-function@1.0.10:
    resolution: {integrity: sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-map@2.0.3:
    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
    engines: {node: '>= 0.4'}

  is-negative-zero@2.0.3:
    resolution: {integrity: sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==}
    engines: {node: '>= 0.4'}

  is-number-object@1.0.7:
    resolution: {integrity: sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  is-regex@1.1.4:
    resolution: {integrity: sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==}
    engines: {node: '>= 0.4'}

  is-set@2.0.3:
    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.3:
    resolution: {integrity: sha512-nA2hv5XIhLR3uVzDDfCIknerhx8XUKnstuOERPNNIinXG7v9u+ohXF67vxm4TPTEPU6lm61ZkwP3c9PCB97rhg==}
    engines: {node: '>= 0.4'}

  is-string@1.0.7:
    resolution: {integrity: sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==}
    engines: {node: '>= 0.4'}

  is-symbol@1.0.4:
    resolution: {integrity: sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.13:
    resolution: {integrity: sha512-uZ25/bUAlUY5fR4OKT4rZQEBrzQWYV9ZJYGGsUmEJ6thodVJ1HX64ePQ6Z0qPWP+m+Uq6e9UugrE38jeYsDSMw==}
    engines: {node: '>= 0.4'}

  is-weakmap@2.0.2:
    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
    engines: {node: '>= 0.4'}

  is-weakref@1.0.2:
    resolution: {integrity: sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==}

  is-weakset@2.0.3:
    resolution: {integrity: sha512-LvIm3/KWzS9oRFHugab7d+M/GcBXuXX5xZkzPmN+NxihdQlZUQ4dWuSV1xR/sq6upL1TJEDrfBgRepHFdBtSNQ==}
    engines: {node: '>= 0.4'}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  isomorphic-ws@5.0.0:
    resolution: {integrity: sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==}
    peerDependencies:
      ws: '*'

  iterator.prototype@1.1.2:
    resolution: {integrity: sha512-DR33HMMr8EzwuRL8Y9D3u2BMj8+RqSE850jfGu59kS7tbmPLzGkZmVSfyCFSDxuZiEY6Rzt3T2NA/qU+NwVj1w==}

  jackspeak@2.3.6:
    resolution: {integrity: sha512-N3yCS/NegsOBokc8GAdM8UcmfsKiSS8cipheD/nivzr700H+nsMOxJjQnvwOcRYVuFkdH0wGUvW2WbXGmrZGbQ==}
    engines: {node: '>=14'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jiti@1.21.6:
    resolution: {integrity: sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==}
    hasBin: true

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-xxhash@1.0.4:
    resolution: {integrity: sha512-S/6Oo7ruxx5k8m4qlMnbpwQdJjRsvvfcIhIk1dA9c5y5GNhYHKYKu9krEK3QgBax6CxJuf4gRL2opgLkdzWIKg==}
    engines: {node: '>=8.0.0'}

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsbi@3.1.3:
    resolution: {integrity: sha512-nBJqA0C6Qns+ZxurbEoIR56wyjiUszpNy70FHvxO5ervMoCbZVE3z3kxr5nKGhlxr/9MhKTSUBs7cAwwuf3g9w==}

  jsbi@4.3.0:
    resolution: {integrity: sha512-SnZNcinB4RIcnEyZqFPdGPVgrg2AcnykiBy0sHVJQKHYeaLUvi3Exj+iaPpLnFVkDPZIV4U0yvgC9/R4uEAZ9g==}

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@1.0.2:
    resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
    hasBin: true

  jsx-ast-utils@3.3.5:
    resolution: {integrity: sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==}
    engines: {node: '>=4.0'}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  language-subtag-registry@0.3.23:
    resolution: {integrity: sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==}

  language-tags@1.0.9:
    resolution: {integrity: sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==}
    engines: {node: '>=0.10'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lilconfig@2.1.0:
    resolution: {integrity: sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==}
    engines: {node: '>=10'}

  lilconfig@3.1.2:
    resolution: {integrity: sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  lit-element@4.1.0:
    resolution: {integrity: sha512-gSejRUQJuMQjV2Z59KAS/D4iElUhwKpIyJvZ9w+DIagIQjfJnhR20h2Q5ddpzXGS+fF0tMZ/xEYGMnKmaI/iww==}

  lit-html@3.2.0:
    resolution: {integrity: sha512-pwT/HwoxqI9FggTrYVarkBKFN9MlTUpLrDHubTmW4SrkL3kkqW5gxwbxMMUnbbRHBC0WTZnYHcjDSCM559VyfA==}

  lit@3.2.0:
    resolution: {integrity: sha512-s6tI33Lf6VpDu7u4YqsSX78D28bYQulM+VAzsGch4fx2H0eLZnJsUBsPWmGYSGoKDNbjtRv02rio1o+UdPVwvw==}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.isequal@4.5.0:
    resolution: {integrity: sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lucide-react@0.445.0:
    resolution: {integrity: sha512-YrLf3aAHvmd4dZ8ot+mMdNFrFpJD7YRwQ2pUcBhgqbmxtrMP4xDzIorcj+8y+6kpuXBF4JB0NOCTUWIYetJjgA==}
    peerDependencies:
      react: ^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0-rc

  md5.js@1.3.5:
    resolution: {integrity: sha512-xitP+WxNPcTTOgnTJcrhM0xvdPepipPSf3I8EIpGKeFLjt3PlJLIDG3u8EX53ZIubkb+5U2+3rELYpEhHhzdkg==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  minimalistic-assert@1.0.1:
    resolution: {integrity: sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==}

  minimalistic-crypto-utils@1.0.1:
    resolution: {integrity: sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg==}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.3:
    resolution: {integrity: sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nan@2.20.0:
    resolution: {integrity: sha512-bk3gXBZDGILuuo/6sKtr0DQmSThYHLtNCdSdXk9YkxD/jK6X2vmCyyXBBxyqZ4XcnzTyYEAThfX3DCEnLf6igw==}

  nanoassert@2.0.0:
    resolution: {integrity: sha512-7vO7n28+aYO4J+8w96AzhmU8G+Y/xpPDJz/se19ICsqj/momRbb9mh9ZUtkoJ5X3nTnPdhEJyc0qnM6yAsHBaA==}

  nanoid@3.3.7:
    resolution: {integrity: sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  next@14.2.10:
    resolution: {integrity: sha512-sDDExXnh33cY3RkS9JuFEKaS4HmlWmDKP1VJioucCG6z5KuA008DPsDZOzi8UfqEk3Ii+2NCQSJrfbEWtZZfww==}
    engines: {node: '>=18.17.0'}
    hasBin: true
    peerDependencies:
      '@opentelemetry/api': ^1.1.0
      '@playwright/test': ^1.41.2
      react: ^18.2.0
      react-dom: ^18.2.0
      sass: ^1.3.0
    peerDependenciesMeta:
      '@opentelemetry/api':
        optional: true
      '@playwright/test':
        optional: true
      sass:
        optional: true

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}

  object-inspect@1.13.2:
    resolution: {integrity: sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==}
    engines: {node: '>= 0.4'}

  object-is@1.1.6:
    resolution: {integrity: sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.5:
    resolution: {integrity: sha512-byy+U7gp+FVwmyzKPYhW2h5l3crpmGsxl7X2s8y43IgxvG4g3QZ6CffDtsNQy1WsmZpQbO+ybo0AlW7TY6DcBQ==}
    engines: {node: '>= 0.4'}

  object.entries@1.1.8:
    resolution: {integrity: sha512-cmopxi8VwRIAw/fkijJohSfpef5PdN0pMQJN6VC/ZKvn0LIknWD8KtgY6KlQdEc4tIjcQ3HxSMmnvtzIscdaYQ==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.groupby@1.0.3:
    resolution: {integrity: sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.0:
    resolution: {integrity: sha512-yBYjY9QX2hnRmZHAjG/f13MzmBzxzYgQhFrke06TTyKY5zSTEqkOeukBzIdVA3j3ulu8Qa3MbVFShV7T2RmGtQ==}
    engines: {node: '>= 0.4'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  package-json-from-dist@1.0.0:
    resolution: {integrity: sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  picocolors@1.1.0:
    resolution: {integrity: sha512-TQ92mBOW0l3LeMeyLV6mzy/kWr8lkd/hp3mTg7wYK7zJhuBStmGMBG0BdeDZS/dZx1IukaX6Bk11zcln25o1Aw==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  possible-typed-array-names@1.0.0:
    resolution: {integrity: sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==}
    engines: {node: '>= 0.4'}

  postcss-import@15.1.0:
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0

  postcss-js@4.0.1:
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss-nested@6.2.0:
    resolution: {integrity: sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-selector-parser@6.1.2:
    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
    engines: {node: '>=4'}

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss@8.4.31:
    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.4.38:
    resolution: {integrity: sha512-Wglpdk03BSfXkHoQa3b/oulrotAkwrlLDRSOb9D0bN86FdRyE9lppSp33aHNPgBa0JKCoB+drFLZkQoRRYae5A==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.4.47:
    resolution: {integrity: sha512-56rxCq7G/XfB4EkXq9Egn5GCqugWvDFjafDOThIdMBsI15iqPqR5r15TfSr1YPYeEI19YeaXMCbY6u88Y76GLQ==}
    engines: {node: ^10 || ^12 || >=14}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  react-dom@18.3.1:
    resolution: {integrity: sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==}
    peerDependencies:
      react: ^18.3.1

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}

  react-loader-spinner@6.1.6:
    resolution: {integrity: sha512-x5h1Jcit7Qn03MuKlrWcMG9o12cp9SNDVHVJTNRi9TgtGPKcjKiXkou4NRfLAtXaFB3+Z8yZsVzONmPzhv2ErA==}
    engines: {node: '>= 12'}
    peerDependencies:
      react: ^16.0.0 || ^17.0.0 || ^18.0.0
      react-dom: ^16.0.0 || ^17.0.0 || ^18.0.0

  react-spinners@0.14.1:
    resolution: {integrity: sha512-2Izq+qgQ08HTofCVEdcAQCXFEYfqTDdfeDQJeo/HHQiQJD4imOicNLhkfN2eh1NYEWVOX4D9ok2lhuDB0z3Aag==}
    peerDependencies:
      react: ^16.0.0 || ^17.0.0 || ^18.0.0
      react-dom: ^16.0.0 || ^17.0.0 || ^18.0.0

  react-tooltip@5.28.0:
    resolution: {integrity: sha512-R5cO3JPPXk6FRbBHMO0rI9nkUG/JKfalBSQfZedZYzmqaZQgq7GLzF8vcCWx6IhUCKg0yPqJhXIzmIO5ff15xg==}
    peerDependencies:
      react: '>=16.14.0'
      react-dom: '>=16.14.0'

  react@18.3.1:
    resolution: {integrity: sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==}
    engines: {node: '>=0.10.0'}

  read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  reflect.getprototypeof@1.0.6:
    resolution: {integrity: sha512-fmfw4XgoDke3kdI6h4xcUz1dG8uaiv5q9gcEwLS4Pnth2kxT+GZ7YehS1JTMGBQmtV7Y4GFGbs2re2NqhdozUg==}
    engines: {node: '>= 0.4'}

  regexp.prototype.flags@1.5.2:
    resolution: {integrity: sha512-NcDiDkTLuPR+++OCKB0nWafEmhg/Da8aUPLPMQbK+bxKKCm1/S5he+AqYa4PlMCVBalb4/yxIRub6qkEx5yJbw==}
    engines: {node: '>= 0.4'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  resolve@2.0.0-next.5:
    resolution: {integrity: sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==}
    hasBin: true

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rimraf@3.0.2:
    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}
    deprecated: Rimraf versions prior to v4 are no longer supported
    hasBin: true

  ripemd160@2.0.2:
    resolution: {integrity: sha512-ii4iagi25WusVoiC4B4lq7pbXfAp3D9v5CwfkY33vffw2+pkDjY1D8GaN7spsxvCSx8dkPqOZCEZyfxcmJG2IA==}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  safe-array-concat@1.1.2:
    resolution: {integrity: sha512-vj6RsCsWBCf19jIeHEfkRMw8DPiBb+DMXklQ/1SGDHOMlHdPUkZXFQ2YdplS23zESTijAcurb1aSgJA3AgMu1Q==}
    engines: {node: '>=0.4'}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-regex-test@1.0.3:
    resolution: {integrity: sha512-CdASjNJPvRa7roO6Ra/gLYBTzYzzPyyBXxIMdGW3USQLyjWEls2RgW5UBTXaQVp+OrpeCK3bLem8smtmheoRuw==}
    engines: {node: '>= 0.4'}

  scheduler@0.23.2:
    resolution: {integrity: sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==}

  scrypt-js@3.0.1:
    resolution: {integrity: sha512-cdwTTnqPu0Hyvf5in5asVdZocVDTNRmR7XEcJuIzMjJeSHybHl7vpB66AzwTaIg6CLSbtjcxc8fqcySfnTkccA==}

  secp256k1@3.8.0:
    resolution: {integrity: sha512-k5ke5avRZbtl9Tqx/SA7CbY3NF6Ro+Sj9cZxezFzuBlLDmyqPiL8hJJ+EmzD8Ig4LUDByHJ3/iPOVoRixs/hmw==}
    engines: {node: '>=4.0.0'}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.6.3:
    resolution: {integrity: sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==}
    engines: {node: '>=10'}
    hasBin: true

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  sha.js@2.4.11:
    resolution: {integrity: sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==}
    hasBin: true

  sha3@2.1.4:
    resolution: {integrity: sha512-S8cNxbyb0UGUM2VhRD4Poe5N58gJnJsLJ5vC7FYWGUmGhcsj4++WaIOBFVDxlG0W3To6xBuiRh+i0Qp2oNCOtg==}

  shallowequal@1.1.0:
    resolution: {integrity: sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel@1.0.6:
    resolution: {integrity: sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==}
    engines: {node: '>= 0.4'}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  stop-iteration-iterator@1.0.0:
    resolution: {integrity: sha512-iCGQj+0l0HOdZ2AEeBADlsRC+vsnDsZsbdSiH1yNSjcfKM7fdpCMfqAL/dwF5BLiw/XhRft/Wax6zQbhq2BcjQ==}
    engines: {node: '>= 0.4'}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string.prototype.includes@2.0.0:
    resolution: {integrity: sha512-E34CkBgyeqNDcrbU76cDjL5JLcVrtSdYq0MEh/B10r17pRP4ciHLwTgnuLV8Ay6cgEMLkcBkFCKyFZ43YldYzg==}

  string.prototype.matchall@4.0.11:
    resolution: {integrity: sha512-NUdh0aDavY2og7IbBPenWqR9exH+E26Sv8e0/eTe1tltDGZL+GtBkDAnnyBtmekfK6/Dq3MkcGtzXFEd1LQrtg==}
    engines: {node: '>= 0.4'}

  string.prototype.repeat@1.0.0:
    resolution: {integrity: sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==}

  string.prototype.trim@1.2.9:
    resolution: {integrity: sha512-klHuCNxiMZ8MlsOihJhJEBJAiMVqU3Z2nEXWfWnIqjN0gEFS9J9+IxKozWWtQGcgoa1WUZzLjKPTr4ZHNFTFxw==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.8:
    resolution: {integrity: sha512-p73uL5VCHCO2BZZ6krwwQE3kCzM7NKmis8S//xEC6fQonchbum4eP6kR4DLEjQFO3Wnj3Fuo8NM0kOSjVdHjZQ==}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  styled-components@6.1.13:
    resolution: {integrity: sha512-M0+N2xSnAtwcVAQeFEsGWFFxXDftHUD7XrKla06QbpUMmbmtFBMMTcKWvFXtWxuD5qQkB8iU5gk6QASlx2ZRMw==}
    engines: {node: '>= 16'}
    peerDependencies:
      react: '>= 16.8.0'
      react-dom: '>= 16.8.0'

  styled-jsx@5.1.1:
    resolution: {integrity: sha512-pW7uC1l4mBZ8ugbiZrcIsiIvVx1UmTfw7UkC3Um2tmfUq9Bhk8IiyEIPl6F8agHgjzku6j0xQEZbfA5uSgSaCw==}
    engines: {node: '>= 12.0.0'}
    peerDependencies:
      '@babel/core': '*'
      babel-plugin-macros: '*'
      react: '>= 16.8.0 || 17.x.x || ^18.0.0-0'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      babel-plugin-macros:
        optional: true

  stylis@4.3.2:
    resolution: {integrity: sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==}

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  svg.draggable.js@2.2.2:
    resolution: {integrity: sha512-JzNHBc2fLQMzYCZ90KZHN2ohXL0BQJGQimK1kGk6AvSeibuKcIdDX9Kr0dT9+UJ5O8nYA0RB839Lhvk4CY4MZw==}
    engines: {node: '>= 0.8.0'}

  svg.easing.js@2.0.0:
    resolution: {integrity: sha512-//ctPdJMGy22YoYGV+3HEfHbm6/69LJUTAqI2/5qBvaNHZ9uUFVC82B0Pl299HzgH13rKrBgi4+XyXXyVWWthA==}
    engines: {node: '>= 0.8.0'}

  svg.filter.js@2.0.2:
    resolution: {integrity: sha512-xkGBwU+dKBzqg5PtilaTb0EYPqPfJ9Q6saVldX+5vCRy31P6TlRCP3U9NxH3HEufkKkpNgdTLBJnmhDHeTqAkw==}
    engines: {node: '>= 0.8.0'}

  svg.js@2.7.1:
    resolution: {integrity: sha512-ycbxpizEQktk3FYvn/8BH+6/EuWXg7ZpQREJvgacqn46gIddG24tNNe4Son6omdXCnSOaApnpZw6MPCBA1dODA==}

  svg.pathmorphing.js@0.1.3:
    resolution: {integrity: sha512-49HWI9X4XQR/JG1qXkSDV8xViuTLIWm/B/7YuQELV5KMOPtXjiwH4XPJvr/ghEDibmLQ9Oc22dpWpG0vUDDNww==}
    engines: {node: '>= 0.8.0'}

  svg.resize.js@1.4.3:
    resolution: {integrity: sha512-9k5sXJuPKp+mVzXNvxz7U0uC9oVMQrrf7cFsETznzUDDm0x8+77dtZkWdMfRlmbkEEYvUn9btKuZ3n41oNA+uw==}
    engines: {node: '>= 0.8.0'}

  svg.select.js@2.1.2:
    resolution: {integrity: sha512-tH6ABEyJsAOVAhwcCjF8mw4crjXSI1aa7j2VQR8ZuJ37H2MBUbyeqYr5nEO7sSN3cy9AR9DUwNg0t/962HlDbQ==}
    engines: {node: '>= 0.8.0'}

  svg.select.js@3.0.1:
    resolution: {integrity: sha512-h5IS/hKkuVCbKSieR9uQCj9w+zLHoPh+ce19bBYyqF53g6mnPB8sAtIbe1s9dh2S2fCmYX2xel1Ln3PJBbK4kw==}
    engines: {node: '>= 0.8.0'}

  tailwindcss-pseudo-elements@2.0.0:
    resolution: {integrity: sha512-cbnF8Rg1tJjsgrUK1sLt/TNAea9zKNhWGTI5NtKxZ8WhYjHCMAGOjaHg+iql8UlXaW1U9jPeyJsGlQsLGrbomQ==}
    peerDependencies:
      tailwindcss: '>=1.0.0'

  tailwindcss@3.4.12:
    resolution: {integrity: sha512-Htf/gHj2+soPb9UayUNci/Ja3d8pTmu9ONTfh4QY8r3MATTZOzmv6UYWF7ZwikEIC8okpfqmGqrmDehua8mF8w==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  tapable@2.2.1:
    resolution: {integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==}
    engines: {node: '>=6'}

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  ts-api-utils@1.3.0:
    resolution: {integrity: sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  tsconfig-paths@3.15.0:
    resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}

  tslib@2.3.1:
    resolution: {integrity: sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw==}

  tslib@2.4.0:
    resolution: {integrity: sha512-d6xOpEDfsi2CZVlPQzGeux8XMwLT9hssAsaPYExaQMuYskwb+x1x7J371tWlbBdWHroy99KnVB6qIkUbs5X3UQ==}

  tslib@2.6.2:
    resolution: {integrity: sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==}

  tslib@2.7.0:
    resolution: {integrity: sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-fest@0.20.2:
    resolution: {integrity: sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==}
    engines: {node: '>=10'}

  type-fest@4.6.0:
    resolution: {integrity: sha512-rLjWJzQFOq4xw7MgJrCZ6T1jIOvvYElXT12r+y0CC6u67hegDHaxcPqb2fZHOGlqxugGQPNB1EnTezjBetkwkw==}
    engines: {node: '>=16'}

  typed-array-buffer@1.0.2:
    resolution: {integrity: sha512-gEymJYKZtKXzzBzM4jqa9w6Q1Jjm7x2d+sh19AdsD4wqnMPDYyvwpsIc2Q/835kHuo3BEQ7CjelGhfTsoBb2MQ==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.1:
    resolution: {integrity: sha512-3iMJ9q0ao7WE9tWcaYKIptkNBuOIcZCCT0d4MRvuuH88fEoEH62IuQe0OtraD3ebQEoTRk8XCBoknUNc1Y67pw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.2:
    resolution: {integrity: sha512-Ous0vodHa56FviZucS2E63zkgtgrACj7omjwd/8lTEMEPFFyjfixMZ1ZXenpgCFBBt4EC1J2XsyVS2gkG0eTFA==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.6:
    resolution: {integrity: sha512-/OxDN6OtAk5KBpGb28T+HZc2M+ADtvRxXrKKbUwtsLgdoxgX13hyy7ek6bFRl5+aBs2yZzB0c4CnQfAtVypW/g==}
    engines: {node: '>= 0.4'}

  typescript@5.6.2:
    resolution: {integrity: sha512-NW8ByodCSNCwZeghjN3o+JX5OFH0Ojg6sadjEKY4huZ52TqbJTJnDo5+Tw98lSy63NZvi4n+ez5m2u5d4PkZyw==}
    engines: {node: '>=14.17'}
    hasBin: true

  unbox-primitive@1.0.2:
    resolution: {integrity: sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==}

  uncrypto@0.1.3:
    resolution: {integrity: sha512-Ql87qFHB3s/De2ClA9e0gsnS6zXG27SkTiSJwjCc9MebbfapQfuPzumMIUMi38ezPZVNFcHI9sUIepeQfw8J8Q==}

  undici-types@6.19.8:
    resolution: {integrity: sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==}

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  uuid@8.3.2:
    resolution: {integrity: sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==}
    hasBin: true

  valibot@0.42.1:
    resolution: {integrity: sha512-3keXV29Ar5b//Hqi4MbSdV7lfVp6zuYLZuA9V1PvQUsXqogr+u5lvLPLk3A4f74VUXDnf/JfWMN6sB+koJ/FFw==}
    peerDependencies:
      typescript: '>=5'
    peerDependenciesMeta:
      typescript:
        optional: true

  varuint-bitcoin@1.1.2:
    resolution: {integrity: sha512-4EVb+w4rx+YfVM32HQX42AbbT7/1f5zwAYhIujKXKk8NQK+JfRVl3pqT3hjNn/L+RstigmGGKVwHA/P0wgITZw==}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  which-boxed-primitive@1.0.2:
    resolution: {integrity: sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==}

  which-builtin-type@1.1.4:
    resolution: {integrity: sha512-bppkmBSsHFmIMSl8BO9TbsyzsvGjVoppt8xUiGzwiu/bhDCGxnpOKCxgqj6GuyHE0mINMDecBFPlOm2hzY084w==}
    engines: {node: '>= 0.4'}

  which-collection@1.0.2:
    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
    engines: {node: '>= 0.4'}

  which-typed-array@1.1.15:
    resolution: {integrity: sha512-oV0jmFtUky6CXfkqehVvBP/LSWJ2sy4vWMioiENyJLePrBO/yKyV9OyJySfAKosh+RYkIl5zJCNZ8/4JncrpdA==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  ws@8.17.1:
    resolution: {integrity: sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  ws@8.18.0:
    resolution: {integrity: sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  yaml@2.5.1:
    resolution: {integrity: sha512-bLQOjaX/ADgQ20isPJRvF0iRUHIxVhYvr53Of7wGcWlO2jvtUlH5m87DsmulFVxRpNLOnI4tB6p/oh8D7kpn9Q==}
    engines: {node: '>= 14'}
    hasBin: true

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

snapshots:

  '@adraffy/ens-normalize@1.10.1': {}

  '@alloc/quick-lru@5.2.0': {}

  '@ckb-ccc/ccc@1.1.3(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/eip6963': 1.0.11(typescript@5.6.2)
      '@ckb-ccc/joy-id': 1.0.11(typescript@5.6.2)
      '@ckb-ccc/nip07': 1.0.11(typescript@5.6.2)
      '@ckb-ccc/okx': 1.0.11(typescript@5.6.2)
      '@ckb-ccc/rei': 1.0.11(typescript@5.6.2)
      '@ckb-ccc/shell': 1.1.3(typescript@5.6.2)
      '@ckb-ccc/uni-sat': 1.0.11(typescript@5.6.2)
      '@ckb-ccc/utxo-global': 1.0.11(typescript@5.6.2)
      '@ckb-ccc/xverse': 1.0.11(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - debug
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/connector-react@1.0.11(@types/react@18.3.8)(react@18.3.1)(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/connector': 1.0.11(typescript@5.6.2)
      '@lit/react': 1.0.5(@types/react@18.3.8)
      react: 18.3.1
    transitivePeerDependencies:
      - '@types/react'
      - bufferutil
      - debug
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/connector@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/ccc': 1.1.3(typescript@5.6.2)
      lit: 3.2.0
    transitivePeerDependencies:
      - bufferutil
      - debug
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/core@1.5.0(typescript@5.6.2)':
    dependencies:
      '@joyid/ckb': 1.0.1(typescript@5.6.2)
      '@noble/ciphers': 0.5.3
      '@noble/curves': 1.6.0
      '@noble/hashes': 1.5.0
      abort-controller: 3.0.0
      bech32: 2.0.0
      bitcoinjs-message: 2.2.0
      bs58check: 4.0.0
      buffer: 6.0.3
      cross-fetch: 4.0.0
      ethers: 6.13.2
      isomorphic-ws: 5.0.0(ws@8.18.0)
      ws: 8.18.0
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/eip6963@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/joy-id@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
      '@joyid/ckb': 1.0.1(typescript@5.6.2)
      '@joyid/common': 0.2.0(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/nip07@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/okx@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
      '@ckb-ccc/nip07': 1.0.11(typescript@5.6.2)
      '@ckb-ccc/uni-sat': 1.0.11(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/rei@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/shell@1.1.3(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
      '@ckb-ccc/spore': 1.2.1(typescript@5.6.2)
      '@ckb-ccc/ssri': 0.2.1(typescript@5.6.2)
      '@ckb-ccc/udt': 0.1.3(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - debug
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/spore@1.2.1(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
      axios: 1.7.9
    transitivePeerDependencies:
      - bufferutil
      - debug
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/ssri@0.2.1(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/udt@0.1.3(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
      '@ckb-ccc/ssri': 0.2.1(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/uni-sat@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/utxo-global@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-ccc/xverse@1.0.11(typescript@5.6.2)':
    dependencies:
      '@ckb-ccc/core': 1.5.0(typescript@5.6.2)
      valibot: 0.42.1(typescript@5.6.2)
    transitivePeerDependencies:
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate
      - zod

  '@ckb-lumos/base@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      '@types/blake2b': 2.1.3
      '@types/lodash.isequal': 4.5.8
      blake2b: 2.1.4
      js-xxhash: 1.0.4
      lodash.isequal: 4.5.0

  '@ckb-lumos/bi@0.23.0':
    dependencies:
      jsbi: 4.3.0

  '@ckb-lumos/ckb-indexer@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      cross-fetch: 3.1.8
      events: 3.3.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/codec@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0

  '@ckb-lumos/common-scripts@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/config-manager': 0.23.0
      '@ckb-lumos/helpers': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      bech32: 2.0.0
      bs58: 5.0.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/config-manager@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@types/deep-freeze-strict': 1.1.2
      deep-freeze-strict: 1.1.1
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/hd@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      bn.js: 5.2.1
      elliptic: 6.5.7
      scrypt-js: 3.0.1
      sha3: 2.1.4
      uuid: 8.3.2

  '@ckb-lumos/helpers@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/config-manager': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      bech32: 2.0.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/light-client@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/ckb-indexer': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      cross-fetch: 3.1.8
      events: 3.3.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/lumos@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/ckb-indexer': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/common-scripts': 0.23.0
      '@ckb-lumos/config-manager': 0.23.0
      '@ckb-lumos/hd': 0.23.0
      '@ckb-lumos/helpers': 0.23.0
      '@ckb-lumos/light-client': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      '@ckb-lumos/transaction-manager': 0.23.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/rpc@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      abort-controller: 3.0.0
      cross-fetch: 3.1.8
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/toolkit@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0

  '@ckb-lumos/transaction-manager@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/ckb-indexer': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@emotion/is-prop-valid@1.2.2':
    dependencies:
      '@emotion/memoize': 0.8.1

  '@emotion/memoize@0.8.1': {}

  '@emotion/unitless@0.8.1': {}

  '@eslint-community/eslint-utils@4.4.0(eslint@8.57.1)':
    dependencies:
      eslint: 8.57.1
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.11.1': {}

  '@eslint/eslintrc@2.1.4':
    dependencies:
      ajv: 6.12.6
      debug: 4.3.7
      espree: 9.6.1
      globals: 13.24.0
      ignore: 5.3.2
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@8.57.1': {}

  '@floating-ui/core@1.6.8':
    dependencies:
      '@floating-ui/utils': 0.2.8

  '@floating-ui/dom@1.6.11':
    dependencies:
      '@floating-ui/core': 1.6.8
      '@floating-ui/utils': 0.2.8

  '@floating-ui/utils@0.2.8': {}

  '@humanwhocodes/config-array@0.13.0':
    dependencies:
      '@humanwhocodes/object-schema': 2.0.3
      debug: 4.3.7
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/object-schema@2.0.3': {}

  '@ickb/lumos-utils@1.4.2':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/ckb-indexer': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/common-scripts': 0.23.0
      '@ckb-lumos/config-manager': 0.23.0
      '@ckb-lumos/helpers': 0.23.0
      '@ckb-lumos/light-client': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@ickb/v1-core@1.4.2':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/ckb-indexer': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/common-scripts': 0.23.0
      '@ckb-lumos/config-manager': 0.23.0
      '@ckb-lumos/helpers': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ickb/lumos-utils': 1.4.2
    transitivePeerDependencies:
      - encoding

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@joyid/ckb@1.0.1(typescript@5.6.2)':
    dependencies:
      '@joyid/common': 0.2.0(typescript@5.6.2)
      '@nervosnetwork/ckb-sdk-utils': 0.109.3
      cross-fetch: 4.0.0
      uncrypto: 0.1.3
    transitivePeerDependencies:
      - encoding
      - typescript
      - zod

  '@joyid/common@0.2.0(typescript@5.6.2)':
    dependencies:
      abitype: 0.8.7(typescript@5.6.2)
      type-fest: 4.6.0
    transitivePeerDependencies:
      - typescript
      - zod

  '@jridgewell/gen-mapping@0.3.5':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@lit-labs/ssr-dom-shim@1.2.1': {}

  '@lit/react@1.0.5(@types/react@18.3.8)':
    dependencies:
      '@types/react': 18.3.8

  '@lit/reactive-element@2.0.4':
    dependencies:
      '@lit-labs/ssr-dom-shim': 1.2.1

  '@nervosnetwork/ckb-sdk-utils@0.109.3':
    dependencies:
      '@nervosnetwork/ckb-types': 0.109.3
      bech32: 2.0.0
      elliptic: 6.5.4
      jsbi: 3.1.3
      tslib: 2.3.1

  '@nervosnetwork/ckb-types@0.109.3': {}

  '@next/env@14.2.10': {}

  '@next/eslint-plugin-next@14.2.8':
    dependencies:
      glob: 10.3.10

  '@next/swc-darwin-arm64@14.2.10':
    optional: true

  '@next/swc-darwin-x64@14.2.10':
    optional: true

  '@next/swc-linux-arm64-gnu@14.2.10':
    optional: true

  '@next/swc-linux-arm64-musl@14.2.10':
    optional: true

  '@next/swc-linux-x64-gnu@14.2.10':
    optional: true

  '@next/swc-linux-x64-musl@14.2.10':
    optional: true

  '@next/swc-win32-arm64-msvc@14.2.10':
    optional: true

  '@next/swc-win32-ia32-msvc@14.2.10':
    optional: true

  '@next/swc-win32-x64-msvc@14.2.10':
    optional: true

  '@noble/ciphers@0.5.3': {}

  '@noble/curves@1.2.0':
    dependencies:
      '@noble/hashes': 1.3.2

  '@noble/curves@1.6.0':
    dependencies:
      '@noble/hashes': 1.5.0

  '@noble/hashes@1.3.2': {}

  '@noble/hashes@1.5.0': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1

  '@nolyfill/is-core-module@1.0.39': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@rtsao/scc@1.1.0': {}

  '@rushstack/eslint-patch@1.10.4': {}

  '@swc/counter@0.1.3': {}

  '@swc/helpers@0.5.5':
    dependencies:
      '@swc/counter': 0.1.3
      tslib: 2.7.0

  '@tanstack/query-core@5.59.13': {}

  '@tanstack/react-query@5.59.15(react@18.3.1)':
    dependencies:
      '@tanstack/query-core': 5.59.13
      react: 18.3.1

  '@types/blake2b@2.1.3': {}

  '@types/deep-freeze-strict@1.1.2': {}

  '@types/json-schema@7.0.15': {}

  '@types/json5@0.0.29': {}

  '@types/lodash.isequal@4.5.8':
    dependencies:
      '@types/lodash': 4.17.12

  '@types/lodash@4.17.12': {}

  '@types/node@18.15.13': {}

  '@types/node@20.16.5':
    dependencies:
      undici-types: 6.19.8

  '@types/prop-types@15.7.13': {}

  '@types/react-dom@18.3.0':
    dependencies:
      '@types/react': 18.3.8

  '@types/react@18.3.8':
    dependencies:
      '@types/prop-types': 15.7.13
      csstype: 3.1.3

  '@types/semver@7.5.8': {}

  '@types/stylis@4.2.5': {}

  '@types/trusted-types@2.0.7': {}

  '@typescript-eslint/eslint-plugin@7.2.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint@8.57.1)(typescript@5.6.2)':
    dependencies:
      '@eslint-community/regexpp': 4.11.1
      '@typescript-eslint/parser': 7.2.0(eslint@8.57.1)(typescript@5.6.2)
      '@typescript-eslint/scope-manager': 7.2.0
      '@typescript-eslint/type-utils': 7.2.0(eslint@8.57.1)(typescript@5.6.2)
      '@typescript-eslint/utils': 7.2.0(eslint@8.57.1)(typescript@5.6.2)
      '@typescript-eslint/visitor-keys': 7.2.0
      debug: 4.3.7
      eslint: 8.57.1
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      semver: 7.6.3
      ts-api-utils: 1.3.0(typescript@5.6.2)
    optionalDependencies:
      typescript: 5.6.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2)':
    dependencies:
      '@typescript-eslint/scope-manager': 7.2.0
      '@typescript-eslint/types': 7.2.0
      '@typescript-eslint/typescript-estree': 7.2.0(typescript@5.6.2)
      '@typescript-eslint/visitor-keys': 7.2.0
      debug: 4.3.7
      eslint: 8.57.1
    optionalDependencies:
      typescript: 5.6.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@7.2.0':
    dependencies:
      '@typescript-eslint/types': 7.2.0
      '@typescript-eslint/visitor-keys': 7.2.0

  '@typescript-eslint/type-utils@7.2.0(eslint@8.57.1)(typescript@5.6.2)':
    dependencies:
      '@typescript-eslint/typescript-estree': 7.2.0(typescript@5.6.2)
      '@typescript-eslint/utils': 7.2.0(eslint@8.57.1)(typescript@5.6.2)
      debug: 4.3.7
      eslint: 8.57.1
      ts-api-utils: 1.3.0(typescript@5.6.2)
    optionalDependencies:
      typescript: 5.6.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@7.2.0': {}

  '@typescript-eslint/typescript-estree@7.2.0(typescript@5.6.2)':
    dependencies:
      '@typescript-eslint/types': 7.2.0
      '@typescript-eslint/visitor-keys': 7.2.0
      debug: 4.3.7
      globby: 11.1.0
      is-glob: 4.0.3
      minimatch: 9.0.3
      semver: 7.6.3
      ts-api-utils: 1.3.0(typescript@5.6.2)
    optionalDependencies:
      typescript: 5.6.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@7.2.0(eslint@8.57.1)(typescript@5.6.2)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.1)
      '@types/json-schema': 7.0.15
      '@types/semver': 7.5.8
      '@typescript-eslint/scope-manager': 7.2.0
      '@typescript-eslint/types': 7.2.0
      '@typescript-eslint/typescript-estree': 7.2.0(typescript@5.6.2)
      eslint: 8.57.1
      semver: 7.6.3
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@typescript-eslint/visitor-keys@7.2.0':
    dependencies:
      '@typescript-eslint/types': 7.2.0
      eslint-visitor-keys: 3.4.3

  '@ungap/structured-clone@1.2.0': {}

  '@yr/monotone-cubic-spline@1.0.3': {}

  abitype@0.8.7(typescript@5.6.2):
    dependencies:
      typescript: 5.6.2

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  acorn-jsx@5.3.2(acorn@8.12.1):
    dependencies:
      acorn: 8.12.1

  acorn@8.12.1: {}

  aes-js@4.0.0-beta.5: {}

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  apexcharts@3.54.1:
    dependencies:
      '@yr/monotone-cubic-spline': 1.0.3
      svg.draggable.js: 2.2.2
      svg.easing.js: 2.0.0
      svg.filter.js: 2.0.2
      svg.pathmorphing.js: 0.1.3
      svg.resize.js: 1.4.3
      svg.select.js: 3.0.1

  arg@5.0.2: {}

  argparse@2.0.1: {}

  aria-query@5.1.3:
    dependencies:
      deep-equal: 2.2.3

  array-buffer-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      is-array-buffer: 3.0.4

  array-includes@3.1.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0
      get-intrinsic: 1.2.4
      is-string: 1.0.7

  array-union@2.1.0: {}

  array.prototype.findlast@1.2.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-shim-unscopables: 1.0.2

  array.prototype.findlastindex@1.2.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-shim-unscopables: 1.0.2

  array.prototype.flat@1.3.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-shim-unscopables: 1.0.2

  array.prototype.flatmap@1.3.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-shim-unscopables: 1.0.2

  array.prototype.tosorted@1.1.4:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-shim-unscopables: 1.0.2

  arraybuffer.prototype.slice@1.0.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      is-array-buffer: 3.0.4
      is-shared-array-buffer: 1.0.3

  ast-types-flow@0.0.8: {}

  asynckit@0.4.0: {}

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.0.0

  axe-core@4.10.0: {}

  axios@1.7.9:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.1
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  axobject-query@4.1.0: {}

  b4a@1.6.7: {}

  balanced-match@1.0.2: {}

  base-x@3.0.10:
    dependencies:
      safe-buffer: 5.2.1

  base-x@4.0.0: {}

  base-x@5.0.0: {}

  base64-js@1.5.1: {}

  bech32@1.1.4: {}

  bech32@2.0.0: {}

  binary-extensions@2.3.0: {}

  bindings@1.5.0:
    dependencies:
      file-uri-to-path: 1.0.0

  bip66@1.1.5:
    dependencies:
      safe-buffer: 5.2.1

  bitcoinjs-message@2.2.0:
    dependencies:
      bech32: 1.1.4
      bs58check: 2.1.2
      buffer-equals: 1.0.4
      create-hash: 1.2.0
      secp256k1: 3.8.0
      varuint-bitcoin: 1.1.2

  blake2b-wasm@2.4.0:
    dependencies:
      b4a: 1.6.7
      nanoassert: 2.0.0

  blake2b@2.1.4:
    dependencies:
      blake2b-wasm: 2.4.0
      nanoassert: 2.0.0

  bn.js@4.12.0: {}

  bn.js@5.2.1: {}

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  brorand@1.1.0: {}

  browserify-aes@1.2.0:
    dependencies:
      buffer-xor: 1.0.3
      cipher-base: 1.0.4
      create-hash: 1.2.0
      evp_bytestokey: 1.0.3
      inherits: 2.0.4
      safe-buffer: 5.2.1

  bs58@4.0.1:
    dependencies:
      base-x: 3.0.10

  bs58@5.0.0:
    dependencies:
      base-x: 4.0.0

  bs58@6.0.0:
    dependencies:
      base-x: 5.0.0

  bs58check@2.1.2:
    dependencies:
      bs58: 4.0.1
      create-hash: 1.2.0
      safe-buffer: 5.2.1

  bs58check@4.0.0:
    dependencies:
      '@noble/hashes': 1.5.0
      bs58: 6.0.0

  buffer-equals@1.0.4: {}

  buffer-xor@1.0.3: {}

  buffer@6.0.3:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  call-bind@1.0.7:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      set-function-length: 1.2.2

  callsites@3.1.0: {}

  camelcase-css@2.0.1: {}

  camelize@1.0.1: {}

  caniuse-lite@1.0.30001662: {}

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  cipher-base@1.0.4:
    dependencies:
      inherits: 2.0.4
      safe-buffer: 5.2.1

  classnames@2.5.1: {}

  client-only@0.0.1: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@4.1.1: {}

  concat-map@0.0.1: {}

  create-hash@1.2.0:
    dependencies:
      cipher-base: 1.0.4
      inherits: 2.0.4
      md5.js: 1.3.5
      ripemd160: 2.0.2
      sha.js: 2.4.11

  create-hmac@1.1.7:
    dependencies:
      cipher-base: 1.0.4
      create-hash: 1.2.0
      inherits: 2.0.4
      ripemd160: 2.0.2
      safe-buffer: 5.2.1
      sha.js: 2.4.11

  cross-fetch@3.1.8:
    dependencies:
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  cross-fetch@4.0.0:
    dependencies:
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  cross-spawn@7.0.3:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  css-color-keywords@1.0.0: {}

  css-to-react-native@3.2.0:
    dependencies:
      camelize: 1.0.1
      css-color-keywords: 1.0.0
      postcss-value-parser: 4.2.0

  cssesc@3.0.0: {}

  csstype@3.1.3: {}

  damerau-levenshtein@1.0.8: {}

  data-view-buffer@1.0.1:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  data-view-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  data-view-byte-offset@1.0.0:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  debug@3.2.7:
    dependencies:
      ms: 2.1.3

  debug@4.3.7:
    dependencies:
      ms: 2.1.3

  deep-equal@2.2.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      call-bind: 1.0.7
      es-get-iterator: 1.1.3
      get-intrinsic: 1.2.4
      is-arguments: 1.1.1
      is-array-buffer: 3.0.4
      is-date-object: 1.0.5
      is-regex: 1.1.4
      is-shared-array-buffer: 1.0.3
      isarray: 2.0.5
      object-is: 1.1.6
      object-keys: 1.1.1
      object.assign: 4.1.5
      regexp.prototype.flags: 1.5.2
      side-channel: 1.0.6
      which-boxed-primitive: 1.0.2
      which-collection: 1.0.2
      which-typed-array: 1.1.15

  deep-freeze-strict@1.1.1: {}

  deep-is@0.1.4: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      gopd: 1.0.1

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  delayed-stream@1.0.0: {}

  didyoumean@1.2.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  dlv@1.1.3: {}

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  doctrine@3.0.0:
    dependencies:
      esutils: 2.0.3

  drbg.js@1.0.1:
    dependencies:
      browserify-aes: 1.2.0
      create-hash: 1.2.0
      create-hmac: 1.1.7

  eastasianwidth@0.2.0: {}

  elliptic@6.5.4:
    dependencies:
      bn.js: 4.12.0
      brorand: 1.1.0
      hash.js: 1.1.7
      hmac-drbg: 1.0.1
      inherits: 2.0.4
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  elliptic@6.5.7:
    dependencies:
      bn.js: 4.12.0
      brorand: 1.1.0
      hash.js: 1.1.7
      hmac-drbg: 1.0.1
      inherits: 2.0.4
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  enhanced-resolve@5.17.1:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.1

  es-abstract@1.23.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      arraybuffer.prototype.slice: 1.0.3
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      data-view-buffer: 1.0.1
      data-view-byte-length: 1.0.1
      data-view-byte-offset: 1.0.0
      es-define-property: 1.0.0
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-set-tostringtag: 2.0.3
      es-to-primitive: 1.2.1
      function.prototype.name: 1.1.6
      get-intrinsic: 1.2.4
      get-symbol-description: 1.0.2
      globalthis: 1.0.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2
      internal-slot: 1.0.7
      is-array-buffer: 3.0.4
      is-callable: 1.2.7
      is-data-view: 1.0.1
      is-negative-zero: 2.0.3
      is-regex: 1.1.4
      is-shared-array-buffer: 1.0.3
      is-string: 1.0.7
      is-typed-array: 1.1.13
      is-weakref: 1.0.2
      object-inspect: 1.13.2
      object-keys: 1.1.1
      object.assign: 4.1.5
      regexp.prototype.flags: 1.5.2
      safe-array-concat: 1.1.2
      safe-regex-test: 1.0.3
      string.prototype.trim: 1.2.9
      string.prototype.trimend: 1.0.8
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.2
      typed-array-byte-length: 1.0.1
      typed-array-byte-offset: 1.0.2
      typed-array-length: 1.0.6
      unbox-primitive: 1.0.2
      which-typed-array: 1.1.15

  es-define-property@1.0.0:
    dependencies:
      get-intrinsic: 1.2.4

  es-errors@1.3.0: {}

  es-get-iterator@1.1.3:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      is-arguments: 1.1.1
      is-map: 2.0.3
      is-set: 2.0.3
      is-string: 1.0.7
      isarray: 2.0.5
      stop-iteration-iterator: 1.0.0

  es-iterator-helpers@1.0.19:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-set-tostringtag: 2.0.3
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      globalthis: 1.0.4
      has-property-descriptors: 1.0.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      internal-slot: 1.0.7
      iterator.prototype: 1.1.2
      safe-array-concat: 1.1.2

  es-object-atoms@1.0.0:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.0.3:
    dependencies:
      get-intrinsic: 1.2.4
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.0.2:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.2.1:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.0.5
      is-symbol: 1.0.4

  escape-string-regexp@4.0.0: {}

  eslint-config-next@14.2.8(eslint@8.57.1)(typescript@5.6.2):
    dependencies:
      '@next/eslint-plugin-next': 14.2.8
      '@rushstack/eslint-patch': 1.10.4
      '@typescript-eslint/eslint-plugin': 7.2.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint@8.57.1)(typescript@5.6.2)
      '@typescript-eslint/parser': 7.2.0(eslint@8.57.1)(typescript@5.6.2)
      eslint: 8.57.1
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.6.3(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint@8.57.1))(eslint@8.57.1)
      eslint-plugin-import: 2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-typescript@3.6.3)(eslint@8.57.1)
      eslint-plugin-jsx-a11y: 6.10.0(eslint@8.57.1)
      eslint-plugin-react: 7.36.1(eslint@8.57.1)
      eslint-plugin-react-hooks: 4.6.2(eslint@8.57.1)
    optionalDependencies:
      typescript: 5.6.2
    transitivePeerDependencies:
      - eslint-import-resolver-webpack
      - eslint-plugin-import-x
      - supports-color

  eslint-import-resolver-node@0.3.9:
    dependencies:
      debug: 3.2.7
      is-core-module: 2.15.1
      resolve: 1.22.8
    transitivePeerDependencies:
      - supports-color

  eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint@8.57.1))(eslint@8.57.1):
    dependencies:
      '@nolyfill/is-core-module': 1.0.39
      debug: 4.3.7
      enhanced-resolve: 5.17.1
      eslint: 8.57.1
      eslint-module-utils: 2.11.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1)
      fast-glob: 3.3.2
      get-tsconfig: 4.8.1
      is-bun-module: 1.2.1
      is-glob: 4.0.3
    optionalDependencies:
      eslint-plugin-import: 2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-typescript@3.6.3)(eslint@8.57.1)
    transitivePeerDependencies:
      - '@typescript-eslint/parser'
      - eslint-import-resolver-node
      - eslint-import-resolver-webpack
      - supports-color

  eslint-module-utils@2.11.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 7.2.0(eslint@8.57.1)(typescript@5.6.2)
      eslint: 8.57.1
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.6.3(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint@8.57.1))(eslint@8.57.1)
    transitivePeerDependencies:
      - supports-color

  eslint-plugin-import@2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-typescript@3.6.3)(eslint@8.57.1):
    dependencies:
      '@rtsao/scc': 1.1.0
      array-includes: 3.1.8
      array.prototype.findlastindex: 1.2.5
      array.prototype.flat: 1.3.2
      array.prototype.flatmap: 1.3.2
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 8.57.1
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.11.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.30.0(@typescript-eslint/parser@7.2.0(eslint@8.57.1)(typescript@5.6.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1)
      hasown: 2.0.2
      is-core-module: 2.15.1
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.0
      semver: 6.3.1
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 7.2.0(eslint@8.57.1)(typescript@5.6.2)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-jsx-a11y@6.10.0(eslint@8.57.1):
    dependencies:
      aria-query: 5.1.3
      array-includes: 3.1.8
      array.prototype.flatmap: 1.3.2
      ast-types-flow: 0.0.8
      axe-core: 4.10.0
      axobject-query: 4.1.0
      damerau-levenshtein: 1.0.8
      emoji-regex: 9.2.2
      es-iterator-helpers: 1.0.19
      eslint: 8.57.1
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      language-tags: 1.0.9
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      safe-regex-test: 1.0.3
      string.prototype.includes: 2.0.0

  eslint-plugin-react-hooks@4.6.2(eslint@8.57.1):
    dependencies:
      eslint: 8.57.1

  eslint-plugin-react@7.36.1(eslint@8.57.1):
    dependencies:
      array-includes: 3.1.8
      array.prototype.findlast: 1.2.5
      array.prototype.flatmap: 1.3.2
      array.prototype.tosorted: 1.1.4
      doctrine: 2.1.0
      es-iterator-helpers: 1.0.19
      eslint: 8.57.1
      estraverse: 5.3.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      minimatch: 3.1.2
      object.entries: 1.1.8
      object.fromentries: 2.0.8
      object.values: 1.2.0
      prop-types: 15.8.1
      resolve: 2.0.0-next.5
      semver: 6.3.1
      string.prototype.matchall: 4.0.11
      string.prototype.repeat: 1.0.0

  eslint-scope@7.2.2:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint@8.57.1:
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.1)
      '@eslint-community/regexpp': 4.11.1
      '@eslint/eslintrc': 2.1.4
      '@eslint/js': 8.57.1
      '@humanwhocodes/config-array': 0.13.0
      '@humanwhocodes/module-importer': 1.0.1
      '@nodelib/fs.walk': 1.2.8
      '@ungap/structured-clone': 1.2.0
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.3
      debug: 4.3.7
      doctrine: 3.0.0
      escape-string-regexp: 4.0.0
      eslint-scope: 7.2.2
      eslint-visitor-keys: 3.4.3
      espree: 9.6.1
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 6.0.1
      find-up: 5.0.0
      glob-parent: 6.0.2
      globals: 13.24.0
      graphemer: 1.4.0
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      is-path-inside: 3.0.3
      js-yaml: 4.1.0
      json-stable-stringify-without-jsonify: 1.0.1
      levn: 0.4.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
      strip-ansi: 6.0.1
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color

  espree@9.6.1:
    dependencies:
      acorn: 8.12.1
      acorn-jsx: 5.3.2(acorn@8.12.1)
      eslint-visitor-keys: 3.4.3

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  esutils@2.0.3: {}

  ethers@6.13.2:
    dependencies:
      '@adraffy/ens-normalize': 1.10.1
      '@noble/curves': 1.2.0
      '@noble/hashes': 1.3.2
      '@types/node': 18.15.13
      aes-js: 4.0.0-beta.5
      tslib: 2.4.0
      ws: 8.17.1
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  event-target-shim@5.0.1: {}

  events@3.3.0: {}

  evp_bytestokey@1.0.3:
    dependencies:
      md5.js: 1.3.5
      safe-buffer: 5.2.1

  fast-deep-equal@3.1.3: {}

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fastq@1.17.1:
    dependencies:
      reusify: 1.0.4

  file-entry-cache@6.0.1:
    dependencies:
      flat-cache: 3.2.0

  file-uri-to-path@1.0.0: {}

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@3.2.0:
    dependencies:
      flatted: 3.3.1
      keyv: 4.5.4
      rimraf: 3.0.2

  flatted@3.3.1: {}

  follow-redirects@1.15.9: {}

  for-each@0.3.3:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.3.0:
    dependencies:
      cross-spawn: 7.0.3
      signal-exit: 4.1.0

  form-data@4.0.1:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  framer-motion@11.5.6(@emotion/is-prop-valid@1.2.2)(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      tslib: 2.7.0
    optionalDependencies:
      '@emotion/is-prop-valid': 1.2.2
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  function.prototype.name@1.1.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      functions-have-names: 1.2.3

  functions-have-names@1.2.3: {}

  get-intrinsic@1.2.4:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2

  get-symbol-description@1.0.2:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4

  get-tsconfig@4.8.1:
    dependencies:
      resolve-pkg-maps: 1.0.0

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.3.10:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 2.3.6
      minimatch: 9.0.5
      minipass: 7.1.2
      path-scurry: 1.11.1

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.0
      path-scurry: 1.11.1

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  globals@13.24.0:
    dependencies:
      type-fest: 0.20.2

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.0.1

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.2
      ignore: 5.3.2
      merge2: 1.4.1
      slash: 3.0.0

  gopd@1.0.1:
    dependencies:
      get-intrinsic: 1.2.4

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  has-bigints@1.0.2: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.0

  has-proto@1.0.3: {}

  has-symbols@1.0.3: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.0.3

  hash-base@3.1.0:
    dependencies:
      inherits: 2.0.4
      readable-stream: 3.6.2
      safe-buffer: 5.2.1

  hash.js@1.1.7:
    dependencies:
      inherits: 2.0.4
      minimalistic-assert: 1.0.1

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hmac-drbg@1.0.1:
    dependencies:
      hash.js: 1.1.7
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  ieee754@1.2.1: {}

  ignore@5.3.2: {}

  immutable@4.3.7: {}

  import-fresh@3.3.0:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  imurmurhash@0.1.4: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.4: {}

  internal-slot@1.0.7:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.0.6

  is-arguments@1.1.1:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-array-buffer@3.0.4:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4

  is-async-function@2.0.0:
    dependencies:
      has-tostringtag: 1.0.2

  is-bigint@1.0.4:
    dependencies:
      has-bigints: 1.0.2

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-boolean-object@1.1.2:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-bun-module@1.2.1:
    dependencies:
      semver: 7.6.3

  is-callable@1.2.7: {}

  is-core-module@2.15.1:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.1:
    dependencies:
      is-typed-array: 1.1.13

  is-date-object@1.0.5:
    dependencies:
      has-tostringtag: 1.0.2

  is-extglob@2.1.1: {}

  is-finalizationregistry@1.0.2:
    dependencies:
      call-bind: 1.0.7

  is-fullwidth-code-point@3.0.0: {}

  is-generator-function@1.0.10:
    dependencies:
      has-tostringtag: 1.0.2

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-map@2.0.3: {}

  is-negative-zero@2.0.3: {}

  is-number-object@1.0.7:
    dependencies:
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-path-inside@3.0.3: {}

  is-regex@1.1.4:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-set@2.0.3: {}

  is-shared-array-buffer@1.0.3:
    dependencies:
      call-bind: 1.0.7

  is-string@1.0.7:
    dependencies:
      has-tostringtag: 1.0.2

  is-symbol@1.0.4:
    dependencies:
      has-symbols: 1.0.3

  is-typed-array@1.1.13:
    dependencies:
      which-typed-array: 1.1.15

  is-weakmap@2.0.2: {}

  is-weakref@1.0.2:
    dependencies:
      call-bind: 1.0.7

  is-weakset@2.0.3:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4

  isarray@2.0.5: {}

  isexe@2.0.0: {}

  isomorphic-ws@5.0.0(ws@8.18.0):
    dependencies:
      ws: 8.18.0

  iterator.prototype@1.1.2:
    dependencies:
      define-properties: 1.2.1
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      reflect.getprototypeof: 1.0.6
      set-function-name: 2.0.2

  jackspeak@2.3.6:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jiti@1.21.6: {}

  js-tokens@4.0.0: {}

  js-xxhash@1.0.4: {}

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsbi@3.1.3: {}

  jsbi@4.3.0: {}

  json-buffer@3.0.1: {}

  json-schema-traverse@0.4.1: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@1.0.2:
    dependencies:
      minimist: 1.2.8

  jsx-ast-utils@3.3.5:
    dependencies:
      array-includes: 3.1.8
      array.prototype.flat: 1.3.2
      object.assign: 4.1.5
      object.values: 1.2.0

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  language-subtag-registry@0.3.23: {}

  language-tags@1.0.9:
    dependencies:
      language-subtag-registry: 0.3.23

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lilconfig@2.1.0: {}

  lilconfig@3.1.2: {}

  lines-and-columns@1.2.4: {}

  lit-element@4.1.0:
    dependencies:
      '@lit-labs/ssr-dom-shim': 1.2.1
      '@lit/reactive-element': 2.0.4
      lit-html: 3.2.0

  lit-html@3.2.0:
    dependencies:
      '@types/trusted-types': 2.0.7

  lit@3.2.0:
    dependencies:
      '@lit/reactive-element': 2.0.4
      lit-element: 4.1.0
      lit-html: 3.2.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.isequal@4.5.0: {}

  lodash.merge@4.6.2: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  lru-cache@10.4.3: {}

  lucide-react@0.445.0(react@18.3.1):
    dependencies:
      react: 18.3.1

  md5.js@1.3.5:
    dependencies:
      hash-base: 3.1.0
      inherits: 2.0.4
      safe-buffer: 5.2.1

  merge2@1.4.1: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  minimalistic-assert@1.0.1: {}

  minimalistic-crypto-utils@1.0.1: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@9.0.3:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  ms@2.1.3: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nan@2.20.0: {}

  nanoassert@2.0.0: {}

  nanoid@3.3.7: {}

  natural-compare@1.4.0: {}

  next@14.2.10(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      '@next/env': 14.2.10
      '@swc/helpers': 0.5.5
      busboy: 1.6.0
      caniuse-lite: 1.0.30001662
      graceful-fs: 4.2.11
      postcss: 8.4.31
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      styled-jsx: 5.1.1(react@18.3.1)
    optionalDependencies:
      '@next/swc-darwin-arm64': 14.2.10
      '@next/swc-darwin-x64': 14.2.10
      '@next/swc-linux-arm64-gnu': 14.2.10
      '@next/swc-linux-arm64-musl': 14.2.10
      '@next/swc-linux-x64-gnu': 14.2.10
      '@next/swc-linux-x64-musl': 14.2.10
      '@next/swc-win32-arm64-msvc': 14.2.10
      '@next/swc-win32-ia32-msvc': 14.2.10
      '@next/swc-win32-x64-msvc': 14.2.10
    transitivePeerDependencies:
      - '@babel/core'
      - babel-plugin-macros

  node-fetch@2.7.0:
    dependencies:
      whatwg-url: 5.0.0

  normalize-path@3.0.0: {}

  object-assign@4.1.1: {}

  object-hash@3.0.0: {}

  object-inspect@1.13.2: {}

  object-is@1.1.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1

  object-keys@1.1.1: {}

  object.assign@4.1.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      has-symbols: 1.0.3
      object-keys: 1.1.1

  object.entries@1.1.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0

  object.groupby@1.0.3:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3

  object.values@1.2.0:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  package-json-from-dist@1.0.0: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-type@4.0.0: {}

  picocolors@1.1.0: {}

  picomatch@2.3.1: {}

  pify@2.3.0: {}

  pirates@4.0.6: {}

  possible-typed-array-names@1.0.0: {}

  postcss-import@15.1.0(postcss@8.4.47):
    dependencies:
      postcss: 8.4.47
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.8

  postcss-js@4.0.1(postcss@8.4.47):
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.4.47

  postcss-load-config@4.0.2(postcss@8.4.47):
    dependencies:
      lilconfig: 3.1.2
      yaml: 2.5.1
    optionalDependencies:
      postcss: 8.4.47

  postcss-nested@6.2.0(postcss@8.4.47):
    dependencies:
      postcss: 8.4.47
      postcss-selector-parser: 6.1.2

  postcss-selector-parser@6.1.2:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-value-parser@4.2.0: {}

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.1.0
      source-map-js: 1.2.1

  postcss@8.4.38:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.1.0
      source-map-js: 1.2.1

  postcss@8.4.47:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.1.0
      source-map-js: 1.2.1

  prelude-ls@1.2.1: {}

  prop-types@15.8.1:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1

  proxy-from-env@1.1.0: {}

  punycode@2.3.1: {}

  queue-microtask@1.2.3: {}

  react-dom@18.3.1(react@18.3.1):
    dependencies:
      loose-envify: 1.4.0
      react: 18.3.1
      scheduler: 0.23.2

  react-is@16.13.1: {}

  react-is@18.3.1: {}

  react-loader-spinner@6.1.6(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-is: 18.3.1
      styled-components: 6.1.13(react-dom@18.3.1(react@18.3.1))(react@18.3.1)

  react-spinners@0.14.1(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)

  react-tooltip@5.28.0(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      '@floating-ui/dom': 1.6.11
      classnames: 2.5.1
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)

  react@18.3.1:
    dependencies:
      loose-envify: 1.4.0

  read-cache@1.0.0:
    dependencies:
      pify: 2.3.0

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  reflect.getprototypeof@1.0.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      globalthis: 1.0.4
      which-builtin-type: 1.1.4

  regexp.prototype.flags@1.5.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-errors: 1.3.0
      set-function-name: 2.0.2

  resolve-from@4.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve@1.22.8:
    dependencies:
      is-core-module: 2.15.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  resolve@2.0.0-next.5:
    dependencies:
      is-core-module: 2.15.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  reusify@1.0.4: {}

  rimraf@3.0.2:
    dependencies:
      glob: 7.2.3

  ripemd160@2.0.2:
    dependencies:
      hash-base: 3.1.0
      inherits: 2.0.4

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  safe-array-concat@1.1.2:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      isarray: 2.0.5

  safe-buffer@5.2.1: {}

  safe-regex-test@1.0.3:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-regex: 1.1.4

  scheduler@0.23.2:
    dependencies:
      loose-envify: 1.4.0

  scrypt-js@3.0.1: {}

  secp256k1@3.8.0:
    dependencies:
      bindings: 1.5.0
      bip66: 1.1.5
      bn.js: 4.12.0
      create-hash: 1.2.0
      drbg.js: 1.0.1
      elliptic: 6.5.7
      nan: 2.20.0
      safe-buffer: 5.2.1

  semver@6.3.1: {}

  semver@7.6.3: {}

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  sha.js@2.4.11:
    dependencies:
      inherits: 2.0.4
      safe-buffer: 5.2.1

  sha3@2.1.4:
    dependencies:
      buffer: 6.0.3

  shallowequal@1.1.0: {}

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel@1.0.6:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      object-inspect: 1.13.2

  signal-exit@4.1.0: {}

  slash@3.0.0: {}

  source-map-js@1.2.1: {}

  stop-iteration-iterator@1.0.0:
    dependencies:
      internal-slot: 1.0.7

  streamsearch@1.1.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string.prototype.includes@2.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.23.3

  string.prototype.matchall@4.0.11:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      has-symbols: 1.0.3
      internal-slot: 1.0.7
      regexp.prototype.flags: 1.5.2
      set-function-name: 2.0.2
      side-channel: 1.0.6

  string.prototype.repeat@1.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.23.3

  string.prototype.trim@1.2.9:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0

  string.prototype.trimend@1.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-bom@3.0.0: {}

  strip-json-comments@3.1.1: {}

  styled-components@6.1.13(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      '@emotion/is-prop-valid': 1.2.2
      '@emotion/unitless': 0.8.1
      '@types/stylis': 4.2.5
      css-to-react-native: 3.2.0
      csstype: 3.1.3
      postcss: 8.4.38
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      shallowequal: 1.1.0
      stylis: 4.3.2
      tslib: 2.6.2

  styled-jsx@5.1.1(react@18.3.1):
    dependencies:
      client-only: 0.0.1
      react: 18.3.1

  stylis@4.3.2: {}

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.6
      ts-interface-checker: 0.1.13

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  svg.draggable.js@2.2.2:
    dependencies:
      svg.js: 2.7.1

  svg.easing.js@2.0.0:
    dependencies:
      svg.js: 2.7.1

  svg.filter.js@2.0.2:
    dependencies:
      svg.js: 2.7.1

  svg.js@2.7.1: {}

  svg.pathmorphing.js@0.1.3:
    dependencies:
      svg.js: 2.7.1

  svg.resize.js@1.4.3:
    dependencies:
      svg.js: 2.7.1
      svg.select.js: 2.1.2

  svg.select.js@2.1.2:
    dependencies:
      svg.js: 2.7.1

  svg.select.js@3.0.1:
    dependencies:
      svg.js: 2.7.1

  tailwindcss-pseudo-elements@2.0.0(tailwindcss@3.4.12):
    dependencies:
      tailwindcss: 3.4.12

  tailwindcss@3.4.12:
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.6.0
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.2
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.21.6
      lilconfig: 2.1.0
      micromatch: 4.0.8
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.1.0
      postcss: 8.4.47
      postcss-import: 15.1.0(postcss@8.4.47)
      postcss-js: 4.0.1(postcss@8.4.47)
      postcss-load-config: 4.0.2(postcss@8.4.47)
      postcss-nested: 6.2.0(postcss@8.4.47)
      postcss-selector-parser: 6.1.2
      resolve: 1.22.8
      sucrase: 3.35.0
    transitivePeerDependencies:
      - ts-node

  tapable@2.2.1: {}

  text-table@0.2.0: {}

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  tr46@0.0.3: {}

  ts-api-utils@1.3.0(typescript@5.6.2):
    dependencies:
      typescript: 5.6.2

  ts-interface-checker@0.1.13: {}

  tsconfig-paths@3.15.0:
    dependencies:
      '@types/json5': 0.0.29
      json5: 1.0.2
      minimist: 1.2.8
      strip-bom: 3.0.0

  tslib@2.3.1: {}

  tslib@2.4.0: {}

  tslib@2.6.2: {}

  tslib@2.7.0: {}

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-fest@0.20.2: {}

  type-fest@4.6.0: {}

  typed-array-buffer@1.0.2:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-typed-array: 1.1.13

  typed-array-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13

  typed-array-byte-offset@1.0.2:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13

  typed-array-length@1.0.6:
    dependencies:
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13
      possible-typed-array-names: 1.0.0

  typescript@5.6.2: {}

  unbox-primitive@1.0.2:
    dependencies:
      call-bind: 1.0.7
      has-bigints: 1.0.2
      has-symbols: 1.0.3
      which-boxed-primitive: 1.0.2

  uncrypto@0.1.3: {}

  undici-types@6.19.8: {}

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  util-deprecate@1.0.2: {}

  uuid@8.3.2: {}

  valibot@0.42.1(typescript@5.6.2):
    optionalDependencies:
      typescript: 5.6.2

  varuint-bitcoin@1.1.2:
    dependencies:
      safe-buffer: 5.2.1

  webidl-conversions@3.0.1: {}

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  which-boxed-primitive@1.0.2:
    dependencies:
      is-bigint: 1.0.4
      is-boolean-object: 1.1.2
      is-number-object: 1.0.7
      is-string: 1.0.7
      is-symbol: 1.0.4

  which-builtin-type@1.1.4:
    dependencies:
      function.prototype.name: 1.1.6
      has-tostringtag: 1.0.2
      is-async-function: 2.0.0
      is-date-object: 1.0.5
      is-finalizationregistry: 1.0.2
      is-generator-function: 1.0.10
      is-regex: 1.1.4
      is-weakref: 1.0.2
      isarray: 2.0.5
      which-boxed-primitive: 1.0.2
      which-collection: 1.0.2
      which-typed-array: 1.1.15

  which-collection@1.0.2:
    dependencies:
      is-map: 2.0.3
      is-set: 2.0.3
      is-weakmap: 2.0.2
      is-weakset: 2.0.3

  which-typed-array@1.1.15:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  ws@8.17.1: {}

  ws@8.18.0: {}

  yaml@2.5.1: {}

  yocto-queue@0.1.0: {}


================================================
File: postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


================================================
File: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";
import type { PluginAPI } from 'tailwindcss/types/config'

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/globals.css",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "btn-gradient":
          "linear-gradient(to right, rgba(0, 204, 194, 1), rgba(71, 255, 246, 1), rgba(71, 255, 246, 1), rgba(0, 204, 194, 1))",
        "btn-gradient-hover":
          "linear-gradient(to right, rgba(0, 184, 174, 1), rgba(51, 235, 226, 1), rgba(51, 235, 226, 1), rgba(0, 184, 174, 1))",
        "btn-disabled-gradient":
          "linear-gradient(to right, rgba(0, 204, 194, 1), rgba(71, 255, 246, 1), rgba(71, 255, 246, 1), rgba(0, 204, 194, 1))",
        "melt-gradient":
          "radial-gradient(49.59% 217.87% at 50.41% 100%, rgba(60, 255, 151, 1) 0%, rgba(0, 250, 237, 1) 100%)",
        "melt-gradient-hover":
          "radial-gradient(49.59% 217.87% at 50.41% 90%, rgba(60, 255, 151, 0.9) 0%,rgba(0, 250, 237, 0.9) 100%)",
        "melt-disabled-gradient":
          "radial-gradient(66.67% 205.13% at 50% 150%, #3CFF97 0%, #00FAED 100%) ",
      
      
      },
      colors: {
        white: {
          DEFAULT: "#ffffff",
          50: "#ffffff",
          100: "#fefefe",
          200: "rgba(255, 255, 255, 0.2)",
          300: "rgba(255, 255, 255, 0.3)",
          400: "rgba(255, 255, 255, 0.4)",
          500: "rgba(255, 255, 255, 0.5)",
          600: "rgba(255, 255, 255, 0.6)",
          700: "rgba(255, 255, 255, 0.7)",
          800: "rgba(255, 255, 255, 0.8)",
          900: "rgba(255, 255, 255, 0.9)",
          950: "rgba(255, 255, 255, 0.95)",
        },
        gray: {
          50: "#f7f7f7",
          100: "#e1e1e1",
          200: "#cfcfcf",
          300: "#b1b1b1",
          400: "#9e9e9e",
          500: "#7e7e7e",
          600: "#626262",
          700: "#515151",
          800: "#2d2f2f",
          900: "#232323",
          950: "#161616",
        },
        cyan: {
          50: "#f0fdfc",
          100: "#ebfffe",
          200: "#c2fffc",
          300: "#85fff9",
          400: "#47fff6",
          500: "#00faed",
          600: "#00ccc2",
          700: "#00bfb8",
          800: "#006661",
          900: "#003d3a",
          950: "#002922",
        },
        yellow: {
          50: "#fffaf8",
          100: "#fff5e1",
          200: "#ffebb3",
          300: "#ffe180",
          400: "#ffd84c",
          500: "#ffcc00",
          600: "#d6ab00",
          700: "#aa8800",
          800: "#7f6600",
          900: "#553300",
          950: "#332008",
          alpha: "rgba(255, 204, 0, 0.12)",
        },
        orange: {
          50: "#fff5e5",
          100: "#ffeac9",
          200: "#ffcc80",
          300: "#ffb347",
          400: "#ff9e1a",
          500: "#ff8a00",
          600: "#d67500",
          700: "#aa5000",
          800: "#804600",
          900: "#553000",
          950: "#331c08",
        },
        red: {
          50: "rgba(255, 240, 240, 1)",
          100: "rgba(255, 225, 225, 1)",
          200: "rgba(255, 179, 179, 1)",
          300: "rgba(255, 128, 128, 1)",
          400: "rgba(255, 76, 76, 1)",
          500: "rgba(255, 51, 29, 1)",
          600: "rgba(204, 41, 22, 1)",
          700: "rgba(170, 32, 18, 1)",
          800: "rgba(127, 22, 16, 1)",
          900: "rgba(85, 13, 10, 1)",
          950: "rgba(51, 6, 8, 1)",
        },
        green: {
          50: "#f0fff5",
          100: "#e1ffeb",
          200: "#b3ffd4",
          300: "#80ffba",
          400: "#5cff90",
          500: "#3cff97",
          600: "#2dcc66",
          700: "#22a554",
          800: "#177f3f",
          900: "#0d592b",
          950: "#08331a",
        },
        purple: {
          50: "#f3f0ff",
          100: "#e3dbff",
          200: "#c6b8ff",
          300: "#aa95ff",
          400: "#9a94ff",
          500: "#8c76ff",
          600: "#7a5bd6",
          700: "#5f45aa",
          800: "#46337f",
          900: "#2e2155",
          950: "#1c1433",
        },
      },
      fontFamily: {
        "work-sans": ["var(--font-work-sans)", "sans-serif"],
        play: ["var(--font-play)", "sans-serif"],
      },
      fontSize: {
        description: [
          "18px",
          {
            lineHeight: "170%",
            fontWeight: "400", // Roman 通常对应 400 字重
          },
        ],
        "body-1": [
          "16px",
          {
            lineHeight: "170%",
            fontWeight: "400",
          },
        ],
        "body-2": [
          "14px",
          {
            lineHeight: "170%",
            fontWeight: "400",
          },
        ],
        footnote: [
          "12px",
          {
            lineHeight: "120%",
            fontWeight: "400",
          },
        ],
        button: [
          "16px",
          {
            lineHeight: "100%",
            fontWeight: "500", // Medium 通常对应 500 字重
          },
        ],
        // 添加heading样式
        h1: [
          "48px",
          {
            lineHeight: "120%",
            fontWeight: "400",
          },
        ],
        h2: [
          "40px",
          {
            lineHeight: "120%",
            fontWeight: "400",
          },
        ],
        h3: [
          "32px",
          {
            lineHeight: "120%",
            fontWeight: "400",
          },
        ],
        h4: [
          "28px",
          {
            lineHeight: "120%",
            fontWeight: "400",
          },
        ],
        h5: [
          "24px",
          {
            lineHeight: "120%",
            fontWeight: "400",
          },
        ],
        h6: [
          "20px",
          {
            lineHeight: "120%",
            fontWeight: "400",
          },
        ],
      },
    },
  },
  safelist: [
    "bg-emerald-900",
    "bg-purple-900",
    "bg-cyan-900",
    "bg-emerald-400",
    "bg-purple-400",
    "bg-cyan-400",
    "text-emerald-400",
    "text-purple-400",
    "text-cyan-400",
  ],
  plugins: [
    function ({ addUtilities }: PluginAPI) {
      addUtilities({
        //@ts-expect-error tailwind type
        '.no-arrows': {
          /* Styles to remove arrows in various browsers */
          '&::-webkit-inner-spin-button, &::-webkit-outer-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
          },
          '&::-moz-focus-inner': {
            border: 0,
          },
        },
      });
    },
  ],
};
export default config;


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: .eslintrc.json
================================================
{
  "extends": [
    "next/core-web-vitals",
    "next/typescript"
  ],
  "rules": {
    "@next/next/no-img-element": "off"
  }
}

================================================
File: src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
  --border-hover: #aaaaaa;
  --border-focus: #dddddd;
  --font-work-sans: var(--font-work-sans), sans-serif;
  --font-play: var(--font-play), sans-serif;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: var(--font-work-sans);
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

.play {
  font-family: var(--font-play);
}

input {
  border: 1px solid transparent;
  outline: 0;
}

input:focus {
  border: 1px solid var(--border-focus);
}

input:hover {
  border: 1px solid var(--border-hover);
}

================================================
File: src/app/layout.tsx
================================================
import "./globals.css";
import { Work_Sans, Play } from "next/font/google";
import { Metadata } from "next";
import { LayoutProvider } from "./layoutProvider";

export const metadata: Metadata = {
  title: "NervDAO",
  description: "A Universal Wallet-Interfaced Nervos DAO Portal",
  icons: "/favicon.svg",
};

const workSans = Work_Sans({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
  variable: "--font-work-sans",
});

const play = Play({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-play",
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${workSans.variable} ${play.variable}`}>
        <LayoutProvider>{children}</LayoutProvider>
      </body>
    </html>
  );
}


================================================
File: src/app/layoutProvider.tsx
================================================
"use client";

import { ccc } from "@ckb-ccc/connector-react";
import { NotificationProvider } from "@/context/NotificationProvider";
import Notification from "@/app/components/Notification";
import { CSSProperties } from "react";
import React from "react";

export  function  LayoutProvider({ children }: { children: React.ReactNode }) {
  const defaultClient = React.useMemo(() => {
    return process.env.NEXT_PUBLIC_IS_MAINNET === "true"
      ? new ccc.ClientPublicMainnet()
      : new ccc.ClientPublicTestnet();
  }, []);
  
  return (
    <ccc.Provider

      connectorProps={{
        style: {
          "--background": "#232323",
          "--divider": "rgba(255, 255, 255, 0.1)",
          "--btn-primary": "#2D2F2F",
          "--btn-primary-hover": "#515151",
          "--btn-secondary": "#2D2F2F",
          "--btn-secondary-hover": "#515151",
          "--icon-primary": "#FFFFFF",
          "--icon-secondary": "rgba(255, 255, 255, 0.6)",
          color: "#ffffff",
          "--tip-color": "#666",
        } as CSSProperties,
      }}
      defaultClient={defaultClient}
      clientOptions={[
        {
          name: "CKB Testnet",
          client: new ccc.ClientPublicTestnet(),
        },
        {
          name: "CKB Mainnet",
          client: new ccc.ClientPublicMainnet(),
        },
      ]}
    >
       
        <NotificationProvider>
          {children}
          <Notification />
        </NotificationProvider>
     
    </ccc.Provider>
  );
}


================================================
File: src/app/page.tsx
================================================
"use client"

import { ccc } from "@ckb-ccc/connector-react";
import ConnectWallet from "./components/ConnectWallet";
import AppLayout from "./components/AppLayout";
import 'react-tooltip/dist/react-tooltip.css'

export default function Home() {
  const { wallet } = ccc.useCcc();
  return (
    <div className="min-h-screen bg-black text-white">
      {wallet ? (
        <AppLayout />
      ) : (
        <ConnectWallet />
      )}
    </div>
  );
}


================================================
File: src/app/components/AppLayout.tsx
================================================
/* eslint-disable @next/next/no-img-element */
"use client";

import React, { useState } from "react";
import { Dashboard } from "./Dashboard";
import Title from "./Ttitle";
import Deposit from "./Deposit";
import { icons, Info, Menu } from "lucide-react";
import { useGetExplorerLink } from "@/hooks/Explorer";
import Ickb from "./Ickb";
import { Tooltip } from "react-tooltip";
import ReactDOMServer from "react-dom/server";
import IckbInfo from "./IckbInfo";
import { IckbModal } from "./IckbModal";

function NavItem({
  icon,
  label,
  isActive,
  onClick,
  iconName
}: {
  icon: keyof typeof icons;
  iconName?: string;
  label: string;
  isActive?: boolean;
  onClick?: () => void;
}) {
  const Icon = icons[icon]
  return (
    <li
      className={`flex flex-col cursor-pointer flex-grow min-w-14 py-2 items-center  justify-center hover:bg-gray-700 hover:border-b-2 lg:border-l-2 lg:hover:border-b-0 lg:hover:border-l-2 hover:border-cyan-500 ${isActive ? "bg-gray-700 border-b-2 lg:border-b-0 lg:border-l-2 border-cyan-500" : "border-gray-950"
        }`}
      onClick={onClick}
    >
      {iconName ? <img src={"/svg/icon-" + iconName + ".svg"} alt="ickb" className="w-7 h-7" /> : <Icon className="w-7 h-7" />}

      <p className="font-work-sans text-xs transform scale-75">{label}</p>
    </li>
  );
}

function NavItemMobile({
  iconName,
  icon,
  label,
  isActive,
  onClick,
}: {
  iconName?: string;
  icon: keyof typeof icons;
  label: string;
  isActive?: boolean;
  onClick?: () => void;
}) {
  const Icon = icons[icon];

  return (
    <li
      className={`flex flex-grow cursor-pointer min-w-14 pl-6 py-2 items-center border-cyan-500 ${isActive ? "bg-gray-700 border-b-2 lg:border-b-0 lg:border-l-2" : ""
        }`}
      onClick={onClick}
    >
      {iconName ? <img src={"/svg/icon-" + iconName + ".svg"} alt="ickb" className="w-7 h-7" /> : <Icon className="w-7 h-7" />}
      <p className="font-work-sans transform scale-75">{label}</p>
    </li>
  );
}

const AppLayout: React.FC = () => {
  const [currentPage, setCurrentPage] = useState("dashboard");
  const [isOpen, setIsOpen] = useState(false);
  const { index } = useGetExplorerLink();
  const [infoOpen, setInfoOpen] = useState(false);

  const getTitle = () => {
    switch (currentPage) {
      case "dashboard":
        return 'Dashboard';
      case "deposit":
        return "Deposit";
      case "ickb":
        return <>
          iCKB
          <a
            data-tooltip-id="top-tooltip"
            className="hidden sm:inline-block "
            data-tooltip-html={ReactDOMServer.renderToStaticMarkup(IckbInfo())}
          >
            <Info className="w-5 h-5 cursor-pointer ml-1 inline-block" />
          </a>
          <a

            className="inline-block sm:hidden "
            onClick={()=>{setInfoOpen(true)}}
          >
            <Info className="w-5 h-5 cursor-pointer ml-1 inline-block" />
          </a>
        </>;
      default:
        return currentPage.charAt(0).toUpperCase() + currentPage.slice(1);
    }
  };

  const renderContent = () => {
    switch (currentPage) {
      case "dashboard":
        return <Dashboard setCurrentPage={setCurrentPage} />;
      case "deposit":
        return <Deposit />;
      case "ickb":
        return <Ickb />;
    }
  };

  return (
    <div className="flex flex-col sm:flex-row sm:h-screen bg-gray-950 text-white">
      <aside className="bg-gray-950 px-0 pt-8 pb-4 border-r border-white-200 sm:flex flex-col items-stretch hidden">
        <div className="mb-6 flex justify-center items-center">
          <img src="./svg/plain-icon.svg" alt="logo" className="w-12 h-12" />
        </div>
        <nav className="flex items-stretch flex-grow">
          <ul className="flex gap-2 flex-col items-stretch justify-between flex-grow">
            <div className="flex flex-col items-stretch gap-2">
              <NavItem
                icon="House"
                label="Dashboard"
                isActive={currentPage === "dashboard"}
                onClick={() => setCurrentPage("dashboard")}
              />
              <NavItem
                icon="Download"
                label="Deposit"
                isActive={currentPage === "deposit"}
                onClick={() => setCurrentPage("deposit")}
              />
              <NavItem
                iconName="ickb"
                icon="ChartBarBig"
                label="iCKB"
                isActive={currentPage === "ickb"}
                onClick={() => setCurrentPage("ickb")}
              />
              <NavItem
                icon="ChartBarBig"
                label="Explore"
                onClick={() => window.open(`${index}/nervosdao`, "_blank")}
              />
            </div>
            <div className="flex flex-col items-stretch gap-2">
              <NavItem
                icon="Twitter"
                label="About us"
                onClick={() => window.open("https://x.com/CKBDevrel", "_blank")}
              />
              <NavItem
                icon="Github"
                label="Source"
                onClick={() => window.open("https://github.com/ckb-devrel/nervdao", "_blank")}
              />
            </div>
          </ul>
        </nav>
      </aside>
      <aside className="bg-gray-950 border-b border-white-200 flex flex-col items-stretch sm:hidden">
        <div className="mx-4 py-2 flex justify-between items-center">
          <img src="./svg/plain-icon.svg" alt="logo" className="w-10 h-10" />
          <Menu
            className="w-8 h-8 cursor-pointer"
            onClick={() => setIsOpen(!isOpen)}
          />
        </div>
        {isOpen ? (
          <nav className="flex items-stretch flex-grow py-2">
            <ul className="flex gap-2 flex-col items-stretch justify-between flex-grow">
              <NavItemMobile
                icon="House"
                label="Dashboard"
                isActive={currentPage === "dashboard"}
                onClick={() => setCurrentPage("dashboard")}
              />
              <NavItemMobile
                icon="Download"
                label="Deposit"
                isActive={currentPage === "deposit"}
                onClick={() => setCurrentPage("deposit")}
              />
               <NavItemMobile
                iconName="ickb"
                icon="ChartBarBig"
                label="iCKB"
                isActive={currentPage === "ickb"}
                onClick={() => setCurrentPage("ickb")}
              />
              <NavItemMobile
                icon="ChartBarBig"
                label="Explore"
                onClick={() => window.open(`${index}/nervosdao`, "_blank")}
              />
              <NavItemMobile
                icon="Twitter"
                label="About us"
                onClick={() => window.open("https://x.com/CKBDevrel", "_blank")}
              />
              <NavItemMobile
                icon="Github"
                label="Source"
                onClick={() => window.open("https://x.com/CKBDevrel", "_blank")}
              />
            </ul>
          </nav>
        ) : undefined}
      </aside>
      <main className="flex-1 flex flex-col py-8 px-4 lg:px-8 overflow-auto">
        <Title>{getTitle()}</Title>
        {renderContent()}
      </main>
      <Tooltip id="top-tooltip"
        events={['click']}
        place={"bottom-start"}
        style={{
          color: "#fff",
          borderRadius: '8px',
          borderWidth: '1px',
          borderColor: '#FFFFFF33',
          pointerEvents: 'inherit',
          boxShadow: ' 0px 4px 6px -2px #88888814,0px 10px 15px -3px #8888881F',
        }}
      />
      {infoOpen&& <IckbModal isOpen={infoOpen} onClose={()=>setInfoOpen(false)} infos={IckbInfo()} />
    }
    </div>
  );
};

export default AppLayout;


================================================
File: src/app/components/CircularProgress.tsx
================================================
import React from "react";

interface CircularProgressProps {
  percentage: number;
  size?: number;
  noText?: boolean;
  strokeWidth?: number;
  circleColor?: string;
  progressColor?: string;
}

const CircularProgress: React.FC<CircularProgressProps> = ({
  percentage,
  size = 48,
  noText = false,
  strokeWidth = 4,
  circleColor = "#374151",
  progressColor = "#10B981",
}) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const offset = circumference - (percentage / 100) * circumference;

  return (
    <div className="relative" style={{ width: size, height: size }}>
      <svg width={size} height={size} className="transform -rotate-90">
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke={circleColor}
          strokeWidth={strokeWidth}
          fill="none"
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke={progressColor}
          strokeWidth={strokeWidth}
          strokeDasharray={circumference}
          strokeDashoffset={offset}
          fill="none"
        />
      </svg>
      {noText ? undefined : (
        <div className="absolute inset-0 flex items-center justify-center">
          <span className="font-work-sans text-white text-sm font-bold">{`${percentage}%`}</span>
        </div>
      )}
    </div>
  );
};

export default CircularProgress;


================================================
File: src/app/components/ConnectWallet.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React from "react";
import { ccc } from "@ckb-ccc/connector-react";

const ConnectWallet: React.FC = () => {
  const { open } = ccc.useCcc();

  return (
    <div className="flex flex-col lg:flex-row items-stretch h-dvh bg-black text-white">
      <div className="h-[33dvh] lg:h-full p-6 flex-1 flex">
        <div className="rounded-lg overflow-hidden h-full flex-1 flex items-stretch justify-center">
          <img
            src="./svg/none-login-bg.svg"
            alt="nervdao"
            className="w-full lg:w-auto lg:h-full object-cover"
          />
        </div>
      </div>
      <div className="flex flex-1 flex-col items-center justify-center p-6">
        <img src="./svg/icon-text.svg" alt="nervdao" width={346} height={88} />
        <p className="font-work-sans text-white-50 mt-6 mb-12 text-center">
          A Universal Wallet-Interfaced Nervos DAO Portal
        </p>
        <button
          onClick={open}
          className="font-bold bg-btn-gradient text-gray-800 text-body-2 py-3 px-8 rounded-lg hover:bg-btn-gradient-hover transition duration-200"
        >
          Connect Wallet
        </button>
      </div>
    </div>
  );
};

export default ConnectWallet;


================================================
File: src/app/components/DaoCard.tsx
================================================
"use client";

import { getClaimEpoch, parseEpoch } from "@/utils/epoch";
import { ccc } from "@ckb-ccc/connector-react";
import { useState } from "react";
import { DaoDepositDetailModal } from "./DaoDepositDetailModal";
import { DaoWithdrawDetailModal } from "./DaoWithdrawDetailModal";
import { DaoInfo } from "@/hooks/DaoCollect";

export const DaoCard = ({
  tip,
  dao: { isRedeeming, infos, cell },
}: {
  tip?: ccc.ClientBlockHeader,
  dao: DaoInfo;
}) => {
  const [modalOpen, setModalOpen] = useState(false);

  const amount = ccc.fixedPointToString(
    (cell.cellOutput.capacity / ccc.fixedPointFrom("0.01")) *
      ccc.fixedPointFrom("0.01")
  );
  const profit = infos
    ? ccc.fixedPointToString(
        (infos[0] / ccc.fixedPointFrom("0.0001")) * ccc.fixedPointFrom("0.0001")
      )
    : "-";

  const profitCycles = infos
    ? Number(
        ccc.fixedPointToString(
          parseEpoch(infos[3][1].epoch) - parseEpoch(infos[2].epoch)
        )
      ) / 180
    : 1;
  const remainingCycles =
    infos && tip
      ? Number(
          ccc.fixedPointToString(
            parseEpoch(getClaimEpoch(infos[2], infos[3][1])) -
              parseEpoch(tip.epoch)
          )
        ) / 180
      : undefined;

  const remainingDays = (remainingCycles ?? 1) * 30;
  const progressPercentage = Math.min(
    100,
    Math.max(0, (1 - (remainingCycles ?? 1)) * 100)
  );

  const handleOpenModal = () => {
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
  };
  const color = isRedeeming
    ? remainingDays <= 0
      ? "emerald"
      : "purple"
    : "cyan";

  return (
    <>
      <div
        className="bg-gray-900 rounded-lg p-4 w-full border border-gray-400 cursor-pointer"
        onClick={handleOpenModal}
      >
        <div className="flex flex-col-reverse gap-2 lg:flex-row justify-between items-start lg:items-center mb-1">
          <span className="text-gray-400 text-sm">Amount</span>
          <span
            className={`px-2 py-0.5 rounded text-xs bg-${color}-900 text-${color}-400`}
          >
            {isRedeeming
              ? remainingDays <= 0
                ? "Withdrawable"
                : "Redeeming"
              : "Deposited"}
          </span>
        </div>
        <div className="text-2xl font-bold text-white mb-4">{amount} CKB</div>

        <div className="flex justify-between items-center mb-1 text-sm">
          <span className="text-gray-400">
            Cycle #
            {remainingCycles === undefined ? "-" : Math.ceil(profitCycles)}
          </span>
          <span className="text-gray-400">
            {remainingCycles === undefined
              ? "Pending Transaction"
              : remainingDays >= 0
              ? isRedeeming
                ? `Settle in ${Math.ceil(remainingDays)}d`
                : `${Math.ceil(remainingDays)}d remaining`
              : "Ended"}
          </span>
        </div>

        <div className="w-full bg-gray-700 rounded-full h-1 mb-4">
          <div
            className={`bg-${color}-400 h-1 rounded-full`}
            style={{ width: `${progressPercentage}%` }}
          ></div>
        </div>

        <div className={`flex items-center text-${color}-400 text-sm`}>
          <svg
            className="w-4 h-4 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
            />
          </svg>
          <span className="text-sm">{profit} CKB</span>
        </div>
      </div>
      {isRedeeming ? (
        <DaoWithdrawDetailModal
          isOpen={modalOpen}
          onClose={handleCloseModal}
          dao={cell}
          infos={infos}
          remainingDays={remainingDays}
          tip={tip}
          amount={amount}
          cycle={profitCycles}
          profit={profit}
        />
      ) : (
        <DaoDepositDetailModal
          isOpen={modalOpen}
          onClose={handleCloseModal}
          dao={cell}
          remainingDays={remainingDays}
          amount={amount}
          cycle={profitCycles}
          profit={profit}
          cell={infos}
        />
      )}
    </>
  );
};

export default DaoCard;


================================================
File: src/app/components/DaoDepositDetailModal.tsx
================================================
import { useGetExplorerLink } from "@/hooks/Explorer";
import { useNotification } from "@/context/NotificationProvider";
import { truncateString } from "@/utils/stringUtils";
import { ccc } from "@ckb-ccc/connector-react";
import React, { useEffect, useState } from "react";
import CircularProgress from "./CircularProgress";

interface DaoDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  cell:
    | [
        bigint,
        ccc.ClientTransactionResponse,
        ccc.ClientBlockHeader,
        [ccc.ClientTransactionResponse | undefined, ccc.ClientBlockHeader]
      ]
    | undefined;
  amount: string;
  profit: string;
  remainingDays: number;
  cycle: number;
  dao: ccc.Cell;
}

export function DaoDepositDetailModal({
  isOpen,
  onClose,
  remainingDays,
  cycle,
  cell,
  amount,
  profit,
  dao,
}: DaoDetailModalProps) {
  const [isLoading, setIsLoading] = useState(true);
  const [transactionFee, setTransactionFee] = useState<string>("");
  const [createTime, setCreateTime] = useState<string>("");
  const [txHash, setTxHash] = useState<string>("");
  const transaction = cell?.[1].transaction;

  const { index } = useGetExplorerLink();

  const signer = ccc.useSigner();
  const { showNotification } = useNotification();

  const withdraw = async () => {
    if (!signer || !cell) {
      return;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [_, _depositTx] = cell;
    if (!_depositTx.blockHash || !_depositTx.blockNumber) {
      showNotification("error", "Unknown error, invalid redeem");
      return;
    }
    const { blockHash, blockNumber } = _depositTx;
    const tx = ccc.Transaction.from({
      headerDeps: [blockHash],
      inputs: [{ previousOutput: dao.outPoint }],
      outputs: [dao.cellOutput],
      outputsData: [ccc.numLeToBytes(blockNumber, 8)],
    });
    await tx.addCellDepsOfKnownScripts(
      signer.client,
      ccc.KnownScript.NervosDao
    );
    await tx.completeInputsByCapacity(signer);
    await tx.completeFeeBy(signer, 1000);
    const result = await signer.sendTransaction(tx);
    showNotification("success", `Redeem Success: ${result}`);
  };

  useEffect(() => {
    if (!transaction || !signer) {
      return;
    }
    (async () => {
      setTransactionFee(
        ccc.fixedPointToString(
          (await transaction.getInputsCapacity(signer.client)) -
            transaction.getOutputsCapacity()
        )
      );
      setIsLoading(false);
    })();
    const hash = transaction.hash();
    const timeStamp = cell?.[2].timestamp
      ? new Date(Number(cell?.[2].timestamp)).toLocaleString()
      : "-";
    setCreateTime(timeStamp);
    setTxHash(hash);
  }, [transaction, cell, signer]);

  if (!isOpen) {
    return undefined;
  }

  const handleClose = (e: React.MouseEvent) => {
    e.stopPropagation();
    onClose();
  };

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
      onClick={handleClose}
    >
      <div
        className="bg-gray-800 rounded-lg p-6 w-full max-w-md relative"
        onClick={(e) => e.stopPropagation()}
      >
        <button
          onClick={handleClose}
          className="absolute top-4 right-4 bg-gray-950 rounded-full p-2 text-gray-400 hover:text-white"
        >
          <img src="./svg/close.svg" alt="Close" width={18} height={18} />
        </button>

        <h2 className="text-2xl font-bold mb-4 font-play">Deposit</h2>

        <div className="flex flex-col items-center mb-4">
          <div className="bg-cyan-500 rounded-full p-2 mb-2">
            <img src="./svg/deposit.svg" alt="CKB" width={24} height={24} />
          </div>
          <div className="text-2xl font-play font-bold">{amount} CKB</div>
        </div>

        <div className="bg-gray-700 rounded-lg p-4 mb-4">
          <div className="flex justify-between mb-2 font-work-sans">
            <span>Transaction Fee</span>
            {isLoading ? (
              <span className="animate-pulse bg-gray-300 h-6 w-24 rounded"></span>
            ) : (
              <span>{transactionFee} CKB</span>
            )}
          </div>
          <div className="flex justify-between font-work-sans">
            <span>Total</span>
            {isLoading ? (
              <span className="animate-pulse bg-gray-300 h-6 w-24 rounded"></span>
            ) : (
              <span>{parseFloat(amount) + parseFloat(transactionFee)} CKB</span>
            )}
          </div>
        </div>

        <div className="mb-4">
          <div className="flex justify-between mb-2 font-work-sans">
            <span className="text-gray-400">Transaction Hash</span>
            <span>{truncateString(txHash, 6, 4)} </span>
          </div>
          <div className="flex justify-between mb-2">
            <span className="text-gray-400">Deposited Date</span>
            <span> {createTime} </span>
          </div>
          <div className="flex justify-between mb-2">
            <span className="text-gray-400">Status</span>
            {cell?.[1].status === "committed" ? (
              <span className="bg-cyan-900 text-cyan-400 px-2 py-0.5 rounded text-xs flex items-center">
                Success
              </span>
            ) : (
              <span className="bg-orange-300 text-orange-800 px-2 py-0.5 rounded text-xs flex items-center">
                Pending
              </span>
            )}
          </div>
        </div>

        <div className="border-t border-gray-700 pt-4 mb-4">
          <div className="flex justify-between mb-2">
            <span className="text-gray-400">Current Cycle</span>
            <span>Cycle #{Math.ceil(cycle)}</span>
          </div>
          <div className="flex justify-between mb-2">
            <span className="text-gray-400">Time Remaining</span>
            <span className="flex items-center gap-2">
              <CircularProgress
                percentage={(3000 - remainingDays * 100) / 30}
                size={16}
                noText
                strokeWidth={2}
                progressColor="#00FAED"
              />
              {Math.ceil(remainingDays)} days
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Estimated Compensation</span>
            <span>{profit} CKB</span>
          </div>
        </div>

        <button
          className="w-full font-bold bg-btn-gradient text-gray-800 text-body-2 py-3 rounded-lg hover:bg-btn-gradient-hover transition duration-200"
          onClick={withdraw}
        >
          Redeem
        </button>

        <a
          target="_blank"
          href={`${index}/transaction/${txHash}`}
          className="text-teal-400 hover:text-teal-300 flex items-center justify-center pt-4"
        >
          <svg
            className="w-4 h-4 mr-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
            />
          </svg>
          View on Explorer
        </a>
      </div>
    </div>
  );
}


================================================
File: src/app/components/DaoWithdrawDetailModal.tsx
================================================
import React, { useCallback, useEffect, useState } from "react";
import Image from "next/image";
import { ccc } from "@ckb-ccc/connector-react";
import { truncateString } from "@/utils/stringUtils";
import Link from "next/link";
import CircularProgress from "./CircularProgress";
import { useGetExplorerLink } from "@/hooks/Explorer";
import { useNotification } from "@/context/NotificationProvider";
import { getClaimEpoch } from "@/utils/epoch";

interface DaoWithdrawDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  dao: ccc.Cell;
  amount: string;
  profit: string;
  remainingDays: number;
  cycle: number;
  tip: ccc.ClientBlockHeader | undefined;
  infos:
    | [
        bigint,
        ccc.ClientTransactionResponse,
        ccc.ClientBlockHeader,
        [ccc.ClientTransactionResponse | undefined, ccc.ClientBlockHeader]
      ]
    | undefined;
}

export function DaoWithdrawDetailModal({
  isOpen,
  onClose,
  remainingDays,
  amount,
  profit,
  cycle,
  infos,
  dao,
  tip,
}: DaoWithdrawDetailModalProps) {
  const { index } = useGetExplorerLink();
  const signer = ccc.useSigner();

  const [createTime, setCreateTime] = useState<string>("");
  const [withdrawTime, setWithdrawTime] = useState<string>("");
  const [txHash, setTxHash] = useState<string>("");
  const transaction = infos?.[3][0]?.transaction;
  const [transactionFee, setTransactionFee] = useState<string>("");
  const { showNotification } = useNotification();

  useEffect(() => {
    if (!transaction || !signer) {
      return;
    }

    (async () => {
      setTransactionFee(
        ccc.fixedPointToString(
          (await transaction.getInputsCapacity(signer.client)) -
            transaction.getOutputsCapacity()
        )
      );
    })();
    const hash = transaction.hash();
    const timeStamp = infos?.[2].timestamp
      ? new Date(Number(infos?.[2].timestamp)).toLocaleString()
      : "-";
    const withdrawInitiatedDate = infos?.[3][1].timestamp
      ? new Date(Number(infos?.[3][1].timestamp)).toLocaleString()
      : "-";
    setCreateTime(timeStamp);
    setWithdrawTime(withdrawInitiatedDate);
    setTxHash(hash);
  }, [transaction, signer, infos]);

  const withdraw = useCallback(async () => {
    if (!signer || !infos) return;
    const [profit, depositTx, depositHeader] = infos;
    if (!depositTx.blockHash) {
      showNotification("error", "Unknown error, invalid withdraw");
      return;
    }
    const { blockHash } = depositTx;
    if (!infos[3]) {
      showNotification("error", "Unknown error, invalid withdraw");
      return;
    }
    const [withdrawTx, withdrawHeader] = infos[3];
    if (!withdrawTx?.blockHash) {
      showNotification("error", "Unknown error, invalid withdraw");
      return;
    }
    const tx = ccc.Transaction.from({
      headerDeps: [withdrawTx.blockHash, blockHash],
      inputs: [
        {
          previousOutput: dao.outPoint,
          since: {
            relative: "absolute",
            metric: "epoch",
            value: ccc.epochToHex(getClaimEpoch(depositHeader, withdrawHeader)),
          },
        },
      ],
      outputs: [
        {
          lock: (await signer.getRecommendedAddressObj()).script,
        },
      ],
      witnesses: [
        ccc.WitnessArgs.from({
          inputType: ccc.numLeToBytes(1, 8),
        }).toBytes(),
      ],
    });
    await tx.addCellDepsOfKnownScripts(
      signer.client,
      ccc.KnownScript.NervosDao
    );

    await tx.completeInputsByCapacity(signer);
    await tx.completeFeeChangeToOutput(signer, 0, 1000);
    tx.outputs[0].capacity += profit;
    const result = await signer.sendTransaction(tx);
    showNotification("success", `Withdraw Success: ${result}`);
  }, [signer, infos, dao, showNotification]);

  const handleClose = (e: React.MouseEvent) => {
    e.stopPropagation();
    onClose();
  };

  if (!isOpen) {
    return undefined;
  }

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
      onClick={handleClose}
    >
      <div
        className="bg-gray-800 rounded-lg p-6 w-full max-w-md relative"
        onClick={(e) => e.stopPropagation()}
      >
        <button
          onClick={handleClose}
          className="absolute top-4 right-4 bg-gray-950 rounded-full p-2 text-gray-400 hover:text-white"
        >
          <img src="./svg/close.svg" alt="Close" width={18} height={18} />
        </button>

        <h2 className="text-2xl font-bold font-play mb-4">Redemption</h2>

        <div className="flex justify-center items-center mb-4">
          <div className="bg-purple-600 rounded-full p-3">
            <Image
              src="/svg/withdraw.svg"
              alt="Withdraw"
              width={24}
              height={24}
            />
          </div>
        </div>

        <div className="text-center mb-4">
          <p className="text-2xl font-play font-bold">{amount} CKB</p>
        </div>

        <div className="bg-gray-700 rounded-lg p-4 mb-4">
          <div className="flex justify-between mb-2">
            <span>Original Deposit</span>
            <span>{amount} CKB</span>
          </div>
          <div className="flex justify-between mb-2">
            <span>Transaction Fee</span>
            <span>-{transactionFee} CKB</span>
          </div>
          <div className="flex justify-between">
            <span>Compensation</span>
            <span className="text-green-400">+{profit} CKB</span>
          </div>
        </div>

        <div className="space-y-2 mb-4">
          <div className="flex justify-between">
            <span className="text-gray-400">Transaction Hash</span>
            <span>{truncateString(txHash, 6, 4)}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Deposited Date</span>
            <span>{createTime}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Redeemed Date</span>
            <span>{withdrawTime}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">
              {remainingDays >= 0 ? "Settle" : "Settled"} Date
            </span>
            <span>
              {!tip
                ? "-"
                : new Date(
                    Number(tip.timestamp) + remainingDays * 24 * 60 * 60 * 1000
                  ).toLocaleString()}
            </span>
          </div>
        </div>

        <div className="space-y-2 mb-4">
          <div className="flex justify-between items-center">
            <span className="text-gray-400">Status</span>
            {infos?.[1].status === "committed" ? (
              remainingDays >= 0 ? (
                <span className="bg-purple-900 text-purple-400 px-2 py-0.5 rounded text-xs flex items-center">
                  Redeeming
                </span>
              ) : (
                <span className="bg-green-900 text-green-400 px-2 py-0.5 rounded text-xs flex items-center">
                  Withdrawable
                </span>
              )
            ) : (
              <span className="bg-orange-300 text-orange-800 px-2 py-0.5 rounded text-xs flex items-center">
                Pending
              </span>
            )}
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Cycle</span>
            <span>Cycle #{Math.ceil(cycle)}</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-gray-400">Settlement Period</span>
            <div className="flex items-center gap-2">
              {remainingDays >= 0 ? (
                <>
                  <CircularProgress
                    percentage={(3000 - remainingDays * 100) / 30}
                    size={16}
                    noText
                    strokeWidth={2}
                    progressColor="#8C76FF"
                  />
                  <span>{Math.ceil(remainingDays)} days remaining</span>
                </>
              ) : (
                "Ended"
              )}
            </div>
          </div>
        </div>

        <button
          className="w-full font-bold bg-btn-gradient text-gray-800 text-body-2 py-3 rounded-lg hover:bg-btn-gradient-hover transition duration-200 disabled:opacity-50 disabled:hover:bg-btn-gradient"
          onClick={withdraw}
          disabled={remainingDays >= 0}
        >
          Withdraw
        </button>

        <Link
          className="text-teal-400 hover:text-teal-300 flex items-center justify-center pt-4"
          target="_blank"
          href={`${index}/transaction/${txHash}`}
        >
          <svg
            className="w-4 h-4 mr-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
            />
          </svg>
          <p>View on Explorer</p>
        </Link>
      </div>
    </div>
  );
}


================================================
File: src/app/components/Dashboard.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React from "react";
import DashboardProfile from "./DashboardProfile";
import { DashboardRecentTransactions } from "./DashboardRecentTransactions";
import DaoCard from "./DaoCard";
import { useDaoCells } from "@/hooks/DaoCollect";
import { ccc } from "@ckb-ccc/connector-react";

export function Dashboard({
  setCurrentPage,
}: {
  setCurrentPage: (page: string) => void;
}) {
  const { cells: daos, tip } = useDaoCells();

  return (
    <div className="flex flex-col lg:flex-row flex-grow lg:items-stretch gap-6">
      <div className="flex flex-col flex-1 gap-6">
        <DashboardProfile />
        <DashboardRecentTransactions className="hidden lg:flex" />
      </div>
      <div className="bg-gray-900 rounded-lg p-6 flex flex-col flex-[2]">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold">Manage Holdings in Nervos DAO</h2>
        </div>

        {daos && daos.length > 0 ? (
          <div className="grid lg:grid-cols-2 gap-2">
            {daos.map((dao) => (
              <DaoCard
                key={ccc.hexFrom(dao.cell.outPoint.toBytes())}
                dao={dao}
                tip={tip}
              />
            ))}
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center h-full py-4">
            <div className="bg-gray-800 rounded-full mb-4">
              <img
                src={"./svg/no-holdings.svg"}
                alt="Nervos DAO"
                width={160}
                height={160}
              />
            </div>
            <h3 className="text-xl font-bold mb-2">No Holdings Yet</h3>
            <p className="text-gray-400 mb-6 text-center lg:mx-4">
              Accumulate compensation now through the Nervos DAO. You can redeem or withdraw your holdings after depositing.
            </p>
            <button
              className="font-bold bg-btn-gradient text-gray-800 text-body-2 py-3 px-6 rounded-lg hover:bg-btn-gradient-hover transition duration-200"
              onClick={() => setCurrentPage("deposit")}
            >
              Make a Deposit
            </button>
          </div>
        )}
      </div>
      <DashboardRecentTransactions className="lg:hidden" />
    </div>
  );
}


================================================
File: src/app/components/DashboardHistoryItem.tsx
================================================
import React, { useEffect, useState } from "react";
import { ccc } from "@ckb-ccc/connector-react";
import { icons } from "lucide-react";

interface DashboardHistoryItemProps {
  transaction: ccc.ClientTransactionResponse;
}

export function DashboardHistoryItem({
  transaction,
}: DashboardHistoryItemProps) {
  const { client } = ccc.useCcc();
  const [action, setAction] = useState<"Deposit" | "Redeem" | "Withdraw">("Deposit");
  const [formattedAmount, setFormattedAmount] = useState("-");

  useEffect(() => {
    (async () => {
      const daoType = await ccc.Script.fromKnownScript(
        client,
        ccc.KnownScript.NervosDao,
        "0x"
      );

      const first = transaction.transaction.outputs.findIndex((o) =>
        o.type?.eq(daoType)
      );

      if (first === -1) {
        setAction("Withdraw");
        setFormattedAmount(
          ccc.fixedPointToString(
            transaction.transaction.getOutputsCapacity() -
              (await transaction.transaction.getInputsCapacity(client)) +
              transaction.transaction.inputs
                .filter((i) => i.cellOutput?.type?.eq(daoType))
                .reduce(
                  (acc, a) => acc + (a.cellOutput?.capacity ?? ccc.Zero),
                  ccc.Zero
                )
          )
        );
      } else {
        if (
          ccc.numFrom(transaction.transaction.outputsData[first]) !== ccc.Zero
        ) {
          setAction("Redeem");
        } else {
          setAction("Deposit");
        }
        setFormattedAmount(
          ccc.fixedPointToString(
            transaction.transaction.outputs
              .filter((o) => o.type?.eq(daoType))
              .reduce((acc, a) => acc + a.capacity, ccc.Zero)
          )
        );
      }
    })();
  }, [transaction, client]);

  const iconColor = {
    Deposit: "bg-cyan-600",
    Redeem: "bg-purple-600",
    Withdraw: "bg-green-600",
  }[action];
  const actionText = {
    Deposit: "Deposit to Nervos DAO",
    Redeem: "Redeem from Nervos DAO",
    Withdraw: "Withdraw",
  }[action];
  const Icon = {
    Deposit: icons["Download"],
    Redeem: icons["ClockArrowUp"],
    Withdraw: icons["ArrowUp"],
  }[action];

  const [date, setDate] = useState("-");

  useEffect(() => {
    const updateDate = async () => {
      if (!transaction.blockHash) {
        return;
      }

      const header = await client.getHeaderByHash(transaction.blockHash);
      if (!header) {
        return;
      }

      setDate(new Date(Number(header.timestamp)).toLocaleString());
      clearInterval(interval);
    };
    const interval = setInterval(updateDate, 1000);
    updateDate();

    return () => clearInterval(interval);
  }, [client, transaction]);

  return (
    <div className="flex items-center justify-between py-2">
      <div className="flex items-center">
        <div className={`${iconColor} rounded-full p-2 mr-3`}>
          <Icon className="w-4 h-4" />
        </div>
        <div>
          <p className="text-white font-work-sans text-body-2">{actionText}</p>
          <p className="text-gray-400 font-work-sans text-sm">{date}</p>
        </div>
      </div>
      <div className="text-white font-work-sans text-body-2">
        {formattedAmount} CKB
      </div>
    </div>
  );
}


================================================
File: src/app/components/DashboardProfile.tsx
================================================
"use client";

/* eslint-disable @next/next/no-img-element */
import React, { useEffect, useState } from "react";
import CircularProgress from "./CircularProgress";
import { ccc } from "@ckb-ccc/connector-react";
import { formatBalance, truncateAddress } from "@/utils/stringUtils";
import { useDaoDeposits, useDaoRedeems } from "@/hooks/DaoCollect";
import SkeletonLoader from "./SkeletonLoader";
import { User } from "lucide-react";
import { getUserUdtCapacityBySigner } from "@/cores/queries";

const DashboardProfile: React.FC = () => {
  const [balance, setBalance] = useState<string>("");
  const [ickbBbalance, setIckbBbalance] = useState<string>("");
  const [address, setAddress] = useState<string>("");
  const [apy, setApy] = useState("-");
  const [isLoadingBalance, setIsLoadingBalance] = useState(true);
  const {
    profitSum: depositProfit,
    sum: depositSum,
    isLoading: isLoadingDeposits,
  } = useDaoDeposits();
  const {
    profitSum: withdrawalProfit,
    sum: withdrawalSum,
    isLoading: isLoadingWithdrawals,
  } = useDaoRedeems();
  const { wallet, open } = ccc.useCcc();
  const signer = ccc.useSigner();

  useEffect(() => {
    if (!signer) {
      return;
    }
    (async () => {
      let ickb = BigInt(0)
       ickb = await getUserUdtCapacityBySigner(signer);
      setIckbBbalance(ccc.fixedPointToString(ickb))
    })();
    (async () => {
      const addr = await signer.getRecommendedAddress();
      setAddress(addr);
    })();

    const refresh = async () => {
      try {
        const bal = await signer.getBalance();
        const tip = await signer.client.getTipHeader();
        // 75600 blocks equals about 7 days
        const past = await signer.client.getHeaderByNumber(
          ccc.numMax(tip.number - ccc.numFrom("75600"), 1)
        );
        if (past) {
          setBalance(ccc.fixedPointToString(bal));
          const times =
            (ccc.numFrom(365 * 24 * 60 * 60 * 1000) * ccc.fixedPointFrom(1)) /
            (tip.timestamp - past.timestamp);
          setApy(
            `~${ccc.fixedPointToString(
              ((tip.dao.ar - past.dao.ar) *
                ccc.numFrom(100) *
                ccc.fixedPointFrom(1) *
                times) /
              past.dao.ar /
              ccc.fixedPointFrom(1) /
              ccc.fixedPointFrom(1, 6),
              2
            )}%`
          );
        }
      } catch (error) {
      } finally {
        setIsLoadingBalance(false);
      }
    };

    const interval = setInterval(refresh, 5000);
    refresh();
    return () => clearInterval(interval);
  }, [signer]);

  const isLoading =
    isLoadingBalance || isLoadingDeposits || isLoadingWithdrawals;

  if (isLoading) {
    return <SkeletonLoader />;
  }

  const profit = depositProfit + withdrawalProfit;
  const totalBalance = ccc.numMax(
    BigInt(ccc.fixedPointFrom(balance, 8)) +
    depositSum +
    withdrawalSum +
    profit,
    ccc.numFrom(1)
  );
  const availablePercentage =
    Number((ccc.fixedPointFrom(balance, 8) * BigInt(100)) / totalBalance) || 0;
  const depositedPercentage =
    Number((depositSum * BigInt(100)) / totalBalance) || 0;
  const withdrawingPercentage =
    Number((withdrawalSum * BigInt(100)) / totalBalance) || 0;

  return (
    <div className="bg-gray-900 rounded-lg p-4 w-full">
      <div className="flex items-center mb-4 cursor-pointer" onClick={open}>
        <div className="rounded-full p-2 mr-3">
          {wallet && <img src={wallet.icon} alt="avatar" className="w-6 h-6" />}
        </div>
        <div>
          <h2 className="font-play text-cyan-400 text-2xl font-bold">
            {formatBalance(ccc.fixedPointToString(totalBalance))} CKB
          </h2>
          <p className="font-work-sans text-gray-400 text-sm flex items-center gap-2">
            {truncateAddress(address, 10, 6)} <User className="w-4 h-4" />
          </p>
        </div>
      </div>

      {[
        {
          label: "Balance",
          value: balance,
          percentage: availablePercentage,
          color: "#3CFF97",
        },
        {
          label: "Deposited CKB",
          value: ccc.fixedPointToString(depositSum),
          percentage: depositedPercentage,
          color: "#00FAED",
        },
        {
          label: "Redeeming CKB",
          value: ccc.fixedPointToString(withdrawalSum),
          percentage: withdrawingPercentage,
          color: "#8C76FF",
        },
      ].map(({ label, value, percentage, color }, index) => (
        <div key={index} className="bg-gray-800 relative rounded-lg p-3 mb-2">
          <div className="flex justify-between items-center">
            <span className="font-work-sans text-gray-400">{label}</span>
          </div>
          <div className="flex justify-between items-center mt-1">
            <span className="font-play text-white text-lg font-bold">
              {ccc.fixedPointToString(value, 8)} CKB
            </span>
          </div>
          <div className="absolute right-3 top-1/2 -translate-y-1/2">
            <CircularProgress
              percentage={Math.round(percentage)}
              size={48}
              strokeWidth={3}
              progressColor={color}
            />
          </div>
        </div>
      ))}
       
      <div className="bg-gray-800 relative rounded-lg p-3 pr-5 mb-2">
        <div className="flex justify-between items-center font-work-sans text-gray-400">
          <span>Current Compensation</span>
          <span>APY</span>
        </div>
        <div className="flex justify-between items-center mt-1 font-play text-white text-lg font-bold">
          <span>{ccc.fixedPointToString(profit, 8)} CKB</span>
          <span>{apy}</span>
        </div>
      </div>
      <div className="bg-gray-800 relative rounded-lg p-3 mb-2">
          <div className="flex justify-between items-center">
            <span className="font-work-sans text-gray-400">iCKB Balance</span>
          </div>
          <div className="flex justify-between items-center mt-1">
            <span className="font-play text-white text-lg font-bold">
              {ccc.fixedPointToString(ickbBbalance, 8)} CKB
            </span>
          </div>
          
        </div>
    </div>
  );
};

export default DashboardProfile;


================================================
File: src/app/components/DashboardRecentTransactions.tsx
================================================
import React, { useEffect } from "react";
import { DashboardHistoryItem } from "./DashboardHistoryItem";
import { ccc } from "@ckb-ccc/connector-react";

interface DashboardRecentTransactionsProps {
  isRedeeming?: boolean;
  title?: string;
}

async function* getDaoTransactions(signer: ccc.Signer, isRedeeming?: boolean) {
  for await (const tx of signer.findTransactions(
    {
      script: await ccc.Script.fromKnownScript(
        signer.client,
        ccc.KnownScript.NervosDao,
        "0x"
      ),
    },
    true,
    "desc"
  )) {
    if (isRedeeming === undefined) {
      yield tx.txHash;
      continue;
    }

    const inInput = tx.cells.find(({ isInput }) => isInput);
    const inOutput = tx.cells.find(({ isInput }) => !isInput);
    if (isRedeeming && inInput) {
      yield tx.txHash;
    } else if (!isRedeeming && !inInput && inOutput) {
      yield tx.txHash;
    }
  }
}

export function DashboardRecentTransactions({
  isRedeeming,
  title = "Recent Transactions",
  ...props
}: DashboardRecentTransactionsProps & React.ComponentPropsWithoutRef<"div">) {
  const signer = ccc.useSigner();

  const [limit, setLimit] = React.useState(5);
  const [txs, setTxs] = React.useState<ccc.ClientTransactionResponse[]>([]);
  const [txGenerator, setTxGenerator] = React.useState<
    AsyncGenerator<ccc.Hex> | undefined
  >(undefined);

  useEffect(() => {
    if (!signer) {
      return;
    }

    setTxGenerator(getDaoTransactions(signer, isRedeeming));
    setTxs([]);
    setLimit(5);

    const refresh = async () => {
      setTxs((txs) => {
        if (txs.length === 0) {
          return txs;
        }
        (async () => {
          for await (const hash of getDaoTransactions(signer, isRedeeming)) {
            if (txs.find((t) => t.transaction.hash() === hash)) {
              break;
            }
            const tx = await signer.client.getTransaction(hash);
            if (!tx) {
              break;
            }
            setTxs((txs) => {
              if (txs.find((t) => t.transaction.hash() === hash)) {
                return txs;
              }
              return [tx, ...txs];
            });
          }
        })();
        return txs;
      });
    };

    const interval = setInterval(refresh, 5000);
    return () => clearInterval(interval);
  }, [signer, isRedeeming]);

  useEffect(() => {
    if (!txGenerator || !signer || txs.length >= limit) {
      return;
    }

    (async () => {
      const { value, done } = await txGenerator.next();
      if (done) {
        setTxGenerator(undefined);
        return;
      }

      const tx = await signer.client.getTransaction(value);
      if (!tx) {
        return;
      }
      setTxs((txs) => [...txs, tx]);
    })();
  }, [txGenerator, limit, txs, signer]);

  if (txs.length === 0) {
    return (
      <div
        {...props}
        className={`flex flex-grow items-center justify-center bg-gray-800 rounded-lg p-4  ${props.className}`}
      >
        <p className="text-gray-400">No recent transactions</p>
      </div>
    );
  }

  return (
    <div
      {...props}
      className={`bg-gray-900 rounded-lg p-4 flex flex-col ${props.className}`}
    >
      <h3 className="text-xl font-play font-bold mb-4">{title}</h3>
      <div>
        {txs.slice(0, limit).map((transaction, index) => (
          <DashboardHistoryItem key={index} transaction={transaction} />
        ))}
        {txGenerator ? (
          <button
            className="text-cyan-400 mt-4 hover:underline"
            onClick={() => setLimit(limit + 5)}
          >
            View all history
          </button>
        ) : undefined}
      </div>
    </div>
  );
}


================================================
File: src/app/components/Deposit.tsx
================================================
import React from "react";
import DepositForm from "./DepositForm";
import { DashboardRecentTransactions } from "./DashboardRecentTransactions";
import DepositFAQ from "./DepositFAQ";

const Deposit: React.FC = () => {
  return (
    <div className="flex flex-col flex-grow lg:flex-row lg:items-stretch gap-6">
      <div className="space-y-6 flex flex-col flex-1">
        <DepositForm />
        <DashboardRecentTransactions
          isRedeeming={false}
          title="Recent Deposits"
          className="flex-grow hidden lg:flex"
        />
      </div>
      <DepositFAQ />
      <DashboardRecentTransactions
        isRedeeming={false}
        title="Recent Deposits"
        className="flex-grow lg:hidden"
      />
    </div>
  );
};

export default Deposit;


================================================
File: src/app/components/DepositFAQ.tsx
================================================
import React from "react";

const FAQItem: React.FC<{ question: string; answer: string }> = ({
  question,
  answer,
}) => {
  return (
    <div className="mb-4">
      <h3 className="flex justify-between items-center font-bold">
        {question}
      </h3>
      <p className="text-gray-400 mt-2">{answer}</p>
    </div>
  );
};

const DepositFAQ: React.FC = () => {
  const faqs = [
    {
      question: "When can I withdraw my deposit?",
      answer:
        "You can initiate a redemption from Nervos DAO at any time. However, redemptions will only settle when reaching checkpoints. Checkpoints happen every 180-epoch cycle (roughly 30 days) after depositing, so we recommend redeeming near the end of cycles for maximum profit. Once the settlement period ends, you can withdraw your CKB at any time, and you'll receive your initial deposit and all earned compensation.",
    },
    {
      question: "How are compensation calculated for my deposit?",
      answer:
        "Compensation is calculated based on the amount deposited and the duration of the deposit. The longer you keep your CKB in the Nervos DAO, the more compensation you'll earn.",
    },
    {
      question: "What are the benefits of depositing CKB into the Nervos DAO?",
      answer:
        "Depositing CKB into the Nervos DAO allows you to earn compensation and participate in the network's governance. It also helps to secure the network and maintain the value of CKB.",
    },
  ];

  return (
    <div className="bg-gray-800 rounded-lg p-6 flex-1 self-start">
      <h2 className="text-2xl mb-4">FAQ</h2>
      {faqs.map((faq, index) => (
        <FAQItem key={index} question={faq.question} answer={faq.answer} />
      ))}
    </div>
  );
};

export default DepositFAQ;


================================================
File: src/app/components/DepositForm.tsx
================================================
import React, { useEffect, useState  } from "react";
import { ccc } from "@ckb-ccc/connector-react";
import { useNotification } from "@/context/NotificationProvider";
import { TailSpin } from "react-loader-spinner";

const DepositForm: React.FC = () => {
  const [amount, setAmount] = useState<string>("");
  const [transactionFee, setTransactionFee] = useState<string>("-");
  const [balance, setBalance] = useState<string>("-");
  const [transTbc, setTransTbc] = useState<boolean>(false);
  const [depositPending, setDepositPending] = useState<boolean>(false);
  const signer = ccc.useSigner();
  const { showNotification, removeNotification } = useNotification();

  useEffect(() => {
    if (!signer) return;

    (async () => {
      try {
        const { script: lock } = await signer.getRecommendedAddressObj();
        const tx = ccc.Transaction.from({
          outputs: [
            {
              capacity: ccc.fixedPointFrom(amount),
              lock,
              type: await ccc.Script.fromKnownScript(
                signer.client,
                ccc.KnownScript.NervosDao,
                "0x"
              ),
            },
          ],
          outputsData: ["00".repeat(8)],
        });
        await tx.addCellDepsOfKnownScripts(
          signer.client,
          ccc.KnownScript.NervosDao
        );

        await tx.completeInputsByCapacity(signer);
        await tx.completeFeeBy(signer, 1000);
        setTransactionFee(
          ccc.fixedPointToString(
            (await tx.getInputsCapacity(signer.client)) -
            tx.getOutputsCapacity()
          )
        );
      } catch (error) {
        setTransactionFee("-");
      }
    })();
  }, [signer, amount]);

  const handleDeposit = async () => {
    if (!signer) {

      return;
    }

    const { script: lock } = await signer.getRecommendedAddressObj();
    const tx = ccc.Transaction.from({
      outputs: [
        {
          lock,
          type: await ccc.Script.fromKnownScript(
            signer.client,
            ccc.KnownScript.NervosDao,
            "0x"
          ),
        },
      ],
      outputsData: ["00".repeat(8)],
    });
    await tx.addCellDepsOfKnownScripts(
      signer.client,
      ccc.KnownScript.NervosDao
    );
    if (tx.outputs[0].capacity > ccc.fixedPointFrom(amount)) {
      showNotification(
        "error",
        "Minimal deposit amount is",
        ccc.fixedPointToString(tx.outputs[0].capacity)
      );
      return;
    }
    tx.outputs[0].capacity = ccc.fixedPointFrom(amount);
    await tx.completeInputsByCapacity(signer);
    await tx.completeFeeBy(signer, 1000);
    setTransTbc(true)
    try {
      const txHash = await signer.sendTransaction(tx);
      const progressId = await showNotification("progress", `Pending Transaction!`);
      setDepositPending(true)
      await signer.client.waitTransaction(txHash)
      setTransTbc(false)
      removeNotification(progressId + '')
      setDepositPending(false)
      showNotification("success", ` Committed`);
      // showNotification("success", `Deposit Success: ${txHash}`);
    } catch (error) {
      setTransTbc(false)
    } finally {
      setTransTbc(false)
    }
  };

  useEffect(() => {
    (async () => {
      if (!signer) return;
      const balance = await signer.getBalance();
      setBalance(ccc.fixedPointToString(balance));
    })();
  }, [signer]);

  const handleMax = async () => {
    if (!signer) return;
    const { script: lock } = await signer.getRecommendedAddressObj();
    const tx = ccc.Transaction.from({
      outputs: [
        {
          lock,
          type: await ccc.Script.fromKnownScript(
            signer.client,
            ccc.KnownScript.NervosDao,
            "0x"
          ),
        },
      ],
      outputsData: ["00".repeat(8)],
    });
    await tx.addCellDepsOfKnownScripts(
      signer.client,
      ccc.KnownScript.NervosDao
    );
    await tx.completeInputsAll(signer);
    await tx.completeFeeChangeToOutput(signer, 0, 1000);
    const amount = ccc.fixedPointToString(tx.outputs[0].capacity);
    setAmount(amount);
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6">

      <h2 className="text-2xl font-play font-bold mb-4">
        Deposit to Nervos DAO
      </h2>
      <p className="text-gray-400 mb-2">Available CKB</p>
      <p className="text-3xl font-bold font-play mb-4">{balance} CKB</p>

      <div className='relative flex items-center mb-4'>
        <input className="w-full text-left border border-[#777] bg-gray-700 rounded text-lg p-3 pr-16"
          type="text"
          onChange={(e) => setAmount(e.target.value)}
          value={amount}
          placeholder="Enter amount" />

        <span className="absolute right-0 p-3 flex items-center text-teal-500 cursor-pointer" onClick={handleMax}>
          MAX
        </span>

      </div>
      <p className="text-gray-400 text-sm mb-4 border-b pb-2 border-white/20">
        Max balance minus estimated transaction fee needed
      </p>

      <div className="flex justify-between">
        <span>Transaction Fee</span>
        <span>{transactionFee} CKB</span>
      </div>

      <button
        onClick={handleDeposit}
        className="mt-4 w-full font-bold bg-btn-gradient text-gray-800 text-body-2 py-3 rounded-lg hover:bg-btn-gradient-hover transition duration-200 disabled:opacity-50 disabled:hover:bg-btn-gradient"
        disabled={(() => {
          // try {
          //   ccc.numFrom(amount);
          // } catch (error) {
          //   return true;
          // }
          return amount === "" || !!transTbc;
        })()}
      >
        {transTbc ? <>
          <TailSpin
            height="20"
            width="20"
            color="#333333"
            ariaLabel="tail-spin-loading"
            radius="1"
            wrapperStyle={{ 'display': 'inline-block', 'marginRight': '10px' }}
            wrapperClass="inline-block"
          /> {depositPending?'pending':'To be confirmed'}
        </> : 'Deposit'}
      </button>

    </div>
  );
};

export default DepositForm;


================================================
File: src/app/components/Ickb.tsx
================================================
'use client'
import React, { useEffect, useState } from "react";
import IckbForm from "./IckbForm";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { Tooltip } from "react-tooltip";
import { setupWalletConfig, WalletConfig } from "@/cores/config";
import { ccc } from "@ckb-ccc/connector-react";
import { MutatingDots } from "react-loader-spinner";

const Ickb: React.FC = () => {
  const [walletConfig, setWalletConfig] = useState<WalletConfig>();
  const queryClient = new QueryClient()
  const signer = ccc.useSigner()
  useEffect(() => {
    if (!signer || !queryClient) return;
    (async () => {
      const walletConfig = await setupWalletConfig(signer, queryClient)
      setWalletConfig(walletConfig)
    })();
  }, [signer,queryClient]);
  return (
    <QueryClientProvider client={queryClient}>

      <div className="flex flex-col flex-grow lg:flex-row lg:items-stretch gap-6">

        {walletConfig ? <IckbForm walletConfig={walletConfig} /> : <div className="h-full w-full flex  items-center justify-center">
          <MutatingDots
            visible={true}
            height="120"
            color="rgba(71,255,246,1)"
            secondaryColor="rgba(71,255,246,0.8)"

            width="120"
            ariaLabel="fidget-spinner-loading"
            wrapperStyle={{}}
            wrapperClass="fidget-spinner-wrapper"
          />
        </div>
        }

      </div>
      <Tooltip id="my-tooltip" />
      <Tooltip id="order-tooltip"
        events={['click']}
        place={"bottom"}
        style={{
          color: "#fff",
          borderRadius: '8px',
          borderWidth: '1px',
          borderColor: '#FFFFFF33',
          pointerEvents: 'inherit',
          boxShadow: ' 0px 4px 6px -2px #88888814,0px 10px 15px -3px #8888881F',
        }} />
      

    </QueryClientProvider>
  )
}

export default Ickb;


================================================
File: src/app/components/IckbActiveOrders.tsx
================================================
import { WalletConfig } from "@/cores/config";
import React, { useEffect, useState } from "react";
import { IckbOrderItem } from "./IckbOrderItem";
import { IckbDateType } from "@/cores/utils";
import { IckbRecepitsItems } from "./IckbRecepitsItems";
import { ccc } from "@ckb-ccc/connector-react";
import { useNotification } from "@/context/NotificationProvider";
import { TailSpin } from "react-loader-spinner";
import ReactDOMServer from "react-dom/server";
import { Info } from "lucide-react";
import IckbOrderInfo from "./IckbOrderInfo";
import { IckbModal } from "./IckbModal";

const IckbActiveOrders: React.FC<{ walletConfig: WalletConfig, ickbData: IckbDateType, onUpdate: VoidFunction }> = ({ walletConfig, ickbData, onUpdate }) => {
    const signerCcc = ccc.useSigner();

    const [meltTBC, setMeltTBC] = useState<boolean>(false);
    const [canMelt, setCanMelt] = useState<boolean>(false);
    const { showNotification, removeNotification } = useNotification();
    const [infoOpen, setInfoOpen] = useState(false);

    const handleMelt = async () => {
        const txMelt = ickbData?.txBuilder("melt", BigInt(0));
        if (!txMelt || !signerCcc) {
            return
        }
        let progressId, txHash;
        setMeltTBC(true)
        try {
            const cccTx = ccc.Transaction.fromLumosSkeleton(txMelt.tx);
            txHash = await signerCcc.sendTransaction(cccTx);
            progressId = await showNotification("progress", `Melt in progress, wait for 60s`);

            await signerCcc.client.waitTransaction(txHash, 0, 60000)
            removeNotification(progressId + '')

            onUpdate()
            // setMeltTBC(false)
            showNotification("success", `Melt Success: ${txHash}`);
        } catch (error) {
            showNotification("error", `${error}`);
            setMeltTBC(false)

        } finally {
            removeNotification(progressId + '')
            setMeltTBC(false)

        }
    }

    useEffect(() => {
        if (!ickbData) return;
        let canMelt = false
        if (ickbData.myOrders.length > 0) {
            ickbData.myOrders.map(item => {
                if (item.info.absTotal === item.info.absProgress) {
                    canMelt = true;
                } else {
                    canMelt = false
                }
            })
        }
        setCanMelt(canMelt)

    }, [ickbData, meltTBC]);
    return (
        <>
            <div className="bg-gray-900 rounded-lg p-4 flex flex-col mb-4 flex-grow">
                <h3 className="text-xl font-play font-bold mb-4 flex items-center justify-between pr-4">
                    <span>Active Orders  
                    <a
                        className="hidden sm:inline-block "
                        data-tooltip-id="order-tooltip"
                        data-tooltip-html={ReactDOMServer.renderToStaticMarkup(IckbOrderInfo())}
                    >
                        <Info className="w-5 h-5 cursor-pointer ml-1 inline-block" />
                    </a>
                    <a
                        className="inline-block sm:hidden "
                        onClick={()=>{setInfoOpen(true)}}
                    >
                        <Info className="w-5 h-5 cursor-pointer ml-1 inline-block" />
                    </a>
                    </span>
                    {canMelt &&
                        <button
                            className="font-bold ml-2 bg-melt-gradient text-gray-800 text-body-2 w-[123px] h-[36px] rounded-lg hover:bg-melt-gradient-hover transition duration-200  disabled:melt-disabled-gradient disabled:hover:bg-btn-gradient hidden sm:block "

                            onClick={() => handleMelt()}
                            disabled={meltTBC}
                        >
                            {meltTBC && <TailSpin
                                height="12"
                                width="12"
                                color="#333333"
                                ariaLabel="tail-spin-loading"
                                radius="1"
                                wrapperStyle={{ 'display': 'inline-block', 'marginRight': '10px' }}
                                wrapperClass="inline-block"
                            />}
                            Extract
                        </button>}
                </h3>
                <div className="pb-2  grid lg:grid-cols-2 gap-2">
                    {(ickbData && ickbData.myOrders.length) ?
                        <>
                            {ickbData.myOrders.map((item, index) => {
                                const multiplier = item.info.isCkb2Udt ? item.info.ckbToUdt.ckbMultiplier : item.info.udtToCkb.udtMultiplier;
                                return (
                                    <IckbOrderItem
                                        walletConfig={walletConfig}
                                        key={index}
                                        item={
                                            {
                                                total: item.info.absTotal / multiplier,
                                                progress: item.info.absProgress / multiplier,
                                                blockNumber: item.master.blockNumber,
                                                isCkb2Udt: item.info.isCkb2Udt,
                                            }
                                        }
                                    />

                                )
                            })}  
                        </> : 'no active orders'
                    }
               
                </div>
                {(ickbData && ickbData.myReceipts.length) ?
                    <div className="border-t border-white/20 py-2">
                        {ickbData.myReceipts.map((item, index) => {
                            return (
                                <IckbRecepitsItems
                                    walletConfig={walletConfig}
                                    key={index}
                                    item={
                                        {
                                            ickbAmount: item.ickbAmount,
                                            ckbAmount: item.ckbAmount,
                                            blockNumber: item.receiptCell.blockNumber
                                        }
                                    }
                                />
                            )
                        })}
                    </div>
                    : <></>}
                    {canMelt &&

                        <button
                            className="font-bold sm:ml-2 bg-melt-gradient text-gray-800 text-body-2 w-full h-[44px] rounded-lg hover:bg-melt-gradient-hover transition duration-200 disabled:melt-disabled-gradient disabled:hover:bg-btn-gradient block sm:hidden "
                            onClick={() => handleMelt()}
                            disabled={meltTBC}
                        >
                            {meltTBC && <TailSpin
                                height="12"
                                width="12"
                                color="#333333"
                                ariaLabel="tail-spin-loading"
                                radius="1"
                                wrapperStyle={{ 'display': 'inline-block', 'marginRight': '10px' }}
                                wrapperClass="inline-block"
                            />}
                            Melt all
                        </button>}
            </div>
            {infoOpen&& <IckbModal isOpen={infoOpen} onClose={()=>setInfoOpen(false)} infos={IckbOrderInfo()} />}
             

        </>
    )
}
export default IckbActiveOrders;


================================================
File: src/app/components/IckbDeposit.tsx
================================================
import React, { useEffect, useState } from "react";
import { ccc } from "@ckb-ccc/connector-react";
import { useNotification } from "@/context/NotificationProvider";
import { ckb2Ickb } from "@ickb/v1-core";
import { Info, TriangleAlert } from "lucide-react";
import { toText } from "@/utils/stringUtils";
import { IckbDateType } from "@/cores/utils";
import { CKB } from "@ickb/lumos-utils";
import { TailSpin } from "react-loader-spinner";


const IckbSwap: React.FC<{ ickbData: IckbDateType, onUpdate: VoidFunction }> = ({ ickbData, onUpdate }) => {
    const [amount, setAmount] = useState<string>("");
    const [debouncedAmount, setDebouncedAmount] = useState<string>("");
    const [pendingBalance, setPendingBalance] = useState<string>("0");
    const [transTBC, setTransTBC] = useState<boolean>(false);
    const txInfo = (ickbData && debouncedAmount.length > 0) ? ickbData?.txBuilder("ckb2ickb", ccc.fixedPointFrom(debouncedAmount)) : null;
    const signerCcc = ccc.useSigner();
    const { showNotification, removeNotification } = useNotification();
    const [balance, setBalance] = useState<bigint>(BigInt(0));
    const [balanceShow, setBalanceShow] = useState<string>("");
    const [depositPending, setDepositPending] = useState<boolean>(false);

    async function handleSwap() {
        if (!txInfo || !signerCcc) {
            return
        }
        if (txInfo.error) {
            showNotification("error", txInfo.error);
            return
        }
        let progressId, txHash;
        setTransTBC(true)
        try {
            const cccTx = ccc.Transaction.fromLumosSkeleton(txInfo.tx);
            txHash = await signerCcc.sendTransaction(cccTx);
            progressId = await showNotification("progress", `Deposit in progress, wait for 90s`);
            setDepositPending(true)
            await signerCcc.client.waitTransaction(txHash, 0, 90000);
            onUpdate()
            showNotification("success", `Deposit Success: ${txHash}`);
        } catch (error) {
            showNotification("error", `${error}`);

        } finally {
            setTransTBC(false)
            setDepositPending(false)
            removeNotification(progressId + '')
            setAmount("")
        }
    }

    function approxConversion(
        amount: bigint,
    ) {
        if (!ickbData?.tipHeader) {
            return
        }
        const [convertedAmount] = [ckb2Ickb(amount, ickbData?.tipHeader, false)]
        return `${toText((convertedAmount === BigInt(100000000)) ? BigInt(0) : convertedAmount)}`;
    }

    const handleMax = () => {
        if (!balance) return;
        const maxBalance = balance + (ickbData ? ickbData.ckbPendingBalance : BigInt(0));
        setAmount(Number(maxBalance/CKB)*0.998+'');
    };
    const handleAmountChange = (e: { target: { value: React.SetStateAction<string>; }; }) => {
        if (Number(e.target.value)  >= (Number(balanceShow))) {
            setAmount(Number(balanceShow)*0.998+'')
            return
        }
        //超出1千万的输入会引起内核VM卡死,暂时限定最大值为10000000
        if (Number(e.target.value)  >= 100000000) {
            setAmount('100000000')
            return
        }
        setAmount(e.target.value)

    }
    useEffect(() => {
        const handler = setTimeout(() => {
            setDebouncedAmount(amount);
        }, 200); // 500ms 的延迟

        return () => clearTimeout(handler);
    }, [amount]);
  
    useEffect(() => {
        if (!ickbData) return;
        ickbData.ckbPendingBalance > 0 ? setPendingBalance(toText(BigInt(ickbData.ckbPendingBalance))) : setPendingBalance('0');
        if(!ccc)return;

        // setPendingBalance(toText(BigInt(pending)) || '-');
        (async () => {
            if (!signerCcc) return;
            const balanceCCC = await signerCcc.getBalance();
            setBalance(balanceCCC);
            setBalanceShow(ccc.fixedPointToString(balanceCCC));
        })();
    }, [ickbData, signerCcc]);

    return (
        <>
            <div className="flex flex-col sm:flex-row font-play mb-4 mt-8 text-left">
                <div className="block sm:basis-1/2">
                    <p className="text-gray-400 mb-2 flex items-center"><span className="w-2 h-2 bg-green-500 mr-2"></span>CKB Available </p>
                    {/* <p className="text-2xl font-bold font-play mb-4">{(ickbData && ickbData.ckbAvailable !== BigInt(6)*CKB*CKB) ? toText(ickbData?.ckbAvailable) : "-"} <span className="text-base font-normal">CKB</span></p> */}
                    <p className="text-2xl font-bold font-play mb-4">{balance ? balanceShow : '-'} <span className="text-base font-normal">CKB</span></p>

                </div>
                <div className="block sm:basis-1/2">
                    <p className="text-gray-400 mb-2 flex items-center">
                        <span className={"w-2 h-2 bg-yellow-500 mr-2"}></span>
                        Pending <Info size={16} className="ml-1 inline-block" data-tooltip-id="my-tooltip" data-tooltip-html="Pending CKB becomes available once<br /> the Nervos DAO maturity period ends or the active order is melted." />
                    </p>
                    <p className="text-2xl font-bold font-play mb-4 flex  items-center">
                        <span>
                            {pendingBalance} <span className="text-base font-normal">CKB</span>
                        </span>
                       
                    </p>
                </div>
            </div>
            {/* <div className='relative mb-4  bg-gray-700 p-4 rounded'>
                <label className="flex px-2 items-center"><img src="/svg/icon-ckb.svg" alt="CKB" className="mr-2" /> CKB</label>
                <input className="w-full text-left no-arrows border-none hover:border-none  focus:border-none bg-gray-700  text-lg p-3 mt-1 pr-16"
                    type="number"
                    value={amount}
                    onChange={handleAmountChange}
                    placeholder="0" />
                <span className="absolute right-4 bottom-2 p-3 flex items-center text-teal-500 cursor-pointer" onClick={handleMax}>
                    MAX <Info size={16} className="inline-block ml-2" data-tooltip-id="my-tooltip" data-tooltip-html="<div>CKB Balance minus 1000 CKB </div>" />
                </span>
            </div> */}
            <div className='relative mb-4 flex'>
                <input className="w-full text-left rounded border no-arrows  border-[#777] bg-gray-700  hover:border-cyan-500 focus:border-cyan-500  text-lg p-3 mt-1 pr-16 pl-14"
                    type="number"
                    value={amount}
                    onChange={handleAmountChange}
                    placeholder="0"
                    max={Number(balance/CKB)} />
                <img src="/svg/icon-ckb.svg" className="absolute left-4 top-[18px]" alt="CKB" />
                <span className="absolute right-4 top-[7px] p-3 flex items-center text-teal-500 cursor-pointer" onClick={handleMax}>
                    MAX
                </span>
            </div>
            <p className="text-center text-large font-bold text-center text-cyan-500 mb-4 pb-2 ">
                1 CKB ≈ {ickbData?.tipHeader && approxConversion(CKB)} iCKB
            </p>
            <div className="flex justify-between my-3 text-base">
                <span>Receive </span>
                {/* 扣除0.1% 交易bot fee */}
                <span>{amount ? <>≈{approxConversion(BigInt(Math.trunc(parseFloat(amount) * Number(CKB)/*99900000*/)))} iCKB</> : '0 iCKB'}</span>
            </div>
            {txInfo && Number(amount) > 0 &&
                <div className="rounded border-1 border-yellow-500 p-4 bg-yellow-500/[.12]  my-3">
                    <h3 className="text-lg flex items-center">
                        <TriangleAlert size={24} className="block mr-1" />
                        <span className="block">NOTE</span>
                    </h3>
                    <p className="mt-2 text-sm">
                        {txInfo.info
                            .concat(txInfo.error !== "" ? [txInfo.error, ""] : [""])
                            .join(". ")}
                    </p></div>
            }


            <button
                onClick={handleSwap}
                className="mt-4 w-full font-bold bg-btn-gradient text-gray-800 text-body-2 py-3 rounded-lg hover:bg-btn-gradient-hover transition duration-200 disabled:opacity-50 disabled:hover:bg-btn-gradient"
                disabled={(() => {
                    // try {
                    //   ccc.numFrom(amount);
                    // } catch (error) {
                    //   return true;
                    // }
                    return amount === ""|| amount === "0" || !!transTBC;
                  })()}
                
            >
               
                {transTBC ? (<>
                    <TailSpin
                        height="20"
                        width="20"
                        color="#333333"
                        ariaLabel="tail-spin-loading"
                        radius="1"
                        wrapperStyle={{ 'display': 'inline-block', 'marginRight': '10px' }}
                        wrapperClass="inline-block"
                    /> {depositPending ? 'pending' : 'To be confirmed'}
                </>) :

                    <>{debouncedAmount ? 'Swap' : 'Enter an amount'}
                    </>}
            </button>

        </>
    );
};

export default IckbSwap;



================================================
File: src/app/components/IckbForm.tsx
================================================
import React, { useState } from "react";
import IckbDeposit from "./IckbDeposit";
import { type WalletConfig } from "@/cores/config";
import IckbWithDraw from "./IckbWithdraw";
import IckbStatus from "./IckbStatus";
import { useQuery } from "@tanstack/react-query";
import { l1StateOptions } from "@/cores/queries";
import { IckbMaturityItems } from "./IckbMaturityItems";
import IckbActiveOrders from "./IckbActiveOrders";
import IckbHistoryOrders from "./IckbHistoryOrders";

const IckbForm: React.FC<{ walletConfig: WalletConfig }> = ({ walletConfig }) => {
    const [status, setStatus] = useState<string>("deposit");
    const { data: ickbData, refetch } = useQuery(
        l1StateOptions(!walletConfig.chain),

    );

    const handleChildEvent = () => {
        refetch()
    }
    return (
        <>
            {ickbData && <>
                <div className="space-y-6 flex flex-col flex-1">
                    <div className="bg-gray-900 rounded-lg p-6">
                        <div className="flex flex-row font-play mb-4 mt-4 border border-[#777] rounded-lg text-center">
                            <div className={`basis-1/2 py-4 rounded-l-lg cursor-pointer  ${status === 'deposit' && 'bg-cyan-500 text-gray-800 font-bold'}`} onClick={() => setStatus('deposit')}>Deposit</div>
                            <div className={`basis-1/2 py-4 rounded-r-lg cursor-pointer  ${status === 'withdraw' && 'bg-cyan-500 text-gray-800 font-bold'}`} onClick={() => setStatus('withdraw')}>Withdraw</div>
                        </div>
                        <div className={status === 'deposit' ? 'block' : 'hidden'}><IckbDeposit ickbData={ickbData} onUpdate={handleChildEvent} /></div>
                        <div className={status !== 'deposit' ? 'block' : 'hidden'}><IckbWithDraw ickbData={ickbData} onUpdate={handleChildEvent} /></div>

                    </div>
                    {(ickbData && ickbData.myMaturity.length) ?
                        <div className="bg-gray-900 rounded-lg p-6 flex flex-col  mt-6">
                            <h3 className="text-xl font-play font-bold mb-4">Pending Nervos DAO Withdraw</h3>
                            <div>
                                {ickbData.myMaturity.map((item, index) => {
                                    return (
                                        <IckbMaturityItems
                                            walletConfig={walletConfig}
                                            key={index}
                                            item={
                                                item
                                            }
                                        />
                                    )
                                })}
                            </div>
                        </div>
                        : <></>}
                </div>
                <div className="flex-1 flex-row">
                    <IckbActiveOrders  ickbData={ickbData} walletConfig={walletConfig} onUpdate={handleChildEvent} />
                    <IckbStatus ickbData={ickbData} />
                    {walletConfig && <IckbHistoryOrders  walletConfig={walletConfig}  />}
                </div>
            </>
            }
        </>
    );
};

export default IckbForm;


================================================
File: src/app/components/IckbHistoryOrderItems.tsx
================================================
import React from "react";
import { icons } from "lucide-react";
import { RecentOrder } from "@/cores/utils";
import { ccc } from "@ckb-ccc/connector-react";

interface IckbRecepitsItemProps {
    item: RecentOrder
}

export function IckbHistoryOrderItems({
    item
}: IckbRecepitsItemProps) {


    const iconColor = {
        order_withdraw: "bg-green-600",
        dao_deposit: "bg-cyan-600",
        dao_withdraw: "bg-green-600",
        order_deposit: "bg-cyan-600",

    }[item.operation];
    const actionText = {
        order_deposit: "Swap CKB to iCKB",
        order_withdraw: "Withdraw CKB from iCKB",
        dao_deposit: "Nervos DAO Deposit",
        dao_withdraw: "Nervos DAO Withdraw",
    }[item.operation];
    const Icon = {
        order_deposit: icons["ArrowUp"],
        order_withdraw: icons["Download"],
        dao_deposit: icons["ArrowUp"],
        dao_withdraw: icons["Download"],
    }[item.operation];

    return (
        <div className="flex items-center justify-between py-2 ">
            <div className="flex items-center">
                <div className={`${iconColor}  rounded-full p-2 mr-3`}>
                    <Icon className="w-4 h-4" />
                </div>
                <div>
                    <p className="text-white font-work-sans text-body-2 flex items-center"> {actionText}

                    </p>
                    <p className="text-gray-400 font-work-sans text-sm">{new Date(Number(item.timestamp)).toLocaleString()}</p>
                </div>
            </div>
            <div className="text-white font-work-sans text-body-2 flex items-center" >
                <div className="mr-4">
                    <p className="text-base font-bold font-play ">
                        
                        {Number(ccc.fixedPointToString(item.amount)).toFixed(2)} {item.unit}
                        {/* {parseFloat((Number(item.amount / CKB)).toString()).toFixed(2)} {item.unit} */}
                    </p>
                </div>


            </div>
        </div>
    );
}


================================================
File: src/app/components/IckbHistoryOrders.tsx
================================================
import { WalletConfig } from "@/cores/config";
import React, { useEffect } from "react";
import {  RecentOrder } from "@/cores/utils";
import { ccc } from "@ckb-ccc/connector-react";
import { getRecentIckbOrders } from "@/cores/queries";
import { IckbHistoryOrderItems } from "./IckbHistoryOrderItems";


const IckbHistoryOrders: React.FC<{ walletConfig: WalletConfig}> = ({ walletConfig}) => {
    const signerCcc = ccc.useSigner();
    const [limit, setLimit] = React.useState(5);
    const [txs, setTxs] = React.useState<RecentOrder[]>([]);
    const [txGenerator, setTxGenerator] = React.useState<
        AsyncGenerator | undefined
    >(undefined);


   
    useEffect(() => {
        if (!signerCcc||!walletConfig) { return }
        const { config } = walletConfig;

        setTxs([]);
        setLimit(5);
        setTxGenerator(getRecentIckbOrders(signerCcc, config));

        const refresh = async () => {
            setTxs((txs) => {
                if (txs.length === 0) {
                    return txs;
                }

                (async () => {
                    for await (const data of getRecentIckbOrders(signerCcc, config)) {
                        if (!data) { return }
                        console.log(data)
                        if (txs.find((t) => t.timestamp === data?.timestamp)) {
                            break;
                        }

                        setTxs((txs) => {
                            if (txs.find((t) => t.timestamp === data?.timestamp)) {
                                return txs;
                            }
                            return [data, ...txs];
                        });
                    }
                })();

                return txs;
            });
        };
        refresh()
        const interval = setInterval(refresh, 15000);
        return () => clearInterval(interval);


    }, [signerCcc]);
    useEffect(() => {
        if (!txGenerator || !signerCcc || txs.length >= limit) {
            return;
        }

        (async () => {
            const { value, done } = await txGenerator.next();
            if (done) {
                setTxGenerator(undefined);
                return;
            }
            if (!value) {
                return;
            }
            //@ts-expect-error 暂时屏蔽
            setTxs((txs) => [...txs, value]);
        })();
    }, [txGenerator, limit, txs, signerCcc]);
    
    return (
        <>
           
            <div className="bg-gray-900 rounded-lg p-4 flex flex-col flex-grow mt-6 text-left">
                <h3 className="text-xl font-play font-bold mb-4">Recent Orders</h3>
                {txs && txs.length > 0 ? <>
                    {txs.map((item, index) => {
                        return (
                            <IckbHistoryOrderItems
                                key={index}
                                item={item}

                            />
                        )
                    })}
                    {txGenerator ? (
                        <button
                            className="text-cyan-400 mt-4 hover:underline"
                            onClick={() => setLimit(limit + 5)}
                        >
                            View all history
                        </button>
                    ) : undefined}</>
                    : <div className={`flex flex-grow items-center justify-center bg-gray-800 rounded-lg p-4`}>
                        <p className="text-gray-400">No recent transactions</p>
                    </div>}
            </div>

        </>
    )
}
export default IckbHistoryOrders;


================================================
File: src/app/components/IckbInfo.tsx
================================================
'use client'
import { ExternalLink } from "lucide-react";
import React from "react";

import styled from 'styled-components';
const Info = styled.div`
    width:560px;
    padding:0 16px
    h4{
        font-size:18px;
        font-weight:700;
        color:#fff;
        margin:10px 0;
        line-height:22px;
    }
    p{
        font-weight:400;
        line-height:20px;
        font-size:14px;
        color:#FFFFFFCC;
        margin:10px auto;
    }
    ul{
        list-style:disc;
        background:#FFFFFF0D;
        padding:4px 8px 4px 24px;
        border-radius:4px;
        line-height:20px;
        font-size:14px
    }
    li{
        padding:5px 0
    }
    li::marker {
        color:  #00FAED;
    }
    strong{
        color:  #00FAED;
    }
    a{
        display:flex;
        color:  #00FAED;
        padding:10px 0;
        margin-top:10px;
        font-size:16px;
        align-items:center
    }
    svg{
        margin-left:8px
    }
    @media (max-width: 640px) {
        width:100%;
        padding:0
    }
`;

export function IckbInfo() {

    return (


        <Info >
            <h4>What is iCKB?</h4>
            <p  >iCKB is a liquid representation of your deposits in the iCKB protocol. When you deposit through the iCKB protocol, it mints iCKB tokens to represent your deposits, which are pooled and managed by the protocol.</p>
            <ul>
                <li><strong>Faster Withdrawals: </strong>Access funds quickly by withdrawing from deposits closest to maturity, bypassing the ~30-day NervosDAO cycle.</li>
                <li><strong>Greater Liquidity: </strong>Use or trade iCKB tokens anytime, unlike traditional locked NervosDAO deposits.</li>
            </ul>
            <a href="https://ickb.org/" target="_blank">Learn more <ExternalLink size={16} /></a>
            
        </Info>


    )
}

export default IckbInfo;


================================================
File: src/app/components/IckbMaturityItems.tsx
================================================
import React, { useEffect, useState } from "react";
import { Download, Info } from "lucide-react";
import { HexNumber } from "@ckb-lumos/base";
import { getHeadersByNumber } from "@/cores/queries";
import { CKB, I8Cell } from "@ickb/lumos-utils";
import { WalletConfig } from "@/cores/config";
type MyMaturity = {
    daoCell: I8Cell;
    ckbAmount: bigint;
    waitTime: string;
}
interface IckbRecepitsItemProps {
    walletConfig: WalletConfig,

    item: MyMaturity
}
export function IckbMaturityItems({
    item, walletConfig
}: IckbRecepitsItemProps) {
    const [orderDate, setOrderDate] = useState<string>('')
    useEffect(() => {
        if(!item||!walletConfig){ return }
        const refresh = async () => {
            const hexArray: Set<HexNumber> = new Set();

            if (item.daoCell.blockNumber) {
                hexArray.add(item.daoCell.blockNumber)
                const header = await getHeadersByNumber(hexArray, walletConfig)
                const timer = header.get(item.daoCell.blockNumber)?.timestamp;
                timer && setOrderDate(new Date(parseInt(timer, 16)).toLocaleString())
            }
        };
        refresh();
    }, []);
    return (
        <div className="flex items-center justify-between py-2 ">
            <div className="flex items-center">
                <div className={"bg-green-600 rounded-full p-2 mr-3"}>
                    <Download className="w-4 h-4" />

                </div>
                <div>
                    <p className="text-white font-work-sans text-body-2 flex items-center"> Withdraw from Nervos DAO
                        <a data-tooltip-id="my-tooltip" data-tooltip-content="Order more than 100,000 iCKB will directly withdraw from Nervos DAO">
                            <Info className="w-4 h-4 cursor-pointer ml-2" />
                        </a>
                    </p>
                    <p className="text-gray-400 font-work-sans text-sm">{orderDate}</p>
                </div>
            </div>
            <div className="text-white font-work-sans text-body-2 flex items-center" >
                <div className="mr-4">
                    <p className="text-base font-bold font-play ">
                        {parseFloat((Number(item.ckbAmount / CKB)).toString()).toFixed(2)} CKB
                    </p>
                    <p>
                        {item.waitTime === 'matured' ? `(${item.waitTime})` : '< ' + item.waitTime}
                    </p>
                </div>


            </div>
        </div>
    );
}


================================================
File: src/app/components/IckbModal.tsx
================================================

interface IckbModalProps {
    isOpen: boolean;
    onClose: () => void;
    infos: React.JSX.Element
}
export function IckbModal({
    onClose,
    infos
}: IckbModalProps) {
    const handleClose = (e: React.MouseEvent) => {
        e.stopPropagation();
        onClose();
    };
    return (
        <div
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
            onClick={handleClose}
        >
            <div
                className="bg-gray-800 rounded-lg p-6 w-4/5 max-w-md relative"
                onClick={(e) => e.stopPropagation()}
            >
                <button
                    onClick={handleClose}
                    className="absolute top-4 right-4 bg-gray-950 rounded-full p-2 text-gray-400 hover:text-white"
                >
                    <img src="./svg/close.svg" alt="Close" width={18} height={18} />
                </button>
                {infos}

            </div>
        </div>
    )
}

================================================
File: src/app/components/IckbOrderInfo.tsx
================================================
'use client'
import {  Lightbulb } from "lucide-react";
import React from "react";

import styled from 'styled-components';
const Info = styled.div`
    width:480px;
    padding:0 16px
    h4{
        font-size:18px;
        font-weight:700;
        color:#fff;
        margin:10px 0;
        line-height:22px;
    }
    p{
        font-weight:400;
        line-height:20px;
        font-size:14px;
        color:#FFFFFFCC;
        margin:10px auto;
    }
    ul{
        list-style:disc;
        background:#FFFFFF0D;
        padding:4px 8px 4px 24px;
        border-radius:4px;
        line-height:20px;
        font-size:14px
    }
    li{
        padding:5px 0
    }
    li.first::marker{
        background:#FFCC00!important;

    }
    li.first strong{
        color:#FFCC00!important
    }
    li.second::marker {
        color: #3CFF97;
    }
     li.second strong{
        color: #3CFF97;
    }
    a{
        display:flex;
        color:  #00FAED;
        padding:10px 0;
        margin-top:10px;
        font-size:16px;
        align-items:center
    }
    .tips{
        border:1px solid #3CFF97;
        background: #3CFF971F;
        padding:12px 16px;
        border-radius:8px;
        color:#fff;
        margin:10px 0;
        h5{
            display:flex;
            align-items:center;
            font-size:14px;
            line-height:20px;
            font-weight:700
        }
    }
    @media (max-width: 640px) {
        width:100%;
        padding:0
    }
        
`;

export function IckbInfo() {

    return (


        <Info >
            <h4>What Are Active Orders?</h4>
            <p>Active orders track your deposit and withdrawal transactions. They include:</p>
            <ul>
                <li className="first"><strong>Pending Orders:  </strong>Orders awaiting 3rd-party market maker’s participation.</li>
                <li className="second"><strong>Completed Orders: </strong>Orders ready to melt to update your balance.</li>
            </ul>
            <div className="tips">
                <h5><Lightbulb size={18} /> Tip</h5>
                <p>you don’t manually melt completed orders, they will be automatically melted during your next deposit or withdrawal. Pending orders will also be automatically canceled if not finalized.</p>
            </div>

        </Info>


    )
}

export default IckbInfo;


================================================
File: src/app/components/IckbOrderItem.tsx
================================================
import React, { useEffect, useState } from "react";
import { WalletConfig } from "@/cores/config";
import { HexNumber } from "@ckb-lumos/base";
import { getHeadersByNumber } from "@/cores/queries";
import { ccc } from "@ckb-ccc/connector-react";
interface IckbOrderItemItemProps {
    walletConfig: WalletConfig
    item: {
        total: bigint;
        progress: bigint;
        blockNumber: string | undefined;
        isCkb2Udt: boolean;
    }
}
export function IckbOrderItem({
    walletConfig, item
}: IckbOrderItemItemProps) {
    const [orderDate, setOrderDate] = useState<string>('')
    useEffect(() => {
       
        if(!item||!walletConfig) return 
        const refresh = async () => {
            console.log(walletConfig)
            const hexArray: Set<HexNumber> = new Set();

            if (item.blockNumber) {
                hexArray.add(item.blockNumber)
                console.log(1111,hexArray)
                const header = await getHeadersByNumber(hexArray, walletConfig)
                const timer = header.get(item.blockNumber)?.timestamp;
                timer && setOrderDate(new Date(parseInt(timer, 16)).toLocaleString())
            }
        };
        refresh();
    }, []);

    return (
        <div className="bg-gray-800 rounded-lg p-4 ">
            <div className="flex items-center justify-between">
                <span className="text-white text-body-2">You {item.isCkb2Udt?'Swap':'Withdraw'}</span>
                {item.progress === item.total ?
                    <span className="px-2 py-0.5 rounded text-xs bg-green-500/[.12] rounded text-green-500" >Completed</span>
                    :
                    <span className="px-2 py-0.5 rounded text-xs bg-yellow-500/[.12] rounded text-yellow-500">Pending</span>
                }
            </div>
            <div className="text-2xl font-bold text-white mb-4">
            {Number(ccc.fixedPointToString(item.total)).toFixed(2)} 
                {item.isCkb2Udt ? ' CKB' : ' iCKB'}</div>
            <div className="divide-y divide-white-200">
                <p className="text-white font-work-sans mb-2 flex items-center">
                    {item.isCkb2Udt ? "Swap CKB to iCKB" : "Withdraw CKB from iCKB"}
                </p>
                <p className="text-gray-400 font-work-sans  pt-2 text-sm">{orderDate}</p>
            </div>

        </div>
    );
}


================================================
File: src/app/components/IckbPendingDetail.tsx
================================================
'use client'
import React from "react";

import UseSorter, { SortDirection, ArrowProps, Column, SorterObj } from "@/hooks/UseSorter";
import ClipLoader from "react-spinners/ClipLoader";
import { ChevronDown, ChevronUp } from "lucide-react";
type PendingLisrProps = {
    columns: SorterObj[]
}
const columns: Column[] = [
    {
        name: "Amount",
        key: 'amount'
    },
    {
        name: "Date Requested",
        key: "daterequested"
    },
    {
        name: "Remaining Time",
        key: "remainingtime"
    }
];


const IckbPendingDetail: React.FC<PendingLisrProps> = (props: PendingLisrProps) => {
    const [sortedTable, setSortedTable, dir, setDir, key, setKey] = UseSorter<
        SorterObj
    >(props.columns);
    console.log(setSortedTable)
    const calculateDaysDifference = (timestamp1: number, timestamp2: number) => {

        try {
            const date1 = new Date(timestamp1);
            const date2 = new Date(timestamp2);
            const diffInMilliseconds = Math.abs(date2.getTime() - date1.getTime());
            const diffInHoutrs = Math.floor(diffInMilliseconds / (1000 * 60 * 60));
            return diffInHoutrs;
        } catch (error) {
            return "Error calculating days difference: " + error;
        }
    };
    const handleOnClick = (
        currentHead: Column
    ) => {
        const currentSortDir =
            dir?.valueOf() === SortDirection.Ascending.valueOf()
                ? SortDirection.Descending
                : SortDirection.Ascending;

        if (dir === undefined) {
            setDir(SortDirection.Ascending);
        } else {
            setDir(currentSortDir);
        }
        if (currentHead) {
            setKey(currentHead.key as keyof SorterObj);
        }
    };

    const Arrow = (props: ArrowProps) => {
        if (props.sortDir !== undefined && props.active) {
            return SortDirection.Ascending.valueOf() === props.sortDir.valueOf() ? (
                <div className="flex flex-col">
                    <ChevronUp color="rgba(255,255,255,0.4)" size={12} />
                    <ChevronDown color="rgba(255,255,255,1)" size={12} />
                </div>
            ) : (
                <div className="flex flex-col">
                    <ChevronUp color="rgba(255,255,255,1)" size={12} />
                    <ChevronDown color="rgba(255,255,255,0.4)" size={12} />
                </div>
                // <AArrowUp />
            );
        }
        return (<div className="flex flex-col">
            <ChevronUp color="rgba(255,255,255,0.4)" size={12} />
            <ChevronDown color="rgba(255,255,255,0.4)" size={12} />
        </div>);
    };
    return (
        <table className="w-full mt-4 table-auto">
            <thead className="border border-t-0 border-l-0	border-r-0 border-gray-500">
                <tr>
                    {columns.map((c, index) => {
                        return (
                            <th key={index} className="text-body-2  text-left p-2 cursor-pointer" onClick={() => handleOnClick(c)}>

                                <div className="w-full flex items-center justify-between ">
                                    <span className="text-[rgba(255,255,255,0.7)]">{c.name}</span>
                                    <Arrow sortDir={dir} active={c.key === key} />
                                </div>
                            </th>
                        );
                    })}
                </tr>
            </thead>
            {/* Apply the table body props */}
            <tbody>
                {sortedTable.map((c, index) => {
                    return (
                        <tr key={index}>
                            <td className="text-body-2  text-left p-2 ">{c.amount}</td>
                            <td className="text-body-2  text-left p-2 ">{new Date(c.daterequested).toLocaleDateString()}</td>
                            <td className="text-body-2  text-left p-2 "><ClipLoader className="mr-2" size={16} color="#00FAED" />{calculateDaysDifference(c.daterequested, c.remainingtime)} hours left</td>
                        </tr>
                    );
                })}
            </tbody>
        </table>
    );
};

export default IckbPendingDetail;


================================================
File: src/app/components/IckbRecepitsItems.tsx
================================================
import React, { useEffect, useState } from "react";
import { Download, Info } from "lucide-react";
import { WalletConfig } from "@/cores/config";
import { HexNumber } from "@ckb-lumos/base";
import { getHeadersByNumber } from "@/cores/queries";
import { CKB } from "@ickb/lumos-utils";

interface IckbRecepitsItemProps {
    walletConfig: WalletConfig
    item: {
        ickbAmount: bigint;
        ckbAmount: bigint;
        blockNumber: string | undefined;
    }
}
export function IckbRecepitsItems({
    walletConfig, item
}: IckbRecepitsItemProps) {
    const [orderDate, setOrderDate] = useState<string>('')
    useEffect(() => {
        if(!item||!walletConfig){ return }

        const refresh = async () => {
            const hexArray: Set<HexNumber> = new Set();

            if (item.blockNumber) {
                hexArray.add(item.blockNumber)
                const header = await getHeadersByNumber(hexArray, walletConfig)
                const timer = header.get(item.blockNumber)?.timestamp;
                timer && setOrderDate(new Date(parseInt(timer, 16)).toLocaleString())
            }
        };
        refresh();
    }, []);
    return (
        <div className="flex items-center justify-between py-2 ">
            <div className="flex items-center">
                <div className={"bg-green-600 rounded-full p-2 mr-3"}>
                    <Download className="w-4 h-4" />

                </div>
                <div>
                    <p className="text-white font-work-sans flex items-center"> <span>Deposit into Nervos DAO</span>
                        <a data-tooltip-id="my-tooltip" data-tooltip-content="Order more than 100,000 iCKB will directly deposit into Nervos DAO">
                            <Info className="w-4 h-4 cursor-pointer ml-2" />
                        </a>
                    </p>
                    <p className="text-gray-400 font-work-sans text-sm">{orderDate}</p>
                </div>
            </div>
            <div className="text-white font-work-sans text-body-2 flex items-center" >
                <div className="mr-4">
                    <p className="text-base font-bold font-play ">
                        {parseFloat((Number(item.ckbAmount / CKB)).toString()).toFixed(2)} CKB
                    </p>
                </div>


            </div>
        </div>
    );
}


================================================
File: src/app/components/IckbStatus.tsx
================================================

import { Info } from "lucide-react";
import React, { useEffect, useState } from "react";
// import ReactApexChart from "react-apexcharts";
import { ccc } from "@ckb-ccc/connector-react";
import SkeletonLoader from "./SkeletonLoader";
import { IckbDateType } from "@/cores/utils";


const IckbStatus: React.FC<{ ickbData: IckbDateType }> = ({ ickbData }) => {
  const [apy, setApy] = useState("-");
  const [isLoadingBalance, setIsLoadingBalance] = useState(true);


  const signer = ccc.useSigner();
  useEffect(() => {
    if (!signer) {
      return;
    }
    const refresh = async () => {
      try {
        const tip = await signer.client.getTipHeader();
        // 75600 blocks equals about 7 days
        const past = await signer.client.getHeaderByNumber(
          ccc.numMax(tip.number - ccc.numFrom("75600"), 1)
        );
        if (past) {
          const times =
            (ccc.numFrom(365 * 24 * 60 * 60 * 1000) * ccc.fixedPointFrom(1)) /
            (tip.timestamp - past.timestamp);
          setApy(
            `~${ccc.fixedPointToString(
              ((tip.dao.ar - past.dao.ar) *
                ccc.numFrom(100) *
                ccc.fixedPointFrom(1) *
                times) /
              past.dao.ar /
              ccc.fixedPointFrom(1) /
              ccc.fixedPointFrom(1, 6),
              2
            )}%`
          );
        }
      } catch (error) {
      } finally {
        setIsLoadingBalance(false);
      }
    };

    const interval = setInterval(refresh, 5000);
    refresh();
    return () => clearInterval(interval);
  }, [signer]);
  if (isLoadingBalance) {
    return <SkeletonLoader />;
  }
  return (
    <div className="bg-gray-900 rounded-lg p-6 mb-4 mt-4">
      <h3 className="text-xl font-play font-bold mb-4">Liquidity</h3>
      {/* <ReactApexChart options={ChartData} series={ChartData.series} type="area" height={350} /> */}
      <div className="flex flex-col  sm:flex-row item-center justify-between ">
        <div className="bg-gray-800 relative rounded-lg p-3 pr-5 mb-2 w-full sm:w-[30%]" >
          <div className="flex justify-between items-center font-work-sans text-gray-400">
            <span>Total Liquidity</span>
          </div>
          <div className="flex justify-between items-center mt-1 font-play text-white text-lg font-bold">
            <span>{ickbData ? parseFloat((Number(ickbData.ickbUdtPoolBalance) / 100000000).toString()).toFixed(2) : '-'} iCKB</span>
          </div>
        </div>
        <div className="bg-gray-800 relative rounded-lg p-3 pr-5 mb-2  w-full sm:w-[30%]">
          <div className="flex justify-between items-center font-work-sans text-gray-400">
            <span>Pool Balance <Info size={16} className="inline-block" data-tooltip-id="my-tooltip" data-tooltip-content="iCKB NervDao Balance" /></span>
          </div>
          <div className="flex justify-between items-center mt-1 font-play text-white text-lg font-bold">
            <span>{ickbData ? parseFloat((Number(ickbData.ickbDaoBalance) / 100000000).toString()).toFixed(2) : '-'} CKB</span>
          </div>
        </div>
        <div className="bg-gray-800 relative rounded-lg p-3 pr-5 mb-2 w-full sm:w-[30%]">
          <div className="flex justify-between items-center font-work-sans text-gray-400">
            <span>APY</span>
          </div>
          <div className="flex justify-between items-center mt-1 font-play text-white text-lg font-bold">
            <span>{apy}</span>
          </div>
        </div>
      </div>
    </div>
  );
}

export default IckbStatus;


================================================
File: src/app/components/IckbWithdraw.tsx
================================================
import React, { useEffect, useState } from "react";
import { ccc } from "@ckb-ccc/connector-react";
import { useNotification } from "@/context/NotificationProvider";
import { ickb2Ckb } from "@ickb/v1-core";
import { TriangleAlert } from "lucide-react";
import { toText } from "@/utils/stringUtils";
import { IckbDateType } from "@/cores/utils";
import { CKB } from "@ickb/lumos-utils";
import { TailSpin } from "react-loader-spinner";


const IckbWithdraw: React.FC<{ ickbData: IckbDateType, onUpdate: VoidFunction }> = ({ ickbData, onUpdate }) => {
    const [amount, setAmount] = useState<string>("");
    const [pendingBalance, setPendingBalance] = useState<string>("0");
    const [transTBC, setTransTBC] = useState<boolean>(false);
    const txInfo = (ickbData && amount.length > 0) ? ickbData?.txBuilder("ickb2ckb", ccc.fixedPointFrom(amount)) : null;
    const [withdrawPending, setWithdrawPending] = useState<boolean>(false);
    const signerCcc = ccc.useSigner();
    // const pendingIckbs = ickbData?ickbData.myOrders;
    const { showNotification, removeNotification } = useNotification();

    async function handleWithDraw() {
        if (!txInfo || !signerCcc) {
            return
        }
        let progressId, txHash
        try {
            const cccTx = ccc.Transaction.fromLumosSkeleton(txInfo.tx);
            txHash = await signerCcc.sendTransaction(cccTx);
            setTransTBC(true)
            progressId = await showNotification("progress", `Withdraw in progress, wait for 90s`);
            setWithdrawPending(true)
            await signerCcc.client.waitTransaction(txHash, 0, 90000)
            showNotification("success", `Withdraw Success: ${txHash}`);
            onUpdate()
        } catch (error) {
            showNotification("error", `Withdraw Error: ${error}`);
        } finally {
            removeNotification(progressId + '')
            setAmount("")
            setTransTBC(false)
            setWithdrawPending(false)

        }
    }

    function approxConversion(
        amount: bigint,
    ) {
        if (!ickbData?.tipHeader) {
            return
        }
        const [convertedAmount] = [ickb2Ckb(amount, ickbData?.tipHeader, false)]
       
        return `${toText((convertedAmount===BigInt(100000000))?BigInt(0):convertedAmount)}`;
    }

    const handleMax = async () => {
        if (!ickbData) return;
        const udtBalance = ickbData?.ickbRealUdtBalance + ickbData?.ickbPendingBalance;
        setAmount(ccc.fixedPointToString(udtBalance));
    };
    const handleAmountChange = (e: { target: { value: React.SetStateAction<string>; }; }) => {
        if(!ickbData){ return}
        if (Number(e.target.value)  >= Number(ccc.fixedPointToString(ickbData.ickbRealUdtBalance))) {
            setAmount(ccc.fixedPointToString(ickbData.ickbRealUdtBalance))
            return
        }
        setAmount(e.target.value)
    }
   
    useEffect(() => {
        if (!ickbData) return;
        let pending = 0;
        if (ickbData.myOrders.length > 0) {
            ickbData.myOrders.map(item => {
                if (item.info.isCkb2Udt && item.info.absTotal === item.info.absProgress) {
                    pending += Number(item.info.udtAmount);
                }
            })
        }
        if (ickbData.myReceipts.length > 0) {
            ickbData.myReceipts.forEach((item) => {
                pending += Number(item.ickbAmount);
            });
        }
        pending > 0 ? setPendingBalance(toText(BigInt(pending))) : setPendingBalance('0');

    }, [ickbData]);

    return (
        <>
            <div className="flex  flex-col sm:flex-row font-play mb-4 mt-8 text-left">
                <div className="block sm:basis-1/2">
                    <p className="text-gray-400 mb-2 flex items-center"><span className="w-2 h-2 bg-green-500 mr-2"></span>Withdrawable iCKB</p>
                    <p className="text-2xl font-bold font-play mb-4">{(ickbData &&toText(ickbData.ickbRealUdtBalance||BigInt(0)) )} <span className="text-base font-normal">iCKB</span></p>
                </div>
                <div className="block sm:basis-1/2">
                    <p className="text-gray-400 mb-2 flex items-center">
                        <span className={"w-2 h-2 bg-yellow-500 mr-2"}></span>
                        Pending
                    </p>
                    <p className="text-2xl font-bold font-play mb-4 flex  items-center">
                        <span>
                            {pendingBalance} <span className="text-base font-normal">iCKB</span>
                        </span>
                        
                    </p>
                </div>
            </div>
            <div className='relative mb-4 flex'>
                {/* <label className="flex px-2 items-center"><img src="/svg/icon-ckb.svg" alt="CKB" className="mr-2" /> CKB</label> */}
                <input className="w-full text-left rounded border no-arrows  border-[#777] bg-gray-700  hover:border-cyan-500 focus:border-cyan-500  text-lg p-3 mt-1 pr-16 pl-14"
                    type="number"
                    value={amount}
                    onChange={handleAmountChange}
                    placeholder="0" />
                <img src="/svg/icon-ickb-2.svg" className="absolute left-4 top-[18px]" alt="iCKB" />
                <span className="absolute right-4 top-[7px] p-3 flex items-center text-teal-500 cursor-pointer" onClick={handleMax}>
                    MAX
                </span>
            </div>

            <p className="text-center text-large font-bold text-center text-cyan-500 mb-4 pb-2 ">
                1 iCKB ≈ {ickbData?.tipHeader && approxConversion(CKB)} CKB
            </p>
            <div className="flex justify-between my-3 text-base">
                <span>Receive </span>
                <span>{amount ? <>≈{approxConversion(BigInt(Math.trunc(parseFloat(amount) * Number(CKB))))}</> : 0} CKB</span>
            </div>
            {txInfo && Number(amount) > 0 &&
                <div className="rounded border-1 border-yellow-500 p-4 bg-yellow-500/[.12]  my-3">
                    <h3 className="text-lg flex items-center">
                        <TriangleAlert size={24} className="block mr-1" />
                        <span className="block">NOTE</span>
                    </h3>
                    <p className="mt-2 text-sm">
                        {txInfo.info
                            .concat(txInfo.error !== "" ? [txInfo.error, ""] : [""])
                            .join(". ")}
                    </p></div>
            }
            <button
                onClick={handleWithDraw}
                className="mt-4 w-full font-bold bg-btn-gradient text-gray-800 text-body-2 py-3 rounded-lg hover:bg-btn-gradient-hover transition duration-200 disabled:opacity-50 disabled:hover:bg-btn-gradient"
                disabled={(() => {
                    // try {
                    //   ccc.numFrom(amount);
                    // } catch (error) {
                    //   return true;
                    // }
                    return amount === ""|| amount === "0"|| !!transTBC;
                  })()}
            >
                {transTBC ? (<>
                    <TailSpin
                        height="20"
                        width="20"
                        color="#333333"
                        ariaLabel="tail-spin-loading"
                        radius="1"
                        wrapperStyle={{ 'display': 'inline-block', 'marginRight': '10px' }}
                        wrapperClass="inline-block"
                    /> {withdrawPending ? 'pending' : 'To be confirmed'}
                </>) :

                    <>{amount ? 'Withdraw' : 'Enter an amount'}
                    </>}


            </button>
            {/* <div className="mt-8 w-full">
                <div className="flex items-center" onClick={togglePendingShow}>
                    {pendingShow ? <ChevronUp color="rgba(255,255,255,1)" size={18} /> : <ChevronDown color="rgba(255,255,255,1)" size={18} />}
                    Pending iCKB Details</div>
                {pendingShow && <>
                    {pendingIckbs && pendingIckbs.length > 0 ?
                        <IckbPendingDetail columns={pendingIckbs} /> : <p>You don’t have any pending iCKB </p>}


                </>}
            </div> */}
        </>
    );
};

export default IckbWithdraw;


================================================
File: src/app/components/Notification.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useNotification } from "@/context/NotificationProvider";

function getNotificationStyle(type: string) {
  switch (type) {
    case "success":
      return { backgroundColor: "#80ffba", color: "#08331a" };
    case "error":
      return {
        backgroundColor: "rgba(255, 128, 128, 1)",
        color: "rgba(51, 6, 8, 1)",
      };
    case "info":
      return { backgroundColor: "#85fff9", color: "#002922" };
    default:
      return { backgroundColor: "#ffe180", color: "#332008" };
  }
}

function getNotificationIcon(type: string) {
  let iconPath: string;
  let bgColor: string;
  let iconColor: string;

  switch (type) {
    case "success":
      iconPath = "/svg/checkmark-circle.svg";
      bgColor = "bg-green-800";
      iconColor = "text-green-800";
      break;
    case "error":
      iconPath = "/svg/clear-circle.svg";
      bgColor = "bg-red-500";
      iconColor = "text-red-600";
      break;
    case "info":
      iconPath = "/svg/info-circle.svg";
      bgColor = "bg-cyan-600";
      iconColor = "text-cyan-600";
      break;
    case "progress":
      iconPath = "/svg/info-circle.svg";
      bgColor = "bg-cyan-600";
      iconColor = "text-cyan-600";
      break;
    default:
      iconPath = "/svg/warning-circle.svg";
      bgColor = "bg-yellow-800";
      iconColor = "text-yellow-800";
  }

  return (
    <div className={`rounded-full ${bgColor}`}>
      <div className={`w-5 h-5 ${iconColor} flex items-center justify-center`}>
        <img src={iconPath} alt={type} className="w-4 h-4" />
      </div>
    </div>
  );
}

const Notification: React.FC = () => {
  // const { notifications, removeNotification } = useNotification();
  const { notifications } = useNotification();

  return (
    <div className="fixed top-4 right-8 z-50 flex flex-col gap-2 item-center">
      <AnimatePresence initial={false}>
        {notifications.map((notification) => {
          const style = getNotificationStyle(notification.type);
          return (
            <motion.div
              key={notification.id}
              initial={{ opacity: 0, scale: 0.3 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.5, transition: { duration: 0.2 } }}
              transition={{ type: "spring", stiffness: 500, damping: 30 }}
              style={style}
              className="px-3 py-2 text-xs gap-2 flex items-center rounded-lg shadow-lg w-64"
              layout
              // 屏蔽点击关闭
              // onClick={() => removeNotification(notification.id)}
            >
              <div className="flex items-center justify-center">
                {getNotificationIcon(notification.type)}
              </div>
              <p className="text-wrap break-all">
                {notification.message.map((msg, i) => (
                  <React.Fragment key={i}>
                    {i === 0 ? "" : " "}
                    {msg}
                  </React.Fragment>
                ))}
              </p>
            </motion.div>
          );
        })}
      </AnimatePresence>
    </div>
  );
};

export default Notification;


================================================
File: src/app/components/SkeletonLoader.tsx
================================================
import React from 'react';

interface SkeletonLoaderProps {
  showHeader?: boolean;
  itemCount?: number;
  showChart?: boolean;
}

const SkeletonLoader: React.FC<SkeletonLoaderProps> = ({
  showHeader = true,
  itemCount = 4,
  showChart = false,
}) => {
  return (
    <div className="bg-gray-900 rounded-lg p-4 w-full animate-pulse">
      {showHeader && (
        <div className="flex items-center mb-4">
          <div className="rounded-full bg-gray-700 p-2 mr-3 w-10 h-10"></div>
          <div>
            <div className="h-6 bg-gray-700 rounded w-32 mb-2"></div>
            <div className="h-4 bg-gray-700 rounded w-24"></div>
          </div>
        </div>
      )}
      
      {Array.from({ length: itemCount }).map((_, index) => (
        <div key={index} className="bg-gray-800 rounded-lg p-3 mb-2">
          <div className="flex justify-between items-center mb-2">
            <div className="h-4 bg-gray-700 rounded w-24"></div>
            {showChart ? (
              <div className="w-12 h-12 bg-gray-700 rounded"></div>
            ) : (
              <div className="rounded-full bg-gray-700 w-12 h-12"></div>
            )}
          </div>
          <div className="h-6 bg-gray-700 rounded w-32"></div>
        </div>
      ))}
    
      {showChart && (
        <div className="mt-4">
          <div className="h-40 bg-gray-800 rounded-lg"></div>
        </div>
      )}
    </div>
  );
};

export default SkeletonLoader;

================================================
File: src/app/components/Sorter.tsx
================================================
export enum SortDirection {
    Ascending,
    Descending
  }
  
  export default function sortingObj<T>(
    data: T[],
    sortKey: keyof T,
    direction: SortDirection
  ): T[] {
    const d = data.sort((a: T, b: T) => {
      if (direction === SortDirection.Ascending) {
        return a[sortKey] < b[sortKey] ? -1 : 1;
      }
      if (direction === SortDirection.Descending) {
        return a[sortKey] > b[sortKey] ? -1 : 1;
      }
      return 0;
    });
    return d;
  }
  

================================================
File: src/app/components/TransactionSkeleton.tsx
================================================
import React from "react";

interface DashboardRecentTransactionsSkeletonProps {
  itemCount?: number;
}

export function DashboardRecentTransactionsSkeleton({
  itemCount = 5,
  ...props
}: DashboardRecentTransactionsSkeletonProps &
  React.ComponentPropsWithoutRef<"div">) {
  return (
    <div
      {...props}
      className={`bg-gray-900 rounded-lg p-4 flex-grow animate-pulse ${props.className}`}
    >
      <div className="h-6 bg-gray-700 rounded w-48 mb-6"></div>
      <div className="space-y-4">
        {Array.from({ length: itemCount }).map((_, index) => (
          <div key={index} className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="w-8 h-8 bg-gray-700 rounded-full mr-3"></div>
              <div>
                <div className="h-4 bg-gray-700 rounded w-24 mb-2"></div>
                <div className="h-3 bg-gray-700 rounded w-16"></div>
              </div>
            </div>
            <div className="h-4 bg-gray-700 rounded w-20"></div>
          </div>
        ))}
      </div>
      <div className="mt-6 flex justify-center">
        <div className="h-4 bg-gray-700 rounded w-32"></div>
      </div>
    </div>
  );
}


================================================
File: src/app/components/Ttitle.tsx
================================================
import { truncateAddress } from "@/utils/stringUtils";
import { ccc } from "@ckb-ccc/connector-react";
import { Wallet } from "lucide-react";
import React, { useEffect, useState } from "react";

interface TitleProps {
  children: React.ReactNode;
  className?: string;
}

const Title: React.FC<TitleProps> = ({ children, className = "" }) => {
  const signer = ccc.useSigner();
  const { open } = ccc.useCcc();

  const [internalAddress, setInternalAddress] = useState("");

  useEffect(() => {
    (async () => {
      if (!signer) {
        return;
      }
      setInternalAddress(await signer.getInternalAddress());
    })();
  }, [signer]);

  return (
    <div
      className={`font-play text-white w-full flex justify-between items-center mb-4 ${className}`}
    >
      <h1 className="text-2xl font-bold">{children}</h1>
      <button
        className="bg-gray-900 border-white/20 border rounded-full p-2 px-4 flex gap-2"
        onClick={open}
      >
        <Wallet />
        {truncateAddress(internalAddress)}
      </button>
    </div>
  );
};

export default Title;


================================================
File: src/context/NotificationProvider.tsx
================================================
import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';

type NotificationType = 'success' | 'error' | 'info' | 'warning' | 'progress';

interface Notification {
  id: string;
  type: NotificationType;
  message: React.ReactNode[];
}

interface NotificationContextType {
  showNotification: (type: NotificationType, ...message: React.ReactNode[]) => void;
  notifications: Notification[];
  removeNotification: (id: string) => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);
let TOTAL_ID = 0;

export const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const removeNotification = useCallback((id: string) => {
    setNotifications(prev => prev.filter(notification => notification.id !== id));
  }, []);

  const showNotification = useCallback((type: NotificationType, ...message: React.ReactNode[]) => {
    const id = TOTAL_ID.toString();
    TOTAL_ID += 1;
    setNotifications(prev => [...prev, { id, type, message }]);
    if(type!=='progress'){
      setTimeout(() => {
        removeNotification(id);
      }, 10000);
    }
    return id
  }, [removeNotification]);

  useEffect(() => {
    const handler = (event: PromiseRejectionEvent) => {
      const msg = (() => {
        if (typeof event.reason === "object" && event.reason !== null) {
          const { name, message, stack, cause } = event.reason;
          return JSON.stringify({ name, message, stack, cause });
        }
        if (typeof event.reason === "string") {
          return event.reason;
        }
        return JSON.stringify(event);
      })();
      showNotification("error", "Unknown error", msg);
    };

    window.addEventListener("unhandledrejection", handler);
    return () => window.removeEventListener("unhandledrejection", handler);
  }, [showNotification]);


  return (
    <NotificationContext.Provider value={{ notifications, showNotification, removeNotification }}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (context === undefined) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};


================================================
File: src/cores/config.ts
================================================
import { ccc } from "@ckb-ccc/connector-react";
import { Cell, Transaction, helpers } from "@ckb-lumos/lumos";
import { ChainConfig, chainConfigFrom, I8Script, lockExpanderFrom, i8ScriptPadding } from "@ickb/lumos-utils";
import { getIckbScriptConfigs } from "@ickb/v1-core";
import type { QueryClient } from "@tanstack/react-query"

export interface WalletConfig extends ChainConfig {
    address: ccc.Hex;
    accountLock: I8Script;
    expander: (c: Cell) => I8Script | undefined;
    addPlaceholders: (tx: helpers.TransactionSkeletonType) => helpers.TransactionSkeletonType;
    signer: (tx: helpers.TransactionSkeletonType) => Promise<Transaction>;
    queryClient: QueryClient;
}

let WalletConfig: WalletConfig | undefined = undefined;

const chain2RpcUrl = Object.freeze({
  mainnet: "https://mainnet.ckb.dev",
  testnet: "https://testnet.ckb.dev",
  devnet: "http://127.0.0.1:8114/",
});

export async function setupWalletConfig(signer: ccc.Signer,queryClient: QueryClient) {
    const chain = signer.client.addressPrefix === "ckb" ? "mainnet" : "testnet";
    const chainConfig = await chainConfigFrom(chain, chain2RpcUrl[chain], true, getIckbScriptConfigs);
    const addresses = await signer.getAddressObjs();
    let signerAddress = addresses[0];
    for (const address of addresses) {
        const balance = await signer.client.getBalance([address.script]);
        if (balance > 0) {
            signerAddress = address;
            break;
        }
    }
    const signerLock = I8Script.from({
        ...i8ScriptPadding,
        ...signerAddress.script,

    });
   
    WalletConfig = {
        ...chainConfig,
         // @ts-expect-error '0xstring&&string'
        address: signerAddress.toString(),
        accountLock: signerLock,
        expander: lockExpanderFrom(signerLock),
        addPlaceholders: (tx: helpers.TransactionSkeletonType) => tx,
         // @ts-expect-error '0xstring&&string'
        signer: async (tx: helpers.TransactionSkeletonType) => {
            const cccTx = ccc.Transaction.fromLumosSkeleton(tx);
            return await signer.signTransaction(cccTx);
        },
        queryClient:queryClient
    }
    return WalletConfig
}

export function getWalletConfig(): WalletConfig {
    if (!WalletConfig) {
        
        throw new Error("please call `setupWalletConfig` at first");
    }
    return WalletConfig;
}


================================================
File: src/cores/queries.ts
================================================
/**
 * this file is copied from project `v1-interface`
 * 
 * @author Phroi
 * @reference https://github.com/ickb/v1-interface/blob/master/src/queries.ts
 */

import { helpers } from "@ckb-lumos/lumos";
import { queryOptions } from "@tanstack/react-query";
import {
    CKB,
    ConfigAdapter,
    I8Cell,
    I8Header,
    Uint128,
    capacitySifter,
    ckbDelta,
    headerDeps,
    hex,
    maturityDiscriminator,
    max,
    scriptEq,
    shuffle,
    since,
} from "@ickb/lumos-utils";
import {
    addWithdrawalRequestGroups,
    ckb2Ickb,
    ickbLogicScript,
    ickbPoolSifter,
    ickbSifter,
    ickbUdtType,
    limitOrderScript,
    orderSifter,
    ownedOwnerScript,
    ReceiptData,
} from "@ickb/v1-core";
import {
    IckbDirection,
    maturityWaitTime,
    maxWaitTime,
    MyReceipt,
    MyMaturity,
    txInfoFrom,
    RecentOrder,
} from "./utils";
import { addChange, base, convert } from "./transaction";
import type { Cell, Header, HexNumber, Transaction } from "@ckb-lumos/base";
import { parseAbsoluteEpochSince } from "@ckb-lumos/base/lib/since";
import { getWalletConfig, type WalletConfig } from "./config";
import { ccc } from "@ckb-ccc/connector-react";

const depositUsedCapacity = BigInt(82) * CKB;

export function l1StateOptions(isFrozen: boolean) {
    const walletConfig = getWalletConfig();

    return queryOptions({
        retry: true,
        refetchInterval:30000,
        refetchOnWindowFocus: true,
        refetchOnMount: true,
        refetchIntervalInBackground: false,
        // staleTime: 10000,
        queryKey: ["l1State"],
        queryFn: async () => {
            try {
                const data = await getL1State(walletConfig);
                console.log(data);
                return data
            } catch (e) {
                console.log(e);
                throw e;
            }
        },
        placeholderData: {
            ickbUdtPoolBalance: BigInt(-1),
            ickbDaoBalance: BigInt(-1),
            myOrders: [],
            myReceipts: [],
            myMaturity: [],
            ckbBalance: BigInt(-1),
            ickbRealUdtBalance: BigInt(0),
            ickbPendingBalance: BigInt(0),
            ckbPendingBalance: BigInt(0),
            ckbAvailable: BigInt(6) * CKB * CKB,
            tipHeader: headerPlaceholder,
            txBuilder: () => txInfoFrom({}),
            hasMatchable: false,
        },
        enabled: !isFrozen,
    });
}

async function getL1State(walletConfig: WalletConfig) {
    const { rpc, config, expander } = walletConfig;
    console.log(11111)
    const mixedCells = await getMixedCells(walletConfig);

    // Prefetch feeRate and tipHeader
    const feeRatePromise = rpc.getFeeRate(BigInt(1));
    const tipHeaderPromise = rpc.getTipHeader();

    // Prefetch headers
    const wanted = new Set<HexNumber>();
    const deferredGetHeader = (blockNumber: string) => {
        wanted.add(blockNumber);
        return headerPlaceholder;
    };
    ickbSifter(mixedCells, expander, deferredGetHeader, config);
    const headersPromise = getHeadersByNumber(wanted, walletConfig);

    // Prefetch txs outputs
    const wantedTxsOutputs = new Set<string>();
    const deferredGetTxsOutputs = (txHash: string) => {
        wantedTxsOutputs.add(txHash);
        return [];
    };
    orderSifter(mixedCells, expander, deferredGetTxsOutputs, config);
    const txsOutputsPromise = getTxsOutputs(wantedTxsOutputs, walletConfig);

    // Do potentially costly operations
    const { capacities, notCapacities } = capacitySifter(mixedCells, expander);

    // Await for headers
    const headers = await headersPromise;
    // Sift through iCKB related cells
    const {
        udts,
        receipts,
        withdrawalRequestGroups,
        ickbPool: pool,
        notIckbs,
    } = ickbSifter(
        notCapacities,
        expander,
        (blockNumber) => headers.get(blockNumber)!,
        config,
    );
    // Calculate iCKB pool total balance
    const ickbDaoBalance = pool.map(cell => BigInt(cell.cellOutput.capacity) - depositUsedCapacity).reduce((a, b) => a + b, BigInt(0));

    const tipHeader = I8Header.from(await tipHeaderPromise);
    // Partition between ripe and non ripe withdrawal requests
    const { mature, notMature } = maturityDiscriminator(
        withdrawalRequestGroups,
        (g) => g.ownedWithdrawalRequest.cellOutput.type![since],
        tipHeader,
    );

    // min lock: 1/4 epoch (~ 1 hour)
    const minLock = { length: 4, index: 1, number: 0 };
    // Sort the ickbPool based on the tip header
    let ickbPool = ickbPoolSifter(pool, tipHeader, minLock);
    // Take a random convenient subset of max 40 deposits
    if (ickbPool.length > 40) {
        const n = max(Math.round(ickbPool.length / 180), 40);
        ickbPool = shuffle(ickbPool.slice(0, n).map((d, i) => ({ d, i })))
            .slice(0, 40)
            .sort((a, b) => a.i - b.i)
            .map((a) => a.d);
    }

    // Await for txsOutputs
    const txsOutputs = await txsOutputsPromise;

    // Sift through Orders
    const { myOrders } = orderSifter(
        notIckbs,
        expander,
        (txHash) => txsOutputs.get(txHash) ?? [],
        config,
    );

    const hasMatchable = myOrders.some((o) => o.info.isMatchable);

    const txConsumesIntermediate =
        mature.length > 0 || receipts.length > 0 || myOrders.length > 0;

    // Calculate balances and baseTx
    const { tx: baseTx, info: baseInfo } = base({
        capacities,
        udts,
        myOrders,
        receipts,
        wrGroups: mature,
    });

    const myReceipts = convertReceipts(receipts, config);
    // const ickbUdtBalance = ickbDelta(baseTx, config);

    let ckbBalance = ckbDelta(baseTx, config);
    const ckbAvailable = max((ckbBalance / CKB - BigInt(1000)) * CKB, BigInt(0));
    let info = baseInfo;
    let wrWaitTime = "0 minutes";
    if (notMature.length > 0) {
        ckbBalance += ckbDelta(
            addWithdrawalRequestGroups(helpers.TransactionSkeleton(), notMature),
            config,
        );

        wrWaitTime = maxWaitTime(
            notMature.map((g) =>
                parseAbsoluteEpochSince(
                    g.ownedWithdrawalRequest.cellOutput.type![since],
                ),
            ),
            tipHeader,
        );

        info = Object.freeze(
            [
                `Excluding ${notMature.length} Withdrawal Request${notMature.length > 1 ? "s" : ""}` +
                ` with maturity in ${wrWaitTime}`,
            ].concat(info),
        );
    }

    const feeRate = BigInt(Number(await feeRatePromise) + 1000);
    const txBuilder = (direction: IckbDirection, amount: bigint) => {
        const txInfo = txInfoFrom({ tx: baseTx, info });

        if (direction === "ckb2ickb" || direction === "ickb2ckb") {
            const isCkb2Udt = direction === "ckb2ickb";
            if (amount > BigInt(0)) {
                return convert(
                    txInfo,
                    isCkb2Udt,
                    amount,
                    ickbPool,
                    tipHeader,
                    feeRate,
                    walletConfig,
                );
            }
        }

        if (txConsumesIntermediate || direction === "melt") {
            return addChange(txInfo, feeRate, walletConfig);
        }

        return txInfoFrom({ info, error: "Nothing to convert" });
    };

    // Calculate total and real ickb udt liquidity
    const { poolBalance: ickbUdtPoolBalance, userBalance: ickbRealUdtBalance } = await getTotalUdtCapacity(walletConfig);

    // Calculate pending udt and ckb, including matured
    let ckbPendingBalance = BigInt(0);
    myOrders.forEach((item) => {
        if (item.info.isUdt2Ckb && item.info.absTotal === item.info.absProgress) {
            ckbPendingBalance += item.info.ckbAmount;
        }
    });
    const myMaturity: MyMaturity[] = [];
    mature.forEach((item) => {
        const maturedCkb = BigInt(parseInt(item.ownedWithdrawalRequest.cellOutput.capacity, 16));
        ckbPendingBalance += maturedCkb;
        myMaturity.push({
            daoCell: item.owner,
            ckbAmount: maturedCkb,
            waitTime: "matured",
        })
    });
    let ickbPendingBalance = BigInt(0);
    myOrders.forEach((item) => {
        if (item.info.isCkb2Udt && item.info.absTotal === item.info.absProgress) {
            ickbPendingBalance += item.info.udtAmount;
        }
    });

    // Calculate not matured
    notMature.forEach((item) => {
        const notMaturedCkb = BigInt(parseInt(item.ownedWithdrawalRequest.cellOutput.capacity, 16));
        const e = parseAbsoluteEpochSince(
            item.ownedWithdrawalRequest.cellOutput.type![since],
        );
        myMaturity.push({
            daoCell: item.owner,
            ckbAmount: notMaturedCkb,
            waitTime: maturityWaitTime(e, tipHeader)
        });
    });

    return {
        ickbDaoBalance,
        ickbUdtPoolBalance,
        myOrders,
        myReceipts,
        myMaturity,
        ckbBalance,
        ickbRealUdtBalance,
        ckbAvailable,
        ickbPendingBalance,
        ckbPendingBalance,
        tipHeader,
        txBuilder,
        hasMatchable,
    };
}

function convertReceipts(receipts: I8Cell[], config: ConfigAdapter): MyReceipt[] {
    const ickbLogic = ickbLogicScript(config);
    return receipts.filter((c) => {
        return scriptEq(c.cellOutput.type, ickbLogic);
    }).map((c) => {
        const header = c.cellOutput.type![headerDeps][0];
        const { depositQuantity: quantity, depositAmount: amount } =
            ReceiptData.unpack(c.data);
        const ickbValue = ckb2Ickb(amount, header, false) * BigInt(quantity);
        return {
            receiptCell: c,
            depositQuantity: quantity,
            depositAmount: amount,
            ckbAmount: amount * BigInt(quantity),
            ickbAmount: ickbValue,
        }
    });
}

async function getTotalUdtCapacity(walletConfig: WalletConfig): Promise<{
    poolBalance: bigint;
    userBalance: bigint;
}> {
    const { rpc, config, accountLock } = walletConfig;
    const udtType = ickbUdtType(config);
    console.log("udtType = ", udtType);
    let cursor = undefined;
    let udtCapacity = BigInt(0);
    let userUdtCapacity = BigInt(0);
    while (true) {
        //@ts-expect-error 未指定type
        const result = await rpc.getCells({
            script: udtType,
            scriptType: "type",
            scriptSearchMode: "exact",
            withData: true,
        }, "desc", BigInt(50), cursor);
        if (result.objects.length === 0) {
            break;
        }
        cursor = result.lastCursor;
        //@ts-expect-error 未指定type
        result.objects.forEach((cell: { outputData; output; }) => {
            if (scriptEq(cell.output.lock, accountLock)) {
                userUdtCapacity += Uint128.unpack(cell.outputData.slice(0, 2 + 16 * 2));
            }
            udtCapacity += Uint128.unpack(cell.outputData.slice(0, 2 + 16 * 2));
        })
    }
    return {
        poolBalance: udtCapacity,
        userBalance: userUdtCapacity,
    };
}

async function getMixedCells(walletConfig: WalletConfig) {
    const { accountLock, config, rpc } = walletConfig;

    return Object.freeze(
        (
            await Promise.all(
                [
                    accountLock,
                    ickbLogicScript(config),
                    ownedOwnerScript(config),
                    limitOrderScript(config),
                ].map((lock) => rpc.getCellsByLock(lock, "desc", "max")),
            )
        ).flat(),
    );
}

async function getTxsOutputs(
    txHashes: Set<string>,
    walletConfig: WalletConfig,
) {
    const { chain, rpc, queryClient } = walletConfig;

    const known: Readonly<Map<HexNumber, Readonly<Cell[]>>> =
        queryClient.getQueryData([chain, "txsOutputs"]) ?? Object.freeze(new Map());

    const result = new Map<string, Readonly<Cell[]>>();
    const batch = rpc.createBatchRequest();
    for (const txHash of Array.from(txHashes)) {
        const outputs = known.get(txHash);
        if (outputs !== undefined) {
            result.set(txHash, outputs);
            continue;
        }
        batch.add("getTransaction", txHash);
    }

    if (batch.length === 0) {
        return known;
    }

    for (const tx of (await batch.exec()).map(
        ({ transaction: tx }: { transaction: Transaction }) => tx,
    )) {
        result.set(
            tx.hash!,
            Object.freeze(
                tx.outputs.map(({ lock, type, capacity }, index) =>
                    Object.freeze(<Cell>{
                        cellOutput: Object.freeze({
                            lock: Object.freeze(lock),
                            type: Object.freeze(type),
                            capacity: Object.freeze(capacity),
                        }),
                        data: Object.freeze(tx.outputsData[index] ?? "0x"),
                        outPoint: Object.freeze({
                            txHash: tx.hash!,
                            index: hex(index),
                        }),
                    }),
                ),
            ),
        );
    }

    const frozenResult = Object.freeze(result);
    queryClient.setQueryData([chain, "txsOutputs"], frozenResult);
    return frozenResult;
}

export async function getHeadersByNumber(
    wanted: Set<HexNumber>,
    walletConfig: WalletConfig,
) {
    const { chain, rpc, queryClient } = walletConfig;

    const known: Readonly<Map<HexNumber, Readonly<I8Header>>> =
        queryClient.getQueryData([chain, "headers"]) ?? Object.freeze(new Map());

    const result = new Map<HexNumber, Readonly<I8Header>>();
    const batch = rpc.createBatchRequest();
    for (const blockNum of Array.from(wanted)) {
        const h = known.get(blockNum);
        if (h !== undefined) {
            result.set(blockNum, h);
            continue;
        }
        batch.add("getHeaderByNumber", blockNum);
    }

    if (batch.length === 0) {
        return known;
    }

    for (const h of (await batch.exec()) as Header[]) {
        result.set(h.number, I8Header.from(h));
    }

    const frozenResult = Object.freeze(result);
    queryClient.setQueryData([chain, "headers"], frozenResult);

    return frozenResult;
}

export const headerPlaceholder = I8Header.from({
    compactTarget: "0x1a08a97e",
    parentHash:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
    transactionsRoot:
        "0x31bf3fdf4bc16d6ea195dbae808e2b9a8eca6941d589f6959b1d070d51ac28f7",
    proposalsHash:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
    extraHash:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
    dao: "0x8874337e541ea12e0000c16ff286230029bfa3320800000000710b00c0fefe06",
    epoch: "0x0",
    hash: "0x92b197aa1fba0f63633922c61c92375c9c074a93e85963554f5499fe1450d0e5",
    nonce: "0x0",
    number: "0x0",
    timestamp: "0x16e70e6985c",
    version: "0x0",
});

export async function* getRecentIckbOrders(signer: ccc.Signer, config: ConfigAdapter) {
    const limitOrder = limitOrderScript(config);
    const udtType = ickbUdtType(config);
    const ickbLogicType = ickbLogicScript(config);
    const ownedOwner = ownedOwnerScript(config);
    const unoccupiedCkb = (tx: ccc.Transaction, outputIndex: number) => {
        const dataBytes = ccc.bytesFrom(tx.outputsData[outputIndex]);
        const occupiedCkb = BigInt(tx.outputs[outputIndex].occupiedSize + dataBytes.length) * CKB;
        const ckbCapacity = tx.outputs[outputIndex].capacity;
        return ckbCapacity - occupiedCkb;
    };
    let recentOrders: RecentOrder[] = [];
    // Find all dao mint
    for await (const tx of signer.findTransactions({
        script: ickbLogicType,
    }, true, "desc")) {
        const header = await signer.client.getHeaderByNumber(tx.blockNumber);
        if (!header) {
            continue;
        }
        const inOutput = tx.cells.find(({ isInput }) => !isInput);
        if (inOutput) {
            const receiptCell = await signer.client.getCell({
                txHash: tx.txHash,
                index: inOutput.cellIndex
            });
            if (!receiptCell) {
                continue;
            }
            const receiptData = ReceiptData.unpack(receiptCell.outputData);
            const ckbAmount = receiptData.depositAmount * BigInt(receiptData.depositQuantity);
            const timestamp = header.timestamp;
            const order: RecentOrder = {
                timestamp,
                operation: "dao_deposit",
                amount: ckbAmount,
                unit: "CKB",
            }
            recentOrders.push(order);
        }
    }
    // Find all dao withdraw
    for await (const tx of signer.findTransactions({
        script: ownedOwner
    }, true, "desc")) {
        const header = await signer.client.getHeaderByNumber(tx.blockNumber);
        if (!header) {
            continue;
        }
        const inOutput = tx.cells.find(({ isInput }) => !isInput);
        if (inOutput) {
            const result = await signer.client.getTransaction(tx.txHash);
            if (!result) {
                continue;
            }
            const { transaction } = result;
            const daoWithdrawIndex = transaction.outputs.findIndex(cell => scriptEq(cell.lock, ownedOwner));
            if (daoWithdrawIndex === -1) {
                continue;
            }
            const ckbAmount = unoccupiedCkb(transaction, daoWithdrawIndex);
            const timestamp = header.timestamp;
            const order: RecentOrder = {
                timestamp,
                operation: "dao_withdraw",
                amount: ckbAmount,
                unit: "CKB",
            }
            recentOrders.push(order);
        }
    }
    recentOrders = recentOrders.sort((a, b) => Number(a.timestamp - b.timestamp));
    // Filter order mint and withdraw
    for await (const tx of signer.findTransactions({
        script: limitOrder,
    }, true, "desc")) {
        const header = await signer.client.getHeaderByNumber(tx.blockNumber);
        if (!header) {
            continue;
        }
        const inOutput = tx.cells.find(({ isInput }) => !isInput);
        if (inOutput) {
            const result = await signer.client.getTransaction(tx.txHash);
            if (!result) {
                continue;
            }
            const { transaction } = result;
            const orderIndex = transaction.outputs.findIndex(cell => scriptEq(cell.lock, limitOrder) && scriptEq(cell.type, udtType));
            if (orderIndex === -1) {
                continue;
            }
            const orderData = transaction.outputsData[orderIndex];
            const udtAmount = Uint128.unpack(orderData.slice(0, 2 + 16 * 2));
            const ckbAmount = unoccupiedCkb(transaction, orderIndex);
            const timestamp = header.timestamp;
            recentOrders.push({
                timestamp,
                operation: udtAmount > 0 ? "order_withdraw" : "order_deposit",
                amount: udtAmount > 0 ? udtAmount : ckbAmount,
                unit: udtAmount > 0 ? "iCKB" : "CKB",
            });
            recentOrders = recentOrders.sort((a, b) => Number(a.timestamp - b.timestamp));
            yield recentOrders.pop();
        }
    }
}

export async function getUserUdtCapacityBySigner(signer: ccc.Signer): Promise<bigint> {
    const udtType: ccc.ScriptLike = {
        codeHash: "0x50bd8d6680b8b9cf98b73f3c08faf8b2a21914311954118ad6609be6e78a1b95",
        args: "0xb73b6ab39d79390c6de90a09c96b290c331baf1798ed6f97aed02590929734e800000080",
        hashType: "data1",
    };
    let udtCapacity = BigInt(0);
    for await (const cell of signer.findCells({
        script: udtType
    }, true)) {
        udtCapacity += Uint128.unpack(cell.outputData.slice(0, 2 + 16 * 2));
    }
    return udtCapacity;
}


================================================
File: src/cores/transaction.ts
================================================
/**
 * this file is copied from project `v1-interface`
 * 
 * @author Phroi
 * @reference https://github.com/ickb/v1-interface/blob/master/src/transaction.ts
 */

import { helpers } from "@ckb-lumos/lumos";
import {
    addCells,
    addCkbChange,
    binarySearch,
    calculateTxFee,
    CKB,
    txSize,
    type I8Cell,
    type I8Header,
} from "@ickb/lumos-utils";
import {
    addIckbUdtChange,
    addOwnedWithdrawalRequestsChange,
    addReceiptDepositsChange,
    addWithdrawalRequestGroups,
    ickb2Ckb,
    ickbDeposit,
    ickbExchangeRatio,
    ickbRequestWithdrawalFrom,
    orderMelt,
    orderMint,
    type ExtendedDeposit,
    type MyOrder,
    type OrderRatio,
} from "@ickb/v1-core";
import {
    maxWaitTime,
    MyReceipt,
    toText,
    txInfoFrom,
    type TxInfo,
} from "./utils";
import { ckbSoftCapPerDeposit } from "@ickb/v1-core";
import { WalletConfig } from "./config.js";
// import { ChevronsRightLeft } from "lucide-react";

export function base({
    capacities,
    udts,
    receipts,
    wrGroups,
    myOrders,
}: {
    capacities: I8Cell[];
    udts: I8Cell[];
    receipts: I8Cell[];
    wrGroups: Readonly<{
        ownedWithdrawalRequest: I8Cell;
        owner: I8Cell;
    }>[];
    myOrders: MyOrder[];
}) {
    let tx = helpers.TransactionSkeleton();
    const info: string[] = [];

    tx = orderMelt(tx, myOrders);
    const notCompleted = myOrders.reduce(
        (c, { info }) => (info.isMatchable ? c + 1 : c),
        0,
    );
    if (notCompleted > 0) {
        info.push(
            `Cancelling ${notCompleted} Open Order${notCompleted > 1 ? "s" : ""}`,
        );
    }
    const completed = myOrders.length - notCompleted;
    if (completed > 0) {
        info.push(
            `Melting ${completed} Completed Order${completed > 1 ? "s" : ""}`,
        );
    }

    tx = addCells(tx, "append", [capacities, udts, receipts].flat(), []);
    // Receipts need explanation, while capacities and udts do not
    if (receipts.length > 0) {
        info.push(
            `Converting ${receipts.length} Receipt${receipts.length > 1 ? "s" : ""} to iCKB`,
        );
    }

    tx = addWithdrawalRequestGroups(tx, wrGroups);
    if (wrGroups.length > 0) {
        info.push(
            `Withdrawing from ${wrGroups.length} Withdrawal Request${wrGroups.length > 1 ? "s" : ""}`,
        );
    }

    return txInfoFrom({ tx, info });
}

type MyExtendedDeposit = ExtendedDeposit & { ickbCumulative: bigint };

export function convert(
    txInfo: TxInfo,
    isCkb2Udt: boolean,
    amount: bigint,
    deposits: Readonly<ExtendedDeposit[]>,
    tipHeader: I8Header,
    feeRate: bigint,
    walletConfig: WalletConfig,
) {
    if (txInfo.error !== "") {
        return txInfo;
    }
    const ickbPool: MyExtendedDeposit[] = [];
    if (!isCkb2Udt) {
        // Filter deposits
        let ickbCumulative = BigInt(0);
        for (const d of deposits) {
            const c = ickbCumulative + d.ickbValue;
            if (c > amount) {
                continue;
            }
            ickbCumulative = c;
            console.log(Object.freeze({ ...d, ickbCumulative }))
            ickbPool.push(Object.freeze({ ...d, ickbCumulative }));

            if (ickbPool.length >= 30) {
                break;
            }
        }
    }
    Object.freeze(ickbPool);
    const { ckbMultiplier, udtMultiplier } = ickbExchangeRatio(tipHeader);
    const ratio: OrderRatio = {
        ckbMultiplier,
        //   Pay 0.1% fee to bot
        udtMultiplier:
            udtMultiplier + (isCkb2Udt ? BigInt(1) : BigInt(-1)) * (udtMultiplier / BigInt(1000)),
    };

    const depositAmount = ckbSoftCapPerDeposit(tipHeader);
    const N = isCkb2Udt ? Number(amount / depositAmount) : ickbPool.length;
    const txCache = Array<TxInfo | undefined>(N);
    const attempt = (n: number) => {
        n = N - n;
        return (txCache[n] =
            txCache[n] ??
            convertAttempt(
                n,
                isCkb2Udt,
                amount,
                txInfo,
                ratio,
                depositAmount,
                ickbPool,
                tipHeader,
                feeRate,
                walletConfig,
            ));
    };
    return attempt(binarySearch(N, (n) => attempt(n).error === ""));
}

function convertAttempt(
    quantity: number,
    isCkb2Udt: boolean,
    amount: bigint,
    txInfo: TxInfo,
    ratio: OrderRatio,
    depositAmount: bigint,
    ickbPool: Readonly<MyExtendedDeposit[]>,
    tipHeader: I8Header,
    feeRate: bigint,
    walletConfig: WalletConfig,
) {
    let { tx, info } = txInfo;
    const { error } = txInfo
    if (error !== "") {
        return txInfo;
    }

    const { accountLock, config } = walletConfig;
    if (quantity > 0) {
        if (isCkb2Udt) {
            amount -= depositAmount * BigInt(quantity);
            if (amount < BigInt(0)) {
                return txInfoFrom({
                    error: "Too many Deposits respectfully to the amount",
                });
            }
            tx = ickbDeposit(tx, quantity, depositAmount, config);
            tx = addReceiptDepositsChange(tx, accountLock, config);
            info = info.concat([]);
            info = info.concat([
                `Creating ${quantity} standard deposit${quantity > 1 ? "s" : ""} (each amount is ${toText(depositAmount)} CKB) ` +
                `and ${quantity > 1 ? "their" : "its"} Receipt`,
            ]);
        } else {
            if (ickbPool.length < quantity) {
                return txInfoFrom({ error: "Not enough Deposits to withdraw from" });
            }
            amount -= ickbPool[quantity - 1].ickbCumulative;
            if (amount < BigInt(0)) {
                return txInfoFrom({
                    error: "Too many Withdrawal Requests respectfully to the amount",
                });
            }
            ickbPool = ickbPool.slice(0, quantity);
            const deposits = ickbPool.map((d) => d.deposit);
            tx = ickbRequestWithdrawalFrom(tx, deposits, config);
            tx = addOwnedWithdrawalRequestsChange(tx, accountLock, config);
            const waitTime = maxWaitTime(
                ickbPool.map((d) => d.estimatedMaturity),
                tipHeader,
            );
            info = info.concat([
                `Requesting the Withdrawal from ${quantity} Deposit${quantity > 1 ? "s" : ""}` +
                ` with maturity in ${waitTime}`,
            ]);
        }
    }

    if (amount > BigInt(0)) {
        tx = orderMint(
            tx,
            accountLock,
            config,
            isCkb2Udt ? amount : undefined,
            isCkb2Udt ? undefined : amount,
            isCkb2Udt ? ratio : undefined,
            isCkb2Udt ? undefined : ratio,
        );
        // 0.1% fee to bot
        const fee = isCkb2Udt
            ? amount -
            ickb2Ckb(
                (amount * ratio.ckbMultiplier) / ratio.udtMultiplier,
                tipHeader,
            )
            : ickb2Ckb(amount, tipHeader) -
            (amount * ratio.udtMultiplier) / ratio.ckbMultiplier;
        info = info.concat([
            `Creating a Limit Order for ${quantity > 0 ? "the remaining" : ""} ` +
            `${toText(amount)} ${isCkb2Udt ? "CKB" : "iCKB"}. ` +
            `Paying an extra Order Fee of ${toText(fee)} CKB`,
        ]);
    }

    return addChange(txInfoFrom({ tx, info }), feeRate, walletConfig);
}

export function addChange(
    txInfo: TxInfo,
    feeRate: bigint,
    walletConfig: WalletConfig,
) {
    let { tx, info } = txInfo;
    const { error } = txInfo
    if (error !== "") {
        return txInfo;
    }

    const { accountLock, addPlaceholders, config } = walletConfig;
    // eslint-disable-next-line
    let txFee, freeCkb, freeIckbUdt;
    // eslint-disable-next-line
    ({ tx, freeIckbUdt } = addIckbUdtChange(tx, accountLock, config));
    // eslint-disable-next-line
    ({ tx, txFee, freeCkb } = addCkbChange(
        tx,
        accountLock,
        (txWithDummyChange: helpers.TransactionSkeletonType) => {
            const baseFee = calculateTxFee(
                txSize(addPlaceholders(txWithDummyChange)),
                feeRate,
            );
            // Use a fee that is multiple of N=1249
            const N = BigInt(2000);
            return ((baseFee + (N - BigInt(1))) / N) * N;
        },
        config,
    ));
    if (freeCkb < BigInt(0)) {
        return txInfoFrom({ info, error: "Not enough CKB" });
    }

    if (freeIckbUdt < BigInt(0)) {
        return txInfoFrom({ info, error: "Not enough iCKB" });
    }

    if (tx.outputs.size > 64) {
        return txInfoFrom({
            info,
            error: "More than 64 output cells",
        });
    }

    info = info.concat([`Paying an extra Network Fee of ${toText(txFee)} CKB`]);

    return txInfoFrom({ tx, info });
}

export function meltOrder(myOrders: MyOrder[], myReceipts: MyReceipt[], feeRate: bigint, walletConfig: WalletConfig): TxInfo {
    console.log(myOrders, myReceipts);
    const validOrders = myOrders.filter((o) => o.info.absProgress === o.info.absTotal);
    const info = validOrders.map((o) => {
        if (o.info.isCkb2Udt) {
            return `Extract ${toText(o.info.absTotal / CKB)} iCKB from order`;
        } else {
            return `Extract ${toText(o.info.absTotal / CKB)} CKB from order`;
        }
    });
    myReceipts.forEach((receipt) => {
        const ckbValue = toText(receipt.depositAmount * BigInt(receipt.depositQuantity) / CKB);
        const ickbValue = toText(receipt.ickbAmount);
        info.push(`Convert ${ckbValue} CKB to ${ickbValue} iCKB from receipt`);
    });
    let tx = helpers.TransactionSkeleton();
    if (myOrders.length > 0) {
        tx = orderMelt(tx, myOrders);
    }
    tx = addCells(tx, "append", myReceipts.map((r) => r.receiptCell), []);
    const txInfo = txInfoFrom({ tx, info });
    return addChange(txInfo, feeRate, walletConfig);
}


================================================
File: src/cores/utils.ts
================================================
/**
 * this file is copied from project `v1-interface`
 * 
 * @author Phroi
 * @reference https://github.com/ickb/v1-interface/blob/master/src/utils.ts
 */

import { helpers } from "@ckb-lumos/lumos";
import type { QueryClient } from "@tanstack/react-query";
import {
    CKB,
    epochSinceCompare,
    I8Cell,
    isPopulated,
    type ChainConfig,
    type I8Header,
} from "@ickb/lumos-utils";
import { parseEpoch, type EpochSinceValue } from "@ckb-lumos/base/lib/since";
import { MyOrder } from "@ickb/v1-core";

export interface RootConfig extends ChainConfig {
    queryClient: QueryClient;
}

export type IckbDateType = {
    ickbDaoBalance: bigint;
    ickbUdtPoolBalance: bigint;
    myOrders: MyOrder[];
    myReceipts: MyReceipt[];
    myMaturity: MyMaturity[];
    ckbBalance: bigint;
    ckbPendingBalance: bigint;
    ickbPendingBalance: bigint;
    ckbAvailable: bigint;
    ickbRealUdtBalance: bigint;
    tipHeader: Readonly<I8Header>;
    txBuilder: (direction: IckbDirection, amount: bigint) => Readonly<TxInfo>;
    hasMatchable: boolean;

} | undefined

export type IckbDirection = "ckb2ickb" | "ickb2ckb" | "melt";

export type MyReceipt = {
    receiptCell: I8Cell;
    depositQuantity: number;
    depositAmount: bigint;
    ckbAmount: bigint;
    ickbAmount: bigint;
}

export type MyMaturity = {
    daoCell: I8Cell,
    ckbAmount: bigint;
    waitTime: string;
}

export type RecentOrder = {
    timestamp: bigint;
    operation: "order_deposit" | "order_withdraw" | "dao_deposit" | "dao_withdraw";
    amount: bigint;
    unit: "CKB" | "iCKB";
}

export function symbol2Direction(s: string) {
    return s === "C";
}

export function direction2Symbol(d: boolean) {
    return d ? "C" : "I";
}

export function sanitize(text: string) {
    // Filter leading zeros
    let i = 0;
    for (; i < text.length; i++) {
        const c = text[i];
        if ("1" <= c && c <= "9" || c === ".") {
            break;
        }
    }

    //Filter decimal part
    let dot = "";
    const decimalChars: string[] = [];
    for (; i < text.length; i++) {
        const c = text[i];
        if ("0" <= c && c <= "9") {
            decimalChars.push(c);
        } else if (c == ".") {
            dot = ".";
            break;
        }
    }

    //Filter fractional part
    const fractionalChars: string[] = [];
    for (; i < text.length && fractionalChars.length < 8; i++) {
        const c = text[i];
        if ("0" <= c && c <= "9") {
            fractionalChars.push(c);
        }
    }

    return [decimalChars, [dot], fractionalChars].flat().join("");
}

export function toText(n: bigint) {
    return String(n / CKB) + String(Number(n % CKB) / Number(CKB)).slice(1);
}

export function toBigInt(text: string) {
    const [decimal, ...fractionals] = text.split(".");
    return BigInt(
        (decimal ?? "0") + ((fractionals ?? []).join("") + "00000000").slice(0, 8),
    );
}

export function maxWaitTime(ee: EpochSinceValue[], tipHeader: I8Header) {
    const e = ee.reduce((a, b) => (epochSinceCompare(a, b) === -1 ? b : a));
    return maturityWaitTime(e, tipHeader);
}

export function maturityWaitTime(e: EpochSinceValue, tipHeader: I8Header) {
    const t = parseEpoch(tipHeader.epoch);
    const epochs = e.index / e.length - t.index / t.length + e.number - t.number;
    if (epochs <= 0.375) {
        //90 minutes
        return `${String(1 + Math.ceil(epochs * 4 * 60))} minutes`;
    }

    if (epochs <= 6) {
        //24 hours
        return `${String(1 + Math.ceil(epochs * 4))} hours`;
    }

    return `${String(1 + Math.ceil(epochs / 6))} days`;
}

export type TxInfo = {
    tx: helpers.TransactionSkeletonType;
    info: readonly string[];
    error: string;
    isEmpty: boolean;
};

export function txInfoFrom({
    tx = helpers.TransactionSkeleton(),
    info = <readonly string[]>[],
    error = "",
}): Readonly<TxInfo> {
    if (error.length > 0) {
        tx = helpers.TransactionSkeleton();
    }

    const isEmpty = !isPopulated(tx) && info.length === 0 && error.length === 0;
    return Object.freeze({ tx, info: Object.freeze(info), error, isEmpty });
}


================================================
File: src/hooks/DaoCollect.tsx
================================================
import { useState, useEffect, useMemo } from "react";
import { ccc } from "@ckb-ccc/connector-react";
import { getProfit } from "@/utils/epoch";

async function* collectDaoCells(signer: ccc.Signer, isRedeeming?: boolean) {
  for await (const cell of signer.findCells(
    {
      script: await ccc.Script.fromKnownScript(
        signer.client,
        ccc.KnownScript.NervosDao,
        "0x"
      ),
      scriptLenRange: [33, 34],
      outputDataLenRange: [8, 9],
      ...(isRedeeming ?? true
        ? {}
        : {
            outputDataSearchMode: "exact",
            outputData: "00".repeat(8),
          }),
    },
    true
  )) {
    if (isRedeeming && ccc.numFrom(cell.outputData) === ccc.Zero) {
      continue;
    }
    yield cell;
  }
}

async function getDaoInfo(
  tip: ccc.ClientBlockHeader,
  cell: ccc.Cell,
  isRedeeming: boolean,
  client: ccc.Client
): Promise<DaoInfo["infos"]> {
  const previousTx = await client.getTransaction(cell.outPoint.txHash);
  if (!previousTx?.blockHash) {
    return;
  }
  const previousHeader = await client.getHeaderByHash(previousTx.blockHash);
  if (!previousHeader) {
    return;
  }

  const claimInfo = await (async (): Promise<DaoInfo["infos"]> => {
    if (!isRedeeming) {
      return;
    }

    const depositTxHash =
      previousTx.transaction.inputs[Number(cell.outPoint.index)].previousOutput
        .txHash;
    const depositTx = await client.getTransaction(depositTxHash);
    if (!depositTx?.blockHash) {
      return;
    }
    const depositHeader = await client.getHeaderByHash(depositTx.blockHash);

    if (!depositHeader) {
      return;
    }
    return [
      getProfit(cell, depositHeader, previousHeader),
      depositTx,
      depositHeader,
      [previousTx, previousHeader],
    ];
  })();

  if (claimInfo) {
    return claimInfo;
  } else {
    return [
      getProfit(cell, previousHeader, tip),
      previousTx,
      previousHeader,
      [undefined, tip],
    ];
  }
}

export interface DaoInfo {
  cell: ccc.Cell;
  isRedeeming: boolean;
  infos:
    | [
        ccc.Num,
        ccc.ClientTransactionResponse,
        ccc.ClientBlockHeader,
        [undefined | ccc.ClientTransactionResponse, ccc.ClientBlockHeader]
      ]
    | undefined;
}
export function useDaoCells(isRedeeming?: boolean) {
  const [cells, setCells] = useState<DaoInfo[]>([]);
  const [tip, setTip] = useState<ccc.ClientBlockHeader | undefined>(undefined);
  const [isLoading, setIsLoading] = useState(true);
  const signer = ccc.useSigner();
  const { client } = ccc.useCcc();

  useEffect(() => {
    const refresh = () => client.getTipHeader().then(setTip);

    const interval = setInterval(refresh, 1000);
    refresh();
    return () => clearInterval(interval);
  }, [client]);

  useEffect(() => {
    if (!signer) {
      return;
    }

    (async () => {
      try {
        const collectedCells: ccc.Cell[] = [];
        for await (const inputCell of collectDaoCells(signer, isRedeeming)) {
          collectedCells.push(inputCell);
        }

        setCells((cells) =>
          collectedCells.map((cell) => {
            const isRedeeming = ccc.numFrom(cell.outputData) !== ccc.Zero;
            const info = cells.find((c) =>
              c.cell.outPoint.eq(cell.outPoint)
            ) ?? {
              cell,
              isRedeeming,
              infos: undefined,
            };
            if (tip) {
              getDaoInfo(tip, cell, isRedeeming, signer.client).then(
                (infos) => {
                  setCells((cells) =>
                    cells.map((c) => {
                      if (c.cell.outPoint.eq(cell.outPoint)) {
                        return { ...c, infos };
                      }
                      return c;
                    })
                  );
                }
              );
            }
            return info;
          })
        );
      } finally {
        setIsLoading(false);
      }
    })();
  }, [signer, isRedeeming, tip]);

  const sum = useMemo(() => {
    return cells.reduce(
      (sum, c) => sum + BigInt(c.cell.cellOutput.capacity),
      BigInt(0)
    );
  }, [cells]);

  const profitSum = useMemo(() => {
    return cells.reduce(
      (sum, c) => sum + BigInt(c.infos?.[0] ?? "0"),
      BigInt(0)
    );
  }, [cells]);

  return { tip, cells, isLoading, sum, profitSum };
}

export function useDaoDeposits() {
  return useDaoCells(false);
}
export function useDaoRedeems() {
  return useDaoCells(true);
}


================================================
File: src/hooks/Explorer.tsx
================================================
import { ccc } from "@ckb-ccc/connector-react";
import Link from "next/link";

export function useGetExplorerLink() {
  const { client } = ccc.useCcc();

  const prefix =
    client.addressPrefix === "ckb"
      ? "https://explorer.nervos.org"
      : "https://pudge.explorer.nervos.org";

  return {
    index: prefix,
    explorerAddress: (addr: string, display?: string) => {
      return (
        <Link
          className="underline"
          href={`${prefix}/address/${addr}`}
          target="_blank"
        >
          {display ?? addr}
        </Link>
      );
    },
    explorerTransaction: (txHash: string, display?: string) => {
      return (
        <Link
          className="underline"
          href={`${prefix}/transaction/${txHash}`}
          target="_blank"
        >
          {display ?? txHash}
        </Link>
      );
    },
  };
}

================================================
File: src/hooks/UseSorter.tsx
================================================
import { useEffect, useState } from "react";


export interface SorterObj {
  amount: number;
  daterequested: number;
  remainingtime:number
}
export interface SortInfo {
  content: string;
  currentSortDir: SortDirection | undefined;
}

export interface Column {
  name: string;
  key: keyof SorterObj;
}

export interface ArrowProps {
  sortDir: SortDirection | undefined;
  active:boolean
}
export enum SortDirection {
  Ascending,
  Descending
}

export default function UseSorter<T>(
  data: T[]
): [
    T[],
    React.Dispatch<React.SetStateAction<T[]>>,
    SortDirection | undefined,
    React.Dispatch<React.SetStateAction<SortDirection | undefined>>,
    keyof T | undefined,
    React.Dispatch<React.SetStateAction<keyof T | undefined>>
  ] {
  const [dir, setDir] = useState<SortDirection>();
  const [sortedTable, setSortedTable] = useState<T[]>(data);
  const [key, setKey] = useState<keyof T>();

  useEffect(() => {
    if (key !== undefined && dir !== undefined) {
      const result = data.sort((a: T, b: T) => {
        if (key && dir?.valueOf() === SortDirection.Ascending.valueOf()) {
          // console.log("Ascending");
          return a[key] < b[key] ? -1 : 1;
        }
        if (key && dir?.valueOf() === SortDirection.Descending.valueOf()) {
          // console.log("Descending");
          return a[key] > b[key] ? -1 : 1;
        }
        return 0;
      });
      setSortedTable(result);
    }
  }, [sortedTable, dir, key,data]);

  return [sortedTable, setSortedTable, dir, setDir, key, setKey];
}


================================================
File: src/utils/epoch.ts
================================================
import { ccc } from "@ckb-ccc/connector-react";

export function getClaimEpoch(
  depositHeader: ccc.ClientBlockHeader,
  withdrawHeader: ccc.ClientBlockHeader
): ccc.Epoch {
  const depositEpoch = depositHeader.epoch;
  const withdrawEpoch = withdrawHeader.epoch;
  const intDiff = withdrawEpoch[0] - depositEpoch[0];
  if (
    intDiff % ccc.numFrom(180) !== ccc.numFrom(0) ||
    depositEpoch[1] * withdrawEpoch[2] <= depositEpoch[2] * withdrawEpoch[1]
  ) {
    return [
      depositEpoch[0] +
        (intDiff / ccc.numFrom(180) + ccc.numFrom(1)) * ccc.numFrom(180),
      depositEpoch[1],
      depositEpoch[2],
    ];
  }

  return [
    depositEpoch[0] + (intDiff / ccc.numFrom(180)) * ccc.numFrom(180),
    depositEpoch[1],
    depositEpoch[2],
  ];
}

export function getProfit(
  dao: ccc.Cell,
  depositHeader: ccc.ClientBlockHeader,
  withdrawHeader: ccc.ClientBlockHeader
) {
  const occupiedSize = ccc.fixedPointFrom(
    dao.cellOutput.occupiedSize + ccc.bytesFrom(dao.outputData).length
  );
  const profitableSize = dao.cellOutput.capacity - occupiedSize;

  return (
    (profitableSize * withdrawHeader.dao.ar) / depositHeader.dao.ar -
    profitableSize
  );
}

export function parseEpoch(epoch: ccc.Epoch) {
  return (
    ccc.fixedPointFrom(epoch[0].toString()) +
    (ccc.fixedPointFrom(epoch[1].toString()) * ccc.fixedPointFrom(1)) /
      ccc.fixedPointFrom(epoch[2].toString())
  );
}


================================================
File: src/utils/stringUtils.ts
================================================
import {
  CKB,
  
} from "@ickb/lumos-utils";
export function truncateString(str: string, frontChars: number, endChars: number): string {
  if (str.length <= frontChars + endChars) {
    return str;
  }
  return `${str.slice(0, frontChars)}...${str.slice(-endChars)}`;
}

export function truncateAddress(address: string, frontChars = 6, endChars = 4): string {
  return truncateString(address, frontChars, endChars);
}

export function formatBalance(balanceStr: string): string {
  const number = parseFloat(balanceStr);
  if (isNaN(number)) {
    return '0.00';
  }
  return number.toFixed(2);
}
export function toText(n: bigint) {
  return String(n / CKB) + String(Number(n % CKB) / Number(CKB)).slice(1);
}

export function toBigInt(text: string) {
  const [decimal, ...fractionals] = text.split(".");
  return BigInt(
    (decimal ?? "0") + ((fractionals ?? []).join("") + "00000000").slice(0, 8),
  );
}


================================================
File: types/apexcharts.d.ts
================================================
// Typescript declarations for Apex class and module.
// Note: When you have a class and a module with the same name; the module is merged
// with the class.  This is necessary since apexcharts exports the main ApexCharts class only.
//
// This is a sparse typed declarations of chart interfaces.  See Apex Chart documentation
// for comprehensive API:  https://apexcharts.com/docs/options
//
// There is on-going work to provide a comprehensive typed definition for this component.
// See https://github.com/DefinitelyTyped/DefinitelyTyped/pull/28733

declare class ApexCharts {
    constructor(el: any, options: any)
    render(): Promise<void>
    updateOptions(
      options: any,
      redrawPaths?: boolean,
      animate?: boolean,
      updateSyncedCharts?: boolean
    ): Promise<void>
    updateSeries(
      newSeries: ApexAxisChartSeries | ApexNonAxisChartSeries,
      animate?: boolean
    ): Promise<void>
    appendSeries(
      newSeries: ApexAxisChartSeries | ApexNonAxisChartSeries,
      animate?: boolean
    ): Promise<void>
    appendData(data: any[], overwriteInitialSeries?: boolean): void
    toggleSeries(seriesName: string): any
    highlightSeries(seriesName: string): any
    showSeries(seriesName: string): void
    hideSeries(seriesName: string): void
    resetSeries(): void
    zoomX(min: number, max: number): void
    toggleDataPointSelection(seriesIndex: number, dataPointIndex?: number): any
    destroy(): void
    setLocale(localeName: string): void
    paper(): void
    addXaxisAnnotation(options: any, pushToMemory?: boolean, context?: any): void
    addYaxisAnnotation(options: any, pushToMemory?: boolean, context?: any): void
    addPointAnnotation(options: any, pushToMemory?: boolean, context?: any): void
    removeAnnotation(id: string, options?: any): void
    clearAnnotations(options?: any): void
    dataURI(options?: { scale?: number, width?: number }): Promise<{ imgURI: string } | { blob: Blob }>
    static exec(chartID: string, fn: string, ...args: Array<any>): any
    static getChartByID(chartID: string): ApexCharts|undefined
    static initOnLoad(): void
    exports: {
      cleanup(): string
      svgUrl(): string
      dataURI(options?: { scale?: number, width?: number }): Promise<{ imgURI: string } | { blob: Blob }>
      exportToSVG(): void
      exportToPng(): void
      exportToCSV(options?: { series?: any, fileName?: string, columnDelimiter?: string, lineDelimiter?: string }): void
      getSvgString(scale?: number): void
      triggerDownload(href: string, filename?: string, ext?: string): void
    }
  }
  
  declare module ApexCharts {
    export interface ApexOptions {
      annotations?: ApexAnnotations
      chart?: ApexChart
      colors?: any[]
      dataLabels?: ApexDataLabels
      fill?: ApexFill
      forecastDataPoints?: ApexForecastDataPoints
      grid?: ApexGrid
      labels?: string[]
      legend?: ApexLegend
      markers?: ApexMarkers
      noData?: ApexNoData
      plotOptions?: ApexPlotOptions
      responsive?: ApexResponsive[]
      series?: ApexAxisChartSeries | ApexNonAxisChartSeries
      states?: ApexStates
      stroke?: ApexStroke
      subtitle?: ApexTitleSubtitle
      theme?: ApexTheme
      title?: ApexTitleSubtitle
      tooltip?: ApexTooltip
      xaxis?: ApexXAxis
      yaxis?: ApexYAxis | ApexYAxis[]
    }
  }
  
  type ApexDropShadow = {
    enabled?: boolean
    top?: number
    left?: number
    blur?: number
    opacity?: number
    color?: string
  }
  
  /**
   * Main Chart options
   * See https://apexcharts.com/docs/options/chart/
   */
  type ApexChart = {
    width?: string | number
    height?: string | number
    type?:
      | 'line'
      | 'area'
      | 'bar'
      | 'pie'
      | 'donut'
      | 'radialBar'
      | 'scatter'
      | 'bubble'
      | 'heatmap'
      | 'candlestick'
      | 'boxPlot'
      | 'radar'
      | 'polarArea'
      | 'rangeBar'
      | 'rangeArea'
      | 'treemap'
    foreColor?: string
    fontFamily?: string
    background?: string
    offsetX?: number
    offsetY?: number
    dropShadow?: ApexDropShadow & {
      enabledOnSeries?: undefined | number[]
      color?: string | string[]
    }
    events?: {
      animationEnd?(chart: any, options?: any): void
      beforeMount?(chart: any, options?: any): void
      mounted?(chart: any, options?: any): void
      updated?(chart: any, options?: any): void
      mouseMove?(e: any, chart?: any, options?: any): void
      mouseLeave?(e: any, chart?: any, options?: any): void
      click?(e: any, chart?: any, options?: any): void
      xAxisLabelClick?(e: any, chart?: any, options?: any): void
      legendClick?(chart: any, seriesIndex?: number, options?: any): void
      markerClick?(e: any, chart?: any, options?: any): void
      selection?(chart: any, options?: any): void
      dataPointSelection?(e: any, chart?: any, options?: any): void
      dataPointMouseEnter?(e: any, chart?: any, options?: any): void
      dataPointMouseLeave?(e: any, chart?: any, options?: any): void
      beforeZoom?(chart: any, options?: any): void
      beforeResetZoom?(chart: any, options?: any): void
      zoomed?(chart: any, options?: any): void
      scrolled?(chart: any, options?: any): void
      brushScrolled?(chart: any, options?: any): void
    }
    brush?: {
      enabled?: boolean
      autoScaleYaxis?: boolean
      target?: string
      targets?: string[]
    }
    id?: string
    group?: string
    locales?: ApexLocale[]
    defaultLocale?: string
    parentHeightOffset?: number
    redrawOnParentResize?: boolean
    redrawOnWindowResize?: boolean | Function
    sparkline?: {
      enabled?: boolean
    }
    stacked?: boolean
    stackType?: 'normal' | '100%'
    stackOnlyBar?: boolean;
    toolbar?: {
      show?: boolean
      offsetX?: number
      offsetY?: number
      tools?: {
        download?: boolean | string
        selection?: boolean | string
        zoom?: boolean | string
        zoomin?: boolean | string
        zoomout?: boolean | string
        pan?: boolean | string
        reset?: boolean | string
        customIcons?: {
          icon?: string
          title?: string
          index?: number
          class?: string
          click?(chart?: any, options?: any, e?: any): any
        }[]
      }
      export?: {
        csv?: {
          filename?: undefined | string
          columnDelimiter?: string
          headerCategory?: string
          headerValue?: string
          categoryFormatter?(value?: number): any
          valueFormatter?(value?: number): any
        },
        svg?: {
          filename?: undefined | string
        }
        png?: {
          filename?: undefined | string
        }
        width?: number
        scale?: number
      }
      autoSelected?: 'zoom' | 'selection' | 'pan'
    }
    zoom?: {
      enabled?: boolean
      type?: 'x' | 'y' | 'xy'
      autoScaleYaxis?: boolean
      allowMouseWheelZoom?: boolean
      zoomedArea?: {
        fill?: {
          color?: string
          opacity?: number
        }
        stroke?: {
          color?: string
          opacity?: number
          width?: number
        }
      }
    }
    selection?: {
      enabled?: boolean
      type?: string
      fill?: {
        color?: string
        opacity?: number
      }
      stroke?: {
        width?: number
        color?: string
        opacity?: number
        dashArray?: number
      }
      xaxis?: {
        min?: number
        max?: number
      }
      yaxis?: {
        min?: number
        max?: number
      }
    }
    animations?: {
      enabled?: boolean
      easing?: 'linear' | 'easein' | 'easeout' | 'easeinout'
      speed?: number
      animateGradually?: {
        enabled?: boolean
        delay?: number
      }
      dynamicAnimation?: {
        enabled?: boolean
        speed?: number
      }
    }
  }
  
  type ApexStates = {
    normal?: {
      filter?: {
        type?: string
        value?: number
      }
    }
    hover?: {
      filter?: {
        type?: string
        value?: number
      }
    }
    active?: {
      allowMultipleDataPointsSelection?: boolean
      filter?: {
        type?: string
        value?: number
      }
    }
  }
  
  /**
   * Chart Title options
   * See https://apexcharts.com/docs/options/title/
   */
  type ApexTitleSubtitle = {
    text?: string
    align?: 'left' | 'center' | 'right'
    margin?: number
    offsetX?: number
    offsetY?: number
    floating?: boolean
    style?: {
      fontSize?: string
      fontFamily?: string
      fontWeight?: string | number
      color?: string
    }
  }
  
  /**
   * Chart Series options.
   * Use ApexNonAxisChartSeries for Pie and Donut charts.
   * See https://apexcharts.com/docs/options/series/
   *
   * According to the documentation at
   * https://apexcharts.com/docs/series/
   * Section 1: data can be a list of single numbers
   * Sections 2.1 and 3.1: data can be a list of tuples of two numbers
   * Sections 2.2 and 3.2: data can be a list of objects where x is a string
   * and y is a number
   * And according to the demos, data can contain null.
   * https://apexcharts.com/javascript-chart-demos/line-charts/null-values/
   */
  type ApexAxisChartSeries = {
    name?: string
    type?: string
    color?: string
    group?: string
    hidden?: boolean
    zIndex?: number
    data:
      | (number | null)[]
      | {
          x: any;
          y: any;
          fill?: ApexFill;
          fillColor?: string;
          strokeColor?: string;
          meta?: any;
          goals?: any;
          barHeightOffset?: number;
          columnWidthOffset?: number;
        }[]
      | [number, number | null][]
      | [number, (number | null)[]][]
      | number[][];
  }[]
  
  type ApexNonAxisChartSeries = number[]
  
  /**
   * Options for the line drawn on line and area charts.
   * See https://apexcharts.com/docs/options/stroke/
   */
  type ApexStroke = {
    show?: boolean
    curve?: 'smooth' | 'straight' | 'stepline' | 'linestep' | 'monotoneCubic' | ('smooth' | 'straight' | 'stepline' | 'linestep' | 'monotoneCubic')[]
    lineCap?: 'butt' | 'square' | 'round'
    colors?: any[] | string[]
    width?: number | number[]
    dashArray?: number | number[]
    fill?: ApexFill
  }
  
  type ApexAnnotations = {
    yaxis?: YAxisAnnotations[]
    xaxis?: XAxisAnnotations[]
    points?: PointAnnotations[]
    texts?: TextAnnotations[]
    images?: ImageAnnotations[]
  }
  
  type AnnotationLabel = {
    borderColor?: string
    borderWidth?: number
    borderRadius?: number
    text?: string
    textAnchor?: string
    offsetX?: number
    offsetY?: number
    style?: AnnotationStyle
    position?: string
    orientation?: string
    mouseEnter?: Function
    mouseLeave?: Function
    click?: Function
  }
  
  type AnnotationStyle = {
    background?: string
    color?: string
    fontFamily?: string
    fontWeight?: string | number
    fontSize?: string
    cssClass?: string
    padding?: {
      left?: number
      right?: number
      top?: number
      bottom?: number
    }
  }
  
  type XAxisAnnotations = {
    id?: number | string
    x?: null | number | string
    x2?: null | number | string
    strokeDashArray?: number
    fillColor?: string
    borderColor?: string
    borderWidth?: number
    opacity?: number
    offsetX?: number
    offsetY?: number
    label?: AnnotationLabel
  }
  
  type YAxisAnnotations = {
    id?: number | string
    y?: null | number | string
    y2?: null | number | string
    strokeDashArray?: number
    fillColor?: string
    borderColor?: string
    borderWidth?: number
    opacity?: number
    offsetX?: number
    offsetY?: number
    width?: number | string
    yAxisIndex?: number
    label?: AnnotationLabel
  }
  
  type PointAnnotations = {
    id?: number | string
    x?: number | string
    y?: null | number
    yAxisIndex?: number
    seriesIndex?: number
    mouseEnter?: Function
    mouseLeave?: Function
    click?: Function
    marker?: {
      size?: number
      fillColor?: string
      strokeColor?: string
      strokeWidth?: number
      shape?: string
      offsetX?: number
      offsetY?: number
      cssClass?: string
    }
    label?: AnnotationLabel
    image?: {
      path?: string
      width?: number
      height?: number
      offsetX?: number
      offsetY?: number
    }
  }
  
  
  type TextAnnotations = {
    x?: number
    y?: number
    text?: string
    textAnchor?: string
    foreColor?: string
    fontSize?: string | number
    fontFamily?: undefined | string
    fontWeight?: string | number
    backgroundColor?: string
    borderColor?: string
    borderRadius?: number
    borderWidth?: number
    paddingLeft?: number
    paddingRight?: number
    paddingTop?: number
    paddingBottom?: number
  }
  
  type ImageAnnotations = {
    path?: string
    x?: number,
    y?: number,
    width?: number,
    height?: number,
  }
  
  /**
   * Options for localization.
   * See https://apexcharts.com/docs/options/chart/locales
   */
  type ApexLocale = {
    name?: string
    options?: {
      months?: string[]
      shortMonths?: string[]
      days?: string[]
      shortDays?: string[]
      toolbar?: {
        download?: string
        selection?: string
        selectionZoom?: string
        zoomIn?: string
        zoomOut?: string
        pan?: string
        reset?: string
        exportToSVG?: string
        exportToPNG?: string
        exportToCSV?: string
      }
    }
  }
  
  /**
   * PlotOptions for specifying chart-type-specific configuration.
   * See https://apexcharts.com/docs/options/plotoptions/bar/
   */
  type ApexPlotOptions = {
    line?: {
      isSlopeChart?: boolean
    }
    area?: {
      fillTo?: 'origin' | 'end'
    }
    bar?: {
      horizontal?: boolean
      columnWidth?: string | number;
      barHeight?: string | number;
      distributed?: boolean
      borderRadius?: number;
      borderRadiusApplication?: 'around' | 'end';
      borderRadiusWhenStacked?: 'all' | 'last';
      hideZeroBarsWhenGrouped?: boolean
      rangeBarOverlap?: boolean
      rangeBarGroupRows?: boolean
      isDumbbell?: boolean;
      dumbbellColors?: string[][];
      isFunnel?: boolean;
      isFunnel3d?: boolean;
      colors?: {
        ranges?: {
          from?: number
          to?: number
          color?: string
        }[]
        backgroundBarColors?: string[]
        backgroundBarOpacity?: number
        backgroundBarRadius?: number
      }
      dataLabels?: {
        maxItems?: number
        hideOverflowingLabels?: boolean
        position?: string
        orientation?: 'horizontal' | 'vertical',
        total?: {
          enabled?: boolean,
          formatter?(val?: string, opts?: any): string,
          offsetX?: number,
          offsetY?: number,
          style?: {
            color?: string,
            fontSize?: string,
            fontFamily?: string,
            fontWeight?: number | string
          }
        }
      }
    }
    bubble?: {
      zScaling?: boolean
      minBubbleRadius?: number
      maxBubbleRadius?: number
    }
    candlestick?: {
      colors?: {
        upward?: string
        downward?: string
      }
      wick?: {
        useFillColor?: boolean
      }
    }
    boxPlot?: {
      colors?: {
        upper?: string,
        lower?: string
      }
    }
    heatmap?: {
      radius?: number
      enableShades?: boolean
      shadeIntensity?: number
      reverseNegativeShade?: boolean
      distributed?: boolean
      useFillColorAsStroke?: boolean
      colorScale?: {
        ranges?: {
          from?: number
          to?: number
          color?: string
          foreColor?: string
          name?: string
        }[]
        inverse?: boolean
        min?: number
        max?: number
      }
    }
    treemap?: {
      enableShades?: boolean
      shadeIntensity?: number
      distributed?: boolean
      reverseNegativeShade?: boolean
      useFillColorAsStroke?: boolean
      dataLabels?: { format?: 'scale' | 'truncate' }
      borderRadius?: number
      colorScale?: {
        inverse?: boolean
        ranges?: {
          from?: number
          to?: number
          color?: string
          foreColor?: string
          name?: string
        }[];
        min?: number
        max?: number
      };
    }
    pie?: {
      startAngle?: number
      endAngle?: number
      customScale?: number
      offsetX?: number
      offsetY?: number
      expandOnClick?: boolean
      dataLabels?: {
        offset?: number
        minAngleToShowLabel?: number
      }
      donut?: {
        size?: string
        background?: string
        labels?: {
          show?: boolean
          name?: {
            show?: boolean
            fontSize?: string
            fontFamily?: string
            fontWeight?: string | number
            color?: string
            offsetY?: number,
            formatter?(val: string): string
          }
          value?: {
            show?: boolean
            fontSize?: string
            fontFamily?: string
            fontWeight?: string | number
            color?: string
            offsetY?: number
            formatter?(val: string): string
          }
          total?: {
            show?: boolean
            showAlways?: boolean
            fontFamily?: string
            fontWeight?: string | number
            fontSize?: string
            label?: string
            color?: string
            formatter?(w: any): string
          }
        }
      }
    }
    polarArea?: {
      rings?: {
        strokeWidth?: number
        strokeColor?: string
      }
      spokes?: {
        strokeWidth?: number;
        connectorColors?: string | string[];
      };
    }
    radar?: {
      size?: number
      offsetX?: number
      offsetY?: number
      polygons?: {
        strokeColors?: string | string[]
        strokeWidth?: string | string[]
        connectorColors?: string | string[]
        fill?: {
          colors?: string[]
        }
      }
    }
    radialBar?: {
      inverseOrder?: boolean
      startAngle?: number
      endAngle?: number
      offsetX?: number
      offsetY?: number
      hollow?: {
        margin?: number
        size?: string
        background?: string
        image?: string
        imageWidth?: number
        imageHeight?: number
        imageOffsetX?: number
        imageOffsetY?: number
        imageClipped?: boolean
        position?: 'front' | 'back'
        dropShadow?: ApexDropShadow
      }
      track?: {
        show?: boolean
        startAngle?: number
        endAngle?: number
        background?: string | string[]
        strokeWidth?: string
        opacity?: number
        margin?: number
        dropShadow?: ApexDropShadow
      }
      dataLabels?: {
        show?: boolean
        name?: {
          show?: boolean
          fontFamily?: string
          fontWeight?: string | number
          fontSize?: string
          color?: string
          offsetY?: number
        }
        value?: {
          show?: boolean
          fontFamily?: string
          fontSize?: string
          fontWeight?: string | number
          color?: string
          offsetY?: number
          formatter?(val: number): string
        }
        total?: {
          show?: boolean
          label?: string
          color?: string
          fontFamily?: string
          fontWeight?: string | number
          fontSize?: string
          formatter?(opts: any): string
        }
      }
      barLabels?: {
        enabled?: boolean
        offsetX?: number
        offsetY?: number
        useSeriesColors?: boolean
        fontFamily?: string
        fontWeight?: string | number
        fontSize?: string
        formatter?: (barName: string, opts?: any) => string
        onClick?: (barName: string, opts?: any) => void
      }
    }
  }
  
  type ApexColorStop = {
    offset: number
    color: string
    opacity: number
  }
  
  type ApexFill = {
    colors?: any[]
    opacity?: number | number[]
    type?: string | string[]
    gradient?: {
      shade?: string
      type?: string
      shadeIntensity?: number
      gradientToColors?: string[]
      inverseColors?: boolean
      opacityFrom?: number | number[]
      opacityTo?: number | number[]
      stops?: number[],
      colorStops?: ApexColorStop[][] | ApexColorStop[]
    }
    image?: {
      src?: string | string[]
      width?: number
      height?: number
    }
    pattern?: {
      style?: string | string[]
      width?: number
      height?: number
      strokeWidth?: number
    }
  }
  
  /**
   * Chart Legend configuration options.
   * See https://apexcharts.com/docs/options/legend/
   */
  type ApexLegend = {
    show?: boolean
    showForSingleSeries?: boolean
    showForNullSeries?: boolean
    showForZeroSeries?: boolean
    floating?: boolean
    inverseOrder?: boolean
    position?: 'top' | 'right' | 'bottom' | 'left'
    horizontalAlign?: 'left' | 'center' | 'right'
    fontSize?: string
    fontFamily?: string
    fontWeight?: string | number
    width?: number
    height?: number
    offsetX?: number
    offsetY?: number
    formatter?(legendName: string, opts?: any): string
    tooltipHoverFormatter?(legendName: string, opts?: any): string
    customLegendItems?: string[]
    labels?: {
      colors?: string | string[]
      useSeriesColors?: boolean
    }
    markers?: {
      size?: number
      strokeWidth?: number
      fillColors?: string[]
      shape?: ApexMarkerShape
      offsetX?: number
      offsetY?: number
      customHTML?(): any
      onClick?(): void
    }
    itemMargin?: {
      horizontal?: number
      vertical?: number
    }
    onItemClick?: {
      toggleDataSeries?: boolean
    }
    onItemHover?: {
      highlightDataSeries?: boolean
    }
  }
  
  type MarkerShapeOptions = "circle" | "square" | "rect" | "line" | 'cross' | 'plus' | 'star' | 'sparkle' | 'diamond' | 'triangle'
  
  type ApexMarkerShape = MarkerShapeOptions | MarkerShapeOptions[]
  
  type ApexDiscretePoint = {
    seriesIndex?: number
    dataPointIndex?: number
    fillColor?: string
    strokeColor?: string
    size?: number
    shape?: ApexMarkerShape
  }
  
  type ApexMarkers = {
    size?: number | number[]
    colors?: string | string[]
    strokeColors?: string | string[]
    strokeWidth?: number | number[]
    strokeOpacity?: number | number[]
    strokeDashArray?: number | number[]
    fillOpacity?: number | number[]
    discrete?: ApexDiscretePoint[]
    shape?: ApexMarkerShape
    offsetX?: number
    offsetY?: number
    showNullDataPoints?: boolean
    onClick?(e?: any): void
    onDblClick?(e?: any): void
    hover?: {
      size?: number
      sizeOffset?: number
    }
  }
  
  type ApexNoData = {
    text?: string
    align?: 'left' | 'right' | 'center'
    verticalAlign?: 'top' | 'middle' | 'bottom'
    offsetX?: number
    offsetY?: number
    style?: {
      color?: string
      fontSize?: string
      fontFamily?: string
    }
  }
  
  /**
   * Chart Datalabels options
   * See https://apexcharts.com/docs/options/datalabels/
   */
  type ApexDataLabels = {
    enabled?: boolean
    enabledOnSeries?: undefined | number[]
    textAnchor?: 'start' | 'middle' | 'end'
    distributed?: boolean
    offsetX?: number
    offsetY?: number
    style?: {
      fontSize?: string
      fontFamily?: string
      fontWeight?: string | number
      colors?: any[]
    }
    background?: {
      enabled?: boolean
      foreColor?: string
      borderRadius?: number
      padding?: number
      opacity?: number
      borderWidth?: number
      borderColor?: string
      dropShadow?: ApexDropShadow
    }
    dropShadow?: ApexDropShadow
    formatter?(val: string | number | number[], opts?: any): string | number
  }
  
  type ApexResponsive = {
    breakpoint?: number
    options?: any
  }
  
  type ApexTooltipY = {
    title?: {
      formatter?(seriesName: string): string
    }
    formatter?(val: number, opts?: any): string
  }
  
  /**
   * Chart Tooltip options
   * See https://apexcharts.com/docs/options/tooltip/
   */
  type ApexTooltip = {
    enabled?: boolean
    enabledOnSeries?: undefined | number[]
    shared?: boolean
    followCursor?: boolean
    intersect?: boolean
    inverseOrder?: boolean
    custom?: ((options: any) => any) | ((options: any) => any)[]
    fillSeriesColor?: boolean
    theme?: string
    cssClass?: string
    hideEmptySeries?: boolean
    style?: {
      fontSize?: string
      fontFamily?: string
    }
    onDatasetHover?: {
      highlightDataSeries?: boolean
    }
    x?: {
      show?: boolean
      format?: string
      formatter?(val: number, opts?: any): string
    }
    y?: ApexTooltipY | ApexTooltipY[]
    z?: {
      title?: string
      formatter?(val: number): string
    }
    marker?: {
      show?: boolean
      fillColors?: string[]
    }
    items?: {
      display?: string
    }
    fixed?: {
      enabled?: boolean
      position?: string // topRight; topLeft; bottomRight; bottomLeft
      offsetX?: number
      offsetY?: number
    }
  }
  
  /**
   * X Axis options
   * See https://apexcharts.com/docs/options/xaxis/
   */
  type ApexXAxis = {
    type?: 'category' | 'datetime' | 'numeric'
    categories?: any;
    overwriteCategories?: number[] | string[] | undefined;
    offsetX?: number;
    offsetY?: number;
    sorted?: boolean;
    labels?: {
      show?: boolean
      rotate?: number
      rotateAlways?: boolean
      hideOverlappingLabels?: boolean
      showDuplicates?: boolean
      trim?: boolean
      minHeight?: number
      maxHeight?: number
      style?: {
        colors?: string | string[]
        fontSize?: string
        fontFamily?: string
        fontWeight?: string | number
        cssClass?: string
      }
      offsetX?: number
      offsetY?: number
      format?: string
      formatter?(value: string, timestamp?: number, opts?:any): string | string[]
      datetimeUTC?: boolean
      datetimeFormatter?: {
        year?: string
        month?: string
        day?: string
        hour?: string
        minute?: string
        second?: string
      }
    }
    group?: {
        groups?: { title: string, cols: number }[],
        style?:  {
          colors?: string | string[]
          fontSize?: string
          fontFamily?: string
          fontWeight?: string | number
          cssClass?: string
        }
    }
    axisBorder?: {
      show?: boolean
      color?: string
      offsetX?: number
      offsetY?: number
      strokeWidth?: number
    }
    axisTicks?: {
      show?: boolean
      borderType?: string
      color?: string
      height?: number
      offsetX?: number
      offsetY?: number
    }
    tickPlacement?: string
    tickAmount?: number | 'dataPoints'
    stepSize?: number
    min?: number
    max?: number
    range?: number
    floating?: boolean
    decimalsInFloat?: number
    position?: string
    title?: {
      text?: string
      offsetX?: number
      offsetY?: number
      style?: {
        color?: string
        fontFamily?: string
        fontWeight?: string | number
        fontSize?: string
        cssClass?: string
      }
    }
    crosshairs?: {
      show?: boolean
      width?: number | string
      position?: string
      opacity?: number
      stroke?: {
        color?: string
        width?: number
        dashArray?: number
      }
      fill?: {
        type?: string
        color?: string
        gradient?: {
          colorFrom?: string
          colorTo?: string
          stops?: number[]
          opacityFrom?: number
          opacityTo?: number
        }
      }
      dropShadow?: ApexDropShadow
    }
    tooltip?: {
      enabled?: boolean
      offsetY?: number
      formatter?(value: string, opts?: object): string
      style?: {
        fontSize?: string
        fontFamily?: string
      }
    }
  }
  
  /**
   * Y Axis options
   * See https://apexcharts.com/docs/options/yaxis/
   */
  
  type ApexYAxis = {
    show?: boolean
    showAlways?: boolean
    showForNullSeries?: boolean
    seriesName?: string | string[]
    opposite?: boolean
    reversed?: boolean
    logarithmic?: boolean,
    logBase?: number,
    tickAmount?: number
    stepSize?: number
    forceNiceScale?: boolean
    min?: number | ((min: number) => number)
    max?: number | ((max: number) => number)
    floating?: boolean
    decimalsInFloat?: number
    labels?: {
      show?: boolean
      minWidth?: number
      maxWidth?: number
      offsetX?: number
      offsetY?: number
      rotate?: number
      align?: 'left' | 'center' | 'right'
      padding?: number
      style?: {
        colors?: string | string[]
        fontSize?: string
        fontWeight?: string | number
        fontFamily?: string
        cssClass?: string
      }
      formatter?(val: number, opts?: any): string | string[]
    }
    axisBorder?: {
      show?: boolean
      color?: string
      width?: number
      offsetX?: number
      offsetY?: number
    }
    axisTicks?: {
      show?: boolean
      color?: string
      width?: number
      offsetX?: number
      offsetY?: number
    }
    title?: {
      text?: string
      rotate?: number
      offsetX?: number
      offsetY?: number
      style?: {
        color?: string
        fontSize?: string
        fontWeight?: string | number
        fontFamily?: string
        cssClass?: string
      }
    }
    crosshairs?: {
      show?: boolean
      position?: string
      stroke?: {
        color?: string
        width?: number
        dashArray?: number
      }
    }
    tooltip?: {
      enabled?: boolean
      offsetX?: number
    }
  }
  
  type ApexForecastDataPoints = {
    count?: number
    fillOpacity?: number
    strokeWidth?: undefined | number
    dashArray?: number
  }
  
  /**
   * Plot X and Y grid options
   * See https://apexcharts.com/docs/options/grid/
   */
  type ApexGrid = {
    show?: boolean
    borderColor?: string
    strokeDashArray?: number
    position?: 'front' | 'back'
    xaxis?: {
      lines?: {
        show?: boolean
        offsetX?: number
        offsetY?: number
      }
    }
    yaxis?: {
      lines?: {
        show?: boolean
        offsetX?: number
        offsetY?: number
      }
    }
    row?: {
      colors?: string[]
      opacity?: number
    }
    column?: {
      colors?: string[]
      opacity?: number
    }
    padding?: {
      top?: number
      right?: number
      bottom?: number
      left?: number
    }
  }
  
  type ApexTheme = {
    mode?: 'light' | 'dark'
    palette?: string
    monochrome?: {
      enabled?: boolean
      color?: string
      shadeTo?: 'light' | 'dark'
      shadeIntensity?: number
    }
  }
  
  declare module 'apexcharts' {
    export = ApexCharts
  }

