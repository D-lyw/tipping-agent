Directory structure:
└── ckb-devrel-ckb-dogecoin-spv-contracts/
    ├── README.md
    ├── Cargo.toml
    ├── LICENSE
    ├── Makefile
    ├── checksums.txt
    ├── contracts/
    │   ├── can-update-without-ownership-lock/
    │   │   ├── README.md
    │   │   ├── Cargo.toml
    │   │   ├── Makefile
    │   │   ├── .gitignore
    │   │   └── src/
    │   │       ├── entry.rs
    │   │       ├── error.rs
    │   │       └── main.rs
    │   └── ckb-bitcoin-spv-type-lock/
    │       ├── README.md
    │       ├── Cargo.toml
    │       ├── Makefile
    │       ├── .gitignore
    │       └── src/
    │           ├── entry.rs
    │           ├── error.rs
    │           ├── main.rs
    │           ├── operations/
    │           │   ├── create.rs
    │           │   ├── destroy.rs
    │           │   ├── mod.rs
    │           │   ├── reorg.rs
    │           │   ├── reset.rs
    │           │   └── update.rs
    │           └── utilities/
    │               ├── mod.rs
    │               └── type_id.rs
    ├── deps/
    │   └── ckb-c-stdlib/
    │       ├── README.md
    │       ├── LICENSE
    │       ├── Makefile
    │       ├── blake2b.h
    │       ├── blake3.h
    │       ├── ckb_consts.h
    │       ├── ckb_dlfcn.h
    │       ├── ckb_exec.h
    │       ├── ckb_keccak256.h
    │       ├── ckb_streaming.h
    │       ├── ckb_swappable_signatures.h
    │       ├── ckb_syscall_apis.h
    │       ├── ckb_syscalls.h
    │       ├── ckb_type_id.h
    │       ├── ckb_utils.h
    │       ├── .git
    │       ├── .gitignore
    │       ├── .travis.yml
    │       ├── libc/
    │       │   ├── entry.h
    │       │   ├── limits.h
    │       │   ├── memory.h
    │       │   ├── stdarg.h
    │       │   ├── stdbool.h
    │       │   ├── stddef.h
    │       │   ├── stdint.h
    │       │   ├── stdio.h
    │       │   ├── stdlib.h
    │       │   ├── string.h
    │       │   ├── internal/
    │       │   │   ├── atomic.h
    │       │   │   └── types.h
    │       │   └── src/
    │       │       └── impl.c
    │       ├── molecule/
    │       │   ├── VERSION
    │       │   ├── blockchain-api2.h
    │       │   ├── blockchain.h
    │       │   ├── molecule2_reader.h
    │       │   ├── molecule_builder.h
    │       │   └── molecule_reader.h
    │       └── simulator/
    │           ├── README.md
    │           ├── blake2b_decl_only.h
    │           ├── blake2b_imp.c
    │           ├── cJSON.c
    │           ├── cJSON.h
    │           ├── ckb_syscall_sim.c
    │           ├── ckb_syscall_sim.h
    │           ├── ckb_syscall_simulator.c
    │           ├── ckb_syscall_simulator.h
    │           ├── molecule_decl_only.h
    │           └── rsa_sighash_all_usesim.c
    ├── scripts/
    │   └── find_clang
    ├── tests/
    │   ├── Cargo.toml
    │   ├── data/
    │   │   ├── README.md
    │   │   ├── LICENSE
    │   │   ├── .git
    │   │   ├── .gitignore
    │   │   └── main-chain/
    │   │       ├── blocks/
    │   │       │   ├── README.md
    │   │       │   └── continuous/
    │   │       │       ├── README.md
    │   │       │       ├── case-0830000_0830000/
    │   │       │       │   └── 0830000.bin
    │   │       │       └── case-0831328_0831335/
    │   │       │           ├── 0831328.bin
    │   │       │           ├── 0831329.bin
    │   │       │           ├── 0831330.bin
    │   │       │           ├── 0831331.bin
    │   │       │           ├── 0831332.bin
    │   │       │           ├── 0831333.bin
    │   │       │           ├── 0831334.bin
    │   │       │           └── 0831335.bin
    │   │       ├── chainwork/
    │   │       │   ├── README.md
    │   │       │   ├── 0000000.bin
    │   │       │   ├── 0002015.bin
    │   │       │   ├── 0002016.bin
    │   │       │   ├── 0004031.bin
    │   │       │   ├── 0004032.bin
    │   │       │   ├── 0006047.bin
    │   │       │   ├── 0006048.bin
    │   │       │   ├── 0008063.bin
    │   │       │   ├── 0008064.bin
    │   │       │   ├── 0010079.bin
    │   │       │   ├── 0010080.bin
    │   │       │   ├── 0012095.bin
    │   │       │   ├── 0012096.bin
    │   │       │   ├── 0014111.bin
    │   │       │   ├── 0014112.bin
    │   │       │   ├── 0016127.bin
    │   │       │   ├── 0016128.bin
    │   │       │   ├── 0018143.bin
    │   │       │   ├── 0018144.bin
    │   │       │   ├── 0020159.bin
    │   │       │   ├── 0020160.bin
    │   │       │   ├── 0022175.bin
    │   │       │   ├── 0022176.bin
    │   │       │   ├── 0024191.bin
    │   │       │   ├── 0024192.bin
    │   │       │   ├── 0026207.bin
    │   │       │   ├── 0026208.bin
    │   │       │   ├── 0028223.bin
    │   │       │   ├── 0028224.bin
    │   │       │   ├── 0030239.bin
    │   │       │   ├── 0030240.bin
    │   │       │   ├── 0032255.bin
    │   │       │   ├── 0032256.bin
    │   │       │   ├── 0034271.bin
    │   │       │   ├── 0034272.bin
    │   │       │   ├── 0036287.bin
    │   │       │   ├── 0036288.bin
    │   │       │   ├── 0038303.bin
    │   │       │   ├── 0038304.bin
    │   │       │   ├── 0040319.bin
    │   │       │   ├── 0040320.bin
    │   │       │   ├── 0042335.bin
    │   │       │   ├── 0042336.bin
    │   │       │   ├── 0044351.bin
    │   │       │   ├── 0044352.bin
    │   │       │   ├── 0046367.bin
    │   │       │   ├── 0046368.bin
    │   │       │   ├── 0048383.bin
    │   │       │   ├── 0048384.bin
    │   │       │   ├── 0050399.bin
    │   │       │   ├── 0050400.bin
    │   │       │   ├── 0052415.bin
    │   │       │   ├── 0052416.bin
    │   │       │   ├── 0054431.bin
    │   │       │   ├── 0054432.bin
    │   │       │   ├── 0056447.bin
    │   │       │   ├── 0056448.bin
    │   │       │   ├── 0058463.bin
    │   │       │   ├── 0058464.bin
    │   │       │   ├── 0060479.bin
    │   │       │   ├── 0060480.bin
    │   │       │   ├── 0062495.bin
    │   │       │   ├── 0062496.bin
    │   │       │   ├── 0064511.bin
    │   │       │   ├── 0064512.bin
    │   │       │   ├── 0066527.bin
    │   │       │   ├── 0066528.bin
    │   │       │   ├── 0068543.bin
    │   │       │   ├── 0068544.bin
    │   │       │   ├── 0070559.bin
    │   │       │   ├── 0070560.bin
    │   │       │   ├── 0072575.bin
    │   │       │   ├── 0072576.bin
    │   │       │   ├── 0074591.bin
    │   │       │   ├── 0074592.bin
    │   │       │   ├── 0076607.bin
    │   │       │   ├── 0076608.bin
    │   │       │   ├── 0078623.bin
    │   │       │   ├── 0078624.bin
    │   │       │   ├── 0080639.bin
    │   │       │   ├── 0080640.bin
    │   │       │   ├── 0082655.bin
    │   │       │   ├── 0082656.bin
    │   │       │   ├── 0084671.bin
    │   │       │   ├── 0084672.bin
    │   │       │   ├── 0086687.bin
    │   │       │   ├── 0086688.bin
    │   │       │   ├── 0088703.bin
    │   │       │   ├── 0088704.bin
    │   │       │   ├── 0090719.bin
    │   │       │   ├── 0090720.bin
    │   │       │   ├── 0092735.bin
    │   │       │   ├── 0092736.bin
    │   │       │   ├── 0094751.bin
    │   │       │   ├── 0094752.bin
    │   │       │   ├── 0096767.bin
    │   │       │   ├── 0096768.bin
    │   │       │   ├── 0098783.bin
    │   │       │   ├── 0098784.bin
    │   │       │   ├── 0100799.bin
    │   │       │   ├── 0100800.bin
    │   │       │   ├── 0102815.bin
    │   │       │   ├── 0102816.bin
    │   │       │   ├── 0104831.bin
    │   │       │   ├── 0104832.bin
    │   │       │   ├── 0106847.bin
    │   │       │   ├── 0106848.bin
    │   │       │   ├── 0108863.bin
    │   │       │   ├── 0108864.bin
    │   │       │   ├── 0110879.bin
    │   │       │   ├── 0110880.bin
    │   │       │   ├── 0112895.bin
    │   │       │   ├── 0112896.bin
    │   │       │   ├── 0114911.bin
    │   │       │   ├── 0114912.bin
    │   │       │   ├── 0116927.bin
    │   │       │   ├── 0116928.bin
    │   │       │   ├── 0118943.bin
    │   │       │   ├── 0118944.bin
    │   │       │   ├── 0120959.bin
    │   │       │   ├── 0120960.bin
    │   │       │   ├── 0122975.bin
    │   │       │   ├── 0122976.bin
    │   │       │   ├── 0124991.bin
    │   │       │   ├── 0124992.bin
    │   │       │   ├── 0127007.bin
    │   │       │   ├── 0127008.bin
    │   │       │   ├── 0129023.bin
    │   │       │   ├── 0129024.bin
    │   │       │   ├── 0131039.bin
    │   │       │   ├── 0131040.bin
    │   │       │   ├── 0133055.bin
    │   │       │   ├── 0133056.bin
    │   │       │   ├── 0135071.bin
    │   │       │   ├── 0135072.bin
    │   │       │   ├── 0137087.bin
    │   │       │   ├── 0137088.bin
    │   │       │   ├── 0139103.bin
    │   │       │   ├── 0139104.bin
    │   │       │   ├── 0141119.bin
    │   │       │   ├── 0141120.bin
    │   │       │   ├── 0143135.bin
    │   │       │   ├── 0143136.bin
    │   │       │   ├── 0145151.bin
    │   │       │   ├── 0145152.bin
    │   │       │   ├── 0147167.bin
    │   │       │   ├── 0147168.bin
    │   │       │   ├── 0149183.bin
    │   │       │   ├── 0149184.bin
    │   │       │   ├── 0151199.bin
    │   │       │   ├── 0151200.bin
    │   │       │   ├── 0153215.bin
    │   │       │   ├── 0153216.bin
    │   │       │   ├── 0155231.bin
    │   │       │   ├── 0155232.bin
    │   │       │   ├── 0157247.bin
    │   │       │   ├── 0157248.bin
    │   │       │   ├── 0159263.bin
    │   │       │   ├── 0159264.bin
    │   │       │   ├── 0161279.bin
    │   │       │   ├── 0161280.bin
    │   │       │   ├── 0163295.bin
    │   │       │   ├── 0163296.bin
    │   │       │   ├── 0165311.bin
    │   │       │   ├── 0165312.bin
    │   │       │   ├── 0167327.bin
    │   │       │   ├── 0167328.bin
    │   │       │   ├── 0169343.bin
    │   │       │   ├── 0169344.bin
    │   │       │   ├── 0171359.bin
    │   │       │   ├── 0171360.bin
    │   │       │   ├── 0173375.bin
    │   │       │   ├── 0173376.bin
    │   │       │   ├── 0175391.bin
    │   │       │   ├── 0175392.bin
    │   │       │   ├── 0177407.bin
    │   │       │   ├── 0177408.bin
    │   │       │   ├── 0179423.bin
    │   │       │   ├── 0179424.bin
    │   │       │   ├── 0181439.bin
    │   │       │   ├── 0181440.bin
    │   │       │   ├── 0183455.bin
    │   │       │   ├── 0183456.bin
    │   │       │   ├── 0185471.bin
    │   │       │   ├── 0185472.bin
    │   │       │   ├── 0187487.bin
    │   │       │   ├── 0187488.bin
    │   │       │   ├── 0189503.bin
    │   │       │   ├── 0189504.bin
    │   │       │   ├── 0191519.bin
    │   │       │   ├── 0191520.bin
    │   │       │   ├── 0193535.bin
    │   │       │   ├── 0193536.bin
    │   │       │   ├── 0195551.bin
    │   │       │   ├── 0195552.bin
    │   │       │   ├── 0197567.bin
    │   │       │   ├── 0197568.bin
    │   │       │   ├── 0199583.bin
    │   │       │   ├── 0199584.bin
    │   │       │   ├── 0201599.bin
    │   │       │   ├── 0201600.bin
    │   │       │   ├── 0203615.bin
    │   │       │   ├── 0203616.bin
    │   │       │   ├── 0205631.bin
    │   │       │   ├── 0205632.bin
    │   │       │   ├── 0207647.bin
    │   │       │   ├── 0207648.bin
    │   │       │   ├── 0209663.bin
    │   │       │   ├── 0209664.bin
    │   │       │   ├── 0211679.bin
    │   │       │   ├── 0211680.bin
    │   │       │   ├── 0213695.bin
    │   │       │   ├── 0213696.bin
    │   │       │   ├── 0215711.bin
    │   │       │   ├── 0215712.bin
    │   │       │   ├── 0217727.bin
    │   │       │   ├── 0217728.bin
    │   │       │   ├── 0219743.bin
    │   │       │   ├── 0219744.bin
    │   │       │   ├── 0221759.bin
    │   │       │   ├── 0221760.bin
    │   │       │   ├── 0223775.bin
    │   │       │   ├── 0223776.bin
    │   │       │   ├── 0225791.bin
    │   │       │   ├── 0225792.bin
    │   │       │   ├── 0227807.bin
    │   │       │   ├── 0227808.bin
    │   │       │   ├── 0229823.bin
    │   │       │   ├── 0229824.bin
    │   │       │   ├── 0231839.bin
    │   │       │   ├── 0231840.bin
    │   │       │   ├── 0233855.bin
    │   │       │   ├── 0233856.bin
    │   │       │   ├── 0235871.bin
    │   │       │   ├── 0235872.bin
    │   │       │   ├── 0237887.bin
    │   │       │   ├── 0237888.bin
    │   │       │   ├── 0239903.bin
    │   │       │   ├── 0239904.bin
    │   │       │   ├── 0241919.bin
    │   │       │   ├── 0241920.bin
    │   │       │   ├── 0243935.bin
    │   │       │   ├── 0243936.bin
    │   │       │   ├── 0245951.bin
    │   │       │   ├── 0245952.bin
    │   │       │   ├── 0247967.bin
    │   │       │   ├── 0247968.bin
    │   │       │   ├── 0249983.bin
    │   │       │   ├── 0249984.bin
    │   │       │   ├── 0251999.bin
    │   │       │   ├── 0252000.bin
    │   │       │   ├── 0254015.bin
    │   │       │   ├── 0254016.bin
    │   │       │   ├── 0256031.bin
    │   │       │   ├── 0256032.bin
    │   │       │   ├── 0258047.bin
    │   │       │   ├── 0258048.bin
    │   │       │   ├── 0260063.bin
    │   │       │   ├── 0260064.bin
    │   │       │   ├── 0262079.bin
    │   │       │   ├── 0262080.bin
    │   │       │   ├── 0264095.bin
    │   │       │   ├── 0264096.bin
    │   │       │   ├── 0266111.bin
    │   │       │   ├── 0266112.bin
    │   │       │   ├── 0268127.bin
    │   │       │   ├── 0268128.bin
    │   │       │   ├── 0270143.bin
    │   │       │   ├── 0270144.bin
    │   │       │   ├── 0272159.bin
    │   │       │   ├── 0272160.bin
    │   │       │   ├── 0274175.bin
    │   │       │   ├── 0274176.bin
    │   │       │   ├── 0276191.bin
    │   │       │   ├── 0276192.bin
    │   │       │   ├── 0278207.bin
    │   │       │   ├── 0278208.bin
    │   │       │   ├── 0280223.bin
    │   │       │   ├── 0280224.bin
    │   │       │   ├── 0282239.bin
    │   │       │   ├── 0282240.bin
    │   │       │   ├── 0284255.bin
    │   │       │   ├── 0284256.bin
    │   │       │   ├── 0286271.bin
    │   │       │   ├── 0286272.bin
    │   │       │   ├── 0288287.bin
    │   │       │   ├── 0288288.bin
    │   │       │   ├── 0290303.bin
    │   │       │   ├── 0290304.bin
    │   │       │   ├── 0292319.bin
    │   │       │   ├── 0292320.bin
    │   │       │   ├── 0294335.bin
    │   │       │   ├── 0294336.bin
    │   │       │   ├── 0296351.bin
    │   │       │   ├── 0296352.bin
    │   │       │   ├── 0298367.bin
    │   │       │   ├── 0298368.bin
    │   │       │   ├── 0300383.bin
    │   │       │   ├── 0300384.bin
    │   │       │   ├── 0302399.bin
    │   │       │   ├── 0302400.bin
    │   │       │   ├── 0304415.bin
    │   │       │   ├── 0304416.bin
    │   │       │   ├── 0306431.bin
    │   │       │   ├── 0306432.bin
    │   │       │   ├── 0308447.bin
    │   │       │   ├── 0308448.bin
    │   │       │   ├── 0310463.bin
    │   │       │   ├── 0310464.bin
    │   │       │   ├── 0312479.bin
    │   │       │   ├── 0312480.bin
    │   │       │   ├── 0314495.bin
    │   │       │   ├── 0314496.bin
    │   │       │   ├── 0316511.bin
    │   │       │   ├── 0316512.bin
    │   │       │   ├── 0318527.bin
    │   │       │   ├── 0318528.bin
    │   │       │   ├── 0320543.bin
    │   │       │   ├── 0320544.bin
    │   │       │   ├── 0322559.bin
    │   │       │   ├── 0322560.bin
    │   │       │   ├── 0324575.bin
    │   │       │   ├── 0324576.bin
    │   │       │   ├── 0326591.bin
    │   │       │   ├── 0326592.bin
    │   │       │   ├── 0328607.bin
    │   │       │   ├── 0328608.bin
    │   │       │   ├── 0330623.bin
    │   │       │   ├── 0330624.bin
    │   │       │   ├── 0332639.bin
    │   │       │   ├── 0332640.bin
    │   │       │   ├── 0334655.bin
    │   │       │   ├── 0334656.bin
    │   │       │   ├── 0336671.bin
    │   │       │   ├── 0336672.bin
    │   │       │   ├── 0338687.bin
    │   │       │   ├── 0338688.bin
    │   │       │   ├── 0340703.bin
    │   │       │   ├── 0340704.bin
    │   │       │   ├── 0342719.bin
    │   │       │   ├── 0342720.bin
    │   │       │   ├── 0344735.bin
    │   │       │   ├── 0344736.bin
    │   │       │   ├── 0346751.bin
    │   │       │   ├── 0346752.bin
    │   │       │   ├── 0348767.bin
    │   │       │   ├── 0348768.bin
    │   │       │   ├── 0350783.bin
    │   │       │   ├── 0350784.bin
    │   │       │   ├── 0352799.bin
    │   │       │   ├── 0352800.bin
    │   │       │   ├── 0354815.bin
    │   │       │   ├── 0354816.bin
    │   │       │   ├── 0356831.bin
    │   │       │   ├── 0356832.bin
    │   │       │   ├── 0358847.bin
    │   │       │   ├── 0358848.bin
    │   │       │   ├── 0360863.bin
    │   │       │   ├── 0360864.bin
    │   │       │   ├── 0362879.bin
    │   │       │   ├── 0362880.bin
    │   │       │   ├── 0364895.bin
    │   │       │   ├── 0364896.bin
    │   │       │   ├── 0366911.bin
    │   │       │   ├── 0366912.bin
    │   │       │   ├── 0368927.bin
    │   │       │   ├── 0368928.bin
    │   │       │   ├── 0370943.bin
    │   │       │   ├── 0370944.bin
    │   │       │   ├── 0372959.bin
    │   │       │   ├── 0372960.bin
    │   │       │   ├── 0374975.bin
    │   │       │   ├── 0374976.bin
    │   │       │   ├── 0376991.bin
    │   │       │   ├── 0376992.bin
    │   │       │   ├── 0379007.bin
    │   │       │   ├── 0379008.bin
    │   │       │   ├── 0381023.bin
    │   │       │   ├── 0381024.bin
    │   │       │   ├── 0383039.bin
    │   │       │   ├── 0383040.bin
    │   │       │   ├── 0385055.bin
    │   │       │   ├── 0385056.bin
    │   │       │   ├── 0387071.bin
    │   │       │   ├── 0387072.bin
    │   │       │   ├── 0389087.bin
    │   │       │   ├── 0389088.bin
    │   │       │   ├── 0391103.bin
    │   │       │   ├── 0391104.bin
    │   │       │   ├── 0393119.bin
    │   │       │   ├── 0393120.bin
    │   │       │   ├── 0395135.bin
    │   │       │   ├── 0395136.bin
    │   │       │   ├── 0397151.bin
    │   │       │   ├── 0397152.bin
    │   │       │   ├── 0399167.bin
    │   │       │   ├── 0399168.bin
    │   │       │   ├── 0401183.bin
    │   │       │   ├── 0401184.bin
    │   │       │   ├── 0403199.bin
    │   │       │   ├── 0403200.bin
    │   │       │   ├── 0405215.bin
    │   │       │   ├── 0405216.bin
    │   │       │   ├── 0407231.bin
    │   │       │   ├── 0407232.bin
    │   │       │   ├── 0409247.bin
    │   │       │   ├── 0409248.bin
    │   │       │   ├── 0411263.bin
    │   │       │   ├── 0411264.bin
    │   │       │   ├── 0413279.bin
    │   │       │   ├── 0413280.bin
    │   │       │   ├── 0415295.bin
    │   │       │   ├── 0415296.bin
    │   │       │   ├── 0417311.bin
    │   │       │   ├── 0417312.bin
    │   │       │   ├── 0419327.bin
    │   │       │   ├── 0419328.bin
    │   │       │   ├── 0421343.bin
    │   │       │   ├── 0421344.bin
    │   │       │   ├── 0423359.bin
    │   │       │   ├── 0423360.bin
    │   │       │   ├── 0425375.bin
    │   │       │   ├── 0425376.bin
    │   │       │   ├── 0427391.bin
    │   │       │   ├── 0427392.bin
    │   │       │   ├── 0429407.bin
    │   │       │   ├── 0429408.bin
    │   │       │   ├── 0431423.bin
    │   │       │   ├── 0431424.bin
    │   │       │   ├── 0433439.bin
    │   │       │   ├── 0433440.bin
    │   │       │   ├── 0435455.bin
    │   │       │   ├── 0435456.bin
    │   │       │   ├── 0437471.bin
    │   │       │   ├── 0437472.bin
    │   │       │   ├── 0439487.bin
    │   │       │   ├── 0439488.bin
    │   │       │   ├── 0441503.bin
    │   │       │   ├── 0441504.bin
    │   │       │   ├── 0443519.bin
    │   │       │   ├── 0443520.bin
    │   │       │   ├── 0445535.bin
    │   │       │   ├── 0445536.bin
    │   │       │   ├── 0447551.bin
    │   │       │   ├── 0447552.bin
    │   │       │   ├── 0449567.bin
    │   │       │   ├── 0449568.bin
    │   │       │   ├── 0451583.bin
    │   │       │   ├── 0451584.bin
    │   │       │   ├── 0453599.bin
    │   │       │   ├── 0453600.bin
    │   │       │   ├── 0455615.bin
    │   │       │   ├── 0455616.bin
    │   │       │   ├── 0457631.bin
    │   │       │   ├── 0457632.bin
    │   │       │   ├── 0459647.bin
    │   │       │   ├── 0459648.bin
    │   │       │   ├── 0461663.bin
    │   │       │   ├── 0461664.bin
    │   │       │   ├── 0463679.bin
    │   │       │   ├── 0463680.bin
    │   │       │   ├── 0465695.bin
    │   │       │   ├── 0465696.bin
    │   │       │   ├── 0467711.bin
    │   │       │   ├── 0467712.bin
    │   │       │   ├── 0469727.bin
    │   │       │   ├── 0469728.bin
    │   │       │   ├── 0471743.bin
    │   │       │   ├── 0471744.bin
    │   │       │   ├── 0473759.bin
    │   │       │   ├── 0473760.bin
    │   │       │   ├── 0475775.bin
    │   │       │   ├── 0475776.bin
    │   │       │   ├── 0477791.bin
    │   │       │   ├── 0477792.bin
    │   │       │   ├── 0479807.bin
    │   │       │   ├── 0479808.bin
    │   │       │   ├── 0481823.bin
    │   │       │   ├── 0481824.bin
    │   │       │   ├── 0483839.bin
    │   │       │   ├── 0483840.bin
    │   │       │   ├── 0485855.bin
    │   │       │   ├── 0485856.bin
    │   │       │   ├── 0487871.bin
    │   │       │   ├── 0487872.bin
    │   │       │   ├── 0489887.bin
    │   │       │   ├── 0489888.bin
    │   │       │   ├── 0491903.bin
    │   │       │   ├── 0491904.bin
    │   │       │   ├── 0493919.bin
    │   │       │   ├── 0493920.bin
    │   │       │   ├── 0495935.bin
    │   │       │   ├── 0495936.bin
    │   │       │   ├── 0497951.bin
    │   │       │   ├── 0497952.bin
    │   │       │   ├── 0499967.bin
    │   │       │   ├── 0499968.bin
    │   │       │   ├── 0501983.bin
    │   │       │   ├── 0501984.bin
    │   │       │   ├── 0503999.bin
    │   │       │   ├── 0504000.bin
    │   │       │   ├── 0506015.bin
    │   │       │   ├── 0506016.bin
    │   │       │   ├── 0508031.bin
    │   │       │   ├── 0508032.bin
    │   │       │   ├── 0510047.bin
    │   │       │   ├── 0510048.bin
    │   │       │   ├── 0512063.bin
    │   │       │   ├── 0512064.bin
    │   │       │   ├── 0514079.bin
    │   │       │   ├── 0514080.bin
    │   │       │   ├── 0516095.bin
    │   │       │   ├── 0516096.bin
    │   │       │   ├── 0518111.bin
    │   │       │   ├── 0518112.bin
    │   │       │   ├── 0520127.bin
    │   │       │   ├── 0520128.bin
    │   │       │   ├── 0522143.bin
    │   │       │   ├── 0522144.bin
    │   │       │   ├── 0524159.bin
    │   │       │   ├── 0524160.bin
    │   │       │   ├── 0526175.bin
    │   │       │   ├── 0526176.bin
    │   │       │   ├── 0528191.bin
    │   │       │   ├── 0528192.bin
    │   │       │   ├── 0530207.bin
    │   │       │   ├── 0530208.bin
    │   │       │   ├── 0532223.bin
    │   │       │   ├── 0532224.bin
    │   │       │   ├── 0534239.bin
    │   │       │   ├── 0534240.bin
    │   │       │   ├── 0536255.bin
    │   │       │   ├── 0536256.bin
    │   │       │   ├── 0538271.bin
    │   │       │   ├── 0538272.bin
    │   │       │   ├── 0540287.bin
    │   │       │   ├── 0540288.bin
    │   │       │   ├── 0542303.bin
    │   │       │   ├── 0542304.bin
    │   │       │   ├── 0544319.bin
    │   │       │   ├── 0544320.bin
    │   │       │   ├── 0546335.bin
    │   │       │   ├── 0546336.bin
    │   │       │   ├── 0548351.bin
    │   │       │   ├── 0548352.bin
    │   │       │   ├── 0550367.bin
    │   │       │   ├── 0550368.bin
    │   │       │   ├── 0552383.bin
    │   │       │   ├── 0552384.bin
    │   │       │   ├── 0554399.bin
    │   │       │   ├── 0554400.bin
    │   │       │   ├── 0556415.bin
    │   │       │   ├── 0556416.bin
    │   │       │   ├── 0558431.bin
    │   │       │   ├── 0558432.bin
    │   │       │   ├── 0560447.bin
    │   │       │   ├── 0560448.bin
    │   │       │   ├── 0562463.bin
    │   │       │   ├── 0562464.bin
    │   │       │   ├── 0564479.bin
    │   │       │   ├── 0564480.bin
    │   │       │   ├── 0566495.bin
    │   │       │   ├── 0566496.bin
    │   │       │   ├── 0568511.bin
    │   │       │   ├── 0568512.bin
    │   │       │   ├── 0570527.bin
    │   │       │   ├── 0570528.bin
    │   │       │   ├── 0572543.bin
    │   │       │   ├── 0572544.bin
    │   │       │   ├── 0574559.bin
    │   │       │   ├── 0574560.bin
    │   │       │   ├── 0576575.bin
    │   │       │   ├── 0576576.bin
    │   │       │   ├── 0578591.bin
    │   │       │   ├── 0578592.bin
    │   │       │   ├── 0580607.bin
    │   │       │   ├── 0580608.bin
    │   │       │   ├── 0582623.bin
    │   │       │   ├── 0582624.bin
    │   │       │   ├── 0584639.bin
    │   │       │   ├── 0584640.bin
    │   │       │   ├── 0586655.bin
    │   │       │   ├── 0586656.bin
    │   │       │   ├── 0588671.bin
    │   │       │   ├── 0588672.bin
    │   │       │   ├── 0590687.bin
    │   │       │   ├── 0590688.bin
    │   │       │   ├── 0592703.bin
    │   │       │   ├── 0592704.bin
    │   │       │   ├── 0594719.bin
    │   │       │   ├── 0594720.bin
    │   │       │   ├── 0596735.bin
    │   │       │   ├── 0596736.bin
    │   │       │   ├── 0598751.bin
    │   │       │   ├── 0598752.bin
    │   │       │   ├── 0600767.bin
    │   │       │   ├── 0600768.bin
    │   │       │   ├── 0602783.bin
    │   │       │   ├── 0602784.bin
    │   │       │   ├── 0604799.bin
    │   │       │   ├── 0604800.bin
    │   │       │   ├── 0606815.bin
    │   │       │   ├── 0606816.bin
    │   │       │   ├── 0608831.bin
    │   │       │   ├── 0608832.bin
    │   │       │   ├── 0610847.bin
    │   │       │   ├── 0610848.bin
    │   │       │   ├── 0612863.bin
    │   │       │   ├── 0612864.bin
    │   │       │   ├── 0614879.bin
    │   │       │   ├── 0614880.bin
    │   │       │   ├── 0616895.bin
    │   │       │   ├── 0616896.bin
    │   │       │   ├── 0618911.bin
    │   │       │   ├── 0618912.bin
    │   │       │   ├── 0620927.bin
    │   │       │   ├── 0620928.bin
    │   │       │   ├── 0622943.bin
    │   │       │   ├── 0622944.bin
    │   │       │   ├── 0624959.bin
    │   │       │   ├── 0624960.bin
    │   │       │   ├── 0626975.bin
    │   │       │   ├── 0626976.bin
    │   │       │   ├── 0628991.bin
    │   │       │   ├── 0628992.bin
    │   │       │   ├── 0631007.bin
    │   │       │   ├── 0631008.bin
    │   │       │   ├── 0633023.bin
    │   │       │   ├── 0633024.bin
    │   │       │   ├── 0635039.bin
    │   │       │   ├── 0635040.bin
    │   │       │   ├── 0637055.bin
    │   │       │   ├── 0637056.bin
    │   │       │   ├── 0639071.bin
    │   │       │   ├── 0639072.bin
    │   │       │   ├── 0641087.bin
    │   │       │   ├── 0641088.bin
    │   │       │   ├── 0643103.bin
    │   │       │   ├── 0643104.bin
    │   │       │   ├── 0645119.bin
    │   │       │   ├── 0645120.bin
    │   │       │   ├── 0647135.bin
    │   │       │   ├── 0647136.bin
    │   │       │   ├── 0649151.bin
    │   │       │   ├── 0649152.bin
    │   │       │   ├── 0651167.bin
    │   │       │   ├── 0651168.bin
    │   │       │   ├── 0653183.bin
    │   │       │   ├── 0653184.bin
    │   │       │   ├── 0655199.bin
    │   │       │   ├── 0655200.bin
    │   │       │   ├── 0657215.bin
    │   │       │   ├── 0657216.bin
    │   │       │   ├── 0659231.bin
    │   │       │   ├── 0659232.bin
    │   │       │   ├── 0661247.bin
    │   │       │   ├── 0661248.bin
    │   │       │   ├── 0663263.bin
    │   │       │   ├── 0663264.bin
    │   │       │   ├── 0665279.bin
    │   │       │   ├── 0665280.bin
    │   │       │   ├── 0667295.bin
    │   │       │   ├── 0667296.bin
    │   │       │   ├── 0669311.bin
    │   │       │   ├── 0669312.bin
    │   │       │   ├── 0671327.bin
    │   │       │   ├── 0671328.bin
    │   │       │   ├── 0673343.bin
    │   │       │   ├── 0673344.bin
    │   │       │   ├── 0675359.bin
    │   │       │   ├── 0675360.bin
    │   │       │   ├── 0677375.bin
    │   │       │   ├── 0677376.bin
    │   │       │   ├── 0679391.bin
    │   │       │   ├── 0679392.bin
    │   │       │   ├── 0681407.bin
    │   │       │   ├── 0681408.bin
    │   │       │   ├── 0683423.bin
    │   │       │   ├── 0683424.bin
    │   │       │   ├── 0685439.bin
    │   │       │   ├── 0685440.bin
    │   │       │   ├── 0687455.bin
    │   │       │   ├── 0687456.bin
    │   │       │   ├── 0689471.bin
    │   │       │   ├── 0689472.bin
    │   │       │   ├── 0691487.bin
    │   │       │   ├── 0691488.bin
    │   │       │   ├── 0693503.bin
    │   │       │   ├── 0693504.bin
    │   │       │   ├── 0695519.bin
    │   │       │   ├── 0695520.bin
    │   │       │   ├── 0697535.bin
    │   │       │   ├── 0697536.bin
    │   │       │   ├── 0699551.bin
    │   │       │   ├── 0699552.bin
    │   │       │   ├── 0701567.bin
    │   │       │   ├── 0701568.bin
    │   │       │   ├── 0703583.bin
    │   │       │   ├── 0703584.bin
    │   │       │   ├── 0705599.bin
    │   │       │   ├── 0705600.bin
    │   │       │   ├── 0707615.bin
    │   │       │   ├── 0707616.bin
    │   │       │   ├── 0709631.bin
    │   │       │   ├── 0709632.bin
    │   │       │   ├── 0711647.bin
    │   │       │   ├── 0711648.bin
    │   │       │   ├── 0713663.bin
    │   │       │   ├── 0713664.bin
    │   │       │   ├── 0715679.bin
    │   │       │   ├── 0715680.bin
    │   │       │   ├── 0717695.bin
    │   │       │   ├── 0717696.bin
    │   │       │   ├── 0719711.bin
    │   │       │   ├── 0719712.bin
    │   │       │   ├── 0721727.bin
    │   │       │   ├── 0721728.bin
    │   │       │   ├── 0723743.bin
    │   │       │   ├── 0723744.bin
    │   │       │   ├── 0725759.bin
    │   │       │   ├── 0725760.bin
    │   │       │   ├── 0727775.bin
    │   │       │   ├── 0727776.bin
    │   │       │   ├── 0729791.bin
    │   │       │   ├── 0729792.bin
    │   │       │   ├── 0731807.bin
    │   │       │   ├── 0731808.bin
    │   │       │   ├── 0733823.bin
    │   │       │   ├── 0733824.bin
    │   │       │   ├── 0735839.bin
    │   │       │   ├── 0735840.bin
    │   │       │   ├── 0737855.bin
    │   │       │   ├── 0737856.bin
    │   │       │   ├── 0739871.bin
    │   │       │   ├── 0739872.bin
    │   │       │   ├── 0741887.bin
    │   │       │   ├── 0741888.bin
    │   │       │   ├── 0743903.bin
    │   │       │   ├── 0743904.bin
    │   │       │   ├── 0745919.bin
    │   │       │   ├── 0745920.bin
    │   │       │   ├── 0747935.bin
    │   │       │   ├── 0747936.bin
    │   │       │   ├── 0749951.bin
    │   │       │   ├── 0749952.bin
    │   │       │   ├── 0751967.bin
    │   │       │   ├── 0751968.bin
    │   │       │   ├── 0753983.bin
    │   │       │   ├── 0753984.bin
    │   │       │   ├── 0755999.bin
    │   │       │   ├── 0756000.bin
    │   │       │   ├── 0758015.bin
    │   │       │   ├── 0758016.bin
    │   │       │   ├── 0760031.bin
    │   │       │   ├── 0760032.bin
    │   │       │   ├── 0762047.bin
    │   │       │   ├── 0762048.bin
    │   │       │   ├── 0764063.bin
    │   │       │   ├── 0764064.bin
    │   │       │   ├── 0766079.bin
    │   │       │   ├── 0766080.bin
    │   │       │   ├── 0768095.bin
    │   │       │   ├── 0768096.bin
    │   │       │   ├── 0770111.bin
    │   │       │   ├── 0770112.bin
    │   │       │   ├── 0772127.bin
    │   │       │   ├── 0772128.bin
    │   │       │   ├── 0774143.bin
    │   │       │   ├── 0774144.bin
    │   │       │   ├── 0776159.bin
    │   │       │   ├── 0776160.bin
    │   │       │   ├── 0778175.bin
    │   │       │   ├── 0778176.bin
    │   │       │   ├── 0780191.bin
    │   │       │   ├── 0780192.bin
    │   │       │   ├── 0782207.bin
    │   │       │   ├── 0782208.bin
    │   │       │   ├── 0784223.bin
    │   │       │   ├── 0784224.bin
    │   │       │   ├── 0786239.bin
    │   │       │   ├── 0786240.bin
    │   │       │   ├── 0788255.bin
    │   │       │   ├── 0788256.bin
    │   │       │   ├── 0790271.bin
    │   │       │   ├── 0790272.bin
    │   │       │   ├── 0792287.bin
    │   │       │   ├── 0792288.bin
    │   │       │   ├── 0794303.bin
    │   │       │   ├── 0794304.bin
    │   │       │   ├── 0796319.bin
    │   │       │   ├── 0796320.bin
    │   │       │   ├── 0798335.bin
    │   │       │   ├── 0798336.bin
    │   │       │   ├── 0800351.bin
    │   │       │   ├── 0800352.bin
    │   │       │   ├── 0802367.bin
    │   │       │   ├── 0802368.bin
    │   │       │   ├── 0804383.bin
    │   │       │   ├── 0804384.bin
    │   │       │   ├── 0806399.bin
    │   │       │   ├── 0806400.bin
    │   │       │   ├── 0808415.bin
    │   │       │   ├── 0808416.bin
    │   │       │   ├── 0810431.bin
    │   │       │   ├── 0810432.bin
    │   │       │   ├── 0812447.bin
    │   │       │   ├── 0812448.bin
    │   │       │   ├── 0814463.bin
    │   │       │   ├── 0814464.bin
    │   │       │   ├── 0816479.bin
    │   │       │   ├── 0816480.bin
    │   │       │   ├── 0818495.bin
    │   │       │   ├── 0818496.bin
    │   │       │   ├── 0820511.bin
    │   │       │   ├── 0820512.bin
    │   │       │   ├── 0822527.bin
    │   │       │   ├── 0822528.bin
    │   │       │   ├── 0824543.bin
    │   │       │   ├── 0824544.bin
    │   │       │   ├── 0826559.bin
    │   │       │   ├── 0826560.bin
    │   │       │   ├── 0828575.bin
    │   │       │   ├── 0828576.bin
    │   │       │   ├── 0830591.bin
    │   │       │   ├── 0830592.bin
    │   │       │   ├── 0832607.bin
    │   │       │   └── 0832608.bin
    │   │       ├── headers/
    │   │       │   ├── README.md
    │   │       │   ├── continuous/
    │   │       │   │   ├── README.md
    │   │       │   │   └── case-0822528_0830592/
    │   │       │   │       ├── 0822528.bin
    │   │       │   │       ├── 0822529.bin
    │   │       │   │       ├── 0822530.bin
    │   │       │   │       ├── 0822531.bin
    │   │       │   │       ├── 0822532.bin
    │   │       │   │       ├── 0822533.bin
    │   │       │   │       ├── 0822534.bin
    │   │       │   │       ├── 0822535.bin
    │   │       │   │       ├── 0822536.bin
    │   │       │   │       ├── 0822537.bin
    │   │       │   │       ├── 0822538.bin
    │   │       │   │       ├── 0822539.bin
    │   │       │   │       ├── 0822540.bin
    │   │       │   │       ├── 0822541.bin
    │   │       │   │       ├── 0822542.bin
    │   │       │   │       ├── 0822543.bin
    │   │       │   │       ├── 0822544.bin
    │   │       │   │       ├── 0822545.bin
    │   │       │   │       ├── 0822546.bin
    │   │       │   │       ├── 0822547.bin
    │   │       │   │       ├── 0822548.bin
    │   │       │   │       ├── 0822549.bin
    │   │       │   │       ├── 0822550.bin
    │   │       │   │       ├── 0822551.bin
    │   │       │   │       ├── 0822552.bin
    │   │       │   │       ├── 0822553.bin
    │   │       │   │       ├── 0822554.bin
    │   │       │   │       ├── 0822555.bin
    │   │       │   │       ├── 0822556.bin
    │   │       │   │       ├── 0822557.bin
    │   │       │   │       ├── 0822558.bin
    │   │       │   │       ├── 0822559.bin
    │   │       │   │       ├── 0822560.bin
    │   │       │   │       ├── 0822561.bin
    │   │       │   │       ├── 0822562.bin
    │   │       │   │       ├── 0822563.bin
    │   │       │   │       ├── 0822564.bin
    │   │       │   │       ├── 0822565.bin
    │   │       │   │       ├── 0822566.bin
    │   │       │   │       ├── 0822567.bin
    │   │       │   │       ├── 0822568.bin
    │   │       │   │       ├── 0822569.bin
    │   │       │   │       ├── 0822570.bin
    │   │       │   │       ├── 0822571.bin
    │   │       │   │       ├── 0822572.bin
    │   │       │   │       ├── 0822573.bin
    │   │       │   │       ├── 0822574.bin
    │   │       │   │       ├── 0822575.bin
    │   │       │   │       ├── 0822576.bin
    │   │       │   │       ├── 0822577.bin
    │   │       │   │       ├── 0822578.bin
    │   │       │   │       ├── 0822579.bin
    │   │       │   │       ├── 0822580.bin
    │   │       │   │       ├── 0822581.bin
    │   │       │   │       ├── 0822582.bin
    │   │       │   │       ├── 0822583.bin
    │   │       │   │       ├── 0822584.bin
    │   │       │   │       ├── 0822585.bin
    │   │       │   │       ├── 0822586.bin
    │   │       │   │       ├── 0822587.bin
    │   │       │   │       ├── 0822588.bin
    │   │       │   │       ├── 0822589.bin
    │   │       │   │       ├── 0822590.bin
    │   │       │   │       ├── 0822591.bin
    │   │       │   │       ├── 0822592.bin
    │   │       │   │       ├── 0822593.bin
    │   │       │   │       ├── 0822594.bin
    │   │       │   │       ├── 0822595.bin
    │   │       │   │       ├── 0822596.bin
    │   │       │   │       ├── 0822597.bin
    │   │       │   │       ├── 0822598.bin
    │   │       │   │       ├── 0822599.bin
    │   │       │   │       ├── 0822600.bin
    │   │       │   │       ├── 0822601.bin
    │   │       │   │       ├── 0822602.bin
    │   │       │   │       ├── 0822603.bin
    │   │       │   │       ├── 0822604.bin
    │   │       │   │       ├── 0822605.bin
    │   │       │   │       ├── 0822606.bin
    │   │       │   │       ├── 0822607.bin
    │   │       │   │       ├── 0822608.bin
    │   │       │   │       ├── 0822609.bin
    │   │       │   │       ├── 0822610.bin
    │   │       │   │       ├── 0822611.bin
    │   │       │   │       ├── 0822612.bin
    │   │       │   │       ├── 0822613.bin
    │   │       │   │       ├── 0822614.bin
    │   │       │   │       ├── 0822615.bin
    │   │       │   │       ├── 0822616.bin
    │   │       │   │       ├── 0822617.bin
    │   │       │   │       ├── 0822618.bin
    │   │       │   │       ├── 0822619.bin
    │   │       │   │       ├── 0822620.bin
    │   │       │   │       ├── 0822621.bin
    │   │       │   │       ├── 0822622.bin
    │   │       │   │       ├── 0822623.bin
    │   │       │   │       ├── 0822624.bin
    │   │       │   │       ├── 0822625.bin
    │   │       │   │       ├── 0822626.bin
    │   │       │   │       ├── 0822627.bin
    │   │       │   │       ├── 0822628.bin
    │   │       │   │       ├── 0822629.bin
    │   │       │   │       ├── 0822630.bin
    │   │       │   │       ├── 0822631.bin
    │   │       │   │       ├── 0822632.bin
    │   │       │   │       ├── 0822633.bin
    │   │       │   │       ├── 0822634.bin
    │   │       │   │       ├── 0822635.bin
    │   │       │   │       ├── 0822636.bin
    │   │       │   │       ├── 0822637.bin
    │   │       │   │       ├── 0822638.bin
    │   │       │   │       ├── 0822639.bin
    │   │       │   │       ├── 0822640.bin
    │   │       │   │       ├── 0822641.bin
    │   │       │   │       ├── 0822642.bin
    │   │       │   │       ├── 0822643.bin
    │   │       │   │       ├── 0822644.bin
    │   │       │   │       ├── 0822645.bin
    │   │       │   │       ├── 0822646.bin
    │   │       │   │       ├── 0822647.bin
    │   │       │   │       ├── 0822648.bin
    │   │       │   │       ├── 0822649.bin
    │   │       │   │       ├── 0822650.bin
    │   │       │   │       ├── 0822651.bin
    │   │       │   │       ├── 0822652.bin
    │   │       │   │       ├── 0822653.bin
    │   │       │   │       ├── 0822654.bin
    │   │       │   │       ├── 0822655.bin
    │   │       │   │       ├── 0822656.bin
    │   │       │   │       ├── 0822657.bin
    │   │       │   │       ├── 0822658.bin
    │   │       │   │       ├── 0822659.bin
    │   │       │   │       ├── 0822660.bin
    │   │       │   │       ├── 0822661.bin
    │   │       │   │       ├── 0822662.bin
    │   │       │   │       ├── 0822663.bin
    │   │       │   │       ├── 0822664.bin
    │   │       │   │       ├── 0822665.bin
    │   │       │   │       ├── 0822666.bin
    │   │       │   │       ├── 0822667.bin
    │   │       │   │       ├── 0822668.bin
    │   │       │   │       ├── 0822669.bin
    │   │       │   │       ├── 0822670.bin
    │   │       │   │       ├── 0822671.bin
    │   │       │   │       ├── 0822672.bin
    │   │       │   │       ├── 0822673.bin
    │   │       │   │       ├── 0822674.bin
    │   │       │   │       ├── 0822675.bin
    │   │       │   │       ├── 0822676.bin
    │   │       │   │       ├── 0822677.bin
    │   │       │   │       ├── 0822678.bin
    │   │       │   │       ├── 0822679.bin
    │   │       │   │       ├── 0822680.bin
    │   │       │   │       ├── 0822681.bin
    │   │       │   │       ├── 0822682.bin
    │   │       │   │       ├── 0822683.bin
    │   │       │   │       ├── 0822684.bin
    │   │       │   │       ├── 0822685.bin
    │   │       │   │       ├── 0822686.bin
    │   │       │   │       ├── 0822687.bin
    │   │       │   │       ├── 0822688.bin
    │   │       │   │       ├── 0822689.bin
    │   │       │   │       ├── 0822690.bin
    │   │       │   │       ├── 0822691.bin
    │   │       │   │       ├── 0822692.bin
    │   │       │   │       ├── 0822693.bin
    │   │       │   │       ├── 0822694.bin
    │   │       │   │       ├── 0822695.bin
    │   │       │   │       ├── 0822696.bin
    │   │       │   │       ├── 0822697.bin
    │   │       │   │       ├── 0822698.bin
    │   │       │   │       ├── 0822699.bin
    │   │       │   │       ├── 0822700.bin
    │   │       │   │       ├── 0822701.bin
    │   │       │   │       ├── 0822702.bin
    │   │       │   │       ├── 0822703.bin
    │   │       │   │       ├── 0822704.bin
    │   │       │   │       ├── 0822705.bin
    │   │       │   │       ├── 0822706.bin
    │   │       │   │       ├── 0822707.bin
    │   │       │   │       ├── 0822708.bin
    │   │       │   │       ├── 0822709.bin
    │   │       │   │       ├── 0822710.bin
    │   │       │   │       ├── 0822711.bin
    │   │       │   │       ├── 0822712.bin
    │   │       │   │       ├── 0822713.bin
    │   │       │   │       ├── 0822714.bin
    │   │       │   │       ├── 0822715.bin
    │   │       │   │       ├── 0822716.bin
    │   │       │   │       ├── 0822717.bin
    │   │       │   │       ├── 0822718.bin
    │   │       │   │       ├── 0822719.bin
    │   │       │   │       ├── 0822720.bin
    │   │       │   │       ├── 0822721.bin
    │   │       │   │       ├── 0822722.bin
    │   │       │   │       ├── 0822723.bin
    │   │       │   │       ├── 0822724.bin
    │   │       │   │       ├── 0822725.bin
    │   │       │   │       ├── 0822726.bin
    │   │       │   │       ├── 0822727.bin
    │   │       │   │       ├── 0822728.bin
    │   │       │   │       ├── 0822729.bin
    │   │       │   │       ├── 0822730.bin
    │   │       │   │       ├── 0822731.bin
    │   │       │   │       ├── 0822732.bin
    │   │       │   │       ├── 0822733.bin
    │   │       │   │       ├── 0822734.bin
    │   │       │   │       ├── 0822735.bin
    │   │       │   │       ├── 0822736.bin
    │   │       │   │       ├── 0822737.bin
    │   │       │   │       ├── 0822738.bin
    │   │       │   │       ├── 0822739.bin
    │   │       │   │       ├── 0822740.bin
    │   │       │   │       ├── 0822741.bin
    │   │       │   │       ├── 0822742.bin
    │   │       │   │       ├── 0822743.bin
    │   │       │   │       ├── 0822744.bin
    │   │       │   │       ├── 0822745.bin
    │   │       │   │       ├── 0822746.bin
    │   │       │   │       ├── 0822747.bin
    │   │       │   │       ├── 0822748.bin
    │   │       │   │       ├── 0822749.bin
    │   │       │   │       ├── 0822750.bin
    │   │       │   │       ├── 0822751.bin
    │   │       │   │       ├── 0822752.bin
    │   │       │   │       ├── 0822753.bin
    │   │       │   │       ├── 0822754.bin
    │   │       │   │       ├── 0822755.bin
    │   │       │   │       ├── 0822756.bin
    │   │       │   │       ├── 0822757.bin
    │   │       │   │       ├── 0822758.bin
    │   │       │   │       ├── 0822759.bin
    │   │       │   │       ├── 0822760.bin
    │   │       │   │       ├── 0822761.bin
    │   │       │   │       ├── 0822762.bin
    │   │       │   │       ├── 0822763.bin
    │   │       │   │       ├── 0822764.bin
    │   │       │   │       ├── 0822765.bin
    │   │       │   │       ├── 0822766.bin
    │   │       │   │       ├── 0822767.bin
    │   │       │   │       ├── 0822768.bin
    │   │       │   │       ├── 0822769.bin
    │   │       │   │       ├── 0822770.bin
    │   │       │   │       ├── 0822771.bin
    │   │       │   │       ├── 0822772.bin
    │   │       │   │       ├── 0822773.bin
    │   │       │   │       ├── 0822774.bin
    │   │       │   │       ├── 0822775.bin
    │   │       │   │       ├── 0822776.bin
    │   │       │   │       ├── 0822777.bin
    │   │       │   │       ├── 0822778.bin
    │   │       │   │       ├── 0822779.bin
    │   │       │   │       ├── 0822780.bin
    │   │       │   │       ├── 0822781.bin
    │   │       │   │       ├── 0822782.bin
    │   │       │   │       ├── 0822783.bin
    │   │       │   │       ├── 0822784.bin
    │   │       │   │       ├── 0822785.bin
    │   │       │   │       ├── 0822786.bin
    │   │       │   │       ├── 0822787.bin
    │   │       │   │       ├── 0822788.bin
    │   │       │   │       ├── 0822789.bin
    │   │       │   │       ├── 0822790.bin
    │   │       │   │       ├── 0822791.bin
    │   │       │   │       ├── 0822792.bin
    │   │       │   │       ├── 0822793.bin
    │   │       │   │       ├── 0822794.bin
    │   │       │   │       ├── 0822795.bin
    │   │       │   │       ├── 0822796.bin
    │   │       │   │       ├── 0822797.bin
    │   │       │   │       ├── 0822798.bin
    │   │       │   │       ├── 0822799.bin
    │   │       │   │       ├── 0822800.bin
    │   │       │   │       ├── 0822801.bin
    │   │       │   │       ├── 0822802.bin
    │   │       │   │       ├── 0822803.bin
    │   │       │   │       ├── 0822804.bin
    │   │       │   │       ├── 0822805.bin
    │   │       │   │       ├── 0822806.bin
    │   │       │   │       ├── 0822807.bin
    │   │       │   │       ├── 0822808.bin
    │   │       │   │       ├── 0822809.bin
    │   │       │   │       ├── 0822810.bin
    │   │       │   │       ├── 0822811.bin
    │   │       │   │       ├── 0822812.bin
    │   │       │   │       ├── 0822813.bin
    │   │       │   │       ├── 0822814.bin
    │   │       │   │       ├── 0822815.bin
    │   │       │   │       ├── 0822816.bin
    │   │       │   │       ├── 0822817.bin
    │   │       │   │       ├── 0822818.bin
    │   │       │   │       ├── 0822819.bin
    │   │       │   │       ├── 0822820.bin
    │   │       │   │       ├── 0822821.bin
    │   │       │   │       ├── 0822822.bin
    │   │       │   │       ├── 0822823.bin
    │   │       │   │       ├── 0822824.bin
    │   │       │   │       ├── 0822825.bin
    │   │       │   │       ├── 0822826.bin
    │   │       │   │       ├── 0822827.bin
    │   │       │   │       ├── 0822828.bin
    │   │       │   │       ├── 0822829.bin
    │   │       │   │       ├── 0822830.bin
    │   │       │   │       ├── 0822831.bin
    │   │       │   │       ├── 0822832.bin
    │   │       │   │       ├── 0822833.bin
    │   │       │   │       ├── 0822834.bin
    │   │       │   │       ├── 0822835.bin
    │   │       │   │       ├── 0822836.bin
    │   │       │   │       ├── 0822837.bin
    │   │       │   │       ├── 0822838.bin
    │   │       │   │       ├── 0822839.bin
    │   │       │   │       ├── 0822840.bin
    │   │       │   │       ├── 0822841.bin
    │   │       │   │       ├── 0822842.bin
    │   │       │   │       ├── 0822843.bin
    │   │       │   │       ├── 0822844.bin
    │   │       │   │       ├── 0822845.bin
    │   │       │   │       ├── 0822846.bin
    │   │       │   │       ├── 0822847.bin
    │   │       │   │       ├── 0822848.bin
    │   │       │   │       ├── 0822849.bin
    │   │       │   │       ├── 0822850.bin
    │   │       │   │       ├── 0822851.bin
    │   │       │   │       ├── 0822852.bin
    │   │       │   │       ├── 0822853.bin
    │   │       │   │       ├── 0822854.bin
    │   │       │   │       ├── 0822855.bin
    │   │       │   │       ├── 0822856.bin
    │   │       │   │       ├── 0822857.bin
    │   │       │   │       ├── 0822858.bin
    │   │       │   │       ├── 0822859.bin
    │   │       │   │       ├── 0822860.bin
    │   │       │   │       ├── 0822861.bin
    │   │       │   │       ├── 0822862.bin
    │   │       │   │       ├── 0822863.bin
    │   │       │   │       ├── 0822864.bin
    │   │       │   │       ├── 0822865.bin
    │   │       │   │       ├── 0822866.bin
    │   │       │   │       ├── 0822867.bin
    │   │       │   │       ├── 0822868.bin
    │   │       │   │       ├── 0822869.bin
    │   │       │   │       ├── 0822870.bin
    │   │       │   │       ├── 0822871.bin
    │   │       │   │       ├── 0822872.bin
    │   │       │   │       ├── 0822873.bin
    │   │       │   │       ├── 0822874.bin
    │   │       │   │       ├── 0822875.bin
    │   │       │   │       ├── 0822876.bin
    │   │       │   │       ├── 0822877.bin
    │   │       │   │       ├── 0822878.bin
    │   │       │   │       ├── 0822879.bin
    │   │       │   │       ├── 0822880.bin
    │   │       │   │       ├── 0822881.bin
    │   │       │   │       ├── 0822882.bin
    │   │       │   │       ├── 0822883.bin
    │   │       │   │       ├── 0822884.bin
    │   │       │   │       ├── 0822885.bin
    │   │       │   │       ├── 0822886.bin
    │   │       │   │       ├── 0822887.bin
    │   │       │   │       ├── 0822888.bin
    │   │       │   │       ├── 0822889.bin
    │   │       │   │       ├── 0822890.bin
    │   │       │   │       ├── 0822891.bin
    │   │       │   │       ├── 0822892.bin
    │   │       │   │       ├── 0822893.bin
    │   │       │   │       ├── 0822894.bin
    │   │       │   │       ├── 0822895.bin
    │   │       │   │       ├── 0822896.bin
    │   │       │   │       ├── 0822897.bin
    │   │       │   │       ├── 0822898.bin
    │   │       │   │       ├── 0822899.bin
    │   │       │   │       ├── 0822900.bin
    │   │       │   │       ├── 0822901.bin
    │   │       │   │       ├── 0822902.bin
    │   │       │   │       ├── 0822903.bin
    │   │       │   │       ├── 0822904.bin
    │   │       │   │       ├── 0822905.bin
    │   │       │   │       ├── 0822906.bin
    │   │       │   │       ├── 0822907.bin
    │   │       │   │       ├── 0822908.bin
    │   │       │   │       ├── 0822909.bin
    │   │       │   │       ├── 0822910.bin
    │   │       │   │       ├── 0822911.bin
    │   │       │   │       ├── 0822912.bin
    │   │       │   │       ├── 0822913.bin
    │   │       │   │       ├── 0822914.bin
    │   │       │   │       ├── 0822915.bin
    │   │       │   │       ├── 0822916.bin
    │   │       │   │       ├── 0822917.bin
    │   │       │   │       ├── 0822918.bin
    │   │       │   │       ├── 0822919.bin
    │   │       │   │       ├── 0822920.bin
    │   │       │   │       ├── 0822921.bin
    │   │       │   │       ├── 0822922.bin
    │   │       │   │       ├── 0822923.bin
    │   │       │   │       ├── 0822924.bin
    │   │       │   │       ├── 0822925.bin
    │   │       │   │       ├── 0822926.bin
    │   │       │   │       ├── 0822927.bin
    │   │       │   │       ├── 0822928.bin
    │   │       │   │       ├── 0822929.bin
    │   │       │   │       ├── 0822930.bin
    │   │       │   │       ├── 0822931.bin
    │   │       │   │       ├── 0822932.bin
    │   │       │   │       ├── 0822933.bin
    │   │       │   │       ├── 0822934.bin
    │   │       │   │       ├── 0822935.bin
    │   │       │   │       ├── 0822936.bin
    │   │       │   │       ├── 0822937.bin
    │   │       │   │       ├── 0822938.bin
    │   │       │   │       ├── 0822939.bin
    │   │       │   │       ├── 0822940.bin
    │   │       │   │       ├── 0822941.bin
    │   │       │   │       ├── 0822942.bin
    │   │       │   │       ├── 0822943.bin
    │   │       │   │       ├── 0822944.bin
    │   │       │   │       ├── 0822945.bin
    │   │       │   │       ├── 0822946.bin
    │   │       │   │       ├── 0822947.bin
    │   │       │   │       ├── 0822948.bin
    │   │       │   │       ├── 0822949.bin
    │   │       │   │       ├── 0822950.bin
    │   │       │   │       ├── 0822951.bin
    │   │       │   │       ├── 0822952.bin
    │   │       │   │       ├── 0822953.bin
    │   │       │   │       ├── 0822954.bin
    │   │       │   │       ├── 0822955.bin
    │   │       │   │       ├── 0822956.bin
    │   │       │   │       ├── 0822957.bin
    │   │       │   │       ├── 0822958.bin
    │   │       │   │       ├── 0822959.bin
    │   │       │   │       ├── 0822960.bin
    │   │       │   │       ├── 0822961.bin
    │   │       │   │       ├── 0822962.bin
    │   │       │   │       ├── 0822963.bin
    │   │       │   │       ├── 0822964.bin
    │   │       │   │       ├── 0822965.bin
    │   │       │   │       ├── 0822966.bin
    │   │       │   │       ├── 0822967.bin
    │   │       │   │       ├── 0822968.bin
    │   │       │   │       ├── 0822969.bin
    │   │       │   │       ├── 0822970.bin
    │   │       │   │       ├── 0822971.bin
    │   │       │   │       ├── 0822972.bin
    │   │       │   │       ├── 0822973.bin
    │   │       │   │       ├── 0822974.bin
    │   │       │   │       ├── 0822975.bin
    │   │       │   │       ├── 0822976.bin
    │   │       │   │       ├── 0822977.bin
    │   │       │   │       ├── 0822978.bin
    │   │       │   │       ├── 0822979.bin
    │   │       │   │       ├── 0822980.bin
    │   │       │   │       ├── 0822981.bin
    │   │       │   │       ├── 0822982.bin
    │   │       │   │       ├── 0822983.bin
    │   │       │   │       ├── 0822984.bin
    │   │       │   │       ├── 0822985.bin
    │   │       │   │       ├── 0822986.bin
    │   │       │   │       ├── 0822987.bin
    │   │       │   │       ├── 0822988.bin
    │   │       │   │       ├── 0822989.bin
    │   │       │   │       ├── 0822990.bin
    │   │       │   │       ├── 0822991.bin
    │   │       │   │       ├── 0822992.bin
    │   │       │   │       ├── 0822993.bin
    │   │       │   │       ├── 0822994.bin
    │   │       │   │       ├── 0822995.bin
    │   │       │   │       ├── 0822996.bin
    │   │       │   │       ├── 0822997.bin
    │   │       │   │       ├── 0822998.bin
    │   │       │   │       ├── 0822999.bin
    │   │       │   │       ├── 0823000.bin
    │   │       │   │       ├── 0823001.bin
    │   │       │   │       ├── 0823002.bin
    │   │       │   │       ├── 0823003.bin
    │   │       │   │       ├── 0823004.bin
    │   │       │   │       ├── 0823005.bin
    │   │       │   │       ├── 0823006.bin
    │   │       │   │       ├── 0823007.bin
    │   │       │   │       ├── 0823008.bin
    │   │       │   │       ├── 0823009.bin
    │   │       │   │       ├── 0823010.bin
    │   │       │   │       ├── 0823011.bin
    │   │       │   │       ├── 0823012.bin
    │   │       │   │       ├── 0823013.bin
    │   │       │   │       ├── 0823014.bin
    │   │       │   │       ├── 0823015.bin
    │   │       │   │       ├── 0823016.bin
    │   │       │   │       ├── 0823017.bin
    │   │       │   │       ├── 0823018.bin
    │   │       │   │       ├── 0823019.bin
    │   │       │   │       ├── 0823020.bin
    │   │       │   │       ├── 0823021.bin
    │   │       │   │       ├── 0823022.bin
    │   │       │   │       ├── 0823023.bin
    │   │       │   │       ├── 0823024.bin
    │   │       │   │       ├── 0823025.bin
    │   │       │   │       ├── 0823026.bin
    │   │       │   │       ├── 0823027.bin
    │   │       │   │       ├── 0823028.bin
    │   │       │   │       ├── 0823029.bin
    │   │       │   │       ├── 0823030.bin
    │   │       │   │       ├── 0823031.bin
    │   │       │   │       ├── 0823032.bin
    │   │       │   │       ├── 0823033.bin
    │   │       │   │       ├── 0823034.bin
    │   │       │   │       ├── 0823035.bin
    │   │       │   │       ├── 0823036.bin
    │   │       │   │       ├── 0823037.bin
    │   │       │   │       ├── 0823038.bin
    │   │       │   │       ├── 0823039.bin
    │   │       │   │       ├── 0823040.bin
    │   │       │   │       ├── 0823041.bin
    │   │       │   │       ├── 0823042.bin
    │   │       │   │       ├── 0823043.bin
    │   │       │   │       ├── 0823044.bin
    │   │       │   │       ├── 0823045.bin
    │   │       │   │       ├── 0823046.bin
    │   │       │   │       ├── 0823047.bin
    │   │       │   │       ├── 0823048.bin
    │   │       │   │       ├── 0823049.bin
    │   │       │   │       ├── 0823050.bin
    │   │       │   │       ├── 0823051.bin
    │   │       │   │       ├── 0823052.bin
    │   │       │   │       ├── 0823053.bin
    │   │       │   │       ├── 0823054.bin
    │   │       │   │       ├── 0823055.bin
    │   │       │   │       ├── 0823056.bin
    │   │       │   │       ├── 0823057.bin
    │   │       │   │       ├── 0823058.bin
    │   │       │   │       ├── 0823059.bin
    │   │       │   │       ├── 0823060.bin
    │   │       │   │       ├── 0823061.bin
    │   │       │   │       ├── 0823062.bin
    │   │       │   │       ├── 0823063.bin
    │   │       │   │       ├── 0823064.bin
    │   │       │   │       ├── 0823065.bin
    │   │       │   │       ├── 0823066.bin
    │   │       │   │       ├── 0823067.bin
    │   │       │   │       ├── 0823068.bin
    │   │       │   │       ├── 0823069.bin
    │   │       │   │       ├── 0823070.bin
    │   │       │   │       ├── 0823071.bin
    │   │       │   │       ├── 0823072.bin
    │   │       │   │       ├── 0823073.bin
    │   │       │   │       ├── 0823074.bin
    │   │       │   │       ├── 0823075.bin
    │   │       │   │       ├── 0823076.bin
    │   │       │   │       ├── 0823077.bin
    │   │       │   │       ├── 0823078.bin
    │   │       │   │       ├── 0823079.bin
    │   │       │   │       ├── 0823080.bin
    │   │       │   │       ├── 0823081.bin
    │   │       │   │       ├── 0823082.bin
    │   │       │   │       ├── 0823083.bin
    │   │       │   │       ├── 0823084.bin
    │   │       │   │       ├── 0823085.bin
    │   │       │   │       ├── 0823086.bin
    │   │       │   │       ├── 0823087.bin
    │   │       │   │       ├── 0823088.bin
    │   │       │   │       ├── 0823089.bin
    │   │       │   │       ├── 0823090.bin
    │   │       │   │       ├── 0823091.bin
    │   │       │   │       ├── 0823092.bin
    │   │       │   │       ├── 0823093.bin
    │   │       │   │       ├── 0823094.bin
    │   │       │   │       ├── 0823095.bin
    │   │       │   │       ├── 0823096.bin
    │   │       │   │       ├── 0823097.bin
    │   │       │   │       ├── 0823098.bin
    │   │       │   │       ├── 0823099.bin
    │   │       │   │       ├── 0823100.bin
    │   │       │   │       ├── 0823101.bin
    │   │       │   │       ├── 0823102.bin
    │   │       │   │       ├── 0823103.bin
    │   │       │   │       ├── 0823104.bin
    │   │       │   │       ├── 0823105.bin
    │   │       │   │       ├── 0823106.bin
    │   │       │   │       ├── 0823107.bin
    │   │       │   │       ├── 0823108.bin
    │   │       │   │       ├── 0823109.bin
    │   │       │   │       ├── 0823110.bin
    │   │       │   │       ├── 0823111.bin
    │   │       │   │       ├── 0823112.bin
    │   │       │   │       ├── 0823113.bin
    │   │       │   │       ├── 0823114.bin
    │   │       │   │       ├── 0823115.bin
    │   │       │   │       ├── 0823116.bin
    │   │       │   │       ├── 0823117.bin
    │   │       │   │       ├── 0823118.bin
    │   │       │   │       ├── 0823119.bin
    │   │       │   │       ├── 0823120.bin
    │   │       │   │       ├── 0823121.bin
    │   │       │   │       ├── 0823122.bin
    │   │       │   │       ├── 0823123.bin
    │   │       │   │       ├── 0823124.bin
    │   │       │   │       ├── 0823125.bin
    │   │       │   │       ├── 0823126.bin
    │   │       │   │       ├── 0823127.bin
    │   │       │   │       ├── 0823128.bin
    │   │       │   │       ├── 0823129.bin
    │   │       │   │       ├── 0823130.bin
    │   │       │   │       ├── 0823131.bin
    │   │       │   │       ├── 0823132.bin
    │   │       │   │       ├── 0823133.bin
    │   │       │   │       ├── 0823134.bin
    │   │       │   │       ├── 0823135.bin
    │   │       │   │       ├── 0823136.bin
    │   │       │   │       ├── 0823137.bin
    │   │       │   │       ├── 0823138.bin
    │   │       │   │       ├── 0823139.bin
    │   │       │   │       ├── 0823140.bin
    │   │       │   │       ├── 0823141.bin
    │   │       │   │       ├── 0823142.bin
    │   │       │   │       ├── 0823143.bin
    │   │       │   │       ├── 0823144.bin
    │   │       │   │       ├── 0823145.bin
    │   │       │   │       ├── 0823146.bin
    │   │       │   │       ├── 0823147.bin
    │   │       │   │       ├── 0823148.bin
    │   │       │   │       ├── 0823149.bin
    │   │       │   │       ├── 0823150.bin
    │   │       │   │       ├── 0823151.bin
    │   │       │   │       ├── 0823152.bin
    │   │       │   │       ├── 0823153.bin
    │   │       │   │       ├── 0823154.bin
    │   │       │   │       ├── 0823155.bin
    │   │       │   │       ├── 0823156.bin
    │   │       │   │       ├── 0823157.bin
    │   │       │   │       ├── 0823158.bin
    │   │       │   │       ├── 0823159.bin
    │   │       │   │       ├── 0823160.bin
    │   │       │   │       ├── 0823161.bin
    │   │       │   │       ├── 0823162.bin
    │   │       │   │       ├── 0823163.bin
    │   │       │   │       ├── 0823164.bin
    │   │       │   │       ├── 0823165.bin
    │   │       │   │       ├── 0823166.bin
    │   │       │   │       ├── 0823167.bin
    │   │       │   │       ├── 0823168.bin
    │   │       │   │       ├── 0823169.bin
    │   │       │   │       ├── 0823170.bin
    │   │       │   │       ├── 0823171.bin
    │   │       │   │       ├── 0823172.bin
    │   │       │   │       ├── 0823173.bin
    │   │       │   │       ├── 0823174.bin
    │   │       │   │       ├── 0823175.bin
    │   │       │   │       ├── 0823176.bin
    │   │       │   │       ├── 0823177.bin
    │   │       │   │       ├── 0823178.bin
    │   │       │   │       ├── 0823179.bin
    │   │       │   │       ├── 0823180.bin
    │   │       │   │       ├── 0823181.bin
    │   │       │   │       ├── 0823182.bin
    │   │       │   │       ├── 0823183.bin
    │   │       │   │       ├── 0823184.bin
    │   │       │   │       ├── 0823185.bin
    │   │       │   │       ├── 0823186.bin
    │   │       │   │       ├── 0823187.bin
    │   │       │   │       ├── 0823188.bin
    │   │       │   │       ├── 0823189.bin
    │   │       │   │       ├── 0823190.bin
    │   │       │   │       ├── 0823191.bin
    │   │       │   │       ├── 0823192.bin
    │   │       │   │       ├── 0823193.bin
    │   │       │   │       ├── 0823194.bin
    │   │       │   │       ├── 0823195.bin
    │   │       │   │       ├── 0823196.bin
    │   │       │   │       ├── 0823197.bin
    │   │       │   │       ├── 0823198.bin
    │   │       │   │       ├── 0823199.bin
    │   │       │   │       ├── 0823200.bin
    │   │       │   │       ├── 0823201.bin
    │   │       │   │       ├── 0823202.bin
    │   │       │   │       ├── 0823203.bin
    │   │       │   │       ├── 0823204.bin
    │   │       │   │       ├── 0823205.bin
    │   │       │   │       ├── 0823206.bin
    │   │       │   │       ├── 0823207.bin
    │   │       │   │       ├── 0823208.bin
    │   │       │   │       ├── 0823209.bin
    │   │       │   │       ├── 0823210.bin
    │   │       │   │       ├── 0823211.bin
    │   │       │   │       ├── 0823212.bin
    │   │       │   │       ├── 0823213.bin
    │   │       │   │       ├── 0823214.bin
    │   │       │   │       ├── 0823215.bin
    │   │       │   │       ├── 0823216.bin
    │   │       │   │       ├── 0823217.bin
    │   │       │   │       ├── 0823218.bin
    │   │       │   │       ├── 0823219.bin
    │   │       │   │       ├── 0823220.bin
    │   │       │   │       ├── 0823221.bin
    │   │       │   │       ├── 0823222.bin
    │   │       │   │       ├── 0823223.bin
    │   │       │   │       ├── 0823224.bin
    │   │       │   │       ├── 0823225.bin
    │   │       │   │       ├── 0823226.bin
    │   │       │   │       ├── 0823227.bin
    │   │       │   │       ├── 0823228.bin
    │   │       │   │       ├── 0823229.bin
    │   │       │   │       ├── 0823230.bin
    │   │       │   │       ├── 0823231.bin
    │   │       │   │       ├── 0823232.bin
    │   │       │   │       ├── 0823233.bin
    │   │       │   │       ├── 0823234.bin
    │   │       │   │       ├── 0823235.bin
    │   │       │   │       ├── 0823236.bin
    │   │       │   │       ├── 0823237.bin
    │   │       │   │       ├── 0823238.bin
    │   │       │   │       ├── 0823239.bin
    │   │       │   │       ├── 0823240.bin
    │   │       │   │       ├── 0823241.bin
    │   │       │   │       ├── 0823242.bin
    │   │       │   │       ├── 0823243.bin
    │   │       │   │       ├── 0823244.bin
    │   │       │   │       ├── 0823245.bin
    │   │       │   │       ├── 0823246.bin
    │   │       │   │       ├── 0823247.bin
    │   │       │   │       ├── 0823248.bin
    │   │       │   │       ├── 0823249.bin
    │   │       │   │       ├── 0823250.bin
    │   │       │   │       ├── 0823251.bin
    │   │       │   │       ├── 0823252.bin
    │   │       │   │       ├── 0823253.bin
    │   │       │   │       ├── 0823254.bin
    │   │       │   │       ├── 0823255.bin
    │   │       │   │       ├── 0823256.bin
    │   │       │   │       ├── 0823257.bin
    │   │       │   │       ├── 0823258.bin
    │   │       │   │       ├── 0823259.bin
    │   │       │   │       ├── 0823260.bin
    │   │       │   │       ├── 0823261.bin
    │   │       │   │       ├── 0823262.bin
    │   │       │   │       ├── 0823263.bin
    │   │       │   │       ├── 0823264.bin
    │   │       │   │       ├── 0823265.bin
    │   │       │   │       ├── 0823266.bin
    │   │       │   │       ├── 0823267.bin
    │   │       │   │       ├── 0823268.bin
    │   │       │   │       ├── 0823269.bin
    │   │       │   │       ├── 0823270.bin
    │   │       │   │       ├── 0823271.bin
    │   │       │   │       ├── 0823272.bin
    │   │       │   │       ├── 0823273.bin
    │   │       │   │       ├── 0823274.bin
    │   │       │   │       ├── 0823275.bin
    │   │       │   │       ├── 0823276.bin
    │   │       │   │       ├── 0823277.bin
    │   │       │   │       ├── 0823278.bin
    │   │       │   │       ├── 0823279.bin
    │   │       │   │       ├── 0823280.bin
    │   │       │   │       ├── 0823281.bin
    │   │       │   │       ├── 0823282.bin
    │   │       │   │       ├── 0823283.bin
    │   │       │   │       ├── 0823284.bin
    │   │       │   │       ├── 0823285.bin
    │   │       │   │       ├── 0823286.bin
    │   │       │   │       ├── 0823287.bin
    │   │       │   │       ├── 0823288.bin
    │   │       │   │       ├── 0823289.bin
    │   │       │   │       ├── 0823290.bin
    │   │       │   │       ├── 0823291.bin
    │   │       │   │       ├── 0823292.bin
    │   │       │   │       ├── 0823293.bin
    │   │       │   │       ├── 0823294.bin
    │   │       │   │       ├── 0823295.bin
    │   │       │   │       ├── 0823296.bin
    │   │       │   │       ├── 0823297.bin
    │   │       │   │       ├── 0823298.bin
    │   │       │   │       ├── 0823299.bin
    │   │       │   │       ├── 0823300.bin
    │   │       │   │       ├── 0823301.bin
    │   │       │   │       ├── 0823302.bin
    │   │       │   │       ├── 0823303.bin
    │   │       │   │       ├── 0823304.bin
    │   │       │   │       ├── 0823305.bin
    │   │       │   │       ├── 0823306.bin
    │   │       │   │       ├── 0823307.bin
    │   │       │   │       ├── 0823308.bin
    │   │       │   │       ├── 0823309.bin
    │   │       │   │       ├── 0823310.bin
    │   │       │   │       ├── 0823311.bin
    │   │       │   │       ├── 0823312.bin
    │   │       │   │       ├── 0823313.bin
    │   │       │   │       ├── 0823314.bin
    │   │       │   │       ├── 0823315.bin
    │   │       │   │       ├── 0823316.bin
    │   │       │   │       ├── 0823317.bin
    │   │       │   │       ├── 0823318.bin
    │   │       │   │       ├── 0823319.bin
    │   │       │   │       ├── 0823320.bin
    │   │       │   │       ├── 0823321.bin
    │   │       │   │       ├── 0823322.bin
    │   │       │   │       ├── 0823323.bin
    │   │       │   │       ├── 0823324.bin
    │   │       │   │       ├── 0823325.bin
    │   │       │   │       ├── 0823326.bin
    │   │       │   │       ├── 0823327.bin
    │   │       │   │       ├── 0823328.bin
    │   │       │   │       ├── 0823329.bin
    │   │       │   │       ├── 0823330.bin
    │   │       │   │       ├── 0823331.bin
    │   │       │   │       ├── 0823332.bin
    │   │       │   │       ├── 0823333.bin
    │   │       │   │       ├── 0823334.bin
    │   │       │   │       ├── 0823335.bin
    │   │       │   │       ├── 0823336.bin
    │   │       │   │       ├── 0823337.bin
    │   │       │   │       ├── 0823338.bin
    │   │       │   │       ├── 0823339.bin
    │   │       │   │       ├── 0823340.bin
    │   │       │   │       ├── 0823341.bin
    │   │       │   │       ├── 0823342.bin
    │   │       │   │       ├── 0823343.bin
    │   │       │   │       ├── 0823344.bin
    │   │       │   │       ├── 0823345.bin
    │   │       │   │       ├── 0823346.bin
    │   │       │   │       ├── 0823347.bin
    │   │       │   │       ├── 0823348.bin
    │   │       │   │       ├── 0823349.bin
    │   │       │   │       ├── 0823350.bin
    │   │       │   │       ├── 0823351.bin
    │   │       │   │       ├── 0823352.bin
    │   │       │   │       ├── 0823353.bin
    │   │       │   │       ├── 0823354.bin
    │   │       │   │       ├── 0823355.bin
    │   │       │   │       ├── 0823356.bin
    │   │       │   │       ├── 0823357.bin
    │   │       │   │       ├── 0823358.bin
    │   │       │   │       ├── 0823359.bin
    │   │       │   │       ├── 0823360.bin
    │   │       │   │       ├── 0823361.bin
    │   │       │   │       ├── 0823362.bin
    │   │       │   │       ├── 0823363.bin
    │   │       │   │       ├── 0823364.bin
    │   │       │   │       ├── 0823365.bin
    │   │       │   │       ├── 0823366.bin
    │   │       │   │       ├── 0823367.bin
    │   │       │   │       ├── 0823368.bin
    │   │       │   │       ├── 0823369.bin
    │   │       │   │       ├── 0823370.bin
    │   │       │   │       ├── 0823371.bin
    │   │       │   │       ├── 0823372.bin
    │   │       │   │       ├── 0823373.bin
    │   │       │   │       ├── 0823374.bin
    │   │       │   │       ├── 0823375.bin
    │   │       │   │       ├── 0823376.bin
    │   │       │   │       ├── 0823377.bin
    │   │       │   │       ├── 0823378.bin
    │   │       │   │       ├── 0823379.bin
    │   │       │   │       ├── 0823380.bin
    │   │       │   │       ├── 0823381.bin
    │   │       │   │       ├── 0823382.bin
    │   │       │   │       ├── 0823383.bin
    │   │       │   │       ├── 0823384.bin
    │   │       │   │       ├── 0823385.bin
    │   │       │   │       ├── 0823386.bin
    │   │       │   │       ├── 0823387.bin
    │   │       │   │       ├── 0823388.bin
    │   │       │   │       ├── 0823389.bin
    │   │       │   │       ├── 0823390.bin
    │   │       │   │       ├── 0823391.bin
    │   │       │   │       ├── 0823392.bin
    │   │       │   │       ├── 0823393.bin
    │   │       │   │       ├── 0823394.bin
    │   │       │   │       ├── 0823395.bin
    │   │       │   │       ├── 0823396.bin
    │   │       │   │       ├── 0823397.bin
    │   │       │   │       ├── 0823398.bin
    │   │       │   │       ├── 0823399.bin
    │   │       │   │       ├── 0823400.bin
    │   │       │   │       ├── 0823401.bin
    │   │       │   │       ├── 0823402.bin
    │   │       │   │       ├── 0823403.bin
    │   │       │   │       ├── 0823404.bin
    │   │       │   │       ├── 0823405.bin
    │   │       │   │       ├── 0823406.bin
    │   │       │   │       ├── 0823407.bin
    │   │       │   │       ├── 0823408.bin
    │   │       │   │       ├── 0823409.bin
    │   │       │   │       ├── 0823410.bin
    │   │       │   │       ├── 0823411.bin
    │   │       │   │       ├── 0823412.bin
    │   │       │   │       ├── 0823413.bin
    │   │       │   │       ├── 0823414.bin
    │   │       │   │       ├── 0823415.bin
    │   │       │   │       ├── 0823416.bin
    │   │       │   │       ├── 0823417.bin
    │   │       │   │       ├── 0823418.bin
    │   │       │   │       ├── 0823419.bin
    │   │       │   │       ├── 0823420.bin
    │   │       │   │       ├── 0823421.bin
    │   │       │   │       ├── 0823422.bin
    │   │       │   │       ├── 0823423.bin
    │   │       │   │       ├── 0823424.bin
    │   │       │   │       ├── 0823425.bin
    │   │       │   │       ├── 0823426.bin
    │   │       │   │       ├── 0823427.bin
    │   │       │   │       ├── 0823428.bin
    │   │       │   │       ├── 0823429.bin
    │   │       │   │       ├── 0823430.bin
    │   │       │   │       ├── 0823431.bin
    │   │       │   │       ├── 0823432.bin
    │   │       │   │       ├── 0823433.bin
    │   │       │   │       ├── 0823434.bin
    │   │       │   │       ├── 0823435.bin
    │   │       │   │       ├── 0823436.bin
    │   │       │   │       ├── 0823437.bin
    │   │       │   │       ├── 0823438.bin
    │   │       │   │       ├── 0823439.bin
    │   │       │   │       ├── 0823440.bin
    │   │       │   │       ├── 0823441.bin
    │   │       │   │       ├── 0823442.bin
    │   │       │   │       ├── 0823443.bin
    │   │       │   │       ├── 0823444.bin
    │   │       │   │       ├── 0823445.bin
    │   │       │   │       ├── 0823446.bin
    │   │       │   │       ├── 0823447.bin
    │   │       │   │       ├── 0823448.bin
    │   │       │   │       ├── 0823449.bin
    │   │       │   │       ├── 0823450.bin
    │   │       │   │       ├── 0823451.bin
    │   │       │   │       ├── 0823452.bin
    │   │       │   │       ├── 0823453.bin
    │   │       │   │       ├── 0823454.bin
    │   │       │   │       ├── 0823455.bin
    │   │       │   │       ├── 0823456.bin
    │   │       │   │       ├── 0823457.bin
    │   │       │   │       ├── 0823458.bin
    │   │       │   │       ├── 0823459.bin
    │   │       │   │       ├── 0823460.bin
    │   │       │   │       ├── 0823461.bin
    │   │       │   │       ├── 0823462.bin
    │   │       │   │       ├── 0823463.bin
    │   │       │   │       ├── 0823464.bin
    │   │       │   │       ├── 0823465.bin
    │   │       │   │       ├── 0823466.bin
    │   │       │   │       ├── 0823467.bin
    │   │       │   │       ├── 0823468.bin
    │   │       │   │       ├── 0823469.bin
    │   │       │   │       ├── 0823470.bin
    │   │       │   │       ├── 0823471.bin
    │   │       │   │       ├── 0823472.bin
    │   │       │   │       ├── 0823473.bin
    │   │       │   │       ├── 0823474.bin
    │   │       │   │       ├── 0823475.bin
    │   │       │   │       ├── 0823476.bin
    │   │       │   │       ├── 0823477.bin
    │   │       │   │       ├── 0823478.bin
    │   │       │   │       ├── 0823479.bin
    │   │       │   │       ├── 0823480.bin
    │   │       │   │       ├── 0823481.bin
    │   │       │   │       ├── 0823482.bin
    │   │       │   │       ├── 0823483.bin
    │   │       │   │       ├── 0823484.bin
    │   │       │   │       ├── 0823485.bin
    │   │       │   │       ├── 0823486.bin
    │   │       │   │       ├── 0823487.bin
    │   │       │   │       ├── 0823488.bin
    │   │       │   │       ├── 0823489.bin
    │   │       │   │       ├── 0823490.bin
    │   │       │   │       ├── 0823491.bin
    │   │       │   │       ├── 0823492.bin
    │   │       │   │       ├── 0823493.bin
    │   │       │   │       ├── 0823494.bin
    │   │       │   │       ├── 0823495.bin
    │   │       │   │       ├── 0823496.bin
    │   │       │   │       ├── 0823497.bin
    │   │       │   │       ├── 0823498.bin
    │   │       │   │       ├── 0823499.bin
    │   │       │   │       ├── 0823500.bin
    │   │       │   │       ├── 0823501.bin
    │   │       │   │       ├── 0823502.bin
    │   │       │   │       ├── 0823503.bin
    │   │       │   │       ├── 0823504.bin
    │   │       │   │       ├── 0823505.bin
    │   │       │   │       ├── 0823506.bin
    │   │       │   │       ├── 0823507.bin
    │   │       │   │       ├── 0823508.bin
    │   │       │   │       ├── 0823509.bin
    │   │       │   │       ├── 0823510.bin
    │   │       │   │       ├── 0823511.bin
    │   │       │   │       ├── 0823512.bin
    │   │       │   │       ├── 0823513.bin
    │   │       │   │       ├── 0823514.bin
    │   │       │   │       ├── 0823515.bin
    │   │       │   │       ├── 0823516.bin
    │   │       │   │       ├── 0823517.bin
    │   │       │   │       ├── 0823518.bin
    │   │       │   │       ├── 0823519.bin
    │   │       │   │       ├── 0823520.bin
    │   │       │   │       ├── 0823521.bin
    │   │       │   │       ├── 0823522.bin
    │   │       │   │       ├── 0823523.bin
    │   │       │   │       ├── 0823524.bin
    │   │       │   │       ├── 0823525.bin
    │   │       │   │       ├── 0823526.bin
    │   │       │   │       ├── 0823527.bin
    │   │       │   │       ├── 0823528.bin
    │   │       │   │       ├── 0823529.bin
    │   │       │   │       ├── 0823530.bin
    │   │       │   │       ├── 0823531.bin
    │   │       │   │       ├── 0823532.bin
    │   │       │   │       ├── 0823533.bin
    │   │       │   │       ├── 0823534.bin
    │   │       │   │       ├── 0823535.bin
    │   │       │   │       ├── 0823536.bin
    │   │       │   │       ├── 0823537.bin
    │   │       │   │       ├── 0823538.bin
    │   │       │   │       ├── 0823539.bin
    │   │       │   │       ├── 0823540.bin
    │   │       │   │       ├── 0823541.bin
    │   │       │   │       ├── 0823542.bin
    │   │       │   │       ├── 0823543.bin
    │   │       │   │       ├── 0823544.bin
    │   │       │   │       ├── 0823545.bin
    │   │       │   │       ├── 0823546.bin
    │   │       │   │       ├── 0823547.bin
    │   │       │   │       ├── 0823548.bin
    │   │       │   │       ├── 0823549.bin
    │   │       │   │       ├── 0823550.bin
    │   │       │   │       ├── 0823551.bin
    │   │       │   │       ├── 0823552.bin
    │   │       │   │       ├── 0823553.bin
    │   │       │   │       ├── 0823554.bin
    │   │       │   │       ├── 0823555.bin
    │   │       │   │       ├── 0823556.bin
    │   │       │   │       ├── 0823557.bin
    │   │       │   │       ├── 0823558.bin
    │   │       │   │       ├── 0823559.bin
    │   │       │   │       ├── 0823560.bin
    │   │       │   │       ├── 0823561.bin
    │   │       │   │       ├── 0823562.bin
    │   │       │   │       ├── 0823563.bin
    │   │       │   │       ├── 0823564.bin
    │   │       │   │       ├── 0823565.bin
    │   │       │   │       ├── 0823566.bin
    │   │       │   │       ├── 0823567.bin
    │   │       │   │       ├── 0823568.bin
    │   │       │   │       ├── 0823569.bin
    │   │       │   │       ├── 0823570.bin
    │   │       │   │       ├── 0823571.bin
    │   │       │   │       ├── 0823572.bin
    │   │       │   │       ├── 0823573.bin
    │   │       │   │       ├── 0823574.bin
    │   │       │   │       ├── 0823575.bin
    │   │       │   │       ├── 0823576.bin
    │   │       │   │       ├── 0823577.bin
    │   │       │   │       ├── 0823578.bin
    │   │       │   │       ├── 0823579.bin
    │   │       │   │       ├── 0823580.bin
    │   │       │   │       ├── 0823581.bin
    │   │       │   │       ├── 0823582.bin
    │   │       │   │       ├── 0823583.bin
    │   │       │   │       ├── 0823584.bin
    │   │       │   │       ├── 0823585.bin
    │   │       │   │       ├── 0823586.bin
    │   │       │   │       ├── 0823587.bin
    │   │       │   │       ├── 0823588.bin
    │   │       │   │       ├── 0823589.bin
    │   │       │   │       ├── 0823590.bin
    │   │       │   │       ├── 0823591.bin
    │   │       │   │       ├── 0823592.bin
    │   │       │   │       ├── 0823593.bin
    │   │       │   │       ├── 0823594.bin
    │   │       │   │       ├── 0823595.bin
    │   │       │   │       ├── 0823596.bin
    │   │       │   │       ├── 0823597.bin
    │   │       │   │       ├── 0823598.bin
    │   │       │   │       ├── 0823599.bin
    │   │       │   │       ├── 0823600.bin
    │   │       │   │       ├── 0823601.bin
    │   │       │   │       ├── 0823602.bin
    │   │       │   │       ├── 0823603.bin
    │   │       │   │       ├── 0823604.bin
    │   │       │   │       ├── 0823605.bin
    │   │       │   │       ├── 0823606.bin
    │   │       │   │       ├── 0823607.bin
    │   │       │   │       ├── 0823608.bin
    │   │       │   │       ├── 0823609.bin
    │   │       │   │       ├── 0823610.bin
    │   │       │   │       ├── 0823611.bin
    │   │       │   │       ├── 0823612.bin
    │   │       │   │       ├── 0823613.bin
    │   │       │   │       ├── 0823614.bin
    │   │       │   │       ├── 0823615.bin
    │   │       │   │       ├── 0823616.bin
    │   │       │   │       ├── 0823617.bin
    │   │       │   │       ├── 0823618.bin
    │   │       │   │       ├── 0823619.bin
    │   │       │   │       ├── 0823620.bin
    │   │       │   │       ├── 0823621.bin
    │   │       │   │       ├── 0823622.bin
    │   │       │   │       ├── 0823623.bin
    │   │       │   │       ├── 0823624.bin
    │   │       │   │       ├── 0823625.bin
    │   │       │   │       ├── 0823626.bin
    │   │       │   │       ├── 0823627.bin
    │   │       │   │       ├── 0823628.bin
    │   │       │   │       ├── 0823629.bin
    │   │       │   │       ├── 0823630.bin
    │   │       │   │       ├── 0823631.bin
    │   │       │   │       ├── 0823632.bin
    │   │       │   │       ├── 0823633.bin
    │   │       │   │       ├── 0823634.bin
    │   │       │   │       ├── 0823635.bin
    │   │       │   │       ├── 0823636.bin
    │   │       │   │       ├── 0823637.bin
    │   │       │   │       ├── 0823638.bin
    │   │       │   │       ├── 0823639.bin
    │   │       │   │       ├── 0823640.bin
    │   │       │   │       ├── 0823641.bin
    │   │       │   │       ├── 0823642.bin
    │   │       │   │       ├── 0823643.bin
    │   │       │   │       ├── 0823644.bin
    │   │       │   │       ├── 0823645.bin
    │   │       │   │       ├── 0823646.bin
    │   │       │   │       ├── 0823647.bin
    │   │       │   │       ├── 0823648.bin
    │   │       │   │       ├── 0823649.bin
    │   │       │   │       ├── 0823650.bin
    │   │       │   │       ├── 0823651.bin
    │   │       │   │       ├── 0823652.bin
    │   │       │   │       ├── 0823653.bin
    │   │       │   │       ├── 0823654.bin
    │   │       │   │       ├── 0823655.bin
    │   │       │   │       ├── 0823656.bin
    │   │       │   │       ├── 0823657.bin
    │   │       │   │       ├── 0823658.bin
    │   │       │   │       ├── 0823659.bin
    │   │       │   │       ├── 0823660.bin
    │   │       │   │       ├── 0823661.bin
    │   │       │   │       ├── 0823662.bin
    │   │       │   │       ├── 0823663.bin
    │   │       │   │       ├── 0823664.bin
    │   │       │   │       ├── 0823665.bin
    │   │       │   │       ├── 0823666.bin
    │   │       │   │       ├── 0823667.bin
    │   │       │   │       ├── 0823668.bin
    │   │       │   │       ├── 0823669.bin
    │   │       │   │       ├── 0823670.bin
    │   │       │   │       ├── 0823671.bin
    │   │       │   │       ├── 0823672.bin
    │   │       │   │       ├── 0823673.bin
    │   │       │   │       ├── 0823674.bin
    │   │       │   │       ├── 0823675.bin
    │   │       │   │       ├── 0823676.bin
    │   │       │   │       ├── 0823677.bin
    │   │       │   │       ├── 0823678.bin
    │   │       │   │       ├── 0823679.bin
    │   │       │   │       ├── 0823680.bin
    │   │       │   │       ├── 0823681.bin
    │   │       │   │       ├── 0823682.bin
    │   │       │   │       ├── 0823683.bin
    │   │       │   │       ├── 0823684.bin
    │   │       │   │       ├── 0823685.bin
    │   │       │   │       ├── 0823686.bin
    │   │       │   │       ├── 0823687.bin
    │   │       │   │       ├── 0823688.bin
    │   │       │   │       ├── 0823689.bin
    │   │       │   │       ├── 0823690.bin
    │   │       │   │       ├── 0823691.bin
    │   │       │   │       ├── 0823692.bin
    │   │       │   │       ├── 0823693.bin
    │   │       │   │       ├── 0823694.bin
    │   │       │   │       ├── 0823695.bin
    │   │       │   │       ├── 0823696.bin
    │   │       │   │       ├── 0823697.bin
    │   │       │   │       ├── 0823698.bin
    │   │       │   │       ├── 0823699.bin
    │   │       │   │       ├── 0823700.bin
    │   │       │   │       ├── 0823701.bin
    │   │       │   │       ├── 0823702.bin
    │   │       │   │       ├── 0823703.bin
    │   │       │   │       ├── 0823704.bin
    │   │       │   │       ├── 0823705.bin
    │   │       │   │       ├── 0823706.bin
    │   │       │   │       ├── 0823707.bin
    │   │       │   │       ├── 0823708.bin
    │   │       │   │       ├── 0823709.bin
    │   │       │   │       ├── 0823710.bin
    │   │       │   │       ├── 0823711.bin
    │   │       │   │       ├── 0823712.bin
    │   │       │   │       ├── 0823713.bin
    │   │       │   │       ├── 0823714.bin
    │   │       │   │       ├── 0823715.bin
    │   │       │   │       ├── 0823716.bin
    │   │       │   │       ├── 0823717.bin
    │   │       │   │       ├── 0823718.bin
    │   │       │   │       ├── 0823719.bin
    │   │       │   │       ├── 0823720.bin
    │   │       │   │       ├── 0823721.bin
    │   │       │   │       ├── 0823722.bin
    │   │       │   │       ├── 0823723.bin
    │   │       │   │       ├── 0823724.bin
    │   │       │   │       ├── 0823725.bin
    │   │       │   │       ├── 0823726.bin
    │   │       │   │       ├── 0823727.bin
    │   │       │   │       ├── 0823728.bin
    │   │       │   │       ├── 0823729.bin
    │   │       │   │       ├── 0823730.bin
    │   │       │   │       ├── 0823731.bin
    │   │       │   │       ├── 0823732.bin
    │   │       │   │       ├── 0823733.bin
    │   │       │   │       ├── 0823734.bin
    │   │       │   │       ├── 0823735.bin
    │   │       │   │       ├── 0823736.bin
    │   │       │   │       ├── 0823737.bin
    │   │       │   │       ├── 0823738.bin
    │   │       │   │       ├── 0823739.bin
    │   │       │   │       ├── 0823740.bin
    │   │       │   │       ├── 0823741.bin
    │   │       │   │       ├── 0823742.bin
    │   │       │   │       ├── 0823743.bin
    │   │       │   │       ├── 0823744.bin
    │   │       │   │       ├── 0823745.bin
    │   │       │   │       ├── 0823746.bin
    │   │       │   │       ├── 0823747.bin
    │   │       │   │       ├── 0823748.bin
    │   │       │   │       ├── 0823749.bin
    │   │       │   │       ├── 0823750.bin
    │   │       │   │       ├── 0823751.bin
    │   │       │   │       ├── 0823752.bin
    │   │       │   │       ├── 0823753.bin
    │   │       │   │       ├── 0823754.bin
    │   │       │   │       ├── 0823755.bin
    │   │       │   │       ├── 0823756.bin
    │   │       │   │       ├── 0823757.bin
    │   │       │   │       ├── 0823758.bin
    │   │       │   │       ├── 0823759.bin
    │   │       │   │       ├── 0823760.bin
    │   │       │   │       ├── 0823761.bin
    │   │       │   │       ├── 0823762.bin
    │   │       │   │       ├── 0823763.bin
    │   │       │   │       ├── 0823764.bin
    │   │       │   │       ├── 0823765.bin
    │   │       │   │       ├── 0823766.bin
    │   │       │   │       ├── 0823767.bin
    │   │       │   │       ├── 0823768.bin
    │   │       │   │       ├── 0823769.bin
    │   │       │   │       ├── 0823770.bin
    │   │       │   │       ├── 0823771.bin
    │   │       │   │       ├── 0823772.bin
    │   │       │   │       ├── 0823773.bin
    │   │       │   │       ├── 0823774.bin
    │   │       │   │       ├── 0823775.bin
    │   │       │   │       ├── 0823776.bin
    │   │       │   │       ├── 0823777.bin
    │   │       │   │       ├── 0823778.bin
    │   │       │   │       ├── 0823779.bin
    │   │       │   │       ├── 0823780.bin
    │   │       │   │       ├── 0823781.bin
    │   │       │   │       ├── 0823782.bin
    │   │       │   │       ├── 0823783.bin
    │   │       │   │       ├── 0823784.bin
    │   │       │   │       ├── 0823785.bin
    │   │       │   │       ├── 0823786.bin
    │   │       │   │       ├── 0823787.bin
    │   │       │   │       ├── 0823788.bin
    │   │       │   │       ├── 0823789.bin
    │   │       │   │       ├── 0823790.bin
    │   │       │   │       ├── 0823791.bin
    │   │       │   │       ├── 0823792.bin
    │   │       │   │       ├── 0823793.bin
    │   │       │   │       ├── 0823794.bin
    │   │       │   │       ├── 0823795.bin
    │   │       │   │       ├── 0823796.bin
    │   │       │   │       ├── 0823797.bin
    │   │       │   │       ├── 0823798.bin
    │   │       │   │       ├── 0823799.bin
    │   │       │   │       ├── 0823800.bin
    │   │       │   │       ├── 0823801.bin
    │   │       │   │       ├── 0823802.bin
    │   │       │   │       ├── 0823803.bin
    │   │       │   │       ├── 0823804.bin
    │   │       │   │       ├── 0823805.bin
    │   │       │   │       ├── 0823806.bin
    │   │       │   │       ├── 0823807.bin
    │   │       │   │       ├── 0823808.bin
    │   │       │   │       ├── 0823809.bin
    │   │       │   │       ├── 0823810.bin
    │   │       │   │       ├── 0823811.bin
    │   │       │   │       ├── 0823812.bin
    │   │       │   │       ├── 0823813.bin
    │   │       │   │       ├── 0823814.bin
    │   │       │   │       ├── 0823815.bin
    │   │       │   │       ├── 0823816.bin
    │   │       │   │       ├── 0823817.bin
    │   │       │   │       ├── 0823818.bin
    │   │       │   │       ├── 0823819.bin
    │   │       │   │       ├── 0823820.bin
    │   │       │   │       ├── 0823821.bin
    │   │       │   │       ├── 0823822.bin
    │   │       │   │       ├── 0823823.bin
    │   │       │   │       ├── 0823824.bin
    │   │       │   │       ├── 0823825.bin
    │   │       │   │       ├── 0823826.bin
    │   │       │   │       ├── 0823827.bin
    │   │       │   │       ├── 0823828.bin
    │   │       │   │       ├── 0823829.bin
    │   │       │   │       ├── 0823830.bin
    │   │       │   │       ├── 0823831.bin
    │   │       │   │       ├── 0823832.bin
    │   │       │   │       ├── 0823833.bin
    │   │       │   │       ├── 0823834.bin
    │   │       │   │       ├── 0823835.bin
    │   │       │   │       ├── 0823836.bin
    │   │       │   │       ├── 0823837.bin
    │   │       │   │       ├── 0823838.bin
    │   │       │   │       ├── 0823839.bin
    │   │       │   │       ├── 0823840.bin
    │   │       │   │       ├── 0823841.bin
    │   │       │   │       ├── 0823842.bin
    │   │       │   │       ├── 0823843.bin
    │   │       │   │       ├── 0823844.bin
    │   │       │   │       ├── 0823845.bin
    │   │       │   │       ├── 0823846.bin
    │   │       │   │       ├── 0823847.bin
    │   │       │   │       ├── 0823848.bin
    │   │       │   │       ├── 0823849.bin
    │   │       │   │       ├── 0823850.bin
    │   │       │   │       ├── 0823851.bin
    │   │       │   │       ├── 0823852.bin
    │   │       │   │       ├── 0823853.bin
    │   │       │   │       ├── 0823854.bin
    │   │       │   │       ├── 0823855.bin
    │   │       │   │       ├── 0823856.bin
    │   │       │   │       ├── 0823857.bin
    │   │       │   │       ├── 0823858.bin
    │   │       │   │       ├── 0823859.bin
    │   │       │   │       ├── 0823860.bin
    │   │       │   │       ├── 0823861.bin
    │   │       │   │       ├── 0823862.bin
    │   │       │   │       ├── 0823863.bin
    │   │       │   │       ├── 0823864.bin
    │   │       │   │       ├── 0823865.bin
    │   │       │   │       ├── 0823866.bin
    │   │       │   │       ├── 0823867.bin
    │   │       │   │       ├── 0823868.bin
    │   │       │   │       ├── 0823869.bin
    │   │       │   │       ├── 0823870.bin
    │   │       │   │       ├── 0823871.bin
    │   │       │   │       ├── 0823872.bin
    │   │       │   │       ├── 0823873.bin
    │   │       │   │       ├── 0823874.bin
    │   │       │   │       ├── 0823875.bin
    │   │       │   │       ├── 0823876.bin
    │   │       │   │       ├── 0823877.bin
    │   │       │   │       ├── 0823878.bin
    │   │       │   │       ├── 0823879.bin
    │   │       │   │       ├── 0823880.bin
    │   │       │   │       ├── 0823881.bin
    │   │       │   │       ├── 0823882.bin
    │   │       │   │       ├── 0823883.bin
    │   │       │   │       ├── 0823884.bin
    │   │       │   │       ├── 0823885.bin
    │   │       │   │       ├── 0823886.bin
    │   │       │   │       ├── 0823887.bin
    │   │       │   │       ├── 0823888.bin
    │   │       │   │       ├── 0823889.bin
    │   │       │   │       ├── 0823890.bin
    │   │       │   │       ├── 0823891.bin
    │   │       │   │       ├── 0823892.bin
    │   │       │   │       ├── 0823893.bin
    │   │       │   │       ├── 0823894.bin
    │   │       │   │       ├── 0823895.bin
    │   │       │   │       ├── 0823896.bin
    │   │       │   │       ├── 0823897.bin
    │   │       │   │       ├── 0823898.bin
    │   │       │   │       ├── 0823899.bin
    │   │       │   │       ├── 0823900.bin
    │   │       │   │       ├── 0823901.bin
    │   │       │   │       ├── 0823902.bin
    │   │       │   │       ├── 0823903.bin
    │   │       │   │       ├── 0823904.bin
    │   │       │   │       ├── 0823905.bin
    │   │       │   │       ├── 0823906.bin
    │   │       │   │       ├── 0823907.bin
    │   │       │   │       ├── 0823908.bin
    │   │       │   │       ├── 0823909.bin
    │   │       │   │       ├── 0823910.bin
    │   │       │   │       ├── 0823911.bin
    │   │       │   │       ├── 0823912.bin
    │   │       │   │       ├── 0823913.bin
    │   │       │   │       ├── 0823914.bin
    │   │       │   │       ├── 0823915.bin
    │   │       │   │       ├── 0823916.bin
    │   │       │   │       ├── 0823917.bin
    │   │       │   │       ├── 0823918.bin
    │   │       │   │       ├── 0823919.bin
    │   │       │   │       ├── 0823920.bin
    │   │       │   │       ├── 0823921.bin
    │   │       │   │       ├── 0823922.bin
    │   │       │   │       ├── 0823923.bin
    │   │       │   │       ├── 0823924.bin
    │   │       │   │       ├── 0823925.bin
    │   │       │   │       ├── 0823926.bin
    │   │       │   │       ├── 0823927.bin
    │   │       │   │       ├── 0823928.bin
    │   │       │   │       ├── 0823929.bin
    │   │       │   │       ├── 0823930.bin
    │   │       │   │       ├── 0823931.bin
    │   │       │   │       ├── 0823932.bin
    │   │       │   │       ├── 0823933.bin
    │   │       │   │       ├── 0823934.bin
    │   │       │   │       ├── 0823935.bin
    │   │       │   │       ├── 0823936.bin
    │   │       │   │       ├── 0823937.bin
    │   │       │   │       ├── 0823938.bin
    │   │       │   │       ├── 0823939.bin
    │   │       │   │       ├── 0823940.bin
    │   │       │   │       ├── 0823941.bin
    │   │       │   │       ├── 0823942.bin
    │   │       │   │       ├── 0823943.bin
    │   │       │   │       ├── 0823944.bin
    │   │       │   │       ├── 0823945.bin
    │   │       │   │       ├── 0823946.bin
    │   │       │   │       ├── 0823947.bin
    │   │       │   │       ├── 0823948.bin
    │   │       │   │       ├── 0823949.bin
    │   │       │   │       ├── 0823950.bin
    │   │       │   │       ├── 0823951.bin
    │   │       │   │       ├── 0823952.bin
    │   │       │   │       ├── 0823953.bin
    │   │       │   │       ├── 0823954.bin
    │   │       │   │       ├── 0823955.bin
    │   │       │   │       ├── 0823956.bin
    │   │       │   │       ├── 0823957.bin
    │   │       │   │       ├── 0823958.bin
    │   │       │   │       ├── 0823959.bin
    │   │       │   │       ├── 0823960.bin
    │   │       │   │       ├── 0823961.bin
    │   │       │   │       ├── 0823962.bin
    │   │       │   │       ├── 0823963.bin
    │   │       │   │       ├── 0823964.bin
    │   │       │   │       ├── 0823965.bin
    │   │       │   │       ├── 0823966.bin
    │   │       │   │       ├── 0823967.bin
    │   │       │   │       ├── 0823968.bin
    │   │       │   │       ├── 0823969.bin
    │   │       │   │       ├── 0823970.bin
    │   │       │   │       ├── 0823971.bin
    │   │       │   │       ├── 0823972.bin
    │   │       │   │       ├── 0823973.bin
    │   │       │   │       ├── 0823974.bin
    │   │       │   │       ├── 0823975.bin
    │   │       │   │       ├── 0823976.bin
    │   │       │   │       ├── 0823977.bin
    │   │       │   │       ├── 0823978.bin
    │   │       │   │       ├── 0823979.bin
    │   │       │   │       ├── 0823980.bin
    │   │       │   │       ├── 0823981.bin
    │   │       │   │       ├── 0823982.bin
    │   │       │   │       ├── 0823983.bin
    │   │       │   │       ├── 0823984.bin
    │   │       │   │       ├── 0823985.bin
    │   │       │   │       ├── 0823986.bin
    │   │       │   │       ├── 0823987.bin
    │   │       │   │       ├── 0823988.bin
    │   │       │   │       ├── 0823989.bin
    │   │       │   │       ├── 0823990.bin
    │   │       │   │       ├── 0823991.bin
    │   │       │   │       ├── 0823992.bin
    │   │       │   │       ├── 0823993.bin
    │   │       │   │       ├── 0823994.bin
    │   │       │   │       ├── 0823995.bin
    │   │       │   │       ├── 0823996.bin
    │   │       │   │       ├── 0823997.bin
    │   │       │   │       ├── 0823998.bin
    │   │       │   │       ├── 0823999.bin
    │   │       │   │       ├── 0824000.bin
    │   │       │   │       ├── 0824001.bin
    │   │       │   │       ├── 0824002.bin
    │   │       │   │       ├── 0824003.bin
    │   │       │   │       ├── 0824004.bin
    │   │       │   │       ├── 0824005.bin
    │   │       │   │       ├── 0824006.bin
    │   │       │   │       ├── 0824007.bin
    │   │       │   │       ├── 0824008.bin
    │   │       │   │       ├── 0824009.bin
    │   │       │   │       ├── 0824010.bin
    │   │       │   │       ├── 0824011.bin
    │   │       │   │       ├── 0824012.bin
    │   │       │   │       ├── 0824013.bin
    │   │       │   │       ├── 0824014.bin
    │   │       │   │       ├── 0824015.bin
    │   │       │   │       ├── 0824016.bin
    │   │       │   │       ├── 0824017.bin
    │   │       │   │       ├── 0824018.bin
    │   │       │   │       ├── 0824019.bin
    │   │       │   │       ├── 0824020.bin
    │   │       │   │       ├── 0824021.bin
    │   │       │   │       ├── 0824022.bin
    │   │       │   │       ├── 0824023.bin
    │   │       │   │       ├── 0824024.bin
    │   │       │   │       ├── 0824025.bin
    │   │       │   │       ├── 0824026.bin
    │   │       │   │       ├── 0824027.bin
    │   │       │   │       ├── 0824028.bin
    │   │       │   │       ├── 0824029.bin
    │   │       │   │       ├── 0824030.bin
    │   │       │   │       ├── 0824031.bin
    │   │       │   │       ├── 0824032.bin
    │   │       │   │       ├── 0824033.bin
    │   │       │   │       ├── 0824034.bin
    │   │       │   │       ├── 0824035.bin
    │   │       │   │       ├── 0824036.bin
    │   │       │   │       ├── 0824037.bin
    │   │       │   │       ├── 0824038.bin
    │   │       │   │       ├── 0824039.bin
    │   │       │   │       ├── 0824040.bin
    │   │       │   │       ├── 0824041.bin
    │   │       │   │       ├── 0824042.bin
    │   │       │   │       ├── 0824043.bin
    │   │       │   │       ├── 0824044.bin
    │   │       │   │       ├── 0824045.bin
    │   │       │   │       ├── 0824046.bin
    │   │       │   │       ├── 0824047.bin
    │   │       │   │       ├── 0824048.bin
    │   │       │   │       ├── 0824049.bin
    │   │       │   │       ├── 0824050.bin
    │   │       │   │       ├── 0824051.bin
    │   │       │   │       ├── 0824052.bin
    │   │       │   │       ├── 0824053.bin
    │   │       │   │       ├── 0824054.bin
    │   │       │   │       ├── 0824055.bin
    │   │       │   │       ├── 0824056.bin
    │   │       │   │       ├── 0824057.bin
    │   │       │   │       ├── 0824058.bin
    │   │       │   │       ├── 0824059.bin
    │   │       │   │       ├── 0824060.bin
    │   │       │   │       ├── 0824061.bin
    │   │       │   │       ├── 0824062.bin
    │   │       │   │       ├── 0824063.bin
    │   │       │   │       ├── 0824064.bin
    │   │       │   │       ├── 0824065.bin
    │   │       │   │       ├── 0824066.bin
    │   │       │   │       ├── 0824067.bin
    │   │       │   │       ├── 0824068.bin
    │   │       │   │       ├── 0824069.bin
    │   │       │   │       ├── 0824070.bin
    │   │       │   │       ├── 0824071.bin
    │   │       │   │       ├── 0824072.bin
    │   │       │   │       ├── 0824073.bin
    │   │       │   │       ├── 0824074.bin
    │   │       │   │       ├── 0824075.bin
    │   │       │   │       ├── 0824076.bin
    │   │       │   │       ├── 0824077.bin
    │   │       │   │       ├── 0824078.bin
    │   │       │   │       ├── 0824079.bin
    │   │       │   │       ├── 0824080.bin
    │   │       │   │       ├── 0824081.bin
    │   │       │   │       ├── 0824082.bin
    │   │       │   │       ├── 0824083.bin
    │   │       │   │       ├── 0824084.bin
    │   │       │   │       ├── 0824085.bin
    │   │       │   │       ├── 0824086.bin
    │   │       │   │       ├── 0824087.bin
    │   │       │   │       ├── 0824088.bin
    │   │       │   │       ├── 0824089.bin
    │   │       │   │       ├── 0824090.bin
    │   │       │   │       ├── 0824091.bin
    │   │       │   │       ├── 0824092.bin
    │   │       │   │       ├── 0824093.bin
    │   │       │   │       ├── 0824094.bin
    │   │       │   │       ├── 0824095.bin
    │   │       │   │       ├── 0824096.bin
    │   │       │   │       ├── 0824097.bin
    │   │       │   │       ├── 0824098.bin
    │   │       │   │       ├── 0824099.bin
    │   │       │   │       ├── 0824100.bin
    │   │       │   │       ├── 0824101.bin
    │   │       │   │       ├── 0824102.bin
    │   │       │   │       ├── 0824103.bin
    │   │       │   │       ├── 0824104.bin
    │   │       │   │       ├── 0824105.bin
    │   │       │   │       ├── 0824106.bin
    │   │       │   │       ├── 0824107.bin
    │   │       │   │       ├── 0824108.bin
    │   │       │   │       ├── 0824109.bin
    │   │       │   │       ├── 0824110.bin
    │   │       │   │       ├── 0824111.bin
    │   │       │   │       ├── 0824112.bin
    │   │       │   │       ├── 0824113.bin
    │   │       │   │       ├── 0824114.bin
    │   │       │   │       ├── 0824115.bin
    │   │       │   │       ├── 0824116.bin
    │   │       │   │       ├── 0824117.bin
    │   │       │   │       ├── 0824118.bin
    │   │       │   │       ├── 0824119.bin
    │   │       │   │       ├── 0824120.bin
    │   │       │   │       ├── 0824121.bin
    │   │       │   │       ├── 0824122.bin
    │   │       │   │       ├── 0824123.bin
    │   │       │   │       ├── 0824124.bin
    │   │       │   │       ├── 0824125.bin
    │   │       │   │       ├── 0824126.bin
    │   │       │   │       ├── 0824127.bin
    │   │       │   │       ├── 0824128.bin
    │   │       │   │       ├── 0824129.bin
    │   │       │   │       ├── 0824130.bin
    │   │       │   │       ├── 0824131.bin
    │   │       │   │       ├── 0824132.bin
    │   │       │   │       ├── 0824133.bin
    │   │       │   │       ├── 0824134.bin
    │   │       │   │       ├── 0824135.bin
    │   │       │   │       ├── 0824136.bin
    │   │       │   │       ├── 0824137.bin
    │   │       │   │       ├── 0824138.bin
    │   │       │   │       ├── 0824139.bin
    │   │       │   │       ├── 0824140.bin
    │   │       │   │       ├── 0824141.bin
    │   │       │   │       ├── 0824142.bin
    │   │       │   │       ├── 0824143.bin
    │   │       │   │       ├── 0824144.bin
    │   │       │   │       ├── 0824145.bin
    │   │       │   │       ├── 0824146.bin
    │   │       │   │       ├── 0824147.bin
    │   │       │   │       ├── 0824148.bin
    │   │       │   │       ├── 0824149.bin
    │   │       │   │       ├── 0824150.bin
    │   │       │   │       ├── 0824151.bin
    │   │       │   │       ├── 0824152.bin
    │   │       │   │       ├── 0824153.bin
    │   │       │   │       ├── 0824154.bin
    │   │       │   │       ├── 0824155.bin
    │   │       │   │       ├── 0824156.bin
    │   │       │   │       ├── 0824157.bin
    │   │       │   │       ├── 0824158.bin
    │   │       │   │       ├── 0824159.bin
    │   │       │   │       ├── 0824160.bin
    │   │       │   │       ├── 0824161.bin
    │   │       │   │       ├── 0824162.bin
    │   │       │   │       ├── 0824163.bin
    │   │       │   │       ├── 0824164.bin
    │   │       │   │       ├── 0824165.bin
    │   │       │   │       ├── 0824166.bin
    │   │       │   │       ├── 0824167.bin
    │   │       │   │       ├── 0824168.bin
    │   │       │   │       ├── 0824169.bin
    │   │       │   │       ├── 0824170.bin
    │   │       │   │       ├── 0824171.bin
    │   │       │   │       ├── 0824172.bin
    │   │       │   │       ├── 0824173.bin
    │   │       │   │       ├── 0824174.bin
    │   │       │   │       ├── 0824175.bin
    │   │       │   │       ├── 0824176.bin
    │   │       │   │       ├── 0824177.bin
    │   │       │   │       ├── 0824178.bin
    │   │       │   │       ├── 0824179.bin
    │   │       │   │       ├── 0824180.bin
    │   │       │   │       ├── 0824181.bin
    │   │       │   │       ├── 0824182.bin
    │   │       │   │       ├── 0824183.bin
    │   │       │   │       ├── 0824184.bin
    │   │       │   │       ├── 0824185.bin
    │   │       │   │       ├── 0824186.bin
    │   │       │   │       ├── 0824187.bin
    │   │       │   │       ├── 0824188.bin
    │   │       │   │       ├── 0824189.bin
    │   │       │   │       ├── 0824190.bin
    │   │       │   │       ├── 0824191.bin
    │   │       │   │       ├── 0824192.bin
    │   │       │   │       ├── 0824193.bin
    │   │       │   │       ├── 0824194.bin
    │   │       │   │       ├── 0824195.bin
    │   │       │   │       ├── 0824196.bin
    │   │       │   │       ├── 0824197.bin
    │   │       │   │       ├── 0824198.bin
    │   │       │   │       ├── 0824199.bin
    │   │       │   │       ├── 0824200.bin
    │   │       │   │       ├── 0824201.bin
    │   │       │   │       ├── 0824202.bin
    │   │       │   │       ├── 0824203.bin
    │   │       │   │       ├── 0824204.bin
    │   │       │   │       ├── 0824205.bin
    │   │       │   │       ├── 0824206.bin
    │   │       │   │       ├── 0824207.bin
    │   │       │   │       ├── 0824208.bin
    │   │       │   │       ├── 0824209.bin
    │   │       │   │       ├── 0824210.bin
    │   │       │   │       ├── 0824211.bin
    │   │       │   │       ├── 0824212.bin
    │   │       │   │       ├── 0824213.bin
    │   │       │   │       ├── 0824214.bin
    │   │       │   │       ├── 0824215.bin
    │   │       │   │       ├── 0824216.bin
    │   │       │   │       ├── 0824217.bin
    │   │       │   │       ├── 0824218.bin
    │   │       │   │       ├── 0824219.bin
    │   │       │   │       ├── 0824220.bin
    │   │       │   │       ├── 0824221.bin
    │   │       │   │       ├── 0824222.bin
    │   │       │   │       ├── 0824223.bin
    │   │       │   │       ├── 0824224.bin
    │   │       │   │       ├── 0824225.bin
    │   │       │   │       ├── 0824226.bin
    │   │       │   │       ├── 0824227.bin
    │   │       │   │       ├── 0824228.bin
    │   │       │   │       ├── 0824229.bin
    │   │       │   │       ├── 0824230.bin
    │   │       │   │       ├── 0824231.bin
    │   │       │   │       ├── 0824232.bin
    │   │       │   │       ├── 0824233.bin
    │   │       │   │       ├── 0824234.bin
    │   │       │   │       ├── 0824235.bin
    │   │       │   │       ├── 0824236.bin
    │   │       │   │       ├── 0824237.bin
    │   │       │   │       ├── 0824238.bin
    │   │       │   │       ├── 0824239.bin
    │   │       │   │       ├── 0824240.bin
    │   │       │   │       ├── 0824241.bin
    │   │       │   │       ├── 0824242.bin
    │   │       │   │       ├── 0824243.bin
    │   │       │   │       ├── 0824244.bin
    │   │       │   │       ├── 0824245.bin
    │   │       │   │       ├── 0824246.bin
    │   │       │   │       ├── 0824247.bin
    │   │       │   │       ├── 0824248.bin
    │   │       │   │       ├── 0824249.bin
    │   │       │   │       ├── 0824250.bin
    │   │       │   │       ├── 0824251.bin
    │   │       │   │       ├── 0824252.bin
    │   │       │   │       ├── 0824253.bin
    │   │       │   │       ├── 0824254.bin
    │   │       │   │       ├── 0824255.bin
    │   │       │   │       ├── 0824256.bin
    │   │       │   │       ├── 0824257.bin
    │   │       │   │       ├── 0824258.bin
    │   │       │   │       ├── 0824259.bin
    │   │       │   │       ├── 0824260.bin
    │   │       │   │       ├── 0824261.bin
    │   │       │   │       ├── 0824262.bin
    │   │       │   │       ├── 0824263.bin
    │   │       │   │       ├── 0824264.bin
    │   │       │   │       ├── 0824265.bin
    │   │       │   │       ├── 0824266.bin
    │   │       │   │       ├── 0824267.bin
    │   │       │   │       ├── 0824268.bin
    │   │       │   │       ├── 0824269.bin
    │   │       │   │       ├── 0824270.bin
    │   │       │   │       ├── 0824271.bin
    │   │       │   │       ├── 0824272.bin
    │   │       │   │       ├── 0824273.bin
    │   │       │   │       ├── 0824274.bin
    │   │       │   │       ├── 0824275.bin
    │   │       │   │       ├── 0824276.bin
    │   │       │   │       ├── 0824277.bin
    │   │       │   │       ├── 0824278.bin
    │   │       │   │       ├── 0824279.bin
    │   │       │   │       ├── 0824280.bin
    │   │       │   │       ├── 0824281.bin
    │   │       │   │       ├── 0824282.bin
    │   │       │   │       ├── 0824283.bin
    │   │       │   │       ├── 0824284.bin
    │   │       │   │       ├── 0824285.bin
    │   │       │   │       ├── 0824286.bin
    │   │       │   │       ├── 0824287.bin
    │   │       │   │       ├── 0824288.bin
    │   │       │   │       ├── 0824289.bin
    │   │       │   │       ├── 0824290.bin
    │   │       │   │       ├── 0824291.bin
    │   │       │   │       ├── 0824292.bin
    │   │       │   │       ├── 0824293.bin
    │   │       │   │       ├── 0824294.bin
    │   │       │   │       ├── 0824295.bin
    │   │       │   │       ├── 0824296.bin
    │   │       │   │       ├── 0824297.bin
    │   │       │   │       ├── 0824298.bin
    │   │       │   │       ├── 0824299.bin
    │   │       │   │       ├── 0824300.bin
    │   │       │   │       ├── 0824301.bin
    │   │       │   │       ├── 0824302.bin
    │   │       │   │       ├── 0824303.bin
    │   │       │   │       ├── 0824304.bin
    │   │       │   │       ├── 0824305.bin
    │   │       │   │       ├── 0824306.bin
    │   │       │   │       ├── 0824307.bin
    │   │       │   │       ├── 0824308.bin
    │   │       │   │       ├── 0824309.bin
    │   │       │   │       ├── 0824310.bin
    │   │       │   │       ├── 0824311.bin
    │   │       │   │       ├── 0824312.bin
    │   │       │   │       ├── 0824313.bin
    │   │       │   │       ├── 0824314.bin
    │   │       │   │       ├── 0824315.bin
    │   │       │   │       ├── 0824316.bin
    │   │       │   │       ├── 0824317.bin
    │   │       │   │       ├── 0824318.bin
    │   │       │   │       ├── 0824319.bin
    │   │       │   │       ├── 0824320.bin
    │   │       │   │       ├── 0824321.bin
    │   │       │   │       ├── 0824322.bin
    │   │       │   │       ├── 0824323.bin
    │   │       │   │       ├── 0824324.bin
    │   │       │   │       ├── 0824325.bin
    │   │       │   │       ├── 0824326.bin
    │   │       │   │       ├── 0824327.bin
    │   │       │   │       ├── 0824328.bin
    │   │       │   │       ├── 0824329.bin
    │   │       │   │       ├── 0824330.bin
    │   │       │   │       ├── 0824331.bin
    │   │       │   │       ├── 0824332.bin
    │   │       │   │       ├── 0824333.bin
    │   │       │   │       ├── 0824334.bin
    │   │       │   │       ├── 0824335.bin
    │   │       │   │       ├── 0824336.bin
    │   │       │   │       ├── 0824337.bin
    │   │       │   │       ├── 0824338.bin
    │   │       │   │       ├── 0824339.bin
    │   │       │   │       ├── 0824340.bin
    │   │       │   │       ├── 0824341.bin
    │   │       │   │       ├── 0824342.bin
    │   │       │   │       ├── 0824343.bin
    │   │       │   │       ├── 0824344.bin
    │   │       │   │       ├── 0824345.bin
    │   │       │   │       ├── 0824346.bin
    │   │       │   │       ├── 0824347.bin
    │   │       │   │       ├── 0824348.bin
    │   │       │   │       ├── 0824349.bin
    │   │       │   │       ├── 0824350.bin
    │   │       │   │       ├── 0824351.bin
    │   │       │   │       ├── 0824352.bin
    │   │       │   │       ├── 0824353.bin
    │   │       │   │       ├── 0824354.bin
    │   │       │   │       ├── 0824355.bin
    │   │       │   │       ├── 0824356.bin
    │   │       │   │       ├── 0824357.bin
    │   │       │   │       ├── 0824358.bin
    │   │       │   │       ├── 0824359.bin
    │   │       │   │       ├── 0824360.bin
    │   │       │   │       ├── 0824361.bin
    │   │       │   │       ├── 0824362.bin
    │   │       │   │       ├── 0824363.bin
    │   │       │   │       ├── 0824364.bin
    │   │       │   │       ├── 0824365.bin
    │   │       │   │       ├── 0824366.bin
    │   │       │   │       ├── 0824367.bin
    │   │       │   │       ├── 0824368.bin
    │   │       │   │       ├── 0824369.bin
    │   │       │   │       ├── 0824370.bin
    │   │       │   │       ├── 0824371.bin
    │   │       │   │       ├── 0824372.bin
    │   │       │   │       ├── 0824373.bin
    │   │       │   │       ├── 0824374.bin
    │   │       │   │       ├── 0824375.bin
    │   │       │   │       ├── 0824376.bin
    │   │       │   │       ├── 0824377.bin
    │   │       │   │       ├── 0824378.bin
    │   │       │   │       ├── 0824379.bin
    │   │       │   │       ├── 0824380.bin
    │   │       │   │       ├── 0824381.bin
    │   │       │   │       ├── 0824382.bin
    │   │       │   │       ├── 0824383.bin
    │   │       │   │       ├── 0824384.bin
    │   │       │   │       ├── 0824385.bin
    │   │       │   │       ├── 0824386.bin
    │   │       │   │       ├── 0824387.bin
    │   │       │   │       ├── 0824388.bin
    │   │       │   │       ├── 0824389.bin
    │   │       │   │       ├── 0824390.bin
    │   │       │   │       ├── 0824391.bin
    │   │       │   │       ├── 0824392.bin
    │   │       │   │       ├── 0824393.bin
    │   │       │   │       ├── 0824394.bin
    │   │       │   │       ├── 0824395.bin
    │   │       │   │       ├── 0824396.bin
    │   │       │   │       ├── 0824397.bin
    │   │       │   │       ├── 0824398.bin
    │   │       │   │       ├── 0824399.bin
    │   │       │   │       ├── 0824400.bin
    │   │       │   │       ├── 0824401.bin
    │   │       │   │       ├── 0824402.bin
    │   │       │   │       ├── 0824403.bin
    │   │       │   │       ├── 0824404.bin
    │   │       │   │       ├── 0824405.bin
    │   │       │   │       ├── 0824406.bin
    │   │       │   │       ├── 0824407.bin
    │   │       │   │       ├── 0824408.bin
    │   │       │   │       ├── 0824409.bin
    │   │       │   │       ├── 0824410.bin
    │   │       │   │       ├── 0824411.bin
    │   │       │   │       ├── 0824412.bin
    │   │       │   │       ├── 0824413.bin
    │   │       │   │       ├── 0824414.bin
    │   │       │   │       ├── 0824415.bin
    │   │       │   │       ├── 0824416.bin
    │   │       │   │       ├── 0824417.bin
    │   │       │   │       ├── 0824418.bin
    │   │       │   │       ├── 0824419.bin
    │   │       │   │       ├── 0824420.bin
    │   │       │   │       ├── 0824421.bin
    │   │       │   │       ├── 0824422.bin
    │   │       │   │       ├── 0824423.bin
    │   │       │   │       ├── 0824424.bin
    │   │       │   │       ├── 0824425.bin
    │   │       │   │       ├── 0824426.bin
    │   │       │   │       ├── 0824427.bin
    │   │       │   │       ├── 0824428.bin
    │   │       │   │       ├── 0824429.bin
    │   │       │   │       ├── 0824430.bin
    │   │       │   │       ├── 0824431.bin
    │   │       │   │       ├── 0824432.bin
    │   │       │   │       ├── 0824433.bin
    │   │       │   │       ├── 0824434.bin
    │   │       │   │       ├── 0824435.bin
    │   │       │   │       ├── 0824436.bin
    │   │       │   │       ├── 0824437.bin
    │   │       │   │       ├── 0824438.bin
    │   │       │   │       ├── 0824439.bin
    │   │       │   │       ├── 0824440.bin
    │   │       │   │       ├── 0824441.bin
    │   │       │   │       ├── 0824442.bin
    │   │       │   │       ├── 0824443.bin
    │   │       │   │       ├── 0824444.bin
    │   │       │   │       ├── 0824445.bin
    │   │       │   │       ├── 0824446.bin
    │   │       │   │       ├── 0824447.bin
    │   │       │   │       ├── 0824448.bin
    │   │       │   │       ├── 0824449.bin
    │   │       │   │       ├── 0824450.bin
    │   │       │   │       ├── 0824451.bin
    │   │       │   │       ├── 0824452.bin
    │   │       │   │       ├── 0824453.bin
    │   │       │   │       ├── 0824454.bin
    │   │       │   │       ├── 0824455.bin
    │   │       │   │       ├── 0824456.bin
    │   │       │   │       ├── 0824457.bin
    │   │       │   │       ├── 0824458.bin
    │   │       │   │       ├── 0824459.bin
    │   │       │   │       ├── 0824460.bin
    │   │       │   │       ├── 0824461.bin
    │   │       │   │       ├── 0824462.bin
    │   │       │   │       ├── 0824463.bin
    │   │       │   │       ├── 0824464.bin
    │   │       │   │       ├── 0824465.bin
    │   │       │   │       ├── 0824466.bin
    │   │       │   │       ├── 0824467.bin
    │   │       │   │       ├── 0824468.bin
    │   │       │   │       ├── 0824469.bin
    │   │       │   │       ├── 0824470.bin
    │   │       │   │       ├── 0824471.bin
    │   │       │   │       ├── 0824472.bin
    │   │       │   │       ├── 0824473.bin
    │   │       │   │       ├── 0824474.bin
    │   │       │   │       ├── 0824475.bin
    │   │       │   │       ├── 0824476.bin
    │   │       │   │       ├── 0824477.bin
    │   │       │   │       ├── 0824478.bin
    │   │       │   │       ├── 0824479.bin
    │   │       │   │       ├── 0824480.bin
    │   │       │   │       ├── 0824481.bin
    │   │       │   │       ├── 0824482.bin
    │   │       │   │       ├── 0824483.bin
    │   │       │   │       ├── 0824484.bin
    │   │       │   │       ├── 0824485.bin
    │   │       │   │       ├── 0824486.bin
    │   │       │   │       ├── 0824487.bin
    │   │       │   │       ├── 0824488.bin
    │   │       │   │       ├── 0824489.bin
    │   │       │   │       ├── 0824490.bin
    │   │       │   │       ├── 0824491.bin
    │   │       │   │       ├── 0824492.bin
    │   │       │   │       ├── 0824493.bin
    │   │       │   │       ├── 0824494.bin
    │   │       │   │       ├── 0824495.bin
    │   │       │   │       ├── 0824496.bin
    │   │       │   │       ├── 0824497.bin
    │   │       │   │       ├── 0824498.bin
    │   │       │   │       ├── 0824499.bin
    │   │       │   │       ├── 0824500.bin
    │   │       │   │       ├── 0824501.bin
    │   │       │   │       ├── 0824502.bin
    │   │       │   │       ├── 0824503.bin
    │   │       │   │       ├── 0824504.bin
    │   │       │   │       ├── 0824505.bin
    │   │       │   │       ├── 0824506.bin
    │   │       │   │       ├── 0824507.bin
    │   │       │   │       ├── 0824508.bin
    │   │       │   │       ├── 0824509.bin
    │   │       │   │       ├── 0824510.bin
    │   │       │   │       ├── 0824511.bin
    │   │       │   │       ├── 0824512.bin
    │   │       │   │       ├── 0824513.bin
    │   │       │   │       ├── 0824514.bin
    │   │       │   │       ├── 0824515.bin
    │   │       │   │       ├── 0824516.bin
    │   │       │   │       ├── 0824517.bin
    │   │       │   │       ├── 0824518.bin
    │   │       │   │       ├── 0824519.bin
    │   │       │   │       ├── 0824520.bin
    │   │       │   │       ├── 0824521.bin
    │   │       │   │       ├── 0824522.bin
    │   │       │   │       ├── 0824523.bin
    │   │       │   │       ├── 0824524.bin
    │   │       │   │       ├── 0824525.bin
    │   │       │   │       ├── 0824526.bin
    │   │       │   │       ├── 0824527.bin
    │   │       │   │       ├── 0824528.bin
    │   │       │   │       ├── 0824529.bin
    │   │       │   │       ├── 0824530.bin
    │   │       │   │       ├── 0824531.bin
    │   │       │   │       ├── 0824532.bin
    │   │       │   │       ├── 0824533.bin
    │   │       │   │       ├── 0824534.bin
    │   │       │   │       ├── 0824535.bin
    │   │       │   │       ├── 0824536.bin
    │   │       │   │       ├── 0824537.bin
    │   │       │   │       ├── 0824538.bin
    │   │       │   │       ├── 0824539.bin
    │   │       │   │       ├── 0824540.bin
    │   │       │   │       ├── 0824541.bin
    │   │       │   │       ├── 0824542.bin
    │   │       │   │       ├── 0824543.bin
    │   │       │   │       ├── 0824544.bin
    │   │       │   │       ├── 0824545.bin
    │   │       │   │       ├── 0824546.bin
    │   │       │   │       ├── 0824547.bin
    │   │       │   │       ├── 0824548.bin
    │   │       │   │       ├── 0824549.bin
    │   │       │   │       ├── 0824550.bin
    │   │       │   │       ├── 0824551.bin
    │   │       │   │       ├── 0824552.bin
    │   │       │   │       ├── 0824553.bin
    │   │       │   │       ├── 0824554.bin
    │   │       │   │       ├── 0824555.bin
    │   │       │   │       ├── 0824556.bin
    │   │       │   │       ├── 0824557.bin
    │   │       │   │       ├── 0824558.bin
    │   │       │   │       ├── 0824559.bin
    │   │       │   │       ├── 0824560.bin
    │   │       │   │       ├── 0824561.bin
    │   │       │   │       ├── 0824562.bin
    │   │       │   │       ├── 0824563.bin
    │   │       │   │       ├── 0824564.bin
    │   │       │   │       ├── 0824565.bin
    │   │       │   │       ├── 0824566.bin
    │   │       │   │       ├── 0824567.bin
    │   │       │   │       ├── 0824568.bin
    │   │       │   │       ├── 0824569.bin
    │   │       │   │       ├── 0824570.bin
    │   │       │   │       ├── 0824571.bin
    │   │       │   │       ├── 0824572.bin
    │   │       │   │       ├── 0824573.bin
    │   │       │   │       ├── 0824574.bin
    │   │       │   │       ├── 0824575.bin
    │   │       │   │       ├── 0824576.bin
    │   │       │   │       ├── 0824577.bin
    │   │       │   │       ├── 0824578.bin
    │   │       │   │       ├── 0824579.bin
    │   │       │   │       ├── 0824580.bin
    │   │       │   │       ├── 0824581.bin
    │   │       │   │       ├── 0824582.bin
    │   │       │   │       ├── 0824583.bin
    │   │       │   │       ├── 0824584.bin
    │   │       │   │       ├── 0824585.bin
    │   │       │   │       ├── 0824586.bin
    │   │       │   │       ├── 0824587.bin
    │   │       │   │       ├── 0824588.bin
    │   │       │   │       ├── 0824589.bin
    │   │       │   │       ├── 0824590.bin
    │   │       │   │       ├── 0824591.bin
    │   │       │   │       ├── 0824592.bin
    │   │       │   │       ├── 0824593.bin
    │   │       │   │       ├── 0824594.bin
    │   │       │   │       ├── 0824595.bin
    │   │       │   │       ├── 0824596.bin
    │   │       │   │       ├── 0824597.bin
    │   │       │   │       ├── 0824598.bin
    │   │       │   │       ├── 0824599.bin
    │   │       │   │       ├── 0824600.bin
    │   │       │   │       ├── 0824601.bin
    │   │       │   │       ├── 0824602.bin
    │   │       │   │       ├── 0824603.bin
    │   │       │   │       ├── 0824604.bin
    │   │       │   │       ├── 0824605.bin
    │   │       │   │       ├── 0824606.bin
    │   │       │   │       ├── 0824607.bin
    │   │       │   │       ├── 0824608.bin
    │   │       │   │       ├── 0824609.bin
    │   │       │   │       ├── 0824610.bin
    │   │       │   │       ├── 0824611.bin
    │   │       │   │       ├── 0824612.bin
    │   │       │   │       ├── 0824613.bin
    │   │       │   │       ├── 0824614.bin
    │   │       │   │       ├── 0824615.bin
    │   │       │   │       ├── 0824616.bin
    │   │       │   │       ├── 0824617.bin
    │   │       │   │       ├── 0824618.bin
    │   │       │   │       ├── 0824619.bin
    │   │       │   │       ├── 0824620.bin
    │   │       │   │       ├── 0824621.bin
    │   │       │   │       ├── 0824622.bin
    │   │       │   │       ├── 0824623.bin
    │   │       │   │       ├── 0824624.bin
    │   │       │   │       ├── 0824625.bin
    │   │       │   │       ├── 0824626.bin
    │   │       │   │       ├── 0824627.bin
    │   │       │   │       ├── 0824628.bin
    │   │       │   │       ├── 0824629.bin
    │   │       │   │       ├── 0824630.bin
    │   │       │   │       ├── 0824631.bin
    │   │       │   │       ├── 0824632.bin
    │   │       │   │       ├── 0824633.bin
    │   │       │   │       ├── 0824634.bin
    │   │       │   │       ├── 0824635.bin
    │   │       │   │       ├── 0824636.bin
    │   │       │   │       ├── 0824637.bin
    │   │       │   │       ├── 0824638.bin
    │   │       │   │       ├── 0824639.bin
    │   │       │   │       ├── 0824640.bin
    │   │       │   │       ├── 0824641.bin
    │   │       │   │       ├── 0824642.bin
    │   │       │   │       ├── 0824643.bin
    │   │       │   │       ├── 0824644.bin
    │   │       │   │       ├── 0824645.bin
    │   │       │   │       ├── 0824646.bin
    │   │       │   │       ├── 0824647.bin
    │   │       │   │       ├── 0824648.bin
    │   │       │   │       ├── 0824649.bin
    │   │       │   │       ├── 0824650.bin
    │   │       │   │       ├── 0824651.bin
    │   │       │   │       ├── 0824652.bin
    │   │       │   │       ├── 0824653.bin
    │   │       │   │       ├── 0824654.bin
    │   │       │   │       ├── 0824655.bin
    │   │       │   │       ├── 0824656.bin
    │   │       │   │       ├── 0824657.bin
    │   │       │   │       ├── 0824658.bin
    │   │       │   │       ├── 0824659.bin
    │   │       │   │       ├── 0824660.bin
    │   │       │   │       ├── 0824661.bin
    │   │       │   │       ├── 0824662.bin
    │   │       │   │       ├── 0824663.bin
    │   │       │   │       ├── 0824664.bin
    │   │       │   │       ├── 0824665.bin
    │   │       │   │       ├── 0824666.bin
    │   │       │   │       ├── 0824667.bin
    │   │       │   │       ├── 0824668.bin
    │   │       │   │       ├── 0824669.bin
    │   │       │   │       ├── 0824670.bin
    │   │       │   │       ├── 0824671.bin
    │   │       │   │       ├── 0824672.bin
    │   │       │   │       ├── 0824673.bin
    │   │       │   │       ├── 0824674.bin
    │   │       │   │       ├── 0824675.bin
    │   │       │   │       ├── 0824676.bin
    │   │       │   │       ├── 0824677.bin
    │   │       │   │       ├── 0824678.bin
    │   │       │   │       ├── 0824679.bin
    │   │       │   │       ├── 0824680.bin
    │   │       │   │       ├── 0824681.bin
    │   │       │   │       ├── 0824682.bin
    │   │       │   │       ├── 0824683.bin
    │   │       │   │       ├── 0824684.bin
    │   │       │   │       ├── 0824685.bin
    │   │       │   │       ├── 0824686.bin
    │   │       │   │       ├── 0824687.bin
    │   │       │   │       ├── 0824688.bin
    │   │       │   │       ├── 0824689.bin
    │   │       │   │       ├── 0824690.bin
    │   │       │   │       ├── 0824691.bin
    │   │       │   │       ├── 0824692.bin
    │   │       │   │       ├── 0824693.bin
    │   │       │   │       ├── 0824694.bin
    │   │       │   │       ├── 0824695.bin
    │   │       │   │       ├── 0824696.bin
    │   │       │   │       ├── 0824697.bin
    │   │       │   │       ├── 0824698.bin
    │   │       │   │       ├── 0824699.bin
    │   │       │   │       ├── 0824700.bin
    │   │       │   │       ├── 0824701.bin
    │   │       │   │       ├── 0824702.bin
    │   │       │   │       ├── 0824703.bin
    │   │       │   │       ├── 0824704.bin
    │   │       │   │       ├── 0824705.bin
    │   │       │   │       ├── 0824706.bin
    │   │       │   │       ├── 0824707.bin
    │   │       │   │       ├── 0824708.bin
    │   │       │   │       ├── 0824709.bin
    │   │       │   │       ├── 0824710.bin
    │   │       │   │       ├── 0824711.bin
    │   │       │   │       ├── 0824712.bin
    │   │       │   │       ├── 0824713.bin
    │   │       │   │       ├── 0824714.bin
    │   │       │   │       ├── 0824715.bin
    │   │       │   │       ├── 0824716.bin
    │   │       │   │       ├── 0824717.bin
    │   │       │   │       ├── 0824718.bin
    │   │       │   │       ├── 0824719.bin
    │   │       │   │       ├── 0824720.bin
    │   │       │   │       ├── 0824721.bin
    │   │       │   │       ├── 0824722.bin
    │   │       │   │       ├── 0824723.bin
    │   │       │   │       ├── 0824724.bin
    │   │       │   │       ├── 0824725.bin
    │   │       │   │       ├── 0824726.bin
    │   │       │   │       ├── 0824727.bin
    │   │       │   │       ├── 0824728.bin
    │   │       │   │       ├── 0824729.bin
    │   │       │   │       ├── 0824730.bin
    │   │       │   │       ├── 0824731.bin
    │   │       │   │       ├── 0824732.bin
    │   │       │   │       ├── 0824733.bin
    │   │       │   │       ├── 0824734.bin
    │   │       │   │       ├── 0824735.bin
    │   │       │   │       ├── 0824736.bin
    │   │       │   │       ├── 0824737.bin
    │   │       │   │       ├── 0824738.bin
    │   │       │   │       ├── 0824739.bin
    │   │       │   │       ├── 0824740.bin
    │   │       │   │       ├── 0824741.bin
    │   │       │   │       ├── 0824742.bin
    │   │       │   │       ├── 0824743.bin
    │   │       │   │       ├── 0824744.bin
    │   │       │   │       ├── 0824745.bin
    │   │       │   │       ├── 0824746.bin
    │   │       │   │       ├── 0824747.bin
    │   │       │   │       ├── 0824748.bin
    │   │       │   │       ├── 0824749.bin
    │   │       │   │       ├── 0824750.bin
    │   │       │   │       ├── 0824751.bin
    │   │       │   │       ├── 0824752.bin
    │   │       │   │       ├── 0824753.bin
    │   │       │   │       ├── 0824754.bin
    │   │       │   │       ├── 0824755.bin
    │   │       │   │       ├── 0824756.bin
    │   │       │   │       ├── 0824757.bin
    │   │       │   │       ├── 0824758.bin
    │   │       │   │       ├── 0824759.bin
    │   │       │   │       ├── 0824760.bin
    │   │       │   │       ├── 0824761.bin
    │   │       │   │       ├── 0824762.bin
    │   │       │   │       ├── 0824763.bin
    │   │       │   │       ├── 0824764.bin
    │   │       │   │       ├── 0824765.bin
    │   │       │   │       ├── 0824766.bin
    │   │       │   │       ├── 0824767.bin
    │   │       │   │       ├── 0824768.bin
    │   │       │   │       ├── 0824769.bin
    │   │       │   │       ├── 0824770.bin
    │   │       │   │       ├── 0824771.bin
    │   │       │   │       ├── 0824772.bin
    │   │       │   │       ├── 0824773.bin
    │   │       │   │       ├── 0824774.bin
    │   │       │   │       ├── 0824775.bin
    │   │       │   │       ├── 0824776.bin
    │   │       │   │       ├── 0824777.bin
    │   │       │   │       ├── 0824778.bin
    │   │       │   │       ├── 0824779.bin
    │   │       │   │       ├── 0824780.bin
    │   │       │   │       ├── 0824781.bin
    │   │       │   │       ├── 0824782.bin
    │   │       │   │       ├── 0824783.bin
    │   │       │   │       ├── 0824784.bin
    │   │       │   │       ├── 0824785.bin
    │   │       │   │       ├── 0824786.bin
    │   │       │   │       ├── 0824787.bin
    │   │       │   │       ├── 0824788.bin
    │   │       │   │       ├── 0824789.bin
    │   │       │   │       ├── 0824790.bin
    │   │       │   │       ├── 0824791.bin
    │   │       │   │       ├── 0824792.bin
    │   │       │   │       ├── 0824793.bin
    │   │       │   │       ├── 0824794.bin
    │   │       │   │       ├── 0824795.bin
    │   │       │   │       ├── 0824796.bin
    │   │       │   │       ├── 0824797.bin
    │   │       │   │       ├── 0824798.bin
    │   │       │   │       ├── 0824799.bin
    │   │       │   │       ├── 0824800.bin
    │   │       │   │       ├── 0824801.bin
    │   │       │   │       ├── 0824802.bin
    │   │       │   │       ├── 0824803.bin
    │   │       │   │       ├── 0824804.bin
    │   │       │   │       ├── 0824805.bin
    │   │       │   │       ├── 0824806.bin
    │   │       │   │       ├── 0824807.bin
    │   │       │   │       ├── 0824808.bin
    │   │       │   │       ├── 0824809.bin
    │   │       │   │       ├── 0824810.bin
    │   │       │   │       ├── 0824811.bin
    │   │       │   │       ├── 0824812.bin
    │   │       │   │       ├── 0824813.bin
    │   │       │   │       ├── 0824814.bin
    │   │       │   │       ├── 0824815.bin
    │   │       │   │       ├── 0824816.bin
    │   │       │   │       ├── 0824817.bin
    │   │       │   │       ├── 0824818.bin
    │   │       │   │       ├── 0824819.bin
    │   │       │   │       ├── 0824820.bin
    │   │       │   │       ├── 0824821.bin
    │   │       │   │       ├── 0824822.bin
    │   │       │   │       ├── 0824823.bin
    │   │       │   │       ├── 0824824.bin
    │   │       │   │       ├── 0824825.bin
    │   │       │   │       ├── 0824826.bin
    │   │       │   │       ├── 0824827.bin
    │   │       │   │       ├── 0824828.bin
    │   │       │   │       ├── 0824829.bin
    │   │       │   │       ├── 0824830.bin
    │   │       │   │       ├── 0824831.bin
    │   │       │   │       ├── 0824832.bin
    │   │       │   │       ├── 0824833.bin
    │   │       │   │       ├── 0824834.bin
    │   │       │   │       ├── 0824835.bin
    │   │       │   │       ├── 0824836.bin
    │   │       │   │       ├── 0824837.bin
    │   │       │   │       ├── 0824838.bin
    │   │       │   │       ├── 0824839.bin
    │   │       │   │       ├── 0824840.bin
    │   │       │   │       ├── 0824841.bin
    │   │       │   │       ├── 0824842.bin
    │   │       │   │       ├── 0824843.bin
    │   │       │   │       ├── 0824844.bin
    │   │       │   │       ├── 0824845.bin
    │   │       │   │       ├── 0824846.bin
    │   │       │   │       ├── 0824847.bin
    │   │       │   │       ├── 0824848.bin
    │   │       │   │       ├── 0824849.bin
    │   │       │   │       ├── 0824850.bin
    │   │       │   │       ├── 0824851.bin
    │   │       │   │       ├── 0824852.bin
    │   │       │   │       ├── 0824853.bin
    │   │       │   │       ├── 0824854.bin
    │   │       │   │       ├── 0824855.bin
    │   │       │   │       ├── 0824856.bin
    │   │       │   │       ├── 0824857.bin
    │   │       │   │       ├── 0824858.bin
    │   │       │   │       ├── 0824859.bin
    │   │       │   │       ├── 0824860.bin
    │   │       │   │       ├── 0824861.bin
    │   │       │   │       ├── 0824862.bin
    │   │       │   │       ├── 0824863.bin
    │   │       │   │       ├── 0824864.bin
    │   │       │   │       ├── 0824865.bin
    │   │       │   │       ├── 0824866.bin
    │   │       │   │       ├── 0824867.bin
    │   │       │   │       ├── 0824868.bin
    │   │       │   │       ├── 0824869.bin
    │   │       │   │       ├── 0824870.bin
    │   │       │   │       ├── 0824871.bin
    │   │       │   │       ├── 0824872.bin
    │   │       │   │       ├── 0824873.bin
    │   │       │   │       ├── 0824874.bin
    │   │       │   │       ├── 0824875.bin
    │   │       │   │       ├── 0824876.bin
    │   │       │   │       ├── 0824877.bin
    │   │       │   │       ├── 0824878.bin
    │   │       │   │       ├── 0824879.bin
    │   │       │   │       ├── 0824880.bin
    │   │       │   │       ├── 0824881.bin
    │   │       │   │       ├── 0824882.bin
    │   │       │   │       ├── 0824883.bin
    │   │       │   │       ├── 0824884.bin
    │   │       │   │       ├── 0824885.bin
    │   │       │   │       ├── 0824886.bin
    │   │       │   │       ├── 0824887.bin
    │   │       │   │       ├── 0824888.bin
    │   │       │   │       ├── 0824889.bin
    │   │       │   │       ├── 0824890.bin
    │   │       │   │       ├── 0824891.bin
    │   │       │   │       ├── 0824892.bin
    │   │       │   │       ├── 0824893.bin
    │   │       │   │       ├── 0824894.bin
    │   │       │   │       ├── 0824895.bin
    │   │       │   │       ├── 0824896.bin
    │   │       │   │       ├── 0824897.bin
    │   │       │   │       ├── 0824898.bin
    │   │       │   │       ├── 0824899.bin
    │   │       │   │       ├── 0824900.bin
    │   │       │   │       ├── 0824901.bin
    │   │       │   │       ├── 0824902.bin
    │   │       │   │       ├── 0824903.bin
    │   │       │   │       ├── 0824904.bin
    │   │       │   │       ├── 0824905.bin
    │   │       │   │       ├── 0824906.bin
    │   │       │   │       ├── 0824907.bin
    │   │       │   │       ├── 0824908.bin
    │   │       │   │       ├── 0824909.bin
    │   │       │   │       ├── 0824910.bin
    │   │       │   │       ├── 0824911.bin
    │   │       │   │       ├── 0824912.bin
    │   │       │   │       ├── 0824913.bin
    │   │       │   │       ├── 0824914.bin
    │   │       │   │       ├── 0824915.bin
    │   │       │   │       ├── 0824916.bin
    │   │       │   │       ├── 0824917.bin
    │   │       │   │       ├── 0824918.bin
    │   │       │   │       ├── 0824919.bin
    │   │       │   │       ├── 0824920.bin
    │   │       │   │       ├── 0824921.bin
    │   │       │   │       ├── 0824922.bin
    │   │       │   │       ├── 0824923.bin
    │   │       │   │       ├── 0824924.bin
    │   │       │   │       ├── 0824925.bin
    │   │       │   │       ├── 0824926.bin
    │   │       │   │       ├── 0824927.bin
    │   │       │   │       ├── 0824928.bin
    │   │       │   │       ├── 0824929.bin
    │   │       │   │       ├── 0824930.bin
    │   │       │   │       ├── 0824931.bin
    │   │       │   │       ├── 0824932.bin
    │   │       │   │       ├── 0824933.bin
    │   │       │   │       ├── 0824934.bin
    │   │       │   │       ├── 0824935.bin
    │   │       │   │       ├── 0824936.bin
    │   │       │   │       ├── 0824937.bin
    │   │       │   │       ├── 0824938.bin
    │   │       │   │       ├── 0824939.bin
    │   │       │   │       ├── 0824940.bin
    │   │       │   │       ├── 0824941.bin
    │   │       │   │       ├── 0824942.bin
    │   │       │   │       ├── 0824943.bin
    │   │       │   │       ├── 0824944.bin
    │   │       │   │       ├── 0824945.bin
    │   │       │   │       ├── 0824946.bin
    │   │       │   │       ├── 0824947.bin
    │   │       │   │       ├── 0824948.bin
    │   │       │   │       ├── 0824949.bin
    │   │       │   │       ├── 0824950.bin
    │   │       │   │       ├── 0824951.bin
    │   │       │   │       ├── 0824952.bin
    │   │       │   │       ├── 0824953.bin
    │   │       │   │       ├── 0824954.bin
    │   │       │   │       ├── 0824955.bin
    │   │       │   │       ├── 0824956.bin
    │   │       │   │       ├── 0824957.bin
    │   │       │   │       ├── 0824958.bin
    │   │       │   │       ├── 0824959.bin
    │   │       │   │       ├── 0824960.bin
    │   │       │   │       ├── 0824961.bin
    │   │       │   │       ├── 0824962.bin
    │   │       │   │       ├── 0824963.bin
    │   │       │   │       ├── 0824964.bin
    │   │       │   │       ├── 0824965.bin
    │   │       │   │       ├── 0824966.bin
    │   │       │   │       ├── 0824967.bin
    │   │       │   │       ├── 0824968.bin
    │   │       │   │       ├── 0824969.bin
    │   │       │   │       ├── 0824970.bin
    │   │       │   │       ├── 0824971.bin
    │   │       │   │       ├── 0824972.bin
    │   │       │   │       ├── 0824973.bin
    │   │       │   │       ├── 0824974.bin
    │   │       │   │       ├── 0824975.bin
    │   │       │   │       ├── 0824976.bin
    │   │       │   │       ├── 0824977.bin
    │   │       │   │       ├── 0824978.bin
    │   │       │   │       ├── 0824979.bin
    │   │       │   │       ├── 0824980.bin
    │   │       │   │       ├── 0824981.bin
    │   │       │   │       ├── 0824982.bin
    │   │       │   │       ├── 0824983.bin
    │   │       │   │       ├── 0824984.bin
    │   │       │   │       ├── 0824985.bin
    │   │       │   │       ├── 0824986.bin
    │   │       │   │       ├── 0824987.bin
    │   │       │   │       ├── 0824988.bin
    │   │       │   │       ├── 0824989.bin
    │   │       │   │       ├── 0824990.bin
    │   │       │   │       ├── 0824991.bin
    │   │       │   │       ├── 0824992.bin
    │   │       │   │       ├── 0824993.bin
    │   │       │   │       ├── 0824994.bin
    │   │       │   │       ├── 0824995.bin
    │   │       │   │       ├── 0824996.bin
    │   │       │   │       ├── 0824997.bin
    │   │       │   │       ├── 0824998.bin
    │   │       │   │       ├── 0824999.bin
    │   │       │   │       ├── 0825000.bin
    │   │       │   │       ├── 0825001.bin
    │   │       │   │       ├── 0825002.bin
    │   │       │   │       ├── 0825003.bin
    │   │       │   │       ├── 0825004.bin
    │   │       │   │       ├── 0825005.bin
    │   │       │   │       ├── 0825006.bin
    │   │       │   │       ├── 0825007.bin
    │   │       │   │       ├── 0825008.bin
    │   │       │   │       ├── 0825009.bin
    │   │       │   │       ├── 0825010.bin
    │   │       │   │       ├── 0825011.bin
    │   │       │   │       ├── 0825012.bin
    │   │       │   │       ├── 0825013.bin
    │   │       │   │       ├── 0825014.bin
    │   │       │   │       ├── 0825015.bin
    │   │       │   │       ├── 0825016.bin
    │   │       │   │       ├── 0825017.bin
    │   │       │   │       ├── 0825018.bin
    │   │       │   │       ├── 0825019.bin
    │   │       │   │       ├── 0825020.bin
    │   │       │   │       ├── 0825021.bin
    │   │       │   │       ├── 0825022.bin
    │   │       │   │       ├── 0825023.bin
    │   │       │   │       ├── 0825024.bin
    │   │       │   │       ├── 0825025.bin
    │   │       │   │       ├── 0825026.bin
    │   │       │   │       ├── 0825027.bin
    │   │       │   │       ├── 0825028.bin
    │   │       │   │       ├── 0825029.bin
    │   │       │   │       ├── 0825030.bin
    │   │       │   │       ├── 0825031.bin
    │   │       │   │       ├── 0825032.bin
    │   │       │   │       ├── 0825033.bin
    │   │       │   │       ├── 0825034.bin
    │   │       │   │       ├── 0825035.bin
    │   │       │   │       ├── 0825036.bin
    │   │       │   │       ├── 0825037.bin
    │   │       │   │       ├── 0825038.bin
    │   │       │   │       ├── 0825039.bin
    │   │       │   │       ├── 0825040.bin
    │   │       │   │       ├── 0825041.bin
    │   │       │   │       ├── 0825042.bin
    │   │       │   │       ├── 0825043.bin
    │   │       │   │       ├── 0825044.bin
    │   │       │   │       ├── 0825045.bin
    │   │       │   │       ├── 0825046.bin
    │   │       │   │       ├── 0825047.bin
    │   │       │   │       ├── 0825048.bin
    │   │       │   │       ├── 0825049.bin
    │   │       │   │       ├── 0825050.bin
    │   │       │   │       ├── 0825051.bin
    │   │       │   │       ├── 0825052.bin
    │   │       │   │       ├── 0825053.bin
    │   │       │   │       ├── 0825054.bin
    │   │       │   │       ├── 0825055.bin
    │   │       │   │       ├── 0825056.bin
    │   │       │   │       ├── 0825057.bin
    │   │       │   │       ├── 0825058.bin
    │   │       │   │       ├── 0825059.bin
    │   │       │   │       ├── 0825060.bin
    │   │       │   │       ├── 0825061.bin
    │   │       │   │       ├── 0825062.bin
    │   │       │   │       ├── 0825063.bin
    │   │       │   │       ├── 0825064.bin
    │   │       │   │       ├── 0825065.bin
    │   │       │   │       ├── 0825066.bin
    │   │       │   │       ├── 0825067.bin
    │   │       │   │       ├── 0825068.bin
    │   │       │   │       ├── 0825069.bin
    │   │       │   │       ├── 0825070.bin
    │   │       │   │       ├── 0825071.bin
    │   │       │   │       ├── 0825072.bin
    │   │       │   │       ├── 0825073.bin
    │   │       │   │       ├── 0825074.bin
    │   │       │   │       ├── 0825075.bin
    │   │       │   │       ├── 0825076.bin
    │   │       │   │       ├── 0825077.bin
    │   │       │   │       ├── 0825078.bin
    │   │       │   │       ├── 0825079.bin
    │   │       │   │       ├── 0825080.bin
    │   │       │   │       ├── 0825081.bin
    │   │       │   │       ├── 0825082.bin
    │   │       │   │       ├── 0825083.bin
    │   │       │   │       ├── 0825084.bin
    │   │       │   │       ├── 0825085.bin
    │   │       │   │       ├── 0825086.bin
    │   │       │   │       ├── 0825087.bin
    │   │       │   │       ├── 0825088.bin
    │   │       │   │       ├── 0825089.bin
    │   │       │   │       ├── 0825090.bin
    │   │       │   │       ├── 0825091.bin
    │   │       │   │       ├── 0825092.bin
    │   │       │   │       ├── 0825093.bin
    │   │       │   │       ├── 0825094.bin
    │   │       │   │       ├── 0825095.bin
    │   │       │   │       ├── 0825096.bin
    │   │       │   │       ├── 0825097.bin
    │   │       │   │       ├── 0825098.bin
    │   │       │   │       ├── 0825099.bin
    │   │       │   │       ├── 0825100.bin
    │   │       │   │       ├── 0825101.bin
    │   │       │   │       ├── 0825102.bin
    │   │       │   │       ├── 0825103.bin
    │   │       │   │       ├── 0825104.bin
    │   │       │   │       ├── 0825105.bin
    │   │       │   │       ├── 0825106.bin
    │   │       │   │       ├── 0825107.bin
    │   │       │   │       ├── 0825108.bin
    │   │       │   │       ├── 0825109.bin
    │   │       │   │       ├── 0825110.bin
    │   │       │   │       ├── 0825111.bin
    │   │       │   │       ├── 0825112.bin
    │   │       │   │       ├── 0825113.bin
    │   │       │   │       ├── 0825114.bin
    │   │       │   │       ├── 0825115.bin
    │   │       │   │       ├── 0825116.bin
    │   │       │   │       ├── 0825117.bin
    │   │       │   │       ├── 0825118.bin
    │   │       │   │       ├── 0825119.bin
    │   │       │   │       ├── 0825120.bin
    │   │       │   │       ├── 0825121.bin
    │   │       │   │       ├── 0825122.bin
    │   │       │   │       ├── 0825123.bin
    │   │       │   │       ├── 0825124.bin
    │   │       │   │       ├── 0825125.bin
    │   │       │   │       ├── 0825126.bin
    │   │       │   │       ├── 0825127.bin
    │   │       │   │       ├── 0825128.bin
    │   │       │   │       ├── 0825129.bin
    │   │       │   │       ├── 0825130.bin
    │   │       │   │       ├── 0825131.bin
    │   │       │   │       ├── 0825132.bin
    │   │       │   │       ├── 0825133.bin
    │   │       │   │       ├── 0825134.bin
    │   │       │   │       ├── 0825135.bin
    │   │       │   │       ├── 0825136.bin
    │   │       │   │       ├── 0825137.bin
    │   │       │   │       ├── 0825138.bin
    │   │       │   │       ├── 0825139.bin
    │   │       │   │       ├── 0825140.bin
    │   │       │   │       ├── 0825141.bin
    │   │       │   │       ├── 0825142.bin
    │   │       │   │       ├── 0825143.bin
    │   │       │   │       ├── 0825144.bin
    │   │       │   │       ├── 0825145.bin
    │   │       │   │       ├── 0825146.bin
    │   │       │   │       ├── 0825147.bin
    │   │       │   │       ├── 0825148.bin
    │   │       │   │       ├── 0825149.bin
    │   │       │   │       ├── 0825150.bin
    │   │       │   │       ├── 0825151.bin
    │   │       │   │       ├── 0825152.bin
    │   │       │   │       ├── 0825153.bin
    │   │       │   │       ├── 0825154.bin
    │   │       │   │       ├── 0825155.bin
    │   │       │   │       ├── 0825156.bin
    │   │       │   │       ├── 0825157.bin
    │   │       │   │       ├── 0825158.bin
    │   │       │   │       ├── 0825159.bin
    │   │       │   │       ├── 0825160.bin
    │   │       │   │       ├── 0825161.bin
    │   │       │   │       ├── 0825162.bin
    │   │       │   │       ├── 0825163.bin
    │   │       │   │       ├── 0825164.bin
    │   │       │   │       ├── 0825165.bin
    │   │       │   │       ├── 0825166.bin
    │   │       │   │       ├── 0825167.bin
    │   │       │   │       ├── 0825168.bin
    │   │       │   │       ├── 0825169.bin
    │   │       │   │       ├── 0825170.bin
    │   │       │   │       ├── 0825171.bin
    │   │       │   │       ├── 0825172.bin
    │   │       │   │       ├── 0825173.bin
    │   │       │   │       ├── 0825174.bin
    │   │       │   │       ├── 0825175.bin
    │   │       │   │       ├── 0825176.bin
    │   │       │   │       ├── 0825177.bin
    │   │       │   │       ├── 0825178.bin
    │   │       │   │       ├── 0825179.bin
    │   │       │   │       ├── 0825180.bin
    │   │       │   │       ├── 0825181.bin
    │   │       │   │       ├── 0825182.bin
    │   │       │   │       ├── 0825183.bin
    │   │       │   │       ├── 0825184.bin
    │   │       │   │       ├── 0825185.bin
    │   │       │   │       ├── 0825186.bin
    │   │       │   │       ├── 0825187.bin
    │   │       │   │       ├── 0825188.bin
    │   │       │   │       ├── 0825189.bin
    │   │       │   │       ├── 0825190.bin
    │   │       │   │       ├── 0825191.bin
    │   │       │   │       ├── 0825192.bin
    │   │       │   │       ├── 0825193.bin
    │   │       │   │       ├── 0825194.bin
    │   │       │   │       ├── 0825195.bin
    │   │       │   │       ├── 0825196.bin
    │   │       │   │       ├── 0825197.bin
    │   │       │   │       ├── 0825198.bin
    │   │       │   │       ├── 0825199.bin
    │   │       │   │       ├── 0825200.bin
    │   │       │   │       ├── 0825201.bin
    │   │       │   │       ├── 0825202.bin
    │   │       │   │       ├── 0825203.bin
    │   │       │   │       ├── 0825204.bin
    │   │       │   │       ├── 0825205.bin
    │   │       │   │       ├── 0825206.bin
    │   │       │   │       ├── 0825207.bin
    │   │       │   │       ├── 0825208.bin
    │   │       │   │       ├── 0825209.bin
    │   │       │   │       ├── 0825210.bin
    │   │       │   │       ├── 0825211.bin
    │   │       │   │       ├── 0825212.bin
    │   │       │   │       ├── 0825213.bin
    │   │       │   │       ├── 0825214.bin
    │   │       │   │       ├── 0825215.bin
    │   │       │   │       ├── 0825216.bin
    │   │       │   │       ├── 0825217.bin
    │   │       │   │       ├── 0825218.bin
    │   │       │   │       ├── 0825219.bin
    │   │       │   │       ├── 0825220.bin
    │   │       │   │       ├── 0825221.bin
    │   │       │   │       ├── 0825222.bin
    │   │       │   │       ├── 0825223.bin
    │   │       │   │       ├── 0825224.bin
    │   │       │   │       ├── 0825225.bin
    │   │       │   │       ├── 0825226.bin
    │   │       │   │       ├── 0825227.bin
    │   │       │   │       ├── 0825228.bin
    │   │       │   │       ├── 0825229.bin
    │   │       │   │       ├── 0825230.bin
    │   │       │   │       ├── 0825231.bin
    │   │       │   │       ├── 0825232.bin
    │   │       │   │       ├── 0825233.bin
    │   │       │   │       ├── 0825234.bin
    │   │       │   │       ├── 0825235.bin
    │   │       │   │       ├── 0825236.bin
    │   │       │   │       ├── 0825237.bin
    │   │       │   │       ├── 0825238.bin
    │   │       │   │       ├── 0825239.bin
    │   │       │   │       ├── 0825240.bin
    │   │       │   │       ├── 0825241.bin
    │   │       │   │       ├── 0825242.bin
    │   │       │   │       ├── 0825243.bin
    │   │       │   │       ├── 0825244.bin
    │   │       │   │       ├── 0825245.bin
    │   │       │   │       ├── 0825246.bin
    │   │       │   │       ├── 0825247.bin
    │   │       │   │       ├── 0825248.bin
    │   │       │   │       ├── 0825249.bin
    │   │       │   │       ├── 0825250.bin
    │   │       │   │       ├── 0825251.bin
    │   │       │   │       ├── 0825252.bin
    │   │       │   │       ├── 0825253.bin
    │   │       │   │       ├── 0825254.bin
    │   │       │   │       ├── 0825255.bin
    │   │       │   │       ├── 0825256.bin
    │   │       │   │       ├── 0825257.bin
    │   │       │   │       ├── 0825258.bin
    │   │       │   │       ├── 0825259.bin
    │   │       │   │       ├── 0825260.bin
    │   │       │   │       ├── 0825261.bin
    │   │       │   │       ├── 0825262.bin
    │   │       │   │       ├── 0825263.bin
    │   │       │   │       ├── 0825264.bin
    │   │       │   │       ├── 0825265.bin
    │   │       │   │       ├── 0825266.bin
    │   │       │   │       ├── 0825267.bin
    │   │       │   │       ├── 0825268.bin
    │   │       │   │       ├── 0825269.bin
    │   │       │   │       ├── 0825270.bin
    │   │       │   │       ├── 0825271.bin
    │   │       │   │       ├── 0825272.bin
    │   │       │   │       ├── 0825273.bin
    │   │       │   │       ├── 0825274.bin
    │   │       │   │       ├── 0825275.bin
    │   │       │   │       ├── 0825276.bin
    │   │       │   │       ├── 0825277.bin
    │   │       │   │       ├── 0825278.bin
    │   │       │   │       ├── 0825279.bin
    │   │       │   │       ├── 0825280.bin
    │   │       │   │       ├── 0825281.bin
    │   │       │   │       ├── 0825282.bin
    │   │       │   │       ├── 0825283.bin
    │   │       │   │       ├── 0825284.bin
    │   │       │   │       ├── 0825285.bin
    │   │       │   │       ├── 0825286.bin
    │   │       │   │       ├── 0825287.bin
    │   │       │   │       ├── 0825288.bin
    │   │       │   │       ├── 0825289.bin
    │   │       │   │       ├── 0825290.bin
    │   │       │   │       ├── 0825291.bin
    │   │       │   │       ├── 0825292.bin
    │   │       │   │       ├── 0825293.bin
    │   │       │   │       ├── 0825294.bin
    │   │       │   │       ├── 0825295.bin
    │   │       │   │       ├── 0825296.bin
    │   │       │   │       ├── 0825297.bin
    │   │       │   │       ├── 0825298.bin
    │   │       │   │       ├── 0825299.bin
    │   │       │   │       ├── 0825300.bin
    │   │       │   │       ├── 0825301.bin
    │   │       │   │       ├── 0825302.bin
    │   │       │   │       ├── 0825303.bin
    │   │       │   │       ├── 0825304.bin
    │   │       │   │       ├── 0825305.bin
    │   │       │   │       ├── 0825306.bin
    │   │       │   │       ├── 0825307.bin
    │   │       │   │       ├── 0825308.bin
    │   │       │   │       ├── 0825309.bin
    │   │       │   │       ├── 0825310.bin
    │   │       │   │       ├── 0825311.bin
    │   │       │   │       ├── 0825312.bin
    │   │       │   │       ├── 0825313.bin
    │   │       │   │       ├── 0825314.bin
    │   │       │   │       ├── 0825315.bin
    │   │       │   │       ├── 0825316.bin
    │   │       │   │       ├── 0825317.bin
    │   │       │   │       ├── 0825318.bin
    │   │       │   │       ├── 0825319.bin
    │   │       │   │       ├── 0825320.bin
    │   │       │   │       ├── 0825321.bin
    │   │       │   │       ├── 0825322.bin
    │   │       │   │       ├── 0825323.bin
    │   │       │   │       ├── 0825324.bin
    │   │       │   │       ├── 0825325.bin
    │   │       │   │       ├── 0825326.bin
    │   │       │   │       ├── 0825327.bin
    │   │       │   │       ├── 0825328.bin
    │   │       │   │       ├── 0825329.bin
    │   │       │   │       ├── 0825330.bin
    │   │       │   │       ├── 0825331.bin
    │   │       │   │       ├── 0825332.bin
    │   │       │   │       ├── 0825333.bin
    │   │       │   │       ├── 0825334.bin
    │   │       │   │       ├── 0825335.bin
    │   │       │   │       ├── 0825336.bin
    │   │       │   │       ├── 0825337.bin
    │   │       │   │       ├── 0825338.bin
    │   │       │   │       ├── 0825339.bin
    │   │       │   │       ├── 0825340.bin
    │   │       │   │       ├── 0825341.bin
    │   │       │   │       ├── 0825342.bin
    │   │       │   │       ├── 0825343.bin
    │   │       │   │       ├── 0825344.bin
    │   │       │   │       ├── 0825345.bin
    │   │       │   │       ├── 0825346.bin
    │   │       │   │       ├── 0825347.bin
    │   │       │   │       ├── 0825348.bin
    │   │       │   │       ├── 0825349.bin
    │   │       │   │       ├── 0825350.bin
    │   │       │   │       ├── 0825351.bin
    │   │       │   │       ├── 0825352.bin
    │   │       │   │       ├── 0825353.bin
    │   │       │   │       ├── 0825354.bin
    │   │       │   │       ├── 0825355.bin
    │   │       │   │       ├── 0825356.bin
    │   │       │   │       ├── 0825357.bin
    │   │       │   │       ├── 0825358.bin
    │   │       │   │       ├── 0825359.bin
    │   │       │   │       ├── 0825360.bin
    │   │       │   │       ├── 0825361.bin
    │   │       │   │       ├── 0825362.bin
    │   │       │   │       ├── 0825363.bin
    │   │       │   │       ├── 0825364.bin
    │   │       │   │       ├── 0825365.bin
    │   │       │   │       ├── 0825366.bin
    │   │       │   │       ├── 0825367.bin
    │   │       │   │       ├── 0825368.bin
    │   │       │   │       ├── 0825369.bin
    │   │       │   │       ├── 0825370.bin
    │   │       │   │       ├── 0825371.bin
    │   │       │   │       ├── 0825372.bin
    │   │       │   │       ├── 0825373.bin
    │   │       │   │       ├── 0825374.bin
    │   │       │   │       ├── 0825375.bin
    │   │       │   │       ├── 0825376.bin
    │   │       │   │       ├── 0825377.bin
    │   │       │   │       ├── 0825378.bin
    │   │       │   │       ├── 0825379.bin
    │   │       │   │       ├── 0825380.bin
    │   │       │   │       ├── 0825381.bin
    │   │       │   │       ├── 0825382.bin
    │   │       │   │       ├── 0825383.bin
    │   │       │   │       ├── 0825384.bin
    │   │       │   │       ├── 0825385.bin
    │   │       │   │       ├── 0825386.bin
    │   │       │   │       ├── 0825387.bin
    │   │       │   │       ├── 0825388.bin
    │   │       │   │       ├── 0825389.bin
    │   │       │   │       ├── 0825390.bin
    │   │       │   │       ├── 0825391.bin
    │   │       │   │       ├── 0825392.bin
    │   │       │   │       ├── 0825393.bin
    │   │       │   │       ├── 0825394.bin
    │   │       │   │       ├── 0825395.bin
    │   │       │   │       ├── 0825396.bin
    │   │       │   │       ├── 0825397.bin
    │   │       │   │       ├── 0825398.bin
    │   │       │   │       ├── 0825399.bin
    │   │       │   │       ├── 0825400.bin
    │   │       │   │       ├── 0825401.bin
    │   │       │   │       ├── 0825402.bin
    │   │       │   │       ├── 0825403.bin
    │   │       │   │       ├── 0825404.bin
    │   │       │   │       ├── 0825405.bin
    │   │       │   │       ├── 0825406.bin
    │   │       │   │       ├── 0825407.bin
    │   │       │   │       ├── 0825408.bin
    │   │       │   │       ├── 0825409.bin
    │   │       │   │       ├── 0825410.bin
    │   │       │   │       ├── 0825411.bin
    │   │       │   │       ├── 0825412.bin
    │   │       │   │       ├── 0825413.bin
    │   │       │   │       ├── 0825414.bin
    │   │       │   │       ├── 0825415.bin
    │   │       │   │       ├── 0825416.bin
    │   │       │   │       ├── 0825417.bin
    │   │       │   │       ├── 0825418.bin
    │   │       │   │       ├── 0825419.bin
    │   │       │   │       ├── 0825420.bin
    │   │       │   │       ├── 0825421.bin
    │   │       │   │       ├── 0825422.bin
    │   │       │   │       ├── 0825423.bin
    │   │       │   │       ├── 0825424.bin
    │   │       │   │       ├── 0825425.bin
    │   │       │   │       ├── 0825426.bin
    │   │       │   │       ├── 0825427.bin
    │   │       │   │       ├── 0825428.bin
    │   │       │   │       ├── 0825429.bin
    │   │       │   │       ├── 0825430.bin
    │   │       │   │       ├── 0825431.bin
    │   │       │   │       ├── 0825432.bin
    │   │       │   │       ├── 0825433.bin
    │   │       │   │       ├── 0825434.bin
    │   │       │   │       ├── 0825435.bin
    │   │       │   │       ├── 0825436.bin
    │   │       │   │       ├── 0825437.bin
    │   │       │   │       ├── 0825438.bin
    │   │       │   │       ├── 0825439.bin
    │   │       │   │       ├── 0825440.bin
    │   │       │   │       ├── 0825441.bin
    │   │       │   │       ├── 0825442.bin
    │   │       │   │       ├── 0825443.bin
    │   │       │   │       ├── 0825444.bin
    │   │       │   │       ├── 0825445.bin
    │   │       │   │       ├── 0825446.bin
    │   │       │   │       ├── 0825447.bin
    │   │       │   │       ├── 0825448.bin
    │   │       │   │       ├── 0825449.bin
    │   │       │   │       ├── 0825450.bin
    │   │       │   │       ├── 0825451.bin
    │   │       │   │       ├── 0825452.bin
    │   │       │   │       ├── 0825453.bin
    │   │       │   │       ├── 0825454.bin
    │   │       │   │       ├── 0825455.bin
    │   │       │   │       ├── 0825456.bin
    │   │       │   │       ├── 0825457.bin
    │   │       │   │       ├── 0825458.bin
    │   │       │   │       ├── 0825459.bin
    │   │       │   │       ├── 0825460.bin
    │   │       │   │       ├── 0825461.bin
    │   │       │   │       ├── 0825462.bin
    │   │       │   │       ├── 0825463.bin
    │   │       │   │       ├── 0825464.bin
    │   │       │   │       ├── 0825465.bin
    │   │       │   │       ├── 0825466.bin
    │   │       │   │       ├── 0825467.bin
    │   │       │   │       ├── 0825468.bin
    │   │       │   │       ├── 0825469.bin
    │   │       │   │       ├── 0825470.bin
    │   │       │   │       ├── 0825471.bin
    │   │       │   │       ├── 0825472.bin
    │   │       │   │       ├── 0825473.bin
    │   │       │   │       ├── 0825474.bin
    │   │       │   │       ├── 0825475.bin
    │   │       │   │       ├── 0825476.bin
    │   │       │   │       ├── 0825477.bin
    │   │       │   │       ├── 0825478.bin
    │   │       │   │       ├── 0825479.bin
    │   │       │   │       ├── 0825480.bin
    │   │       │   │       ├── 0825481.bin
    │   │       │   │       ├── 0825482.bin
    │   │       │   │       ├── 0825483.bin
    │   │       │   │       ├── 0825484.bin
    │   │       │   │       ├── 0825485.bin
    │   │       │   │       ├── 0825486.bin
    │   │       │   │       ├── 0825487.bin
    │   │       │   │       ├── 0825488.bin
    │   │       │   │       ├── 0825489.bin
    │   │       │   │       ├── 0825490.bin
    │   │       │   │       ├── 0825491.bin
    │   │       │   │       ├── 0825492.bin
    │   │       │   │       ├── 0825493.bin
    │   │       │   │       ├── 0825494.bin
    │   │       │   │       ├── 0825495.bin
    │   │       │   │       ├── 0825496.bin
    │   │       │   │       ├── 0825497.bin
    │   │       │   │       ├── 0825498.bin
    │   │       │   │       ├── 0825499.bin
    │   │       │   │       ├── 0825500.bin
    │   │       │   │       ├── 0825501.bin
    │   │       │   │       ├── 0825502.bin
    │   │       │   │       ├── 0825503.bin
    │   │       │   │       ├── 0825504.bin
    │   │       │   │       ├── 0825505.bin
    │   │       │   │       ├── 0825506.bin
    │   │       │   │       ├── 0825507.bin
    │   │       │   │       ├── 0825508.bin
    │   │       │   │       ├── 0825509.bin
    │   │       │   │       ├── 0825510.bin
    │   │       │   │       ├── 0825511.bin
    │   │       │   │       ├── 0825512.bin
    │   │       │   │       ├── 0825513.bin
    │   │       │   │       ├── 0825514.bin
    │   │       │   │       ├── 0825515.bin
    │   │       │   │       ├── 0825516.bin
    │   │       │   │       ├── 0825517.bin
    │   │       │   │       ├── 0825518.bin
    │   │       │   │       ├── 0825519.bin
    │   │       │   │       ├── 0825520.bin
    │   │       │   │       ├── 0825521.bin
    │   │       │   │       ├── 0825522.bin
    │   │       │   │       ├── 0825523.bin
    │   │       │   │       ├── 0825524.bin
    │   │       │   │       ├── 0825525.bin
    │   │       │   │       ├── 0825526.bin
    │   │       │   │       ├── 0825527.bin
    │   │       │   │       ├── 0825528.bin
    │   │       │   │       ├── 0825529.bin
    │   │       │   │       ├── 0825530.bin
    │   │       │   │       ├── 0825531.bin
    │   │       │   │       ├── 0825532.bin
    │   │       │   │       ├── 0825533.bin
    │   │       │   │       ├── 0825534.bin
    │   │       │   │       ├── 0825535.bin
    │   │       │   │       ├── 0825536.bin
    │   │       │   │       ├── 0825537.bin
    │   │       │   │       ├── 0825538.bin
    │   │       │   │       ├── 0825539.bin
    │   │       │   │       ├── 0825540.bin
    │   │       │   │       ├── 0825541.bin
    │   │       │   │       ├── 0825542.bin
    │   │       │   │       ├── 0825543.bin
    │   │       │   │       ├── 0825544.bin
    │   │       │   │       ├── 0825545.bin
    │   │       │   │       ├── 0825546.bin
    │   │       │   │       ├── 0825547.bin
    │   │       │   │       ├── 0825548.bin
    │   │       │   │       ├── 0825549.bin
    │   │       │   │       ├── 0825550.bin
    │   │       │   │       ├── 0825551.bin
    │   │       │   │       ├── 0825552.bin
    │   │       │   │       ├── 0825553.bin
    │   │       │   │       ├── 0825554.bin
    │   │       │   │       ├── 0825555.bin
    │   │       │   │       ├── 0825556.bin
    │   │       │   │       ├── 0825557.bin
    │   │       │   │       ├── 0825558.bin
    │   │       │   │       ├── 0825559.bin
    │   │       │   │       ├── 0825560.bin
    │   │       │   │       ├── 0825561.bin
    │   │       │   │       ├── 0825562.bin
    │   │       │   │       ├── 0825563.bin
    │   │       │   │       ├── 0825564.bin
    │   │       │   │       ├── 0825565.bin
    │   │       │   │       ├── 0825566.bin
    │   │       │   │       ├── 0825567.bin
    │   │       │   │       ├── 0825568.bin
    │   │       │   │       ├── 0825569.bin
    │   │       │   │       ├── 0825570.bin
    │   │       │   │       ├── 0825571.bin
    │   │       │   │       ├── 0825572.bin
    │   │       │   │       ├── 0825573.bin
    │   │       │   │       ├── 0825574.bin
    │   │       │   │       ├── 0825575.bin
    │   │       │   │       ├── 0825576.bin
    │   │       │   │       ├── 0825577.bin
    │   │       │   │       ├── 0825578.bin
    │   │       │   │       ├── 0825579.bin
    │   │       │   │       ├── 0825580.bin
    │   │       │   │       ├── 0825581.bin
    │   │       │   │       ├── 0825582.bin
    │   │       │   │       ├── 0825583.bin
    │   │       │   │       ├── 0825584.bin
    │   │       │   │       ├── 0825585.bin
    │   │       │   │       ├── 0825586.bin
    │   │       │   │       ├── 0825587.bin
    │   │       │   │       ├── 0825588.bin
    │   │       │   │       ├── 0825589.bin
    │   │       │   │       ├── 0825590.bin
    │   │       │   │       ├── 0825591.bin
    │   │       │   │       ├── 0825592.bin
    │   │       │   │       ├── 0825593.bin
    │   │       │   │       ├── 0825594.bin
    │   │       │   │       ├── 0825595.bin
    │   │       │   │       ├── 0825596.bin
    │   │       │   │       ├── 0825597.bin
    │   │       │   │       ├── 0825598.bin
    │   │       │   │       ├── 0825599.bin
    │   │       │   │       ├── 0825600.bin
    │   │       │   │       ├── 0825601.bin
    │   │       │   │       ├── 0825602.bin
    │   │       │   │       ├── 0825603.bin
    │   │       │   │       ├── 0825604.bin
    │   │       │   │       ├── 0825605.bin
    │   │       │   │       ├── 0825606.bin
    │   │       │   │       ├── 0825607.bin
    │   │       │   │       ├── 0825608.bin
    │   │       │   │       ├── 0825609.bin
    │   │       │   │       ├── 0825610.bin
    │   │       │   │       ├── 0825611.bin
    │   │       │   │       ├── 0825612.bin
    │   │       │   │       ├── 0825613.bin
    │   │       │   │       ├── 0825614.bin
    │   │       │   │       ├── 0825615.bin
    │   │       │   │       ├── 0825616.bin
    │   │       │   │       ├── 0825617.bin
    │   │       │   │       ├── 0825618.bin
    │   │       │   │       ├── 0825619.bin
    │   │       │   │       ├── 0825620.bin
    │   │       │   │       ├── 0825621.bin
    │   │       │   │       ├── 0825622.bin
    │   │       │   │       ├── 0825623.bin
    │   │       │   │       ├── 0825624.bin
    │   │       │   │       ├── 0825625.bin
    │   │       │   │       ├── 0825626.bin
    │   │       │   │       ├── 0825627.bin
    │   │       │   │       ├── 0825628.bin
    │   │       │   │       ├── 0825629.bin
    │   │       │   │       ├── 0825630.bin
    │   │       │   │       ├── 0825631.bin
    │   │       │   │       ├── 0825632.bin
    │   │       │   │       ├── 0825633.bin
    │   │       │   │       ├── 0825634.bin
    │   │       │   │       ├── 0825635.bin
    │   │       │   │       ├── 0825636.bin
    │   │       │   │       ├── 0825637.bin
    │   │       │   │       ├── 0825638.bin
    │   │       │   │       ├── 0825639.bin
    │   │       │   │       ├── 0825640.bin
    │   │       │   │       ├── 0825641.bin
    │   │       │   │       ├── 0825642.bin
    │   │       │   │       ├── 0825643.bin
    │   │       │   │       ├── 0825644.bin
    │   │       │   │       ├── 0825645.bin
    │   │       │   │       ├── 0825646.bin
    │   │       │   │       ├── 0825647.bin
    │   │       │   │       ├── 0825648.bin
    │   │       │   │       ├── 0825649.bin
    │   │       │   │       ├── 0825650.bin
    │   │       │   │       ├── 0825651.bin
    │   │       │   │       ├── 0825652.bin
    │   │       │   │       ├── 0825653.bin
    │   │       │   │       ├── 0825654.bin
    │   │       │   │       ├── 0825655.bin
    │   │       │   │       ├── 0825656.bin
    │   │       │   │       ├── 0825657.bin
    │   │       │   │       ├── 0825658.bin
    │   │       │   │       ├── 0825659.bin
    │   │       │   │       ├── 0825660.bin
    │   │       │   │       ├── 0825661.bin
    │   │       │   │       ├── 0825662.bin
    │   │       │   │       ├── 0825663.bin
    │   │       │   │       ├── 0825664.bin
    │   │       │   │       ├── 0825665.bin
    │   │       │   │       ├── 0825666.bin
    │   │       │   │       ├── 0825667.bin
    │   │       │   │       ├── 0825668.bin
    │   │       │   │       ├── 0825669.bin
    │   │       │   │       ├── 0825670.bin
    │   │       │   │       ├── 0825671.bin
    │   │       │   │       ├── 0825672.bin
    │   │       │   │       ├── 0825673.bin
    │   │       │   │       ├── 0825674.bin
    │   │       │   │       ├── 0825675.bin
    │   │       │   │       ├── 0825676.bin
    │   │       │   │       ├── 0825677.bin
    │   │       │   │       ├── 0825678.bin
    │   │       │   │       ├── 0825679.bin
    │   │       │   │       ├── 0825680.bin
    │   │       │   │       ├── 0825681.bin
    │   │       │   │       ├── 0825682.bin
    │   │       │   │       ├── 0825683.bin
    │   │       │   │       ├── 0825684.bin
    │   │       │   │       ├── 0825685.bin
    │   │       │   │       ├── 0825686.bin
    │   │       │   │       ├── 0825687.bin
    │   │       │   │       ├── 0825688.bin
    │   │       │   │       ├── 0825689.bin
    │   │       │   │       ├── 0825690.bin
    │   │       │   │       ├── 0825691.bin
    │   │       │   │       ├── 0825692.bin
    │   │       │   │       ├── 0825693.bin
    │   │       │   │       ├── 0825694.bin
    │   │       │   │       ├── 0825695.bin
    │   │       │   │       ├── 0825696.bin
    │   │       │   │       ├── 0825697.bin
    │   │       │   │       ├── 0825698.bin
    │   │       │   │       ├── 0825699.bin
    │   │       │   │       ├── 0825700.bin
    │   │       │   │       ├── 0825701.bin
    │   │       │   │       ├── 0825702.bin
    │   │       │   │       ├── 0825703.bin
    │   │       │   │       ├── 0825704.bin
    │   │       │   │       ├── 0825705.bin
    │   │       │   │       ├── 0825706.bin
    │   │       │   │       ├── 0825707.bin
    │   │       │   │       ├── 0825708.bin
    │   │       │   │       ├── 0825709.bin
    │   │       │   │       ├── 0825710.bin
    │   │       │   │       ├── 0825711.bin
    │   │       │   │       ├── 0825712.bin
    │   │       │   │       ├── 0825713.bin
    │   │       │   │       ├── 0825714.bin
    │   │       │   │       ├── 0825715.bin
    │   │       │   │       ├── 0825716.bin
    │   │       │   │       ├── 0825717.bin
    │   │       │   │       ├── 0825718.bin
    │   │       │   │       ├── 0825719.bin
    │   │       │   │       ├── 0825720.bin
    │   │       │   │       ├── 0825721.bin
    │   │       │   │       ├── 0825722.bin
    │   │       │   │       ├── 0825723.bin
    │   │       │   │       ├── 0825724.bin
    │   │       │   │       ├── 0825725.bin
    │   │       │   │       ├── 0825726.bin
    │   │       │   │       ├── 0825727.bin
    │   │       │   │       ├── 0825728.bin
    │   │       │   │       ├── 0825729.bin
    │   │       │   │       ├── 0825730.bin
    │   │       │   │       ├── 0825731.bin
    │   │       │   │       ├── 0825732.bin
    │   │       │   │       ├── 0825733.bin
    │   │       │   │       ├── 0825734.bin
    │   │       │   │       ├── 0825735.bin
    │   │       │   │       ├── 0825736.bin
    │   │       │   │       ├── 0825737.bin
    │   │       │   │       ├── 0825738.bin
    │   │       │   │       ├── 0825739.bin
    │   │       │   │       ├── 0825740.bin
    │   │       │   │       ├── 0825741.bin
    │   │       │   │       ├── 0825742.bin
    │   │       │   │       ├── 0825743.bin
    │   │       │   │       ├── 0825744.bin
    │   │       │   │       ├── 0825745.bin
    │   │       │   │       ├── 0825746.bin
    │   │       │   │       ├── 0825747.bin
    │   │       │   │       ├── 0825748.bin
    │   │       │   │       ├── 0825749.bin
    │   │       │   │       ├── 0825750.bin
    │   │       │   │       ├── 0825751.bin
    │   │       │   │       ├── 0825752.bin
    │   │       │   │       ├── 0825753.bin
    │   │       │   │       ├── 0825754.bin
    │   │       │   │       ├── 0825755.bin
    │   │       │   │       ├── 0825756.bin
    │   │       │   │       ├── 0825757.bin
    │   │       │   │       ├── 0825758.bin
    │   │       │   │       ├── 0825759.bin
    │   │       │   │       ├── 0825760.bin
    │   │       │   │       ├── 0825761.bin
    │   │       │   │       ├── 0825762.bin
    │   │       │   │       ├── 0825763.bin
    │   │       │   │       ├── 0825764.bin
    │   │       │   │       ├── 0825765.bin
    │   │       │   │       ├── 0825766.bin
    │   │       │   │       ├── 0825767.bin
    │   │       │   │       ├── 0825768.bin
    │   │       │   │       ├── 0825769.bin
    │   │       │   │       ├── 0825770.bin
    │   │       │   │       ├── 0825771.bin
    │   │       │   │       ├── 0825772.bin
    │   │       │   │       ├── 0825773.bin
    │   │       │   │       ├── 0825774.bin
    │   │       │   │       ├── 0825775.bin
    │   │       │   │       ├── 0825776.bin
    │   │       │   │       ├── 0825777.bin
    │   │       │   │       ├── 0825778.bin
    │   │       │   │       ├── 0825779.bin
    │   │       │   │       ├── 0825780.bin
    │   │       │   │       ├── 0825781.bin
    │   │       │   │       ├── 0825782.bin
    │   │       │   │       ├── 0825783.bin
    │   │       │   │       ├── 0825784.bin
    │   │       │   │       ├── 0825785.bin
    │   │       │   │       ├── 0825786.bin
    │   │       │   │       ├── 0825787.bin
    │   │       │   │       ├── 0825788.bin
    │   │       │   │       ├── 0825789.bin
    │   │       │   │       ├── 0825790.bin
    │   │       │   │       ├── 0825791.bin
    │   │       │   │       ├── 0825792.bin
    │   │       │   │       ├── 0825793.bin
    │   │       │   │       ├── 0825794.bin
    │   │       │   │       ├── 0825795.bin
    │   │       │   │       ├── 0825796.bin
    │   │       │   │       ├── 0825797.bin
    │   │       │   │       ├── 0825798.bin
    │   │       │   │       ├── 0825799.bin
    │   │       │   │       ├── 0825800.bin
    │   │       │   │       ├── 0825801.bin
    │   │       │   │       ├── 0825802.bin
    │   │       │   │       ├── 0825803.bin
    │   │       │   │       ├── 0825804.bin
    │   │       │   │       ├── 0825805.bin
    │   │       │   │       ├── 0825806.bin
    │   │       │   │       ├── 0825807.bin
    │   │       │   │       ├── 0825808.bin
    │   │       │   │       ├── 0825809.bin
    │   │       │   │       ├── 0825810.bin
    │   │       │   │       ├── 0825811.bin
    │   │       │   │       ├── 0825812.bin
    │   │       │   │       ├── 0825813.bin
    │   │       │   │       ├── 0825814.bin
    │   │       │   │       ├── 0825815.bin
    │   │       │   │       ├── 0825816.bin
    │   │       │   │       ├── 0825817.bin
    │   │       │   │       ├── 0825818.bin
    │   │       │   │       ├── 0825819.bin
    │   │       │   │       ├── 0825820.bin
    │   │       │   │       ├── 0825821.bin
    │   │       │   │       ├── 0825822.bin
    │   │       │   │       ├── 0825823.bin
    │   │       │   │       ├── 0825824.bin
    │   │       │   │       ├── 0825825.bin
    │   │       │   │       ├── 0825826.bin
    │   │       │   │       ├── 0825827.bin
    │   │       │   │       ├── 0825828.bin
    │   │       │   │       ├── 0825829.bin
    │   │       │   │       ├── 0825830.bin
    │   │       │   │       ├── 0825831.bin
    │   │       │   │       ├── 0825832.bin
    │   │       │   │       ├── 0825833.bin
    │   │       │   │       ├── 0825834.bin
    │   │       │   │       ├── 0825835.bin
    │   │       │   │       ├── 0825836.bin
    │   │       │   │       ├── 0825837.bin
    │   │       │   │       ├── 0825838.bin
    │   │       │   │       ├── 0825839.bin
    │   │       │   │       ├── 0825840.bin
    │   │       │   │       ├── 0825841.bin
    │   │       │   │       ├── 0825842.bin
    │   │       │   │       ├── 0825843.bin
    │   │       │   │       ├── 0825844.bin
    │   │       │   │       ├── 0825845.bin
    │   │       │   │       ├── 0825846.bin
    │   │       │   │       ├── 0825847.bin
    │   │       │   │       ├── 0825848.bin
    │   │       │   │       ├── 0825849.bin
    │   │       │   │       ├── 0825850.bin
    │   │       │   │       ├── 0825851.bin
    │   │       │   │       ├── 0825852.bin
    │   │       │   │       ├── 0825853.bin
    │   │       │   │       ├── 0825854.bin
    │   │       │   │       ├── 0825855.bin
    │   │       │   │       ├── 0825856.bin
    │   │       │   │       ├── 0825857.bin
    │   │       │   │       ├── 0825858.bin
    │   │       │   │       ├── 0825859.bin
    │   │       │   │       ├── 0825860.bin
    │   │       │   │       ├── 0825861.bin
    │   │       │   │       ├── 0825862.bin
    │   │       │   │       ├── 0825863.bin
    │   │       │   │       ├── 0825864.bin
    │   │       │   │       ├── 0825865.bin
    │   │       │   │       ├── 0825866.bin
    │   │       │   │       ├── 0825867.bin
    │   │       │   │       ├── 0825868.bin
    │   │       │   │       ├── 0825869.bin
    │   │       │   │       ├── 0825870.bin
    │   │       │   │       ├── 0825871.bin
    │   │       │   │       ├── 0825872.bin
    │   │       │   │       ├── 0825873.bin
    │   │       │   │       ├── 0825874.bin
    │   │       │   │       ├── 0825875.bin
    │   │       │   │       ├── 0825876.bin
    │   │       │   │       ├── 0825877.bin
    │   │       │   │       ├── 0825878.bin
    │   │       │   │       ├── 0825879.bin
    │   │       │   │       ├── 0825880.bin
    │   │       │   │       ├── 0825881.bin
    │   │       │   │       ├── 0825882.bin
    │   │       │   │       ├── 0825883.bin
    │   │       │   │       ├── 0825884.bin
    │   │       │   │       ├── 0825885.bin
    │   │       │   │       ├── 0825886.bin
    │   │       │   │       ├── 0825887.bin
    │   │       │   │       ├── 0825888.bin
    │   │       │   │       ├── 0825889.bin
    │   │       │   │       ├── 0825890.bin
    │   │       │   │       ├── 0825891.bin
    │   │       │   │       ├── 0825892.bin
    │   │       │   │       ├── 0825893.bin
    │   │       │   │       ├── 0825894.bin
    │   │       │   │       ├── 0825895.bin
    │   │       │   │       ├── 0825896.bin
    │   │       │   │       ├── 0825897.bin
    │   │       │   │       ├── 0825898.bin
    │   │       │   │       ├── 0825899.bin
    │   │       │   │       ├── 0825900.bin
    │   │       │   │       ├── 0825901.bin
    │   │       │   │       ├── 0825902.bin
    │   │       │   │       ├── 0825903.bin
    │   │       │   │       ├── 0825904.bin
    │   │       │   │       ├── 0825905.bin
    │   │       │   │       ├── 0825906.bin
    │   │       │   │       ├── 0825907.bin
    │   │       │   │       ├── 0825908.bin
    │   │       │   │       ├── 0825909.bin
    │   │       │   │       ├── 0825910.bin
    │   │       │   │       ├── 0825911.bin
    │   │       │   │       ├── 0825912.bin
    │   │       │   │       ├── 0825913.bin
    │   │       │   │       ├── 0825914.bin
    │   │       │   │       ├── 0825915.bin
    │   │       │   │       ├── 0825916.bin
    │   │       │   │       ├── 0825917.bin
    │   │       │   │       ├── 0825918.bin
    │   │       │   │       ├── 0825919.bin
    │   │       │   │       ├── 0825920.bin
    │   │       │   │       ├── 0825921.bin
    │   │       │   │       ├── 0825922.bin
    │   │       │   │       ├── 0825923.bin
    │   │       │   │       ├── 0825924.bin
    │   │       │   │       ├── 0825925.bin
    │   │       │   │       ├── 0825926.bin
    │   │       │   │       ├── 0825927.bin
    │   │       │   │       ├── 0825928.bin
    │   │       │   │       ├── 0825929.bin
    │   │       │   │       ├── 0825930.bin
    │   │       │   │       ├── 0825931.bin
    │   │       │   │       ├── 0825932.bin
    │   │       │   │       ├── 0825933.bin
    │   │       │   │       ├── 0825934.bin
    │   │       │   │       ├── 0825935.bin
    │   │       │   │       ├── 0825936.bin
    │   │       │   │       ├── 0825937.bin
    │   │       │   │       ├── 0825938.bin
    │   │       │   │       ├── 0825939.bin
    │   │       │   │       ├── 0825940.bin
    │   │       │   │       ├── 0825941.bin
    │   │       │   │       ├── 0825942.bin
    │   │       │   │       ├── 0825943.bin
    │   │       │   │       ├── 0825944.bin
    │   │       │   │       ├── 0825945.bin
    │   │       │   │       ├── 0825946.bin
    │   │       │   │       ├── 0825947.bin
    │   │       │   │       ├── 0825948.bin
    │   │       │   │       ├── 0825949.bin
    │   │       │   │       ├── 0825950.bin
    │   │       │   │       ├── 0825951.bin
    │   │       │   │       ├── 0825952.bin
    │   │       │   │       ├── 0825953.bin
    │   │       │   │       ├── 0825954.bin
    │   │       │   │       ├── 0825955.bin
    │   │       │   │       ├── 0825956.bin
    │   │       │   │       ├── 0825957.bin
    │   │       │   │       ├── 0825958.bin
    │   │       │   │       ├── 0825959.bin
    │   │       │   │       ├── 0825960.bin
    │   │       │   │       ├── 0825961.bin
    │   │       │   │       ├── 0825962.bin
    │   │       │   │       ├── 0825963.bin
    │   │       │   │       ├── 0825964.bin
    │   │       │   │       ├── 0825965.bin
    │   │       │   │       ├── 0825966.bin
    │   │       │   │       ├── 0825967.bin
    │   │       │   │       ├── 0825968.bin
    │   │       │   │       ├── 0825969.bin
    │   │       │   │       ├── 0825970.bin
    │   │       │   │       ├── 0825971.bin
    │   │       │   │       ├── 0825972.bin
    │   │       │   │       ├── 0825973.bin
    │   │       │   │       ├── 0825974.bin
    │   │       │   │       ├── 0825975.bin
    │   │       │   │       ├── 0825976.bin
    │   │       │   │       ├── 0825977.bin
    │   │       │   │       ├── 0825978.bin
    │   │       │   │       ├── 0825979.bin
    │   │       │   │       ├── 0825980.bin
    │   │       │   │       ├── 0825981.bin
    │   │       │   │       ├── 0825982.bin
    │   │       │   │       ├── 0825983.bin
    │   │       │   │       ├── 0825984.bin
    │   │       │   │       ├── 0825985.bin
    │   │       │   │       ├── 0825986.bin
    │   │       │   │       ├── 0825987.bin
    │   │       │   │       ├── 0825988.bin
    │   │       │   │       ├── 0825989.bin
    │   │       │   │       ├── 0825990.bin
    │   │       │   │       ├── 0825991.bin
    │   │       │   │       ├── 0825992.bin
    │   │       │   │       ├── 0825993.bin
    │   │       │   │       ├── 0825994.bin
    │   │       │   │       ├── 0825995.bin
    │   │       │   │       ├── 0825996.bin
    │   │       │   │       ├── 0825997.bin
    │   │       │   │       ├── 0825998.bin
    │   │       │   │       ├── 0825999.bin
    │   │       │   │       ├── 0826000.bin
    │   │       │   │       ├── 0826001.bin
    │   │       │   │       ├── 0826002.bin
    │   │       │   │       ├── 0826003.bin
    │   │       │   │       ├── 0826004.bin
    │   │       │   │       ├── 0826005.bin
    │   │       │   │       ├── 0826006.bin
    │   │       │   │       ├── 0826007.bin
    │   │       │   │       ├── 0826008.bin
    │   │       │   │       ├── 0826009.bin
    │   │       │   │       ├── 0826010.bin
    │   │       │   │       ├── 0826011.bin
    │   │       │   │       ├── 0826012.bin
    │   │       │   │       ├── 0826013.bin
    │   │       │   │       ├── 0826014.bin
    │   │       │   │       ├── 0826015.bin
    │   │       │   │       ├── 0826016.bin
    │   │       │   │       ├── 0826017.bin
    │   │       │   │       ├── 0826018.bin
    │   │       │   │       ├── 0826019.bin
    │   │       │   │       ├── 0826020.bin
    │   │       │   │       ├── 0826021.bin
    │   │       │   │       ├── 0826022.bin
    │   │       │   │       ├── 0826023.bin
    │   │       │   │       ├── 0826024.bin
    │   │       │   │       ├── 0826025.bin
    │   │       │   │       ├── 0826026.bin
    │   │       │   │       ├── 0826027.bin
    │   │       │   │       ├── 0826028.bin
    │   │       │   │       ├── 0826029.bin
    │   │       │   │       ├── 0826030.bin
    │   │       │   │       ├── 0826031.bin
    │   │       │   │       ├── 0826032.bin
    │   │       │   │       ├── 0826033.bin
    │   │       │   │       ├── 0826034.bin
    │   │       │   │       ├── 0826035.bin
    │   │       │   │       ├── 0826036.bin
    │   │       │   │       ├── 0826037.bin
    │   │       │   │       ├── 0826038.bin
    │   │       │   │       ├── 0826039.bin
    │   │       │   │       ├── 0826040.bin
    │   │       │   │       ├── 0826041.bin
    │   │       │   │       ├── 0826042.bin
    │   │       │   │       ├── 0826043.bin
    │   │       │   │       ├── 0826044.bin
    │   │       │   │       ├── 0826045.bin
    │   │       │   │       ├── 0826046.bin
    │   │       │   │       ├── 0826047.bin
    │   │       │   │       ├── 0826048.bin
    │   │       │   │       ├── 0826049.bin
    │   │       │   │       ├── 0826050.bin
    │   │       │   │       ├── 0826051.bin
    │   │       │   │       ├── 0826052.bin
    │   │       │   │       ├── 0826053.bin
    │   │       │   │       ├── 0826054.bin
    │   │       │   │       ├── 0826055.bin
    │   │       │   │       ├── 0826056.bin
    │   │       │   │       ├── 0826057.bin
    │   │       │   │       ├── 0826058.bin
    │   │       │   │       ├── 0826059.bin
    │   │       │   │       ├── 0826060.bin
    │   │       │   │       ├── 0826061.bin
    │   │       │   │       ├── 0826062.bin
    │   │       │   │       ├── 0826063.bin
    │   │       │   │       ├── 0826064.bin
    │   │       │   │       ├── 0826065.bin
    │   │       │   │       ├── 0826066.bin
    │   │       │   │       ├── 0826067.bin
    │   │       │   │       ├── 0826068.bin
    │   │       │   │       ├── 0826069.bin
    │   │       │   │       ├── 0826070.bin
    │   │       │   │       ├── 0826071.bin
    │   │       │   │       ├── 0826072.bin
    │   │       │   │       ├── 0826073.bin
    │   │       │   │       ├── 0826074.bin
    │   │       │   │       ├── 0826075.bin
    │   │       │   │       ├── 0826076.bin
    │   │       │   │       ├── 0826077.bin
    │   │       │   │       ├── 0826078.bin
    │   │       │   │       ├── 0826079.bin
    │   │       │   │       ├── 0826080.bin
    │   │       │   │       ├── 0826081.bin
    │   │       │   │       ├── 0826082.bin
    │   │       │   │       ├── 0826083.bin
    │   │       │   │       ├── 0826084.bin
    │   │       │   │       ├── 0826085.bin
    │   │       │   │       ├── 0826086.bin
    │   │       │   │       ├── 0826087.bin
    │   │       │   │       ├── 0826088.bin
    │   │       │   │       ├── 0826089.bin
    │   │       │   │       ├── 0826090.bin
    │   │       │   │       ├── 0826091.bin
    │   │       │   │       ├── 0826092.bin
    │   │       │   │       ├── 0826093.bin
    │   │       │   │       ├── 0826094.bin
    │   │       │   │       ├── 0826095.bin
    │   │       │   │       ├── 0826096.bin
    │   │       │   │       ├── 0826097.bin
    │   │       │   │       ├── 0826098.bin
    │   │       │   │       ├── 0826099.bin
    │   │       │   │       ├── 0826100.bin
    │   │       │   │       ├── 0826101.bin
    │   │       │   │       ├── 0826102.bin
    │   │       │   │       ├── 0826103.bin
    │   │       │   │       ├── 0826104.bin
    │   │       │   │       ├── 0826105.bin
    │   │       │   │       ├── 0826106.bin
    │   │       │   │       ├── 0826107.bin
    │   │       │   │       ├── 0826108.bin
    │   │       │   │       ├── 0826109.bin
    │   │       │   │       ├── 0826110.bin
    │   │       │   │       ├── 0826111.bin
    │   │       │   │       ├── 0826112.bin
    │   │       │   │       ├── 0826113.bin
    │   │       │   │       ├── 0826114.bin
    │   │       │   │       ├── 0826115.bin
    │   │       │   │       ├── 0826116.bin
    │   │       │   │       ├── 0826117.bin
    │   │       │   │       ├── 0826118.bin
    │   │       │   │       ├── 0826119.bin
    │   │       │   │       ├── 0826120.bin
    │   │       │   │       ├── 0826121.bin
    │   │       │   │       ├── 0826122.bin
    │   │       │   │       ├── 0826123.bin
    │   │       │   │       ├── 0826124.bin
    │   │       │   │       ├── 0826125.bin
    │   │       │   │       ├── 0826126.bin
    │   │       │   │       ├── 0826127.bin
    │   │       │   │       ├── 0826128.bin
    │   │       │   │       ├── 0826129.bin
    │   │       │   │       ├── 0826130.bin
    │   │       │   │       ├── 0826131.bin
    │   │       │   │       ├── 0826132.bin
    │   │       │   │       ├── 0826133.bin
    │   │       │   │       ├── 0826134.bin
    │   │       │   │       ├── 0826135.bin
    │   │       │   │       ├── 0826136.bin
    │   │       │   │       ├── 0826137.bin
    │   │       │   │       ├── 0826138.bin
    │   │       │   │       ├── 0826139.bin
    │   │       │   │       ├── 0826140.bin
    │   │       │   │       ├── 0826141.bin
    │   │       │   │       ├── 0826142.bin
    │   │       │   │       ├── 0826143.bin
    │   │       │   │       ├── 0826144.bin
    │   │       │   │       ├── 0826145.bin
    │   │       │   │       ├── 0826146.bin
    │   │       │   │       ├── 0826147.bin
    │   │       │   │       ├── 0826148.bin
    │   │       │   │       ├── 0826149.bin
    │   │       │   │       ├── 0826150.bin
    │   │       │   │       ├── 0826151.bin
    │   │       │   │       ├── 0826152.bin
    │   │       │   │       ├── 0826153.bin
    │   │       │   │       ├── 0826154.bin
    │   │       │   │       ├── 0826155.bin
    │   │       │   │       ├── 0826156.bin
    │   │       │   │       ├── 0826157.bin
    │   │       │   │       ├── 0826158.bin
    │   │       │   │       ├── 0826159.bin
    │   │       │   │       ├── 0826160.bin
    │   │       │   │       ├── 0826161.bin
    │   │       │   │       ├── 0826162.bin
    │   │       │   │       ├── 0826163.bin
    │   │       │   │       ├── 0826164.bin
    │   │       │   │       ├── 0826165.bin
    │   │       │   │       ├── 0826166.bin
    │   │       │   │       ├── 0826167.bin
    │   │       │   │       ├── 0826168.bin
    │   │       │   │       ├── 0826169.bin
    │   │       │   │       ├── 0826170.bin
    │   │       │   │       ├── 0826171.bin
    │   │       │   │       ├── 0826172.bin
    │   │       │   │       ├── 0826173.bin
    │   │       │   │       ├── 0826174.bin
    │   │       │   │       ├── 0826175.bin
    │   │       │   │       ├── 0826176.bin
    │   │       │   │       ├── 0826177.bin
    │   │       │   │       ├── 0826178.bin
    │   │       │   │       ├── 0826179.bin
    │   │       │   │       ├── 0826180.bin
    │   │       │   │       ├── 0826181.bin
    │   │       │   │       ├── 0826182.bin
    │   │       │   │       ├── 0826183.bin
    │   │       │   │       ├── 0826184.bin
    │   │       │   │       ├── 0826185.bin
    │   │       │   │       ├── 0826186.bin
    │   │       │   │       ├── 0826187.bin
    │   │       │   │       ├── 0826188.bin
    │   │       │   │       ├── 0826189.bin
    │   │       │   │       ├── 0826190.bin
    │   │       │   │       ├── 0826191.bin
    │   │       │   │       ├── 0826192.bin
    │   │       │   │       ├── 0826193.bin
    │   │       │   │       ├── 0826194.bin
    │   │       │   │       ├── 0826195.bin
    │   │       │   │       ├── 0826196.bin
    │   │       │   │       ├── 0826197.bin
    │   │       │   │       ├── 0826198.bin
    │   │       │   │       ├── 0826199.bin
    │   │       │   │       ├── 0826200.bin
    │   │       │   │       ├── 0826201.bin
    │   │       │   │       ├── 0826202.bin
    │   │       │   │       ├── 0826203.bin
    │   │       │   │       ├── 0826204.bin
    │   │       │   │       ├── 0826205.bin
    │   │       │   │       ├── 0826206.bin
    │   │       │   │       ├── 0826207.bin
    │   │       │   │       ├── 0826208.bin
    │   │       │   │       ├── 0826209.bin
    │   │       │   │       ├── 0826210.bin
    │   │       │   │       ├── 0826211.bin
    │   │       │   │       ├── 0826212.bin
    │   │       │   │       ├── 0826213.bin
    │   │       │   │       ├── 0826214.bin
    │   │       │   │       ├── 0826215.bin
    │   │       │   │       ├── 0826216.bin
    │   │       │   │       ├── 0826217.bin
    │   │       │   │       ├── 0826218.bin
    │   │       │   │       ├── 0826219.bin
    │   │       │   │       ├── 0826220.bin
    │   │       │   │       ├── 0826221.bin
    │   │       │   │       ├── 0826222.bin
    │   │       │   │       ├── 0826223.bin
    │   │       │   │       ├── 0826224.bin
    │   │       │   │       ├── 0826225.bin
    │   │       │   │       ├── 0826226.bin
    │   │       │   │       ├── 0826227.bin
    │   │       │   │       ├── 0826228.bin
    │   │       │   │       ├── 0826229.bin
    │   │       │   │       ├── 0826230.bin
    │   │       │   │       ├── 0826231.bin
    │   │       │   │       ├── 0826232.bin
    │   │       │   │       ├── 0826233.bin
    │   │       │   │       ├── 0826234.bin
    │   │       │   │       ├── 0826235.bin
    │   │       │   │       ├── 0826236.bin
    │   │       │   │       ├── 0826237.bin
    │   │       │   │       ├── 0826238.bin
    │   │       │   │       ├── 0826239.bin
    │   │       │   │       ├── 0826240.bin
    │   │       │   │       ├── 0826241.bin
    │   │       │   │       ├── 0826242.bin
    │   │       │   │       ├── 0826243.bin
    │   │       │   │       ├── 0826244.bin
    │   │       │   │       ├── 0826245.bin
    │   │       │   │       ├── 0826246.bin
    │   │       │   │       ├── 0826247.bin
    │   │       │   │       ├── 0826248.bin
    │   │       │   │       ├── 0826249.bin
    │   │       │   │       ├── 0826250.bin
    │   │       │   │       ├── 0826251.bin
    │   │       │   │       ├── 0826252.bin
    │   │       │   │       ├── 0826253.bin
    │   │       │   │       ├── 0826254.bin
    │   │       │   │       ├── 0826255.bin
    │   │       │   │       ├── 0826256.bin
    │   │       │   │       ├── 0826257.bin
    │   │       │   │       ├── 0826258.bin
    │   │       │   │       ├── 0826259.bin
    │   │       │   │       ├── 0826260.bin
    │   │       │   │       ├── 0826261.bin
    │   │       │   │       ├── 0826262.bin
    │   │       │   │       ├── 0826263.bin
    │   │       │   │       ├── 0826264.bin
    │   │       │   │       ├── 0826265.bin
    │   │       │   │       ├── 0826266.bin
    │   │       │   │       ├── 0826267.bin
    │   │       │   │       ├── 0826268.bin
    │   │       │   │       ├── 0826269.bin
    │   │       │   │       ├── 0826270.bin
    │   │       │   │       ├── 0826271.bin
    │   │       │   │       ├── 0826272.bin
    │   │       │   │       ├── 0826273.bin
    │   │       │   │       ├── 0826274.bin
    │   │       │   │       ├── 0826275.bin
    │   │       │   │       ├── 0826276.bin
    │   │       │   │       ├── 0826277.bin
    │   │       │   │       ├── 0826278.bin
    │   │       │   │       ├── 0826279.bin
    │   │       │   │       ├── 0826280.bin
    │   │       │   │       ├── 0826281.bin
    │   │       │   │       ├── 0826282.bin
    │   │       │   │       ├── 0826283.bin
    │   │       │   │       ├── 0826284.bin
    │   │       │   │       ├── 0826285.bin
    │   │       │   │       ├── 0826286.bin
    │   │       │   │       ├── 0826287.bin
    │   │       │   │       ├── 0826288.bin
    │   │       │   │       ├── 0826289.bin
    │   │       │   │       ├── 0826290.bin
    │   │       │   │       ├── 0826291.bin
    │   │       │   │       ├── 0826292.bin
    │   │       │   │       ├── 0826293.bin
    │   │       │   │       ├── 0826294.bin
    │   │       │   │       ├── 0826295.bin
    │   │       │   │       ├── 0826296.bin
    │   │       │   │       ├── 0826297.bin
    │   │       │   │       ├── 0826298.bin
    │   │       │   │       ├── 0826299.bin
    │   │       │   │       ├── 0826300.bin
    │   │       │   │       ├── 0826301.bin
    │   │       │   │       ├── 0826302.bin
    │   │       │   │       ├── 0826303.bin
    │   │       │   │       ├── 0826304.bin
    │   │       │   │       ├── 0826305.bin
    │   │       │   │       ├── 0826306.bin
    │   │       │   │       ├── 0826307.bin
    │   │       │   │       ├── 0826308.bin
    │   │       │   │       ├── 0826309.bin
    │   │       │   │       ├── 0826310.bin
    │   │       │   │       ├── 0826311.bin
    │   │       │   │       ├── 0826312.bin
    │   │       │   │       ├── 0826313.bin
    │   │       │   │       ├── 0826314.bin
    │   │       │   │       ├── 0826315.bin
    │   │       │   │       ├── 0826316.bin
    │   │       │   │       ├── 0826317.bin
    │   │       │   │       ├── 0826318.bin
    │   │       │   │       ├── 0826319.bin
    │   │       │   │       ├── 0826320.bin
    │   │       │   │       ├── 0826321.bin
    │   │       │   │       ├── 0826322.bin
    │   │       │   │       ├── 0826323.bin
    │   │       │   │       ├── 0826324.bin
    │   │       │   │       ├── 0826325.bin
    │   │       │   │       ├── 0826326.bin
    │   │       │   │       ├── 0826327.bin
    │   │       │   │       ├── 0826328.bin
    │   │       │   │       ├── 0826329.bin
    │   │       │   │       ├── 0826330.bin
    │   │       │   │       ├── 0826331.bin
    │   │       │   │       ├── 0826332.bin
    │   │       │   │       ├── 0826333.bin
    │   │       │   │       ├── 0826334.bin
    │   │       │   │       ├── 0826335.bin
    │   │       │   │       ├── 0826336.bin
    │   │       │   │       ├── 0826337.bin
    │   │       │   │       ├── 0826338.bin
    │   │       │   │       ├── 0826339.bin
    │   │       │   │       ├── 0826340.bin
    │   │       │   │       ├── 0826341.bin
    │   │       │   │       ├── 0826342.bin
    │   │       │   │       ├── 0826343.bin
    │   │       │   │       ├── 0826344.bin
    │   │       │   │       ├── 0826345.bin
    │   │       │   │       ├── 0826346.bin
    │   │       │   │       ├── 0826347.bin
    │   │       │   │       ├── 0826348.bin
    │   │       │   │       ├── 0826349.bin
    │   │       │   │       ├── 0826350.bin
    │   │       │   │       ├── 0826351.bin
    │   │       │   │       ├── 0826352.bin
    │   │       │   │       ├── 0826353.bin
    │   │       │   │       ├── 0826354.bin
    │   │       │   │       ├── 0826355.bin
    │   │       │   │       ├── 0826356.bin
    │   │       │   │       ├── 0826357.bin
    │   │       │   │       ├── 0826358.bin
    │   │       │   │       ├── 0826359.bin
    │   │       │   │       ├── 0826360.bin
    │   │       │   │       ├── 0826361.bin
    │   │       │   │       ├── 0826362.bin
    │   │       │   │       ├── 0826363.bin
    │   │       │   │       ├── 0826364.bin
    │   │       │   │       ├── 0826365.bin
    │   │       │   │       ├── 0826366.bin
    │   │       │   │       ├── 0826367.bin
    │   │       │   │       ├── 0826368.bin
    │   │       │   │       ├── 0826369.bin
    │   │       │   │       ├── 0826370.bin
    │   │       │   │       ├── 0826371.bin
    │   │       │   │       ├── 0826372.bin
    │   │       │   │       ├── 0826373.bin
    │   │       │   │       ├── 0826374.bin
    │   │       │   │       ├── 0826375.bin
    │   │       │   │       ├── 0826376.bin
    │   │       │   │       ├── 0826377.bin
    │   │       │   │       ├── 0826378.bin
    │   │       │   │       ├── 0826379.bin
    │   │       │   │       ├── 0826380.bin
    │   │       │   │       ├── 0826381.bin
    │   │       │   │       ├── 0826382.bin
    │   │       │   │       ├── 0826383.bin
    │   │       │   │       ├── 0826384.bin
    │   │       │   │       ├── 0826385.bin
    │   │       │   │       ├── 0826386.bin
    │   │       │   │       ├── 0826387.bin
    │   │       │   │       ├── 0826388.bin
    │   │       │   │       ├── 0826389.bin
    │   │       │   │       ├── 0826390.bin
    │   │       │   │       ├── 0826391.bin
    │   │       │   │       ├── 0826392.bin
    │   │       │   │       ├── 0826393.bin
    │   │       │   │       ├── 0826394.bin
    │   │       │   │       ├── 0826395.bin
    │   │       │   │       ├── 0826396.bin
    │   │       │   │       ├── 0826397.bin
    │   │       │   │       ├── 0826398.bin
    │   │       │   │       ├── 0826399.bin
    │   │       │   │       ├── 0826400.bin
    │   │       │   │       ├── 0826401.bin
    │   │       │   │       ├── 0826402.bin
    │   │       │   │       ├── 0826403.bin
    │   │       │   │       ├── 0826404.bin
    │   │       │   │       ├── 0826405.bin
    │   │       │   │       ├── 0826406.bin
    │   │       │   │       ├── 0826407.bin
    │   │       │   │       ├── 0826408.bin
    │   │       │   │       ├── 0826409.bin
    │   │       │   │       ├── 0826410.bin
    │   │       │   │       ├── 0826411.bin
    │   │       │   │       ├── 0826412.bin
    │   │       │   │       ├── 0826413.bin
    │   │       │   │       ├── 0826414.bin
    │   │       │   │       ├── 0826415.bin
    │   │       │   │       ├── 0826416.bin
    │   │       │   │       ├── 0826417.bin
    │   │       │   │       ├── 0826418.bin
    │   │       │   │       ├── 0826419.bin
    │   │       │   │       ├── 0826420.bin
    │   │       │   │       ├── 0826421.bin
    │   │       │   │       ├── 0826422.bin
    │   │       │   │       ├── 0826423.bin
    │   │       │   │       ├── 0826424.bin
    │   │       │   │       ├── 0826425.bin
    │   │       │   │       ├── 0826426.bin
    │   │       │   │       ├── 0826427.bin
    │   │       │   │       ├── 0826428.bin
    │   │       │   │       ├── 0826429.bin
    │   │       │   │       ├── 0826430.bin
    │   │       │   │       ├── 0826431.bin
    │   │       │   │       ├── 0826432.bin
    │   │       │   │       ├── 0826433.bin
    │   │       │   │       ├── 0826434.bin
    │   │       │   │       ├── 0826435.bin
    │   │       │   │       ├── 0826436.bin
    │   │       │   │       ├── 0826437.bin
    │   │       │   │       ├── 0826438.bin
    │   │       │   │       ├── 0826439.bin
    │   │       │   │       ├── 0826440.bin
    │   │       │   │       ├── 0826441.bin
    │   │       │   │       ├── 0826442.bin
    │   │       │   │       ├── 0826443.bin
    │   │       │   │       ├── 0826444.bin
    │   │       │   │       ├── 0826445.bin
    │   │       │   │       ├── 0826446.bin
    │   │       │   │       ├── 0826447.bin
    │   │       │   │       ├── 0826448.bin
    │   │       │   │       ├── 0826449.bin
    │   │       │   │       ├── 0826450.bin
    │   │       │   │       ├── 0826451.bin
    │   │       │   │       ├── 0826452.bin
    │   │       │   │       ├── 0826453.bin
    │   │       │   │       ├── 0826454.bin
    │   │       │   │       ├── 0826455.bin
    │   │       │   │       ├── 0826456.bin
    │   │       │   │       ├── 0826457.bin
    │   │       │   │       ├── 0826458.bin
    │   │       │   │       ├── 0826459.bin
    │   │       │   │       ├── 0826460.bin
    │   │       │   │       ├── 0826461.bin
    │   │       │   │       ├── 0826462.bin
    │   │       │   │       ├── 0826463.bin
    │   │       │   │       ├── 0826464.bin
    │   │       │   │       ├── 0826465.bin
    │   │       │   │       ├── 0826466.bin
    │   │       │   │       ├── 0826467.bin
    │   │       │   │       ├── 0826468.bin
    │   │       │   │       ├── 0826469.bin
    │   │       │   │       ├── 0826470.bin
    │   │       │   │       ├── 0826471.bin
    │   │       │   │       ├── 0826472.bin
    │   │       │   │       ├── 0826473.bin
    │   │       │   │       ├── 0826474.bin
    │   │       │   │       ├── 0826475.bin
    │   │       │   │       ├── 0826476.bin
    │   │       │   │       ├── 0826477.bin
    │   │       │   │       ├── 0826478.bin
    │   │       │   │       ├── 0826479.bin
    │   │       │   │       ├── 0826480.bin
    │   │       │   │       ├── 0826481.bin
    │   │       │   │       ├── 0826482.bin
    │   │       │   │       ├── 0826483.bin
    │   │       │   │       ├── 0826484.bin
    │   │       │   │       ├── 0826485.bin
    │   │       │   │       ├── 0826486.bin
    │   │       │   │       ├── 0826487.bin
    │   │       │   │       ├── 0826488.bin
    │   │       │   │       ├── 0826489.bin
    │   │       │   │       ├── 0826490.bin
    │   │       │   │       ├── 0826491.bin
    │   │       │   │       ├── 0826492.bin
    │   │       │   │       ├── 0826493.bin
    │   │       │   │       ├── 0826494.bin
    │   │       │   │       ├── 0826495.bin
    │   │       │   │       ├── 0826496.bin
    │   │       │   │       ├── 0826497.bin
    │   │       │   │       ├── 0826498.bin
    │   │       │   │       ├── 0826499.bin
    │   │       │   │       ├── 0826500.bin
    │   │       │   │       ├── 0826501.bin
    │   │       │   │       ├── 0826502.bin
    │   │       │   │       ├── 0826503.bin
    │   │       │   │       ├── 0826504.bin
    │   │       │   │       ├── 0826505.bin
    │   │       │   │       ├── 0826506.bin
    │   │       │   │       ├── 0826507.bin
    │   │       │   │       ├── 0826508.bin
    │   │       │   │       ├── 0826509.bin
    │   │       │   │       ├── 0826510.bin
    │   │       │   │       ├── 0826511.bin
    │   │       │   │       ├── 0826512.bin
    │   │       │   │       ├── 0826513.bin
    │   │       │   │       ├── 0826514.bin
    │   │       │   │       ├── 0826515.bin
    │   │       │   │       ├── 0826516.bin
    │   │       │   │       ├── 0826517.bin
    │   │       │   │       ├── 0826518.bin
    │   │       │   │       ├── 0826519.bin
    │   │       │   │       ├── 0826520.bin
    │   │       │   │       ├── 0826521.bin
    │   │       │   │       ├── 0826522.bin
    │   │       │   │       ├── 0826523.bin
    │   │       │   │       ├── 0826524.bin
    │   │       │   │       ├── 0826525.bin
    │   │       │   │       ├── 0826526.bin
    │   │       │   │       ├── 0826527.bin
    │   │       │   │       ├── 0826528.bin
    │   │       │   │       ├── 0826529.bin
    │   │       │   │       ├── 0826530.bin
    │   │       │   │       ├── 0826531.bin
    │   │       │   │       ├── 0826532.bin
    │   │       │   │       ├── 0826533.bin
    │   │       │   │       ├── 0826534.bin
    │   │       │   │       ├── 0826535.bin
    │   │       │   │       ├── 0826536.bin
    │   │       │   │       ├── 0826537.bin
    │   │       │   │       ├── 0826538.bin
    │   │       │   │       ├── 0826539.bin
    │   │       │   │       ├── 0826540.bin
    │   │       │   │       ├── 0826541.bin
    │   │       │   │       ├── 0826542.bin
    │   │       │   │       ├── 0826543.bin
    │   │       │   │       ├── 0826544.bin
    │   │       │   │       ├── 0826545.bin
    │   │       │   │       ├── 0826546.bin
    │   │       │   │       ├── 0826547.bin
    │   │       │   │       ├── 0826548.bin
    │   │       │   │       ├── 0826549.bin
    │   │       │   │       ├── 0826550.bin
    │   │       │   │       ├── 0826551.bin
    │   │       │   │       ├── 0826552.bin
    │   │       │   │       ├── 0826553.bin
    │   │       │   │       ├── 0826554.bin
    │   │       │   │       ├── 0826555.bin
    │   │       │   │       ├── 0826556.bin
    │   │       │   │       ├── 0826557.bin
    │   │       │   │       ├── 0826558.bin
    │   │       │   │       ├── 0826559.bin
    │   │       │   │       ├── 0826560.bin
    │   │       │   │       ├── 0826561.bin
    │   │       │   │       ├── 0826562.bin
    │   │       │   │       ├── 0826563.bin
    │   │       │   │       ├── 0826564.bin
    │   │       │   │       ├── 0826565.bin
    │   │       │   │       ├── 0826566.bin
    │   │       │   │       ├── 0826567.bin
    │   │       │   │       ├── 0826568.bin
    │   │       │   │       ├── 0826569.bin
    │   │       │   │       ├── 0826570.bin
    │   │       │   │       ├── 0826571.bin
    │   │       │   │       ├── 0826572.bin
    │   │       │   │       ├── 0826573.bin
    │   │       │   │       ├── 0826574.bin
    │   │       │   │       ├── 0826575.bin
    │   │       │   │       ├── 0826576.bin
    │   │       │   │       ├── 0826577.bin
    │   │       │   │       ├── 0826578.bin
    │   │       │   │       ├── 0826579.bin
    │   │       │   │       ├── 0826580.bin
    │   │       │   │       ├── 0826581.bin
    │   │       │   │       ├── 0826582.bin
    │   │       │   │       ├── 0826583.bin
    │   │       │   │       ├── 0826584.bin
    │   │       │   │       ├── 0826585.bin
    │   │       │   │       ├── 0826586.bin
    │   │       │   │       ├── 0826587.bin
    │   │       │   │       ├── 0826588.bin
    │   │       │   │       ├── 0826589.bin
    │   │       │   │       ├── 0826590.bin
    │   │       │   │       ├── 0826591.bin
    │   │       │   │       ├── 0826592.bin
    │   │       │   │       ├── 0826593.bin
    │   │       │   │       ├── 0826594.bin
    │   │       │   │       ├── 0826595.bin
    │   │       │   │       ├── 0826596.bin
    │   │       │   │       ├── 0826597.bin
    │   │       │   │       ├── 0826598.bin
    │   │       │   │       ├── 0826599.bin
    │   │       │   │       ├── 0826600.bin
    │   │       │   │       ├── 0826601.bin
    │   │       │   │       ├── 0826602.bin
    │   │       │   │       ├── 0826603.bin
    │   │       │   │       ├── 0826604.bin
    │   │       │   │       ├── 0826605.bin
    │   │       │   │       ├── 0826606.bin
    │   │       │   │       ├── 0826607.bin
    │   │       │   │       ├── 0826608.bin
    │   │       │   │       ├── 0826609.bin
    │   │       │   │       ├── 0826610.bin
    │   │       │   │       ├── 0826611.bin
    │   │       │   │       ├── 0826612.bin
    │   │       │   │       ├── 0826613.bin
    │   │       │   │       ├── 0826614.bin
    │   │       │   │       ├── 0826615.bin
    │   │       │   │       ├── 0826616.bin
    │   │       │   │       ├── 0826617.bin
    │   │       │   │       ├── 0826618.bin
    │   │       │   │       ├── 0826619.bin
    │   │       │   │       ├── 0826620.bin
    │   │       │   │       ├── 0826621.bin
    │   │       │   │       ├── 0826622.bin
    │   │       │   │       ├── 0826623.bin
    │   │       │   │       ├── 0826624.bin
    │   │       │   │       ├── 0826625.bin
    │   │       │   │       ├── 0826626.bin
    │   │       │   │       ├── 0826627.bin
    │   │       │   │       ├── 0826628.bin
    │   │       │   │       ├── 0826629.bin
    │   │       │   │       ├── 0826630.bin
    │   │       │   │       ├── 0826631.bin
    │   │       │   │       ├── 0826632.bin
    │   │       │   │       ├── 0826633.bin
    │   │       │   │       ├── 0826634.bin
    │   │       │   │       ├── 0826635.bin
    │   │       │   │       ├── 0826636.bin
    │   │       │   │       ├── 0826637.bin
    │   │       │   │       ├── 0826638.bin
    │   │       │   │       ├── 0826639.bin
    │   │       │   │       ├── 0826640.bin
    │   │       │   │       ├── 0826641.bin
    │   │       │   │       ├── 0826642.bin
    │   │       │   │       ├── 0826643.bin
    │   │       │   │       ├── 0826644.bin
    │   │       │   │       ├── 0826645.bin
    │   │       │   │       ├── 0826646.bin
    │   │       │   │       ├── 0826647.bin
    │   │       │   │       ├── 0826648.bin
    │   │       │   │       ├── 0826649.bin
    │   │       │   │       ├── 0826650.bin
    │   │       │   │       ├── 0826651.bin
    │   │       │   │       ├── 0826652.bin
    │   │       │   │       ├── 0826653.bin
    │   │       │   │       ├── 0826654.bin
    │   │       │   │       ├── 0826655.bin
    │   │       │   │       ├── 0826656.bin
    │   │       │   │       ├── 0826657.bin
    │   │       │   │       ├── 0826658.bin
    │   │       │   │       ├── 0826659.bin
    │   │       │   │       ├── 0826660.bin
    │   │       │   │       ├── 0826661.bin
    │   │       │   │       ├── 0826662.bin
    │   │       │   │       ├── 0826663.bin
    │   │       │   │       ├── 0826664.bin
    │   │       │   │       ├── 0826665.bin
    │   │       │   │       ├── 0826666.bin
    │   │       │   │       ├── 0826667.bin
    │   │       │   │       ├── 0826668.bin
    │   │       │   │       ├── 0826669.bin
    │   │       │   │       ├── 0826670.bin
    │   │       │   │       ├── 0826671.bin
    │   │       │   │       ├── 0826672.bin
    │   │       │   │       ├── 0826673.bin
    │   │       │   │       ├── 0826674.bin
    │   │       │   │       ├── 0826675.bin
    │   │       │   │       ├── 0826676.bin
    │   │       │   │       ├── 0826677.bin
    │   │       │   │       ├── 0826678.bin
    │   │       │   │       ├── 0826679.bin
    │   │       │   │       ├── 0826680.bin
    │   │       │   │       ├── 0826681.bin
    │   │       │   │       ├── 0826682.bin
    │   │       │   │       ├── 0826683.bin
    │   │       │   │       ├── 0826684.bin
    │   │       │   │       ├── 0826685.bin
    │   │       │   │       ├── 0826686.bin
    │   │       │   │       ├── 0826687.bin
    │   │       │   │       ├── 0826688.bin
    │   │       │   │       ├── 0826689.bin
    │   │       │   │       ├── 0826690.bin
    │   │       │   │       ├── 0826691.bin
    │   │       │   │       ├── 0826692.bin
    │   │       │   │       ├── 0826693.bin
    │   │       │   │       ├── 0826694.bin
    │   │       │   │       ├── 0826695.bin
    │   │       │   │       ├── 0826696.bin
    │   │       │   │       ├── 0826697.bin
    │   │       │   │       ├── 0826698.bin
    │   │       │   │       ├── 0826699.bin
    │   │       │   │       ├── 0826700.bin
    │   │       │   │       ├── 0826701.bin
    │   │       │   │       ├── 0826702.bin
    │   │       │   │       ├── 0826703.bin
    │   │       │   │       ├── 0826704.bin
    │   │       │   │       ├── 0826705.bin
    │   │       │   │       ├── 0826706.bin
    │   │       │   │       ├── 0826707.bin
    │   │       │   │       ├── 0826708.bin
    │   │       │   │       ├── 0826709.bin
    │   │       │   │       ├── 0826710.bin
    │   │       │   │       ├── 0826711.bin
    │   │       │   │       ├── 0826712.bin
    │   │       │   │       ├── 0826713.bin
    │   │       │   │       ├── 0826714.bin
    │   │       │   │       ├── 0826715.bin
    │   │       │   │       ├── 0826716.bin
    │   │       │   │       ├── 0826717.bin
    │   │       │   │       ├── 0826718.bin
    │   │       │   │       ├── 0826719.bin
    │   │       │   │       ├── 0826720.bin
    │   │       │   │       ├── 0826721.bin
    │   │       │   │       ├── 0826722.bin
    │   │       │   │       ├── 0826723.bin
    │   │       │   │       ├── 0826724.bin
    │   │       │   │       ├── 0826725.bin
    │   │       │   │       ├── 0826726.bin
    │   │       │   │       ├── 0826727.bin
    │   │       │   │       ├── 0826728.bin
    │   │       │   │       ├── 0826729.bin
    │   │       │   │       ├── 0826730.bin
    │   │       │   │       ├── 0826731.bin
    │   │       │   │       ├── 0826732.bin
    │   │       │   │       ├── 0826733.bin
    │   │       │   │       ├── 0826734.bin
    │   │       │   │       ├── 0826735.bin
    │   │       │   │       ├── 0826736.bin
    │   │       │   │       ├── 0826737.bin
    │   │       │   │       ├── 0826738.bin
    │   │       │   │       ├── 0826739.bin
    │   │       │   │       ├── 0826740.bin
    │   │       │   │       ├── 0826741.bin
    │   │       │   │       ├── 0826742.bin
    │   │       │   │       ├── 0826743.bin
    │   │       │   │       ├── 0826744.bin
    │   │       │   │       ├── 0826745.bin
    │   │       │   │       ├── 0826746.bin
    │   │       │   │       ├── 0826747.bin
    │   │       │   │       ├── 0826748.bin
    │   │       │   │       ├── 0826749.bin
    │   │       │   │       ├── 0826750.bin
    │   │       │   │       ├── 0826751.bin
    │   │       │   │       ├── 0826752.bin
    │   │       │   │       ├── 0826753.bin
    │   │       │   │       ├── 0826754.bin
    │   │       │   │       ├── 0826755.bin
    │   │       │   │       ├── 0826756.bin
    │   │       │   │       ├── 0826757.bin
    │   │       │   │       ├── 0826758.bin
    │   │       │   │       ├── 0826759.bin
    │   │       │   │       ├── 0826760.bin
    │   │       │   │       ├── 0826761.bin
    │   │       │   │       ├── 0826762.bin
    │   │       │   │       ├── 0826763.bin
    │   │       │   │       ├── 0826764.bin
    │   │       │   │       ├── 0826765.bin
    │   │       │   │       ├── 0826766.bin
    │   │       │   │       ├── 0826767.bin
    │   │       │   │       ├── 0826768.bin
    │   │       │   │       ├── 0826769.bin
    │   │       │   │       ├── 0826770.bin
    │   │       │   │       ├── 0826771.bin
    │   │       │   │       ├── 0826772.bin
    │   │       │   │       ├── 0826773.bin
    │   │       │   │       ├── 0826774.bin
    │   │       │   │       ├── 0826775.bin
    │   │       │   │       ├── 0826776.bin
    │   │       │   │       ├── 0826777.bin
    │   │       │   │       ├── 0826778.bin
    │   │       │   │       ├── 0826779.bin
    │   │       │   │       ├── 0826780.bin
    │   │       │   │       ├── 0826781.bin
    │   │       │   │       ├── 0826782.bin
    │   │       │   │       ├── 0826783.bin
    │   │       │   │       ├── 0826784.bin
    │   │       │   │       ├── 0826785.bin
    │   │       │   │       ├── 0826786.bin
    │   │       │   │       ├── 0826787.bin
    │   │       │   │       ├── 0826788.bin
    │   │       │   │       ├── 0826789.bin
    │   │       │   │       ├── 0826790.bin
    │   │       │   │       ├── 0826791.bin
    │   │       │   │       ├── 0826792.bin
    │   │       │   │       ├── 0826793.bin
    │   │       │   │       ├── 0826794.bin
    │   │       │   │       ├── 0826795.bin
    │   │       │   │       ├── 0826796.bin
    │   │       │   │       ├── 0826797.bin
    │   │       │   │       ├── 0826798.bin
    │   │       │   │       ├── 0826799.bin
    │   │       │   │       ├── 0826800.bin
    │   │       │   │       ├── 0826801.bin
    │   │       │   │       ├── 0826802.bin
    │   │       │   │       ├── 0826803.bin
    │   │       │   │       ├── 0826804.bin
    │   │       │   │       ├── 0826805.bin
    │   │       │   │       ├── 0826806.bin
    │   │       │   │       ├── 0826807.bin
    │   │       │   │       ├── 0826808.bin
    │   │       │   │       ├── 0826809.bin
    │   │       │   │       ├── 0826810.bin
    │   │       │   │       ├── 0826811.bin
    │   │       │   │       ├── 0826812.bin
    │   │       │   │       ├── 0826813.bin
    │   │       │   │       ├── 0826814.bin
    │   │       │   │       ├── 0826815.bin
    │   │       │   │       ├── 0826816.bin
    │   │       │   │       ├── 0826817.bin
    │   │       │   │       ├── 0826818.bin
    │   │       │   │       ├── 0826819.bin
    │   │       │   │       ├── 0826820.bin
    │   │       │   │       ├── 0826821.bin
    │   │       │   │       ├── 0826822.bin
    │   │       │   │       ├── 0826823.bin
    │   │       │   │       ├── 0826824.bin
    │   │       │   │       ├── 0826825.bin
    │   │       │   │       ├── 0826826.bin
    │   │       │   │       ├── 0826827.bin
    │   │       │   │       ├── 0826828.bin
    │   │       │   │       ├── 0826829.bin
    │   │       │   │       ├── 0826830.bin
    │   │       │   │       ├── 0826831.bin
    │   │       │   │       ├── 0826832.bin
    │   │       │   │       ├── 0826833.bin
    │   │       │   │       ├── 0826834.bin
    │   │       │   │       ├── 0826835.bin
    │   │       │   │       ├── 0826836.bin
    │   │       │   │       ├── 0826837.bin
    │   │       │   │       ├── 0826838.bin
    │   │       │   │       ├── 0826839.bin
    │   │       │   │       ├── 0826840.bin
    │   │       │   │       ├── 0826841.bin
    │   │       │   │       ├── 0826842.bin
    │   │       │   │       ├── 0826843.bin
    │   │       │   │       ├── 0826844.bin
    │   │       │   │       ├── 0826845.bin
    │   │       │   │       ├── 0826846.bin
    │   │       │   │       ├── 0826847.bin
    │   │       │   │       ├── 0826848.bin
    │   │       │   │       ├── 0826849.bin
    │   │       │   │       ├── 0826850.bin
    │   │       │   │       ├── 0826851.bin
    │   │       │   │       ├── 0826852.bin
    │   │       │   │       ├── 0826853.bin
    │   │       │   │       ├── 0826854.bin
    │   │       │   │       ├── 0826855.bin
    │   │       │   │       ├── 0826856.bin
    │   │       │   │       ├── 0826857.bin
    │   │       │   │       ├── 0826858.bin
    │   │       │   │       ├── 0826859.bin
    │   │       │   │       ├── 0826860.bin
    │   │       │   │       ├── 0826861.bin
    │   │       │   │       ├── 0826862.bin
    │   │       │   │       ├── 0826863.bin
    │   │       │   │       ├── 0826864.bin
    │   │       │   │       ├── 0826865.bin
    │   │       │   │       ├── 0826866.bin
    │   │       │   │       ├── 0826867.bin
    │   │       │   │       ├── 0826868.bin
    │   │       │   │       ├── 0826869.bin
    │   │       │   │       ├── 0826870.bin
    │   │       │   │       ├── 0826871.bin
    │   │       │   │       ├── 0826872.bin
    │   │       │   │       ├── 0826873.bin
    │   │       │   │       ├── 0826874.bin
    │   │       │   │       ├── 0826875.bin
    │   │       │   │       ├── 0826876.bin
    │   │       │   │       ├── 0826877.bin
    │   │       │   │       ├── 0826878.bin
    │   │       │   │       ├── 0826879.bin
    │   │       │   │       ├── 0826880.bin
    │   │       │   │       ├── 0826881.bin
    │   │       │   │       ├── 0826882.bin
    │   │       │   │       ├── 0826883.bin
    │   │       │   │       ├── 0826884.bin
    │   │       │   │       ├── 0826885.bin
    │   │       │   │       ├── 0826886.bin
    │   │       │   │       ├── 0826887.bin
    │   │       │   │       ├── 0826888.bin
    │   │       │   │       ├── 0826889.bin
    │   │       │   │       ├── 0826890.bin
    │   │       │   │       ├── 0826891.bin
    │   │       │   │       ├── 0826892.bin
    │   │       │   │       ├── 0826893.bin
    │   │       │   │       ├── 0826894.bin
    │   │       │   │       ├── 0826895.bin
    │   │       │   │       ├── 0826896.bin
    │   │       │   │       ├── 0826897.bin
    │   │       │   │       ├── 0826898.bin
    │   │       │   │       ├── 0826899.bin
    │   │       │   │       ├── 0826900.bin
    │   │       │   │       ├── 0826901.bin
    │   │       │   │       ├── 0826902.bin
    │   │       │   │       ├── 0826903.bin
    │   │       │   │       ├── 0826904.bin
    │   │       │   │       ├── 0826905.bin
    │   │       │   │       ├── 0826906.bin
    │   │       │   │       ├── 0826907.bin
    │   │       │   │       ├── 0826908.bin
    │   │       │   │       ├── 0826909.bin
    │   │       │   │       ├── 0826910.bin
    │   │       │   │       ├── 0826911.bin
    │   │       │   │       ├── 0826912.bin
    │   │       │   │       ├── 0826913.bin
    │   │       │   │       ├── 0826914.bin
    │   │       │   │       ├── 0826915.bin
    │   │       │   │       ├── 0826916.bin
    │   │       │   │       ├── 0826917.bin
    │   │       │   │       ├── 0826918.bin
    │   │       │   │       ├── 0826919.bin
    │   │       │   │       ├── 0826920.bin
    │   │       │   │       ├── 0826921.bin
    │   │       │   │       ├── 0826922.bin
    │   │       │   │       ├── 0826923.bin
    │   │       │   │       ├── 0826924.bin
    │   │       │   │       ├── 0826925.bin
    │   │       │   │       ├── 0826926.bin
    │   │       │   │       ├── 0826927.bin
    │   │       │   │       ├── 0826928.bin
    │   │       │   │       ├── 0826929.bin
    │   │       │   │       ├── 0826930.bin
    │   │       │   │       ├── 0826931.bin
    │   │       │   │       ├── 0826932.bin
    │   │       │   │       ├── 0826933.bin
    │   │       │   │       ├── 0826934.bin
    │   │       │   │       ├── 0826935.bin
    │   │       │   │       ├── 0826936.bin
    │   │       │   │       ├── 0826937.bin
    │   │       │   │       ├── 0826938.bin
    │   │       │   │       ├── 0826939.bin
    │   │       │   │       ├── 0826940.bin
    │   │       │   │       ├── 0826941.bin
    │   │       │   │       ├── 0826942.bin
    │   │       │   │       ├── 0826943.bin
    │   │       │   │       ├── 0826944.bin
    │   │       │   │       ├── 0826945.bin
    │   │       │   │       ├── 0826946.bin
    │   │       │   │       ├── 0826947.bin
    │   │       │   │       ├── 0826948.bin
    │   │       │   │       ├── 0826949.bin
    │   │       │   │       ├── 0826950.bin
    │   │       │   │       ├── 0826951.bin
    │   │       │   │       ├── 0826952.bin
    │   │       │   │       ├── 0826953.bin
    │   │       │   │       ├── 0826954.bin
    │   │       │   │       ├── 0826955.bin
    │   │       │   │       ├── 0826956.bin
    │   │       │   │       ├── 0826957.bin
    │   │       │   │       ├── 0826958.bin
    │   │       │   │       ├── 0826959.bin
    │   │       │   │       ├── 0826960.bin
    │   │       │   │       ├── 0826961.bin
    │   │       │   │       ├── 0826962.bin
    │   │       │   │       ├── 0826963.bin
    │   │       │   │       ├── 0826964.bin
    │   │       │   │       ├── 0826965.bin
    │   │       │   │       ├── 0826966.bin
    │   │       │   │       ├── 0826967.bin
    │   │       │   │       ├── 0826968.bin
    │   │       │   │       ├── 0826969.bin
    │   │       │   │       ├── 0826970.bin
    │   │       │   │       ├── 0826971.bin
    │   │       │   │       ├── 0826972.bin
    │   │       │   │       ├── 0826973.bin
    │   │       │   │       ├── 0826974.bin
    │   │       │   │       ├── 0826975.bin
    │   │       │   │       ├── 0826976.bin
    │   │       │   │       ├── 0826977.bin
    │   │       │   │       ├── 0826978.bin
    │   │       │   │       ├── 0826979.bin
    │   │       │   │       ├── 0826980.bin
    │   │       │   │       ├── 0826981.bin
    │   │       │   │       ├── 0826982.bin
    │   │       │   │       ├── 0826983.bin
    │   │       │   │       ├── 0826984.bin
    │   │       │   │       ├── 0826985.bin
    │   │       │   │       ├── 0826986.bin
    │   │       │   │       ├── 0826987.bin
    │   │       │   │       ├── 0826988.bin
    │   │       │   │       ├── 0826989.bin
    │   │       │   │       ├── 0826990.bin
    │   │       │   │       ├── 0826991.bin
    │   │       │   │       ├── 0826992.bin
    │   │       │   │       ├── 0826993.bin
    │   │       │   │       ├── 0826994.bin
    │   │       │   │       ├── 0826995.bin
    │   │       │   │       ├── 0826996.bin
    │   │       │   │       ├── 0826997.bin
    │   │       │   │       ├── 0826998.bin
    │   │       │   │       ├── 0826999.bin
    │   │       │   │       ├── 0827000.bin
    │   │       │   │       ├── 0827001.bin
    │   │       │   │       ├── 0827002.bin
    │   │       │   │       ├── 0827003.bin
    │   │       │   │       ├── 0827004.bin
    │   │       │   │       ├── 0827005.bin
    │   │       │   │       ├── 0827006.bin
    │   │       │   │       ├── 0827007.bin
    │   │       │   │       ├── 0827008.bin
    │   │       │   │       ├── 0827009.bin
    │   │       │   │       ├── 0827010.bin
    │   │       │   │       ├── 0827011.bin
    │   │       │   │       ├── 0827012.bin
    │   │       │   │       ├── 0827013.bin
    │   │       │   │       ├── 0827014.bin
    │   │       │   │       ├── 0827015.bin
    │   │       │   │       ├── 0827016.bin
    │   │       │   │       ├── 0827017.bin
    │   │       │   │       ├── 0827018.bin
    │   │       │   │       ├── 0827019.bin
    │   │       │   │       ├── 0827020.bin
    │   │       │   │       ├── 0827021.bin
    │   │       │   │       ├── 0827022.bin
    │   │       │   │       ├── 0827023.bin
    │   │       │   │       ├── 0827024.bin
    │   │       │   │       ├── 0827025.bin
    │   │       │   │       ├── 0827026.bin
    │   │       │   │       ├── 0827027.bin
    │   │       │   │       ├── 0827028.bin
    │   │       │   │       ├── 0827029.bin
    │   │       │   │       ├── 0827030.bin
    │   │       │   │       ├── 0827031.bin
    │   │       │   │       ├── 0827032.bin
    │   │       │   │       ├── 0827033.bin
    │   │       │   │       ├── 0827034.bin
    │   │       │   │       ├── 0827035.bin
    │   │       │   │       ├── 0827036.bin
    │   │       │   │       ├── 0827037.bin
    │   │       │   │       ├── 0827038.bin
    │   │       │   │       ├── 0827039.bin
    │   │       │   │       ├── 0827040.bin
    │   │       │   │       ├── 0827041.bin
    │   │       │   │       ├── 0827042.bin
    │   │       │   │       ├── 0827043.bin
    │   │       │   │       ├── 0827044.bin
    │   │       │   │       ├── 0827045.bin
    │   │       │   │       ├── 0827046.bin
    │   │       │   │       ├── 0827047.bin
    │   │       │   │       ├── 0827048.bin
    │   │       │   │       ├── 0827049.bin
    │   │       │   │       ├── 0827050.bin
    │   │       │   │       ├── 0827051.bin
    │   │       │   │       ├── 0827052.bin
    │   │       │   │       ├── 0827053.bin
    │   │       │   │       ├── 0827054.bin
    │   │       │   │       ├── 0827055.bin
    │   │       │   │       ├── 0827056.bin
    │   │       │   │       ├── 0827057.bin
    │   │       │   │       ├── 0827058.bin
    │   │       │   │       ├── 0827059.bin
    │   │       │   │       ├── 0827060.bin
    │   │       │   │       ├── 0827061.bin
    │   │       │   │       ├── 0827062.bin
    │   │       │   │       ├── 0827063.bin
    │   │       │   │       ├── 0827064.bin
    │   │       │   │       ├── 0827065.bin
    │   │       │   │       ├── 0827066.bin
    │   │       │   │       ├── 0827067.bin
    │   │       │   │       ├── 0827068.bin
    │   │       │   │       ├── 0827069.bin
    │   │       │   │       ├── 0827070.bin
    │   │       │   │       ├── 0827071.bin
    │   │       │   │       ├── 0827072.bin
    │   │       │   │       ├── 0827073.bin
    │   │       │   │       ├── 0827074.bin
    │   │       │   │       ├── 0827075.bin
    │   │       │   │       ├── 0827076.bin
    │   │       │   │       ├── 0827077.bin
    │   │       │   │       ├── 0827078.bin
    │   │       │   │       ├── 0827079.bin
    │   │       │   │       ├── 0827080.bin
    │   │       │   │       ├── 0827081.bin
    │   │       │   │       ├── 0827082.bin
    │   │       │   │       ├── 0827083.bin
    │   │       │   │       ├── 0827084.bin
    │   │       │   │       ├── 0827085.bin
    │   │       │   │       ├── 0827086.bin
    │   │       │   │       ├── 0827087.bin
    │   │       │   │       ├── 0827088.bin
    │   │       │   │       ├── 0827089.bin
    │   │       │   │       ├── 0827090.bin
    │   │       │   │       ├── 0827091.bin
    │   │       │   │       ├── 0827092.bin
    │   │       │   │       ├── 0827093.bin
    │   │       │   │       ├── 0827094.bin
    │   │       │   │       ├── 0827095.bin
    │   │       │   │       ├── 0827096.bin
    │   │       │   │       ├── 0827097.bin
    │   │       │   │       ├── 0827098.bin
    │   │       │   │       ├── 0827099.bin
    │   │       │   │       ├── 0827100.bin
    │   │       │   │       ├── 0827101.bin
    │   │       │   │       ├── 0827102.bin
    │   │       │   │       ├── 0827103.bin
    │   │       │   │       ├── 0827104.bin
    │   │       │   │       ├── 0827105.bin
    │   │       │   │       ├── 0827106.bin
    │   │       │   │       ├── 0827107.bin
    │   │       │   │       ├── 0827108.bin
    │   │       │   │       ├── 0827109.bin
    │   │       │   │       ├── 0827110.bin
    │   │       │   │       ├── 0827111.bin
    │   │       │   │       ├── 0827112.bin
    │   │       │   │       ├── 0827113.bin
    │   │       │   │       ├── 0827114.bin
    │   │       │   │       ├── 0827115.bin
    │   │       │   │       ├── 0827116.bin
    │   │       │   │       ├── 0827117.bin
    │   │       │   │       ├── 0827118.bin
    │   │       │   │       ├── 0827119.bin
    │   │       │   │       ├── 0827120.bin
    │   │       │   │       ├── 0827121.bin
    │   │       │   │       ├── 0827122.bin
    │   │       │   │       ├── 0827123.bin
    │   │       │   │       ├── 0827124.bin
    │   │       │   │       ├── 0827125.bin
    │   │       │   │       ├── 0827126.bin
    │   │       │   │       ├── 0827127.bin
    │   │       │   │       ├── 0827128.bin
    │   │       │   │       ├── 0827129.bin
    │   │       │   │       ├── 0827130.bin
    │   │       │   │       ├── 0827131.bin
    │   │       │   │       ├── 0827132.bin
    │   │       │   │       ├── 0827133.bin
    │   │       │   │       ├── 0827134.bin
    │   │       │   │       ├── 0827135.bin
    │   │       │   │       ├── 0827136.bin
    │   │       │   │       ├── 0827137.bin
    │   │       │   │       ├── 0827138.bin
    │   │       │   │       ├── 0827139.bin
    │   │       │   │       ├── 0827140.bin
    │   │       │   │       ├── 0827141.bin
    │   │       │   │       ├── 0827142.bin
    │   │       │   │       ├── 0827143.bin
    │   │       │   │       ├── 0827144.bin
    │   │       │   │       ├── 0827145.bin
    │   │       │   │       ├── 0827146.bin
    │   │       │   │       ├── 0827147.bin
    │   │       │   │       ├── 0827148.bin
    │   │       │   │       ├── 0827149.bin
    │   │       │   │       ├── 0827150.bin
    │   │       │   │       ├── 0827151.bin
    │   │       │   │       ├── 0827152.bin
    │   │       │   │       ├── 0827153.bin
    │   │       │   │       ├── 0827154.bin
    │   │       │   │       ├── 0827155.bin
    │   │       │   │       ├── 0827156.bin
    │   │       │   │       ├── 0827157.bin
    │   │       │   │       ├── 0827158.bin
    │   │       │   │       ├── 0827159.bin
    │   │       │   │       ├── 0827160.bin
    │   │       │   │       ├── 0827161.bin
    │   │       │   │       ├── 0827162.bin
    │   │       │   │       ├── 0827163.bin
    │   │       │   │       ├── 0827164.bin
    │   │       │   │       ├── 0827165.bin
    │   │       │   │       ├── 0827166.bin
    │   │       │   │       ├── 0827167.bin
    │   │       │   │       ├── 0827168.bin
    │   │       │   │       ├── 0827169.bin
    │   │       │   │       ├── 0827170.bin
    │   │       │   │       ├── 0827171.bin
    │   │       │   │       ├── 0827172.bin
    │   │       │   │       ├── 0827173.bin
    │   │       │   │       ├── 0827174.bin
    │   │       │   │       ├── 0827175.bin
    │   │       │   │       ├── 0827176.bin
    │   │       │   │       ├── 0827177.bin
    │   │       │   │       ├── 0827178.bin
    │   │       │   │       ├── 0827179.bin
    │   │       │   │       ├── 0827180.bin
    │   │       │   │       ├── 0827181.bin
    │   │       │   │       ├── 0827182.bin
    │   │       │   │       ├── 0827183.bin
    │   │       │   │       ├── 0827184.bin
    │   │       │   │       ├── 0827185.bin
    │   │       │   │       ├── 0827186.bin
    │   │       │   │       ├── 0827187.bin
    │   │       │   │       ├── 0827188.bin
    │   │       │   │       ├── 0827189.bin
    │   │       │   │       ├── 0827190.bin
    │   │       │   │       ├── 0827191.bin
    │   │       │   │       ├── 0827192.bin
    │   │       │   │       ├── 0827193.bin
    │   │       │   │       ├── 0827194.bin
    │   │       │   │       ├── 0827195.bin
    │   │       │   │       ├── 0827196.bin
    │   │       │   │       ├── 0827197.bin
    │   │       │   │       ├── 0827198.bin
    │   │       │   │       ├── 0827199.bin
    │   │       │   │       ├── 0827200.bin
    │   │       │   │       ├── 0827201.bin
    │   │       │   │       ├── 0827202.bin
    │   │       │   │       ├── 0827203.bin
    │   │       │   │       ├── 0827204.bin
    │   │       │   │       ├── 0827205.bin
    │   │       │   │       ├── 0827206.bin
    │   │       │   │       ├── 0827207.bin
    │   │       │   │       ├── 0827208.bin
    │   │       │   │       ├── 0827209.bin
    │   │       │   │       ├── 0827210.bin
    │   │       │   │       ├── 0827211.bin
    │   │       │   │       ├── 0827212.bin
    │   │       │   │       ├── 0827213.bin
    │   │       │   │       ├── 0827214.bin
    │   │       │   │       ├── 0827215.bin
    │   │       │   │       ├── 0827216.bin
    │   │       │   │       ├── 0827217.bin
    │   │       │   │       ├── 0827218.bin
    │   │       │   │       ├── 0827219.bin
    │   │       │   │       ├── 0827220.bin
    │   │       │   │       ├── 0827221.bin
    │   │       │   │       ├── 0827222.bin
    │   │       │   │       ├── 0827223.bin
    │   │       │   │       ├── 0827224.bin
    │   │       │   │       ├── 0827225.bin
    │   │       │   │       ├── 0827226.bin
    │   │       │   │       ├── 0827227.bin
    │   │       │   │       ├── 0827228.bin
    │   │       │   │       ├── 0827229.bin
    │   │       │   │       ├── 0827230.bin
    │   │       │   │       ├── 0827231.bin
    │   │       │   │       ├── 0827232.bin
    │   │       │   │       ├── 0827233.bin
    │   │       │   │       ├── 0827234.bin
    │   │       │   │       ├── 0827235.bin
    │   │       │   │       ├── 0827236.bin
    │   │       │   │       ├── 0827237.bin
    │   │       │   │       ├── 0827238.bin
    │   │       │   │       ├── 0827239.bin
    │   │       │   │       ├── 0827240.bin
    │   │       │   │       ├── 0827241.bin
    │   │       │   │       ├── 0827242.bin
    │   │       │   │       ├── 0827243.bin
    │   │       │   │       ├── 0827244.bin
    │   │       │   │       ├── 0827245.bin
    │   │       │   │       ├── 0827246.bin
    │   │       │   │       ├── 0827247.bin
    │   │       │   │       ├── 0827248.bin
    │   │       │   │       ├── 0827249.bin
    │   │       │   │       ├── 0827250.bin
    │   │       │   │       ├── 0827251.bin
    │   │       │   │       ├── 0827252.bin
    │   │       │   │       ├── 0827253.bin
    │   │       │   │       ├── 0827254.bin
    │   │       │   │       ├── 0827255.bin
    │   │       │   │       ├── 0827256.bin
    │   │       │   │       ├── 0827257.bin
    │   │       │   │       ├── 0827258.bin
    │   │       │   │       ├── 0827259.bin
    │   │       │   │       ├── 0827260.bin
    │   │       │   │       ├── 0827261.bin
    │   │       │   │       ├── 0827262.bin
    │   │       │   │       ├── 0827263.bin
    │   │       │   │       ├── 0827264.bin
    │   │       │   │       ├── 0827265.bin
    │   │       │   │       ├── 0827266.bin
    │   │       │   │       ├── 0827267.bin
    │   │       │   │       ├── 0827268.bin
    │   │       │   │       ├── 0827269.bin
    │   │       │   │       ├── 0827270.bin
    │   │       │   │       ├── 0827271.bin
    │   │       │   │       ├── 0827272.bin
    │   │       │   │       ├── 0827273.bin
    │   │       │   │       ├── 0827274.bin
    │   │       │   │       ├── 0827275.bin
    │   │       │   │       ├── 0827276.bin
    │   │       │   │       ├── 0827277.bin
    │   │       │   │       ├── 0827278.bin
    │   │       │   │       ├── 0827279.bin
    │   │       │   │       ├── 0827280.bin
    │   │       │   │       ├── 0827281.bin
    │   │       │   │       ├── 0827282.bin
    │   │       │   │       ├── 0827283.bin
    │   │       │   │       ├── 0827284.bin
    │   │       │   │       ├── 0827285.bin
    │   │       │   │       ├── 0827286.bin
    │   │       │   │       ├── 0827287.bin
    │   │       │   │       ├── 0827288.bin
    │   │       │   │       ├── 0827289.bin
    │   │       │   │       ├── 0827290.bin
    │   │       │   │       ├── 0827291.bin
    │   │       │   │       ├── 0827292.bin
    │   │       │   │       ├── 0827293.bin
    │   │       │   │       ├── 0827294.bin
    │   │       │   │       ├── 0827295.bin
    │   │       │   │       ├── 0827296.bin
    │   │       │   │       ├── 0827297.bin
    │   │       │   │       ├── 0827298.bin
    │   │       │   │       ├── 0827299.bin
    │   │       │   │       ├── 0827300.bin
    │   │       │   │       ├── 0827301.bin
    │   │       │   │       ├── 0827302.bin
    │   │       │   │       ├── 0827303.bin
    │   │       │   │       ├── 0827304.bin
    │   │       │   │       ├── 0827305.bin
    │   │       │   │       ├── 0827306.bin
    │   │       │   │       ├── 0827307.bin
    │   │       │   │       ├── 0827308.bin
    │   │       │   │       ├── 0827309.bin
    │   │       │   │       ├── 0827310.bin
    │   │       │   │       ├── 0827311.bin
    │   │       │   │       ├── 0827312.bin
    │   │       │   │       ├── 0827313.bin
    │   │       │   │       ├── 0827314.bin
    │   │       │   │       ├── 0827315.bin
    │   │       │   │       ├── 0827316.bin
    │   │       │   │       ├── 0827317.bin
    │   │       │   │       ├── 0827318.bin
    │   │       │   │       ├── 0827319.bin
    │   │       │   │       ├── 0827320.bin
    │   │       │   │       ├── 0827321.bin
    │   │       │   │       ├── 0827322.bin
    │   │       │   │       ├── 0827323.bin
    │   │       │   │       ├── 0827324.bin
    │   │       │   │       ├── 0827325.bin
    │   │       │   │       ├── 0827326.bin
    │   │       │   │       ├── 0827327.bin
    │   │       │   │       ├── 0827328.bin
    │   │       │   │       ├── 0827329.bin
    │   │       │   │       ├── 0827330.bin
    │   │       │   │       ├── 0827331.bin
    │   │       │   │       ├── 0827332.bin
    │   │       │   │       ├── 0827333.bin
    │   │       │   │       ├── 0827334.bin
    │   │       │   │       ├── 0827335.bin
    │   │       │   │       ├── 0827336.bin
    │   │       │   │       ├── 0827337.bin
    │   │       │   │       ├── 0827338.bin
    │   │       │   │       ├── 0827339.bin
    │   │       │   │       ├── 0827340.bin
    │   │       │   │       ├── 0827341.bin
    │   │       │   │       ├── 0827342.bin
    │   │       │   │       ├── 0827343.bin
    │   │       │   │       ├── 0827344.bin
    │   │       │   │       ├── 0827345.bin
    │   │       │   │       ├── 0827346.bin
    │   │       │   │       ├── 0827347.bin
    │   │       │   │       ├── 0827348.bin
    │   │       │   │       ├── 0827349.bin
    │   │       │   │       ├── 0827350.bin
    │   │       │   │       ├── 0827351.bin
    │   │       │   │       ├── 0827352.bin
    │   │       │   │       ├── 0827353.bin
    │   │       │   │       ├── 0827354.bin
    │   │       │   │       ├── 0827355.bin
    │   │       │   │       ├── 0827356.bin
    │   │       │   │       ├── 0827357.bin
    │   │       │   │       ├── 0827358.bin
    │   │       │   │       ├── 0827359.bin
    │   │       │   │       ├── 0827360.bin
    │   │       │   │       ├── 0827361.bin
    │   │       │   │       ├── 0827362.bin
    │   │       │   │       ├── 0827363.bin
    │   │       │   │       ├── 0827364.bin
    │   │       │   │       ├── 0827365.bin
    │   │       │   │       ├── 0827366.bin
    │   │       │   │       ├── 0827367.bin
    │   │       │   │       ├── 0827368.bin
    │   │       │   │       ├── 0827369.bin
    │   │       │   │       ├── 0827370.bin
    │   │       │   │       ├── 0827371.bin
    │   │       │   │       ├── 0827372.bin
    │   │       │   │       ├── 0827373.bin
    │   │       │   │       ├── 0827374.bin
    │   │       │   │       ├── 0827375.bin
    │   │       │   │       ├── 0827376.bin
    │   │       │   │       ├── 0827377.bin
    │   │       │   │       ├── 0827378.bin
    │   │       │   │       ├── 0827379.bin
    │   │       │   │       ├── 0827380.bin
    │   │       │   │       ├── 0827381.bin
    │   │       │   │       ├── 0827382.bin
    │   │       │   │       ├── 0827383.bin
    │   │       │   │       ├── 0827384.bin
    │   │       │   │       ├── 0827385.bin
    │   │       │   │       ├── 0827386.bin
    │   │       │   │       ├── 0827387.bin
    │   │       │   │       ├── 0827388.bin
    │   │       │   │       ├── 0827389.bin
    │   │       │   │       ├── 0827390.bin
    │   │       │   │       ├── 0827391.bin
    │   │       │   │       ├── 0827392.bin
    │   │       │   │       ├── 0827393.bin
    │   │       │   │       ├── 0827394.bin
    │   │       │   │       ├── 0827395.bin
    │   │       │   │       ├── 0827396.bin
    │   │       │   │       ├── 0827397.bin
    │   │       │   │       ├── 0827398.bin
    │   │       │   │       ├── 0827399.bin
    │   │       │   │       ├── 0827400.bin
    │   │       │   │       ├── 0827401.bin
    │   │       │   │       ├── 0827402.bin
    │   │       │   │       ├── 0827403.bin
    │   │       │   │       ├── 0827404.bin
    │   │       │   │       ├── 0827405.bin
    │   │       │   │       ├── 0827406.bin
    │   │       │   │       ├── 0827407.bin
    │   │       │   │       ├── 0827408.bin
    │   │       │   │       ├── 0827409.bin
    │   │       │   │       ├── 0827410.bin
    │   │       │   │       ├── 0827411.bin
    │   │       │   │       ├── 0827412.bin
    │   │       │   │       ├── 0827413.bin
    │   │       │   │       ├── 0827414.bin
    │   │       │   │       ├── 0827415.bin
    │   │       │   │       ├── 0827416.bin
    │   │       │   │       ├── 0827417.bin
    │   │       │   │       ├── 0827418.bin
    │   │       │   │       ├── 0827419.bin
    │   │       │   │       ├── 0827420.bin
    │   │       │   │       ├── 0827421.bin
    │   │       │   │       ├── 0827422.bin
    │   │       │   │       ├── 0827423.bin
    │   │       │   │       ├── 0827424.bin
    │   │       │   │       ├── 0827425.bin
    │   │       │   │       ├── 0827426.bin
    │   │       │   │       ├── 0827427.bin
    │   │       │   │       ├── 0827428.bin
    │   │       │   │       ├── 0827429.bin
    │   │       │   │       ├── 0827430.bin
    │   │       │   │       ├── 0827431.bin
    │   │       │   │       ├── 0827432.bin
    │   │       │   │       ├── 0827433.bin
    │   │       │   │       ├── 0827434.bin
    │   │       │   │       ├── 0827435.bin
    │   │       │   │       ├── 0827436.bin
    │   │       │   │       ├── 0827437.bin
    │   │       │   │       ├── 0827438.bin
    │   │       │   │       ├── 0827439.bin
    │   │       │   │       ├── 0827440.bin
    │   │       │   │       ├── 0827441.bin
    │   │       │   │       ├── 0827442.bin
    │   │       │   │       ├── 0827443.bin
    │   │       │   │       ├── 0827444.bin
    │   │       │   │       ├── 0827445.bin
    │   │       │   │       ├── 0827446.bin
    │   │       │   │       ├── 0827447.bin
    │   │       │   │       ├── 0827448.bin
    │   │       │   │       ├── 0827449.bin
    │   │       │   │       ├── 0827450.bin
    │   │       │   │       ├── 0827451.bin
    │   │       │   │       ├── 0827452.bin
    │   │       │   │       ├── 0827453.bin
    │   │       │   │       ├── 0827454.bin
    │   │       │   │       ├── 0827455.bin
    │   │       │   │       ├── 0827456.bin
    │   │       │   │       ├── 0827457.bin
    │   │       │   │       ├── 0827458.bin
    │   │       │   │       ├── 0827459.bin
    │   │       │   │       ├── 0827460.bin
    │   │       │   │       ├── 0827461.bin
    │   │       │   │       ├── 0827462.bin
    │   │       │   │       ├── 0827463.bin
    │   │       │   │       ├── 0827464.bin
    │   │       │   │       ├── 0827465.bin
    │   │       │   │       ├── 0827466.bin
    │   │       │   │       ├── 0827467.bin
    │   │       │   │       ├── 0827468.bin
    │   │       │   │       ├── 0827469.bin
    │   │       │   │       ├── 0827470.bin
    │   │       │   │       ├── 0827471.bin
    │   │       │   │       ├── 0827472.bin
    │   │       │   │       ├── 0827473.bin
    │   │       │   │       ├── 0827474.bin
    │   │       │   │       ├── 0827475.bin
    │   │       │   │       ├── 0827476.bin
    │   │       │   │       ├── 0827477.bin
    │   │       │   │       ├── 0827478.bin
    │   │       │   │       ├── 0827479.bin
    │   │       │   │       ├── 0827480.bin
    │   │       │   │       ├── 0827481.bin
    │   │       │   │       ├── 0827482.bin
    │   │       │   │       ├── 0827483.bin
    │   │       │   │       ├── 0827484.bin
    │   │       │   │       ├── 0827485.bin
    │   │       │   │       ├── 0827486.bin
    │   │       │   │       ├── 0827487.bin
    │   │       │   │       ├── 0827488.bin
    │   │       │   │       ├── 0827489.bin
    │   │       │   │       ├── 0827490.bin
    │   │       │   │       ├── 0827491.bin
    │   │       │   │       ├── 0827492.bin
    │   │       │   │       ├── 0827493.bin
    │   │       │   │       ├── 0827494.bin
    │   │       │   │       ├── 0827495.bin
    │   │       │   │       ├── 0827496.bin
    │   │       │   │       ├── 0827497.bin
    │   │       │   │       ├── 0827498.bin
    │   │       │   │       ├── 0827499.bin
    │   │       │   │       ├── 0827500.bin
    │   │       │   │       ├── 0827501.bin
    │   │       │   │       ├── 0827502.bin
    │   │       │   │       ├── 0827503.bin
    │   │       │   │       ├── 0827504.bin
    │   │       │   │       ├── 0827505.bin
    │   │       │   │       ├── 0827506.bin
    │   │       │   │       ├── 0827507.bin
    │   │       │   │       ├── 0827508.bin
    │   │       │   │       ├── 0827509.bin
    │   │       │   │       ├── 0827510.bin
    │   │       │   │       ├── 0827511.bin
    │   │       │   │       ├── 0827512.bin
    │   │       │   │       ├── 0827513.bin
    │   │       │   │       ├── 0827514.bin
    │   │       │   │       ├── 0827515.bin
    │   │       │   │       ├── 0827516.bin
    │   │       │   │       ├── 0827517.bin
    │   │       │   │       ├── 0827518.bin
    │   │       │   │       ├── 0827519.bin
    │   │       │   │       ├── 0827520.bin
    │   │       │   │       ├── 0827521.bin
    │   │       │   │       ├── 0827522.bin
    │   │       │   │       ├── 0827523.bin
    │   │       │   │       ├── 0827524.bin
    │   │       │   │       ├── 0827525.bin
    │   │       │   │       ├── 0827526.bin
    │   │       │   │       ├── 0827527.bin
    │   │       │   │       ├── 0827528.bin
    │   │       │   │       ├── 0827529.bin
    │   │       │   │       ├── 0827530.bin
    │   │       │   │       ├── 0827531.bin
    │   │       │   │       ├── 0827532.bin
    │   │       │   │       ├── 0827533.bin
    │   │       │   │       ├── 0827534.bin
    │   │       │   │       ├── 0827535.bin
    │   │       │   │       ├── 0827536.bin
    │   │       │   │       ├── 0827537.bin
    │   │       │   │       ├── 0827538.bin
    │   │       │   │       ├── 0827539.bin
    │   │       │   │       ├── 0827540.bin
    │   │       │   │       ├── 0827541.bin
    │   │       │   │       ├── 0827542.bin
    │   │       │   │       ├── 0827543.bin
    │   │       │   │       ├── 0827544.bin
    │   │       │   │       ├── 0827545.bin
    │   │       │   │       ├── 0827546.bin
    │   │       │   │       ├── 0827547.bin
    │   │       │   │       ├── 0827548.bin
    │   │       │   │       ├── 0827549.bin
    │   │       │   │       ├── 0827550.bin
    │   │       │   │       ├── 0827551.bin
    │   │       │   │       ├── 0827552.bin
    │   │       │   │       ├── 0827553.bin
    │   │       │   │       ├── 0827554.bin
    │   │       │   │       ├── 0827555.bin
    │   │       │   │       ├── 0827556.bin
    │   │       │   │       ├── 0827557.bin
    │   │       │   │       ├── 0827558.bin
    │   │       │   │       ├── 0827559.bin
    │   │       │   │       ├── 0827560.bin
    │   │       │   │       ├── 0827561.bin
    │   │       │   │       ├── 0827562.bin
    │   │       │   │       ├── 0827563.bin
    │   │       │   │       ├── 0827564.bin
    │   │       │   │       ├── 0827565.bin
    │   │       │   │       ├── 0827566.bin
    │   │       │   │       ├── 0827567.bin
    │   │       │   │       ├── 0827568.bin
    │   │       │   │       ├── 0827569.bin
    │   │       │   │       ├── 0827570.bin
    │   │       │   │       ├── 0827571.bin
    │   │       │   │       ├── 0827572.bin
    │   │       │   │       ├── 0827573.bin
    │   │       │   │       ├── 0827574.bin
    │   │       │   │       ├── 0827575.bin
    │   │       │   │       ├── 0827576.bin
    │   │       │   │       ├── 0827577.bin
    │   │       │   │       ├── 0827578.bin
    │   │       │   │       ├── 0827579.bin
    │   │       │   │       ├── 0827580.bin
    │   │       │   │       ├── 0827581.bin
    │   │       │   │       ├── 0827582.bin
    │   │       │   │       ├── 0827583.bin
    │   │       │   │       ├── 0827584.bin
    │   │       │   │       ├── 0827585.bin
    │   │       │   │       ├── 0827586.bin
    │   │       │   │       ├── 0827587.bin
    │   │       │   │       ├── 0827588.bin
    │   │       │   │       ├── 0827589.bin
    │   │       │   │       ├── 0827590.bin
    │   │       │   │       ├── 0827591.bin
    │   │       │   │       ├── 0827592.bin
    │   │       │   │       ├── 0827593.bin
    │   │       │   │       ├── 0827594.bin
    │   │       │   │       ├── 0827595.bin
    │   │       │   │       ├── 0827596.bin
    │   │       │   │       ├── 0827597.bin
    │   │       │   │       ├── 0827598.bin
    │   │       │   │       ├── 0827599.bin
    │   │       │   │       ├── 0827600.bin
    │   │       │   │       ├── 0827601.bin
    │   │       │   │       ├── 0827602.bin
    │   │       │   │       ├── 0827603.bin
    │   │       │   │       ├── 0827604.bin
    │   │       │   │       ├── 0827605.bin
    │   │       │   │       ├── 0827606.bin
    │   │       │   │       ├── 0827607.bin
    │   │       │   │       ├── 0827608.bin
    │   │       │   │       ├── 0827609.bin
    │   │       │   │       ├── 0827610.bin
    │   │       │   │       ├── 0827611.bin
    │   │       │   │       ├── 0827612.bin
    │   │       │   │       ├── 0827613.bin
    │   │       │   │       ├── 0827614.bin
    │   │       │   │       ├── 0827615.bin
    │   │       │   │       ├── 0827616.bin
    │   │       │   │       ├── 0827617.bin
    │   │       │   │       ├── 0827618.bin
    │   │       │   │       ├── 0827619.bin
    │   │       │   │       ├── 0827620.bin
    │   │       │   │       ├── 0827621.bin
    │   │       │   │       ├── 0827622.bin
    │   │       │   │       ├── 0827623.bin
    │   │       │   │       ├── 0827624.bin
    │   │       │   │       ├── 0827625.bin
    │   │       │   │       ├── 0827626.bin
    │   │       │   │       ├── 0827627.bin
    │   │       │   │       ├── 0827628.bin
    │   │       │   │       ├── 0827629.bin
    │   │       │   │       ├── 0827630.bin
    │   │       │   │       ├── 0827631.bin
    │   │       │   │       ├── 0827632.bin
    │   │       │   │       ├── 0827633.bin
    │   │       │   │       ├── 0827634.bin
    │   │       │   │       ├── 0827635.bin
    │   │       │   │       ├── 0827636.bin
    │   │       │   │       ├── 0827637.bin
    │   │       │   │       ├── 0827638.bin
    │   │       │   │       ├── 0827639.bin
    │   │       │   │       ├── 0827640.bin
    │   │       │   │       ├── 0827641.bin
    │   │       │   │       ├── 0827642.bin
    │   │       │   │       ├── 0827643.bin
    │   │       │   │       ├── 0827644.bin
    │   │       │   │       ├── 0827645.bin
    │   │       │   │       ├── 0827646.bin
    │   │       │   │       ├── 0827647.bin
    │   │       │   │       ├── 0827648.bin
    │   │       │   │       ├── 0827649.bin
    │   │       │   │       ├── 0827650.bin
    │   │       │   │       ├── 0827651.bin
    │   │       │   │       ├── 0827652.bin
    │   │       │   │       ├── 0827653.bin
    │   │       │   │       ├── 0827654.bin
    │   │       │   │       ├── 0827655.bin
    │   │       │   │       ├── 0827656.bin
    │   │       │   │       ├── 0827657.bin
    │   │       │   │       ├── 0827658.bin
    │   │       │   │       ├── 0827659.bin
    │   │       │   │       ├── 0827660.bin
    │   │       │   │       ├── 0827661.bin
    │   │       │   │       ├── 0827662.bin
    │   │       │   │       ├── 0827663.bin
    │   │       │   │       ├── 0827664.bin
    │   │       │   │       ├── 0827665.bin
    │   │       │   │       ├── 0827666.bin
    │   │       │   │       ├── 0827667.bin
    │   │       │   │       ├── 0827668.bin
    │   │       │   │       ├── 0827669.bin
    │   │       │   │       ├── 0827670.bin
    │   │       │   │       ├── 0827671.bin
    │   │       │   │       ├── 0827672.bin
    │   │       │   │       ├── 0827673.bin
    │   │       │   │       ├── 0827674.bin
    │   │       │   │       ├── 0827675.bin
    │   │       │   │       ├── 0827676.bin
    │   │       │   │       ├── 0827677.bin
    │   │       │   │       ├── 0827678.bin
    │   │       │   │       ├── 0827679.bin
    │   │       │   │       ├── 0827680.bin
    │   │       │   │       ├── 0827681.bin
    │   │       │   │       ├── 0827682.bin
    │   │       │   │       ├── 0827683.bin
    │   │       │   │       ├── 0827684.bin
    │   │       │   │       ├── 0827685.bin
    │   │       │   │       ├── 0827686.bin
    │   │       │   │       ├── 0827687.bin
    │   │       │   │       ├── 0827688.bin
    │   │       │   │       ├── 0827689.bin
    │   │       │   │       ├── 0827690.bin
    │   │       │   │       ├── 0827691.bin
    │   │       │   │       ├── 0827692.bin
    │   │       │   │       ├── 0827693.bin
    │   │       │   │       ├── 0827694.bin
    │   │       │   │       ├── 0827695.bin
    │   │       │   │       ├── 0827696.bin
    │   │       │   │       ├── 0827697.bin
    │   │       │   │       ├── 0827698.bin
    │   │       │   │       ├── 0827699.bin
    │   │       │   │       ├── 0827700.bin
    │   │       │   │       ├── 0827701.bin
    │   │       │   │       ├── 0827702.bin
    │   │       │   │       ├── 0827703.bin
    │   │       │   │       ├── 0827704.bin
    │   │       │   │       ├── 0827705.bin
    │   │       │   │       ├── 0827706.bin
    │   │       │   │       ├── 0827707.bin
    │   │       │   │       ├── 0827708.bin
    │   │       │   │       ├── 0827709.bin
    │   │       │   │       ├── 0827710.bin
    │   │       │   │       ├── 0827711.bin
    │   │       │   │       ├── 0827712.bin
    │   │       │   │       ├── 0827713.bin
    │   │       │   │       ├── 0827714.bin
    │   │       │   │       ├── 0827715.bin
    │   │       │   │       ├── 0827716.bin
    │   │       │   │       ├── 0827717.bin
    │   │       │   │       ├── 0827718.bin
    │   │       │   │       ├── 0827719.bin
    │   │       │   │       ├── 0827720.bin
    │   │       │   │       ├── 0827721.bin
    │   │       │   │       ├── 0827722.bin
    │   │       │   │       ├── 0827723.bin
    │   │       │   │       ├── 0827724.bin
    │   │       │   │       ├── 0827725.bin
    │   │       │   │       ├── 0827726.bin
    │   │       │   │       ├── 0827727.bin
    │   │       │   │       ├── 0827728.bin
    │   │       │   │       ├── 0827729.bin
    │   │       │   │       ├── 0827730.bin
    │   │       │   │       ├── 0827731.bin
    │   │       │   │       ├── 0827732.bin
    │   │       │   │       ├── 0827733.bin
    │   │       │   │       ├── 0827734.bin
    │   │       │   │       ├── 0827735.bin
    │   │       │   │       ├── 0827736.bin
    │   │       │   │       ├── 0827737.bin
    │   │       │   │       ├── 0827738.bin
    │   │       │   │       ├── 0827739.bin
    │   │       │   │       ├── 0827740.bin
    │   │       │   │       ├── 0827741.bin
    │   │       │   │       ├── 0827742.bin
    │   │       │   │       ├── 0827743.bin
    │   │       │   │       ├── 0827744.bin
    │   │       │   │       ├── 0827745.bin
    │   │       │   │       ├── 0827746.bin
    │   │       │   │       ├── 0827747.bin
    │   │       │   │       ├── 0827748.bin
    │   │       │   │       ├── 0827749.bin
    │   │       │   │       ├── 0827750.bin
    │   │       │   │       ├── 0827751.bin
    │   │       │   │       ├── 0827752.bin
    │   │       │   │       ├── 0827753.bin
    │   │       │   │       ├── 0827754.bin
    │   │       │   │       ├── 0827755.bin
    │   │       │   │       ├── 0827756.bin
    │   │       │   │       ├── 0827757.bin
    │   │       │   │       ├── 0827758.bin
    │   │       │   │       ├── 0827759.bin
    │   │       │   │       ├── 0827760.bin
    │   │       │   │       ├── 0827761.bin
    │   │       │   │       ├── 0827762.bin
    │   │       │   │       ├── 0827763.bin
    │   │       │   │       ├── 0827764.bin
    │   │       │   │       ├── 0827765.bin
    │   │       │   │       ├── 0827766.bin
    │   │       │   │       ├── 0827767.bin
    │   │       │   │       ├── 0827768.bin
    │   │       │   │       ├── 0827769.bin
    │   │       │   │       ├── 0827770.bin
    │   │       │   │       ├── 0827771.bin
    │   │       │   │       ├── 0827772.bin
    │   │       │   │       ├── 0827773.bin
    │   │       │   │       ├── 0827774.bin
    │   │       │   │       ├── 0827775.bin
    │   │       │   │       ├── 0827776.bin
    │   │       │   │       ├── 0827777.bin
    │   │       │   │       ├── 0827778.bin
    │   │       │   │       ├── 0827779.bin
    │   │       │   │       ├── 0827780.bin
    │   │       │   │       ├── 0827781.bin
    │   │       │   │       ├── 0827782.bin
    │   │       │   │       ├── 0827783.bin
    │   │       │   │       ├── 0827784.bin
    │   │       │   │       ├── 0827785.bin
    │   │       │   │       ├── 0827786.bin
    │   │       │   │       ├── 0827787.bin
    │   │       │   │       ├── 0827788.bin
    │   │       │   │       ├── 0827789.bin
    │   │       │   │       ├── 0827790.bin
    │   │       │   │       ├── 0827791.bin
    │   │       │   │       ├── 0827792.bin
    │   │       │   │       ├── 0827793.bin
    │   │       │   │       ├── 0827794.bin
    │   │       │   │       ├── 0827795.bin
    │   │       │   │       ├── 0827796.bin
    │   │       │   │       ├── 0827797.bin
    │   │       │   │       ├── 0827798.bin
    │   │       │   │       ├── 0827799.bin
    │   │       │   │       ├── 0827800.bin
    │   │       │   │       ├── 0827801.bin
    │   │       │   │       ├── 0827802.bin
    │   │       │   │       ├── 0827803.bin
    │   │       │   │       ├── 0827804.bin
    │   │       │   │       ├── 0827805.bin
    │   │       │   │       ├── 0827806.bin
    │   │       │   │       ├── 0827807.bin
    │   │       │   │       ├── 0827808.bin
    │   │       │   │       ├── 0827809.bin
    │   │       │   │       ├── 0827810.bin
    │   │       │   │       ├── 0827811.bin
    │   │       │   │       ├── 0827812.bin
    │   │       │   │       ├── 0827813.bin
    │   │       │   │       ├── 0827814.bin
    │   │       │   │       ├── 0827815.bin
    │   │       │   │       ├── 0827816.bin
    │   │       │   │       ├── 0827817.bin
    │   │       │   │       ├── 0827818.bin
    │   │       │   │       ├── 0827819.bin
    │   │       │   │       ├── 0827820.bin
    │   │       │   │       ├── 0827821.bin
    │   │       │   │       ├── 0827822.bin
    │   │       │   │       ├── 0827823.bin
    │   │       │   │       ├── 0827824.bin
    │   │       │   │       ├── 0827825.bin
    │   │       │   │       ├── 0827826.bin
    │   │       │   │       ├── 0827827.bin
    │   │       │   │       ├── 0827828.bin
    │   │       │   │       ├── 0827829.bin
    │   │       │   │       ├── 0827830.bin
    │   │       │   │       ├── 0827831.bin
    │   │       │   │       ├── 0827832.bin
    │   │       │   │       ├── 0827833.bin
    │   │       │   │       ├── 0827834.bin
    │   │       │   │       ├── 0827835.bin
    │   │       │   │       ├── 0827836.bin
    │   │       │   │       ├── 0827837.bin
    │   │       │   │       ├── 0827838.bin
    │   │       │   │       ├── 0827839.bin
    │   │       │   │       ├── 0827840.bin
    │   │       │   │       ├── 0827841.bin
    │   │       │   │       ├── 0827842.bin
    │   │       │   │       ├── 0827843.bin
    │   │       │   │       ├── 0827844.bin
    │   │       │   │       ├── 0827845.bin
    │   │       │   │       ├── 0827846.bin
    │   │       │   │       ├── 0827847.bin
    │   │       │   │       ├── 0827848.bin
    │   │       │   │       ├── 0827849.bin
    │   │       │   │       ├── 0827850.bin
    │   │       │   │       ├── 0827851.bin
    │   │       │   │       ├── 0827852.bin
    │   │       │   │       ├── 0827853.bin
    │   │       │   │       ├── 0827854.bin
    │   │       │   │       ├── 0827855.bin
    │   │       │   │       ├── 0827856.bin
    │   │       │   │       ├── 0827857.bin
    │   │       │   │       ├── 0827858.bin
    │   │       │   │       ├── 0827859.bin
    │   │       │   │       ├── 0827860.bin
    │   │       │   │       ├── 0827861.bin
    │   │       │   │       ├── 0827862.bin
    │   │       │   │       ├── 0827863.bin
    │   │       │   │       ├── 0827864.bin
    │   │       │   │       ├── 0827865.bin
    │   │       │   │       ├── 0827866.bin
    │   │       │   │       ├── 0827867.bin
    │   │       │   │       ├── 0827868.bin
    │   │       │   │       ├── 0827869.bin
    │   │       │   │       ├── 0827870.bin
    │   │       │   │       ├── 0827871.bin
    │   │       │   │       ├── 0827872.bin
    │   │       │   │       ├── 0827873.bin
    │   │       │   │       ├── 0827874.bin
    │   │       │   │       ├── 0827875.bin
    │   │       │   │       ├── 0827876.bin
    │   │       │   │       ├── 0827877.bin
    │   │       │   │       ├── 0827878.bin
    │   │       │   │       ├── 0827879.bin
    │   │       │   │       ├── 0827880.bin
    │   │       │   │       ├── 0827881.bin
    │   │       │   │       ├── 0827882.bin
    │   │       │   │       ├── 0827883.bin
    │   │       │   │       ├── 0827884.bin
    │   │       │   │       ├── 0827885.bin
    │   │       │   │       ├── 0827886.bin
    │   │       │   │       ├── 0827887.bin
    │   │       │   │       ├── 0827888.bin
    │   │       │   │       ├── 0827889.bin
    │   │       │   │       ├── 0827890.bin
    │   │       │   │       ├── 0827891.bin
    │   │       │   │       ├── 0827892.bin
    │   │       │   │       ├── 0827893.bin
    │   │       │   │       ├── 0827894.bin
    │   │       │   │       ├── 0827895.bin
    │   │       │   │       ├── 0827896.bin
    │   │       │   │       ├── 0827897.bin
    │   │       │   │       ├── 0827898.bin
    │   │       │   │       ├── 0827899.bin
    │   │       │   │       ├── 0827900.bin
    │   │       │   │       ├── 0827901.bin
    │   │       │   │       ├── 0827902.bin
    │   │       │   │       ├── 0827903.bin
    │   │       │   │       ├── 0827904.bin
    │   │       │   │       ├── 0827905.bin
    │   │       │   │       ├── 0827906.bin
    │   │       │   │       ├── 0827907.bin
    │   │       │   │       ├── 0827908.bin
    │   │       │   │       ├── 0827909.bin
    │   │       │   │       ├── 0827910.bin
    │   │       │   │       ├── 0827911.bin
    │   │       │   │       ├── 0827912.bin
    │   │       │   │       ├── 0827913.bin
    │   │       │   │       ├── 0827914.bin
    │   │       │   │       ├── 0827915.bin
    │   │       │   │       ├── 0827916.bin
    │   │       │   │       ├── 0827917.bin
    │   │       │   │       ├── 0827918.bin
    │   │       │   │       ├── 0827919.bin
    │   │       │   │       ├── 0827920.bin
    │   │       │   │       ├── 0827921.bin
    │   │       │   │       ├── 0827922.bin
    │   │       │   │       ├── 0827923.bin
    │   │       │   │       ├── 0827924.bin
    │   │       │   │       ├── 0827925.bin
    │   │       │   │       ├── 0827926.bin
    │   │       │   │       ├── 0827927.bin
    │   │       │   │       ├── 0827928.bin
    │   │       │   │       ├── 0827929.bin
    │   │       │   │       ├── 0827930.bin
    │   │       │   │       ├── 0827931.bin
    │   │       │   │       ├── 0827932.bin
    │   │       │   │       ├── 0827933.bin
    │   │       │   │       ├── 0827934.bin
    │   │       │   │       ├── 0827935.bin
    │   │       │   │       ├── 0827936.bin
    │   │       │   │       ├── 0827937.bin
    │   │       │   │       ├── 0827938.bin
    │   │       │   │       ├── 0827939.bin
    │   │       │   │       ├── 0827940.bin
    │   │       │   │       ├── 0827941.bin
    │   │       │   │       ├── 0827942.bin
    │   │       │   │       ├── 0827943.bin
    │   │       │   │       ├── 0827944.bin
    │   │       │   │       ├── 0827945.bin
    │   │       │   │       ├── 0827946.bin
    │   │       │   │       ├── 0827947.bin
    │   │       │   │       ├── 0827948.bin
    │   │       │   │       ├── 0827949.bin
    │   │       │   │       ├── 0827950.bin
    │   │       │   │       ├── 0827951.bin
    │   │       │   │       ├── 0827952.bin
    │   │       │   │       ├── 0827953.bin
    │   │       │   │       ├── 0827954.bin
    │   │       │   │       ├── 0827955.bin
    │   │       │   │       ├── 0827956.bin
    │   │       │   │       ├── 0827957.bin
    │   │       │   │       ├── 0827958.bin
    │   │       │   │       ├── 0827959.bin
    │   │       │   │       ├── 0827960.bin
    │   │       │   │       ├── 0827961.bin
    │   │       │   │       ├── 0827962.bin
    │   │       │   │       ├── 0827963.bin
    │   │       │   │       ├── 0827964.bin
    │   │       │   │       ├── 0827965.bin
    │   │       │   │       ├── 0827966.bin
    │   │       │   │       ├── 0827967.bin
    │   │       │   │       ├── 0827968.bin
    │   │       │   │       ├── 0827969.bin
    │   │       │   │       ├── 0827970.bin
    │   │       │   │       ├── 0827971.bin
    │   │       │   │       ├── 0827972.bin
    │   │       │   │       ├── 0827973.bin
    │   │       │   │       ├── 0827974.bin
    │   │       │   │       ├── 0827975.bin
    │   │       │   │       ├── 0827976.bin
    │   │       │   │       ├── 0827977.bin
    │   │       │   │       ├── 0827978.bin
    │   │       │   │       ├── 0827979.bin
    │   │       │   │       ├── 0827980.bin
    │   │       │   │       ├── 0827981.bin
    │   │       │   │       ├── 0827982.bin
    │   │       │   │       ├── 0827983.bin
    │   │       │   │       ├── 0827984.bin
    │   │       │   │       ├── 0827985.bin
    │   │       │   │       ├── 0827986.bin
    │   │       │   │       ├── 0827987.bin
    │   │       │   │       ├── 0827988.bin
    │   │       │   │       ├── 0827989.bin
    │   │       │   │       ├── 0827990.bin
    │   │       │   │       ├── 0827991.bin
    │   │       │   │       ├── 0827992.bin
    │   │       │   │       ├── 0827993.bin
    │   │       │   │       ├── 0827994.bin
    │   │       │   │       ├── 0827995.bin
    │   │       │   │       ├── 0827996.bin
    │   │       │   │       ├── 0827997.bin
    │   │       │   │       ├── 0827998.bin
    │   │       │   │       ├── 0827999.bin
    │   │       │   │       ├── 0828000.bin
    │   │       │   │       ├── 0828001.bin
    │   │       │   │       ├── 0828002.bin
    │   │       │   │       ├── 0828003.bin
    │   │       │   │       ├── 0828004.bin
    │   │       │   │       ├── 0828005.bin
    │   │       │   │       ├── 0828006.bin
    │   │       │   │       ├── 0828007.bin
    │   │       │   │       ├── 0828008.bin
    │   │       │   │       ├── 0828009.bin
    │   │       │   │       ├── 0828010.bin
    │   │       │   │       ├── 0828011.bin
    │   │       │   │       ├── 0828012.bin
    │   │       │   │       ├── 0828013.bin
    │   │       │   │       ├── 0828014.bin
    │   │       │   │       ├── 0828015.bin
    │   │       │   │       ├── 0828016.bin
    │   │       │   │       ├── 0828017.bin
    │   │       │   │       ├── 0828018.bin
    │   │       │   │       ├── 0828019.bin
    │   │       │   │       ├── 0828020.bin
    │   │       │   │       ├── 0828021.bin
    │   │       │   │       ├── 0828022.bin
    │   │       │   │       ├── 0828023.bin
    │   │       │   │       ├── 0828024.bin
    │   │       │   │       ├── 0828025.bin
    │   │       │   │       ├── 0828026.bin
    │   │       │   │       ├── 0828027.bin
    │   │       │   │       ├── 0828028.bin
    │   │       │   │       ├── 0828029.bin
    │   │       │   │       ├── 0828030.bin
    │   │       │   │       ├── 0828031.bin
    │   │       │   │       ├── 0828032.bin
    │   │       │   │       ├── 0828033.bin
    │   │       │   │       ├── 0828034.bin
    │   │       │   │       ├── 0828035.bin
    │   │       │   │       ├── 0828036.bin
    │   │       │   │       ├── 0828037.bin
    │   │       │   │       ├── 0828038.bin
    │   │       │   │       ├── 0828039.bin
    │   │       │   │       ├── 0828040.bin
    │   │       │   │       ├── 0828041.bin
    │   │       │   │       ├── 0828042.bin
    │   │       │   │       ├── 0828043.bin
    │   │       │   │       ├── 0828044.bin
    │   │       │   │       ├── 0828045.bin
    │   │       │   │       ├── 0828046.bin
    │   │       │   │       ├── 0828047.bin
    │   │       │   │       ├── 0828048.bin
    │   │       │   │       ├── 0828049.bin
    │   │       │   │       ├── 0828050.bin
    │   │       │   │       ├── 0828051.bin
    │   │       │   │       ├── 0828052.bin
    │   │       │   │       ├── 0828053.bin
    │   │       │   │       ├── 0828054.bin
    │   │       │   │       ├── 0828055.bin
    │   │       │   │       ├── 0828056.bin
    │   │       │   │       ├── 0828057.bin
    │   │       │   │       ├── 0828058.bin
    │   │       │   │       ├── 0828059.bin
    │   │       │   │       ├── 0828060.bin
    │   │       │   │       ├── 0828061.bin
    │   │       │   │       ├── 0828062.bin
    │   │       │   │       ├── 0828063.bin
    │   │       │   │       ├── 0828064.bin
    │   │       │   │       ├── 0828065.bin
    │   │       │   │       ├── 0828066.bin
    │   │       │   │       ├── 0828067.bin
    │   │       │   │       ├── 0828068.bin
    │   │       │   │       ├── 0828069.bin
    │   │       │   │       ├── 0828070.bin
    │   │       │   │       ├── 0828071.bin
    │   │       │   │       ├── 0828072.bin
    │   │       │   │       ├── 0828073.bin
    │   │       │   │       ├── 0828074.bin
    │   │       │   │       ├── 0828075.bin
    │   │       │   │       ├── 0828076.bin
    │   │       │   │       ├── 0828077.bin
    │   │       │   │       ├── 0828078.bin
    │   │       │   │       ├── 0828079.bin
    │   │       │   │       ├── 0828080.bin
    │   │       │   │       ├── 0828081.bin
    │   │       │   │       ├── 0828082.bin
    │   │       │   │       ├── 0828083.bin
    │   │       │   │       ├── 0828084.bin
    │   │       │   │       ├── 0828085.bin
    │   │       │   │       ├── 0828086.bin
    │   │       │   │       ├── 0828087.bin
    │   │       │   │       ├── 0828088.bin
    │   │       │   │       ├── 0828089.bin
    │   │       │   │       ├── 0828090.bin
    │   │       │   │       ├── 0828091.bin
    │   │       │   │       ├── 0828092.bin
    │   │       │   │       ├── 0828093.bin
    │   │       │   │       ├── 0828094.bin
    │   │       │   │       ├── 0828095.bin
    │   │       │   │       ├── 0828096.bin
    │   │       │   │       ├── 0828097.bin
    │   │       │   │       ├── 0828098.bin
    │   │       │   │       ├── 0828099.bin
    │   │       │   │       ├── 0828100.bin
    │   │       │   │       ├── 0828101.bin
    │   │       │   │       ├── 0828102.bin
    │   │       │   │       ├── 0828103.bin
    │   │       │   │       ├── 0828104.bin
    │   │       │   │       ├── 0828105.bin
    │   │       │   │       ├── 0828106.bin
    │   │       │   │       ├── 0828107.bin
    │   │       │   │       ├── 0828108.bin
    │   │       │   │       ├── 0828109.bin
    │   │       │   │       ├── 0828110.bin
    │   │       │   │       ├── 0828111.bin
    │   │       │   │       ├── 0828112.bin
    │   │       │   │       ├── 0828113.bin
    │   │       │   │       ├── 0828114.bin
    │   │       │   │       ├── 0828115.bin
    │   │       │   │       ├── 0828116.bin
    │   │       │   │       ├── 0828117.bin
    │   │       │   │       ├── 0828118.bin
    │   │       │   │       ├── 0828119.bin
    │   │       │   │       ├── 0828120.bin
    │   │       │   │       ├── 0828121.bin
    │   │       │   │       ├── 0828122.bin
    │   │       │   │       ├── 0828123.bin
    │   │       │   │       ├── 0828124.bin
    │   │       │   │       ├── 0828125.bin
    │   │       │   │       ├── 0828126.bin
    │   │       │   │       ├── 0828127.bin
    │   │       │   │       ├── 0828128.bin
    │   │       │   │       ├── 0828129.bin
    │   │       │   │       ├── 0828130.bin
    │   │       │   │       ├── 0828131.bin
    │   │       │   │       ├── 0828132.bin
    │   │       │   │       ├── 0828133.bin
    │   │       │   │       ├── 0828134.bin
    │   │       │   │       ├── 0828135.bin
    │   │       │   │       ├── 0828136.bin
    │   │       │   │       ├── 0828137.bin
    │   │       │   │       ├── 0828138.bin
    │   │       │   │       ├── 0828139.bin
    │   │       │   │       ├── 0828140.bin
    │   │       │   │       ├── 0828141.bin
    │   │       │   │       ├── 0828142.bin
    │   │       │   │       ├── 0828143.bin
    │   │       │   │       ├── 0828144.bin
    │   │       │   │       ├── 0828145.bin
    │   │       │   │       ├── 0828146.bin
    │   │       │   │       ├── 0828147.bin
    │   │       │   │       ├── 0828148.bin
    │   │       │   │       ├── 0828149.bin
    │   │       │   │       ├── 0828150.bin
    │   │       │   │       ├── 0828151.bin
    │   │       │   │       ├── 0828152.bin
    │   │       │   │       ├── 0828153.bin
    │   │       │   │       ├── 0828154.bin
    │   │       │   │       ├── 0828155.bin
    │   │       │   │       ├── 0828156.bin
    │   │       │   │       ├── 0828157.bin
    │   │       │   │       ├── 0828158.bin
    │   │       │   │       ├── 0828159.bin
    │   │       │   │       ├── 0828160.bin
    │   │       │   │       ├── 0828161.bin
    │   │       │   │       ├── 0828162.bin
    │   │       │   │       ├── 0828163.bin
    │   │       │   │       ├── 0828164.bin
    │   │       │   │       ├── 0828165.bin
    │   │       │   │       ├── 0828166.bin
    │   │       │   │       ├── 0828167.bin
    │   │       │   │       ├── 0828168.bin
    │   │       │   │       ├── 0828169.bin
    │   │       │   │       ├── 0828170.bin
    │   │       │   │       ├── 0828171.bin
    │   │       │   │       ├── 0828172.bin
    │   │       │   │       ├── 0828173.bin
    │   │       │   │       ├── 0828174.bin
    │   │       │   │       ├── 0828175.bin
    │   │       │   │       ├── 0828176.bin
    │   │       │   │       ├── 0828177.bin
    │   │       │   │       ├── 0828178.bin
    │   │       │   │       ├── 0828179.bin
    │   │       │   │       ├── 0828180.bin
    │   │       │   │       ├── 0828181.bin
    │   │       │   │       ├── 0828182.bin
    │   │       │   │       ├── 0828183.bin
    │   │       │   │       ├── 0828184.bin
    │   │       │   │       ├── 0828185.bin
    │   │       │   │       ├── 0828186.bin
    │   │       │   │       ├── 0828187.bin
    │   │       │   │       ├── 0828188.bin
    │   │       │   │       ├── 0828189.bin
    │   │       │   │       ├── 0828190.bin
    │   │       │   │       ├── 0828191.bin
    │   │       │   │       ├── 0828192.bin
    │   │       │   │       ├── 0828193.bin
    │   │       │   │       ├── 0828194.bin
    │   │       │   │       ├── 0828195.bin
    │   │       │   │       ├── 0828196.bin
    │   │       │   │       ├── 0828197.bin
    │   │       │   │       ├── 0828198.bin
    │   │       │   │       ├── 0828199.bin
    │   │       │   │       ├── 0828200.bin
    │   │       │   │       ├── 0828201.bin
    │   │       │   │       ├── 0828202.bin
    │   │       │   │       ├── 0828203.bin
    │   │       │   │       ├── 0828204.bin
    │   │       │   │       ├── 0828205.bin
    │   │       │   │       ├── 0828206.bin
    │   │       │   │       ├── 0828207.bin
    │   │       │   │       ├── 0828208.bin
    │   │       │   │       ├── 0828209.bin
    │   │       │   │       ├── 0828210.bin
    │   │       │   │       ├── 0828211.bin
    │   │       │   │       ├── 0828212.bin
    │   │       │   │       ├── 0828213.bin
    │   │       │   │       ├── 0828214.bin
    │   │       │   │       ├── 0828215.bin
    │   │       │   │       ├── 0828216.bin
    │   │       │   │       ├── 0828217.bin
    │   │       │   │       ├── 0828218.bin
    │   │       │   │       ├── 0828219.bin
    │   │       │   │       ├── 0828220.bin
    │   │       │   │       ├── 0828221.bin
    │   │       │   │       ├── 0828222.bin
    │   │       │   │       ├── 0828223.bin
    │   │       │   │       ├── 0828224.bin
    │   │       │   │       ├── 0828225.bin
    │   │       │   │       ├── 0828226.bin
    │   │       │   │       ├── 0828227.bin
    │   │       │   │       ├── 0828228.bin
    │   │       │   │       ├── 0828229.bin
    │   │       │   │       ├── 0828230.bin
    │   │       │   │       ├── 0828231.bin
    │   │       │   │       ├── 0828232.bin
    │   │       │   │       ├── 0828233.bin
    │   │       │   │       ├── 0828234.bin
    │   │       │   │       ├── 0828235.bin
    │   │       │   │       ├── 0828236.bin
    │   │       │   │       ├── 0828237.bin
    │   │       │   │       ├── 0828238.bin
    │   │       │   │       ├── 0828239.bin
    │   │       │   │       ├── 0828240.bin
    │   │       │   │       ├── 0828241.bin
    │   │       │   │       ├── 0828242.bin
    │   │       │   │       ├── 0828243.bin
    │   │       │   │       ├── 0828244.bin
    │   │       │   │       ├── 0828245.bin
    │   │       │   │       ├── 0828246.bin
    │   │       │   │       ├── 0828247.bin
    │   │       │   │       ├── 0828248.bin
    │   │       │   │       ├── 0828249.bin
    │   │       │   │       ├── 0828250.bin
    │   │       │   │       ├── 0828251.bin
    │   │       │   │       ├── 0828252.bin
    │   │       │   │       ├── 0828253.bin
    │   │       │   │       ├── 0828254.bin
    │   │       │   │       ├── 0828255.bin
    │   │       │   │       ├── 0828256.bin
    │   │       │   │       ├── 0828257.bin
    │   │       │   │       ├── 0828258.bin
    │   │       │   │       ├── 0828259.bin
    │   │       │   │       ├── 0828260.bin
    │   │       │   │       ├── 0828261.bin
    │   │       │   │       ├── 0828262.bin
    │   │       │   │       ├── 0828263.bin
    │   │       │   │       ├── 0828264.bin
    │   │       │   │       ├── 0828265.bin
    │   │       │   │       ├── 0828266.bin
    │   │       │   │       ├── 0828267.bin
    │   │       │   │       ├── 0828268.bin
    │   │       │   │       ├── 0828269.bin
    │   │       │   │       ├── 0828270.bin
    │   │       │   │       ├── 0828271.bin
    │   │       │   │       ├── 0828272.bin
    │   │       │   │       ├── 0828273.bin
    │   │       │   │       ├── 0828274.bin
    │   │       │   │       ├── 0828275.bin
    │   │       │   │       ├── 0828276.bin
    │   │       │   │       ├── 0828277.bin
    │   │       │   │       ├── 0828278.bin
    │   │       │   │       ├── 0828279.bin
    │   │       │   │       ├── 0828280.bin
    │   │       │   │       ├── 0828281.bin
    │   │       │   │       ├── 0828282.bin
    │   │       │   │       ├── 0828283.bin
    │   │       │   │       ├── 0828284.bin
    │   │       │   │       ├── 0828285.bin
    │   │       │   │       ├── 0828286.bin
    │   │       │   │       ├── 0828287.bin
    │   │       │   │       ├── 0828288.bin
    │   │       │   │       ├── 0828289.bin
    │   │       │   │       ├── 0828290.bin
    │   │       │   │       ├── 0828291.bin
    │   │       │   │       ├── 0828292.bin
    │   │       │   │       ├── 0828293.bin
    │   │       │   │       ├── 0828294.bin
    │   │       │   │       ├── 0828295.bin
    │   │       │   │       ├── 0828296.bin
    │   │       │   │       ├── 0828297.bin
    │   │       │   │       ├── 0828298.bin
    │   │       │   │       ├── 0828299.bin
    │   │       │   │       ├── 0828300.bin
    │   │       │   │       ├── 0828301.bin
    │   │       │   │       ├── 0828302.bin
    │   │       │   │       ├── 0828303.bin
    │   │       │   │       ├── 0828304.bin
    │   │       │   │       ├── 0828305.bin
    │   │       │   │       ├── 0828306.bin
    │   │       │   │       ├── 0828307.bin
    │   │       │   │       ├── 0828308.bin
    │   │       │   │       ├── 0828309.bin
    │   │       │   │       ├── 0828310.bin
    │   │       │   │       ├── 0828311.bin
    │   │       │   │       ├── 0828312.bin
    │   │       │   │       ├── 0828313.bin
    │   │       │   │       ├── 0828314.bin
    │   │       │   │       ├── 0828315.bin
    │   │       │   │       ├── 0828316.bin
    │   │       │   │       ├── 0828317.bin
    │   │       │   │       ├── 0828318.bin
    │   │       │   │       ├── 0828319.bin
    │   │       │   │       ├── 0828320.bin
    │   │       │   │       ├── 0828321.bin
    │   │       │   │       ├── 0828322.bin
    │   │       │   │       ├── 0828323.bin
    │   │       │   │       ├── 0828324.bin
    │   │       │   │       ├── 0828325.bin
    │   │       │   │       ├── 0828326.bin
    │   │       │   │       ├── 0828327.bin
    │   │       │   │       ├── 0828328.bin
    │   │       │   │       ├── 0828329.bin
    │   │       │   │       ├── 0828330.bin
    │   │       │   │       ├── 0828331.bin
    │   │       │   │       ├── 0828332.bin
    │   │       │   │       ├── 0828333.bin
    │   │       │   │       ├── 0828334.bin
    │   │       │   │       ├── 0828335.bin
    │   │       │   │       ├── 0828336.bin
    │   │       │   │       ├── 0828337.bin
    │   │       │   │       ├── 0828338.bin
    │   │       │   │       ├── 0828339.bin
    │   │       │   │       ├── 0828340.bin
    │   │       │   │       ├── 0828341.bin
    │   │       │   │       ├── 0828342.bin
    │   │       │   │       ├── 0828343.bin
    │   │       │   │       ├── 0828344.bin
    │   │       │   │       ├── 0828345.bin
    │   │       │   │       ├── 0828346.bin
    │   │       │   │       ├── 0828347.bin
    │   │       │   │       ├── 0828348.bin
    │   │       │   │       ├── 0828349.bin
    │   │       │   │       ├── 0828350.bin
    │   │       │   │       ├── 0828351.bin
    │   │       │   │       ├── 0828352.bin
    │   │       │   │       ├── 0828353.bin
    │   │       │   │       ├── 0828354.bin
    │   │       │   │       ├── 0828355.bin
    │   │       │   │       ├── 0828356.bin
    │   │       │   │       ├── 0828357.bin
    │   │       │   │       ├── 0828358.bin
    │   │       │   │       ├── 0828359.bin
    │   │       │   │       ├── 0828360.bin
    │   │       │   │       ├── 0828361.bin
    │   │       │   │       ├── 0828362.bin
    │   │       │   │       ├── 0828363.bin
    │   │       │   │       ├── 0828364.bin
    │   │       │   │       ├── 0828365.bin
    │   │       │   │       ├── 0828366.bin
    │   │       │   │       ├── 0828367.bin
    │   │       │   │       ├── 0828368.bin
    │   │       │   │       ├── 0828369.bin
    │   │       │   │       ├── 0828370.bin
    │   │       │   │       ├── 0828371.bin
    │   │       │   │       ├── 0828372.bin
    │   │       │   │       ├── 0828373.bin
    │   │       │   │       ├── 0828374.bin
    │   │       │   │       ├── 0828375.bin
    │   │       │   │       ├── 0828376.bin
    │   │       │   │       ├── 0828377.bin
    │   │       │   │       ├── 0828378.bin
    │   │       │   │       ├── 0828379.bin
    │   │       │   │       ├── 0828380.bin
    │   │       │   │       ├── 0828381.bin
    │   │       │   │       ├── 0828382.bin
    │   │       │   │       ├── 0828383.bin
    │   │       │   │       ├── 0828384.bin
    │   │       │   │       ├── 0828385.bin
    │   │       │   │       ├── 0828386.bin
    │   │       │   │       ├── 0828387.bin
    │   │       │   │       ├── 0828388.bin
    │   │       │   │       ├── 0828389.bin
    │   │       │   │       ├── 0828390.bin
    │   │       │   │       ├── 0828391.bin
    │   │       │   │       ├── 0828392.bin
    │   │       │   │       ├── 0828393.bin
    │   │       │   │       ├── 0828394.bin
    │   │       │   │       ├── 0828395.bin
    │   │       │   │       ├── 0828396.bin
    │   │       │   │       ├── 0828397.bin
    │   │       │   │       ├── 0828398.bin
    │   │       │   │       ├── 0828399.bin
    │   │       │   │       ├── 0828400.bin
    │   │       │   │       ├── 0828401.bin
    │   │       │   │       ├── 0828402.bin
    │   │       │   │       ├── 0828403.bin
    │   │       │   │       ├── 0828404.bin
    │   │       │   │       ├── 0828405.bin
    │   │       │   │       ├── 0828406.bin
    │   │       │   │       ├── 0828407.bin
    │   │       │   │       ├── 0828408.bin
    │   │       │   │       ├── 0828409.bin
    │   │       │   │       ├── 0828410.bin
    │   │       │   │       ├── 0828411.bin
    │   │       │   │       ├── 0828412.bin
    │   │       │   │       ├── 0828413.bin
    │   │       │   │       ├── 0828414.bin
    │   │       │   │       ├── 0828415.bin
    │   │       │   │       ├── 0828416.bin
    │   │       │   │       ├── 0828417.bin
    │   │       │   │       ├── 0828418.bin
    │   │       │   │       ├── 0828419.bin
    │   │       │   │       ├── 0828420.bin
    │   │       │   │       ├── 0828421.bin
    │   │       │   │       ├── 0828422.bin
    │   │       │   │       ├── 0828423.bin
    │   │       │   │       ├── 0828424.bin
    │   │       │   │       ├── 0828425.bin
    │   │       │   │       ├── 0828426.bin
    │   │       │   │       ├── 0828427.bin
    │   │       │   │       ├── 0828428.bin
    │   │       │   │       ├── 0828429.bin
    │   │       │   │       ├── 0828430.bin
    │   │       │   │       ├── 0828431.bin
    │   │       │   │       ├── 0828432.bin
    │   │       │   │       ├── 0828433.bin
    │   │       │   │       ├── 0828434.bin
    │   │       │   │       ├── 0828435.bin
    │   │       │   │       ├── 0828436.bin
    │   │       │   │       ├── 0828437.bin
    │   │       │   │       ├── 0828438.bin
    │   │       │   │       ├── 0828439.bin
    │   │       │   │       ├── 0828440.bin
    │   │       │   │       ├── 0828441.bin
    │   │       │   │       ├── 0828442.bin
    │   │       │   │       ├── 0828443.bin
    │   │       │   │       ├── 0828444.bin
    │   │       │   │       ├── 0828445.bin
    │   │       │   │       ├── 0828446.bin
    │   │       │   │       ├── 0828447.bin
    │   │       │   │       ├── 0828448.bin
    │   │       │   │       ├── 0828449.bin
    │   │       │   │       ├── 0828450.bin
    │   │       │   │       ├── 0828451.bin
    │   │       │   │       ├── 0828452.bin
    │   │       │   │       ├── 0828453.bin
    │   │       │   │       ├── 0828454.bin
    │   │       │   │       ├── 0828455.bin
    │   │       │   │       ├── 0828456.bin
    │   │       │   │       ├── 0828457.bin
    │   │       │   │       ├── 0828458.bin
    │   │       │   │       ├── 0828459.bin
    │   │       │   │       ├── 0828460.bin
    │   │       │   │       ├── 0828461.bin
    │   │       │   │       ├── 0828462.bin
    │   │       │   │       ├── 0828463.bin
    │   │       │   │       ├── 0828464.bin
    │   │       │   │       ├── 0828465.bin
    │   │       │   │       ├── 0828466.bin
    │   │       │   │       ├── 0828467.bin
    │   │       │   │       ├── 0828468.bin
    │   │       │   │       ├── 0828469.bin
    │   │       │   │       ├── 0828470.bin
    │   │       │   │       ├── 0828471.bin
    │   │       │   │       ├── 0828472.bin
    │   │       │   │       ├── 0828473.bin
    │   │       │   │       ├── 0828474.bin
    │   │       │   │       ├── 0828475.bin
    │   │       │   │       ├── 0828476.bin
    │   │       │   │       ├── 0828477.bin
    │   │       │   │       ├── 0828478.bin
    │   │       │   │       ├── 0828479.bin
    │   │       │   │       ├── 0828480.bin
    │   │       │   │       ├── 0828481.bin
    │   │       │   │       ├── 0828482.bin
    │   │       │   │       ├── 0828483.bin
    │   │       │   │       ├── 0828484.bin
    │   │       │   │       ├── 0828485.bin
    │   │       │   │       ├── 0828486.bin
    │   │       │   │       ├── 0828487.bin
    │   │       │   │       ├── 0828488.bin
    │   │       │   │       ├── 0828489.bin
    │   │       │   │       ├── 0828490.bin
    │   │       │   │       ├── 0828491.bin
    │   │       │   │       ├── 0828492.bin
    │   │       │   │       ├── 0828493.bin
    │   │       │   │       ├── 0828494.bin
    │   │       │   │       ├── 0828495.bin
    │   │       │   │       ├── 0828496.bin
    │   │       │   │       ├── 0828497.bin
    │   │       │   │       ├── 0828498.bin
    │   │       │   │       ├── 0828499.bin
    │   │       │   │       ├── 0828500.bin
    │   │       │   │       ├── 0828501.bin
    │   │       │   │       ├── 0828502.bin
    │   │       │   │       ├── 0828503.bin
    │   │       │   │       ├── 0828504.bin
    │   │       │   │       ├── 0828505.bin
    │   │       │   │       ├── 0828506.bin
    │   │       │   │       ├── 0828507.bin
    │   │       │   │       ├── 0828508.bin
    │   │       │   │       ├── 0828509.bin
    │   │       │   │       ├── 0828510.bin
    │   │       │   │       ├── 0828511.bin
    │   │       │   │       ├── 0828512.bin
    │   │       │   │       ├── 0828513.bin
    │   │       │   │       ├── 0828514.bin
    │   │       │   │       ├── 0828515.bin
    │   │       │   │       ├── 0828516.bin
    │   │       │   │       ├── 0828517.bin
    │   │       │   │       ├── 0828518.bin
    │   │       │   │       ├── 0828519.bin
    │   │       │   │       ├── 0828520.bin
    │   │       │   │       ├── 0828521.bin
    │   │       │   │       ├── 0828522.bin
    │   │       │   │       ├── 0828523.bin
    │   │       │   │       ├── 0828524.bin
    │   │       │   │       ├── 0828525.bin
    │   │       │   │       ├── 0828526.bin
    │   │       │   │       ├── 0828527.bin
    │   │       │   │       ├── 0828528.bin
    │   │       │   │       ├── 0828529.bin
    │   │       │   │       ├── 0828530.bin
    │   │       │   │       ├── 0828531.bin
    │   │       │   │       ├── 0828532.bin
    │   │       │   │       ├── 0828533.bin
    │   │       │   │       ├── 0828534.bin
    │   │       │   │       ├── 0828535.bin
    │   │       │   │       ├── 0828536.bin
    │   │       │   │       ├── 0828537.bin
    │   │       │   │       ├── 0828538.bin
    │   │       │   │       ├── 0828539.bin
    │   │       │   │       ├── 0828540.bin
    │   │       │   │       ├── 0828541.bin
    │   │       │   │       ├── 0828542.bin
    │   │       │   │       ├── 0828543.bin
    │   │       │   │       ├── 0828544.bin
    │   │       │   │       ├── 0828545.bin
    │   │       │   │       ├── 0828546.bin
    │   │       │   │       ├── 0828547.bin
    │   │       │   │       ├── 0828548.bin
    │   │       │   │       ├── 0828549.bin
    │   │       │   │       ├── 0828550.bin
    │   │       │   │       ├── 0828551.bin
    │   │       │   │       ├── 0828552.bin
    │   │       │   │       ├── 0828553.bin
    │   │       │   │       ├── 0828554.bin
    │   │       │   │       ├── 0828555.bin
    │   │       │   │       ├── 0828556.bin
    │   │       │   │       ├── 0828557.bin
    │   │       │   │       ├── 0828558.bin
    │   │       │   │       ├── 0828559.bin
    │   │       │   │       ├── 0828560.bin
    │   │       │   │       ├── 0828561.bin
    │   │       │   │       ├── 0828562.bin
    │   │       │   │       ├── 0828563.bin
    │   │       │   │       ├── 0828564.bin
    │   │       │   │       ├── 0828565.bin
    │   │       │   │       ├── 0828566.bin
    │   │       │   │       ├── 0828567.bin
    │   │       │   │       ├── 0828568.bin
    │   │       │   │       ├── 0828569.bin
    │   │       │   │       ├── 0828570.bin
    │   │       │   │       ├── 0828571.bin
    │   │       │   │       ├── 0828572.bin
    │   │       │   │       ├── 0828573.bin
    │   │       │   │       ├── 0828574.bin
    │   │       │   │       ├── 0828575.bin
    │   │       │   │       ├── 0828576.bin
    │   │       │   │       ├── 0828577.bin
    │   │       │   │       ├── 0828578.bin
    │   │       │   │       ├── 0828579.bin
    │   │       │   │       ├── 0828580.bin
    │   │       │   │       ├── 0828581.bin
    │   │       │   │       ├── 0828582.bin
    │   │       │   │       ├── 0828583.bin
    │   │       │   │       ├── 0828584.bin
    │   │       │   │       ├── 0828585.bin
    │   │       │   │       ├── 0828586.bin
    │   │       │   │       ├── 0828587.bin
    │   │       │   │       ├── 0828588.bin
    │   │       │   │       ├── 0828589.bin
    │   │       │   │       ├── 0828590.bin
    │   │       │   │       ├── 0828591.bin
    │   │       │   │       ├── 0828592.bin
    │   │       │   │       ├── 0828593.bin
    │   │       │   │       ├── 0828594.bin
    │   │       │   │       ├── 0828595.bin
    │   │       │   │       ├── 0828596.bin
    │   │       │   │       ├── 0828597.bin
    │   │       │   │       ├── 0828598.bin
    │   │       │   │       ├── 0828599.bin
    │   │       │   │       ├── 0828600.bin
    │   │       │   │       ├── 0828601.bin
    │   │       │   │       ├── 0828602.bin
    │   │       │   │       ├── 0828603.bin
    │   │       │   │       ├── 0828604.bin
    │   │       │   │       ├── 0828605.bin
    │   │       │   │       ├── 0828606.bin
    │   │       │   │       ├── 0828607.bin
    │   │       │   │       ├── 0828608.bin
    │   │       │   │       ├── 0828609.bin
    │   │       │   │       ├── 0828610.bin
    │   │       │   │       ├── 0828611.bin
    │   │       │   │       ├── 0828612.bin
    │   │       │   │       ├── 0828613.bin
    │   │       │   │       ├── 0828614.bin
    │   │       │   │       ├── 0828615.bin
    │   │       │   │       ├── 0828616.bin
    │   │       │   │       ├── 0828617.bin
    │   │       │   │       ├── 0828618.bin
    │   │       │   │       ├── 0828619.bin
    │   │       │   │       ├── 0828620.bin
    │   │       │   │       ├── 0828621.bin
    │   │       │   │       ├── 0828622.bin
    │   │       │   │       ├── 0828623.bin
    │   │       │   │       ├── 0828624.bin
    │   │       │   │       ├── 0828625.bin
    │   │       │   │       ├── 0828626.bin
    │   │       │   │       ├── 0828627.bin
    │   │       │   │       ├── 0828628.bin
    │   │       │   │       ├── 0828629.bin
    │   │       │   │       ├── 0828630.bin
    │   │       │   │       ├── 0828631.bin
    │   │       │   │       ├── 0828632.bin
    │   │       │   │       ├── 0828633.bin
    │   │       │   │       ├── 0828634.bin
    │   │       │   │       ├── 0828635.bin
    │   │       │   │       ├── 0828636.bin
    │   │       │   │       ├── 0828637.bin
    │   │       │   │       ├── 0828638.bin
    │   │       │   │       ├── 0828639.bin
    │   │       │   │       ├── 0828640.bin
    │   │       │   │       ├── 0828641.bin
    │   │       │   │       ├── 0828642.bin
    │   │       │   │       ├── 0828643.bin
    │   │       │   │       ├── 0828644.bin
    │   │       │   │       ├── 0828645.bin
    │   │       │   │       ├── 0828646.bin
    │   │       │   │       ├── 0828647.bin
    │   │       │   │       ├── 0828648.bin
    │   │       │   │       ├── 0828649.bin
    │   │       │   │       ├── 0828650.bin
    │   │       │   │       ├── 0828651.bin
    │   │       │   │       ├── 0828652.bin
    │   │       │   │       ├── 0828653.bin
    │   │       │   │       ├── 0828654.bin
    │   │       │   │       ├── 0828655.bin
    │   │       │   │       ├── 0828656.bin
    │   │       │   │       ├── 0828657.bin
    │   │       │   │       ├── 0828658.bin
    │   │       │   │       ├── 0828659.bin
    │   │       │   │       ├── 0828660.bin
    │   │       │   │       ├── 0828661.bin
    │   │       │   │       ├── 0828662.bin
    │   │       │   │       ├── 0828663.bin
    │   │       │   │       ├── 0828664.bin
    │   │       │   │       ├── 0828665.bin
    │   │       │   │       ├── 0828666.bin
    │   │       │   │       ├── 0828667.bin
    │   │       │   │       ├── 0828668.bin
    │   │       │   │       ├── 0828669.bin
    │   │       │   │       ├── 0828670.bin
    │   │       │   │       ├── 0828671.bin
    │   │       │   │       ├── 0828672.bin
    │   │       │   │       ├── 0828673.bin
    │   │       │   │       ├── 0828674.bin
    │   │       │   │       ├── 0828675.bin
    │   │       │   │       ├── 0828676.bin
    │   │       │   │       ├── 0828677.bin
    │   │       │   │       ├── 0828678.bin
    │   │       │   │       ├── 0828679.bin
    │   │       │   │       ├── 0828680.bin
    │   │       │   │       ├── 0828681.bin
    │   │       │   │       ├── 0828682.bin
    │   │       │   │       ├── 0828683.bin
    │   │       │   │       ├── 0828684.bin
    │   │       │   │       ├── 0828685.bin
    │   │       │   │       ├── 0828686.bin
    │   │       │   │       ├── 0828687.bin
    │   │       │   │       ├── 0828688.bin
    │   │       │   │       ├── 0828689.bin
    │   │       │   │       ├── 0828690.bin
    │   │       │   │       ├── 0828691.bin
    │   │       │   │       ├── 0828692.bin
    │   │       │   │       ├── 0828693.bin
    │   │       │   │       ├── 0828694.bin
    │   │       │   │       ├── 0828695.bin
    │   │       │   │       ├── 0828696.bin
    │   │       │   │       ├── 0828697.bin
    │   │       │   │       ├── 0828698.bin
    │   │       │   │       ├── 0828699.bin
    │   │       │   │       ├── 0828700.bin
    │   │       │   │       ├── 0828701.bin
    │   │       │   │       ├── 0828702.bin
    │   │       │   │       ├── 0828703.bin
    │   │       │   │       ├── 0828704.bin
    │   │       │   │       ├── 0828705.bin
    │   │       │   │       ├── 0828706.bin
    │   │       │   │       ├── 0828707.bin
    │   │       │   │       ├── 0828708.bin
    │   │       │   │       ├── 0828709.bin
    │   │       │   │       ├── 0828710.bin
    │   │       │   │       ├── 0828711.bin
    │   │       │   │       ├── 0828712.bin
    │   │       │   │       ├── 0828713.bin
    │   │       │   │       ├── 0828714.bin
    │   │       │   │       ├── 0828715.bin
    │   │       │   │       ├── 0828716.bin
    │   │       │   │       ├── 0828717.bin
    │   │       │   │       ├── 0828718.bin
    │   │       │   │       ├── 0828719.bin
    │   │       │   │       ├── 0828720.bin
    │   │       │   │       ├── 0828721.bin
    │   │       │   │       ├── 0828722.bin
    │   │       │   │       ├── 0828723.bin
    │   │       │   │       ├── 0828724.bin
    │   │       │   │       ├── 0828725.bin
    │   │       │   │       ├── 0828726.bin
    │   │       │   │       ├── 0828727.bin
    │   │       │   │       ├── 0828728.bin
    │   │       │   │       ├── 0828729.bin
    │   │       │   │       ├── 0828730.bin
    │   │       │   │       ├── 0828731.bin
    │   │       │   │       ├── 0828732.bin
    │   │       │   │       ├── 0828733.bin
    │   │       │   │       ├── 0828734.bin
    │   │       │   │       ├── 0828735.bin
    │   │       │   │       ├── 0828736.bin
    │   │       │   │       ├── 0828737.bin
    │   │       │   │       ├── 0828738.bin
    │   │       │   │       ├── 0828739.bin
    │   │       │   │       ├── 0828740.bin
    │   │       │   │       ├── 0828741.bin
    │   │       │   │       ├── 0828742.bin
    │   │       │   │       ├── 0828743.bin
    │   │       │   │       ├── 0828744.bin
    │   │       │   │       ├── 0828745.bin
    │   │       │   │       ├── 0828746.bin
    │   │       │   │       ├── 0828747.bin
    │   │       │   │       ├── 0828748.bin
    │   │       │   │       ├── 0828749.bin
    │   │       │   │       ├── 0828750.bin
    │   │       │   │       ├── 0828751.bin
    │   │       │   │       ├── 0828752.bin
    │   │       │   │       ├── 0828753.bin
    │   │       │   │       ├── 0828754.bin
    │   │       │   │       ├── 0828755.bin
    │   │       │   │       ├── 0828756.bin
    │   │       │   │       ├── 0828757.bin
    │   │       │   │       ├── 0828758.bin
    │   │       │   │       ├── 0828759.bin
    │   │       │   │       ├── 0828760.bin
    │   │       │   │       ├── 0828761.bin
    │   │       │   │       ├── 0828762.bin
    │   │       │   │       ├── 0828763.bin
    │   │       │   │       ├── 0828764.bin
    │   │       │   │       ├── 0828765.bin
    │   │       │   │       ├── 0828766.bin
    │   │       │   │       ├── 0828767.bin
    │   │       │   │       ├── 0828768.bin
    │   │       │   │       ├── 0828769.bin
    │   │       │   │       ├── 0828770.bin
    │   │       │   │       ├── 0828771.bin
    │   │       │   │       ├── 0828772.bin
    │   │       │   │       ├── 0828773.bin
    │   │       │   │       ├── 0828774.bin
    │   │       │   │       ├── 0828775.bin
    │   │       │   │       ├── 0828776.bin
    │   │       │   │       ├── 0828777.bin
    │   │       │   │       ├── 0828778.bin
    │   │       │   │       ├── 0828779.bin
    │   │       │   │       ├── 0828780.bin
    │   │       │   │       ├── 0828781.bin
    │   │       │   │       ├── 0828782.bin
    │   │       │   │       ├── 0828783.bin
    │   │       │   │       ├── 0828784.bin
    │   │       │   │       ├── 0828785.bin
    │   │       │   │       ├── 0828786.bin
    │   │       │   │       ├── 0828787.bin
    │   │       │   │       ├── 0828788.bin
    │   │       │   │       ├── 0828789.bin
    │   │       │   │       ├── 0828790.bin
    │   │       │   │       ├── 0828791.bin
    │   │       │   │       ├── 0828792.bin
    │   │       │   │       ├── 0828793.bin
    │   │       │   │       ├── 0828794.bin
    │   │       │   │       ├── 0828795.bin
    │   │       │   │       ├── 0828796.bin
    │   │       │   │       ├── 0828797.bin
    │   │       │   │       ├── 0828798.bin
    │   │       │   │       ├── 0828799.bin
    │   │       │   │       ├── 0828800.bin
    │   │       │   │       ├── 0828801.bin
    │   │       │   │       ├── 0828802.bin
    │   │       │   │       ├── 0828803.bin
    │   │       │   │       ├── 0828804.bin
    │   │       │   │       ├── 0828805.bin
    │   │       │   │       ├── 0828806.bin
    │   │       │   │       ├── 0828807.bin
    │   │       │   │       ├── 0828808.bin
    │   │       │   │       ├── 0828809.bin
    │   │       │   │       ├── 0828810.bin
    │   │       │   │       ├── 0828811.bin
    │   │       │   │       ├── 0828812.bin
    │   │       │   │       ├── 0828813.bin
    │   │       │   │       ├── 0828814.bin
    │   │       │   │       ├── 0828815.bin
    │   │       │   │       ├── 0828816.bin
    │   │       │   │       ├── 0828817.bin
    │   │       │   │       ├── 0828818.bin
    │   │       │   │       ├── 0828819.bin
    │   │       │   │       ├── 0828820.bin
    │   │       │   │       ├── 0828821.bin
    │   │       │   │       ├── 0828822.bin
    │   │       │   │       ├── 0828823.bin
    │   │       │   │       ├── 0828824.bin
    │   │       │   │       ├── 0828825.bin
    │   │       │   │       ├── 0828826.bin
    │   │       │   │       ├── 0828827.bin
    │   │       │   │       ├── 0828828.bin
    │   │       │   │       ├── 0828829.bin
    │   │       │   │       ├── 0828830.bin
    │   │       │   │       ├── 0828831.bin
    │   │       │   │       ├── 0828832.bin
    │   │       │   │       ├── 0828833.bin
    │   │       │   │       ├── 0828834.bin
    │   │       │   │       ├── 0828835.bin
    │   │       │   │       ├── 0828836.bin
    │   │       │   │       ├── 0828837.bin
    │   │       │   │       ├── 0828838.bin
    │   │       │   │       ├── 0828839.bin
    │   │       │   │       ├── 0828840.bin
    │   │       │   │       ├── 0828841.bin
    │   │       │   │       ├── 0828842.bin
    │   │       │   │       ├── 0828843.bin
    │   │       │   │       ├── 0828844.bin
    │   │       │   │       ├── 0828845.bin
    │   │       │   │       ├── 0828846.bin
    │   │       │   │       ├── 0828847.bin
    │   │       │   │       ├── 0828848.bin
    │   │       │   │       ├── 0828849.bin
    │   │       │   │       ├── 0828850.bin
    │   │       │   │       ├── 0828851.bin
    │   │       │   │       ├── 0828852.bin
    │   │       │   │       ├── 0828853.bin
    │   │       │   │       ├── 0828854.bin
    │   │       │   │       ├── 0828855.bin
    │   │       │   │       ├── 0828856.bin
    │   │       │   │       ├── 0828857.bin
    │   │       │   │       ├── 0828858.bin
    │   │       │   │       ├── 0828859.bin
    │   │       │   │       ├── 0828860.bin
    │   │       │   │       ├── 0828861.bin
    │   │       │   │       ├── 0828862.bin
    │   │       │   │       ├── 0828863.bin
    │   │       │   │       ├── 0828864.bin
    │   │       │   │       ├── 0828865.bin
    │   │       │   │       ├── 0828866.bin
    │   │       │   │       ├── 0828867.bin
    │   │       │   │       ├── 0828868.bin
    │   │       │   │       ├── 0828869.bin
    │   │       │   │       ├── 0828870.bin
    │   │       │   │       ├── 0828871.bin
    │   │       │   │       ├── 0828872.bin
    │   │       │   │       ├── 0828873.bin
    │   │       │   │       ├── 0828874.bin
    │   │       │   │       ├── 0828875.bin
    │   │       │   │       ├── 0828876.bin
    │   │       │   │       ├── 0828877.bin
    │   │       │   │       ├── 0828878.bin
    │   │       │   │       ├── 0828879.bin
    │   │       │   │       ├── 0828880.bin
    │   │       │   │       ├── 0828881.bin
    │   │       │   │       ├── 0828882.bin
    │   │       │   │       ├── 0828883.bin
    │   │       │   │       ├── 0828884.bin
    │   │       │   │       ├── 0828885.bin
    │   │       │   │       ├── 0828886.bin
    │   │       │   │       ├── 0828887.bin
    │   │       │   │       ├── 0828888.bin
    │   │       │   │       ├── 0828889.bin
    │   │       │   │       ├── 0828890.bin
    │   │       │   │       ├── 0828891.bin
    │   │       │   │       ├── 0828892.bin
    │   │       │   │       ├── 0828893.bin
    │   │       │   │       ├── 0828894.bin
    │   │       │   │       ├── 0828895.bin
    │   │       │   │       ├── 0828896.bin
    │   │       │   │       ├── 0828897.bin
    │   │       │   │       ├── 0828898.bin
    │   │       │   │       ├── 0828899.bin
    │   │       │   │       ├── 0828900.bin
    │   │       │   │       ├── 0828901.bin
    │   │       │   │       ├── 0828902.bin
    │   │       │   │       ├── 0828903.bin
    │   │       │   │       ├── 0828904.bin
    │   │       │   │       ├── 0828905.bin
    │   │       │   │       ├── 0828906.bin
    │   │       │   │       ├── 0828907.bin
    │   │       │   │       ├── 0828908.bin
    │   │       │   │       ├── 0828909.bin
    │   │       │   │       ├── 0828910.bin
    │   │       │   │       ├── 0828911.bin
    │   │       │   │       ├── 0828912.bin
    │   │       │   │       ├── 0828913.bin
    │   │       │   │       ├── 0828914.bin
    │   │       │   │       ├── 0828915.bin
    │   │       │   │       ├── 0828916.bin
    │   │       │   │       ├── 0828917.bin
    │   │       │   │       ├── 0828918.bin
    │   │       │   │       ├── 0828919.bin
    │   │       │   │       ├── 0828920.bin
    │   │       │   │       ├── 0828921.bin
    │   │       │   │       ├── 0828922.bin
    │   │       │   │       ├── 0828923.bin
    │   │       │   │       ├── 0828924.bin
    │   │       │   │       ├── 0828925.bin
    │   │       │   │       ├── 0828926.bin
    │   │       │   │       ├── 0828927.bin
    │   │       │   │       ├── 0828928.bin
    │   │       │   │       ├── 0828929.bin
    │   │       │   │       ├── 0828930.bin
    │   │       │   │       ├── 0828931.bin
    │   │       │   │       ├── 0828932.bin
    │   │       │   │       ├── 0828933.bin
    │   │       │   │       ├── 0828934.bin
    │   │       │   │       ├── 0828935.bin
    │   │       │   │       ├── 0828936.bin
    │   │       │   │       ├── 0828937.bin
    │   │       │   │       ├── 0828938.bin
    │   │       │   │       ├── 0828939.bin
    │   │       │   │       ├── 0828940.bin
    │   │       │   │       ├── 0828941.bin
    │   │       │   │       ├── 0828942.bin
    │   │       │   │       ├── 0828943.bin
    │   │       │   │       ├── 0828944.bin
    │   │       │   │       ├── 0828945.bin
    │   │       │   │       ├── 0828946.bin
    │   │       │   │       ├── 0828947.bin
    │   │       │   │       ├── 0828948.bin
    │   │       │   │       ├── 0828949.bin
    │   │       │   │       ├── 0828950.bin
    │   │       │   │       ├── 0828951.bin
    │   │       │   │       ├── 0828952.bin
    │   │       │   │       ├── 0828953.bin
    │   │       │   │       ├── 0828954.bin
    │   │       │   │       ├── 0828955.bin
    │   │       │   │       ├── 0828956.bin
    │   │       │   │       ├── 0828957.bin
    │   │       │   │       ├── 0828958.bin
    │   │       │   │       ├── 0828959.bin
    │   │       │   │       ├── 0828960.bin
    │   │       │   │       ├── 0828961.bin
    │   │       │   │       ├── 0828962.bin
    │   │       │   │       ├── 0828963.bin
    │   │       │   │       ├── 0828964.bin
    │   │       │   │       ├── 0828965.bin
    │   │       │   │       ├── 0828966.bin
    │   │       │   │       ├── 0828967.bin
    │   │       │   │       ├── 0828968.bin
    │   │       │   │       ├── 0828969.bin
    │   │       │   │       ├── 0828970.bin
    │   │       │   │       ├── 0828971.bin
    │   │       │   │       ├── 0828972.bin
    │   │       │   │       ├── 0828973.bin
    │   │       │   │       ├── 0828974.bin
    │   │       │   │       ├── 0828975.bin
    │   │       │   │       ├── 0828976.bin
    │   │       │   │       ├── 0828977.bin
    │   │       │   │       ├── 0828978.bin
    │   │       │   │       ├── 0828979.bin
    │   │       │   │       ├── 0828980.bin
    │   │       │   │       ├── 0828981.bin
    │   │       │   │       ├── 0828982.bin
    │   │       │   │       ├── 0828983.bin
    │   │       │   │       ├── 0828984.bin
    │   │       │   │       ├── 0828985.bin
    │   │       │   │       ├── 0828986.bin
    │   │       │   │       ├── 0828987.bin
    │   │       │   │       ├── 0828988.bin
    │   │       │   │       ├── 0828989.bin
    │   │       │   │       ├── 0828990.bin
    │   │       │   │       ├── 0828991.bin
    │   │       │   │       ├── 0828992.bin
    │   │       │   │       ├── 0828993.bin
    │   │       │   │       ├── 0828994.bin
    │   │       │   │       ├── 0828995.bin
    │   │       │   │       ├── 0828996.bin
    │   │       │   │       ├── 0828997.bin
    │   │       │   │       ├── 0828998.bin
    │   │       │   │       ├── 0828999.bin
    │   │       │   │       ├── 0829000.bin
    │   │       │   │       ├── 0829001.bin
    │   │       │   │       ├── 0829002.bin
    │   │       │   │       ├── 0829003.bin
    │   │       │   │       ├── 0829004.bin
    │   │       │   │       ├── 0829005.bin
    │   │       │   │       ├── 0829006.bin
    │   │       │   │       ├── 0829007.bin
    │   │       │   │       ├── 0829008.bin
    │   │       │   │       ├── 0829009.bin
    │   │       │   │       ├── 0829010.bin
    │   │       │   │       ├── 0829011.bin
    │   │       │   │       ├── 0829012.bin
    │   │       │   │       ├── 0829013.bin
    │   │       │   │       ├── 0829014.bin
    │   │       │   │       ├── 0829015.bin
    │   │       │   │       ├── 0829016.bin
    │   │       │   │       ├── 0829017.bin
    │   │       │   │       ├── 0829018.bin
    │   │       │   │       ├── 0829019.bin
    │   │       │   │       ├── 0829020.bin
    │   │       │   │       ├── 0829021.bin
    │   │       │   │       ├── 0829022.bin
    │   │       │   │       ├── 0829023.bin
    │   │       │   │       ├── 0829024.bin
    │   │       │   │       ├── 0829025.bin
    │   │       │   │       ├── 0829026.bin
    │   │       │   │       ├── 0829027.bin
    │   │       │   │       ├── 0829028.bin
    │   │       │   │       ├── 0829029.bin
    │   │       │   │       ├── 0829030.bin
    │   │       │   │       ├── 0829031.bin
    │   │       │   │       ├── 0829032.bin
    │   │       │   │       ├── 0829033.bin
    │   │       │   │       ├── 0829034.bin
    │   │       │   │       ├── 0829035.bin
    │   │       │   │       ├── 0829036.bin
    │   │       │   │       ├── 0829037.bin
    │   │       │   │       ├── 0829038.bin
    │   │       │   │       ├── 0829039.bin
    │   │       │   │       ├── 0829040.bin
    │   │       │   │       ├── 0829041.bin
    │   │       │   │       ├── 0829042.bin
    │   │       │   │       ├── 0829043.bin
    │   │       │   │       ├── 0829044.bin
    │   │       │   │       ├── 0829045.bin
    │   │       │   │       ├── 0829046.bin
    │   │       │   │       ├── 0829047.bin
    │   │       │   │       ├── 0829048.bin
    │   │       │   │       ├── 0829049.bin
    │   │       │   │       ├── 0829050.bin
    │   │       │   │       ├── 0829051.bin
    │   │       │   │       ├── 0829052.bin
    │   │       │   │       ├── 0829053.bin
    │   │       │   │       ├── 0829054.bin
    │   │       │   │       ├── 0829055.bin
    │   │       │   │       ├── 0829056.bin
    │   │       │   │       ├── 0829057.bin
    │   │       │   │       ├── 0829058.bin
    │   │       │   │       ├── 0829059.bin
    │   │       │   │       ├── 0829060.bin
    │   │       │   │       ├── 0829061.bin
    │   │       │   │       ├── 0829062.bin
    │   │       │   │       ├── 0829063.bin
    │   │       │   │       ├── 0829064.bin
    │   │       │   │       ├── 0829065.bin
    │   │       │   │       ├── 0829066.bin
    │   │       │   │       ├── 0829067.bin
    │   │       │   │       ├── 0829068.bin
    │   │       │   │       ├── 0829069.bin
    │   │       │   │       ├── 0829070.bin
    │   │       │   │       ├── 0829071.bin
    │   │       │   │       ├── 0829072.bin
    │   │       │   │       ├── 0829073.bin
    │   │       │   │       ├── 0829074.bin
    │   │       │   │       ├── 0829075.bin
    │   │       │   │       ├── 0829076.bin
    │   │       │   │       ├── 0829077.bin
    │   │       │   │       ├── 0829078.bin
    │   │       │   │       ├── 0829079.bin
    │   │       │   │       ├── 0829080.bin
    │   │       │   │       ├── 0829081.bin
    │   │       │   │       ├── 0829082.bin
    │   │       │   │       ├── 0829083.bin
    │   │       │   │       ├── 0829084.bin
    │   │       │   │       ├── 0829085.bin
    │   │       │   │       ├── 0829086.bin
    │   │       │   │       ├── 0829087.bin
    │   │       │   │       ├── 0829088.bin
    │   │       │   │       ├── 0829089.bin
    │   │       │   │       ├── 0829090.bin
    │   │       │   │       ├── 0829091.bin
    │   │       │   │       ├── 0829092.bin
    │   │       │   │       ├── 0829093.bin
    │   │       │   │       ├── 0829094.bin
    │   │       │   │       ├── 0829095.bin
    │   │       │   │       ├── 0829096.bin
    │   │       │   │       ├── 0829097.bin
    │   │       │   │       ├── 0829098.bin
    │   │       │   │       ├── 0829099.bin
    │   │       │   │       ├── 0829100.bin
    │   │       │   │       ├── 0829101.bin
    │   │       │   │       ├── 0829102.bin
    │   │       │   │       ├── 0829103.bin
    │   │       │   │       ├── 0829104.bin
    │   │       │   │       ├── 0829105.bin
    │   │       │   │       ├── 0829106.bin
    │   │       │   │       ├── 0829107.bin
    │   │       │   │       ├── 0829108.bin
    │   │       │   │       ├── 0829109.bin
    │   │       │   │       ├── 0829110.bin
    │   │       │   │       ├── 0829111.bin
    │   │       │   │       ├── 0829112.bin
    │   │       │   │       ├── 0829113.bin
    │   │       │   │       ├── 0829114.bin
    │   │       │   │       ├── 0829115.bin
    │   │       │   │       ├── 0829116.bin
    │   │       │   │       ├── 0829117.bin
    │   │       │   │       ├── 0829118.bin
    │   │       │   │       ├── 0829119.bin
    │   │       │   │       ├── 0829120.bin
    │   │       │   │       ├── 0829121.bin
    │   │       │   │       ├── 0829122.bin
    │   │       │   │       ├── 0829123.bin
    │   │       │   │       ├── 0829124.bin
    │   │       │   │       ├── 0829125.bin
    │   │       │   │       ├── 0829126.bin
    │   │       │   │       ├── 0829127.bin
    │   │       │   │       ├── 0829128.bin
    │   │       │   │       ├── 0829129.bin
    │   │       │   │       ├── 0829130.bin
    │   │       │   │       ├── 0829131.bin
    │   │       │   │       ├── 0829132.bin
    │   │       │   │       ├── 0829133.bin
    │   │       │   │       ├── 0829134.bin
    │   │       │   │       ├── 0829135.bin
    │   │       │   │       ├── 0829136.bin
    │   │       │   │       ├── 0829137.bin
    │   │       │   │       ├── 0829138.bin
    │   │       │   │       ├── 0829139.bin
    │   │       │   │       ├── 0829140.bin
    │   │       │   │       ├── 0829141.bin
    │   │       │   │       ├── 0829142.bin
    │   │       │   │       ├── 0829143.bin
    │   │       │   │       ├── 0829144.bin
    │   │       │   │       ├── 0829145.bin
    │   │       │   │       ├── 0829146.bin
    │   │       │   │       ├── 0829147.bin
    │   │       │   │       ├── 0829148.bin
    │   │       │   │       ├── 0829149.bin
    │   │       │   │       ├── 0829150.bin
    │   │       │   │       ├── 0829151.bin
    │   │       │   │       ├── 0829152.bin
    │   │       │   │       ├── 0829153.bin
    │   │       │   │       ├── 0829154.bin
    │   │       │   │       ├── 0829155.bin
    │   │       │   │       ├── 0829156.bin
    │   │       │   │       ├── 0829157.bin
    │   │       │   │       ├── 0829158.bin
    │   │       │   │       ├── 0829159.bin
    │   │       │   │       ├── 0829160.bin
    │   │       │   │       ├── 0829161.bin
    │   │       │   │       ├── 0829162.bin
    │   │       │   │       ├── 0829163.bin
    │   │       │   │       ├── 0829164.bin
    │   │       │   │       ├── 0829165.bin
    │   │       │   │       ├── 0829166.bin
    │   │       │   │       ├── 0829167.bin
    │   │       │   │       ├── 0829168.bin
    │   │       │   │       ├── 0829169.bin
    │   │       │   │       ├── 0829170.bin
    │   │       │   │       ├── 0829171.bin
    │   │       │   │       ├── 0829172.bin
    │   │       │   │       ├── 0829173.bin
    │   │       │   │       ├── 0829174.bin
    │   │       │   │       ├── 0829175.bin
    │   │       │   │       ├── 0829176.bin
    │   │       │   │       ├── 0829177.bin
    │   │       │   │       ├── 0829178.bin
    │   │       │   │       ├── 0829179.bin
    │   │       │   │       ├── 0829180.bin
    │   │       │   │       ├── 0829181.bin
    │   │       │   │       ├── 0829182.bin
    │   │       │   │       ├── 0829183.bin
    │   │       │   │       ├── 0829184.bin
    │   │       │   │       ├── 0829185.bin
    │   │       │   │       ├── 0829186.bin
    │   │       │   │       ├── 0829187.bin
    │   │       │   │       ├── 0829188.bin
    │   │       │   │       ├── 0829189.bin
    │   │       │   │       ├── 0829190.bin
    │   │       │   │       ├── 0829191.bin
    │   │       │   │       ├── 0829192.bin
    │   │       │   │       ├── 0829193.bin
    │   │       │   │       ├── 0829194.bin
    │   │       │   │       ├── 0829195.bin
    │   │       │   │       ├── 0829196.bin
    │   │       │   │       ├── 0829197.bin
    │   │       │   │       ├── 0829198.bin
    │   │       │   │       ├── 0829199.bin
    │   │       │   │       ├── 0829200.bin
    │   │       │   │       ├── 0829201.bin
    │   │       │   │       ├── 0829202.bin
    │   │       │   │       ├── 0829203.bin
    │   │       │   │       ├── 0829204.bin
    │   │       │   │       ├── 0829205.bin
    │   │       │   │       ├── 0829206.bin
    │   │       │   │       ├── 0829207.bin
    │   │       │   │       ├── 0829208.bin
    │   │       │   │       ├── 0829209.bin
    │   │       │   │       ├── 0829210.bin
    │   │       │   │       ├── 0829211.bin
    │   │       │   │       ├── 0829212.bin
    │   │       │   │       ├── 0829213.bin
    │   │       │   │       ├── 0829214.bin
    │   │       │   │       ├── 0829215.bin
    │   │       │   │       ├── 0829216.bin
    │   │       │   │       ├── 0829217.bin
    │   │       │   │       ├── 0829218.bin
    │   │       │   │       ├── 0829219.bin
    │   │       │   │       ├── 0829220.bin
    │   │       │   │       ├── 0829221.bin
    │   │       │   │       ├── 0829222.bin
    │   │       │   │       ├── 0829223.bin
    │   │       │   │       ├── 0829224.bin
    │   │       │   │       ├── 0829225.bin
    │   │       │   │       ├── 0829226.bin
    │   │       │   │       ├── 0829227.bin
    │   │       │   │       ├── 0829228.bin
    │   │       │   │       ├── 0829229.bin
    │   │       │   │       ├── 0829230.bin
    │   │       │   │       ├── 0829231.bin
    │   │       │   │       ├── 0829232.bin
    │   │       │   │       ├── 0829233.bin
    │   │       │   │       ├── 0829234.bin
    │   │       │   │       ├── 0829235.bin
    │   │       │   │       ├── 0829236.bin
    │   │       │   │       ├── 0829237.bin
    │   │       │   │       ├── 0829238.bin
    │   │       │   │       ├── 0829239.bin
    │   │       │   │       ├── 0829240.bin
    │   │       │   │       ├── 0829241.bin
    │   │       │   │       ├── 0829242.bin
    │   │       │   │       ├── 0829243.bin
    │   │       │   │       ├── 0829244.bin
    │   │       │   │       ├── 0829245.bin
    │   │       │   │       ├── 0829246.bin
    │   │       │   │       ├── 0829247.bin
    │   │       │   │       ├── 0829248.bin
    │   │       │   │       ├── 0829249.bin
    │   │       │   │       ├── 0829250.bin
    │   │       │   │       ├── 0829251.bin
    │   │       │   │       ├── 0829252.bin
    │   │       │   │       ├── 0829253.bin
    │   │       │   │       ├── 0829254.bin
    │   │       │   │       ├── 0829255.bin
    │   │       │   │       ├── 0829256.bin
    │   │       │   │       ├── 0829257.bin
    │   │       │   │       ├── 0829258.bin
    │   │       │   │       ├── 0829259.bin
    │   │       │   │       ├── 0829260.bin
    │   │       │   │       ├── 0829261.bin
    │   │       │   │       ├── 0829262.bin
    │   │       │   │       ├── 0829263.bin
    │   │       │   │       ├── 0829264.bin
    │   │       │   │       ├── 0829265.bin
    │   │       │   │       ├── 0829266.bin
    │   │       │   │       ├── 0829267.bin
    │   │       │   │       ├── 0829268.bin
    │   │       │   │       ├── 0829269.bin
    │   │       │   │       ├── 0829270.bin
    │   │       │   │       ├── 0829271.bin
    │   │       │   │       ├── 0829272.bin
    │   │       │   │       ├── 0829273.bin
    │   │       │   │       ├── 0829274.bin
    │   │       │   │       ├── 0829275.bin
    │   │       │   │       ├── 0829276.bin
    │   │       │   │       ├── 0829277.bin
    │   │       │   │       ├── 0829278.bin
    │   │       │   │       ├── 0829279.bin
    │   │       │   │       ├── 0829280.bin
    │   │       │   │       ├── 0829281.bin
    │   │       │   │       ├── 0829282.bin
    │   │       │   │       ├── 0829283.bin
    │   │       │   │       ├── 0829284.bin
    │   │       │   │       ├── 0829285.bin
    │   │       │   │       ├── 0829286.bin
    │   │       │   │       ├── 0829287.bin
    │   │       │   │       ├── 0829288.bin
    │   │       │   │       ├── 0829289.bin
    │   │       │   │       ├── 0829290.bin
    │   │       │   │       ├── 0829291.bin
    │   │       │   │       ├── 0829292.bin
    │   │       │   │       ├── 0829293.bin
    │   │       │   │       ├── 0829294.bin
    │   │       │   │       ├── 0829295.bin
    │   │       │   │       ├── 0829296.bin
    │   │       │   │       ├── 0829297.bin
    │   │       │   │       ├── 0829298.bin
    │   │       │   │       ├── 0829299.bin
    │   │       │   │       ├── 0829300.bin
    │   │       │   │       ├── 0829301.bin
    │   │       │   │       ├── 0829302.bin
    │   │       │   │       ├── 0829303.bin
    │   │       │   │       ├── 0829304.bin
    │   │       │   │       ├── 0829305.bin
    │   │       │   │       ├── 0829306.bin
    │   │       │   │       ├── 0829307.bin
    │   │       │   │       ├── 0829308.bin
    │   │       │   │       ├── 0829309.bin
    │   │       │   │       ├── 0829310.bin
    │   │       │   │       ├── 0829311.bin
    │   │       │   │       ├── 0829312.bin
    │   │       │   │       ├── 0829313.bin
    │   │       │   │       ├── 0829314.bin
    │   │       │   │       ├── 0829315.bin
    │   │       │   │       ├── 0829316.bin
    │   │       │   │       ├── 0829317.bin
    │   │       │   │       ├── 0829318.bin
    │   │       │   │       ├── 0829319.bin
    │   │       │   │       ├── 0829320.bin
    │   │       │   │       ├── 0829321.bin
    │   │       │   │       ├── 0829322.bin
    │   │       │   │       ├── 0829323.bin
    │   │       │   │       ├── 0829324.bin
    │   │       │   │       ├── 0829325.bin
    │   │       │   │       ├── 0829326.bin
    │   │       │   │       ├── 0829327.bin
    │   │       │   │       ├── 0829328.bin
    │   │       │   │       ├── 0829329.bin
    │   │       │   │       ├── 0829330.bin
    │   │       │   │       ├── 0829331.bin
    │   │       │   │       ├── 0829332.bin
    │   │       │   │       ├── 0829333.bin
    │   │       │   │       ├── 0829334.bin
    │   │       │   │       ├── 0829335.bin
    │   │       │   │       ├── 0829336.bin
    │   │       │   │       ├── 0829337.bin
    │   │       │   │       ├── 0829338.bin
    │   │       │   │       ├── 0829339.bin
    │   │       │   │       ├── 0829340.bin
    │   │       │   │       ├── 0829341.bin
    │   │       │   │       ├── 0829342.bin
    │   │       │   │       ├── 0829343.bin
    │   │       │   │       ├── 0829344.bin
    │   │       │   │       ├── 0829345.bin
    │   │       │   │       ├── 0829346.bin
    │   │       │   │       ├── 0829347.bin
    │   │       │   │       ├── 0829348.bin
    │   │       │   │       ├── 0829349.bin
    │   │       │   │       ├── 0829350.bin
    │   │       │   │       ├── 0829351.bin
    │   │       │   │       ├── 0829352.bin
    │   │       │   │       ├── 0829353.bin
    │   │       │   │       ├── 0829354.bin
    │   │       │   │       ├── 0829355.bin
    │   │       │   │       ├── 0829356.bin
    │   │       │   │       ├── 0829357.bin
    │   │       │   │       ├── 0829358.bin
    │   │       │   │       ├── 0829359.bin
    │   │       │   │       ├── 0829360.bin
    │   │       │   │       ├── 0829361.bin
    │   │       │   │       ├── 0829362.bin
    │   │       │   │       ├── 0829363.bin
    │   │       │   │       ├── 0829364.bin
    │   │       │   │       ├── 0829365.bin
    │   │       │   │       ├── 0829366.bin
    │   │       │   │       ├── 0829367.bin
    │   │       │   │       ├── 0829368.bin
    │   │       │   │       ├── 0829369.bin
    │   │       │   │       ├── 0829370.bin
    │   │       │   │       ├── 0829371.bin
    │   │       │   │       ├── 0829372.bin
    │   │       │   │       ├── 0829373.bin
    │   │       │   │       ├── 0829374.bin
    │   │       │   │       ├── 0829375.bin
    │   │       │   │       ├── 0829376.bin
    │   │       │   │       ├── 0829377.bin
    │   │       │   │       ├── 0829378.bin
    │   │       │   │       ├── 0829379.bin
    │   │       │   │       ├── 0829380.bin
    │   │       │   │       ├── 0829381.bin
    │   │       │   │       ├── 0829382.bin
    │   │       │   │       ├── 0829383.bin
    │   │       │   │       ├── 0829384.bin
    │   │       │   │       ├── 0829385.bin
    │   │       │   │       ├── 0829386.bin
    │   │       │   │       ├── 0829387.bin
    │   │       │   │       ├── 0829388.bin
    │   │       │   │       ├── 0829389.bin
    │   │       │   │       ├── 0829390.bin
    │   │       │   │       ├── 0829391.bin
    │   │       │   │       ├── 0829392.bin
    │   │       │   │       ├── 0829393.bin
    │   │       │   │       ├── 0829394.bin
    │   │       │   │       ├── 0829395.bin
    │   │       │   │       ├── 0829396.bin
    │   │       │   │       ├── 0829397.bin
    │   │       │   │       ├── 0829398.bin
    │   │       │   │       ├── 0829399.bin
    │   │       │   │       ├── 0829400.bin
    │   │       │   │       ├── 0829401.bin
    │   │       │   │       ├── 0829402.bin
    │   │       │   │       ├── 0829403.bin
    │   │       │   │       ├── 0829404.bin
    │   │       │   │       ├── 0829405.bin
    │   │       │   │       ├── 0829406.bin
    │   │       │   │       ├── 0829407.bin
    │   │       │   │       ├── 0829408.bin
    │   │       │   │       ├── 0829409.bin
    │   │       │   │       ├── 0829410.bin
    │   │       │   │       ├── 0829411.bin
    │   │       │   │       ├── 0829412.bin
    │   │       │   │       ├── 0829413.bin
    │   │       │   │       ├── 0829414.bin
    │   │       │   │       ├── 0829415.bin
    │   │       │   │       ├── 0829416.bin
    │   │       │   │       ├── 0829417.bin
    │   │       │   │       ├── 0829418.bin
    │   │       │   │       ├── 0829419.bin
    │   │       │   │       ├── 0829420.bin
    │   │       │   │       ├── 0829421.bin
    │   │       │   │       ├── 0829422.bin
    │   │       │   │       ├── 0829423.bin
    │   │       │   │       ├── 0829424.bin
    │   │       │   │       ├── 0829425.bin
    │   │       │   │       ├── 0829426.bin
    │   │       │   │       ├── 0829427.bin
    │   │       │   │       ├── 0829428.bin
    │   │       │   │       ├── 0829429.bin
    │   │       │   │       ├── 0829430.bin
    │   │       │   │       ├── 0829431.bin
    │   │       │   │       ├── 0829432.bin
    │   │       │   │       ├── 0829433.bin
    │   │       │   │       ├── 0829434.bin
    │   │       │   │       ├── 0829435.bin
    │   │       │   │       ├── 0829436.bin
    │   │       │   │       ├── 0829437.bin
    │   │       │   │       ├── 0829438.bin
    │   │       │   │       ├── 0829439.bin
    │   │       │   │       ├── 0829440.bin
    │   │       │   │       ├── 0829441.bin
    │   │       │   │       ├── 0829442.bin
    │   │       │   │       ├── 0829443.bin
    │   │       │   │       ├── 0829444.bin
    │   │       │   │       ├── 0829445.bin
    │   │       │   │       ├── 0829446.bin
    │   │       │   │       ├── 0829447.bin
    │   │       │   │       ├── 0829448.bin
    │   │       │   │       ├── 0829449.bin
    │   │       │   │       ├── 0829450.bin
    │   │       │   │       ├── 0829451.bin
    │   │       │   │       ├── 0829452.bin
    │   │       │   │       ├── 0829453.bin
    │   │       │   │       ├── 0829454.bin
    │   │       │   │       ├── 0829455.bin
    │   │       │   │       ├── 0829456.bin
    │   │       │   │       ├── 0829457.bin
    │   │       │   │       ├── 0829458.bin
    │   │       │   │       ├── 0829459.bin
    │   │       │   │       ├── 0829460.bin
    │   │       │   │       ├── 0829461.bin
    │   │       │   │       ├── 0829462.bin
    │   │       │   │       ├── 0829463.bin
    │   │       │   │       ├── 0829464.bin
    │   │       │   │       ├── 0829465.bin
    │   │       │   │       ├── 0829466.bin
    │   │       │   │       ├── 0829467.bin
    │   │       │   │       ├── 0829468.bin
    │   │       │   │       ├── 0829469.bin
    │   │       │   │       ├── 0829470.bin
    │   │       │   │       ├── 0829471.bin
    │   │       │   │       ├── 0829472.bin
    │   │       │   │       ├── 0829473.bin
    │   │       │   │       ├── 0829474.bin
    │   │       │   │       ├── 0829475.bin
    │   │       │   │       ├── 0829476.bin
    │   │       │   │       ├── 0829477.bin
    │   │       │   │       ├── 0829478.bin
    │   │       │   │       ├── 0829479.bin
    │   │       │   │       ├── 0829480.bin
    │   │       │   │       ├── 0829481.bin
    │   │       │   │       ├── 0829482.bin
    │   │       │   │       ├── 0829483.bin
    │   │       │   │       ├── 0829484.bin
    │   │       │   │       ├── 0829485.bin
    │   │       │   │       ├── 0829486.bin
    │   │       │   │       ├── 0829487.bin
    │   │       │   │       ├── 0829488.bin
    │   │       │   │       ├── 0829489.bin
    │   │       │   │       ├── 0829490.bin
    │   │       │   │       ├── 0829491.bin
    │   │       │   │       ├── 0829492.bin
    │   │       │   │       ├── 0829493.bin
    │   │       │   │       ├── 0829494.bin
    │   │       │   │       ├── 0829495.bin
    │   │       │   │       ├── 0829496.bin
    │   │       │   │       ├── 0829497.bin
    │   │       │   │       ├── 0829498.bin
    │   │       │   │       ├── 0829499.bin
    │   │       │   │       ├── 0829500.bin
    │   │       │   │       ├── 0829501.bin
    │   │       │   │       ├── 0829502.bin
    │   │       │   │       ├── 0829503.bin
    │   │       │   │       ├── 0829504.bin
    │   │       │   │       ├── 0829505.bin
    │   │       │   │       ├── 0829506.bin
    │   │       │   │       ├── 0829507.bin
    │   │       │   │       ├── 0829508.bin
    │   │       │   │       ├── 0829509.bin
    │   │       │   │       ├── 0829510.bin
    │   │       │   │       ├── 0829511.bin
    │   │       │   │       ├── 0829512.bin
    │   │       │   │       ├── 0829513.bin
    │   │       │   │       ├── 0829514.bin
    │   │       │   │       ├── 0829515.bin
    │   │       │   │       ├── 0829516.bin
    │   │       │   │       ├── 0829517.bin
    │   │       │   │       ├── 0829518.bin
    │   │       │   │       ├── 0829519.bin
    │   │       │   │       ├── 0829520.bin
    │   │       │   │       ├── 0829521.bin
    │   │       │   │       ├── 0829522.bin
    │   │       │   │       ├── 0829523.bin
    │   │       │   │       ├── 0829524.bin
    │   │       │   │       ├── 0829525.bin
    │   │       │   │       ├── 0829526.bin
    │   │       │   │       ├── 0829527.bin
    │   │       │   │       ├── 0829528.bin
    │   │       │   │       ├── 0829529.bin
    │   │       │   │       ├── 0829530.bin
    │   │       │   │       ├── 0829531.bin
    │   │       │   │       ├── 0829532.bin
    │   │       │   │       ├── 0829533.bin
    │   │       │   │       ├── 0829534.bin
    │   │       │   │       ├── 0829535.bin
    │   │       │   │       ├── 0829536.bin
    │   │       │   │       ├── 0829537.bin
    │   │       │   │       ├── 0829538.bin
    │   │       │   │       ├── 0829539.bin
    │   │       │   │       ├── 0829540.bin
    │   │       │   │       ├── 0829541.bin
    │   │       │   │       ├── 0829542.bin
    │   │       │   │       ├── 0829543.bin
    │   │       │   │       ├── 0829544.bin
    │   │       │   │       ├── 0829545.bin
    │   │       │   │       ├── 0829546.bin
    │   │       │   │       ├── 0829547.bin
    │   │       │   │       ├── 0829548.bin
    │   │       │   │       ├── 0829549.bin
    │   │       │   │       ├── 0829550.bin
    │   │       │   │       ├── 0829551.bin
    │   │       │   │       ├── 0829552.bin
    │   │       │   │       ├── 0829553.bin
    │   │       │   │       ├── 0829554.bin
    │   │       │   │       ├── 0829555.bin
    │   │       │   │       ├── 0829556.bin
    │   │       │   │       ├── 0829557.bin
    │   │       │   │       ├── 0829558.bin
    │   │       │   │       ├── 0829559.bin
    │   │       │   │       ├── 0829560.bin
    │   │       │   │       ├── 0829561.bin
    │   │       │   │       ├── 0829562.bin
    │   │       │   │       ├── 0829563.bin
    │   │       │   │       ├── 0829564.bin
    │   │       │   │       ├── 0829565.bin
    │   │       │   │       ├── 0829566.bin
    │   │       │   │       ├── 0829567.bin
    │   │       │   │       ├── 0829568.bin
    │   │       │   │       ├── 0829569.bin
    │   │       │   │       ├── 0829570.bin
    │   │       │   │       ├── 0829571.bin
    │   │       │   │       ├── 0829572.bin
    │   │       │   │       ├── 0829573.bin
    │   │       │   │       ├── 0829574.bin
    │   │       │   │       ├── 0829575.bin
    │   │       │   │       ├── 0829576.bin
    │   │       │   │       ├── 0829577.bin
    │   │       │   │       ├── 0829578.bin
    │   │       │   │       ├── 0829579.bin
    │   │       │   │       ├── 0829580.bin
    │   │       │   │       ├── 0829581.bin
    │   │       │   │       ├── 0829582.bin
    │   │       │   │       ├── 0829583.bin
    │   │       │   │       ├── 0829584.bin
    │   │       │   │       ├── 0829585.bin
    │   │       │   │       ├── 0829586.bin
    │   │       │   │       ├── 0829587.bin
    │   │       │   │       ├── 0829588.bin
    │   │       │   │       ├── 0829589.bin
    │   │       │   │       ├── 0829590.bin
    │   │       │   │       ├── 0829591.bin
    │   │       │   │       ├── 0829592.bin
    │   │       │   │       ├── 0829593.bin
    │   │       │   │       ├── 0829594.bin
    │   │       │   │       ├── 0829595.bin
    │   │       │   │       ├── 0829596.bin
    │   │       │   │       ├── 0829597.bin
    │   │       │   │       ├── 0829598.bin
    │   │       │   │       ├── 0829599.bin
    │   │       │   │       ├── 0829600.bin
    │   │       │   │       ├── 0829601.bin
    │   │       │   │       ├── 0829602.bin
    │   │       │   │       ├── 0829603.bin
    │   │       │   │       ├── 0829604.bin
    │   │       │   │       ├── 0829605.bin
    │   │       │   │       ├── 0829606.bin
    │   │       │   │       ├── 0829607.bin
    │   │       │   │       ├── 0829608.bin
    │   │       │   │       ├── 0829609.bin
    │   │       │   │       ├── 0829610.bin
    │   │       │   │       ├── 0829611.bin
    │   │       │   │       ├── 0829612.bin
    │   │       │   │       ├── 0829613.bin
    │   │       │   │       ├── 0829614.bin
    │   │       │   │       ├── 0829615.bin
    │   │       │   │       ├── 0829616.bin
    │   │       │   │       ├── 0829617.bin
    │   │       │   │       ├── 0829618.bin
    │   │       │   │       ├── 0829619.bin
    │   │       │   │       ├── 0829620.bin
    │   │       │   │       ├── 0829621.bin
    │   │       │   │       ├── 0829622.bin
    │   │       │   │       ├── 0829623.bin
    │   │       │   │       ├── 0829624.bin
    │   │       │   │       ├── 0829625.bin
    │   │       │   │       ├── 0829626.bin
    │   │       │   │       ├── 0829627.bin
    │   │       │   │       ├── 0829628.bin
    │   │       │   │       ├── 0829629.bin
    │   │       │   │       ├── 0829630.bin
    │   │       │   │       ├── 0829631.bin
    │   │       │   │       ├── 0829632.bin
    │   │       │   │       ├── 0829633.bin
    │   │       │   │       ├── 0829634.bin
    │   │       │   │       ├── 0829635.bin
    │   │       │   │       ├── 0829636.bin
    │   │       │   │       ├── 0829637.bin
    │   │       │   │       ├── 0829638.bin
    │   │       │   │       ├── 0829639.bin
    │   │       │   │       ├── 0829640.bin
    │   │       │   │       ├── 0829641.bin
    │   │       │   │       ├── 0829642.bin
    │   │       │   │       ├── 0829643.bin
    │   │       │   │       ├── 0829644.bin
    │   │       │   │       ├── 0829645.bin
    │   │       │   │       ├── 0829646.bin
    │   │       │   │       ├── 0829647.bin
    │   │       │   │       ├── 0829648.bin
    │   │       │   │       ├── 0829649.bin
    │   │       │   │       ├── 0829650.bin
    │   │       │   │       ├── 0829651.bin
    │   │       │   │       ├── 0829652.bin
    │   │       │   │       ├── 0829653.bin
    │   │       │   │       ├── 0829654.bin
    │   │       │   │       ├── 0829655.bin
    │   │       │   │       ├── 0829656.bin
    │   │       │   │       ├── 0829657.bin
    │   │       │   │       ├── 0829658.bin
    │   │       │   │       ├── 0829659.bin
    │   │       │   │       ├── 0829660.bin
    │   │       │   │       ├── 0829661.bin
    │   │       │   │       ├── 0829662.bin
    │   │       │   │       ├── 0829663.bin
    │   │       │   │       ├── 0829664.bin
    │   │       │   │       ├── 0829665.bin
    │   │       │   │       ├── 0829666.bin
    │   │       │   │       ├── 0829667.bin
    │   │       │   │       ├── 0829668.bin
    │   │       │   │       ├── 0829669.bin
    │   │       │   │       ├── 0829670.bin
    │   │       │   │       ├── 0829671.bin
    │   │       │   │       ├── 0829672.bin
    │   │       │   │       ├── 0829673.bin
    │   │       │   │       ├── 0829674.bin
    │   │       │   │       ├── 0829675.bin
    │   │       │   │       ├── 0829676.bin
    │   │       │   │       ├── 0829677.bin
    │   │       │   │       ├── 0829678.bin
    │   │       │   │       ├── 0829679.bin
    │   │       │   │       ├── 0829680.bin
    │   │       │   │       ├── 0829681.bin
    │   │       │   │       ├── 0829682.bin
    │   │       │   │       ├── 0829683.bin
    │   │       │   │       ├── 0829684.bin
    │   │       │   │       ├── 0829685.bin
    │   │       │   │       ├── 0829686.bin
    │   │       │   │       ├── 0829687.bin
    │   │       │   │       ├── 0829688.bin
    │   │       │   │       ├── 0829689.bin
    │   │       │   │       ├── 0829690.bin
    │   │       │   │       ├── 0829691.bin
    │   │       │   │       ├── 0829692.bin
    │   │       │   │       ├── 0829693.bin
    │   │       │   │       ├── 0829694.bin
    │   │       │   │       ├── 0829695.bin
    │   │       │   │       ├── 0829696.bin
    │   │       │   │       ├── 0829697.bin
    │   │       │   │       ├── 0829698.bin
    │   │       │   │       ├── 0829699.bin
    │   │       │   │       ├── 0829700.bin
    │   │       │   │       ├── 0829701.bin
    │   │       │   │       ├── 0829702.bin
    │   │       │   │       ├── 0829703.bin
    │   │       │   │       ├── 0829704.bin
    │   │       │   │       ├── 0829705.bin
    │   │       │   │       ├── 0829706.bin
    │   │       │   │       ├── 0829707.bin
    │   │       │   │       ├── 0829708.bin
    │   │       │   │       ├── 0829709.bin
    │   │       │   │       ├── 0829710.bin
    │   │       │   │       ├── 0829711.bin
    │   │       │   │       ├── 0829712.bin
    │   │       │   │       ├── 0829713.bin
    │   │       │   │       ├── 0829714.bin
    │   │       │   │       ├── 0829715.bin
    │   │       │   │       ├── 0829716.bin
    │   │       │   │       ├── 0829717.bin
    │   │       │   │       ├── 0829718.bin
    │   │       │   │       ├── 0829719.bin
    │   │       │   │       ├── 0829720.bin
    │   │       │   │       ├── 0829721.bin
    │   │       │   │       ├── 0829722.bin
    │   │       │   │       ├── 0829723.bin
    │   │       │   │       ├── 0829724.bin
    │   │       │   │       ├── 0829725.bin
    │   │       │   │       ├── 0829726.bin
    │   │       │   │       ├── 0829727.bin
    │   │       │   │       ├── 0829728.bin
    │   │       │   │       ├── 0829729.bin
    │   │       │   │       ├── 0829730.bin
    │   │       │   │       ├── 0829731.bin
    │   │       │   │       ├── 0829732.bin
    │   │       │   │       ├── 0829733.bin
    │   │       │   │       ├── 0829734.bin
    │   │       │   │       ├── 0829735.bin
    │   │       │   │       ├── 0829736.bin
    │   │       │   │       ├── 0829737.bin
    │   │       │   │       ├── 0829738.bin
    │   │       │   │       ├── 0829739.bin
    │   │       │   │       ├── 0829740.bin
    │   │       │   │       ├── 0829741.bin
    │   │       │   │       ├── 0829742.bin
    │   │       │   │       ├── 0829743.bin
    │   │       │   │       ├── 0829744.bin
    │   │       │   │       ├── 0829745.bin
    │   │       │   │       ├── 0829746.bin
    │   │       │   │       ├── 0829747.bin
    │   │       │   │       ├── 0829748.bin
    │   │       │   │       ├── 0829749.bin
    │   │       │   │       ├── 0829750.bin
    │   │       │   │       ├── 0829751.bin
    │   │       │   │       ├── 0829752.bin
    │   │       │   │       ├── 0829753.bin
    │   │       │   │       ├── 0829754.bin
    │   │       │   │       ├── 0829755.bin
    │   │       │   │       ├── 0829756.bin
    │   │       │   │       ├── 0829757.bin
    │   │       │   │       ├── 0829758.bin
    │   │       │   │       ├── 0829759.bin
    │   │       │   │       ├── 0829760.bin
    │   │       │   │       ├── 0829761.bin
    │   │       │   │       ├── 0829762.bin
    │   │       │   │       ├── 0829763.bin
    │   │       │   │       ├── 0829764.bin
    │   │       │   │       ├── 0829765.bin
    │   │       │   │       ├── 0829766.bin
    │   │       │   │       ├── 0829767.bin
    │   │       │   │       ├── 0829768.bin
    │   │       │   │       ├── 0829769.bin
    │   │       │   │       ├── 0829770.bin
    │   │       │   │       ├── 0829771.bin
    │   │       │   │       ├── 0829772.bin
    │   │       │   │       ├── 0829773.bin
    │   │       │   │       ├── 0829774.bin
    │   │       │   │       ├── 0829775.bin
    │   │       │   │       ├── 0829776.bin
    │   │       │   │       ├── 0829777.bin
    │   │       │   │       ├── 0829778.bin
    │   │       │   │       ├── 0829779.bin
    │   │       │   │       ├── 0829780.bin
    │   │       │   │       ├── 0829781.bin
    │   │       │   │       ├── 0829782.bin
    │   │       │   │       ├── 0829783.bin
    │   │       │   │       ├── 0829784.bin
    │   │       │   │       ├── 0829785.bin
    │   │       │   │       ├── 0829786.bin
    │   │       │   │       ├── 0829787.bin
    │   │       │   │       ├── 0829788.bin
    │   │       │   │       ├── 0829789.bin
    │   │       │   │       ├── 0829790.bin
    │   │       │   │       ├── 0829791.bin
    │   │       │   │       ├── 0829792.bin
    │   │       │   │       ├── 0829793.bin
    │   │       │   │       ├── 0829794.bin
    │   │       │   │       ├── 0829795.bin
    │   │       │   │       ├── 0829796.bin
    │   │       │   │       ├── 0829797.bin
    │   │       │   │       ├── 0829798.bin
    │   │       │   │       ├── 0829799.bin
    │   │       │   │       ├── 0829800.bin
    │   │       │   │       ├── 0829801.bin
    │   │       │   │       ├── 0829802.bin
    │   │       │   │       ├── 0829803.bin
    │   │       │   │       ├── 0829804.bin
    │   │       │   │       ├── 0829805.bin
    │   │       │   │       ├── 0829806.bin
    │   │       │   │       ├── 0829807.bin
    │   │       │   │       ├── 0829808.bin
    │   │       │   │       ├── 0829809.bin
    │   │       │   │       ├── 0829810.bin
    │   │       │   │       ├── 0829811.bin
    │   │       │   │       ├── 0829812.bin
    │   │       │   │       ├── 0829813.bin
    │   │       │   │       ├── 0829814.bin
    │   │       │   │       ├── 0829815.bin
    │   │       │   │       ├── 0829816.bin
    │   │       │   │       ├── 0829817.bin
    │   │       │   │       ├── 0829818.bin
    │   │       │   │       ├── 0829819.bin
    │   │       │   │       ├── 0829820.bin
    │   │       │   │       ├── 0829821.bin
    │   │       │   │       ├── 0829822.bin
    │   │       │   │       ├── 0829823.bin
    │   │       │   │       ├── 0829824.bin
    │   │       │   │       ├── 0829825.bin
    │   │       │   │       ├── 0829826.bin
    │   │       │   │       ├── 0829827.bin
    │   │       │   │       ├── 0829828.bin
    │   │       │   │       ├── 0829829.bin
    │   │       │   │       ├── 0829830.bin
    │   │       │   │       ├── 0829831.bin
    │   │       │   │       ├── 0829832.bin
    │   │       │   │       ├── 0829833.bin
    │   │       │   │       ├── 0829834.bin
    │   │       │   │       ├── 0829835.bin
    │   │       │   │       ├── 0829836.bin
    │   │       │   │       ├── 0829837.bin
    │   │       │   │       ├── 0829838.bin
    │   │       │   │       ├── 0829839.bin
    │   │       │   │       ├── 0829840.bin
    │   │       │   │       ├── 0829841.bin
    │   │       │   │       ├── 0829842.bin
    │   │       │   │       ├── 0829843.bin
    │   │       │   │       ├── 0829844.bin
    │   │       │   │       ├── 0829845.bin
    │   │       │   │       ├── 0829846.bin
    │   │       │   │       ├── 0829847.bin
    │   │       │   │       ├── 0829848.bin
    │   │       │   │       ├── 0829849.bin
    │   │       │   │       ├── 0829850.bin
    │   │       │   │       ├── 0829851.bin
    │   │       │   │       ├── 0829852.bin
    │   │       │   │       ├── 0829853.bin
    │   │       │   │       ├── 0829854.bin
    │   │       │   │       ├── 0829855.bin
    │   │       │   │       ├── 0829856.bin
    │   │       │   │       ├── 0829857.bin
    │   │       │   │       ├── 0829858.bin
    │   │       │   │       ├── 0829859.bin
    │   │       │   │       ├── 0829860.bin
    │   │       │   │       ├── 0829861.bin
    │   │       │   │       ├── 0829862.bin
    │   │       │   │       ├── 0829863.bin
    │   │       │   │       ├── 0829864.bin
    │   │       │   │       ├── 0829865.bin
    │   │       │   │       ├── 0829866.bin
    │   │       │   │       ├── 0829867.bin
    │   │       │   │       ├── 0829868.bin
    │   │       │   │       ├── 0829869.bin
    │   │       │   │       ├── 0829870.bin
    │   │       │   │       ├── 0829871.bin
    │   │       │   │       ├── 0829872.bin
    │   │       │   │       ├── 0829873.bin
    │   │       │   │       ├── 0829874.bin
    │   │       │   │       ├── 0829875.bin
    │   │       │   │       ├── 0829876.bin
    │   │       │   │       ├── 0829877.bin
    │   │       │   │       ├── 0829878.bin
    │   │       │   │       ├── 0829879.bin
    │   │       │   │       ├── 0829880.bin
    │   │       │   │       ├── 0829881.bin
    │   │       │   │       ├── 0829882.bin
    │   │       │   │       ├── 0829883.bin
    │   │       │   │       ├── 0829884.bin
    │   │       │   │       ├── 0829885.bin
    │   │       │   │       ├── 0829886.bin
    │   │       │   │       ├── 0829887.bin
    │   │       │   │       ├── 0829888.bin
    │   │       │   │       ├── 0829889.bin
    │   │       │   │       ├── 0829890.bin
    │   │       │   │       ├── 0829891.bin
    │   │       │   │       ├── 0829892.bin
    │   │       │   │       ├── 0829893.bin
    │   │       │   │       ├── 0829894.bin
    │   │       │   │       ├── 0829895.bin
    │   │       │   │       ├── 0829896.bin
    │   │       │   │       ├── 0829897.bin
    │   │       │   │       ├── 0829898.bin
    │   │       │   │       ├── 0829899.bin
    │   │       │   │       ├── 0829900.bin
    │   │       │   │       ├── 0829901.bin
    │   │       │   │       ├── 0829902.bin
    │   │       │   │       ├── 0829903.bin
    │   │       │   │       ├── 0829904.bin
    │   │       │   │       ├── 0829905.bin
    │   │       │   │       ├── 0829906.bin
    │   │       │   │       ├── 0829907.bin
    │   │       │   │       ├── 0829908.bin
    │   │       │   │       ├── 0829909.bin
    │   │       │   │       ├── 0829910.bin
    │   │       │   │       ├── 0829911.bin
    │   │       │   │       ├── 0829912.bin
    │   │       │   │       ├── 0829913.bin
    │   │       │   │       ├── 0829914.bin
    │   │       │   │       ├── 0829915.bin
    │   │       │   │       ├── 0829916.bin
    │   │       │   │       ├── 0829917.bin
    │   │       │   │       ├── 0829918.bin
    │   │       │   │       ├── 0829919.bin
    │   │       │   │       ├── 0829920.bin
    │   │       │   │       ├── 0829921.bin
    │   │       │   │       ├── 0829922.bin
    │   │       │   │       ├── 0829923.bin
    │   │       │   │       ├── 0829924.bin
    │   │       │   │       ├── 0829925.bin
    │   │       │   │       ├── 0829926.bin
    │   │       │   │       ├── 0829927.bin
    │   │       │   │       ├── 0829928.bin
    │   │       │   │       ├── 0829929.bin
    │   │       │   │       ├── 0829930.bin
    │   │       │   │       ├── 0829931.bin
    │   │       │   │       ├── 0829932.bin
    │   │       │   │       ├── 0829933.bin
    │   │       │   │       ├── 0829934.bin
    │   │       │   │       ├── 0829935.bin
    │   │       │   │       ├── 0829936.bin
    │   │       │   │       ├── 0829937.bin
    │   │       │   │       ├── 0829938.bin
    │   │       │   │       ├── 0829939.bin
    │   │       │   │       ├── 0829940.bin
    │   │       │   │       ├── 0829941.bin
    │   │       │   │       ├── 0829942.bin
    │   │       │   │       ├── 0829943.bin
    │   │       │   │       ├── 0829944.bin
    │   │       │   │       ├── 0829945.bin
    │   │       │   │       ├── 0829946.bin
    │   │       │   │       ├── 0829947.bin
    │   │       │   │       ├── 0829948.bin
    │   │       │   │       ├── 0829949.bin
    │   │       │   │       ├── 0829950.bin
    │   │       │   │       ├── 0829951.bin
    │   │       │   │       ├── 0829952.bin
    │   │       │   │       ├── 0829953.bin
    │   │       │   │       ├── 0829954.bin
    │   │       │   │       ├── 0829955.bin
    │   │       │   │       ├── 0829956.bin
    │   │       │   │       ├── 0829957.bin
    │   │       │   │       ├── 0829958.bin
    │   │       │   │       ├── 0829959.bin
    │   │       │   │       ├── 0829960.bin
    │   │       │   │       ├── 0829961.bin
    │   │       │   │       ├── 0829962.bin
    │   │       │   │       ├── 0829963.bin
    │   │       │   │       ├── 0829964.bin
    │   │       │   │       ├── 0829965.bin
    │   │       │   │       ├── 0829966.bin
    │   │       │   │       ├── 0829967.bin
    │   │       │   │       ├── 0829968.bin
    │   │       │   │       ├── 0829969.bin
    │   │       │   │       ├── 0829970.bin
    │   │       │   │       ├── 0829971.bin
    │   │       │   │       ├── 0829972.bin
    │   │       │   │       ├── 0829973.bin
    │   │       │   │       ├── 0829974.bin
    │   │       │   │       ├── 0829975.bin
    │   │       │   │       ├── 0829976.bin
    │   │       │   │       ├── 0829977.bin
    │   │       │   │       ├── 0829978.bin
    │   │       │   │       ├── 0829979.bin
    │   │       │   │       ├── 0829980.bin
    │   │       │   │       ├── 0829981.bin
    │   │       │   │       ├── 0829982.bin
    │   │       │   │       ├── 0829983.bin
    │   │       │   │       ├── 0829984.bin
    │   │       │   │       ├── 0829985.bin
    │   │       │   │       ├── 0829986.bin
    │   │       │   │       ├── 0829987.bin
    │   │       │   │       ├── 0829988.bin
    │   │       │   │       ├── 0829989.bin
    │   │       │   │       ├── 0829990.bin
    │   │       │   │       ├── 0829991.bin
    │   │       │   │       ├── 0829992.bin
    │   │       │   │       ├── 0829993.bin
    │   │       │   │       ├── 0829994.bin
    │   │       │   │       ├── 0829995.bin
    │   │       │   │       ├── 0829996.bin
    │   │       │   │       ├── 0829997.bin
    │   │       │   │       ├── 0829998.bin
    │   │       │   │       ├── 0829999.bin
    │   │       │   │       ├── 0830000.bin
    │   │       │   │       ├── 0830001.bin
    │   │       │   │       ├── 0830002.bin
    │   │       │   │       ├── 0830003.bin
    │   │       │   │       ├── 0830004.bin
    │   │       │   │       ├── 0830005.bin
    │   │       │   │       ├── 0830006.bin
    │   │       │   │       ├── 0830007.bin
    │   │       │   │       ├── 0830008.bin
    │   │       │   │       ├── 0830009.bin
    │   │       │   │       ├── 0830010.bin
    │   │       │   │       ├── 0830011.bin
    │   │       │   │       ├── 0830012.bin
    │   │       │   │       ├── 0830013.bin
    │   │       │   │       ├── 0830014.bin
    │   │       │   │       ├── 0830015.bin
    │   │       │   │       ├── 0830016.bin
    │   │       │   │       ├── 0830017.bin
    │   │       │   │       ├── 0830018.bin
    │   │       │   │       ├── 0830019.bin
    │   │       │   │       ├── 0830020.bin
    │   │       │   │       ├── 0830021.bin
    │   │       │   │       ├── 0830022.bin
    │   │       │   │       ├── 0830023.bin
    │   │       │   │       ├── 0830024.bin
    │   │       │   │       ├── 0830025.bin
    │   │       │   │       ├── 0830026.bin
    │   │       │   │       ├── 0830027.bin
    │   │       │   │       ├── 0830028.bin
    │   │       │   │       ├── 0830029.bin
    │   │       │   │       ├── 0830030.bin
    │   │       │   │       ├── 0830031.bin
    │   │       │   │       ├── 0830032.bin
    │   │       │   │       ├── 0830033.bin
    │   │       │   │       ├── 0830034.bin
    │   │       │   │       ├── 0830035.bin
    │   │       │   │       ├── 0830036.bin
    │   │       │   │       ├── 0830037.bin
    │   │       │   │       ├── 0830038.bin
    │   │       │   │       ├── 0830039.bin
    │   │       │   │       ├── 0830040.bin
    │   │       │   │       ├── 0830041.bin
    │   │       │   │       ├── 0830042.bin
    │   │       │   │       ├── 0830043.bin
    │   │       │   │       ├── 0830044.bin
    │   │       │   │       ├── 0830045.bin
    │   │       │   │       ├── 0830046.bin
    │   │       │   │       ├── 0830047.bin
    │   │       │   │       ├── 0830048.bin
    │   │       │   │       ├── 0830049.bin
    │   │       │   │       ├── 0830050.bin
    │   │       │   │       ├── 0830051.bin
    │   │       │   │       ├── 0830052.bin
    │   │       │   │       ├── 0830053.bin
    │   │       │   │       ├── 0830054.bin
    │   │       │   │       ├── 0830055.bin
    │   │       │   │       ├── 0830056.bin
    │   │       │   │       ├── 0830057.bin
    │   │       │   │       ├── 0830058.bin
    │   │       │   │       ├── 0830059.bin
    │   │       │   │       ├── 0830060.bin
    │   │       │   │       ├── 0830061.bin
    │   │       │   │       ├── 0830062.bin
    │   │       │   │       ├── 0830063.bin
    │   │       │   │       ├── 0830064.bin
    │   │       │   │       ├── 0830065.bin
    │   │       │   │       ├── 0830066.bin
    │   │       │   │       ├── 0830067.bin
    │   │       │   │       ├── 0830068.bin
    │   │       │   │       ├── 0830069.bin
    │   │       │   │       ├── 0830070.bin
    │   │       │   │       ├── 0830071.bin
    │   │       │   │       ├── 0830072.bin
    │   │       │   │       ├── 0830073.bin
    │   │       │   │       ├── 0830074.bin
    │   │       │   │       ├── 0830075.bin
    │   │       │   │       ├── 0830076.bin
    │   │       │   │       ├── 0830077.bin
    │   │       │   │       ├── 0830078.bin
    │   │       │   │       ├── 0830079.bin
    │   │       │   │       ├── 0830080.bin
    │   │       │   │       ├── 0830081.bin
    │   │       │   │       ├── 0830082.bin
    │   │       │   │       ├── 0830083.bin
    │   │       │   │       ├── 0830084.bin
    │   │       │   │       ├── 0830085.bin
    │   │       │   │       ├── 0830086.bin
    │   │       │   │       ├── 0830087.bin
    │   │       │   │       ├── 0830088.bin
    │   │       │   │       ├── 0830089.bin
    │   │       │   │       ├── 0830090.bin
    │   │       │   │       ├── 0830091.bin
    │   │       │   │       ├── 0830092.bin
    │   │       │   │       ├── 0830093.bin
    │   │       │   │       ├── 0830094.bin
    │   │       │   │       ├── 0830095.bin
    │   │       │   │       ├── 0830096.bin
    │   │       │   │       ├── 0830097.bin
    │   │       │   │       ├── 0830098.bin
    │   │       │   │       ├── 0830099.bin
    │   │       │   │       ├── 0830100.bin
    │   │       │   │       ├── 0830101.bin
    │   │       │   │       ├── 0830102.bin
    │   │       │   │       ├── 0830103.bin
    │   │       │   │       ├── 0830104.bin
    │   │       │   │       ├── 0830105.bin
    │   │       │   │       ├── 0830106.bin
    │   │       │   │       ├── 0830107.bin
    │   │       │   │       ├── 0830108.bin
    │   │       │   │       ├── 0830109.bin
    │   │       │   │       ├── 0830110.bin
    │   │       │   │       ├── 0830111.bin
    │   │       │   │       ├── 0830112.bin
    │   │       │   │       ├── 0830113.bin
    │   │       │   │       ├── 0830114.bin
    │   │       │   │       ├── 0830115.bin
    │   │       │   │       ├── 0830116.bin
    │   │       │   │       ├── 0830117.bin
    │   │       │   │       ├── 0830118.bin
    │   │       │   │       ├── 0830119.bin
    │   │       │   │       ├── 0830120.bin
    │   │       │   │       ├── 0830121.bin
    │   │       │   │       ├── 0830122.bin
    │   │       │   │       ├── 0830123.bin
    │   │       │   │       ├── 0830124.bin
    │   │       │   │       ├── 0830125.bin
    │   │       │   │       ├── 0830126.bin
    │   │       │   │       ├── 0830127.bin
    │   │       │   │       ├── 0830128.bin
    │   │       │   │       ├── 0830129.bin
    │   │       │   │       ├── 0830130.bin
    │   │       │   │       ├── 0830131.bin
    │   │       │   │       ├── 0830132.bin
    │   │       │   │       ├── 0830133.bin
    │   │       │   │       ├── 0830134.bin
    │   │       │   │       ├── 0830135.bin
    │   │       │   │       ├── 0830136.bin
    │   │       │   │       ├── 0830137.bin
    │   │       │   │       ├── 0830138.bin
    │   │       │   │       ├── 0830139.bin
    │   │       │   │       ├── 0830140.bin
    │   │       │   │       ├── 0830141.bin
    │   │       │   │       ├── 0830142.bin
    │   │       │   │       ├── 0830143.bin
    │   │       │   │       ├── 0830144.bin
    │   │       │   │       ├── 0830145.bin
    │   │       │   │       ├── 0830146.bin
    │   │       │   │       ├── 0830147.bin
    │   │       │   │       ├── 0830148.bin
    │   │       │   │       ├── 0830149.bin
    │   │       │   │       ├── 0830150.bin
    │   │       │   │       ├── 0830151.bin
    │   │       │   │       ├── 0830152.bin
    │   │       │   │       ├── 0830153.bin
    │   │       │   │       ├── 0830154.bin
    │   │       │   │       ├── 0830155.bin
    │   │       │   │       ├── 0830156.bin
    │   │       │   │       ├── 0830157.bin
    │   │       │   │       ├── 0830158.bin
    │   │       │   │       ├── 0830159.bin
    │   │       │   │       ├── 0830160.bin
    │   │       │   │       ├── 0830161.bin
    │   │       │   │       ├── 0830162.bin
    │   │       │   │       ├── 0830163.bin
    │   │       │   │       ├── 0830164.bin
    │   │       │   │       ├── 0830165.bin
    │   │       │   │       ├── 0830166.bin
    │   │       │   │       ├── 0830167.bin
    │   │       │   │       ├── 0830168.bin
    │   │       │   │       ├── 0830169.bin
    │   │       │   │       ├── 0830170.bin
    │   │       │   │       ├── 0830171.bin
    │   │       │   │       ├── 0830172.bin
    │   │       │   │       ├── 0830173.bin
    │   │       │   │       ├── 0830174.bin
    │   │       │   │       ├── 0830175.bin
    │   │       │   │       ├── 0830176.bin
    │   │       │   │       ├── 0830177.bin
    │   │       │   │       ├── 0830178.bin
    │   │       │   │       ├── 0830179.bin
    │   │       │   │       ├── 0830180.bin
    │   │       │   │       ├── 0830181.bin
    │   │       │   │       ├── 0830182.bin
    │   │       │   │       ├── 0830183.bin
    │   │       │   │       ├── 0830184.bin
    │   │       │   │       ├── 0830185.bin
    │   │       │   │       ├── 0830186.bin
    │   │       │   │       ├── 0830187.bin
    │   │       │   │       ├── 0830188.bin
    │   │       │   │       ├── 0830189.bin
    │   │       │   │       ├── 0830190.bin
    │   │       │   │       ├── 0830191.bin
    │   │       │   │       ├── 0830192.bin
    │   │       │   │       ├── 0830193.bin
    │   │       │   │       ├── 0830194.bin
    │   │       │   │       ├── 0830195.bin
    │   │       │   │       ├── 0830196.bin
    │   │       │   │       ├── 0830197.bin
    │   │       │   │       ├── 0830198.bin
    │   │       │   │       ├── 0830199.bin
    │   │       │   │       ├── 0830200.bin
    │   │       │   │       ├── 0830201.bin
    │   │       │   │       ├── 0830202.bin
    │   │       │   │       ├── 0830203.bin
    │   │       │   │       ├── 0830204.bin
    │   │       │   │       ├── 0830205.bin
    │   │       │   │       ├── 0830206.bin
    │   │       │   │       ├── 0830207.bin
    │   │       │   │       ├── 0830208.bin
    │   │       │   │       ├── 0830209.bin
    │   │       │   │       ├── 0830210.bin
    │   │       │   │       ├── 0830211.bin
    │   │       │   │       ├── 0830212.bin
    │   │       │   │       ├── 0830213.bin
    │   │       │   │       ├── 0830214.bin
    │   │       │   │       ├── 0830215.bin
    │   │       │   │       ├── 0830216.bin
    │   │       │   │       ├── 0830217.bin
    │   │       │   │       ├── 0830218.bin
    │   │       │   │       ├── 0830219.bin
    │   │       │   │       ├── 0830220.bin
    │   │       │   │       ├── 0830221.bin
    │   │       │   │       ├── 0830222.bin
    │   │       │   │       ├── 0830223.bin
    │   │       │   │       ├── 0830224.bin
    │   │       │   │       ├── 0830225.bin
    │   │       │   │       ├── 0830226.bin
    │   │       │   │       ├── 0830227.bin
    │   │       │   │       ├── 0830228.bin
    │   │       │   │       ├── 0830229.bin
    │   │       │   │       ├── 0830230.bin
    │   │       │   │       ├── 0830231.bin
    │   │       │   │       ├── 0830232.bin
    │   │       │   │       ├── 0830233.bin
    │   │       │   │       ├── 0830234.bin
    │   │       │   │       ├── 0830235.bin
    │   │       │   │       ├── 0830236.bin
    │   │       │   │       ├── 0830237.bin
    │   │       │   │       ├── 0830238.bin
    │   │       │   │       ├── 0830239.bin
    │   │       │   │       ├── 0830240.bin
    │   │       │   │       ├── 0830241.bin
    │   │       │   │       ├── 0830242.bin
    │   │       │   │       ├── 0830243.bin
    │   │       │   │       ├── 0830244.bin
    │   │       │   │       ├── 0830245.bin
    │   │       │   │       ├── 0830246.bin
    │   │       │   │       ├── 0830247.bin
    │   │       │   │       ├── 0830248.bin
    │   │       │   │       ├── 0830249.bin
    │   │       │   │       ├── 0830250.bin
    │   │       │   │       ├── 0830251.bin
    │   │       │   │       ├── 0830252.bin
    │   │       │   │       ├── 0830253.bin
    │   │       │   │       ├── 0830254.bin
    │   │       │   │       ├── 0830255.bin
    │   │       │   │       ├── 0830256.bin
    │   │       │   │       ├── 0830257.bin
    │   │       │   │       ├── 0830258.bin
    │   │       │   │       ├── 0830259.bin
    │   │       │   │       ├── 0830260.bin
    │   │       │   │       ├── 0830261.bin
    │   │       │   │       ├── 0830262.bin
    │   │       │   │       ├── 0830263.bin
    │   │       │   │       ├── 0830264.bin
    │   │       │   │       ├── 0830265.bin
    │   │       │   │       ├── 0830266.bin
    │   │       │   │       ├── 0830267.bin
    │   │       │   │       ├── 0830268.bin
    │   │       │   │       ├── 0830269.bin
    │   │       │   │       ├── 0830270.bin
    │   │       │   │       ├── 0830271.bin
    │   │       │   │       ├── 0830272.bin
    │   │       │   │       ├── 0830273.bin
    │   │       │   │       ├── 0830274.bin
    │   │       │   │       ├── 0830275.bin
    │   │       │   │       ├── 0830276.bin
    │   │       │   │       ├── 0830277.bin
    │   │       │   │       ├── 0830278.bin
    │   │       │   │       ├── 0830279.bin
    │   │       │   │       ├── 0830280.bin
    │   │       │   │       ├── 0830281.bin
    │   │       │   │       ├── 0830282.bin
    │   │       │   │       ├── 0830283.bin
    │   │       │   │       ├── 0830284.bin
    │   │       │   │       ├── 0830285.bin
    │   │       │   │       ├── 0830286.bin
    │   │       │   │       ├── 0830287.bin
    │   │       │   │       ├── 0830288.bin
    │   │       │   │       ├── 0830289.bin
    │   │       │   │       ├── 0830290.bin
    │   │       │   │       ├── 0830291.bin
    │   │       │   │       ├── 0830292.bin
    │   │       │   │       ├── 0830293.bin
    │   │       │   │       ├── 0830294.bin
    │   │       │   │       ├── 0830295.bin
    │   │       │   │       ├── 0830296.bin
    │   │       │   │       ├── 0830297.bin
    │   │       │   │       ├── 0830298.bin
    │   │       │   │       ├── 0830299.bin
    │   │       │   │       ├── 0830300.bin
    │   │       │   │       ├── 0830301.bin
    │   │       │   │       ├── 0830302.bin
    │   │       │   │       ├── 0830303.bin
    │   │       │   │       ├── 0830304.bin
    │   │       │   │       ├── 0830305.bin
    │   │       │   │       ├── 0830306.bin
    │   │       │   │       ├── 0830307.bin
    │   │       │   │       ├── 0830308.bin
    │   │       │   │       ├── 0830309.bin
    │   │       │   │       ├── 0830310.bin
    │   │       │   │       ├── 0830311.bin
    │   │       │   │       ├── 0830312.bin
    │   │       │   │       ├── 0830313.bin
    │   │       │   │       ├── 0830314.bin
    │   │       │   │       ├── 0830315.bin
    │   │       │   │       ├── 0830316.bin
    │   │       │   │       ├── 0830317.bin
    │   │       │   │       ├── 0830318.bin
    │   │       │   │       ├── 0830319.bin
    │   │       │   │       ├── 0830320.bin
    │   │       │   │       ├── 0830321.bin
    │   │       │   │       ├── 0830322.bin
    │   │       │   │       ├── 0830323.bin
    │   │       │   │       ├── 0830324.bin
    │   │       │   │       ├── 0830325.bin
    │   │       │   │       ├── 0830326.bin
    │   │       │   │       ├── 0830327.bin
    │   │       │   │       ├── 0830328.bin
    │   │       │   │       ├── 0830329.bin
    │   │       │   │       ├── 0830330.bin
    │   │       │   │       ├── 0830331.bin
    │   │       │   │       ├── 0830332.bin
    │   │       │   │       ├── 0830333.bin
    │   │       │   │       ├── 0830334.bin
    │   │       │   │       ├── 0830335.bin
    │   │       │   │       ├── 0830336.bin
    │   │       │   │       ├── 0830337.bin
    │   │       │   │       ├── 0830338.bin
    │   │       │   │       ├── 0830339.bin
    │   │       │   │       ├── 0830340.bin
    │   │       │   │       ├── 0830341.bin
    │   │       │   │       ├── 0830342.bin
    │   │       │   │       ├── 0830343.bin
    │   │       │   │       ├── 0830344.bin
    │   │       │   │       ├── 0830345.bin
    │   │       │   │       ├── 0830346.bin
    │   │       │   │       ├── 0830347.bin
    │   │       │   │       ├── 0830348.bin
    │   │       │   │       ├── 0830349.bin
    │   │       │   │       ├── 0830350.bin
    │   │       │   │       ├── 0830351.bin
    │   │       │   │       ├── 0830352.bin
    │   │       │   │       ├── 0830353.bin
    │   │       │   │       ├── 0830354.bin
    │   │       │   │       ├── 0830355.bin
    │   │       │   │       ├── 0830356.bin
    │   │       │   │       ├── 0830357.bin
    │   │       │   │       ├── 0830358.bin
    │   │       │   │       ├── 0830359.bin
    │   │       │   │       ├── 0830360.bin
    │   │       │   │       ├── 0830361.bin
    │   │       │   │       ├── 0830362.bin
    │   │       │   │       ├── 0830363.bin
    │   │       │   │       ├── 0830364.bin
    │   │       │   │       ├── 0830365.bin
    │   │       │   │       ├── 0830366.bin
    │   │       │   │       ├── 0830367.bin
    │   │       │   │       ├── 0830368.bin
    │   │       │   │       ├── 0830369.bin
    │   │       │   │       ├── 0830370.bin
    │   │       │   │       ├── 0830371.bin
    │   │       │   │       ├── 0830372.bin
    │   │       │   │       ├── 0830373.bin
    │   │       │   │       ├── 0830374.bin
    │   │       │   │       ├── 0830375.bin
    │   │       │   │       ├── 0830376.bin
    │   │       │   │       ├── 0830377.bin
    │   │       │   │       ├── 0830378.bin
    │   │       │   │       ├── 0830379.bin
    │   │       │   │       ├── 0830380.bin
    │   │       │   │       ├── 0830381.bin
    │   │       │   │       ├── 0830382.bin
    │   │       │   │       ├── 0830383.bin
    │   │       │   │       ├── 0830384.bin
    │   │       │   │       ├── 0830385.bin
    │   │       │   │       ├── 0830386.bin
    │   │       │   │       ├── 0830387.bin
    │   │       │   │       ├── 0830388.bin
    │   │       │   │       ├── 0830389.bin
    │   │       │   │       ├── 0830390.bin
    │   │       │   │       ├── 0830391.bin
    │   │       │   │       ├── 0830392.bin
    │   │       │   │       ├── 0830393.bin
    │   │       │   │       ├── 0830394.bin
    │   │       │   │       ├── 0830395.bin
    │   │       │   │       ├── 0830396.bin
    │   │       │   │       ├── 0830397.bin
    │   │       │   │       ├── 0830398.bin
    │   │       │   │       ├── 0830399.bin
    │   │       │   │       ├── 0830400.bin
    │   │       │   │       ├── 0830401.bin
    │   │       │   │       ├── 0830402.bin
    │   │       │   │       ├── 0830403.bin
    │   │       │   │       ├── 0830404.bin
    │   │       │   │       ├── 0830405.bin
    │   │       │   │       ├── 0830406.bin
    │   │       │   │       ├── 0830407.bin
    │   │       │   │       ├── 0830408.bin
    │   │       │   │       ├── 0830409.bin
    │   │       │   │       ├── 0830410.bin
    │   │       │   │       ├── 0830411.bin
    │   │       │   │       ├── 0830412.bin
    │   │       │   │       ├── 0830413.bin
    │   │       │   │       ├── 0830414.bin
    │   │       │   │       ├── 0830415.bin
    │   │       │   │       ├── 0830416.bin
    │   │       │   │       ├── 0830417.bin
    │   │       │   │       ├── 0830418.bin
    │   │       │   │       ├── 0830419.bin
    │   │       │   │       ├── 0830420.bin
    │   │       │   │       ├── 0830421.bin
    │   │       │   │       ├── 0830422.bin
    │   │       │   │       ├── 0830423.bin
    │   │       │   │       ├── 0830424.bin
    │   │       │   │       ├── 0830425.bin
    │   │       │   │       ├── 0830426.bin
    │   │       │   │       ├── 0830427.bin
    │   │       │   │       ├── 0830428.bin
    │   │       │   │       ├── 0830429.bin
    │   │       │   │       ├── 0830430.bin
    │   │       │   │       ├── 0830431.bin
    │   │       │   │       ├── 0830432.bin
    │   │       │   │       ├── 0830433.bin
    │   │       │   │       ├── 0830434.bin
    │   │       │   │       ├── 0830435.bin
    │   │       │   │       ├── 0830436.bin
    │   │       │   │       ├── 0830437.bin
    │   │       │   │       ├── 0830438.bin
    │   │       │   │       ├── 0830439.bin
    │   │       │   │       ├── 0830440.bin
    │   │       │   │       ├── 0830441.bin
    │   │       │   │       ├── 0830442.bin
    │   │       │   │       ├── 0830443.bin
    │   │       │   │       ├── 0830444.bin
    │   │       │   │       ├── 0830445.bin
    │   │       │   │       ├── 0830446.bin
    │   │       │   │       ├── 0830447.bin
    │   │       │   │       ├── 0830448.bin
    │   │       │   │       ├── 0830449.bin
    │   │       │   │       ├── 0830450.bin
    │   │       │   │       ├── 0830451.bin
    │   │       │   │       ├── 0830452.bin
    │   │       │   │       ├── 0830453.bin
    │   │       │   │       ├── 0830454.bin
    │   │       │   │       ├── 0830455.bin
    │   │       │   │       ├── 0830456.bin
    │   │       │   │       ├── 0830457.bin
    │   │       │   │       ├── 0830458.bin
    │   │       │   │       ├── 0830459.bin
    │   │       │   │       ├── 0830460.bin
    │   │       │   │       ├── 0830461.bin
    │   │       │   │       ├── 0830462.bin
    │   │       │   │       ├── 0830463.bin
    │   │       │   │       ├── 0830464.bin
    │   │       │   │       ├── 0830465.bin
    │   │       │   │       ├── 0830466.bin
    │   │       │   │       ├── 0830467.bin
    │   │       │   │       ├── 0830468.bin
    │   │       │   │       ├── 0830469.bin
    │   │       │   │       ├── 0830470.bin
    │   │       │   │       ├── 0830471.bin
    │   │       │   │       ├── 0830472.bin
    │   │       │   │       ├── 0830473.bin
    │   │       │   │       ├── 0830474.bin
    │   │       │   │       ├── 0830475.bin
    │   │       │   │       ├── 0830476.bin
    │   │       │   │       ├── 0830477.bin
    │   │       │   │       ├── 0830478.bin
    │   │       │   │       ├── 0830479.bin
    │   │       │   │       ├── 0830480.bin
    │   │       │   │       ├── 0830481.bin
    │   │       │   │       ├── 0830482.bin
    │   │       │   │       ├── 0830483.bin
    │   │       │   │       ├── 0830484.bin
    │   │       │   │       ├── 0830485.bin
    │   │       │   │       ├── 0830486.bin
    │   │       │   │       ├── 0830487.bin
    │   │       │   │       ├── 0830488.bin
    │   │       │   │       ├── 0830489.bin
    │   │       │   │       ├── 0830490.bin
    │   │       │   │       ├── 0830491.bin
    │   │       │   │       ├── 0830492.bin
    │   │       │   │       ├── 0830493.bin
    │   │       │   │       ├── 0830494.bin
    │   │       │   │       ├── 0830495.bin
    │   │       │   │       ├── 0830496.bin
    │   │       │   │       ├── 0830497.bin
    │   │       │   │       ├── 0830498.bin
    │   │       │   │       ├── 0830499.bin
    │   │       │   │       ├── 0830500.bin
    │   │       │   │       ├── 0830501.bin
    │   │       │   │       ├── 0830502.bin
    │   │       │   │       ├── 0830503.bin
    │   │       │   │       ├── 0830504.bin
    │   │       │   │       ├── 0830505.bin
    │   │       │   │       ├── 0830506.bin
    │   │       │   │       ├── 0830507.bin
    │   │       │   │       ├── 0830508.bin
    │   │       │   │       ├── 0830509.bin
    │   │       │   │       ├── 0830510.bin
    │   │       │   │       ├── 0830511.bin
    │   │       │   │       ├── 0830512.bin
    │   │       │   │       ├── 0830513.bin
    │   │       │   │       ├── 0830514.bin
    │   │       │   │       ├── 0830515.bin
    │   │       │   │       ├── 0830516.bin
    │   │       │   │       ├── 0830517.bin
    │   │       │   │       ├── 0830518.bin
    │   │       │   │       ├── 0830519.bin
    │   │       │   │       ├── 0830520.bin
    │   │       │   │       ├── 0830521.bin
    │   │       │   │       ├── 0830522.bin
    │   │       │   │       ├── 0830523.bin
    │   │       │   │       ├── 0830524.bin
    │   │       │   │       ├── 0830525.bin
    │   │       │   │       ├── 0830526.bin
    │   │       │   │       ├── 0830527.bin
    │   │       │   │       ├── 0830528.bin
    │   │       │   │       ├── 0830529.bin
    │   │       │   │       ├── 0830530.bin
    │   │       │   │       ├── 0830531.bin
    │   │       │   │       ├── 0830532.bin
    │   │       │   │       ├── 0830533.bin
    │   │       │   │       ├── 0830534.bin
    │   │       │   │       ├── 0830535.bin
    │   │       │   │       ├── 0830536.bin
    │   │       │   │       ├── 0830537.bin
    │   │       │   │       ├── 0830538.bin
    │   │       │   │       ├── 0830539.bin
    │   │       │   │       ├── 0830540.bin
    │   │       │   │       ├── 0830541.bin
    │   │       │   │       ├── 0830542.bin
    │   │       │   │       ├── 0830543.bin
    │   │       │   │       ├── 0830544.bin
    │   │       │   │       ├── 0830545.bin
    │   │       │   │       ├── 0830546.bin
    │   │       │   │       ├── 0830547.bin
    │   │       │   │       ├── 0830548.bin
    │   │       │   │       ├── 0830549.bin
    │   │       │   │       ├── 0830550.bin
    │   │       │   │       ├── 0830551.bin
    │   │       │   │       ├── 0830552.bin
    │   │       │   │       ├── 0830553.bin
    │   │       │   │       ├── 0830554.bin
    │   │       │   │       ├── 0830555.bin
    │   │       │   │       ├── 0830556.bin
    │   │       │   │       ├── 0830557.bin
    │   │       │   │       ├── 0830558.bin
    │   │       │   │       ├── 0830559.bin
    │   │       │   │       ├── 0830560.bin
    │   │       │   │       ├── 0830561.bin
    │   │       │   │       ├── 0830562.bin
    │   │       │   │       ├── 0830563.bin
    │   │       │   │       ├── 0830564.bin
    │   │       │   │       ├── 0830565.bin
    │   │       │   │       ├── 0830566.bin
    │   │       │   │       ├── 0830567.bin
    │   │       │   │       ├── 0830568.bin
    │   │       │   │       ├── 0830569.bin
    │   │       │   │       ├── 0830570.bin
    │   │       │   │       ├── 0830571.bin
    │   │       │   │       ├── 0830572.bin
    │   │       │   │       ├── 0830573.bin
    │   │       │   │       ├── 0830574.bin
    │   │       │   │       ├── 0830575.bin
    │   │       │   │       ├── 0830576.bin
    │   │       │   │       ├── 0830577.bin
    │   │       │   │       ├── 0830578.bin
    │   │       │   │       ├── 0830579.bin
    │   │       │   │       ├── 0830580.bin
    │   │       │   │       ├── 0830581.bin
    │   │       │   │       ├── 0830582.bin
    │   │       │   │       ├── 0830583.bin
    │   │       │   │       ├── 0830584.bin
    │   │       │   │       ├── 0830585.bin
    │   │       │   │       ├── 0830586.bin
    │   │       │   │       ├── 0830587.bin
    │   │       │   │       ├── 0830588.bin
    │   │       │   │       ├── 0830589.bin
    │   │       │   │       ├── 0830590.bin
    │   │       │   │       ├── 0830591.bin
    │   │       │   │       └── 0830592.bin
    │   │       │   ├── diff-change/
    │   │       │   │   ├── README.md
    │   │       │   │   ├── 0000000.bin
    │   │       │   │   ├── 0002015.bin
    │   │       │   │   ├── 0002016.bin
    │   │       │   │   ├── 0004031.bin
    │   │       │   │   ├── 0004032.bin
    │   │       │   │   ├── 0006047.bin
    │   │       │   │   ├── 0006048.bin
    │   │       │   │   ├── 0008063.bin
    │   │       │   │   ├── 0008064.bin
    │   │       │   │   ├── 0010079.bin
    │   │       │   │   ├── 0010080.bin
    │   │       │   │   ├── 0012095.bin
    │   │       │   │   ├── 0012096.bin
    │   │       │   │   ├── 0014111.bin
    │   │       │   │   ├── 0014112.bin
    │   │       │   │   ├── 0016127.bin
    │   │       │   │   ├── 0016128.bin
    │   │       │   │   ├── 0018143.bin
    │   │       │   │   ├── 0018144.bin
    │   │       │   │   ├── 0020159.bin
    │   │       │   │   ├── 0020160.bin
    │   │       │   │   ├── 0022175.bin
    │   │       │   │   ├── 0022176.bin
    │   │       │   │   ├── 0024191.bin
    │   │       │   │   ├── 0024192.bin
    │   │       │   │   ├── 0026207.bin
    │   │       │   │   ├── 0026208.bin
    │   │       │   │   ├── 0028223.bin
    │   │       │   │   ├── 0028224.bin
    │   │       │   │   ├── 0030239.bin
    │   │       │   │   ├── 0030240.bin
    │   │       │   │   ├── 0032255.bin
    │   │       │   │   ├── 0032256.bin
    │   │       │   │   ├── 0034271.bin
    │   │       │   │   ├── 0034272.bin
    │   │       │   │   ├── 0036287.bin
    │   │       │   │   ├── 0036288.bin
    │   │       │   │   ├── 0038303.bin
    │   │       │   │   ├── 0038304.bin
    │   │       │   │   ├── 0040319.bin
    │   │       │   │   ├── 0040320.bin
    │   │       │   │   ├── 0042335.bin
    │   │       │   │   ├── 0042336.bin
    │   │       │   │   ├── 0044351.bin
    │   │       │   │   ├── 0044352.bin
    │   │       │   │   ├── 0046367.bin
    │   │       │   │   ├── 0046368.bin
    │   │       │   │   ├── 0048383.bin
    │   │       │   │   ├── 0048384.bin
    │   │       │   │   ├── 0050399.bin
    │   │       │   │   ├── 0050400.bin
    │   │       │   │   ├── 0052415.bin
    │   │       │   │   ├── 0052416.bin
    │   │       │   │   ├── 0054431.bin
    │   │       │   │   ├── 0054432.bin
    │   │       │   │   ├── 0056447.bin
    │   │       │   │   ├── 0056448.bin
    │   │       │   │   ├── 0058463.bin
    │   │       │   │   ├── 0058464.bin
    │   │       │   │   ├── 0060479.bin
    │   │       │   │   ├── 0060480.bin
    │   │       │   │   ├── 0062495.bin
    │   │       │   │   ├── 0062496.bin
    │   │       │   │   ├── 0064511.bin
    │   │       │   │   ├── 0064512.bin
    │   │       │   │   ├── 0066527.bin
    │   │       │   │   ├── 0066528.bin
    │   │       │   │   ├── 0068543.bin
    │   │       │   │   ├── 0068544.bin
    │   │       │   │   ├── 0070559.bin
    │   │       │   │   ├── 0070560.bin
    │   │       │   │   ├── 0072575.bin
    │   │       │   │   ├── 0072576.bin
    │   │       │   │   ├── 0074591.bin
    │   │       │   │   ├── 0074592.bin
    │   │       │   │   ├── 0076607.bin
    │   │       │   │   ├── 0076608.bin
    │   │       │   │   ├── 0078623.bin
    │   │       │   │   ├── 0078624.bin
    │   │       │   │   ├── 0080639.bin
    │   │       │   │   ├── 0080640.bin
    │   │       │   │   ├── 0082655.bin
    │   │       │   │   ├── 0082656.bin
    │   │       │   │   ├── 0084671.bin
    │   │       │   │   ├── 0084672.bin
    │   │       │   │   ├── 0086687.bin
    │   │       │   │   ├── 0086688.bin
    │   │       │   │   ├── 0088703.bin
    │   │       │   │   ├── 0088704.bin
    │   │       │   │   ├── 0090719.bin
    │   │       │   │   ├── 0090720.bin
    │   │       │   │   ├── 0092735.bin
    │   │       │   │   ├── 0092736.bin
    │   │       │   │   ├── 0094751.bin
    │   │       │   │   ├── 0094752.bin
    │   │       │   │   ├── 0096767.bin
    │   │       │   │   ├── 0096768.bin
    │   │       │   │   ├── 0098783.bin
    │   │       │   │   ├── 0098784.bin
    │   │       │   │   ├── 0100799.bin
    │   │       │   │   ├── 0100800.bin
    │   │       │   │   ├── 0102815.bin
    │   │       │   │   ├── 0102816.bin
    │   │       │   │   ├── 0104831.bin
    │   │       │   │   ├── 0104832.bin
    │   │       │   │   ├── 0106847.bin
    │   │       │   │   ├── 0106848.bin
    │   │       │   │   ├── 0108863.bin
    │   │       │   │   ├── 0108864.bin
    │   │       │   │   ├── 0110879.bin
    │   │       │   │   ├── 0110880.bin
    │   │       │   │   ├── 0112895.bin
    │   │       │   │   ├── 0112896.bin
    │   │       │   │   ├── 0114911.bin
    │   │       │   │   ├── 0114912.bin
    │   │       │   │   ├── 0116927.bin
    │   │       │   │   ├── 0116928.bin
    │   │       │   │   ├── 0118943.bin
    │   │       │   │   ├── 0118944.bin
    │   │       │   │   ├── 0120959.bin
    │   │       │   │   ├── 0120960.bin
    │   │       │   │   ├── 0122975.bin
    │   │       │   │   ├── 0122976.bin
    │   │       │   │   ├── 0124991.bin
    │   │       │   │   ├── 0124992.bin
    │   │       │   │   ├── 0127007.bin
    │   │       │   │   ├── 0127008.bin
    │   │       │   │   ├── 0129023.bin
    │   │       │   │   ├── 0129024.bin
    │   │       │   │   ├── 0131039.bin
    │   │       │   │   ├── 0131040.bin
    │   │       │   │   ├── 0133055.bin
    │   │       │   │   ├── 0133056.bin
    │   │       │   │   ├── 0135071.bin
    │   │       │   │   ├── 0135072.bin
    │   │       │   │   ├── 0137087.bin
    │   │       │   │   ├── 0137088.bin
    │   │       │   │   ├── 0139103.bin
    │   │       │   │   ├── 0139104.bin
    │   │       │   │   ├── 0141119.bin
    │   │       │   │   ├── 0141120.bin
    │   │       │   │   ├── 0143135.bin
    │   │       │   │   ├── 0143136.bin
    │   │       │   │   ├── 0145151.bin
    │   │       │   │   ├── 0145152.bin
    │   │       │   │   ├── 0147167.bin
    │   │       │   │   ├── 0147168.bin
    │   │       │   │   ├── 0149183.bin
    │   │       │   │   ├── 0149184.bin
    │   │       │   │   ├── 0151199.bin
    │   │       │   │   ├── 0151200.bin
    │   │       │   │   ├── 0153215.bin
    │   │       │   │   ├── 0153216.bin
    │   │       │   │   ├── 0155231.bin
    │   │       │   │   ├── 0155232.bin
    │   │       │   │   ├── 0157247.bin
    │   │       │   │   ├── 0157248.bin
    │   │       │   │   ├── 0159263.bin
    │   │       │   │   ├── 0159264.bin
    │   │       │   │   ├── 0161279.bin
    │   │       │   │   ├── 0161280.bin
    │   │       │   │   ├── 0163295.bin
    │   │       │   │   ├── 0163296.bin
    │   │       │   │   ├── 0165311.bin
    │   │       │   │   ├── 0165312.bin
    │   │       │   │   ├── 0167327.bin
    │   │       │   │   ├── 0167328.bin
    │   │       │   │   ├── 0169343.bin
    │   │       │   │   ├── 0169344.bin
    │   │       │   │   ├── 0171359.bin
    │   │       │   │   ├── 0171360.bin
    │   │       │   │   ├── 0173375.bin
    │   │       │   │   ├── 0173376.bin
    │   │       │   │   ├── 0175391.bin
    │   │       │   │   ├── 0175392.bin
    │   │       │   │   ├── 0177407.bin
    │   │       │   │   ├── 0177408.bin
    │   │       │   │   ├── 0179423.bin
    │   │       │   │   ├── 0179424.bin
    │   │       │   │   ├── 0181439.bin
    │   │       │   │   ├── 0181440.bin
    │   │       │   │   ├── 0183455.bin
    │   │       │   │   ├── 0183456.bin
    │   │       │   │   ├── 0185471.bin
    │   │       │   │   ├── 0185472.bin
    │   │       │   │   ├── 0187487.bin
    │   │       │   │   ├── 0187488.bin
    │   │       │   │   ├── 0189503.bin
    │   │       │   │   ├── 0189504.bin
    │   │       │   │   ├── 0191519.bin
    │   │       │   │   ├── 0191520.bin
    │   │       │   │   ├── 0193535.bin
    │   │       │   │   ├── 0193536.bin
    │   │       │   │   ├── 0195551.bin
    │   │       │   │   ├── 0195552.bin
    │   │       │   │   ├── 0197567.bin
    │   │       │   │   ├── 0197568.bin
    │   │       │   │   ├── 0199583.bin
    │   │       │   │   ├── 0199584.bin
    │   │       │   │   ├── 0201599.bin
    │   │       │   │   ├── 0201600.bin
    │   │       │   │   ├── 0203615.bin
    │   │       │   │   ├── 0203616.bin
    │   │       │   │   ├── 0205631.bin
    │   │       │   │   ├── 0205632.bin
    │   │       │   │   ├── 0207647.bin
    │   │       │   │   ├── 0207648.bin
    │   │       │   │   ├── 0209663.bin
    │   │       │   │   ├── 0209664.bin
    │   │       │   │   ├── 0211679.bin
    │   │       │   │   ├── 0211680.bin
    │   │       │   │   ├── 0213695.bin
    │   │       │   │   ├── 0213696.bin
    │   │       │   │   ├── 0215711.bin
    │   │       │   │   ├── 0215712.bin
    │   │       │   │   ├── 0217727.bin
    │   │       │   │   ├── 0217728.bin
    │   │       │   │   ├── 0219743.bin
    │   │       │   │   ├── 0219744.bin
    │   │       │   │   ├── 0221759.bin
    │   │       │   │   ├── 0221760.bin
    │   │       │   │   ├── 0223775.bin
    │   │       │   │   ├── 0223776.bin
    │   │       │   │   ├── 0225791.bin
    │   │       │   │   ├── 0225792.bin
    │   │       │   │   ├── 0227807.bin
    │   │       │   │   ├── 0227808.bin
    │   │       │   │   ├── 0229823.bin
    │   │       │   │   ├── 0229824.bin
    │   │       │   │   ├── 0231839.bin
    │   │       │   │   ├── 0231840.bin
    │   │       │   │   ├── 0233855.bin
    │   │       │   │   ├── 0233856.bin
    │   │       │   │   ├── 0235871.bin
    │   │       │   │   ├── 0235872.bin
    │   │       │   │   ├── 0237887.bin
    │   │       │   │   ├── 0237888.bin
    │   │       │   │   ├── 0239903.bin
    │   │       │   │   ├── 0239904.bin
    │   │       │   │   ├── 0241919.bin
    │   │       │   │   ├── 0241920.bin
    │   │       │   │   ├── 0243935.bin
    │   │       │   │   ├── 0243936.bin
    │   │       │   │   ├── 0245951.bin
    │   │       │   │   ├── 0245952.bin
    │   │       │   │   ├── 0247967.bin
    │   │       │   │   ├── 0247968.bin
    │   │       │   │   ├── 0249983.bin
    │   │       │   │   ├── 0249984.bin
    │   │       │   │   ├── 0251999.bin
    │   │       │   │   ├── 0252000.bin
    │   │       │   │   ├── 0254015.bin
    │   │       │   │   ├── 0254016.bin
    │   │       │   │   ├── 0256031.bin
    │   │       │   │   ├── 0256032.bin
    │   │       │   │   ├── 0258047.bin
    │   │       │   │   ├── 0258048.bin
    │   │       │   │   ├── 0260063.bin
    │   │       │   │   ├── 0260064.bin
    │   │       │   │   ├── 0262079.bin
    │   │       │   │   ├── 0262080.bin
    │   │       │   │   ├── 0264095.bin
    │   │       │   │   ├── 0264096.bin
    │   │       │   │   ├── 0266111.bin
    │   │       │   │   ├── 0266112.bin
    │   │       │   │   ├── 0268127.bin
    │   │       │   │   ├── 0268128.bin
    │   │       │   │   ├── 0270143.bin
    │   │       │   │   ├── 0270144.bin
    │   │       │   │   ├── 0272159.bin
    │   │       │   │   ├── 0272160.bin
    │   │       │   │   ├── 0274175.bin
    │   │       │   │   ├── 0274176.bin
    │   │       │   │   ├── 0276191.bin
    │   │       │   │   ├── 0276192.bin
    │   │       │   │   ├── 0278207.bin
    │   │       │   │   ├── 0278208.bin
    │   │       │   │   ├── 0280223.bin
    │   │       │   │   ├── 0280224.bin
    │   │       │   │   ├── 0282239.bin
    │   │       │   │   ├── 0282240.bin
    │   │       │   │   ├── 0284255.bin
    │   │       │   │   ├── 0284256.bin
    │   │       │   │   ├── 0286271.bin
    │   │       │   │   ├── 0286272.bin
    │   │       │   │   ├── 0288287.bin
    │   │       │   │   ├── 0288288.bin
    │   │       │   │   ├── 0290303.bin
    │   │       │   │   ├── 0290304.bin
    │   │       │   │   ├── 0292319.bin
    │   │       │   │   ├── 0292320.bin
    │   │       │   │   ├── 0294335.bin
    │   │       │   │   ├── 0294336.bin
    │   │       │   │   ├── 0296351.bin
    │   │       │   │   ├── 0296352.bin
    │   │       │   │   ├── 0298367.bin
    │   │       │   │   ├── 0298368.bin
    │   │       │   │   ├── 0300383.bin
    │   │       │   │   ├── 0300384.bin
    │   │       │   │   ├── 0302399.bin
    │   │       │   │   ├── 0302400.bin
    │   │       │   │   ├── 0304415.bin
    │   │       │   │   ├── 0304416.bin
    │   │       │   │   ├── 0306431.bin
    │   │       │   │   ├── 0306432.bin
    │   │       │   │   ├── 0308447.bin
    │   │       │   │   ├── 0308448.bin
    │   │       │   │   ├── 0310463.bin
    │   │       │   │   ├── 0310464.bin
    │   │       │   │   ├── 0312479.bin
    │   │       │   │   ├── 0312480.bin
    │   │       │   │   ├── 0314495.bin
    │   │       │   │   ├── 0314496.bin
    │   │       │   │   ├── 0316511.bin
    │   │       │   │   ├── 0316512.bin
    │   │       │   │   ├── 0318527.bin
    │   │       │   │   ├── 0318528.bin
    │   │       │   │   ├── 0320543.bin
    │   │       │   │   ├── 0320544.bin
    │   │       │   │   ├── 0322559.bin
    │   │       │   │   ├── 0322560.bin
    │   │       │   │   ├── 0324575.bin
    │   │       │   │   ├── 0324576.bin
    │   │       │   │   ├── 0326591.bin
    │   │       │   │   ├── 0326592.bin
    │   │       │   │   ├── 0328607.bin
    │   │       │   │   ├── 0328608.bin
    │   │       │   │   ├── 0330623.bin
    │   │       │   │   ├── 0330624.bin
    │   │       │   │   ├── 0332639.bin
    │   │       │   │   ├── 0332640.bin
    │   │       │   │   ├── 0334655.bin
    │   │       │   │   ├── 0334656.bin
    │   │       │   │   ├── 0336671.bin
    │   │       │   │   ├── 0336672.bin
    │   │       │   │   ├── 0338687.bin
    │   │       │   │   ├── 0338688.bin
    │   │       │   │   ├── 0340703.bin
    │   │       │   │   ├── 0340704.bin
    │   │       │   │   ├── 0342719.bin
    │   │       │   │   ├── 0342720.bin
    │   │       │   │   ├── 0344735.bin
    │   │       │   │   ├── 0344736.bin
    │   │       │   │   ├── 0346751.bin
    │   │       │   │   ├── 0346752.bin
    │   │       │   │   ├── 0348767.bin
    │   │       │   │   ├── 0348768.bin
    │   │       │   │   ├── 0350783.bin
    │   │       │   │   ├── 0350784.bin
    │   │       │   │   ├── 0352799.bin
    │   │       │   │   ├── 0352800.bin
    │   │       │   │   ├── 0354815.bin
    │   │       │   │   ├── 0354816.bin
    │   │       │   │   ├── 0356831.bin
    │   │       │   │   ├── 0356832.bin
    │   │       │   │   ├── 0358847.bin
    │   │       │   │   ├── 0358848.bin
    │   │       │   │   ├── 0360863.bin
    │   │       │   │   ├── 0360864.bin
    │   │       │   │   ├── 0362879.bin
    │   │       │   │   ├── 0362880.bin
    │   │       │   │   ├── 0364895.bin
    │   │       │   │   ├── 0364896.bin
    │   │       │   │   ├── 0366911.bin
    │   │       │   │   ├── 0366912.bin
    │   │       │   │   ├── 0368927.bin
    │   │       │   │   ├── 0368928.bin
    │   │       │   │   ├── 0370943.bin
    │   │       │   │   ├── 0370944.bin
    │   │       │   │   ├── 0372959.bin
    │   │       │   │   ├── 0372960.bin
    │   │       │   │   ├── 0374975.bin
    │   │       │   │   ├── 0374976.bin
    │   │       │   │   ├── 0376991.bin
    │   │       │   │   ├── 0376992.bin
    │   │       │   │   ├── 0379007.bin
    │   │       │   │   ├── 0379008.bin
    │   │       │   │   ├── 0381023.bin
    │   │       │   │   ├── 0381024.bin
    │   │       │   │   ├── 0383039.bin
    │   │       │   │   ├── 0383040.bin
    │   │       │   │   ├── 0385055.bin
    │   │       │   │   ├── 0385056.bin
    │   │       │   │   ├── 0387071.bin
    │   │       │   │   ├── 0387072.bin
    │   │       │   │   ├── 0389087.bin
    │   │       │   │   ├── 0389088.bin
    │   │       │   │   ├── 0391103.bin
    │   │       │   │   ├── 0391104.bin
    │   │       │   │   ├── 0393119.bin
    │   │       │   │   ├── 0393120.bin
    │   │       │   │   ├── 0395135.bin
    │   │       │   │   ├── 0395136.bin
    │   │       │   │   ├── 0397151.bin
    │   │       │   │   ├── 0397152.bin
    │   │       │   │   ├── 0399167.bin
    │   │       │   │   ├── 0399168.bin
    │   │       │   │   ├── 0401183.bin
    │   │       │   │   ├── 0401184.bin
    │   │       │   │   ├── 0403199.bin
    │   │       │   │   ├── 0403200.bin
    │   │       │   │   ├── 0405215.bin
    │   │       │   │   ├── 0405216.bin
    │   │       │   │   ├── 0407231.bin
    │   │       │   │   ├── 0407232.bin
    │   │       │   │   ├── 0409247.bin
    │   │       │   │   ├── 0409248.bin
    │   │       │   │   ├── 0411263.bin
    │   │       │   │   ├── 0411264.bin
    │   │       │   │   ├── 0413279.bin
    │   │       │   │   ├── 0413280.bin
    │   │       │   │   ├── 0415295.bin
    │   │       │   │   ├── 0415296.bin
    │   │       │   │   ├── 0417311.bin
    │   │       │   │   ├── 0417312.bin
    │   │       │   │   ├── 0419327.bin
    │   │       │   │   ├── 0419328.bin
    │   │       │   │   ├── 0421343.bin
    │   │       │   │   ├── 0421344.bin
    │   │       │   │   ├── 0423359.bin
    │   │       │   │   ├── 0423360.bin
    │   │       │   │   ├── 0425375.bin
    │   │       │   │   ├── 0425376.bin
    │   │       │   │   ├── 0427391.bin
    │   │       │   │   ├── 0427392.bin
    │   │       │   │   ├── 0429407.bin
    │   │       │   │   ├── 0429408.bin
    │   │       │   │   ├── 0431423.bin
    │   │       │   │   ├── 0431424.bin
    │   │       │   │   ├── 0433439.bin
    │   │       │   │   ├── 0433440.bin
    │   │       │   │   ├── 0435455.bin
    │   │       │   │   ├── 0435456.bin
    │   │       │   │   ├── 0437471.bin
    │   │       │   │   ├── 0437472.bin
    │   │       │   │   ├── 0439487.bin
    │   │       │   │   ├── 0439488.bin
    │   │       │   │   ├── 0441503.bin
    │   │       │   │   ├── 0441504.bin
    │   │       │   │   ├── 0443519.bin
    │   │       │   │   ├── 0443520.bin
    │   │       │   │   ├── 0445535.bin
    │   │       │   │   ├── 0445536.bin
    │   │       │   │   ├── 0447551.bin
    │   │       │   │   ├── 0447552.bin
    │   │       │   │   ├── 0449567.bin
    │   │       │   │   ├── 0449568.bin
    │   │       │   │   ├── 0451583.bin
    │   │       │   │   ├── 0451584.bin
    │   │       │   │   ├── 0453599.bin
    │   │       │   │   ├── 0453600.bin
    │   │       │   │   ├── 0455615.bin
    │   │       │   │   ├── 0455616.bin
    │   │       │   │   ├── 0457631.bin
    │   │       │   │   ├── 0457632.bin
    │   │       │   │   ├── 0459647.bin
    │   │       │   │   ├── 0459648.bin
    │   │       │   │   ├── 0461663.bin
    │   │       │   │   ├── 0461664.bin
    │   │       │   │   ├── 0463679.bin
    │   │       │   │   ├── 0463680.bin
    │   │       │   │   ├── 0465695.bin
    │   │       │   │   ├── 0465696.bin
    │   │       │   │   ├── 0467711.bin
    │   │       │   │   ├── 0467712.bin
    │   │       │   │   ├── 0469727.bin
    │   │       │   │   ├── 0469728.bin
    │   │       │   │   ├── 0471743.bin
    │   │       │   │   ├── 0471744.bin
    │   │       │   │   ├── 0473759.bin
    │   │       │   │   ├── 0473760.bin
    │   │       │   │   ├── 0475775.bin
    │   │       │   │   ├── 0475776.bin
    │   │       │   │   ├── 0477791.bin
    │   │       │   │   ├── 0477792.bin
    │   │       │   │   ├── 0479807.bin
    │   │       │   │   ├── 0479808.bin
    │   │       │   │   ├── 0481823.bin
    │   │       │   │   ├── 0481824.bin
    │   │       │   │   ├── 0483839.bin
    │   │       │   │   ├── 0483840.bin
    │   │       │   │   ├── 0485855.bin
    │   │       │   │   ├── 0485856.bin
    │   │       │   │   ├── 0487871.bin
    │   │       │   │   ├── 0487872.bin
    │   │       │   │   ├── 0489887.bin
    │   │       │   │   ├── 0489888.bin
    │   │       │   │   ├── 0491903.bin
    │   │       │   │   ├── 0491904.bin
    │   │       │   │   ├── 0493919.bin
    │   │       │   │   ├── 0493920.bin
    │   │       │   │   ├── 0495935.bin
    │   │       │   │   ├── 0495936.bin
    │   │       │   │   ├── 0497951.bin
    │   │       │   │   ├── 0497952.bin
    │   │       │   │   ├── 0499967.bin
    │   │       │   │   ├── 0499968.bin
    │   │       │   │   ├── 0501983.bin
    │   │       │   │   ├── 0501984.bin
    │   │       │   │   ├── 0503999.bin
    │   │       │   │   ├── 0504000.bin
    │   │       │   │   ├── 0506015.bin
    │   │       │   │   ├── 0506016.bin
    │   │       │   │   ├── 0508031.bin
    │   │       │   │   ├── 0508032.bin
    │   │       │   │   ├── 0510047.bin
    │   │       │   │   ├── 0510048.bin
    │   │       │   │   ├── 0512063.bin
    │   │       │   │   ├── 0512064.bin
    │   │       │   │   ├── 0514079.bin
    │   │       │   │   ├── 0514080.bin
    │   │       │   │   ├── 0516095.bin
    │   │       │   │   ├── 0516096.bin
    │   │       │   │   ├── 0518111.bin
    │   │       │   │   ├── 0518112.bin
    │   │       │   │   ├── 0520127.bin
    │   │       │   │   ├── 0520128.bin
    │   │       │   │   ├── 0522143.bin
    │   │       │   │   ├── 0522144.bin
    │   │       │   │   ├── 0524159.bin
    │   │       │   │   ├── 0524160.bin
    │   │       │   │   ├── 0526175.bin
    │   │       │   │   ├── 0526176.bin
    │   │       │   │   ├── 0528191.bin
    │   │       │   │   ├── 0528192.bin
    │   │       │   │   ├── 0530207.bin
    │   │       │   │   ├── 0530208.bin
    │   │       │   │   ├── 0532223.bin
    │   │       │   │   ├── 0532224.bin
    │   │       │   │   ├── 0534239.bin
    │   │       │   │   ├── 0534240.bin
    │   │       │   │   ├── 0536255.bin
    │   │       │   │   ├── 0536256.bin
    │   │       │   │   ├── 0538271.bin
    │   │       │   │   ├── 0538272.bin
    │   │       │   │   ├── 0540287.bin
    │   │       │   │   ├── 0540288.bin
    │   │       │   │   ├── 0542303.bin
    │   │       │   │   ├── 0542304.bin
    │   │       │   │   ├── 0544319.bin
    │   │       │   │   ├── 0544320.bin
    │   │       │   │   ├── 0546335.bin
    │   │       │   │   ├── 0546336.bin
    │   │       │   │   ├── 0548351.bin
    │   │       │   │   ├── 0548352.bin
    │   │       │   │   ├── 0550367.bin
    │   │       │   │   ├── 0550368.bin
    │   │       │   │   ├── 0552383.bin
    │   │       │   │   ├── 0552384.bin
    │   │       │   │   ├── 0554399.bin
    │   │       │   │   ├── 0554400.bin
    │   │       │   │   ├── 0556415.bin
    │   │       │   │   ├── 0556416.bin
    │   │       │   │   ├── 0558431.bin
    │   │       │   │   ├── 0558432.bin
    │   │       │   │   ├── 0560447.bin
    │   │       │   │   ├── 0560448.bin
    │   │       │   │   ├── 0562463.bin
    │   │       │   │   ├── 0562464.bin
    │   │       │   │   ├── 0564479.bin
    │   │       │   │   ├── 0564480.bin
    │   │       │   │   ├── 0566495.bin
    │   │       │   │   ├── 0566496.bin
    │   │       │   │   ├── 0568511.bin
    │   │       │   │   ├── 0568512.bin
    │   │       │   │   ├── 0570527.bin
    │   │       │   │   ├── 0570528.bin
    │   │       │   │   ├── 0572543.bin
    │   │       │   │   ├── 0572544.bin
    │   │       │   │   ├── 0574559.bin
    │   │       │   │   ├── 0574560.bin
    │   │       │   │   ├── 0576575.bin
    │   │       │   │   ├── 0576576.bin
    │   │       │   │   ├── 0578591.bin
    │   │       │   │   ├── 0578592.bin
    │   │       │   │   ├── 0580607.bin
    │   │       │   │   ├── 0580608.bin
    │   │       │   │   ├── 0582623.bin
    │   │       │   │   ├── 0582624.bin
    │   │       │   │   ├── 0584639.bin
    │   │       │   │   ├── 0584640.bin
    │   │       │   │   ├── 0586655.bin
    │   │       │   │   ├── 0586656.bin
    │   │       │   │   ├── 0588671.bin
    │   │       │   │   ├── 0588672.bin
    │   │       │   │   ├── 0590687.bin
    │   │       │   │   ├── 0590688.bin
    │   │       │   │   ├── 0592703.bin
    │   │       │   │   ├── 0592704.bin
    │   │       │   │   ├── 0594719.bin
    │   │       │   │   ├── 0594720.bin
    │   │       │   │   ├── 0596735.bin
    │   │       │   │   ├── 0596736.bin
    │   │       │   │   ├── 0598751.bin
    │   │       │   │   ├── 0598752.bin
    │   │       │   │   ├── 0600767.bin
    │   │       │   │   ├── 0600768.bin
    │   │       │   │   ├── 0602783.bin
    │   │       │   │   ├── 0602784.bin
    │   │       │   │   ├── 0604799.bin
    │   │       │   │   ├── 0604800.bin
    │   │       │   │   ├── 0606815.bin
    │   │       │   │   ├── 0606816.bin
    │   │       │   │   ├── 0608831.bin
    │   │       │   │   ├── 0608832.bin
    │   │       │   │   ├── 0610847.bin
    │   │       │   │   ├── 0610848.bin
    │   │       │   │   ├── 0612863.bin
    │   │       │   │   ├── 0612864.bin
    │   │       │   │   ├── 0614879.bin
    │   │       │   │   ├── 0614880.bin
    │   │       │   │   ├── 0616895.bin
    │   │       │   │   ├── 0616896.bin
    │   │       │   │   ├── 0618911.bin
    │   │       │   │   ├── 0618912.bin
    │   │       │   │   ├── 0620927.bin
    │   │       │   │   ├── 0620928.bin
    │   │       │   │   ├── 0622943.bin
    │   │       │   │   ├── 0622944.bin
    │   │       │   │   ├── 0624959.bin
    │   │       │   │   ├── 0624960.bin
    │   │       │   │   ├── 0626975.bin
    │   │       │   │   ├── 0626976.bin
    │   │       │   │   ├── 0628991.bin
    │   │       │   │   ├── 0628992.bin
    │   │       │   │   ├── 0631007.bin
    │   │       │   │   ├── 0631008.bin
    │   │       │   │   ├── 0633023.bin
    │   │       │   │   ├── 0633024.bin
    │   │       │   │   ├── 0635039.bin
    │   │       │   │   ├── 0635040.bin
    │   │       │   │   ├── 0637055.bin
    │   │       │   │   ├── 0637056.bin
    │   │       │   │   ├── 0639071.bin
    │   │       │   │   ├── 0639072.bin
    │   │       │   │   ├── 0641087.bin
    │   │       │   │   ├── 0641088.bin
    │   │       │   │   ├── 0643103.bin
    │   │       │   │   ├── 0643104.bin
    │   │       │   │   ├── 0645119.bin
    │   │       │   │   ├── 0645120.bin
    │   │       │   │   ├── 0647135.bin
    │   │       │   │   ├── 0647136.bin
    │   │       │   │   ├── 0649151.bin
    │   │       │   │   ├── 0649152.bin
    │   │       │   │   ├── 0651167.bin
    │   │       │   │   ├── 0651168.bin
    │   │       │   │   ├── 0653183.bin
    │   │       │   │   ├── 0653184.bin
    │   │       │   │   ├── 0655199.bin
    │   │       │   │   ├── 0655200.bin
    │   │       │   │   ├── 0657215.bin
    │   │       │   │   ├── 0657216.bin
    │   │       │   │   ├── 0659231.bin
    │   │       │   │   ├── 0659232.bin
    │   │       │   │   ├── 0661247.bin
    │   │       │   │   ├── 0661248.bin
    │   │       │   │   ├── 0663263.bin
    │   │       │   │   ├── 0663264.bin
    │   │       │   │   ├── 0665279.bin
    │   │       │   │   ├── 0665280.bin
    │   │       │   │   ├── 0667295.bin
    │   │       │   │   ├── 0667296.bin
    │   │       │   │   ├── 0669311.bin
    │   │       │   │   ├── 0669312.bin
    │   │       │   │   ├── 0671327.bin
    │   │       │   │   ├── 0671328.bin
    │   │       │   │   ├── 0673343.bin
    │   │       │   │   ├── 0673344.bin
    │   │       │   │   ├── 0675359.bin
    │   │       │   │   ├── 0675360.bin
    │   │       │   │   ├── 0677375.bin
    │   │       │   │   ├── 0677376.bin
    │   │       │   │   ├── 0679391.bin
    │   │       │   │   ├── 0679392.bin
    │   │       │   │   ├── 0681407.bin
    │   │       │   │   ├── 0681408.bin
    │   │       │   │   ├── 0683423.bin
    │   │       │   │   ├── 0683424.bin
    │   │       │   │   ├── 0685439.bin
    │   │       │   │   ├── 0685440.bin
    │   │       │   │   ├── 0687455.bin
    │   │       │   │   ├── 0687456.bin
    │   │       │   │   ├── 0689471.bin
    │   │       │   │   ├── 0689472.bin
    │   │       │   │   ├── 0691487.bin
    │   │       │   │   ├── 0691488.bin
    │   │       │   │   ├── 0693503.bin
    │   │       │   │   ├── 0693504.bin
    │   │       │   │   ├── 0695519.bin
    │   │       │   │   ├── 0695520.bin
    │   │       │   │   ├── 0697535.bin
    │   │       │   │   ├── 0697536.bin
    │   │       │   │   ├── 0699551.bin
    │   │       │   │   ├── 0699552.bin
    │   │       │   │   ├── 0701567.bin
    │   │       │   │   ├── 0701568.bin
    │   │       │   │   ├── 0703583.bin
    │   │       │   │   ├── 0703584.bin
    │   │       │   │   ├── 0705599.bin
    │   │       │   │   ├── 0705600.bin
    │   │       │   │   ├── 0707615.bin
    │   │       │   │   ├── 0707616.bin
    │   │       │   │   ├── 0709631.bin
    │   │       │   │   ├── 0709632.bin
    │   │       │   │   ├── 0711647.bin
    │   │       │   │   ├── 0711648.bin
    │   │       │   │   ├── 0713663.bin
    │   │       │   │   ├── 0713664.bin
    │   │       │   │   ├── 0715679.bin
    │   │       │   │   ├── 0715680.bin
    │   │       │   │   ├── 0717695.bin
    │   │       │   │   ├── 0717696.bin
    │   │       │   │   ├── 0719711.bin
    │   │       │   │   ├── 0719712.bin
    │   │       │   │   ├── 0721727.bin
    │   │       │   │   ├── 0721728.bin
    │   │       │   │   ├── 0723743.bin
    │   │       │   │   ├── 0723744.bin
    │   │       │   │   ├── 0725759.bin
    │   │       │   │   ├── 0725760.bin
    │   │       │   │   ├── 0727775.bin
    │   │       │   │   ├── 0727776.bin
    │   │       │   │   ├── 0729791.bin
    │   │       │   │   ├── 0729792.bin
    │   │       │   │   ├── 0731807.bin
    │   │       │   │   ├── 0731808.bin
    │   │       │   │   ├── 0733823.bin
    │   │       │   │   ├── 0733824.bin
    │   │       │   │   ├── 0735839.bin
    │   │       │   │   ├── 0735840.bin
    │   │       │   │   ├── 0737855.bin
    │   │       │   │   ├── 0737856.bin
    │   │       │   │   ├── 0739871.bin
    │   │       │   │   ├── 0739872.bin
    │   │       │   │   ├── 0741887.bin
    │   │       │   │   ├── 0741888.bin
    │   │       │   │   ├── 0743903.bin
    │   │       │   │   ├── 0743904.bin
    │   │       │   │   ├── 0745919.bin
    │   │       │   │   ├── 0745920.bin
    │   │       │   │   ├── 0747935.bin
    │   │       │   │   ├── 0747936.bin
    │   │       │   │   ├── 0749951.bin
    │   │       │   │   ├── 0749952.bin
    │   │       │   │   ├── 0751967.bin
    │   │       │   │   ├── 0751968.bin
    │   │       │   │   ├── 0753983.bin
    │   │       │   │   ├── 0753984.bin
    │   │       │   │   ├── 0755999.bin
    │   │       │   │   ├── 0756000.bin
    │   │       │   │   ├── 0758015.bin
    │   │       │   │   ├── 0758016.bin
    │   │       │   │   ├── 0760031.bin
    │   │       │   │   ├── 0760032.bin
    │   │       │   │   ├── 0762047.bin
    │   │       │   │   ├── 0762048.bin
    │   │       │   │   ├── 0764063.bin
    │   │       │   │   ├── 0764064.bin
    │   │       │   │   ├── 0766079.bin
    │   │       │   │   ├── 0766080.bin
    │   │       │   │   ├── 0768095.bin
    │   │       │   │   ├── 0768096.bin
    │   │       │   │   ├── 0770111.bin
    │   │       │   │   ├── 0770112.bin
    │   │       │   │   ├── 0772127.bin
    │   │       │   │   ├── 0772128.bin
    │   │       │   │   ├── 0774143.bin
    │   │       │   │   ├── 0774144.bin
    │   │       │   │   ├── 0776159.bin
    │   │       │   │   ├── 0776160.bin
    │   │       │   │   ├── 0778175.bin
    │   │       │   │   ├── 0778176.bin
    │   │       │   │   ├── 0780191.bin
    │   │       │   │   ├── 0780192.bin
    │   │       │   │   ├── 0782207.bin
    │   │       │   │   ├── 0782208.bin
    │   │       │   │   ├── 0784223.bin
    │   │       │   │   ├── 0784224.bin
    │   │       │   │   ├── 0786239.bin
    │   │       │   │   ├── 0786240.bin
    │   │       │   │   ├── 0788255.bin
    │   │       │   │   ├── 0788256.bin
    │   │       │   │   ├── 0790271.bin
    │   │       │   │   ├── 0790272.bin
    │   │       │   │   ├── 0792287.bin
    │   │       │   │   ├── 0792288.bin
    │   │       │   │   ├── 0794303.bin
    │   │       │   │   ├── 0794304.bin
    │   │       │   │   ├── 0796319.bin
    │   │       │   │   ├── 0796320.bin
    │   │       │   │   ├── 0798335.bin
    │   │       │   │   ├── 0798336.bin
    │   │       │   │   ├── 0800351.bin
    │   │       │   │   ├── 0800352.bin
    │   │       │   │   ├── 0802367.bin
    │   │       │   │   ├── 0802368.bin
    │   │       │   │   ├── 0804383.bin
    │   │       │   │   ├── 0804384.bin
    │   │       │   │   ├── 0806399.bin
    │   │       │   │   ├── 0806400.bin
    │   │       │   │   ├── 0808415.bin
    │   │       │   │   ├── 0808416.bin
    │   │       │   │   ├── 0810431.bin
    │   │       │   │   ├── 0810432.bin
    │   │       │   │   ├── 0812447.bin
    │   │       │   │   ├── 0812448.bin
    │   │       │   │   ├── 0814463.bin
    │   │       │   │   ├── 0814464.bin
    │   │       │   │   ├── 0816479.bin
    │   │       │   │   ├── 0816480.bin
    │   │       │   │   ├── 0818495.bin
    │   │       │   │   ├── 0818496.bin
    │   │       │   │   ├── 0820511.bin
    │   │       │   │   ├── 0820512.bin
    │   │       │   │   ├── 0822527.bin
    │   │       │   │   ├── 0822528.bin
    │   │       │   │   ├── 0824543.bin
    │   │       │   │   ├── 0824544.bin
    │   │       │   │   ├── 0826559.bin
    │   │       │   │   ├── 0826560.bin
    │   │       │   │   ├── 0828575.bin
    │   │       │   │   ├── 0828576.bin
    │   │       │   │   ├── 0830591.bin
    │   │       │   │   ├── 0830592.bin
    │   │       │   │   ├── 0832607.bin
    │   │       │   │   └── 0832608.bin
    │   │       │   └── stale/
    │   │       │       ├── README.md
    │   │       │       ├── 0823226.bin
    │   │       │       └── 0829613.bin
    │   │       └── txoutproof/
    │   │           ├── README.md
    │   │           ├── case-0830000/
    │   │           │   ├── 0830000-0.bin
    │   │           │   ├── 0830000-1.bin
    │   │           │   ├── 0830000-10.bin
    │   │           │   ├── 0830000-100.bin
    │   │           │   ├── 0830000-1000.bin
    │   │           │   └── 0830000-1850.bin
    │   │           └── case-0831332/
    │   │               ├── 0831332-0.bin
    │   │               ├── 0831332-0_1_15_20_115_2019_2024.bin
    │   │               ├── 0831332-1.bin
    │   │               ├── 0831332-15.bin
    │   │               └── 0831332-20.bin
    │   └── src/
    │       ├── lib.rs
    │       ├── contracts/
    │       │   ├── can_update_without_ownership_lock.rs
    │       │   ├── mod.rs
    │       │   └── ckb_bitcoin_spv_type_lock/
    │       │       ├── create.rs
    │       │       ├── destroy.rs
    │       │       ├── mod.rs
    │       │       ├── reorg.rs
    │       │       └── update.rs
    │       └── utilities/
    │           ├── data_helper.rs
    │           ├── mod.rs
    │           └── type_id.rs
    └── .github/
        └── workflows/
            ├── checksum.yaml
            └── ci.yaml

================================================
File: README.md
================================================
# CKB Bitcoin SPV Contracts

[![License]](#license)
[![GitHub Actions]](https://github.com/ckb-cell/ckb-bitcoin-spv-contracts/actions)

> [!WARNING]
> This repository is still in the proof-of-concept stage.

[Bitcoin] SPV clients in [CKB] contracts.

[License]: https://img.shields.io/badge/License-MIT-blue.svg
[GitHub Actions]: https://github.com/ckb-cell/ckb-bitcoin-spv-contracts/workflows/CI/badge.svg

## Contracts

- [A type script for Bitcoin SPV clients.](contracts/ckb-bitcoin-spv-type-lock)

- For testing purpose only:

  - ["Can Update Without Ownership" Lock](contracts/can-update-without-ownership-lock)

## Audit Report

An audit report has been conducted to ensure the security and functionality of the contracts. You can find the detailed report [here](./CKB%20Bitcoin%20SPV%20Contracts%20Audit%20Report.pdf).


## License

Licensed under [MIT License].

[Bitcoin]: https://bitcoin.org
[CKB]: https://github.com/nervosnetwork/ckb

[MIT License]: LICENSE


================================================
File: Cargo.toml
================================================
[workspace]
resolver = "2"

members = [
  # Please don't remove the following line, we use it to automatically
  # detect insertion point for newly generated crates.
  # @@INSERTION_POINT@@
  "contracts/ckb-bitcoin-spv-type-lock",
  "contracts/can-update-without-ownership-lock",
  "tests",
]

[profile.release]
overflow-checks = true
strip = true
codegen-units = 1


================================================
File: LICENSE
================================================
Copyright (c) 2024 Boyu Yang <yangby@cryptape.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: Makefile
================================================
# We cannot use $(shell pwd), which will return unix path format on Windows,
# making it hard to use.
cur_dir = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

TOP := $(cur_dir)
# RUSTFLAGS that are likely to be tweaked by developers. For example,
# while we enable debug logs by default here, some might want to strip them
# for minimal code size / consumed cycles.
CUSTOM_RUSTFLAGS := --cfg debug_assertions
# Additional cargo args to append here. For example, one can use
# make test CARGO_ARGS="-- --nocapture" so as to inspect data emitted to
# stdout in unit tests
CARGO_ARGS :=
MODE := release
# Tweak this to change the clang version to use for building C code. By default
# we use a bash script with somes heuristics to find clang in current system.
CLANG := $(shell $(TOP)/scripts/find_clang)
# When this is set, a single contract will be built instead of all contracts
CONTRACT :=
# By default, we would clean build/{release,debug} folder first, in case old
# contracts are mixed together with new ones, if for some reason you want to
# revert this behavior, you can change this to anything other than true
CLEAN_BUILD_DIR_FIRST := true
BUILD_DIR := build/$(MODE)

# Pass setups to child make processes
export CUSTOM_RUSTFLAGS
export TOP
export CARGO_ARGS
export MODE
export CLANG
export BUILD_DIR

default: build test

build:
	@if [ "x$(CLEAN_BUILD_DIR_FIRST)" = "xtrue" ]; then \
		echo "Cleaning $(BUILD_DIR) directory..."; \
		rm -rf $(BUILD_DIR); \
	fi
	mkdir -p $(BUILD_DIR)
	@set -eu; \
	if [ "x$(CONTRACT)" = "x" ]; then \
		for contract in $(wildcard contracts/*); do \
			$(MAKE) -e -C $$contract build; \
		done; \
	else \
		$(MAKE) -e -C contracts/$(CONTRACT) build; \
	fi

# Run a single make task for a specific contract. For example:
#
# make run CONTRACT=stack-reorder TASK=adjust_stack_size STACK_SIZE=0x200000
TASK :=
run:
	$(MAKE) -e -C contracts/$(CONTRACT) $(TASK)

# test, check, clippy and fmt here are provided for completeness,
# there is nothing wrong invoking cargo directly instead of make.

NEXTEST_RUN_ARGS := --no-fail-fast --success-output never --failure-output final
test:
	cargo nextest run ${NEXTEST_RUN_ARGS} --workspace

check:
	cargo check $(CARGO_ARGS)

clippy:
	cargo clippy $(CARGO_ARGS) --workspace --tests -- --deny warnings

fmt:
	cargo fmt $(CARGO_ARGS)

# Arbitrary cargo command is supported here. For example:
#
# make cargo CARGO_CMD=expand CARGO_ARGS="--ugly"
# 
# Invokes:
# cargo expand --ugly
CARGO_CMD :=
cargo:
	cargo $(CARGO_CMD) $(CARGO_ARGS)

clean:
	rm -rf build
	cargo clean

TEMPLATE_TYPE := --git
TEMPLATE_REPO := https://github.com/cryptape/ckb-script-templates
CRATE :=
TEMPLATE := contract
DESTINATION := contracts
generate:
	@set -eu; \
	if [ "x$(CRATE)" = "x" ]; then \
		cargo generate $(TEMPLATE_TYPE) $(TEMPLATE_REPO) $(TEMPLATE) \
			--destination $(DESTINATION); \
		echo "Please update workspace-level Cargo.toml so members include the newly created crate!"; \
	else \
		cargo generate $(TEMPLATE_TYPE) $(TEMPLATE_REPO) $(TEMPLATE) \
			--destination $(DESTINATION) \
			--name $(CRATE); \
		sed '/@@INSERTION_POINT@@/s/$$/\n  "$(DESTINATION)\/$(CRATE)",/' Cargo.toml > Cargo.toml.new; \
		mv Cargo.toml.new Cargo.toml; \
	fi

prepare:
	rustup target add riscv64imac-unknown-none-elf

# Generate checksum info for reproducible build
CHECKSUM_FILE := build/checksums-$(MODE).txt
checksum: build
	sha256sum build/$(MODE)/* > $(CHECKSUM_FILE)

# Docker reproducible build
docker-build:
	docker run --rm -v `pwd`:/code   docker.io/xxuejie/rust-n-llvm@sha256:71e98a25eb0350c779cdea18c296d101c4ddc375b8fd96531b63f3105ca64ca2   bash -c "cd /code; make checksum MODE=release CHECKSUM_FILE=checksums.txt"
	sha256sum -c checksums.txt

.PHONY: build test check clippy fmt cargo clean prepare checksum docker-build


================================================
File: checksums.txt
================================================
6bbea4820329050e1fc65f9c15cab5948b824c73aa3430d7d92b793c53ca66b6  build/release/can-update-without-ownership-lock
d85e11c31261d9f34b47f839ddc49e135632fd751667b0c63b167a2a017a7999  build/release/ckb-bitcoin-spv-type-lock


================================================
File: contracts/can-update-without-ownership-lock/README.md
================================================
# "Can Update Without Ownership" Lock

> [!WARNING]
> :warning: This contract is testing purpose only.

This contract is a mock contract, and it is used for testing.

The security of this contract is not guaranteed.

## Feature

This lock script is used to keep the total capacity of cells which use this
lock script could not be decreased, but any non-owner users could update
them.

## Brief Introduction

It will return success when any follow condition is satisfied:

- the `args` for this lock script is the result of calling
  [`ckb_hash::blake2b_256`] on the `witness` of it.

- there is no witness for this lock script, but total capacity of cells
  which use this lock script are not greater than total capacity of cells
  which use this lock script after this transaction.

[`ckb_hash::blake2b_256`]: https://docs.rs/ckb-hash/0.112.1/ckb_hash/fn.blake2b_256.html


================================================
File: contracts/can-update-without-ownership-lock/Cargo.toml
================================================
[package]
name = "can-update-without-ownership-lock"
version = "0.2.0"
authors = ["Boyu Yang <yangby@cryptape.com>"]
edition = "2021"
license = "MIT"
description = "This contract is used for testing only."
homepage = "https://github.com/ckb-cell/ckb-bitcoin-spv-contracts"
repository = "https://github.com/ckb-cell/ckb-bitcoin-spv-contracts"

[dependencies]
ckb-std = "0.15.1"
ckb-hash = { version = "0.112.1", default-features = false, features = ["ckb-contract"] }


================================================
File: contracts/can-update-without-ownership-lock/Makefile
================================================
# We cannot use $(shell pwd), which will return unix path format on Windows,
# making it hard to use.
cur_dir = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

TOP := $(cur_dir)
# RUSTFLAGS that are likely to be tweaked by developers. For example,
# while we enable debug logs by default here, some might want to strip them
# for minimal code size / consumed cycles.
CUSTOM_RUSTFLAGS := --cfg debug_assertions
# RUSTFLAGS that are less likely to be tweaked by developers. Most likely
# one would want to keep the default values here.
FULL_RUSTFLAGS := -C target-feature=+zba,+zbb,+zbc,+zbs $(CUSTOM_RUSTFLAGS)
# Additional cargo args to append here. For example, one can use
# make test CARGO_ARGS="-- --nocapture" so as to inspect data emitted to
# stdout in unit tests
CARGO_ARGS :=
MODE := release
# Tweak this to change the clang version to use for building C code. By default
# we use a bash script with somes heuristics to find clang in current system.
CLANG := $(shell $(TOP)/scripts/find_clang)
# When this is set to some value, the generated binaries will be copied over
BUILD_DIR :=
# Generated binaries to copy. By convention, a Rust crate's directory name will
# likely match the crate name, which is also the name of the final binary.
# However if this is not the case, you can tweak this variable. As the name hints,
# more than one binary is supported here.
BINARIES := $(notdir $(shell pwd))

ifeq (release,$(MODE))
	MODE_ARGS := --release
endif

default: build test

build:
	RUSTFLAGS="$(FULL_RUSTFLAGS)" TARGET_CC="$(CLANG)" \
		cargo build --target=riscv64imac-unknown-none-elf $(MODE_ARGS) $(CARGO_ARGS)
	@set -eu; \
	if [ "x$(BUILD_DIR)" != "x" ]; then \
		for binary in $(BINARIES); do \
			echo "Copying binary $$binary to build directory"; \
			cp $(TOP)/target/riscv64imac-unknown-none-elf/$(MODE)/$$binary $(TOP)/$(BUILD_DIR); \
		done \
	fi

# test, check, clippy and fmt here are provided for completeness,
# there is nothing wrong invoking cargo directly instead of make.
test:
	cargo test $(CARGO_ARGS)

check:
	cargo check $(CARGO_ARGS)

clippy:
	cargo clippy $(CARGO_ARGS)

fmt:
	cargo fmt $(CARGO_ARGS)

# Arbitrary cargo command is supported here. For example:
#
# make cargo CARGO_CMD=expand CARGO_ARGS="--ugly"
# 
# Invokes:
# cargo expand --ugly
CARGO_CMD :=
cargo:
	cargo $(CARGO_CMD) $(CARGO_ARGS)

clean:
	cargo clean

prepare:
	rustup target add riscv64imac-unknown-none-elf

.PHONY: build test check clippy fmt cargo clean prepare


================================================
File: contracts/can-update-without-ownership-lock/.gitignore
================================================
/build
/target


================================================
File: contracts/can-update-without-ownership-lock/src/entry.rs
================================================
use alloc::vec::Vec;

use ckb_hash::blake2b_256;
#[cfg(debug_assertions)]
use ckb_std::ckb_types::prelude::*;
use ckb_std::{ckb_constants::Source, debug, high_level as hl};

use crate::error::{Error, Result};

pub fn main() -> Result<()> {
    debug!("{} Starting ...", module_path!());

    let script_hash = hl::load_script_hash()?;
    debug!("script hash = {:#x}", script_hash.pack());
    let args = hl::load_script()?.args();
    let expected_proof = args.raw_data().iter().cloned().collect::<Vec<u8>>();

    let mut checked = false;

    // Indexes of all inputs which use this lock.
    let mut inputs_indexes = Vec::new();

    for (index, lock_hash) in hl::QueryIter::new(hl::load_cell_lock_hash, Source::Input).enumerate()
    {
        if lock_hash == script_hash {
            debug!(">>> checking input {index}");
            inputs_indexes.push(index);
        } else {
            debug!(
                ">>> skipping input {index} since it's lock is {:#x}",
                lock_hash.pack()
            );
            continue;
        }

        if let Ok(witness_args) = hl::load_witness_args(index, Source::Input) {
            if let Some(lock_witness) = witness_args.lock().to_opt() {
                let actual_proof = blake2b_256(lock_witness.raw_data().as_ref());
                if actual_proof[..] == expected_proof[..] {
                    checked = true;
                    debug!(">>> >>> passed to check witness");
                } else {
                    debug!(
                        ">>> >>> failed to check witness: args: {}, witness: {}",
                        args, lock_witness
                    );
                    return Err(Error::WitnessIsIncorrect);
                }
            } else {
                debug!(">>> >>> failed to check witness: witness is empty");
            }
        } else {
            debug!(">>> >>> failed to load {index}-th witness");
        }
    }
    debug!("checked: {checked}");

    if !checked {
        debug!("calculating inputs capacity ...");
        let total_inputs_capacity = inputs_indexes.into_iter().try_fold(0u64, |total, index| {
            let added = hl::load_cell_capacity(index, Source::Input)?;
            let (tmp, of) = total.overflowing_add(added);
            debug!(">>> total = {tmp} (index: {index}, added: {added}, overflow: {of})");
            if of {
                Err(Error::InputsCapacityOverflow)
            } else {
                Ok(tmp)
            }
        })?;
        debug!("calculating outputs capacity ...");
        let total_outputs_capacity = hl::QueryIter::new(hl::load_cell_lock_hash, Source::Output)
            .enumerate()
            .try_fold(0u64, |total, (index, lock_hash)| {
                if lock_hash == script_hash {
                    debug!(">>> checking output {index}");
                } else {
                    debug!(
                        ">>> skipping output {index} since it's lock is {:#x}",
                        lock_hash.pack()
                    );
                    return Ok(total);
                }

                let added = hl::load_cell_capacity(index, Source::Output)?;
                let (tmp, of) = total.overflowing_add(added);
                debug!(">>> >>> total = {tmp} (index: {index}, added: {added}, overflow: {of})");
                if of {
                    Err(Error::OutputsCapacityOverflow)
                } else {
                    Ok(tmp)
                }
            })?;
        if total_inputs_capacity > total_outputs_capacity {
            debug!("lost capacity without ownership ({total_inputs_capacity} -> {total_outputs_capacity})");
            return Err(Error::LostCapacityWithoutOwnership);
        }
    }

    for (_index, type_hash_opt) in
        hl::QueryIter::new(hl::load_cell_type_hash, Source::Output).enumerate()
    {
        if let Some(type_hash) = type_hash_opt {
            if type_hash == script_hash {
                debug!("output {_index} uses current lock as type");
                return Err(Error::ShouldNotBeType);
            }
        }
    }

    debug!("{} DONE.", module_path!());

    Ok(())
}


================================================
File: contracts/can-update-without-ownership-lock/src/error.rs
================================================
use core::result;

use ckb_std::error::SysError;

pub type Result<T> = result::Result<T, Error>;

#[repr(i8)]
pub enum Error {
    // 0x01 ~ 0x0f: Errors from SDK, or other system errors.
    IndexOutOfBound = 0x01,
    ItemMissing,
    LengthNotEnough,
    Encoding,
    Unknown,

    // 0x10 ~ 0x2f: Errors in current crate.
    ShouldNotBeType = 0x10,
    WitnessIsIncorrect,
    InputsCapacityOverflow,
    OutputsCapacityOverflow,
    LostCapacityWithoutOwnership,
}

impl From<SysError> for Error {
    fn from(err: SysError) -> Self {
        use SysError::*;
        match err {
            IndexOutOfBound => Self::IndexOutOfBound,
            ItemMissing => Self::ItemMissing,
            LengthNotEnough(_) => Self::LengthNotEnough,
            Encoding => Self::Encoding,
            Unknown(_) => Self::Unknown,
        }
    }
}


================================================
File: contracts/can-update-without-ownership-lock/src/main.rs
================================================
#![no_std]
#![cfg_attr(not(test), no_main)]

#[cfg(test)]
extern crate alloc;

#[cfg(not(test))]
use ckb_std::default_alloc;
#[cfg(not(test))]
ckb_std::entry!(program_entry);
#[cfg(not(test))]
default_alloc!();

mod entry;
mod error;

pub fn program_entry() -> i8 {
    match entry::main() {
        Ok(_) => 0,
        Err(err) => err as i8,
    }
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/README.md
================================================

# CKB Bitcoin SPV Type Script

A type script designed for Bitcoin SPV clients ensures the valid synchronization of the [Bitcoin] blockchain state into the Nervos [CKB] network.

## Brief Introduction

A Bitcoin  SPV on CKB consists of cells that are managed by the CKB Bitcoin SPV Type Script and identified by the script args. The number of live cells with the script args remains fixed once created, and these cells will be destroyed collectively as a group.

### Cells

A Bitcoin SPV instance contains two types of cells: **SPV info cell** and **SPV client cell**.

- **SPV Client Cell**

  A cell is identified as an SPV client cell if its type script matches the SPV type script.

  SPV client cells store the Bitcoin state. Each Bitcoin SPV instance includes a minimum of three SPV client cells.

  ```yaml
  Client Cell:  
    Type Script:
      code hash: "..."
      hash type: "type"
      args: "typeid + clients count + flags"
    Data:
      - id
      - btc tip block hash
      - btc headers mmr root
      - target adjust info
  ```

- **SPV Info Cell**

  The SPV info cell stores the basic information of the current Bitcoin SPV instance, such as `tip_client_id`. Each Bitcoin SPV
  instance contains only one SPV info cell.

  ```yaml
  Info Cell:
    Type Script:
      code hash: "..."
      hash type: "type"
      args: "typeid + clients count + flags"
    Data: 
      - tip client cell id
  ```

- Flags

  [Flags](https://github.com/ckb-cell/ckb-bitcoin-spv/blob/bfc71d7daf17e96f34e8e287f45254e512383330/verifier/schemas/types.mol#L58) is the last part of `args` and takes up one byte. The highest two bits 
  are used to indicate different btc chain types. The supported chain types are:
  
  - Mainnet
  - Testnet
  - Signet
  
  see [BTC chain type] for details.

### Operations

There are 4 kinds of operations in the Bitcoin SPV type script:

- **Create**

  This operation initiates all necessary cells for a Bitcoin SPV instance in a single transaction.

  The `outputs` include one SPV info cell and at least three SPV client cell. Cells should be consecutive, with the SPV info cell first,
  followed by N SPV client cells ordered by their ID from smallest to largest. 

  Let's denote the number of SPV client cells as `n`. The structure of this transaction is as follows:

  ```yaml
  Cell Deps:
  - Type Lock
  - ... ...
  Inputs:
  - Enough Capacity Cells
  Outputs:
  - SPV Info (tip_client_id=0)
  - SPV Client (id=0)
  - SPV Client (id=1)
  - SPV Client (id=2)
  - ... ...
  - SPV Client (id=n-2)
  - SPV Client (id=n-1)
  - ... ...
  Witnesses:
  - SPV Bootstrap
  - ... ...
  ```

- **Destroy**

  Cells within a single Bitcoin SPV instance should be destroyed in one transaction..

  The structure of this kind of transaction is as follows:

  ```yaml
  Cell Deps:
  - Type Lock
  - ... ...
  Inputs:
  - SPV Info (tip_client_id=0)
  - SPV Client (id=0)
  - SPV Client (id=1)
  - SPV Client (id=2)
  - ... ...
  - SPV Client (id=n-2)
  - SPV Client (id=n-1)
  - ... ...
  Outputs:
  - Unrelated Cell
  - ... ...
  Witnesses:
  - Unrelated Witness
  - ... ...
  ```

- **Update**

  After creation, the `n` client cells should have same data.

  The SPV client cell which ID matches the `tip_client_id` of the SPV info cell contains the most recent data, the SPV client cell next
  in the sequence after the `tip_client_id` of the info cell holds the oldest data. This sequence arrangement of cells forms a ring
  where after the last cell (`ID = n-1`), it wraps around back to the first cell (`ID = 0`).

  When the Bitcoin SPV instance is updated, the new data will be put into the client cell that currently has the oldest data. Also,
  the `tip_client_id` in the SPV info cell will be replaced by the `ID` of the SPV client cell that just received the new data. This SPV
  info cell now becomes the new "latest data" holder.

  The structure of this kind of transaction is as follows:

  ```yaml
  Cell Deps:
  - Type Lock
  - SPV Client (id=k)
  - ... ...
  Inputs:
  - SPV Info (tip_client_id=k)
  - SPV Client (id=k+1)
  - ... ...
  Outputs:
  - SPV Info (tip_client_id=k+1)
  - SPV Client (id=k+1)
  - ... ...
  Witnesses:
  - SPV Update
  - ... ...
  ```

- **Reorg**

  When receiving blocks from a new, longer chain, if there is at least one client cell whose tip block is the 
  common ancestor block of both the old chain and the new chain, a reorg is triggered. The reorg will be based 
  on this common ancestor, and all client cells with a tip higher than it will be updated accordingly.

  **If no common ancestor block is identified, the Bitcoin SPV instance will fail and require re-deployment.**

  Let's denote the client ID of the best common ancestor as `t`. The structure of this transaction is as follows:

  ```yaml
  Cell Deps:
  - Type Lock
  - SPV Client (id=t)
  - ... ...
  Inputs:
  - SPV Info (tip_client_id=k)
  - SPV Client (id=t+1)
  - SPV Client (id=t+2)
  - SPV Client (id=...)
  - SPV Client (id=k)
  - ... ...
  Outputs:
  - SPV Info (tip_client_id=t+1)
  - SPV Client (id=t+1)
  - SPV Client (id=t+2)
  - SPV Client (id=...)
  - SPV Client (id=k)
  - ... ...
  Witnesses:
  - SPV Update
  - ... ...
  ```

For all operations, the witness for Bitcoin SPV should be set at the same
index of the output SPV info cell, and the proof should be set in
[the field `output_type` of `WitnessArgs`].

### Usages

To verify a transaction using the Bitcoin SPV Client cell, follow these steps:

- Select an SPV client cell that contains the block where the transaction is;

- Create a transaction proof, with the following data:

  - The MMR proof of the block header which contains this transaction;

  - The TxOut proof of the transaction;

  - The index of the transaction;

  - The height of the block header.

- Use the [`SpvClient::verify_transaction(..)`](https://github.com/ckb-cell/ckb-bitcoin-spv/blob/2464c8f/verifier/src/types/extension/packed.rs#L275-L292) for the verification. For detailed guidance, please refer to the [API example].

### Limits

- The minimum count of SPV client cells is 3;
  
- The maximum count of SPV client cells is advisable not to exceed `250` given the **`u8`** data type.

### Known Issues and Solutions

- **Issue #1**: `VM Internal Error: MemWriteOnExecutablePage`

  **Solution**: Don't set hash type[^1] to be `Data`.

  `Data1` is introduced in [CKB RFC 0032], and `Data2` is introduced in [CKB RFC 0051].

- **Issue #2**: Failed to reorg when there is only 1 stale SPV client.

  When only one SPV client cell is stale, a typical reorg transaction has the same structure as an update transaction,
  consisting of one SPV client cell in the inputs and one SPV client cell in the outputs. However, this similarity can lead to ambiguity.

  **Solution**: To address this issue, the following rule has been set: 

    - In cases where only one SPV client has failed, the reorg transaction must involve the reconstruction of one additional SPV client;
    Specifically, the reorg transaction for one stale SPV client should include two SPV client cell in the `inputs` and two SPV client
    cells in the `outputs` ;
    Considering that reorgs are a rare occurrence on the Bitcoin mainnet, the cost incurred by this approach is considered manageable.

- **Issue #3**: Throw **"Arithmetic Operation Overflow"** when updating a Bitcoin SPV instance for a Bitcoin dev chain.
    
    As the Bitcoin dev chain does not adhere to Bitcoin difficulty adjustment, calculations for the next target and the
    partial chain work could result in an arithmetic overflow.
    
    
[^1]: [Section "Code Locating"] in "CKB RFC 0022: CKB Transaction Structure".

[Bitcoin]: https://bitcoin.org/
[CKB]: https://github.com/nervosnetwork/ckb

[`args`]: https://github.com/nervosnetwork/rfcs/blob/v2020.01.15/rfcs/0019-data-structures/0019-data-structures.md#description-1
[the field `output_type` of `WitnessArgs`]: https://github.com/nervosnetwork/ckb/blob/v0.114.0/util/gen-types/schemas/blockchain.mol#L117

[API example]: https://github.com/ckb-cell/ckb-bitcoin-spv/blob/2464c8f/prover/src/tests/service.rs#L132-L181


[Section "Code Locating"]: https://github.com/nervosnetwork/rfcs/blob/v2020.01.15/rfcs/0022-transaction-structure/0022-transaction-structure.md#code-locating
[CKB RFC 0032]: https://github.com/nervosnetwork/rfcs/blob/dff5235616e5c7aec706326494dce1c54163c4be/rfcs/0032-ckb-vm-version-selection/0032-ckb-vm-version-selection.md#specification
[CKB RFC 0051]: https://github.com/nervosnetwork/rfcs/blob/dff5235616e5c7aec706326494dce1c54163c4be/rfcs/0051-ckb2023/0051-ckb2023.md#ckb-vm-v2

[btc chain type]: https://github.com/ckb-cell/ckb-bitcoin-spv/blob/bfc71d7daf17e96f34e8e287f45254e512383330/verifier/src/constants.rs#L3

================================================
File: contracts/ckb-bitcoin-spv-type-lock/Cargo.toml
================================================
[package]
name = "ckb-bitcoin-spv-type-lock"
version = "0.2.2"
authors = ["Boyu Yang <yangby@cryptape.com>"]
edition = "2021"
license = "MIT"
description = "A type script for Bitcoin SPV clients."
homepage = "https://github.com/ckb-cell/ckb-bitcoin-spv-contracts"
repository = "https://github.com/ckb-cell/ckb-bitcoin-spv-contracts"

[dependencies]
ckb-std = "0.15.1"
ckb-hash = { version = "0.112.1", default-features = false, features = ["ckb-contract"] }

[dependencies.ckb-bitcoin-spv-verifier]
version = "0.1.0"
git = "https://github.com/ckb-cell/ckb-bitcoin-spv"
rev = "6c3f3d1"
default-features = false
features = ["no-std"]

================================================
File: contracts/ckb-bitcoin-spv-type-lock/Makefile
================================================
# We cannot use $(shell pwd), which will return unix path format on Windows,
# making it hard to use.
cur_dir = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

TOP := $(cur_dir)
# RUSTFLAGS that are likely to be tweaked by developers. For example,
# while we enable debug logs by default here, some might want to strip them
# for minimal code size / consumed cycles.
CUSTOM_RUSTFLAGS := --cfg debug_assertions
# RUSTFLAGS that are less likely to be tweaked by developers. Most likely
# one would want to keep the default values here.
FULL_RUSTFLAGS := -C target-feature=+zba,+zbb,+zbc,+zbs $(CUSTOM_RUSTFLAGS)
# Additional cargo args to append here. For example, one can use
# make test CARGO_ARGS="-- --nocapture" so as to inspect data emitted to
# stdout in unit tests
CARGO_ARGS :=
MODE := release
# Tweak this to change the clang version to use for building C code. By default
# we use a bash script with somes heuristics to find clang in current system.
CLANG := $(shell $(TOP)/scripts/find_clang)
# When this is set to some value, the generated binaries will be copied over
BUILD_DIR :=
# Generated binaries to copy. By convention, a Rust crate's directory name will
# likely match the crate name, which is also the name of the final binary.
# However if this is not the case, you can tweak this variable. As the name hints,
# more than one binary is supported here.
BINARIES := $(notdir $(shell pwd))

# Some older crates might not be prepared to be built against clang, we would
# need to override CFLAGS to prepare them.
TARGET_CFLAGS := --target=riscv64 -march=rv64imc_zba_zbb_zbc_zbs \
	-nostdinc -nostdlib \
	-I $(TOP)deps/ckb-c-stdlib/libc -DCKB_DECLARATION_ONLY

ifeq (release,$(MODE))
	MODE_ARGS := --release
endif

default: build test

build:
	RUSTFLAGS="$(FULL_RUSTFLAGS)" TARGET_CC="$(CLANG)" \
		TARGET_CFLAGS="$(TARGET_CFLAGS)" \
		cargo build --target=riscv64imac-unknown-none-elf $(MODE_ARGS) $(CARGO_ARGS)
	@set -eu; \
	if [ "x$(BUILD_DIR)" != "x" ]; then \
		for binary in $(BINARIES); do \
			echo "Copying binary $$binary to build directory"; \
			cp $(TOP)/target/riscv64imac-unknown-none-elf/$(MODE)/$$binary $(TOP)/$(BUILD_DIR); \
		done \
	fi

# test, check, clippy and fmt here are provided for completeness,
# there is nothing wrong invoking cargo directly instead of make.
test:
	cargo test $(CARGO_ARGS)

check:
	cargo check $(CARGO_ARGS)

clippy:
	cargo clippy $(CARGO_ARGS)

fmt:
	cargo fmt $(CARGO_ARGS)

# Arbitrary cargo command is supported here. For example:
#
# make cargo CARGO_CMD=expand CARGO_ARGS="--ugly"
# 
# Invokes:
# cargo expand --ugly
CARGO_CMD :=
cargo:
	cargo $(CARGO_CMD) $(CARGO_ARGS)

clean:
	cargo clean

prepare:
	rustup target add riscv64imac-unknown-none-elf

.PHONY: build test check clippy fmt cargo clean prepare


================================================
File: contracts/ckb-bitcoin-spv-type-lock/.gitignore
================================================
/build
/target


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/entry.rs
================================================
use alloc::vec::Vec;

use ckb_bitcoin_spv_verifier::types::core::BitcoinChainType;
#[cfg(debug_assertions)]
use ckb_std::ckb_types::prelude::*;
use ckb_std::{ckb_constants::Source, debug, high_level as hl};

use crate::{
    error::{InternalError, Result},
    operations, utilities,
};

pub fn main() -> Result<()> {
    debug!("{} Starting ...", module_path!());

    let script_hash = hl::load_script_hash()?;
    debug!("script hash = {:#x}", script_hash.pack());

    let type_args = utilities::load_spv_type_args()?;
    let clients_count = usize::from(type_args.clients_count);
    let cells_count = 1 + clients_count;
    let flags = type_args.flags;

    // Find all input cells which use current script.
    let indexes_of_inputs = {
        let mut indexes = Vec::new();
        for (index, type_hash_opt) in
            hl::QueryIter::new(hl::load_cell_type_hash, Source::Input).enumerate()
        {
            if let Some(type_hash) = type_hash_opt {
                debug!("{index}-th type hash of inputs: {:#x}", type_hash.pack());
                if type_hash == script_hash {
                    debug!("found cell: inputs[{index}]");
                    indexes.push(index);
                }
            }
        }
        indexes
    };

    // Find all output cells which use current script.
    let indexes_of_outputs = {
        let mut indexes = Vec::new();
        for (index, type_hash_opt) in
            hl::QueryIter::new(hl::load_cell_type_hash, Source::Output).enumerate()
        {
            if let Some(type_hash) = type_hash_opt {
                debug!("{index}-th type hash of outputs: {:#x}", type_hash.pack());
                if type_hash == script_hash {
                    debug!("found cell: outputs[{index}]");
                    indexes.push(index);
                }
            }
        }
        indexes
    };

    debug!("cells in  inputs: {indexes_of_inputs:?}");
    debug!("cells in outputs: {indexes_of_outputs:?}");

    match (indexes_of_inputs.len(), indexes_of_outputs.len()) {
        (0, _) => {
            debug!("create all cells");
            operations::create_cells(&indexes_of_outputs, type_args)?;
        }
        (_, 0) => {
            debug!("destroy all cells");
            operations::destroy_cells(&indexes_of_inputs, type_args)?;
        }
        (2, 2) => {
            debug!("update a client cell and the info cell");
            operations::update_client(
                (indexes_of_inputs[0], indexes_of_inputs[1]),
                (indexes_of_outputs[0], indexes_of_outputs[1]),
                script_hash.as_slice(),
                type_args,
            )?;
        }
        (m, n) if m == n && m > 2 && m < cells_count => {
            debug!("reorg client cells");
            operations::reorg_clients(
                &indexes_of_inputs,
                &indexes_of_outputs,
                script_hash.as_slice(),
                type_args,
            )?;
        }
        (m, n)
            if m == n && m > 2 && m == cells_count && BitcoinChainType::Testnet == flags.into() =>
        {
            debug!("reset all cells");
            operations::reset_cells()?;
        }
        (_m, _n) => {
            debug!("unknown operation: {_m} inputs and {_n} outputs");
            return Err(InternalError::UnknownOperation.into());
        }
    }

    debug!("{} DONE.", module_path!());

    Ok(())
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/error.rs
================================================
use core::result;

use ckb_bitcoin_spv_verifier::error::{BootstrapError, UpdateError};
use ckb_std::error::SysError;

pub type Result<T> = result::Result<T, Error>;

#[repr(i8)]
pub enum InternalError {
    // 0x01 ~ 0x0f: Errors from SDK, or other system errors.
    IndexOutOfBound = 0x01,
    ItemMissing,
    LengthNotEnough,
    Encoding,
    Unknown,

    // 0x10 ~ 0x1f: Errors before doing operations.
    UnknownOperation = 0x10,

    // 0x20 ~ 0x2e: Errors when create.
    CreateNotEnoughCells = 0x20,
    CreateShouldBeOrdered,
    CreateCellsCountNotMatched,
    CreateIncorrectUniqueId,
    CreateBadInfoCellData,
    CreateInfoIndexShouldBeZero,
    CreateWitnessIsNotExisted,
    CreateBadClientCellData,
    CreateNewClientIsIncorrect,

    // 0x2f: Errors when destroy.
    DestroyNotEnoughCells = 0x2f,

    // 0x30 ~ 0x3f: Errors when update.
    UpdateInputInfoNotFound = 0x30,
    UpdateInputClientNotFound,
    UpdateInputClientIdIsMismatch,
    UpdateOutputInfoNotFound,
    UpdateOutputClientNotFound,
    UpdateOutputInfoChanged,
    UpdateCellDepMoreThanOne,
    UpdateCellDepNotFound,
    UpdateCellDepClientNotFound,
    UpdateCellDepClientIdIsMismatch,
    UpdateWitnessIsNotExisted,

    // 0x40 ~ 0x5f: Errors when reorg.
    ReorgNotBetterChain = 0x40,
    ReorgInputMalformed,
    ReorgInputInfoNotFound,
    ReorgInputClientNotEnough,
    ReorgInputInfoDuplicated,
    ReorgInputTipClientNotFound,
    ReorgInputTipClientLoadFailed,
    ReorgInputClientIdsIsMismatch,
    ReorgOutputMalformed,
    ReorgOutputInfoNotFound,
    ReorgOutputInfoDuplicated,
    ReorgOutputTipClientNotFound,
    ReorgOutputClientIdsIsMismatch,
    ReorgNewClientIsIncorrect,
    ReorgCellDepMoreThanOne,
    ReorgCellDepNotFound,
    ReorgCellDepClientNotFound,
    ReorgCellDepClientIdIsMismatch,

    // This is not an error, just make sure the error code is less than 32.
    Unreachable = 0x60,
}

pub enum Error {
    // 0x01 ~ 0x5f: Errors that not from external crates.
    Internal(InternalError),
    // 0x60 ~ 0x7f: Errors when bootstrap or apply the update.
    //
    // Different steps may have same error codes.
    Bootstrap(BootstrapError),
    Update(UpdateError),
}

impl From<SysError> for InternalError {
    fn from(err: SysError) -> Self {
        match err {
            SysError::IndexOutOfBound => Self::IndexOutOfBound,
            SysError::ItemMissing => Self::ItemMissing,
            SysError::LengthNotEnough(_) => Self::LengthNotEnough,
            SysError::Encoding => Self::Encoding,
            SysError::Unknown(_) => Self::Unknown,
        }
    }
}

impl From<SysError> for Error {
    fn from(err: SysError) -> Self {
        Into::<InternalError>::into(err).into()
    }
}

impl From<InternalError> for Error {
    fn from(err: InternalError) -> Self {
        Self::Internal(err)
    }
}

impl From<BootstrapError> for Error {
    fn from(err: BootstrapError) -> Self {
        Self::Bootstrap(err)
    }
}

impl From<UpdateError> for Error {
    fn from(err: UpdateError) -> Self {
        Self::Update(err)
    }
}

impl From<Error> for i8 {
    fn from(err: Error) -> Self {
        match err {
            Error::Internal(e) => e as i8,
            Error::Bootstrap(e) => 0x60 + e as i8,
            Error::Update(e) => 0x60 + e as i8,
        }
    }
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/main.rs
================================================
#![no_std]
#![cfg_attr(not(test), no_main)]

#[cfg(test)]
extern crate alloc;

#[cfg(not(test))]
use ckb_std::default_alloc;
#[cfg(not(test))]
ckb_std::entry!(program_entry);
#[cfg(not(test))]
default_alloc!();

mod entry;
mod error;
mod operations;
mod utilities;

pub fn program_entry() -> i8 {
    match entry::main() {
        Ok(_) => 0,
        Err(err) => err.into(),
    }
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/operations/create.rs
================================================
use ckb_bitcoin_spv_verifier::types::{
    core::SpvTypeArgs,
    packed::{SpvBootstrapReader, SpvClientReader, SpvInfoReader},
    prelude::*,
};
use ckb_std::{ckb_constants::Source, debug, error::SysError, high_level as hl};

use crate::{
    error::{InternalError, Result},
    utilities,
};

pub(crate) fn create_cells(indexes: &[usize], type_args: SpvTypeArgs) -> Result<()> {
    if indexes.len() < 1 + 1 + 2 {
        return Err(InternalError::CreateNotEnoughCells.into());
    }
    if indexes.windows(2).any(|pair| pair[0] + 1 != pair[1]) {
        return Err(InternalError::CreateShouldBeOrdered.into());
    }
    // Checks args of the client type script, then returns the clients count;
    let clients_count = {
        let clients_count = usize::from(type_args.clients_count);
        let cells_count = 1 + clients_count;
        if indexes.len() != cells_count {
            return Err(InternalError::CreateCellsCountNotMatched.into());
        }
        let type_id = utilities::load_then_calculate_type_id(indexes.len())?;
        if type_id != type_args.type_id.as_ref() {
            return Err(InternalError::CreateIncorrectUniqueId.into());
        }
        clients_count
    };
    // First cell is the client info cell.
    let mut index = indexes[0];
    {
        debug!("check client info cell (index={index})");
        let output_data = hl::load_cell_data(index, Source::Output)?;
        let packed_info = SpvInfoReader::from_slice(&output_data)
            .map_err(|_| InternalError::CreateBadInfoCellData)?;
        debug!("actual client info cell: {packed_info}");
        let info = packed_info.unpack();
        if info.tip_client_id != 0 {
            return Err(InternalError::CreateInfoIndexShouldBeZero.into());
        }
    }
    // Gets the client bootstrap from the witness.
    let bootstrap = {
        let witness_args = hl::load_witness_args(index, Source::Output)?;
        if let Some(args) = witness_args.output_type().to_opt() {
            SpvBootstrapReader::from_slice(&args.raw_data())
                .map_err(|_| SysError::Encoding)?
                .to_entity()
        } else {
            return Err(InternalError::CreateWitnessIsNotExisted.into());
        }
    };
    // Gets the new client from the client bootstrap.
    let mut expected_client = bootstrap.initialize_spv_client()?;
    debug!("expected client cell (id=0): {}", expected_client.pack());
    // Next `clients_count` cells are the client cells;
    index += 1;
    for _id in 0..clients_count {
        debug!("check client cell (index={index}, id={_id})");
        let output_data = hl::load_cell_data(index, Source::Output)?;
        let actual = SpvClientReader::from_slice(&output_data)
            .map_err(|_| InternalError::CreateBadClientCellData)?;
        debug!("actual client cell: {actual}");
        let expected = expected_client.pack();
        if actual.as_slice() != expected.as_slice() {
            return Err(InternalError::CreateNewClientIsIncorrect.into());
        }
        expected_client.id += 1;
        index += 1;
    }

    Ok(())
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/operations/destroy.rs
================================================
use ckb_bitcoin_spv_verifier::types::core::SpvTypeArgs;
use ckb_std::debug;

use crate::error::{InternalError, Result};

pub(crate) fn destroy_cells(indexes: &[usize], type_args: SpvTypeArgs) -> Result<()> {
    debug!("destroyed count: {}", indexes.len());
    let clients_count = type_args.clients_count;
    debug!("clients count: {clients_count}");
    let cells_count = 1 + usize::from(clients_count);
    debug!("cells count: {cells_count}");
    if indexes.len() != cells_count {
        return Err(InternalError::DestroyNotEnoughCells.into());
    }
    Ok(())
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/operations/mod.rs
================================================
mod create;
mod destroy;
mod reorg;
mod reset;
mod update;

pub(crate) use self::create::create_cells;
pub(crate) use self::destroy::destroy_cells;
pub(crate) use self::reorg::reorg_clients;
pub(crate) use self::reset::reset_cells;
pub(crate) use self::update::update_client;


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/operations/reorg.rs
================================================
use alloc::vec::Vec;

use ckb_bitcoin_spv_verifier::types::{
    core::{BitcoinChainType, SpvClient, SpvInfo, SpvTypeArgs, U256},
    packed::{self, SpvClientReader, SpvInfoReader, SpvUpdateReader},
    prelude::*,
};
#[cfg(debug_assertions)]
use ckb_std::ckb_types::prelude::Pack as StdPack;
use ckb_std::{ckb_constants::Source, debug, error::SysError, high_level as hl};

use crate::{
    error::{InternalError, Result},
    utilities,
};

pub(crate) fn reorg_clients(
    inputs: &[usize],
    outputs: &[usize],
    script_hash: &[u8],
    type_args: SpvTypeArgs,
) -> Result<()> {
    // Checks the ids of the input client cells, then returns
    // - expected output info cell base on the input info cell,
    // - the new tip client id.
    // - the expected client ids, which will be the new tip client id and the ids of all the cleared clients.
    // - the previous chain work of the old tip client.
    // - the id of the last client, whose blocks are all in main chain.
    // - the flags in SPV script args
    let (
        expected_info,
        expected_tip_client_id,
        expected_client_ids,
        previous_chain_work,
        fork_client_id,
        flags,
    ) = {
        let (
            mut input_info,
            expected_tip_client_id,
            expected_client_ids,
            previous_chain_work,
            fork_client_id,
            flags,
        ) = load_inputs(inputs, type_args)?;
        input_info.tip_client_id = expected_tip_client_id;
        (
            input_info,
            expected_tip_client_id,
            expected_client_ids,
            previous_chain_work,
            fork_client_id,
            flags,
        )
    };
    // Checks the output info cell and the output client cells;
    // then returns new tip client and the index of the info cell.
    let (output_client, output_info_index) =
        load_outputs(outputs, &expected_info, expected_client_ids)?;
    {
        // Due to the block storm issue on testnet 3, a large number of blocks may be rolled back
        // during a reorg, making it necessary to limit the update height.
        // If there is a limit on the number of headers to update,
        // the current chain work might not be sufficient but still remain on the main chain.
        // Therefore, in this case, we no longer check the chain work.
        // This handling is specific to testnet 3 to address the frequent block storm reorgs.
        if BitcoinChainType::Testnet != flags.into() {
            let new_chain_work: U256 = output_client
                .headers_mmr_root()
                .partial_chain_work()
                .unpack();
            if previous_chain_work >= new_chain_work {
                return Err(InternalError::ReorgNotBetterChain.into());
            }
        }
    }
    // Finds the only one index of cell deps which use current script.
    // That cell should be the client which at the fork point.
    let cell_dep_index = find_cell_dep(script_hash)?;
    // Checks the id of the cell-dep client cell, then returns
    // the expected input client cell base on the cell-dep client cell,
    let expected_input_client = {
        let mut cell_dep_client = load_cell_dep(cell_dep_index, fork_client_id)?;
        cell_dep_client.id = expected_tip_client_id;
        cell_dep_client.pack()
    };
    // Gets the update from the witness.
    let update = {
        let witness_args = hl::load_witness_args(output_info_index, Source::Output)?;
        if let Some(args) = witness_args.output_type().to_opt() {
            SpvUpdateReader::from_slice(&args.raw_data())
                .map_err(|_| SysError::Encoding)?
                .to_entity()
        } else {
            return Err(InternalError::UpdateWitnessIsNotExisted.into());
        }
    };

    expected_input_client.verify_new_client(&output_client, update, flags)?;

    Ok(())
}

fn load_inputs(
    inputs: &[usize],
    type_args: SpvTypeArgs,
) -> Result<(SpvInfo, u8, Vec<u8>, U256, u8, u8)> {
    let mut client_ids_with_indexes = Vec::new();
    let mut input_info_opt = None;
    for i in inputs {
        debug!("load cell data of inputs[{i}]");
        let input_data = hl::load_cell_data(*i, Source::Input)?;
        if let Ok(packed_input_info) = SpvInfoReader::from_slice(&input_data) {
            debug!("input info = {packed_input_info} (index={i})");
            if input_info_opt.is_some() {
                return Err(InternalError::ReorgInputInfoDuplicated.into());
            }
            let input_info: SpvInfo = packed_input_info.unpack();
            input_info_opt = Some(input_info);
        } else if let Ok(packed_input_client) = SpvClientReader::from_slice(&input_data) {
            debug!("input client = {packed_input_client} (index={i})");
            let input_client_id: u8 = packed_input_client.id().into();
            debug!("input client id = {input_client_id}");
            client_ids_with_indexes.push((*i, input_client_id));
        } else {
            return Err(InternalError::ReorgInputMalformed.into());
        }
    }

    if input_info_opt.is_none() {
        return Err(InternalError::ReorgInputInfoNotFound.into());
    }
    let input_info = input_info_opt.unwrap();
    let tip_client_id = input_info.tip_client_id;
    debug!("tip client id = {tip_client_id}");

    if client_ids_with_indexes.len() < 2 {
        return Err(InternalError::ReorgInputClientNotEnough.into());
    }
    debug!(
        "input client ids with indexes = {:?}",
        client_ids_with_indexes
    );

    let tip_client_index = client_ids_with_indexes
        .iter()
        .find(|(_, id)| *id == tip_client_id)
        .map(|(index, _)| *index)
        .ok_or(InternalError::ReorgInputTipClientNotFound)?;
    debug!("tip client index = {tip_client_index}");
    let tip_chain_work: U256 = {
        let input_data = hl::load_cell_data(tip_client_index, Source::Input)?;
        if let Ok(packed_input_client) = SpvClientReader::from_slice(&input_data) {
            debug!("tip client = {packed_input_client} (index={tip_client_index})");
            packed_input_client
                .headers_mmr_root()
                .partial_chain_work()
                .unpack()
        } else {
            return Err(InternalError::ReorgInputTipClientLoadFailed.into());
        }
    };

    let (clients_count, flags) = (type_args.clients_count, type_args.flags);
    debug!("clients count: {clients_count}, flags: {flags:08b}");

    let mut client_ids = client_ids_with_indexes
        .into_iter()
        .map(|(_, id)| id)
        .collect::<Vec<_>>();
    client_ids.sort();
    debug!("input client ids = {:?}", client_ids);

    let (expected_client_id, expected_client_ids, fork_client_id) = {
        let mut tmp_ids = Vec::new();
        let mut tmp_id = tip_client_id;
        let mut tmp_new_id = 0;
        for _ in 0..client_ids.len() {
            tmp_ids.push(tmp_id);
            tmp_new_id = tmp_id;
            tmp_id = utilities::prev_client_id(tmp_id, clients_count);
        }
        tmp_ids.sort();
        (tmp_new_id, tmp_ids, tmp_id)
    };

    debug!("expected client id = {expected_client_id}");
    debug!("expected client ids = {:?}", expected_client_ids);

    if client_ids != expected_client_ids {
        return Err(InternalError::ReorgInputClientIdsIsMismatch.into());
    }

    Ok((
        input_info,
        expected_client_id,
        expected_client_ids,
        tip_chain_work,
        fork_client_id,
        flags,
    ))
}

fn load_outputs(
    outputs: &[usize],
    expected_info: &SpvInfo,
    expected_client_ids: Vec<u8>,
) -> Result<(packed::SpvClient, usize)> {
    let mut client_ids = Vec::new();
    let mut output_info_opt = None;
    let mut tip_client_opt = None;
    let mut expected_client_opt: Option<SpvClient> = None;
    let mut info_index = 0;
    for i in outputs {
        debug!("load cell data of outputs[{i}]");
        let output_data = hl::load_cell_data(*i, Source::Output)?;
        if let Ok(packed_output_client) = SpvClientReader::from_slice(&output_data) {
            debug!("output client = {packed_output_client} (index={i})");
            let output_client_id: u8 = packed_output_client.id().into();
            debug!("output client id = {output_client_id}");
            // All output clients should have same data, expect their own IDs.
            if let Some(ref mut expected_client) = expected_client_opt {
                expected_client.id = output_client_id;
                debug!("actual client cell: {packed_output_client} (first)");
                let expected = expected_client.pack();
                if packed_output_client.as_slice() != expected.as_slice() {
                    return Err(InternalError::ReorgNewClientIsIncorrect.into());
                }
            } else {
                debug!("actual client cell: {packed_output_client}");
                expected_client_opt = Some(packed_output_client.unpack());
            }
            client_ids.push(output_client_id);
            // The new tip SPV client.
            if output_client_id == expected_info.tip_client_id {
                tip_client_opt = Some(packed_output_client.to_entity());
            }
        } else if let Ok(packed_output_info) = SpvInfoReader::from_slice(&output_data) {
            debug!("output info = {packed_output_info} (index={i})");
            info_index = *i;
            if output_info_opt.is_some() {
                return Err(InternalError::ReorgOutputInfoDuplicated.into());
            }
            let packed_expected_info = expected_info.pack();
            debug!("expected info = {packed_expected_info}");
            if packed_output_info.as_slice() != packed_expected_info.as_slice() {
                return Err(InternalError::UpdateOutputInfoChanged.into());
            }
            let output_info: SpvInfo = packed_output_info.unpack();
            output_info_opt = Some(output_info);
        } else {
            return Err(InternalError::ReorgOutputMalformed.into());
        }
    }

    if output_info_opt.is_none() {
        return Err(InternalError::ReorgOutputInfoNotFound.into());
    }
    if tip_client_opt.is_none() {
        return Err(InternalError::ReorgOutputTipClientNotFound.into());
    }
    let tip_client = tip_client_opt.unwrap();
    debug!("output tip client = {tip_client}");

    client_ids.sort();
    debug!("output client ids = {:?}", client_ids);

    if client_ids != expected_client_ids {
        return Err(InternalError::ReorgOutputClientIdsIsMismatch.into());
    }

    Ok((tip_client, info_index))
}

fn find_cell_dep(script_hash: &[u8]) -> Result<usize> {
    let mut indexes = Vec::new();
    for (index, type_hash_opt) in
        hl::QueryIter::new(hl::load_cell_type_hash, Source::CellDep).enumerate()
    {
        if let Some(type_hash) = type_hash_opt {
            debug!(
                "{index}-th type hash of cell-deps: {:#x}",
                StdPack::pack(&type_hash)
            );
            if type_hash == script_hash {
                if indexes.is_empty() {
                    indexes.push(index);
                } else {
                    return Err(InternalError::ReorgCellDepMoreThanOne.into());
                }
            }
        }
    }
    if indexes.is_empty() {
        return Err(InternalError::ReorgCellDepNotFound.into());
    }
    Ok(indexes[0])
}

fn load_cell_dep(cell_dep_index: usize, fork_client_id: u8) -> Result<SpvClient> {
    debug!("load cell data of cell deps[{cell_dep_index}]");
    let cell_dep_data = hl::load_cell_data(cell_dep_index, Source::CellDep)?;

    let packed_cell_dep_client =
        if let Ok(cell_dep_client) = SpvClientReader::from_slice(&cell_dep_data) {
            debug!("cell-dep client = {cell_dep_client} (index={cell_dep_index})");
            cell_dep_client
        } else {
            return Err(InternalError::ReorgCellDepClientNotFound.into());
        };

    let cell_dep_client: SpvClient = packed_cell_dep_client.unpack();
    debug!("cell-dep client id = {}", cell_dep_client.id);
    if cell_dep_client.id != fork_client_id {
        return Err(InternalError::ReorgCellDepClientIdIsMismatch.into());
    }
    Ok(cell_dep_client)
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/operations/reset.rs
================================================
use crate::error::Result;

pub(crate) fn reset_cells() -> Result<()> {
    Ok(())
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/operations/update.rs
================================================
use alloc::vec::Vec;

use ckb_bitcoin_spv_verifier::types::{
    core::{SpvClient, SpvInfo, SpvTypeArgs},
    packed::{self, SpvClientReader, SpvInfoReader, SpvUpdateReader},
    prelude::*,
};
#[cfg(debug_assertions)]
use ckb_std::ckb_types::prelude::Pack as StdPack;
use ckb_std::{ckb_constants::Source, debug, error::SysError, high_level as hl};

use crate::{
    error::{InternalError, Result},
    utilities,
};

pub(crate) fn update_client(
    inputs: (usize, usize),
    outputs: (usize, usize),
    script_hash: &[u8],
    type_args: SpvTypeArgs,
) -> Result<()> {
    // Checks the id of the input client cell, then returns
    // - expected output info cell base on the input info cell,
    // - the tip client id.
    // - the expected client id, which will be the next tip client id.
    let (expected_info, tip_client_id, expected_client_id, flags) = {
        let (mut input_info, tip_client_id, expected_client_id, flags) =
            load_inputs(inputs, type_args)?;
        input_info.tip_client_id = expected_client_id;
        (input_info, tip_client_id, expected_client_id, flags)
    };
    // Checks the output info cell, then returns the client cell and the index of the info cell.
    let (output_client, output_info_index) = load_outputs(outputs, &expected_info)?;
    // Finds the only one index of cell deps which use current script.
    // That cell should be the current tip client.
    let cell_dep_index = find_cell_dep(script_hash)?;
    // Checks the id of the cell-dep client cell, then returns
    // the expected input client cell base on the cell-dep client cell,
    let expected_input_client = {
        let mut cell_dep_client = load_cell_dep(cell_dep_index, tip_client_id)?;
        cell_dep_client.id = expected_client_id;
        cell_dep_client.pack()
    };
    // Gets the update from the witness.
    let update = {
        let witness_args = hl::load_witness_args(output_info_index, Source::Output)?;
        if let Some(args) = witness_args.output_type().to_opt() {
            SpvUpdateReader::from_slice(&args.raw_data())
                .map_err(|_| SysError::Encoding)?
                .to_entity()
        } else {
            return Err(InternalError::UpdateWitnessIsNotExisted.into());
        }
    };

    expected_input_client.verify_new_client(&output_client, update, flags)?;

    Ok(())
}

fn load_inputs(inputs: (usize, usize), type_args: SpvTypeArgs) -> Result<(SpvInfo, u8, u8, u8)> {
    debug!("load cell data of inputs[{}]", inputs.0);
    let input_data_0 = hl::load_cell_data(inputs.0, Source::Input)?;
    debug!("load cell data of inputs[{}]", inputs.1);
    let input_data_1 = hl::load_cell_data(inputs.1, Source::Input)?;

    let (packed_input_info, packed_input_client) =
        if let Ok(input_info) = SpvInfoReader::from_slice(&input_data_0) {
            debug!("input info = {input_info} (index={})", inputs.0);
            if let Ok(input_client) = SpvClientReader::from_slice(&input_data_1) {
                debug!("input client = {input_client} (index={})", inputs.1);
                (input_info, input_client)
            } else {
                return Err(InternalError::UpdateInputClientNotFound.into());
            }
        } else if let Ok(input_info) = SpvInfoReader::from_slice(&input_data_1) {
            debug!("input info = {input_info} (index={})", inputs.1);
            if let Ok(input_client) = SpvClientReader::from_slice(&input_data_0) {
                debug!("input client = {input_client} (index={})", inputs.0);
                (input_info, input_client)
            } else {
                return Err(InternalError::UpdateInputClientNotFound.into());
            }
        } else {
            return Err(InternalError::UpdateInputInfoNotFound.into());
        };

    let input_info: SpvInfo = packed_input_info.unpack();
    let tip_client_id = input_info.tip_client_id;
    debug!("tip client id = {tip_client_id}");
    let input_client_id: u8 = packed_input_client.id().into();
    debug!("input client id = {input_client_id}");

    let (clients_count, flags) = (type_args.clients_count, type_args.flags);
    debug!("clients count: {clients_count}, flags: {flags:08b}");

    let expected_client_id = utilities::next_client_id(input_info.tip_client_id, clients_count);
    debug!("expected client id = {expected_client_id}");
    if input_client_id != expected_client_id {
        return Err(InternalError::UpdateInputClientIdIsMismatch.into());
    }

    Ok((input_info, tip_client_id, expected_client_id, flags))
}

fn load_outputs(
    outputs: (usize, usize),
    expected_info: &SpvInfo,
) -> Result<(packed::SpvClient, usize)> {
    debug!("load cell data of outputs[{}]", outputs.0);
    let output_data_0 = hl::load_cell_data(outputs.0, Source::Output)?;
    debug!("load cell data of outputs[{}]", outputs.1);
    let output_data_1 = hl::load_cell_data(outputs.1, Source::Output)?;

    let (packed_output_info, packed_output_client, output_info_index) =
        if let Ok(output_info) = SpvInfoReader::from_slice(&output_data_0) {
            debug!("output info = {output_info} (index={})", outputs.0);
            if let Ok(output_client) = SpvClientReader::from_slice(&output_data_1) {
                debug!("output client = {output_client} (index={})", outputs.1);
                (output_info, output_client, outputs.0)
            } else {
                return Err(InternalError::UpdateOutputClientNotFound.into());
            }
        } else if let Ok(output_info) = SpvInfoReader::from_slice(&output_data_1) {
            debug!("output info = {output_info} (index={})", outputs.1);
            if let Ok(output_client) = SpvClientReader::from_slice(&output_data_0) {
                debug!("output client = {output_client} (index={})", outputs.0);
                (output_info, output_client, outputs.1)
            } else {
                return Err(InternalError::UpdateOutputClientNotFound.into());
            }
        } else {
            return Err(InternalError::UpdateOutputInfoNotFound.into());
        };

    let packed_expected_info = expected_info.pack();
    debug!("expected info = {packed_expected_info}");
    if packed_output_info.as_slice() != packed_expected_info.as_slice() {
        return Err(InternalError::UpdateOutputInfoChanged.into());
    }

    Ok((packed_output_client.to_entity(), output_info_index))
}

fn find_cell_dep(script_hash: &[u8]) -> Result<usize> {
    let mut indexes = Vec::new();
    for (index, type_hash_opt) in
        hl::QueryIter::new(hl::load_cell_type_hash, Source::CellDep).enumerate()
    {
        if let Some(type_hash) = type_hash_opt {
            debug!(
                "{index}-th type hash of cell-deps: {:#x}",
                StdPack::pack(&type_hash)
            );
            if type_hash == script_hash {
                if indexes.is_empty() {
                    indexes.push(index);
                } else {
                    return Err(InternalError::UpdateCellDepMoreThanOne.into());
                }
            }
        }
    }
    if indexes.is_empty() {
        return Err(InternalError::UpdateCellDepNotFound.into());
    }
    Ok(indexes[0])
}

fn load_cell_dep(cell_dep_index: usize, tip_client_id: u8) -> Result<SpvClient> {
    debug!("load cell data of cell deps[{cell_dep_index}]");
    let cell_dep_data = hl::load_cell_data(cell_dep_index, Source::CellDep)?;

    let packed_cell_dep_client =
        if let Ok(cell_dep_client) = SpvClientReader::from_slice(&cell_dep_data) {
            debug!("cell-dep client = {cell_dep_client} (index={cell_dep_index})");
            cell_dep_client
        } else {
            return Err(InternalError::UpdateCellDepClientNotFound.into());
        };

    let cell_dep_client: SpvClient = packed_cell_dep_client.unpack();
    debug!("cell-dep client id = {}", cell_dep_client.id);
    if cell_dep_client.id != tip_client_id {
        return Err(InternalError::UpdateCellDepClientIdIsMismatch.into());
    }
    Ok(cell_dep_client)
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/utilities/mod.rs
================================================
mod type_id;

use ckb_bitcoin_spv_verifier::types::{core::SpvTypeArgs, packed::SpvTypeArgsReader, prelude::*};
use ckb_std::{error::SysError, high_level as hl};

use crate::error::Result;

pub(crate) use self::type_id::load_then_calculate_type_id;

pub(crate) fn prev_client_id(current: u8, count: u8) -> u8 {
    if current == 0 {
        count - 1
    } else {
        current - 1
    }
}

pub(crate) fn next_client_id(current: u8, count: u8) -> u8 {
    if current + 1 < count {
        current + 1
    } else {
        0
    }
}

pub(crate) fn load_spv_type_args() -> Result<SpvTypeArgs> {
    let script = hl::load_script()?;
    let script_args = script.args();
    let script_args_slice = script_args.as_reader().raw_data();
    let args = SpvTypeArgsReader::from_slice(script_args_slice)
        .map_err(|_| SysError::Encoding)?
        .unpack();
    Ok(args)
}


================================================
File: contracts/ckb-bitcoin-spv-type-lock/src/utilities/type_id.rs
================================================
use ckb_bitcoin_spv_verifier::types::prelude::*;
use ckb_hash::{new_blake2b, BLAKE2B_LEN};
use ckb_std::{ckb_constants::Source, high_level as hl};

use crate::error::Result;

pub(crate) fn load_then_calculate_type_id(outputs_count: usize) -> Result<[u8; BLAKE2B_LEN]> {
    let input = hl::load_input(0, Source::Input)?;
    let mut blake2b = new_blake2b();
    blake2b.update(input.as_slice());
    blake2b.update(&(outputs_count as u64).to_le_bytes());
    let mut ret = [0; BLAKE2B_LEN];
    blake2b.finalize(&mut ret);
    Ok(ret)
}


================================================
File: deps/ckb-c-stdlib/README.md
================================================
# ckb-c-stdlib

[![Build Status](https://travis-ci.com/nervosnetwork/ckb-c-stdlib.svg?branch=master)](https://travis-ci.com/nervosnetwork/ckb-c-stdlib)

In the development of CKB scripts, we discovered many use-cases and patterns that could be really useful in writing CKB scripts. This repo serves as a commonplace for all those useful scripts. This could include but aren't limit to:

* CKB's data structure definitions
* Utilities for interacting with CKB via syscalls
* A shimmed libc, notice the libc here is tailored for CKB's special needs, implementing everything in POSIX's standard is never a goal. If you do have special requirements, using a more complete libc is always a better choice

Notice while this repo would focus on C code, it is not limited to scripts written in C. A Rust script might use FFI to leverage the C code here, a higher level language can also use certain glues to use the code here.


================================================
File: deps/ckb-c-stdlib/LICENSE
================================================
MIT License

Copyright (c) 2019 Nervos Network

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: deps/ckb-c-stdlib/Makefile
================================================
CC := riscv64-unknown-elf-gcc
AR := riscv64-unknown-elf-ar
LIB := libdummylibc.a
CFLAGS := -Wall -Werror -Wextra -Wno-unused-parameter -Wno-dangling-pointer -Wno-nonnull -Wno-nonnull-compare -fno-builtin-printf -fno-builtin-memcmp -O3 -g -fdata-sections -ffunction-sections

default: fmt

fmt:
	clang-format -i -style=Google $(wildcard *.h */*.h *.c */*.c libc/*.h libc/src/*.c)
	git diff --exit-code

$(LIB): impl.o
	$(AR) rcs $@ $^

impl.o: libc/src/impl.c
	$(CC) $(CFLAGS) -c $< -o $@ -I libc -D__SHARED_LIBRARY__

clean:
	rm -rf $(LIB) impl.o

.PHONY: clean default fmt


================================================
File: deps/ckb-c-stdlib/blake2b.h
================================================
/*
   BLAKE2 reference source code package - reference C implementations

   Copyright 2012, Samuel Neves <sneves@dei.uc.pt>.  You may use this under the
   terms of the CC0, the OpenSSL Licence, or the Apache Public License 2.0, at
   your option.  The terms of these licenses can be found at:

   - CC0 1.0 Universal : http://creativecommons.org/publicdomain/zero/1.0
   - OpenSSL license   : https://www.openssl.org/source/license.html
   - Apache 2.0        : http://www.apache.org/licenses/LICENSE-2.0

   More information about the BLAKE2 hash function can be found at
   https://blake2.net.
*/

// blake2.h
#ifndef BLAKE2_H
#define BLAKE2_H

#include <stddef.h>
#include <stdint.h>

#if defined(_MSC_VER)
#define BLAKE2_PACKED(x) __pragma(pack(push, 1)) x __pragma(pack(pop))
#else
#define BLAKE2_PACKED(x) x __attribute__((packed))
#endif

#if defined(__cplusplus)
extern "C" {
#endif

enum blake2b_constant {
  BLAKE2B_BLOCKBYTES = 128,
  BLAKE2B_OUTBYTES = 64,
  BLAKE2B_KEYBYTES = 64,
  BLAKE2B_SALTBYTES = 16,
  BLAKE2B_PERSONALBYTES = 16
};

typedef struct blake2b_state__ {
  uint64_t h[8];
  uint64_t t[2];
  uint64_t f[2];
  uint8_t buf[BLAKE2B_BLOCKBYTES];
  size_t buflen;
  size_t outlen;
  uint8_t last_node;
} blake2b_state;

BLAKE2_PACKED(struct blake2b_param__ {
  uint8_t digest_length;                   /* 1 */
  uint8_t key_length;                      /* 2 */
  uint8_t fanout;                          /* 3 */
  uint8_t depth;                           /* 4 */
  uint32_t leaf_length;                    /* 8 */
  uint32_t node_offset;                    /* 12 */
  uint32_t xof_length;                     /* 16 */
  uint8_t node_depth;                      /* 17 */
  uint8_t inner_length;                    /* 18 */
  uint8_t reserved[14];                    /* 32 */
  uint8_t salt[BLAKE2B_SALTBYTES];         /* 48 */
  uint8_t personal[BLAKE2B_PERSONALBYTES]; /* 64 */
});

typedef struct blake2b_param__ blake2b_param;

/* Padded structs result in a compile-time error */
enum { BLAKE2_DUMMY_2 = 1 / (sizeof(blake2b_param) == BLAKE2B_OUTBYTES) };

/* Streaming API */

/* For future code, you should always use ckb_blake2b_init for convenience */
int ckb_blake2b_init(blake2b_state *S, size_t outlen);
int blake2b_init(blake2b_state *S, size_t outlen);
int blake2b_init_key(blake2b_state *S, size_t outlen, const void *key,
                     size_t keylen);
int blake2b_init_param(blake2b_state *S, const blake2b_param *P);
int blake2b_update(blake2b_state *S, const void *in, size_t inlen);
int blake2b_final(blake2b_state *S, void *out, size_t outlen);

/* Simple API */
int blake2b(void *out, size_t outlen, const void *in, size_t inlen,
            const void *key, size_t keylen);

/* This is simply an alias for blake2b */
int blake2(void *out, size_t outlen, const void *in, size_t inlen,
           const void *key, size_t keylen);

#if defined(__cplusplus)
}
#endif

#endif

// blake2-impl.h
#ifndef BLAKE2_IMPL_H
#define BLAKE2_IMPL_H

#include <stdint.h>
#include <string.h>

#if !defined(__cplusplus) && \
    (!defined(__STDC_VERSION__) || __STDC_VERSION__ < 199901L)
#if defined(_MSC_VER)
#define BLAKE2_INLINE __inline
#elif defined(__GNUC__)
#define BLAKE2_INLINE __inline__
#else
#define BLAKE2_INLINE
#endif
#else
#define BLAKE2_INLINE inline
#endif

static BLAKE2_INLINE uint64_t load64(const void *src) {
#if defined(NATIVE_LITTLE_ENDIAN)
  uint64_t w;
  memcpy(&w, src, sizeof w);
  return w;
#else
  const uint8_t *p = (const uint8_t *)src;
  return ((uint64_t)(p[0]) << 0) | ((uint64_t)(p[1]) << 8) |
         ((uint64_t)(p[2]) << 16) | ((uint64_t)(p[3]) << 24) |
         ((uint64_t)(p[4]) << 32) | ((uint64_t)(p[5]) << 40) |
         ((uint64_t)(p[6]) << 48) | ((uint64_t)(p[7]) << 56);
#endif
}

static BLAKE2_INLINE void store32(void *dst, uint32_t w) {
#if defined(NATIVE_LITTLE_ENDIAN)
  memcpy(dst, &w, sizeof w);
#else
  uint8_t *p = (uint8_t *)dst;
  p[0] = (uint8_t)(w >> 0);
  p[1] = (uint8_t)(w >> 8);
  p[2] = (uint8_t)(w >> 16);
  p[3] = (uint8_t)(w >> 24);
#endif
}

static BLAKE2_INLINE void store64(void *dst, uint64_t w) {
#if defined(NATIVE_LITTLE_ENDIAN)
  memcpy(dst, &w, sizeof w);
#else
  uint8_t *p = (uint8_t *)dst;
  p[0] = (uint8_t)(w >> 0);
  p[1] = (uint8_t)(w >> 8);
  p[2] = (uint8_t)(w >> 16);
  p[3] = (uint8_t)(w >> 24);
  p[4] = (uint8_t)(w >> 32);
  p[5] = (uint8_t)(w >> 40);
  p[6] = (uint8_t)(w >> 48);
  p[7] = (uint8_t)(w >> 56);
#endif
}

static BLAKE2_INLINE uint64_t rotr64(const uint64_t w, const unsigned c) {
  return (w >> c) | (w << (64 - c));
}

/* prevents compiler optimizing out memset() */
static BLAKE2_INLINE void secure_zero_memory(void *v, size_t n) {
  static void *(*const volatile memset_v)(void *, int, size_t) = &memset;
  memset_v(v, 0, n);
}

const char *DEFAULT_PERSONAL = "ckb-default-hash";
int ckb_blake2b_init(blake2b_state *S, size_t outlen) {
  blake2b_param P[1];

  if ((!outlen) || (outlen > BLAKE2B_OUTBYTES)) return -1;

  P->digest_length = (uint8_t)outlen;
  P->key_length = 0;
  P->fanout = 1;
  P->depth = 1;
  store32(&P->leaf_length, 0);
  store32(&P->node_offset, 0);
  store32(&P->xof_length, 0);
  P->node_depth = 0;
  P->inner_length = 0;
  memset(P->reserved, 0, sizeof(P->reserved));
  memset(P->salt, 0, sizeof(P->salt));
  memset(P->personal, 0, sizeof(P->personal));
  for (int i = 0; i < BLAKE2B_PERSONALBYTES; ++i) {
    (P->personal)[i] = DEFAULT_PERSONAL[i];
  }
  return blake2b_init_param(S, P);
}

#endif

// blake2b-ref.c
#ifndef BLAKE2_REF_C
#define BLAKE2_REF_C

#include <stdint.h>
#include <stdio.h>
#include <string.h>

static const uint64_t blake2b_IV[8] = {
    0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
    0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
    0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL};

static const uint8_t blake2b_sigma[12][16] = {
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
    {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3},
    {11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4},
    {7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8},
    {9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13},
    {2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9},
    {12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11},
    {13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10},
    {6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5},
    {10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0},
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
    {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3}};

static void blake2b_set_lastnode(blake2b_state *S) { S->f[1] = (uint64_t)-1; }

/* Some helper functions, not necessarily useful */
static int blake2b_is_lastblock(const blake2b_state *S) { return S->f[0] != 0; }

static void blake2b_set_lastblock(blake2b_state *S) {
  if (S->last_node) blake2b_set_lastnode(S);

  S->f[0] = (uint64_t)-1;
}

static void blake2b_increment_counter(blake2b_state *S, const uint64_t inc) {
  S->t[0] += inc;
  S->t[1] += (S->t[0] < inc);
}

static void blake2b_init0(blake2b_state *S) {
  size_t i;
  memset(S, 0, sizeof(blake2b_state));

  for (i = 0; i < 8; ++i) S->h[i] = blake2b_IV[i];
}

/* init xors IV with input parameter block */
int blake2b_init_param(blake2b_state *S, const blake2b_param *P) {
  const uint8_t *p = (const uint8_t *)(P);
  size_t i;

  blake2b_init0(S);

  /* IV XOR ParamBlock */
  for (i = 0; i < 8; ++i) S->h[i] ^= load64(p + sizeof(S->h[i]) * i);

  S->outlen = P->digest_length;
  return 0;
}

int blake2b_init(blake2b_state *S, size_t outlen) {
  blake2b_param P[1];

  if ((!outlen) || (outlen > BLAKE2B_OUTBYTES)) return -1;

  P->digest_length = (uint8_t)outlen;
  P->key_length = 0;
  P->fanout = 1;
  P->depth = 1;
  store32(&P->leaf_length, 0);
  store32(&P->node_offset, 0);
  store32(&P->xof_length, 0);
  P->node_depth = 0;
  P->inner_length = 0;
  memset(P->reserved, 0, sizeof(P->reserved));
  memset(P->salt, 0, sizeof(P->salt));
  memset(P->personal, 0, sizeof(P->personal));
  for (int i = 0; i < BLAKE2B_PERSONALBYTES; ++i) {
    (P->personal)[i] = DEFAULT_PERSONAL[i];
  }
  return blake2b_init_param(S, P);
}

int blake2b_init_key(blake2b_state *S, size_t outlen, const void *key,
                     size_t keylen) {
  blake2b_param P[1];

  if ((!outlen) || (outlen > BLAKE2B_OUTBYTES)) return -1;

  if (!key || !keylen || keylen > BLAKE2B_KEYBYTES) return -1;

  P->digest_length = (uint8_t)outlen;
  P->key_length = (uint8_t)keylen;
  P->fanout = 1;
  P->depth = 1;
  store32(&P->leaf_length, 0);
  store32(&P->node_offset, 0);
  store32(&P->xof_length, 0);
  P->node_depth = 0;
  P->inner_length = 0;
  memset(P->reserved, 0, sizeof(P->reserved));
  memset(P->salt, 0, sizeof(P->salt));
  memset(P->personal, 0, sizeof(P->personal));

  if (blake2b_init_param(S, P) < 0) return -1;

  {
    uint8_t block[BLAKE2B_BLOCKBYTES];
    memset(block, 0, BLAKE2B_BLOCKBYTES);
    memcpy(block, key, keylen);
    blake2b_update(S, block, BLAKE2B_BLOCKBYTES);
    secure_zero_memory(block, BLAKE2B_BLOCKBYTES); /* Burn the key from stack */
  }
  return 0;
}

#define G(r, i, a, b, c, d)                     \
  do {                                          \
    a = a + b + m[blake2b_sigma[r][2 * i + 0]]; \
    d = rotr64(d ^ a, 32);                      \
    c = c + d;                                  \
    b = rotr64(b ^ c, 24);                      \
    a = a + b + m[blake2b_sigma[r][2 * i + 1]]; \
    d = rotr64(d ^ a, 16);                      \
    c = c + d;                                  \
    b = rotr64(b ^ c, 63);                      \
  } while (0)

#define ROUND(r)                       \
  do {                                 \
    G(r, 0, v[0], v[4], v[8], v[12]);  \
    G(r, 1, v[1], v[5], v[9], v[13]);  \
    G(r, 2, v[2], v[6], v[10], v[14]); \
    G(r, 3, v[3], v[7], v[11], v[15]); \
    G(r, 4, v[0], v[5], v[10], v[15]); \
    G(r, 5, v[1], v[6], v[11], v[12]); \
    G(r, 6, v[2], v[7], v[8], v[13]);  \
    G(r, 7, v[3], v[4], v[9], v[14]);  \
  } while (0)

static void blake2b_compress(blake2b_state *S,
                             const uint8_t block[BLAKE2B_BLOCKBYTES]) {
  uint64_t m[16];
  uint64_t v[16];
  size_t i;

  for (i = 0; i < 16; ++i) {
    m[i] = load64(block + i * sizeof(m[i]));
  }

  for (i = 0; i < 8; ++i) {
    v[i] = S->h[i];
  }

  v[8] = blake2b_IV[0];
  v[9] = blake2b_IV[1];
  v[10] = blake2b_IV[2];
  v[11] = blake2b_IV[3];
  v[12] = blake2b_IV[4] ^ S->t[0];
  v[13] = blake2b_IV[5] ^ S->t[1];
  v[14] = blake2b_IV[6] ^ S->f[0];
  v[15] = blake2b_IV[7] ^ S->f[1];

  ROUND(0);
  ROUND(1);
  ROUND(2);
  ROUND(3);
  ROUND(4);
  ROUND(5);
  ROUND(6);
  ROUND(7);
  ROUND(8);
  ROUND(9);
  ROUND(10);
  ROUND(11);

  for (i = 0; i < 8; ++i) {
    S->h[i] = S->h[i] ^ v[i] ^ v[i + 8];
  }
}

#undef G
#undef ROUND

int blake2b_update(blake2b_state *S, const void *pin, size_t inlen) {
  const unsigned char *in = (const unsigned char *)pin;
  if (inlen > 0) {
    size_t left = S->buflen;
    size_t fill = BLAKE2B_BLOCKBYTES - left;
    if (inlen > fill) {
      S->buflen = 0;
      memcpy(S->buf + left, in, fill); /* Fill buffer */
      blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
      blake2b_compress(S, S->buf); /* Compress */
      in += fill;
      inlen -= fill;
      while (inlen > BLAKE2B_BLOCKBYTES) {
        blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
        blake2b_compress(S, in);
        in += BLAKE2B_BLOCKBYTES;
        inlen -= BLAKE2B_BLOCKBYTES;
      }
    }
    memcpy(S->buf + S->buflen, in, inlen);
    S->buflen += inlen;
  }
  return 0;
}

int blake2b_final(blake2b_state *S, void *out, size_t outlen) {
  uint8_t buffer[BLAKE2B_OUTBYTES] = {0};
  size_t i;

  if (out == NULL || outlen < S->outlen) return -1;

  if (blake2b_is_lastblock(S)) return -1;

  blake2b_increment_counter(S, S->buflen);
  blake2b_set_lastblock(S);
  memset(S->buf + S->buflen, 0, BLAKE2B_BLOCKBYTES - S->buflen); /* Padding */
  blake2b_compress(S, S->buf);

  for (i = 0; i < 8; ++i) /* Output full hash to temp buffer */
    store64(buffer + sizeof(S->h[i]) * i, S->h[i]);

  memcpy(out, buffer, S->outlen);
  secure_zero_memory(buffer, sizeof(buffer));
  return 0;
}

/* inlen, at least, should be uint64_t. Others can be size_t. */
int blake2b(void *out, size_t outlen, const void *in, size_t inlen,
            const void *key, size_t keylen) {
  blake2b_state S[1];

  /* Verify parameters */
  if (NULL == in && inlen > 0) return -1;

  if (NULL == out) return -1;

  if (NULL == key && keylen > 0) return -1;

  if (!outlen || outlen > BLAKE2B_OUTBYTES) return -1;

  if (keylen > BLAKE2B_KEYBYTES) return -1;

  if (keylen > 0) {
    if (blake2b_init_key(S, outlen, key, keylen) < 0) return -1;
  } else {
    if (blake2b_init(S, outlen) < 0) return -1;
  }

  blake2b_update(S, (const uint8_t *)in, inlen);
  blake2b_final(S, out, outlen);
  return 0;
}

int blake2(void *out, size_t outlen, const void *in, size_t inlen,
           const void *key, size_t keylen) {
  return blake2b(out, outlen, in, inlen, key, keylen);
}

#if defined(SUPERCOP)
int crypto_hash(unsigned char *out, unsigned char *in,
                unsigned long long inlen) {
  return blake2b(out, BLAKE2B_OUTBYTES, in, inlen, NULL, 0);
}
#endif

#endif


================================================
File: deps/ckb-c-stdlib/blake3.h
================================================
/*
   BLAKE3 source code package - reference C implementations

   Copyright 2012, Samuel Neves <sneves@dei.uc.pt>.  You may use this under the
   terms of the CC0, the OpenSSL Licence, or the Apache Public License 2.0, at
   your option.  The terms of these licenses can be found at:

   - CC0 1.0 Universal : http://creativecommons.org/publicdomain/zero/1.0
   - OpenSSL license   : https://www.openssl.org/source/license.html
   - Apache 2.0        : http://www.apache.org/licenses/LICENSE-2.0

   More information about the BLAKE3 hash function can be found at
   https://blake3.net.
*/

// blake3.h
#ifndef BLAKE3_H
#define BLAKE3_H

#include <assert.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

#define BLAKE3_KEY_LEN 32
#define BLAKE3_OUT_LEN 32
#define BLAKE3_BLOCK_LEN 64
#define BLAKE3_CHUNK_LEN 1024
#define BLAKE3_MAX_DEPTH 54
#define BLAKE3_MAX_SIMD_DEGREE 16

// This struct is a private implementation detail. It has to be here because
// it's part of blake3_hasher below.
typedef struct {
  uint32_t cv[8];
  uint64_t chunk_counter;
  uint8_t buf[BLAKE3_BLOCK_LEN];
  uint8_t buf_len;
  uint8_t blocks_compressed;
  uint8_t flags;
} blake3_chunk_state;

typedef struct {
  uint32_t key[8];
  blake3_chunk_state chunk;
  uint8_t cv_stack_len;
  // The stack size is MAX_DEPTH + 1 because we do lazy merging. For example,
  // with 7 chunks, we have 3 entries in the stack. Adding an 8th chunk
  // requires a 4th entry, rather than merging everything down to 1, because we
  // don't know whether more input is coming. This is different from how the
  // reference implementation does things.
  uint8_t cv_stack[(BLAKE3_MAX_DEPTH + 1) * BLAKE3_OUT_LEN];
} blake3_hasher;

/* Streaming API */
void blake3_hasher_init(blake3_hasher *self);
void blake3_hasher_init_keyed(blake3_hasher *self,
                              const uint8_t key[BLAKE3_KEY_LEN]);
void blake3_hasher_init_derive_key(blake3_hasher *self, const char *context);
void blake3_hasher_update(blake3_hasher *self, const void *input,
                          size_t input_len);
void blake3_hasher_finalize(const blake3_hasher *self, uint8_t *out,
                            size_t out_len);
void blake3_hasher_finalize_seek(const blake3_hasher *self, uint64_t seek,
                                 uint8_t *out, size_t out_len);

#ifdef __cplusplus
}
#endif

// internal flags
enum blake3_flags {
  CHUNK_START = 1 << 0,
  CHUNK_END = 1 << 1,
  PARENT = 1 << 2,
  ROOT = 1 << 3,
  KEYED_HASH = 1 << 4,
  DERIVE_KEY_CONTEXT = 1 << 5,
  DERIVE_KEY_MATERIAL = 1 << 6,
};

#define INLINE static inline __attribute__((always_inline))
#define MAX_SIMD_DEGREE 1

// There are some places where we want a static size that's equal to the
// MAX_SIMD_DEGREE, but also at least 2.
#define MAX_SIMD_DEGREE_OR_2 (MAX_SIMD_DEGREE > 2 ? MAX_SIMD_DEGREE : 2)

static const uint32_t IV[8] = {0x6A09E667UL, 0xBB67AE85UL, 0x3C6EF372UL,
                               0xA54FF53AUL, 0x510E527FUL, 0x9B05688CUL,
                               0x1F83D9ABUL, 0x5BE0CD19UL};

static const uint8_t MSG_SCHEDULE[7][16] = {
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
    {2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8},
    {3, 4, 10, 12, 13, 2, 7, 14, 6, 5, 9, 0, 11, 15, 8, 1},
    {10, 7, 12, 9, 14, 3, 13, 15, 4, 0, 11, 2, 5, 8, 1, 6},
    {12, 13, 9, 11, 15, 10, 14, 8, 7, 2, 5, 3, 0, 1, 6, 4},
    {9, 14, 11, 5, 8, 12, 15, 1, 13, 3, 0, 10, 2, 6, 4, 7},
    {11, 15, 5, 0, 1, 9, 8, 6, 14, 10, 2, 12, 3, 4, 7, 13},
};

/* Find index of the highest set bit */
/* x is assumed to be nonzero.       */
static unsigned int highest_one(uint64_t x) {
#if defined(__GNUC__) || defined(__clang__)
  return 63 ^ __builtin_clzll(x);
#else
  unsigned int c = 0;
  if (x & 0xffffffff00000000ULL) {
    x >>= 32;
    c += 32;
  }
  if (x & 0x00000000ffff0000ULL) {
    x >>= 16;
    c += 16;
  }
  if (x & 0x000000000000ff00ULL) {
    x >>= 8;
    c += 8;
  }
  if (x & 0x00000000000000f0ULL) {
    x >>= 4;
    c += 4;
  }
  if (x & 0x000000000000000cULL) {
    x >>= 2;
    c += 2;
  }
  if (x & 0x0000000000000002ULL) {
    c += 1;
  }
  return c;
#endif
}

// Count the number of 1 bits.
INLINE unsigned int popcnt(uint64_t x) {
#if defined(__GNUC__) || defined(__clang__)
  return __builtin_popcountll(x);
#else
  unsigned int count = 0;
  while (x != 0) {
    count += 1;
    x &= x - 1;
  }
  return count;
#endif
}

// Largest power of two less than or equal to x. As a special case, returns 1
// when x is 0.
INLINE uint64_t round_down_to_power_of_2(uint64_t x) {
  return 1ULL << highest_one(x | 1);
}

INLINE uint32_t counter_low(uint64_t counter) { return (uint32_t)counter; }

INLINE uint32_t counter_high(uint64_t counter) {
  return (uint32_t)(counter >> 32);
}

INLINE uint32_t load32(const void *src) {
  const uint8_t *p = (const uint8_t *)src;
  return ((uint32_t)(p[0]) << 0) | ((uint32_t)(p[1]) << 8) |
         ((uint32_t)(p[2]) << 16) | ((uint32_t)(p[3]) << 24);
}

INLINE void load_key_words(const uint8_t key[BLAKE3_KEY_LEN],
                           uint32_t key_words[8]) {
  key_words[0] = load32(&key[0 * 4]);
  key_words[1] = load32(&key[1 * 4]);
  key_words[2] = load32(&key[2 * 4]);
  key_words[3] = load32(&key[3 * 4]);
  key_words[4] = load32(&key[4 * 4]);
  key_words[5] = load32(&key[5 * 4]);
  key_words[6] = load32(&key[6 * 4]);
  key_words[7] = load32(&key[7 * 4]);
}

INLINE void store32(void *dst, uint32_t w) {
  uint8_t *p = (uint8_t *)dst;
  p[0] = (uint8_t)(w >> 0);
  p[1] = (uint8_t)(w >> 8);
  p[2] = (uint8_t)(w >> 16);
  p[3] = (uint8_t)(w >> 24);
}

INLINE uint32_t rotr32(uint32_t w, uint32_t c) {
  return (w >> c) | (w << (32 - c));
}

INLINE void g(uint32_t *state, size_t a, size_t b, size_t c, size_t d,
              uint32_t x, uint32_t y) {
  state[a] = state[a] + state[b] + x;
  state[d] = rotr32(state[d] ^ state[a], 16);
  state[c] = state[c] + state[d];
  state[b] = rotr32(state[b] ^ state[c], 12);
  state[a] = state[a] + state[b] + y;
  state[d] = rotr32(state[d] ^ state[a], 8);
  state[c] = state[c] + state[d];
  state[b] = rotr32(state[b] ^ state[c], 7);
}

INLINE void round_fn(uint32_t state[16], const uint32_t *msg, size_t round) {
  // Select the message schedule based on the round.
  const uint8_t *schedule = MSG_SCHEDULE[round];

  // Mix the columns.
  g(state, 0, 4, 8, 12, msg[schedule[0]], msg[schedule[1]]);
  g(state, 1, 5, 9, 13, msg[schedule[2]], msg[schedule[3]]);
  g(state, 2, 6, 10, 14, msg[schedule[4]], msg[schedule[5]]);
  g(state, 3, 7, 11, 15, msg[schedule[6]], msg[schedule[7]]);

  // Mix the rows.
  g(state, 0, 5, 10, 15, msg[schedule[8]], msg[schedule[9]]);
  g(state, 1, 6, 11, 12, msg[schedule[10]], msg[schedule[11]]);
  g(state, 2, 7, 8, 13, msg[schedule[12]], msg[schedule[13]]);
  g(state, 3, 4, 9, 14, msg[schedule[14]], msg[schedule[15]]);
}

INLINE void compress_pre(uint32_t state[16], const uint32_t cv[8],
                         const uint8_t block[BLAKE3_BLOCK_LEN],
                         uint8_t block_len, uint64_t counter, uint8_t flags) {
  uint32_t block_words[16];
  block_words[0] = load32(block + 4 * 0);
  block_words[1] = load32(block + 4 * 1);
  block_words[2] = load32(block + 4 * 2);
  block_words[3] = load32(block + 4 * 3);
  block_words[4] = load32(block + 4 * 4);
  block_words[5] = load32(block + 4 * 5);
  block_words[6] = load32(block + 4 * 6);
  block_words[7] = load32(block + 4 * 7);
  block_words[8] = load32(block + 4 * 8);
  block_words[9] = load32(block + 4 * 9);
  block_words[10] = load32(block + 4 * 10);
  block_words[11] = load32(block + 4 * 11);
  block_words[12] = load32(block + 4 * 12);
  block_words[13] = load32(block + 4 * 13);
  block_words[14] = load32(block + 4 * 14);
  block_words[15] = load32(block + 4 * 15);

  state[0] = cv[0];
  state[1] = cv[1];
  state[2] = cv[2];
  state[3] = cv[3];
  state[4] = cv[4];
  state[5] = cv[5];
  state[6] = cv[6];
  state[7] = cv[7];
  state[8] = IV[0];
  state[9] = IV[1];
  state[10] = IV[2];
  state[11] = IV[3];
  state[12] = counter_low(counter);
  state[13] = counter_high(counter);
  state[14] = (uint32_t)block_len;
  state[15] = (uint32_t)flags;

  round_fn(state, &block_words[0], 0);
  round_fn(state, &block_words[0], 1);
  round_fn(state, &block_words[0], 2);
  round_fn(state, &block_words[0], 3);
  round_fn(state, &block_words[0], 4);
  round_fn(state, &block_words[0], 5);
  round_fn(state, &block_words[0], 6);
}

void blake3_compress_in_place_portable(uint32_t cv[8],
                                       const uint8_t block[BLAKE3_BLOCK_LEN],
                                       uint8_t block_len, uint64_t counter,
                                       uint8_t flags) {
  uint32_t state[16];
  compress_pre(state, cv, block, block_len, counter, flags);
  cv[0] = state[0] ^ state[8];
  cv[1] = state[1] ^ state[9];
  cv[2] = state[2] ^ state[10];
  cv[3] = state[3] ^ state[11];
  cv[4] = state[4] ^ state[12];
  cv[5] = state[5] ^ state[13];
  cv[6] = state[6] ^ state[14];
  cv[7] = state[7] ^ state[15];
}

void blake3_compress_xof_portable(const uint32_t cv[8],
                                  const uint8_t block[BLAKE3_BLOCK_LEN],
                                  uint8_t block_len, uint64_t counter,
                                  uint8_t flags, uint8_t out[64]) {
  uint32_t state[16];
  compress_pre(state, cv, block, block_len, counter, flags);

  store32(&out[0 * 4], state[0] ^ state[8]);
  store32(&out[1 * 4], state[1] ^ state[9]);
  store32(&out[2 * 4], state[2] ^ state[10]);
  store32(&out[3 * 4], state[3] ^ state[11]);
  store32(&out[4 * 4], state[4] ^ state[12]);
  store32(&out[5 * 4], state[5] ^ state[13]);
  store32(&out[6 * 4], state[6] ^ state[14]);
  store32(&out[7 * 4], state[7] ^ state[15]);
  store32(&out[8 * 4], state[8] ^ cv[0]);
  store32(&out[9 * 4], state[9] ^ cv[1]);
  store32(&out[10 * 4], state[10] ^ cv[2]);
  store32(&out[11 * 4], state[11] ^ cv[3]);
  store32(&out[12 * 4], state[12] ^ cv[4]);
  store32(&out[13 * 4], state[13] ^ cv[5]);
  store32(&out[14 * 4], state[14] ^ cv[6]);
  store32(&out[15 * 4], state[15] ^ cv[7]);
}

INLINE void hash_one_portable(const uint8_t *input, size_t blocks,
                              const uint32_t key[8], uint64_t counter,
                              uint8_t flags, uint8_t flags_start,
                              uint8_t flags_end, uint8_t out[BLAKE3_OUT_LEN]) {
  uint32_t cv[8];
  memcpy(cv, key, BLAKE3_KEY_LEN);
  uint8_t block_flags = flags | flags_start;
  while (blocks > 0) {
    if (blocks == 1) {
      block_flags |= flags_end;
    }
    blake3_compress_in_place_portable(cv, input, BLAKE3_BLOCK_LEN, counter,
                                      block_flags);
    input = &input[BLAKE3_BLOCK_LEN];
    blocks -= 1;
    block_flags = flags;
  }
  memcpy(out, cv, 32);
}

// The dynamically detected SIMD degree of the current platform.
size_t blake3_simd_degree(void) { return 1; }

void blake3_hash_many_portable(const uint8_t *const *inputs, size_t num_inputs,
                               size_t blocks, const uint32_t key[8],
                               uint64_t counter, bool increment_counter,
                               uint8_t flags, uint8_t flags_start,
                               uint8_t flags_end, uint8_t *out) {
  while (num_inputs > 0) {
    hash_one_portable(inputs[0], blocks, key, counter, flags, flags_start,
                      flags_end, out);
    if (increment_counter) {
      counter += 1;
    }
    inputs += 1;
    num_inputs -= 1;
    out = &out[BLAKE3_OUT_LEN];
  }
}

void blake3_compress_in_place(uint32_t cv[8],
                              const uint8_t block[BLAKE3_BLOCK_LEN],
                              uint8_t block_len, uint64_t counter,
                              uint8_t flags) {
  blake3_compress_in_place_portable(cv, block, block_len, counter, flags);
}

void blake3_compress_xof(const uint32_t cv[8],
                         const uint8_t block[BLAKE3_BLOCK_LEN],
                         uint8_t block_len, uint64_t counter, uint8_t flags,
                         uint8_t out[64]) {
  blake3_compress_xof_portable(cv, block, block_len, counter, flags, out);
}

void blake3_hash_many(const uint8_t *const *inputs, size_t num_inputs,
                      size_t blocks, const uint32_t key[8], uint64_t counter,
                      bool increment_counter, uint8_t flags,
                      uint8_t flags_start, uint8_t flags_end, uint8_t *out) {
  blake3_hash_many_portable(inputs, num_inputs, blocks, key, counter,
                            increment_counter, flags, flags_start, flags_end,
                            out);
}

INLINE void chunk_state_init(blake3_chunk_state *self, const uint32_t key[8],
                             uint8_t flags) {
  memcpy(self->cv, key, BLAKE3_KEY_LEN);
  self->chunk_counter = 0;
  memset(self->buf, 0, BLAKE3_BLOCK_LEN);
  self->buf_len = 0;
  self->blocks_compressed = 0;
  self->flags = flags;
}

INLINE void chunk_state_reset(blake3_chunk_state *self, const uint32_t key[8],
                              uint64_t chunk_counter) {
  memcpy(self->cv, key, BLAKE3_KEY_LEN);
  self->chunk_counter = chunk_counter;
  self->blocks_compressed = 0;
  memset(self->buf, 0, BLAKE3_BLOCK_LEN);
  self->buf_len = 0;
}

INLINE size_t chunk_state_len(const blake3_chunk_state *self) {
  return (BLAKE3_BLOCK_LEN * (size_t)self->blocks_compressed) +
         ((size_t)self->buf_len);
}

INLINE size_t chunk_state_fill_buf(blake3_chunk_state *self,
                                   const uint8_t *input, size_t input_len) {
  size_t take = BLAKE3_BLOCK_LEN - ((size_t)self->buf_len);
  if (take > input_len) {
    take = input_len;
  }
  uint8_t *dest = self->buf + ((size_t)self->buf_len);
  memcpy(dest, input, take);
  self->buf_len += (uint8_t)take;
  return take;
}

INLINE uint8_t chunk_state_maybe_start_flag(const blake3_chunk_state *self) {
  if (self->blocks_compressed == 0) {
    return CHUNK_START;
  } else {
    return 0;
  }
}

typedef struct {
  uint32_t input_cv[8];
  uint64_t counter;
  uint8_t block[BLAKE3_BLOCK_LEN];
  uint8_t block_len;
  uint8_t flags;
} output_t;

INLINE output_t make_output(const uint32_t input_cv[8],
                            const uint8_t block[BLAKE3_BLOCK_LEN],
                            uint8_t block_len, uint64_t counter,
                            uint8_t flags) {
  output_t ret;
  memcpy(ret.input_cv, input_cv, 32);
  memcpy(ret.block, block, BLAKE3_BLOCK_LEN);
  ret.block_len = block_len;
  ret.counter = counter;
  ret.flags = flags;
  return ret;
}

// Chaining values within a given chunk (specifically the compress_in_place
// interface) are represented as words. This avoids unnecessary bytes<->words
// conversion overhead in the portable implementation. However, the hash_many
// interface handles both user input and parent node blocks, so it accepts
// bytes. For that reason, chaining values in the CV stack are represented as
// bytes.
INLINE void output_chaining_value(const output_t *self, uint8_t cv[32]) {
  uint32_t cv_words[8];
  memcpy(cv_words, self->input_cv, 32);
  blake3_compress_in_place(cv_words, self->block, self->block_len,
                           self->counter, self->flags);
  memcpy(cv, cv_words, 32);
}

INLINE void output_root_bytes(const output_t *self, uint64_t seek, uint8_t *out,
                              size_t out_len) {
  uint64_t output_block_counter = seek / 64;
  size_t offset_within_block = seek % 64;
  uint8_t wide_buf[64];
  while (out_len > 0) {
    blake3_compress_xof(self->input_cv, self->block, self->block_len,
                        output_block_counter, self->flags | ROOT, wide_buf);
    size_t available_bytes = 64 - offset_within_block;
    size_t memcpy_len;
    if (out_len > available_bytes) {
      memcpy_len = available_bytes;
    } else {
      memcpy_len = out_len;
    }
    memcpy(out, wide_buf + offset_within_block, memcpy_len);
    out += memcpy_len;
    out_len -= memcpy_len;
    output_block_counter += 1;
    offset_within_block = 0;
  }
}

INLINE void chunk_state_update(blake3_chunk_state *self, const uint8_t *input,
                               size_t input_len) {
  if (self->buf_len > 0) {
    size_t take = chunk_state_fill_buf(self, input, input_len);
    input += take;
    input_len -= take;
    if (input_len > 0) {
      blake3_compress_in_place(
          self->cv, self->buf, BLAKE3_BLOCK_LEN, self->chunk_counter,
          self->flags | chunk_state_maybe_start_flag(self));
      self->blocks_compressed += 1;
      self->buf_len = 0;
      memset(self->buf, 0, BLAKE3_BLOCK_LEN);
    }
  }

  while (input_len > BLAKE3_BLOCK_LEN) {
    blake3_compress_in_place(self->cv, input, BLAKE3_BLOCK_LEN,
                             self->chunk_counter,
                             self->flags | chunk_state_maybe_start_flag(self));
    self->blocks_compressed += 1;
    input += BLAKE3_BLOCK_LEN;
    input_len -= BLAKE3_BLOCK_LEN;
  }

  size_t take = chunk_state_fill_buf(self, input, input_len);
  input += take;
  input_len -= take;
}

INLINE output_t chunk_state_output(const blake3_chunk_state *self) {
  uint8_t block_flags =
      self->flags | chunk_state_maybe_start_flag(self) | CHUNK_END;
  return make_output(self->cv, self->buf, self->buf_len, self->chunk_counter,
                     block_flags);
}

INLINE output_t parent_output(const uint8_t block[BLAKE3_BLOCK_LEN],
                              const uint32_t key[8], uint8_t flags) {
  return make_output(key, block, BLAKE3_BLOCK_LEN, 0, flags | PARENT);
}

// Given some input larger than one chunk, return the number of bytes that
// should go in the left subtree. This is the largest power-of-2 number of
// chunks that leaves at least 1 byte for the right subtree.
INLINE size_t left_len(size_t content_len) {
  // Subtract 1 to reserve at least one byte for the right side. content_len
  // should always be greater than BLAKE3_CHUNK_LEN.
  size_t full_chunks = (content_len - 1) / BLAKE3_CHUNK_LEN;
  return round_down_to_power_of_2(full_chunks) * BLAKE3_CHUNK_LEN;
}

// Use SIMD parallelism to hash up to MAX_SIMD_DEGREE chunks at the same time
// on a single thread. Write out the chunk chaining values and return the
// number of chunks hashed. These chunks are never the root and never empty;
// those cases use a different codepath.
INLINE size_t compress_chunks_parallel(const uint8_t *input, size_t input_len,
                                       const uint32_t key[8],
                                       uint64_t chunk_counter, uint8_t flags,
                                       uint8_t *out) {
#if defined(BLAKE3_TESTING)
  assert(0 < input_len);
  assert(input_len <= MAX_SIMD_DEGREE * BLAKE3_CHUNK_LEN);
#endif

  const uint8_t *chunks_array[MAX_SIMD_DEGREE];
  size_t input_position = 0;
  size_t chunks_array_len = 0;
  while (input_len - input_position >= BLAKE3_CHUNK_LEN) {
    chunks_array[chunks_array_len] = &input[input_position];
    input_position += BLAKE3_CHUNK_LEN;
    chunks_array_len += 1;
  }

  blake3_hash_many(chunks_array, chunks_array_len,
                   BLAKE3_CHUNK_LEN / BLAKE3_BLOCK_LEN, key, chunk_counter,
                   true, flags, CHUNK_START, CHUNK_END, out);

  // Hash the remaining partial chunk, if there is one. Note that the empty
  // chunk (meaning the empty message) is a different codepath.
  if (input_len > input_position) {
    uint64_t counter = chunk_counter + (uint64_t)chunks_array_len;
    blake3_chunk_state chunk_state;
    chunk_state_init(&chunk_state, key, flags);
    chunk_state.chunk_counter = counter;
    chunk_state_update(&chunk_state, &input[input_position],
                       input_len - input_position);
    output_t output = chunk_state_output(&chunk_state);
    output_chaining_value(&output, &out[chunks_array_len * BLAKE3_OUT_LEN]);
    return chunks_array_len + 1;
  } else {
    return chunks_array_len;
  }
}

// Use SIMD parallelism to hash up to MAX_SIMD_DEGREE parents at the same time
// on a single thread. Write out the parent chaining values and return the
// number of parents hashed. (If there's an odd input chaining value left over,
// return it as an additional output.) These parents are never the root and
// never empty; those cases use a different codepath.
INLINE size_t compress_parents_parallel(const uint8_t *child_chaining_values,
                                        size_t num_chaining_values,
                                        const uint32_t key[8], uint8_t flags,
                                        uint8_t *out) {
#if defined(BLAKE3_TESTING)
  assert(2 <= num_chaining_values);
  assert(num_chaining_values <= 2 * MAX_SIMD_DEGREE_OR_2);
#endif

  const uint8_t *parents_array[MAX_SIMD_DEGREE_OR_2];
  size_t parents_array_len = 0;
  while (num_chaining_values - (2 * parents_array_len) >= 2) {
    parents_array[parents_array_len] =
        &child_chaining_values[2 * parents_array_len * BLAKE3_OUT_LEN];
    parents_array_len += 1;
  }

  blake3_hash_many(parents_array, parents_array_len, 1, key,
                   0,  // Parents always use counter 0.
                   false, flags | PARENT,
                   0,  // Parents have no start flags.
                   0,  // Parents have no end flags.
                   out);

  // If there's an odd child left over, it becomes an output.
  if (num_chaining_values > 2 * parents_array_len) {
    memcpy(&out[parents_array_len * BLAKE3_OUT_LEN],
           &child_chaining_values[2 * parents_array_len * BLAKE3_OUT_LEN],
           BLAKE3_OUT_LEN);
    return parents_array_len + 1;
  } else {
    return parents_array_len;
  }
}

// The wide helper function returns (writes out) an array of chaining values
// and returns the length of that array. The number of chaining values returned
// is the dyanmically detected SIMD degree, at most MAX_SIMD_DEGREE. Or fewer,
// if the input is shorter than that many chunks. The reason for maintaining a
// wide array of chaining values going back up the tree, is to allow the
// implementation to hash as many parents in parallel as possible.
//
// As a special case when the SIMD degree is 1, this function will still return
// at least 2 outputs. This guarantees that this function doesn't perform the
// root compression. (If it did, it would use the wrong flags, and also we
// wouldn't be able to implement exendable ouput.) Note that this function is
// not used when the whole input is only 1 chunk long; that's a different
// codepath.
//
// Why not just have the caller split the input on the first update(), instead
// of implementing this special rule? Because we don't want to limit SIMD or
// multi-threading parallelism for that update().
static size_t blake3_compress_subtree_wide(const uint8_t *input,
                                           size_t input_len,
                                           const uint32_t key[8],
                                           uint64_t chunk_counter,
                                           uint8_t flags, uint8_t *out) {
  // Note that the single chunk case does *not* bump the SIMD degree up to 2
  // when it is 1. If this implementation adds multi-threading in the future,
  // this gives us the option of multi-threading even the 2-chunk case, which
  // can help performance on smaller platforms.
  if (input_len <= blake3_simd_degree() * BLAKE3_CHUNK_LEN) {
    return compress_chunks_parallel(input, input_len, key, chunk_counter, flags,
                                    out);
  }

  // With more than simd_degree chunks, we need to recurse. Start by dividing
  // the input into left and right subtrees. (Note that this is only optimal
  // as long as the SIMD degree is a power of 2. If we ever get a SIMD degree
  // of 3 or something, we'll need a more complicated strategy.)
  size_t left_input_len = left_len(input_len);
  size_t right_input_len = input_len - left_input_len;
  const uint8_t *right_input = &input[left_input_len];
  uint64_t right_chunk_counter =
      chunk_counter + (uint64_t)(left_input_len / BLAKE3_CHUNK_LEN);

  // Make space for the child outputs. Here we use MAX_SIMD_DEGREE_OR_2 to
  // account for the special case of returning 2 outputs when the SIMD degree
  // is 1.
  uint8_t cv_array[2 * MAX_SIMD_DEGREE_OR_2 * BLAKE3_OUT_LEN];
  size_t degree = blake3_simd_degree();
  if (left_input_len > BLAKE3_CHUNK_LEN && degree == 1) {
    // The special case: We always use a degree of at least two, to make
    // sure there are two outputs. Except, as noted above, at the chunk
    // level, where we allow degree=1. (Note that the 1-chunk-input case is
    // a different codepath.)
    degree = 2;
  }
  uint8_t *right_cvs = &cv_array[degree * BLAKE3_OUT_LEN];

  // Recurse! If this implementation adds multi-threading support in the
  // future, this is where it will go.
  size_t left_n = blake3_compress_subtree_wide(input, left_input_len, key,
                                               chunk_counter, flags, cv_array);
  size_t right_n = blake3_compress_subtree_wide(
      right_input, right_input_len, key, right_chunk_counter, flags, right_cvs);

  // The special case again. If simd_degree=1, then we'll have left_n=1 and
  // right_n=1. Rather than compressing them into a single output, return
  // them directly, to make sure we always have at least two outputs.
  if (left_n == 1) {
    memcpy(out, cv_array, 2 * BLAKE3_OUT_LEN);
    return 2;
  }

  // Otherwise, do one layer of parent node compression.
  size_t num_chaining_values = left_n + right_n;
  return compress_parents_parallel(cv_array, num_chaining_values, key, flags,
                                   out);
}

// Hash a subtree with compress_subtree_wide(), and then condense the resulting
// list of chaining values down to a single parent node. Don't compress that
// last parent node, however. Instead, return its message bytes (the
// concatenated chaining values of its children). This is necessary when the
// first call to update() supplies a complete subtree, because the topmost
// parent node of that subtree could end up being the root. It's also necessary
// for extended output in the general case.
//
// As with compress_subtree_wide(), this function is not used on inputs of 1
// chunk or less. That's a different codepath.
INLINE void compress_subtree_to_parent_node(
    const uint8_t *input, size_t input_len, const uint32_t key[8],
    uint64_t chunk_counter, uint8_t flags, uint8_t out[2 * BLAKE3_OUT_LEN]) {
#if defined(BLAKE3_TESTING)
  assert(input_len > BLAKE3_CHUNK_LEN);
#endif

  uint8_t cv_array[2 * MAX_SIMD_DEGREE_OR_2 * BLAKE3_OUT_LEN];
  size_t num_cvs = blake3_compress_subtree_wide(input, input_len, key,
                                                chunk_counter, flags, cv_array);

  // If MAX_SIMD_DEGREE is greater than 2 and there's enough input,
  // compress_subtree_wide() returns more than 2 chaining values. Condense
  // them into 2 by forming parent nodes repeatedly.
  uint8_t out_array[MAX_SIMD_DEGREE_OR_2 * BLAKE3_OUT_LEN / 2];
  while (num_cvs > 2) {
    num_cvs =
        compress_parents_parallel(cv_array, num_cvs, key, flags, out_array);
    memcpy(cv_array, out_array, num_cvs * BLAKE3_OUT_LEN);
  }
  memcpy(out, cv_array, 2 * BLAKE3_OUT_LEN);
}

// As described in hasher_push_cv() below, we do "lazy merging", delaying
// merges until right before the next CV is about to be added. This is
// different from the reference implementation. Another difference is that we
// aren't always merging 1 chunk at a time. Instead, each CV might represent
// any power-of-two number of chunks, as long as the smaller-above-larger stack
// order is maintained. Instead of the "count the trailing 0-bits" algorithm
// described in the spec, we use a "count the total number of 1-bits" variant
// that doesn't require us to retain the subtree size of the CV on top of the
// stack. The principle is the same: each CV that should remain in the stack is
// represented by a 1-bit in the total number of chunks (or bytes) so far.
INLINE void hasher_merge_cv_stack(blake3_hasher *self, uint64_t total_len) {
  size_t post_merge_stack_len = (size_t)popcnt(total_len);
  while (self->cv_stack_len > post_merge_stack_len) {
    uint8_t *parent_node =
        &self->cv_stack[(self->cv_stack_len - 2) * BLAKE3_OUT_LEN];
    output_t output = parent_output(parent_node, self->key, self->chunk.flags);
    output_chaining_value(&output, parent_node);
    self->cv_stack_len -= 1;
  }
}

// In reference_impl.rs, we merge the new CV with existing CVs from the stack
// before pushing it. We can do that because we know more input is coming, so
// we know none of the merges are root.
//
// This setting is different. We want to feed as much input as possible to
// compress_subtree_wide(), without setting aside anything for the chunk_state.
// If the user gives us 64 KiB, we want to parallelize over all 64 KiB at once
// as a single subtree, if at all possible.
//
// This leads to two problems:
// 1) This 64 KiB input might be the only call that ever gets made to update.
//    In this case, the root node of the 64 KiB subtree would be the root node
//    of the whole tree, and it would need to be ROOT finalized. We can't
//    compress it until we know.
// 2) This 64 KiB input might complete a larger tree, whose root node is
//    similarly going to be the the root of the whole tree. For example, maybe
//    we have 196 KiB (that is, 128 + 64) hashed so far. We can't compress the
//    node at the root of the 256 KiB subtree until we know how to finalize it.
//
// The second problem is solved with "lazy merging". That is, when we're about
// to add a CV to the stack, we don't merge it with anything first, as the
// reference impl does. Instead we do merges using the *previous* CV that was
// added, which is sitting on top of the stack, and we put the new CV
// (unmerged) on top of the stack afterwards. This guarantees that we never
// merge the root node until finalize().
//
// Solving the first problem requires an additional tool,
// compress_subtree_to_parent_node(). That function always returns the top
// *two* chaining values of the subtree it's compressing. We then do lazy
// merging with each of them separately, so that the second CV will always
// remain unmerged. (That also helps us support extendable output when we're
// hashing an input all-at-once.)
INLINE void hasher_push_cv(blake3_hasher *self, uint8_t new_cv[BLAKE3_OUT_LEN],
                           uint64_t chunk_counter) {
  hasher_merge_cv_stack(self, chunk_counter);
  memcpy(&self->cv_stack[self->cv_stack_len * BLAKE3_OUT_LEN], new_cv,
         BLAKE3_OUT_LEN);
  self->cv_stack_len += 1;
}

INLINE void hasher_init_base(blake3_hasher *self, const uint32_t key[8],
                             uint8_t flags) {
  memcpy(self->key, key, BLAKE3_KEY_LEN);
  chunk_state_init(&self->chunk, key, flags);
  self->cv_stack_len = 0;
}

void blake3_hasher_update(blake3_hasher *self, const void *input,
                          size_t input_len) {
  // Explicitly checking for zero avoids causing UB by passing a null pointer
  // to memcpy. This comes up in practice with things like:
  //   std::vector<uint8_t> v;
  //   blake3_hasher_update(&hasher, v.data(), v.size());
  if (input_len == 0) {
    return;
  }

  const uint8_t *input_bytes = (const uint8_t *)input;

  // If we have some partial chunk bytes in the internal chunk_state, we need
  // to finish that chunk first.
  if (chunk_state_len(&self->chunk) > 0) {
    size_t take = BLAKE3_CHUNK_LEN - chunk_state_len(&self->chunk);
    if (take > input_len) {
      take = input_len;
    }
    chunk_state_update(&self->chunk, input_bytes, take);
    input_bytes += take;
    input_len -= take;
    // If we've filled the current chunk and there's more coming, finalize this
    // chunk and proceed. In this case we know it's not the root.
    if (input_len > 0) {
      output_t output = chunk_state_output(&self->chunk);
      uint8_t chunk_cv[32];
      output_chaining_value(&output, chunk_cv);
      hasher_push_cv(self, chunk_cv, self->chunk.chunk_counter);
      chunk_state_reset(&self->chunk, self->key, self->chunk.chunk_counter + 1);
    } else {
      return;
    }
  }

  // Now the chunk_state is clear, and we have more input. If there's more than
  // a single chunk (so, definitely not the root chunk), hash the largest whole
  // subtree we can, with the full benefits of SIMD (and maybe in the future,
  // multi-threading) parallelism. Two restrictions:
  // - The subtree has to be a power-of-2 number of chunks. Only subtrees along
  //   the right edge can be incomplete, and we don't know where the right edge
  //   is going to be until we get to finalize().
  // - The subtree must evenly divide the total number of chunks up until this
  //   point (if total is not 0). If the current incomplete subtree is only
  //   waiting for 1 more chunk, we can't hash a subtree of 4 chunks. We have
  //   to complete the current subtree first.
  // Because we might need to break up the input to form powers of 2, or to
  // evenly divide what we already have, this part runs in a loop.
  while (input_len > BLAKE3_CHUNK_LEN) {
    size_t subtree_len = round_down_to_power_of_2(input_len);
    uint64_t count_so_far = self->chunk.chunk_counter * BLAKE3_CHUNK_LEN;
    // Shrink the subtree_len until it evenly divides the count so far. We know
    // that subtree_len itself is a power of 2, so we can use a bitmasking
    // trick instead of an actual remainder operation. (Note that if the caller
    // consistently passes power-of-2 inputs of the same size, as is hopefully
    // typical, this loop condition will always fail, and subtree_len will
    // always be the full length of the input.)
    //
    // An aside: We don't have to shrink subtree_len quite this much. For
    // example, if count_so_far is 1, we could pass 2 chunks to
    // compress_subtree_to_parent_node. Since we'll get 2 CVs back, we'll still
    // get the right answer in the end, and we might get to use 2-way SIMD
    // parallelism. The problem with this optimization, is that it gets us
    // stuck always hashing 2 chunks. The total number of chunks will remain
    // odd, and we'll never graduate to higher degrees of parallelism. See
    // https://github.com/BLAKE3-team/BLAKE3/issues/69.
    while ((((uint64_t)(subtree_len - 1)) & count_so_far) != 0) {
      subtree_len /= 2;
    }
    // The shrunken subtree_len might now be 1 chunk long. If so, hash that one
    // chunk by itself. Otherwise, compress the subtree into a pair of CVs.
    uint64_t subtree_chunks = subtree_len / BLAKE3_CHUNK_LEN;
    if (subtree_len <= BLAKE3_CHUNK_LEN) {
      blake3_chunk_state chunk_state;
      chunk_state_init(&chunk_state, self->key, self->chunk.flags);
      chunk_state.chunk_counter = self->chunk.chunk_counter;
      chunk_state_update(&chunk_state, input_bytes, subtree_len);
      output_t output = chunk_state_output(&chunk_state);
      uint8_t cv[BLAKE3_OUT_LEN];
      output_chaining_value(&output, cv);
      hasher_push_cv(self, cv, chunk_state.chunk_counter);
    } else {
      // This is the high-performance happy path, though getting here depends
      // on the caller giving us a long enough input.
      uint8_t cv_pair[2 * BLAKE3_OUT_LEN];
      compress_subtree_to_parent_node(input_bytes, subtree_len, self->key,
                                      self->chunk.chunk_counter,
                                      self->chunk.flags, cv_pair);
      hasher_push_cv(self, cv_pair, self->chunk.chunk_counter);
      hasher_push_cv(self, &cv_pair[BLAKE3_OUT_LEN],
                     self->chunk.chunk_counter + (subtree_chunks / 2));
    }
    self->chunk.chunk_counter += subtree_chunks;
    input_bytes += subtree_len;
    input_len -= subtree_len;
  }

  // If there's any remaining input less than a full chunk, add it to the chunk
  // state. In that case, also do a final merge loop to make sure the subtree
  // stack doesn't contain any unmerged pairs. The remaining input means we
  // know these merges are non-root. This merge loop isn't strictly necessary
  // here, because hasher_push_chunk_cv already does its own merge loop, but it
  // simplifies blake3_hasher_finalize below.
  if (input_len > 0) {
    chunk_state_update(&self->chunk, input_bytes, input_len);
    hasher_merge_cv_stack(self, self->chunk.chunk_counter);
  }
}

void blake3_hasher_finalize_seek(const blake3_hasher *self, uint64_t seek,
                                 uint8_t *out, size_t out_len) {
  // Explicitly checking for zero avoids causing UB by passing a null pointer
  // to memcpy. This comes up in practice with things like:
  //   std::vector<uint8_t> v;
  //   blake3_hasher_finalize(&hasher, v.data(), v.size());
  if (out_len == 0) {
    return;
  }

  // If the subtree stack is empty, then the current chunk is the root.
  if (self->cv_stack_len == 0) {
    output_t output = chunk_state_output(&self->chunk);
    output_root_bytes(&output, seek, out, out_len);
    return;
  }
  // If there are any bytes in the chunk state, finalize that chunk and do a
  // roll-up merge between that chunk hash and every subtree in the stack. In
  // this case, the extra merge loop at the end of blake3_hasher_update
  // guarantees that none of the subtrees in the stack need to be merged with
  // each other first. Otherwise, if there are no bytes in the chunk state,
  // then the top of the stack is a chunk hash, and we start the merge from
  // that.
  output_t output;
  size_t cvs_remaining;
  if (chunk_state_len(&self->chunk) > 0) {
    cvs_remaining = self->cv_stack_len;
    output = chunk_state_output(&self->chunk);
  } else {
    // There are always at least 2 CVs in the stack in this case.
    cvs_remaining = self->cv_stack_len - 2;
    output = parent_output(&self->cv_stack[cvs_remaining * 32], self->key,
                           self->chunk.flags);
  }
  while (cvs_remaining > 0) {
    cvs_remaining -= 1;
    uint8_t parent_block[BLAKE3_BLOCK_LEN];
    memcpy(parent_block, &self->cv_stack[cvs_remaining * 32], 32);
    output_chaining_value(&output, &parent_block[32]);
    output = parent_output(parent_block, self->key, self->chunk.flags);
  }
  output_root_bytes(&output, seek, out, out_len);
}

void blake3_hasher_finalize(const blake3_hasher *self, uint8_t *out,
                            size_t out_len) {
  blake3_hasher_finalize_seek(self, 0, out, out_len);
}

void blake3_hasher_init(blake3_hasher *self) { hasher_init_base(self, IV, 0); }

void blake3_hasher_init_keyed(blake3_hasher *self,
                              const uint8_t key[BLAKE3_KEY_LEN]) {
  uint32_t key_words[8];
  load_key_words(key, key_words);
  hasher_init_base(self, key_words, KEYED_HASH);
}

void blake3_hasher_init_derive_key(blake3_hasher *self, const char *context) {
  blake3_hasher context_hasher;
  hasher_init_base(&context_hasher, IV, DERIVE_KEY_CONTEXT);
  blake3_hasher_update(&context_hasher, context, strlen(context));
  uint8_t context_key[BLAKE3_KEY_LEN];
  blake3_hasher_finalize(&context_hasher, context_key, BLAKE3_KEY_LEN);
  uint32_t context_key_words[8];
  load_key_words(context_key, context_key_words);
  hasher_init_base(self, context_key_words, DERIVE_KEY_MATERIAL);
}

#endif /* BLAKE3_H */


================================================
File: deps/ckb-c-stdlib/ckb_consts.h
================================================
#ifndef CKB_C_STDLIB_CKB_CONSTS_H_
#define CKB_C_STDLIB_CKB_CONSTS_H_

#define SYS_exit 93
#define SYS_ckb_vm_version 2041
#define SYS_ckb_current_cycles 2042
#define SYS_ckb_exec 2043
#define SYS_ckb_load_transaction 2051
#define SYS_ckb_load_script 2052
#define SYS_ckb_load_tx_hash 2061
#define SYS_ckb_load_script_hash 2062
#define SYS_ckb_load_cell 2071
#define SYS_ckb_load_header 2072
#define SYS_ckb_load_input 2073
#define SYS_ckb_load_witness 2074
#define SYS_ckb_load_cell_by_field 2081
#define SYS_ckb_load_header_by_field 2082
#define SYS_ckb_load_input_by_field 2083
#define SYS_ckb_load_cell_data_as_code 2091
#define SYS_ckb_load_cell_data 2092
#define SYS_ckb_debug 2177
#define SYS_ckb_spawn 2101
#define SYS_ckb_get_memory_limit 2102
#define SYS_ckb_set_content 2103
#define SYS_ckb_load_block_extension 2104
#define SYS_ckb_current_memory 2105

#define CKB_SUCCESS 0
#define CKB_INDEX_OUT_OF_BOUND 1
#define CKB_ITEM_MISSING 2
#define CKB_LENGTH_NOT_ENOUGH 3
#define CKB_INVALID_DATA 4

#define CKB_SOURCE_INPUT 1
#define CKB_SOURCE_OUTPUT 2
#define CKB_SOURCE_CELL_DEP 3
#define CKB_SOURCE_HEADER_DEP 4
#define CKB_SOURCE_GROUP_INPUT 0x0100000000000001
#define CKB_SOURCE_GROUP_OUTPUT 0x0100000000000002

#define CKB_CELL_FIELD_CAPACITY 0
#define CKB_CELL_FIELD_DATA_HASH 1
#define CKB_CELL_FIELD_LOCK 2
#define CKB_CELL_FIELD_LOCK_HASH 3
#define CKB_CELL_FIELD_TYPE 4
#define CKB_CELL_FIELD_TYPE_HASH 5
#define CKB_CELL_FIELD_OCCUPIED_CAPACITY 6

#define CKB_HEADER_FIELD_EPOCH_NUMBER 0
#define CKB_HEADER_FIELD_EPOCH_START_BLOCK_NUMBER 1
#define CKB_HEADER_FIELD_EPOCH_LENGTH 2

#define CKB_INPUT_FIELD_OUT_POINT 0
#define CKB_INPUT_FIELD_SINCE 1

#endif /* CKB_C_STDLIB_CKB_CONSTS_H_ */


================================================
File: deps/ckb-c-stdlib/ckb_dlfcn.h
================================================
#ifndef CKB_C_STDLIB_CKB_DLFCN_H_
#define CKB_C_STDLIB_CKB_DLFCN_H_

#include "ckb_syscalls.h"

int ckb_dlopen(const uint8_t *dep_cell_data_hash, uint8_t *aligned_addr,
               size_t aligned_size, void **handle, size_t *consumed_size) {
  return ckb_dlopen2(dep_cell_data_hash, 0, aligned_addr, aligned_size, handle,
                     consumed_size);
}

#ifndef CKB_STDLIB_NO_SYSCALL_IMPL

int _ckb_load_cell_code(void *addr, size_t memory_size, size_t content_offset,
                        size_t content_size, size_t index, size_t source) {
  return syscall(SYS_ckb_load_cell_data_as_code, addr, memory_size,
                 content_offset, content_size, index, source);
}

/*
 * The ELF parsing code here is inspired from
 * https://github.com/riscv/riscv-pk/blob/master/pk/elf.h, original code is in
 * BSD license.
 */

typedef struct {
  uint8_t e_ident[16];
  uint16_t e_type;
  uint16_t e_machine;
  uint32_t e_version;
  uint64_t e_entry;
  uint64_t e_phoff;
  uint64_t e_shoff;
  uint32_t e_flags;
  uint16_t e_ehsize;
  uint16_t e_phentsize;
  uint16_t e_phnum;
  uint16_t e_shentsize;
  uint16_t e_shnum;
  uint16_t e_shstrndx;
} Elf64_Ehdr;

#define SHT_STRTAB 3
#define SHT_RELA 4
#define SHT_DYNSYM 11

typedef struct {
  uint32_t sh_name;
  uint32_t sh_type;
  uint64_t sh_flags;
  uint64_t sh_addr;
  uint64_t sh_offset;
  uint64_t sh_size;
  uint32_t sh_link;
  uint32_t sh_info;
  uint64_t sh_addralign;
  uint64_t sh_entsize;
} Elf64_Shdr;

#define PT_LOAD 1
#define PF_X 1

typedef struct {
  uint32_t p_type;
  uint32_t p_flags;
  uint64_t p_offset;
  uint64_t p_vaddr;
  uint64_t p_paddr;
  uint64_t p_filesz;
  uint64_t p_memsz;
  uint64_t p_align;
} Elf64_Phdr;

typedef struct {
  uint32_t st_name;
  uint8_t st_info;
  uint8_t st_other;
  uint16_t st_shndx;
  uint64_t st_value;
  uint64_t st_size;
} Elf64_Sym;

#define R_RISCV_RELATIVE 3
#define R_RISCV_JUMP_SLOT 5

typedef struct {
  uint64_t r_offset;
  uint64_t r_info;
  int64_t r_addend;
} Elf64_Rela;

#define RISCV_PGSIZE 4096

#ifndef MAX
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#endif

#ifndef MIN
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#endif

#define ERROR_CONTEXT_FAILURE -21
#define ERROR_INVALID_ELF -22
#define ERROR_MEMORY_NOT_ENOUGH -23
#define ERROR_OUT_OF_BOUND -24
#define ERROR_INVALID_ARGS -25
#define ERROR_ELF_NOT_ALIGNED -26

typedef struct {
  Elf64_Sym *dynsyms;
  const char *dynstr;
  size_t dynsym_size;
  uint8_t *base_addr;
  size_t size;
} CkbDlfcnContext;

int check_in_range(const void *p, const CkbDlfcnContext *context) {
  uint64_t end;

  void *begin = context->base_addr;
  if (__builtin_uaddl_overflow((uint64_t)context->base_addr, context->size,
                               &end)) {
    return 0;
  }
  if (begin <= p && p < (void *)end) {
    return 1;
  } else {
    return 0;
  }
}

int roundup(uint64_t a, uint64_t b, uint64_t *value) {
  if (a == 0) {
    *value = 0;
    return 0;
  }
  uint64_t d = (a - 1) / b;
  return __builtin_umull_overflow(d + 1, b, value);
}

uint8_t *addr_offset_checked(uint8_t *aligned_addr, uint64_t aligned_size,
                             uint64_t offset) {
  uint64_t target = 0;
  if (offset < aligned_size) {
    if (__builtin_uaddl_overflow((uint64_t)aligned_addr, offset, &target)) {
      return 0;
    } else {
      return (uint8_t *)target;
    }
  } else {
    return 0;
  }
}

void *addr_offset_with_context(const void *addr, uint64_t offset,
                               const CkbDlfcnContext *context) {
  uint64_t target = 0;
  if (__builtin_uaddl_overflow((uint64_t)addr, offset, &target)) {
    return 0;
  } else {
    if (!check_in_range((const void *)target, context)) {
      return 0;
    } else {
      return (void *)target;
    }
  }
}

int ckb_dlopen2(const uint8_t *dep_cell_hash, uint8_t hash_type,
                uint8_t *aligned_addr, size_t aligned_size, void **handle,
                size_t *consumed_size) {
  if (sizeof(CkbDlfcnContext) > RISCV_PGSIZE || aligned_size < RISCV_PGSIZE) {
    return ERROR_CONTEXT_FAILURE;
  }
  if (((uint64_t)aligned_addr) < 8) {
    return ERROR_CONTEXT_FAILURE;
  }

  if (dep_cell_hash == 0 || aligned_size == 0 || aligned_addr == 0 ||
      handle == 0 || consumed_size == 0) {
    return ERROR_INVALID_ARGS;
  }
  uint64_t _end = 0;
  if (__builtin_uaddl_overflow((uint64_t)aligned_addr, aligned_size, &_end)) {
    return ERROR_OUT_OF_BOUND;
  }

  CkbDlfcnContext *context = (CkbDlfcnContext *)aligned_addr;
  memset(context, 0, sizeof(CkbDlfcnContext));
  aligned_addr += RISCV_PGSIZE;
  aligned_size -= RISCV_PGSIZE;
  context->base_addr = aligned_addr;
  context->size = aligned_size;

  size_t index = SIZE_MAX;
  int ret = ckb_look_for_dep_with_hash2(dep_cell_hash, hash_type, &index);
  if (ret != CKB_SUCCESS) {
    return ret;
  }

  /* Basic ELF header parsing */
  Elf64_Ehdr header;
  uint64_t len = sizeof(header);
  ret =
      ckb_load_cell_data((void *)&header, &len, 0, index, CKB_SOURCE_CELL_DEP);
  if (ret != CKB_SUCCESS) {
    return ret;
  }
  if (len < sizeof(header)) {
    return ERROR_INVALID_ELF;
  }
  if ((header.e_phentsize != sizeof(Elf64_Phdr)) ||
      (header.e_shentsize != sizeof(Elf64_Shdr)) || (header.e_phnum > 16) ||
      (header.e_shnum > 32)) {
    return ERROR_INVALID_ELF;
  }
  /* Parse program headers and load relevant parts */
  Elf64_Phdr program_headers[16];
  len = sizeof(Elf64_Phdr) * header.e_phnum;
  ret = ckb_load_cell_data((void *)program_headers, &len, header.e_phoff, index,
                           CKB_SOURCE_CELL_DEP);
  if (ret != CKB_SUCCESS) {
    return ret;
  }
  if (len < sizeof(Elf64_Phdr) * header.e_phnum) {
    return ERROR_INVALID_ELF;
  }
  uint64_t max_consumed_size = 0;
  for (int i = 0; i < header.e_phnum; i++) {
    const Elf64_Phdr *ph = &program_headers[i];
    if (ph->p_type == PT_LOAD && ph->p_memsz > 0) {
      if ((ph->p_flags & PF_X) != 0) {
        uint64_t prepad = ph->p_vaddr % RISCV_PGSIZE;
        uint64_t vaddr = ph->p_vaddr - prepad;
        uint64_t memsz = 0;
        if (roundup(prepad + ph->p_memsz, RISCV_PGSIZE, &memsz)) {
          return ERROR_INVALID_ELF;
        }
        unsigned long size = 0;
        if (__builtin_uaddl_overflow(vaddr, memsz, &size)) {
          return ERROR_INVALID_ELF;
        }
        if (size > aligned_size) {
          return ERROR_MEMORY_NOT_ENOUGH;
        }
        uint8_t *addr2 = addr_offset_checked(aligned_addr, aligned_size, vaddr);
        if (addr2 == 0) {
          return ERROR_INVALID_ELF;
        }
        /*
         * There is a slight defect in current syscall: if the padding
         * required for memory alignment is bigger than the ELF starting
         * offset to load, there is not a way for current syscall to correctly
         * load the ELF. We use a check here to guard for the condition, and
         * exit when it is not satisfied. A better solution might to explicitly
         * ask for page aligned code section in linker, or wait for a fixed
         * syscall version.
         */
        if (ph->p_offset < prepad) {
          return ERROR_ELF_NOT_ALIGNED;
        }
        ret = _ckb_load_cell_code(addr2, memsz, ph->p_offset - prepad,
                                  ph->p_filesz + prepad, index,
                                  CKB_SOURCE_CELL_DEP);
        if (ret != CKB_SUCCESS) {
          return ret;
        }
        max_consumed_size = MAX(max_consumed_size, vaddr + memsz);
      } else {
        uint64_t filesz = ph->p_filesz;
        uint64_t memsz = ph->p_memsz;
        uint64_t size = 0;
        uint64_t gap_len = 0;
        if (filesz > memsz) {
          return ERROR_INVALID_ELF;
        }
        gap_len = memsz - filesz;

        if (__builtin_uaddl_overflow(ph->p_vaddr, memsz, &size)) {
          return ERROR_INVALID_ELF;
        }
        uint64_t consumed_end = 0;
        if (roundup(size, RISCV_PGSIZE, &consumed_end)) {
          return ERROR_INVALID_ELF;
        }
        if (consumed_end > aligned_size) {
          return ERROR_MEMORY_NOT_ENOUGH;
        }
        uint8_t *addr2 =
            addr_offset_checked(aligned_addr, aligned_size, ph->p_vaddr);
        if (addr2 == 0) {
          return ERROR_INVALID_ELF;
        }
        uint64_t read_len = filesz;
        ret = ckb_load_cell_data(addr2, &read_len, ph->p_offset, index,
                                 CKB_SOURCE_CELL_DEP);
        if (ret != CKB_SUCCESS) {
          return ret;
        }
        if (read_len < filesz) {
          return ERROR_INVALID_ELF;
        }
        if (gap_len > 0) {
          uint8_t *addr3 = addr_offset_with_context(addr2, filesz, context);
          uint8_t *addr4 =
              addr_offset_with_context(addr3, gap_len - 1, context);
          if (addr3 != 0 && addr4 != 0) {
            memset(addr3, 0, gap_len);
          } else {
            return ERROR_INVALID_ELF;
          }
        }
        max_consumed_size = MAX(max_consumed_size, consumed_end);
      }
    }
  }
  /*
   * Parse sectioin header & relocation headers,
   * Perform necessary relocations.
   */
  Elf64_Shdr section_headers[32];
  len = sizeof(Elf64_Shdr) * header.e_shnum;
  ret = ckb_load_cell_data((void *)section_headers, &len, header.e_shoff, index,
                           CKB_SOURCE_CELL_DEP);
  if (ret != CKB_SUCCESS) {
    return ret;
  }
  if (len < sizeof(Elf64_Shdr) * header.e_shnum) {
    return ERROR_INVALID_ELF;
  }
  if (header.e_shstrndx >= 32 || header.e_shstrndx >= header.e_shnum) {
    return ERROR_INVALID_ELF;
  }
  /*
   * First load shstrtab tab, this is temporary code only needed in ELF loading
   * phase here.
   */
  Elf64_Shdr *shshrtab = &section_headers[header.e_shstrndx];
  char shrtab[4096];
  if (shshrtab->sh_size > 4096) {
    return ERROR_INVALID_ELF;
  }
  uint64_t shrtab_len = shshrtab->sh_size;
  ret = ckb_load_cell_data((void *)shrtab, &shrtab_len, shshrtab->sh_offset,
                           index, CKB_SOURCE_CELL_DEP);
  if (ret != CKB_SUCCESS) {
    return ret;
  }
  if (shrtab_len < shshrtab->sh_size) {
    return ERROR_INVALID_ELF;
  }
  for (int i = 0; i < header.e_shnum; i++) {
    const Elf64_Shdr *sh = &section_headers[i];
    if (sh->sh_type == SHT_RELA) {
      if (sh->sh_entsize != sizeof(Elf64_Rela)) {
        return ERROR_INVALID_ELF;
      }
      size_t relocation_size = sh->sh_size / sh->sh_entsize;
      uint64_t current_offset = sh->sh_offset;
      while (relocation_size > 0) {
        Elf64_Rela relocations[64];
        size_t load_size = MIN(relocation_size, 64);
        uint64_t load_length = load_size * sizeof(Elf64_Rela);
        ret = ckb_load_cell_data((void *)relocations, &load_length,
                                 current_offset, index, CKB_SOURCE_CELL_DEP);
        if (ret != CKB_SUCCESS) {
          return ret;
        }
        if (load_length < load_size * sizeof(Elf64_Rela)) {
          return ERROR_INVALID_ELF;
        }
        relocation_size -= load_size;
        current_offset += load_size * sizeof(Elf64_Rela);
        for (size_t j = 0; j < load_size; j++) {
          Elf64_Rela *r = &relocations[j];
          uint32_t t = (uint32_t) r->r_info;
          if (t != R_RISCV_RELATIVE && t != R_RISCV_JUMP_SLOT) {
            /*
             * Only relative and jump slot relocations are supported now,
             * we might add more later.
             */
            return ERROR_INVALID_ELF;
          }
          if (r->r_offset >= (aligned_size - sizeof(uint64_t)) ||
              r->r_addend >= (int64_t)(aligned_size) || r->r_addend < 0) {
            return ERROR_INVALID_ELF;
          }
          uint64_t temp = (uint64_t)(aligned_addr + r->r_addend);
          memcpy(aligned_addr + r->r_offset, &temp, sizeof(uint64_t));
        }
      }
    } else if (sh->sh_type == SHT_DYNSYM) {
      /* We assume one ELF file only has one DYNSYM section now */
      if (sh->sh_entsize != sizeof(Elf64_Sym)) {
        return ERROR_INVALID_ELF;
      }
      uint8_t *addr2 =
          addr_offset_checked(aligned_addr, aligned_size, sh->sh_addr);
      if (addr2 == 0) {
        return ERROR_INVALID_ELF;
      }
      context->dynsyms = (Elf64_Sym *)addr2;
      context->dynsym_size = sh->sh_size / sh->sh_entsize;

      uint8_t *addr3 = addr_offset_with_context(addr2, sh->sh_size, context);
      if (addr3 == 0) {
        return ERROR_INVALID_ELF;
      }
    } else if (sh->sh_type == SHT_STRTAB) {
      static char DYNSTR[] = ".dynstr";
      if (sh->sh_name < (4096 - sizeof(DYNSTR)) &&
          shshrtab->sh_size >= sizeof(DYNSTR) &&
          sh->sh_name < (shshrtab->sh_size - sizeof(DYNSTR))) {
        const char *current_str = shrtab + sh->sh_name;
        if (strcmp(DYNSTR, current_str) == 0) {
          const uint8_t *addr2 =
              addr_offset_checked(aligned_addr, aligned_size, sh->sh_addr);
          if (addr2 == 0) {
            return ERROR_INVALID_ELF;
          }
          context->dynstr = (const char *)addr2;
        }
      }
    }
  }
  if (context->dynsyms == NULL || context->dynstr == NULL) {
    return ERROR_INVALID_ELF;
  }
  *handle = (void *)context;
  *consumed_size = max_consumed_size + RISCV_PGSIZE;
  return CKB_SUCCESS;
}

void *ckb_dlsym(void *handle, const char *symbol) {
  if (handle == NULL || symbol == NULL) {
    return NULL;
  }
  CkbDlfcnContext *context = (CkbDlfcnContext *)handle;

  if (context->base_addr == NULL || context->size == 0 ||
      context->dynstr == NULL || context->dynsym_size == 0 ||
      context->dynsyms == NULL) {
    return NULL;
  }
  if (!check_in_range(context->dynstr, context)) {
    return NULL;
  }
  uint64_t _end = 0;
  if (__builtin_uaddl_overflow((uint64_t)context->base_addr, context->size,
                               &_end)) {
    return NULL;
  }

  for (uint64_t i = 0; i < context->dynsym_size; i++) {
    Elf64_Sym *sym = &context->dynsyms[i];
    const char *str =
        addr_offset_with_context(context->dynstr, sym->st_name, context);
    const void *str_end =
        addr_offset_with_context(str, strlen(symbol), context);
    if ((str == 0) || (str_end == 0)) return NULL;
    if (strcmp(str, symbol) == 0) {
      void *p =
          addr_offset_with_context(context->base_addr, sym->st_value, context);
      if (p == 0) {
        return 0;
      } else {
        return p;
      }
    }
  }

  return NULL;
}

#endif /* CKB_STDLIB_NO_SYSCALL_IMPL */

#endif /* CKB_C_STDLIB_CKB_DLFCN_H_ */


================================================
File: deps/ckb-c-stdlib/ckb_exec.h
================================================
#ifndef _CBK_C_STDLIB_CKB_EXEC_H_
#define _CBK_C_STDLIB_CKB_EXEC_H_
#include <stdint.h>
#include <string.h>

#ifndef CKB_EXEC_MAX_ARGS_COUNT
#define CKB_EXEC_MAX_ARGS_COUNT 64
#endif

#ifndef CKB_EXEC_MAX_BUFF_LEN
#define CKB_EXEC_MAX_BUFF_LEN (32 * 1024)
#endif

#ifndef CKB_EXEC_MAX_PARAM_LEN
#define CKB_EXEC_MAX_PARAM_LEN (32 * 1024)
#endif

enum CkbExecErrorCodeType {
  ERROR_EXEC_OUT_OF_BOUNDS = 30,
  ERROR_EXEC_INVALID_HEX,
};

typedef struct CkbBinaryArgsType {
  uint32_t count;
  uint32_t len[CKB_EXEC_MAX_ARGS_COUNT];
  uint8_t* params[CKB_EXEC_MAX_ARGS_COUNT];

  uint32_t used_buff;
  uint8_t buff[CKB_EXEC_MAX_BUFF_LEN];
} CkbBinaryArgsType;

typedef struct CkbHexArgsType {
  uint32_t used_buff;
  char buff[CKB_EXEC_MAX_BUFF_LEN];
} CkbHexArgsType;

static int _exec_getbin(uint8_t x, uint8_t* out) {
  if (x >= '0' && x <= '9') {
    *out = x - '0';
  } else if (x >= 'A' && x <= 'F') {
    *out = x - 'A' + 10;
  } else if (x >= 'a' && x <= 'f') {
    *out = x - 'a' + 10;
  } else {
    return ERROR_EXEC_INVALID_HEX;
  }
  return 0;
}

static void _exec_gethex(uint8_t x, char* out) {
  static char s_mapping[] = {'0', '1', '2', '3', '4', '5', '6', '7',
                             '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
  out[0] = s_mapping[(x >> 4) & 0x0F];
  out[1] = s_mapping[x & 0x0F];
}

int _exec_safe_strlen(const char* s, uint32_t limit, uint32_t* length) {
  if (s == NULL) return ERROR_EXEC_OUT_OF_BOUNDS;

  uint32_t count = 0;
  for (; *s; s++) {
    count++;
    if (count > limit) return ERROR_EXEC_OUT_OF_BOUNDS;
  }
  *length = count;
  return 0;
}

// the string length of "hex" should be no more than bin_len*2
// "length" returns the bytes count written in "bin"
static int _exec_hex2bin(const char* hex, uint8_t* bin, uint32_t bin_len,
                         uint32_t* length) {
  uint32_t limit = 2 * bin_len;
  uint32_t hex_len;
  int err = _exec_safe_strlen(hex, limit, &hex_len);
  if (err != 0) return err;
  if (hex_len % 2 != 0) return ERROR_EXEC_INVALID_HEX;
  *length = hex_len / 2;
  if (*length > bin_len) {
    return ERROR_EXEC_OUT_OF_BOUNDS;
  }
  for (uint32_t i = 0; i < *length; i++) {
    uint8_t high, low;
    err = _exec_getbin(hex[i * 2], &high);
    if (err != 0) return err;
    err = _exec_getbin(hex[i * 2 + 1], &low);
    if (err != 0) return err;
    bin[i] = high << 4 | low;
  }
  return 0;
}

static int _exec_bin2hex(const uint8_t* bin, uint32_t bin_len, char* hex,
                         uint32_t hex_len, uint32_t* length, bool last_field) {
  if (hex_len < (bin_len * 2 + 1)) {
    return ERROR_EXEC_OUT_OF_BOUNDS;
  }
  for (uint32_t i = 0; i < bin_len; i++) {
    _exec_gethex(bin[i], hex + 2 * i);
  }
  if (last_field)
    *(hex + bin_len * 2) = 0;
  else
    *(hex + bin_len * 2) = ':';

  *length = 2 * bin_len + 1;
  return 0;
}

// use ckb_exec_reset and ckb_exec_append to generate CkbBinaryArgsType from
// scratch
void ckb_exec_reset(CkbBinaryArgsType* args) {
  args->count = 0;
  args->used_buff = 0;
}

int ckb_exec_append(CkbBinaryArgsType* args, uint8_t* data, uint32_t len) {
  if (args->count >= CKB_EXEC_MAX_ARGS_COUNT) {
    return ERROR_EXEC_INVALID_HEX;
  }
  uint8_t* p = args->buff + args->used_buff;
  args->used_buff += len;
  if (args->used_buff > CKB_EXEC_MAX_BUFF_LEN) {
    return ERROR_EXEC_OUT_OF_BOUNDS;
  }

  memcpy(p, data, len);
  args->params[args->count] = p;
  args->len[args->count] = len;

  args->count++;

  return 0;
}

int ckb_exec_encode_params(CkbBinaryArgsType* in, CkbHexArgsType* out) {
  int err = 0;

  if (in->count > CKB_EXEC_MAX_ARGS_COUNT || in->count == 0) {
    return ERROR_EXEC_OUT_OF_BOUNDS;
  }

  out->used_buff = 0;

  for (uint32_t i = 0; i < in->count; i++) {
    uint8_t* p = in->params[i];
    uint32_t len = in->len[i];
    uint32_t length;
    if (out->used_buff >= CKB_EXEC_MAX_BUFF_LEN) {
      return ERROR_EXEC_OUT_OF_BOUNDS;
    }
    bool last_field = (i == (in->count - 1));
    err = _exec_bin2hex(p, len, out->buff + out->used_buff,
                        CKB_EXEC_MAX_BUFF_LEN - out->used_buff, &length,
                        last_field);
    if (err != 0) return err;
    out->used_buff += length;
  }
  return 0;
}

int ckb_exec_decode_params(char* argv, uint8_t** param_ptr, uint32_t* param_len,
                           char** next_iterator_argv) {
  int err = 0;
  *param_len = 0;
  *param_ptr = NULL;
  if (argv == NULL) {
    return ERROR_EXEC_INVALID_HEX;
  }
  uint8_t* cur = (uint8_t*)argv;
  uint8_t* write_ptr = cur;
  *param_ptr = cur;
  *param_len = 0;

  uint32_t count = 0;

  uint8_t high, low;
  while (true) {
    if (*cur == '\0') {
      *next_iterator_argv = NULL;
      break;
    }
    if (*cur == ':') {
      *next_iterator_argv = (char*)(cur + 1);
      break;
    }
    err = _exec_getbin(*cur, &high);
    if (err != 0) return err;
    cur++;
    err = _exec_getbin(*cur, &low);
    if (err != 0) return err;
    cur++;

    (*write_ptr) = high << 4 | low;
    write_ptr++;
    (*param_len)++;

    // prevent infinite loop when no ":" or "\0" is detected
    count++;
    if (count > CKB_EXEC_MAX_PARAM_LEN) {
      return ERROR_EXEC_OUT_OF_BOUNDS;
    }
  }
  return 0;
}

#endif  // _CBK_C_STDLIB_CKB_EXEC_H_


================================================
File: deps/ckb-c-stdlib/ckb_keccak256.h
================================================
/* sha3 - an implementation of Secure Hash Algorithm 3 (Keccak).
 * based on the
 * The Keccak SHA-3 submission. Submission to NIST (Round 3), 2011
 * by Guido Bertoni, Joan Daemen, Michaël Peeters and Gilles Van Assche
 *
 * Copyright: 2013 Aleksey Kravchenko <rhash.admin@gmail.com>
 *
 * Permission is hereby granted,  free of charge,  to any person  obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction,  including without limitation
 * the rights to  use, copy, modify,  merge, publish, distribute, sublicense,
 * and/or sell copies  of  the Software,  and to permit  persons  to whom the
 * Software is furnished to do so.
 *
 * This program  is  distributed  in  the  hope  that it will be useful,  but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  Use this program  at  your own risk!
 */

#ifndef __KECCAK256_H_
#define __KECCAK256_H_

#include <stdint.h>
#include <string.h>

#define sha3_max_permutation_size 25
#define sha3_max_rate_in_qwords 24

typedef struct SHA3_CTX {
  /* 1600 bits algorithm hashing state */
  uint64_t hash[sha3_max_permutation_size];
  /* 1536-bit buffer for leftovers */
  uint64_t message[sha3_max_rate_in_qwords];
  /* count of bytes in the message[] buffer */
  uint16_t rest;
  /* size of a message block processed at once */
  // unsigned block_size;
} SHA3_CTX;

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

void keccak_init(SHA3_CTX *ctx);
void keccak_update(SHA3_CTX *ctx, unsigned char *msg, uint16_t size);
void keccak_final(SHA3_CTX *ctx, unsigned char *result);

#ifdef __cplusplus
}
#endif /* __cplusplus */

// keccak256 implementation

#define BLOCK_SIZE ((1600 - 256 * 2) / 8)

#define I64(x) x##LL
#define ROTL64(qword, n) ((qword) << (n) ^ ((qword) >> (64 - (n))))
#define le2me_64(x) (x)
#define IS_ALIGNED_64(p) (0 == (7 & ((const char *)(p) - (const char *)0)))
#define me64_to_le_str(to, from, length) memcpy((to), (from), (length))

/* constants */

// const uint8_t round_constant_info[] PROGMEM = {
// const uint8_t constants[] PROGMEM = {
const uint8_t constants[] = {

    1,
    26,
    94,
    112,
    31,
    33,
    121,
    85,
    14,
    12,
    53,
    38,
    63,
    79,
    93,
    83,
    82,
    72,
    22,
    102,
    121,
    88,
    33,
    116,
    //};

    // const uint8_t pi_transform[] PROGMEM = {
    1,
    6,
    9,
    22,
    14,
    20,
    2,
    12,
    13,
    19,
    23,
    15,
    4,
    24,
    21,
    8,
    16,
    5,
    3,
    18,
    17,
    11,
    7,
    10,
    //};

    // const uint8_t rhoTransforms[] PROGMEM = {
    1,
    62,
    28,
    27,
    36,
    44,
    6,
    55,
    20,
    3,
    10,
    43,
    25,
    39,
    41,
    45,
    15,
    21,
    8,
    18,
    2,
    61,
    56,
    14,
};

#define TYPE_ROUND_INFO 0
#define TYPE_PI_TRANSFORM 24
#define TYPE_RHO_TRANSFORM 48

uint8_t getConstant(uint8_t type, uint8_t index) {
  return constants[type + index];
  // return pgm_read_byte(&constants[type + index]);
}

static uint64_t get_round_constant(uint8_t round) {
  uint64_t result = 0;

  // uint8_t roundInfo = pgm_read_byte(&round_constant_info[round]);
  uint8_t roundInfo = getConstant(TYPE_ROUND_INFO, round);
  if (roundInfo & (1 << 6)) {
    result |= ((uint64_t)1 << 63);
  }
  if (roundInfo & (1 << 5)) {
    result |= ((uint64_t)1 << 31);
  }
  if (roundInfo & (1 << 4)) {
    result |= ((uint64_t)1 << 15);
  }
  if (roundInfo & (1 << 3)) {
    result |= ((uint64_t)1 << 7);
  }
  if (roundInfo & (1 << 2)) {
    result |= ((uint64_t)1 << 3);
  }
  if (roundInfo & (1 << 1)) {
    result |= ((uint64_t)1 << 1);
  }
  if (roundInfo & (1 << 0)) {
    result |= ((uint64_t)1 << 0);
  }

  return result;
}

/* Initializing a sha3 context for given number of output bits */
void keccak_init(SHA3_CTX *ctx) {
  /* NB: The Keccak capacity parameter = bits * 2 */

  memset(ctx, 0, sizeof(SHA3_CTX));
}

/* Keccak theta() transformation */
static void keccak_theta(uint64_t *A) {
  uint64_t C[5], D[5];

  for (uint8_t i = 0; i < 5; i++) {
    C[i] = A[i];
    for (uint8_t j = 5; j < 25; j += 5) {
      C[i] ^= A[i + j];
    }
  }

  for (uint8_t i = 0; i < 5; i++) {
    D[i] = ROTL64(C[(i + 1) % 5], 1) ^ C[(i + 4) % 5];
  }

  for (uint8_t i = 0; i < 5; i++) {
    // for (uint8_t j = 0; j < 25; j += 5) {
    for (uint8_t j = 0; j < 25; j += 5) {
      A[i + j] ^= D[i];
    }
  }
}

/* Keccak pi() transformation */
static void keccak_pi(uint64_t *A) {
  uint64_t A1 = A[1];
  // for (uint8_t i = 1; i < sizeof(pi_transform); i++) {
  for (uint8_t i = 1; i < 24; i++) {
    // A[pgm_read_byte(&pi_transform[i - 1])] =
    // A[pgm_read_byte(&pi_transform[i])];
    A[getConstant(TYPE_PI_TRANSFORM, i - 1)] =
        A[getConstant(TYPE_PI_TRANSFORM, i)];
  }
  A[10] = A1;
  /* note: A[ 0] is left as is */
}

/*
ketch uses 30084 bytes (93%) of program storage space. Maximum is 32256 bytes.
Global variables use 743 bytes (36%) of dynamic memory, leaving 1305 bytes for
local variables. Maximum is 2048 bytes.
*/
/* Keccak chi() transformation */
static void keccak_chi(uint64_t *A) {
  for (uint8_t i = 0; i < 25; i += 5) {
    uint64_t A0 = A[0 + i], A1 = A[1 + i];
    A[0 + i] ^= ~A1 & A[2 + i];
    A[1 + i] ^= ~A[2 + i] & A[3 + i];
    A[2 + i] ^= ~A[3 + i] & A[4 + i];
    A[3 + i] ^= ~A[4 + i] & A0;
    A[4 + i] ^= ~A0 & A1;
  }
}

static void sha3_permutation(uint64_t *state) {
  // for (uint8_t round = 0; round < sizeof(round_constant_info); round++) {
  for (uint8_t round = 0; round < 24; round++) {
    keccak_theta(state);

    /* apply Keccak rho() transformation */
    for (uint8_t i = 1; i < 25; i++) {
      // state[i] = ROTL64(state[i], pgm_read_byte(&rhoTransforms[i - 1]));
      state[i] = ROTL64(state[i], getConstant(TYPE_RHO_TRANSFORM, i - 1));
    }

    keccak_pi(state);
    keccak_chi(state);

    /* apply iota(state, round) */
    *state ^= get_round_constant(round);
  }
}

/**
 * The core transformation. Process the specified block of data.
 *
 * @param hash the algorithm state
 * @param block the message block to process
 * @param block_size the size of the processed block in bytes
 */
static void sha3_process_block(uint64_t hash[25], const uint64_t *block) {
  for (uint8_t i = 0; i < 17; i++) {
    hash[i] ^= le2me_64(block[i]);
  }

  /* make a permutation of the hash */
  sha3_permutation(hash);
}

//#define SHA3_FINALIZED 0x80000000
//#define SHA3_FINALIZED 0x8000

/**
 * Calculate message hash.
 * Can be called repeatedly with chunks of the message to be hashed.
 *
 * @param ctx the algorithm context containing current hashing state
 * @param msg message chunk
 * @param size length of the message chunk
 */
void keccak_update(SHA3_CTX *ctx, unsigned char *msg, uint16_t size) {
  uint16_t idx = (uint16_t)ctx->rest;

  // if (ctx->rest & SHA3_FINALIZED) return; /* too late for additional input */
  ctx->rest = (unsigned)((ctx->rest + size) % BLOCK_SIZE);

  /* fill partial block */
  if (idx) {
    uint16_t left = BLOCK_SIZE - idx;
    memcpy((char *)ctx->message + idx, msg, (size < left ? size : left));
    if (size < left) return;

    /* process partial block */
    sha3_process_block(ctx->hash, ctx->message);
    msg += left;
    size -= left;
  }

  while (size >= BLOCK_SIZE) {
    uint64_t *aligned_message_block;
    if (IS_ALIGNED_64(msg)) {
      // the most common case is processing of an already aligned message
      // without copying it
      aligned_message_block = (uint64_t *)(void *)msg;
    } else {
      memcpy(ctx->message, msg, BLOCK_SIZE);
      aligned_message_block = ctx->message;
    }

    sha3_process_block(ctx->hash, aligned_message_block);
    msg += BLOCK_SIZE;
    size -= BLOCK_SIZE;
  }

  if (size) {
    memcpy(ctx->message, msg, size); /* save leftovers */
  }
}

/**
 * Store calculated hash into the given array.
 *
 * @param ctx the algorithm context containing current hashing state
 * @param result calculated hash in binary form
 */
void keccak_final(SHA3_CTX *ctx, unsigned char *result) {
  uint16_t digest_length = 100 - BLOCK_SIZE / 2;

  //    if (!(ctx->rest & SHA3_FINALIZED)) {
  /* clear the rest of the data queue */
  memset((char *)ctx->message + ctx->rest, 0, BLOCK_SIZE - ctx->rest);
  ((char *)ctx->message)[ctx->rest] |= 0x01;
  ((char *)ctx->message)[BLOCK_SIZE - 1] |= 0x80;

  /* process final block */
  sha3_process_block(ctx->hash, ctx->message);
  //        ctx->rest = SHA3_FINALIZED; /* mark context as finalized */
  //    }

  if (result) {
    me64_to_le_str(result, ctx->hash, digest_length);
  }
}

#endif /* __KECCAK256_H_ */


================================================
File: deps/ckb-c-stdlib/ckb_streaming.h
================================================
#ifndef CKB_C_STDLIB_CKB_STREAMING_H_
#define CKB_C_STDLIB_CKB_STREAMING_H_

#ifndef CKB_ONE_BATCH_SIZE
#define CKB_ONE_BATCH_SIZE 16384
#endif /* CKB_ONE_BATCH_SIZE */

#include "blake2b.h"
#include "ckb_syscalls.h"

typedef int (*load_function)(void *, uint64_t *, size_t, size_t, size_t);

int ckb_load_and_hash(blake2b_state *ctx, size_t start, size_t index,
                      size_t source, load_function f) {
  uint8_t temp[CKB_ONE_BATCH_SIZE];
  uint64_t len = CKB_ONE_BATCH_SIZE;
  int ret = f(temp, &len, start, index, source);
  if (ret != CKB_SUCCESS) {
    return ret;
  }
  blake2b_update(ctx, (char *)&len, sizeof(uint64_t));
  uint64_t offset = (len > CKB_ONE_BATCH_SIZE) ? CKB_ONE_BATCH_SIZE : len;
  blake2b_update(ctx, temp, offset);
  while (offset < len) {
    uint64_t current_len = CKB_ONE_BATCH_SIZE;
    ret = f(temp, &current_len, start + offset, index, source);
    if (ret != CKB_SUCCESS) {
      return ret;
    }
    uint64_t current_read =
        (current_len > CKB_ONE_BATCH_SIZE) ? CKB_ONE_BATCH_SIZE : current_len;
    blake2b_update(ctx, temp, current_read);
    offset += current_read;
  }
  return CKB_SUCCESS;
}

int ckb_hash_cell(blake2b_state *ctx, size_t index_code, size_t source) {
  return ckb_load_and_hash(ctx, 0, index_code, source, ckb_load_cell);
}

int ckb_hash_input(blake2b_state *ctx, size_t index_code, size_t source) {
  return ckb_load_and_hash(ctx, 0, index_code, source, ckb_load_input);
}

#endif /* CKB_C_STDLIB_CKB_STREAMING_H_ */


================================================
File: deps/ckb-c-stdlib/ckb_swappable_signatures.h
================================================
#ifndef CKB_C_STDLIB_CKB_SWAPPABLE_SIGNATURES_H_
#define CKB_C_STDLIB_CKB_SWAPPABLE_SIGNATURES_H_

#include "ckb_dlfcn.h"

#ifdef CKB_SWAPPABLE_SIGNATURES_DEBUG
#define DEBUG(s) ckb_debug(s)
#else
#define DEBUG(s)
#endif /* CKB_SWAPPABLE_SIGNATURES_DEBUG */

typedef int (*verify_function)(void *, const uint8_t *, size_t, const uint8_t *,
                               size_t, uint8_t *, size_t *);

typedef struct {
  uint8_t *code_buffer;
  uint64_t code_buffer_size;
  uint8_t *prefilled_data_buffer;
  size_t prefilled_buffer_size;
  verify_function verify_func;
} CkbSwappableSignatureInstance;

int ckb_initialize_swappable_signature(
    const uint8_t *code_hash, uint8_t hash_type,
    CkbSwappableSignatureInstance *instance) {
  void *handle = NULL;
  size_t consumed_size = 0;
  int ret = ckb_dlopen2(code_hash, hash_type, instance->code_buffer,
                        instance->code_buffer_size, &handle, &consumed_size);
  if (ret != CKB_SUCCESS) {
    return ret;
  }
  instance->code_buffer_size = consumed_size;
  int (*load_prefilled_data_func)(void *, size_t *);
  *(void **)(&load_prefilled_data_func) =
      ckb_dlsym(handle, "load_prefilled_data");
  if (load_prefilled_data_func == NULL) {
    DEBUG("Error loading load prefilled data func!");
    return CKB_INVALID_DATA;
  }
  ret = load_prefilled_data_func(instance->prefilled_data_buffer,
                                 &instance->prefilled_buffer_size);
  if (ret != CKB_SUCCESS) {
    DEBUG("Error loading prefilled data!");
    return ret;
  }
  *(void **)(&instance->verify_func) = ckb_dlsym(handle, "validate_signature");
  if (instance->verify_func == NULL) {
    DEBUG("Error loading validate signature func!");
    return CKB_INVALID_DATA;
  }
  return CKB_SUCCESS;
}

#endif /* CKB_C_STDLIB_CKB_SWAPPABLE_SIGNATURES_H_ */


================================================
File: deps/ckb-c-stdlib/ckb_syscall_apis.h
================================================
#ifndef CKB_C_STDLIB_CKB_SYSCALL_APIS_H_
#define CKB_C_STDLIB_CKB_SYSCALL_APIS_H_

/*
 * Syscall related APIs that will be shared and used in all CKB
 * smart contract environments
 */

#include <stddef.h>
#include <stdint.h>

int ckb_exit(int8_t code);
int ckb_load_tx_hash(void* addr, uint64_t* len, size_t offset);
int ckb_load_transaction(void* addr, uint64_t* len, size_t offset);
int ckb_load_script_hash(void* addr, uint64_t* len, size_t offset);
int ckb_load_script(void* addr, uint64_t* len, size_t offset);
int ckb_debug(const char* s);

int ckb_load_cell(void* addr, uint64_t* len, size_t offset, size_t index,
                  size_t source);
int ckb_load_input(void* addr, uint64_t* len, size_t offset, size_t index,
                   size_t source);
int ckb_load_header(void* addr, uint64_t* len, size_t offset, size_t index,
                    size_t source);
int ckb_load_witness(void* addr, uint64_t* len, size_t offset, size_t index,
                     size_t source);
int ckb_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                           size_t index, size_t source, size_t field);
int ckb_load_header_by_field(void* addr, uint64_t* len, size_t offset,
                             size_t index, size_t source, size_t field);
int ckb_load_input_by_field(void* addr, uint64_t* len, size_t offset,
                            size_t index, size_t source, size_t field);
int ckb_load_cell_data(void* addr, uint64_t* len, size_t offset, size_t index,
                       size_t source);
int ckb_vm_version();
uint64_t ckb_current_cycles();
int ckb_exec_cell(const uint8_t* code_hash, uint8_t hash_type, uint32_t offset,
                  uint32_t length, int argc, const char* argv[]);

int ckb_dlopen2(const uint8_t* dep_cell_hash, uint8_t hash_type,
                uint8_t* aligned_addr, size_t aligned_size, void** handle,
                size_t* consumed_size);
void* ckb_dlsym(void* handle, const char* symbol);

typedef struct spawn_args_t {
  uint64_t memory_limit;
  int8_t* exit_code;
  uint8_t* content;
  uint64_t* content_length;
} spawn_args_t;
int ckb_spawn(size_t index, size_t source, size_t bounds, int argc,
              const char* argv[], spawn_args_t* spgs);
int ckb_spawn_cell(const uint8_t* code_hash, uint8_t hash_type, uint32_t offset,
                   uint32_t length, int argc, const char* argv[],
                   spawn_args_t* spgs);
int ckb_get_memory_limit();
int ckb_set_content(uint8_t* content, uint64_t* length);

#endif /* CKB_C_STDLIB_CKB_SYSCALL_APIS_H_ */


================================================
File: deps/ckb-c-stdlib/ckb_syscalls.h
================================================
#ifndef CKB_C_STDLIB_CKB_SYSCALLS_H_
#define CKB_C_STDLIB_CKB_SYSCALLS_H_

#include <stddef.h>
#include <stdint.h>
#include <string.h>

#include "ckb_consts.h"
#include "ckb_syscall_apis.h"

int ckb_checked_load_tx_hash(void* addr, uint64_t* len, size_t offset) {
  uint64_t old_len = *len;
  int ret = ckb_load_tx_hash(addr, len, offset);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_script_hash(void* addr, uint64_t* len, size_t offset) {
  uint64_t old_len = *len;
  int ret = ckb_load_script_hash(addr, len, offset);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_cell(void* addr, uint64_t* len, size_t offset,
                          size_t index, size_t source) {
  uint64_t old_len = *len;
  int ret = ckb_load_cell(addr, len, offset, index, source);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_input(void* addr, uint64_t* len, size_t offset,
                           size_t index, size_t source) {
  uint64_t old_len = *len;
  int ret = ckb_load_input(addr, len, offset, index, source);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_header(void* addr, uint64_t* len, size_t offset,
                            size_t index, size_t source) {
  uint64_t old_len = *len;
  int ret = ckb_load_header(addr, len, offset, index, source);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_witness(void* addr, uint64_t* len, size_t offset,
                             size_t index, size_t source) {
  uint64_t old_len = *len;
  int ret = ckb_load_witness(addr, len, offset, index, source);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_script(void* addr, uint64_t* len, size_t offset) {
  uint64_t old_len = *len;
  int ret = ckb_load_script(addr, len, offset);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_transaction(void* addr, uint64_t* len, size_t offset) {
  uint64_t old_len = *len;
  int ret = ckb_load_transaction(addr, len, offset);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                                   size_t index, size_t source, size_t field) {
  uint64_t old_len = *len;
  int ret = ckb_load_cell_by_field(addr, len, offset, index, source, field);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_header_by_field(void* addr, uint64_t* len, size_t offset,
                                     size_t index, size_t source,
                                     size_t field) {
  uint64_t old_len = *len;
  int ret = ckb_load_header_by_field(addr, len, offset, index, source, field);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_input_by_field(void* addr, uint64_t* len, size_t offset,
                                    size_t index, size_t source, size_t field) {
  uint64_t old_len = *len;
  int ret = ckb_load_input_by_field(addr, len, offset, index, source, field);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_checked_load_cell_data(void* addr, uint64_t* len, size_t offset,
                               size_t index, size_t source) {
  uint64_t old_len = *len;
  int ret = ckb_load_cell_data(addr, len, offset, index, source);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

/* load the actual witness for the current type verify group.
   use this instead of ckb_load_witness if type contract needs args to verify
   input/output.
 */
int ckb_load_actual_type_witness(uint8_t* buf, uint64_t* len, size_t index,
                                 size_t* type_source) {
  *type_source = CKB_SOURCE_GROUP_INPUT;
  uint64_t tmp_len = 0;
  if (ckb_load_cell_by_field(NULL, &tmp_len, 0, 0, CKB_SOURCE_GROUP_INPUT,
                             CKB_CELL_FIELD_CAPACITY) ==
      CKB_INDEX_OUT_OF_BOUND) {
    *type_source = CKB_SOURCE_GROUP_OUTPUT;
  }

  return ckb_checked_load_witness(buf, len, 0, index, *type_source);
}

/* calculate inputs length */
int ckb_calculate_inputs_len() {
  uint64_t len = 0;
  /* lower bound, at least tx has one input */
  int lo = 0;
  /* higher bound */
  int hi = 4;
  int ret;
  /* try to load input until failing to increase lo and hi */
  while (1) {
    ret = ckb_load_input_by_field(NULL, &len, 0, hi, CKB_SOURCE_INPUT,
                                  CKB_INPUT_FIELD_SINCE);
    if (ret == CKB_SUCCESS) {
      lo = hi;
      hi *= 2;
    } else {
      break;
    }
  }

  /* now we get our lower bound and higher bound,
   count number of inputs by binary search */
  int i;
  while (lo + 1 != hi) {
    i = (lo + hi) / 2;
    ret = ckb_load_input_by_field(NULL, &len, 0, i, CKB_SOURCE_INPUT,
                                  CKB_INPUT_FIELD_SINCE);
    if (ret == CKB_SUCCESS) {
      lo = i;
    } else {
      hi = i;
    }
  }
  /* now lo is last input index and hi is length of inputs */
  return hi;
}

/*
 * Look for a dep cell with specific code hash, code_hash should be a buffer
 * with 32 bytes.
 */
int ckb_look_for_dep_with_hash2(const uint8_t* code_hash, uint8_t hash_type,
                                size_t* index) {
  size_t current = 0;
  size_t field =
      (hash_type == 1) ? CKB_CELL_FIELD_TYPE_HASH : CKB_CELL_FIELD_DATA_HASH;
  while (current < SIZE_MAX) {
    uint64_t len = 32;
    uint8_t hash[32];

    int ret = ckb_load_cell_by_field(hash, &len, 0, current,
                                     CKB_SOURCE_CELL_DEP, field);
    switch (ret) {
      case CKB_ITEM_MISSING:
        break;
      case CKB_SUCCESS:
        if (memcmp(code_hash, hash, 32) == 0) {
          /* Found a match */
          *index = current;
          return CKB_SUCCESS;
        }
        break;
      default:
        return CKB_INDEX_OUT_OF_BOUND;
    }
    current++;
  }
  return CKB_INDEX_OUT_OF_BOUND;
}

int ckb_look_for_dep_with_hash(const uint8_t* data_hash, size_t* index) {
  return ckb_look_for_dep_with_hash2(data_hash, 0, index);
}

#ifndef CKB_STDLIB_NO_SYSCALL_IMPL

#define memory_barrier() asm volatile("fence" ::: "memory")

static inline long __internal_syscall(long n, long _a0, long _a1, long _a2,
                                      long _a3, long _a4, long _a5) {
  register long a0 asm("a0") = _a0;
  register long a1 asm("a1") = _a1;
  register long a2 asm("a2") = _a2;
  register long a3 asm("a3") = _a3;
  register long a4 asm("a4") = _a4;
  register long a5 asm("a5") = _a5;

#ifdef __riscv_32e
  register long syscall_id asm("t0") = n;
#else
  register long syscall_id asm("a7") = n;
#endif

  asm volatile("scall"
               : "+r"(a0)
               : "r"(a1), "r"(a2), "r"(a3), "r"(a4), "r"(a5), "r"(syscall_id));
  /*
   * Syscalls might modify memory sent as pointer, adding a barrier here ensures
   * gcc won't do incorrect optimization.
   */
  memory_barrier();

  return a0;
}

#define syscall(n, a, b, c, d, e, f)                                           \
  __internal_syscall(n, (long)(a), (long)(b), (long)(c), (long)(d), (long)(e), \
                     (long)(f))

int ckb_exit(int8_t code) { return syscall(SYS_exit, code, 0, 0, 0, 0, 0); }

int ckb_load_tx_hash(void* addr, uint64_t* len, size_t offset) {
  volatile uint64_t inner_len = *len;
  int ret = syscall(SYS_ckb_load_tx_hash, addr, &inner_len, offset, 0, 0, 0);
  *len = inner_len;
  return ret;
}

int ckb_load_script_hash(void* addr, uint64_t* len, size_t offset) {
  volatile uint64_t inner_len = *len;
  int ret =
      syscall(SYS_ckb_load_script_hash, addr, &inner_len, offset, 0, 0, 0);
  *len = inner_len;
  return ret;
}

int ckb_load_cell(void* addr, uint64_t* len, size_t offset, size_t index,
                  size_t source) {
  volatile uint64_t inner_len = *len;
  int ret =
      syscall(SYS_ckb_load_cell, addr, &inner_len, offset, index, source, 0);
  *len = inner_len;
  return ret;
}

int ckb_load_input(void* addr, uint64_t* len, size_t offset, size_t index,
                   size_t source) {
  volatile uint64_t inner_len = *len;
  int ret =
      syscall(SYS_ckb_load_input, addr, &inner_len, offset, index, source, 0);
  *len = inner_len;
  return ret;
}

int ckb_load_header(void* addr, uint64_t* len, size_t offset, size_t index,
                    size_t source) {
  volatile uint64_t inner_len = *len;
  int ret =
      syscall(SYS_ckb_load_header, addr, &inner_len, offset, index, source, 0);
  *len = inner_len;
  return ret;
}

int ckb_load_witness(void* addr, uint64_t* len, size_t offset, size_t index,
                     size_t source) {
  volatile uint64_t inner_len = *len;
  int ret =
      syscall(SYS_ckb_load_witness, addr, &inner_len, offset, index, source, 0);
  *len = inner_len;
  return ret;
}

int ckb_load_script(void* addr, uint64_t* len, size_t offset) {
  volatile uint64_t inner_len = *len;
  int ret = syscall(SYS_ckb_load_script, addr, &inner_len, offset, 0, 0, 0);
  *len = inner_len;
  return ret;
}

int ckb_load_transaction(void* addr, uint64_t* len, size_t offset) {
  volatile uint64_t inner_len = *len;
  int ret =
      syscall(SYS_ckb_load_transaction, addr, &inner_len, offset, 0, 0, 0);
  *len = inner_len;
  return ret;
}

int ckb_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                           size_t index, size_t source, size_t field) {
  volatile uint64_t inner_len = *len;
  int ret = syscall(SYS_ckb_load_cell_by_field, addr, &inner_len, offset, index,
                    source, field);
  *len = inner_len;
  return ret;
}

int ckb_load_header_by_field(void* addr, uint64_t* len, size_t offset,
                             size_t index, size_t source, size_t field) {
  volatile uint64_t inner_len = *len;
  int ret = syscall(SYS_ckb_load_header_by_field, addr, &inner_len, offset,
                    index, source, field);
  *len = inner_len;
  return ret;
}

int ckb_load_input_by_field(void* addr, uint64_t* len, size_t offset,
                            size_t index, size_t source, size_t field) {
  volatile uint64_t inner_len = *len;
  int ret = syscall(SYS_ckb_load_input_by_field, addr, &inner_len, offset,
                    index, source, field);
  *len = inner_len;
  return ret;
}

int ckb_load_cell_data(void* addr, uint64_t* len, size_t offset, size_t index,
                       size_t source) {
  volatile uint64_t inner_len = *len;
  int ret = syscall(SYS_ckb_load_cell_data, addr, &inner_len, offset, index,
                    source, 0);
  *len = inner_len;
  return ret;
}

int ckb_debug(const char* s) {
  return syscall(SYS_ckb_debug, s, 0, 0, 0, 0, 0);
}

int ckb_vm_version() { return syscall(SYS_ckb_vm_version, 0, 0, 0, 0, 0, 0); }

uint64_t ckb_current_cycles() {
  return syscall(SYS_ckb_current_cycles, 0, 0, 0, 0, 0, 0);
}

int ckb_exec_cell(const uint8_t* code_hash, uint8_t hash_type, uint32_t offset,
                  uint32_t length, int argc, const char* argv[]) {
  size_t index = SIZE_MAX;
  int ret = ckb_look_for_dep_with_hash2(code_hash, hash_type, &index);
  if (ret != CKB_SUCCESS) {
    return ret;
  }
  size_t bounds = ((size_t)offset << 32) | length;
  return syscall(SYS_ckb_exec, index, CKB_SOURCE_CELL_DEP, 0, bounds, argc,
                 argv);
}

int ckb_spawn(size_t index, size_t source, size_t bounds, int argc,
              const char* argv[], spawn_args_t* spgs) {
  return syscall(SYS_ckb_spawn, index, source, bounds, argc, argv, spgs);
}

int ckb_spawn_cell(const uint8_t* code_hash, uint8_t hash_type, uint32_t offset,
                   uint32_t length, int argc, const char* argv[],
                   spawn_args_t* spgs) {
  size_t index = SIZE_MAX;
  int ret = ckb_look_for_dep_with_hash2(code_hash, hash_type, &index);
  if (ret != CKB_SUCCESS) {
    return ret;
  }
  size_t bounds = ((size_t)offset << 32) | length;
  return ckb_spawn(index, CKB_SOURCE_CELL_DEP, bounds, argc, argv, spgs);
}

int ckb_get_memory_limit() {
  return syscall(SYS_ckb_get_memory_limit, 0, 0, 0, 0, 0, 0);
}

int ckb_set_content(uint8_t* content, uint64_t* length) {
  return syscall(SYS_ckb_set_content, content, length, 0, 0, 0, 0);
}

int ckb_current_memory() {
  return syscall(SYS_ckb_current_memory, 0, 0, 0, 0, 0, 0);
}

int ckb_load_block_extension(void* addr, uint64_t* len, size_t offset, size_t index, size_t source) {
  return syscall(SYS_ckb_load_block_extension, addr, len, offset, index, source, 0);
}

#endif /* CKB_STDLIB_NO_SYSCALL_IMPL */

#endif /* CKB_C_STDLIB_CKB_SYSCALLS_H_ */


================================================
File: deps/ckb-c-stdlib/ckb_type_id.h
================================================
#ifndef CKB_C_STDLIB_CKB_TYPE_ID_H_
#define CKB_C_STDLIB_CKB_TYPE_ID_H_

#include <string.h>

#include "blake2b.h"
#include "blockchain.h"
#include "ckb_syscalls.h"

// Given a 32-byte type id, this function validates if
// current transaction confronts to the type ID rules.
int ckb_validate_type_id(const uint8_t type_id[32]);
// Loading type ID from current script args, type_id must be at least 32 byte
// long.
int ckb_load_type_id_from_script_args(size_t offset, uint8_t type_id[32]);

#ifndef CKB_TYPE_ID_DECLARATION_ONLY

#ifdef CKB_TYPE_ID_DEBUG
#define DEBUG(s) ckb_debug(s)
#else
#define DEBUG(s)
#endif /* CKB_TYPE_ID_DEBUG */

int ckb_load_type_id_from_script_args(size_t offset, uint8_t type_id[32]) {
  // TODO: it is possible to simply load the script header, then only load the
  // 32 byte requested data based on offsets.
  uint8_t current_script[32768];
  uint64_t len = 32768;
  int ret = ckb_load_script(current_script, &len, 0);
  if (ret != CKB_SUCCESS) {
    DEBUG("Cannot load current script!");
    return CKB_INVALID_DATA;
  }
  if (len > 32768) {
    DEBUG("Current script is too large!");
    return CKB_INVALID_DATA;
  }

  mol_seg_t script_seg;
  script_seg.ptr = (uint8_t*)current_script;
  script_seg.size = len;
  if (MolReader_Script_verify(&script_seg, false) != MOL_OK) {
    DEBUG("Corrupted data!");
    return CKB_INVALID_DATA;
  }

  mol_seg_t args_seg = MolReader_Script_get_args(&script_seg);
  mol_seg_t args_bytes_seg = MolReader_Bytes_raw_bytes(&args_seg);
  if (offset + 32 > args_bytes_seg.size) {
    DEBUG("Length of type id is incorrect!");
    return CKB_INVALID_DATA;
  }
  memcpy(type_id, &args_bytes_seg.ptr[offset], 32);
  return CKB_SUCCESS;
}

// 1 for true, 0 for false
int _ckb_has_type_id_cell(size_t index, int is_input) {
  uint64_t len = 0;
  size_t source =
      is_input == 1 ? CKB_SOURCE_GROUP_INPUT : CKB_SOURCE_GROUP_OUTPUT;
  int ret = ckb_load_cell(NULL, &len, 0, index, source);
  return ret == CKB_SUCCESS ? 1 : 0;
}

int _ckb_locate_first_type_id_output_index(uint64_t* index) {
  uint8_t current_script_hash[32];
  uint64_t len = 32;
  int ret = ckb_load_script_hash(current_script_hash, &len, 0);
  if (ret != CKB_SUCCESS) {
    DEBUG("Error loading current script hash!");
    return ret;
  }
  if (len != 32) {
    DEBUG("Invalid script hash length!");
    return CKB_INVALID_DATA;
  }

  uint64_t i = 0;
  while (1) {
    uint8_t buffer[32];
    len = 32;
    ret = ckb_load_cell_by_field(buffer, &len, 0, i, CKB_SOURCE_OUTPUT,
                                 CKB_CELL_FIELD_TYPE_HASH);

    if (ret != CKB_SUCCESS) {
      if (ret != CKB_ITEM_MISSING) {
        DEBUG("Error fetching output type hash to locate type id index!");
        return ret;
      } else {
        // type script hash can be missing, it's not error
        i += 1;
        continue;
      }
    }
    if (len != 32) {
      DEBUG("Invalid type hash length!");
      return CKB_INVALID_DATA;
    }
    if (memcmp(buffer, current_script_hash, 32) == 0) {
      break;
    }
    i += 1;
  }
  *index = i;
  return CKB_SUCCESS;
}

int ckb_validate_type_id(const uint8_t type_id[32]) {
  int has_second_type_id_input = _ckb_has_type_id_cell(1, 1);
  int has_second_type_id_output = _ckb_has_type_id_cell(1, 0);
  if (has_second_type_id_input || has_second_type_id_output) {
    DEBUG(
        "There can only be at most one input and at most one output type ID "
        "cell!");
    return CKB_INVALID_DATA;
  }

  int has_first_type_id_input = _ckb_has_type_id_cell(0, 1);
  if (!has_first_type_id_input) {
    // We are creating a new type ID cell here. Additional checkings are needed
    // to ensure the type ID is legit.
    uint64_t index = 0xFFFFFFFFFFFFFFFF;
    int ret = _ckb_locate_first_type_id_output_index(&index);
    if (ret != CKB_SUCCESS) {
      return ret;
    }
    // The type ID is calculated as the blake2b (with CKB's personalization) of
    // the first CellInput in current transaction, and the created output cell
    // index(in 64-bit little endian unsigned integer).
    uint8_t buffer[128];
    uint64_t len = 128;
    ret = ckb_checked_load_input(buffer, &len, 0, 0, CKB_SOURCE_INPUT);
    if (ret != CKB_SUCCESS) {
      DEBUG("Cannot load the first input of the transaction!");
      return ret;
    }
    blake2b_state blake2b_ctx;
    ckb_blake2b_init(&blake2b_ctx, 32);
    blake2b_update(&blake2b_ctx, buffer, len);
    blake2b_update(&blake2b_ctx, (uint8_t*)(&index), sizeof(index));
    uint8_t expected_type_id[32];
    blake2b_final(&blake2b_ctx, expected_type_id, 32);
    if (memcmp(expected_type_id, type_id, 32) != 0) {
      DEBUG("Invalid type ID!");
      return CKB_INVALID_DATA;
    }
  }
  return CKB_SUCCESS;
}

#endif /* CKB_TYPE_ID_DECLARATION_ONLY */

#endif /* CKB_C_STDLIB_CKB_TYPE_ID_H_ */


================================================
File: deps/ckb-c-stdlib/ckb_utils.h
================================================
/*
utils.h

Defines basic utility functions.
*/

#ifndef CKB_C_STDLIB_CKB_UTILS_H_
#define CKB_C_STDLIB_CKB_UTILS_H_

#include "stddef.h"

/* a and b are since value,
 return 0 if a is equals to b,
 return -1 if a is less than b,
 return 1 if a is greater than b */
int ckb_epoch_number_with_fraction_cmp(uint64_t a, uint64_t b) {
  static const size_t NUMBER_OFFSET = 0;
  static const size_t NUMBER_BITS = 24;
  static const uint64_t NUMBER_MAXIMUM_VALUE = (1 << NUMBER_BITS);
  static const uint64_t NUMBER_MASK = (NUMBER_MAXIMUM_VALUE - 1);
  static const size_t INDEX_OFFSET = NUMBER_BITS;
  static const size_t INDEX_BITS = 16;
  static const uint64_t INDEX_MAXIMUM_VALUE = (1 << INDEX_BITS);
  static const uint64_t INDEX_MASK = (INDEX_MAXIMUM_VALUE - 1);
  static const size_t LENGTH_OFFSET = NUMBER_BITS + INDEX_BITS;
  static const size_t LENGTH_BITS = 16;
  static const uint64_t LENGTH_MAXIMUM_VALUE = (1 << LENGTH_BITS);
  static const uint64_t LENGTH_MASK = (LENGTH_MAXIMUM_VALUE - 1);

  /* extract a epoch */
  uint64_t a_epoch = (a >> NUMBER_OFFSET) & NUMBER_MASK;
  uint64_t a_index = (a >> INDEX_OFFSET) & INDEX_MASK;
  uint64_t a_len = (a >> LENGTH_OFFSET) & LENGTH_MASK;

  /* extract b epoch */
  uint64_t b_epoch = (b >> NUMBER_OFFSET) & NUMBER_MASK;
  uint64_t b_index = (b >> INDEX_OFFSET) & INDEX_MASK;
  uint64_t b_len = (b >> LENGTH_OFFSET) & LENGTH_MASK;

  if (a_epoch < b_epoch) {
    return -1;
  } else if (a_epoch > b_epoch) {
    return 1;
  } else {
    /* a and b is in the same epoch,
       compare a_index / a_len <=> b_index / b_len
     */
    uint64_t a_block = a_index * b_len;
    uint64_t b_block = b_index * a_len;
    /* compare block */
    if (a_block < b_block) {
      return -1;
    } else if (a_block > b_block) {
      return 1;
    } else {
      return 0;
    }
  }
}

#define CKB_SINCE_VALUE_BITS 56
#define CKB_SINCE_VALUE_MASK 0x00ffffffffffffff
#define CKB_SINCE_FLAG_METRIC_MASK 0b01100000
#define CKB_SINCE_EPOCH_FRACTION_FLAG 0b00100000

/*
 * Compare since, comparable is set to 1 when the
 * a and b since values have the same flags, otherwise comparable is set to 0.
 *
 * Return value only has meaning when the comparable is set to 1:
 * return 0 if a is equals to b,
 * return -1 if a is less than b,
 * return 1 if a is greater than b
 */
int ckb_since_cmp(uint64_t a, uint64_t b, int *comparable) {
  uint8_t a_flag = a >> CKB_SINCE_VALUE_BITS;
  uint8_t b_flag = b >> CKB_SINCE_VALUE_BITS;
  if (a_flag != b_flag) {
    *comparable = 0;
    return 0;
  }
  *comparable = 1;
  if ((a_flag & CKB_SINCE_FLAG_METRIC_MASK) == CKB_SINCE_EPOCH_FRACTION_FLAG) {
    return ckb_epoch_number_with_fraction_cmp(a, b);
  } else {
    uint64_t a_value = a & CKB_SINCE_VALUE_MASK;
    uint64_t b_value = b & CKB_SINCE_VALUE_MASK;
    if (a_value < b_value) {
      return -1;
    } else if (a_value > b_value) {
      return 1;
    } else {
      return 0;
    }
  }
}

/*
 * A temporal patch to solve https://github.com/nervosnetwork/ckb-vm/issues/97.
 * If you use a ckb-vm >= 0.20.x, you can safely ignore it. A common practice
 * is that use CKB_SP_ALIGN in the first line of the main(), and then use
 * CKB_SP_ALIGN_END before exiting.
 *
 * Example:
 *   int main() {
 *     CKB_SP_ALIGN;
 *     ...
 *     if cond {
 *       CKB_SP_ALIGN_END;
 *       return 1;
 *     }
 *     ...
 *     CKB_SP_ALIGN_END;
 *     return 0;
 *   }
 */
#define CKB_SP_ALIGN                      \
  __asm__(                                \
      "addi t0, sp, 0\n"                  \
      "andi sp, sp, 0xfffffffffffffff8\n" \
      "sd t0, -8(sp)\n"                   \
      "sd t0, -16(sp)\n"                  \
      "addi sp, sp, -8\n"                 \
      "andi sp, sp, 0xfffffffffffffff0"   \
      :                                   \
      :                                   \
      : "t0")
#define CKB_SP_ALIGN_END __asm__("ld sp, 0(sp)")

#endif /* CKB_C_STDLIB_CKB_UTILS_H_ */


================================================
File: deps/ckb-c-stdlib/.git
================================================
gitdir: ../../.git/modules/deps/ckb-c-stdlib


================================================
File: deps/ckb-c-stdlib/.gitignore
================================================
# Prerequisites
*.d

# Object files
*.o
*.ko
*.obj
*.elf

# Linker output
*.ilk
*.map
*.exp

# Precompiled Headers
*.gch
*.pch

# Libraries
*.lib
*.a
*.la
*.lo

# Shared objects (inc. Windows DLLs)
*.dll
*.so
*.so.*
*.dylib

# Executables
*.exe
*.out
*.app
*.i*86
*.x86_64
*.hex

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Kernel Module Compile Results
*.mod*
*.cmd
.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf
simulator/build.simulator


================================================
File: deps/ckb-c-stdlib/.travis.yml
================================================
language: c
dist: bionic
sudo: true

git:
  depth: 2

addons:
  apt:
    packages:
      - clang-format

matrix:
  include:
    - name: Format
      script:
        - make fmt


================================================
File: deps/ckb-c-stdlib/libc/entry.h
================================================
#ifndef CKB_C_STDLIB_ENTRY_H_
#define CKB_C_STDLIB_ENTRY_H_

#ifndef CKB_DECLARATION_ONLY
#include "src/impl.c"

#ifndef __SHARED_LIBRARY__
__attribute__((visibility("default"))) __attribute__((naked)) void _start() {
  asm volatile(
      ".option push\n"
      ".option norelax\n"
#ifndef CKB_NO_ENTRY_GP
      "1:auipc gp, %pcrel_hi(__global_pointer$)\n"
      "addi gp, gp, %pcrel_lo(1b)\n"
      ".option pop\n"
#endif
      /*
       * By default CKB VM initializes all memory to 0, there's no need
       * to clear BSS segment again.
       */
      "lw a0, 0(sp)\n"
      "addi a1, sp, 8\n"
      "li a2, 0\n"
      "call main\n"
      "li a7, 93\n"
      "ecall");
}
#endif /* __SHARED_LIBRARY__ */
#endif /* CKB_DECLARATION_ONLY*/

#endif /* CKB_C_STDLIB_ENTRY_H_ */


================================================
File: deps/ckb-c-stdlib/libc/limits.h
================================================
#ifndef HEADER__LIBC_LIMITS_H_
#define HEADER__LIBC_LIMITS_H_ 1

#ifdef _MB_LEN_MAX
#define MB_LEN_MAX _MB_LEN_MAX
#else
#define MB_LEN_MAX 1
#endif

/* Maximum number of positional arguments, if _WANT_IO_POS_ARGS.  */
#ifndef NL_ARGMAX
#define NL_ARGMAX 32
#endif

/* Number of bits in a `char'.  */
#undef CHAR_BIT
#define CHAR_BIT 8

/* Minimum and maximum values a `signed char' can hold.  */
#undef SCHAR_MIN
#define SCHAR_MIN (-128)
#undef SCHAR_MAX
#define SCHAR_MAX 127

/* Maximum value an `unsigned char' can hold.  (Minimum is 0).  */
#undef UCHAR_MAX
#define UCHAR_MAX 255

/* Minimum and maximum values a `char' can hold.  */
#ifdef __CHAR_UNSIGNED__
#undef CHAR_MIN
#define CHAR_MIN 0
#undef CHAR_MAX
#define CHAR_MAX 255
#else
#undef CHAR_MIN
#define CHAR_MIN (-128)
#undef CHAR_MAX
#define CHAR_MAX 127
#endif

/* Minimum and maximum values a `signed short int' can hold.  */
#undef SHRT_MIN
/* For the sake of 16 bit hosts, we may not use -32768 */
#define SHRT_MIN (-32767 - 1)
#undef SHRT_MAX
#define SHRT_MAX 32767

/* Maximum value an `unsigned short int' can hold.  (Minimum is 0).  */
#undef USHRT_MAX
#define USHRT_MAX 65535

/* Minimum and maximum values a `signed int' can hold.  */
#ifndef __INT_MAX__
#define __INT_MAX__ 2147483647
#endif
#undef INT_MIN
#define INT_MIN (-INT_MAX - 1)
#undef INT_MAX
#define INT_MAX __INT_MAX__

/* Maximum value an `unsigned int' can hold.  (Minimum is 0).  */
#undef UINT_MAX
#define UINT_MAX (INT_MAX * 2U + 1)

/* Minimum and maximum values a `signed long int' can hold.
   (Same as `int').  */
#ifndef __LONG_MAX__
#if defined(__alpha__) || (defined(__sparc__) && defined(__arch64__)) || \
    defined(__sparcv9)
#define __LONG_MAX__ 9223372036854775807L
#else
#define __LONG_MAX__ 2147483647L
#endif /* __alpha__ || sparc64 */
#endif
#undef LONG_MIN
#define LONG_MIN (-LONG_MAX - 1)
#undef LONG_MAX
#define LONG_MAX __LONG_MAX__

/* Maximum value an `unsigned long int' can hold.  (Minimum is 0).  */
#undef ULONG_MAX
#define ULONG_MAX (LONG_MAX * 2UL + 1)

#ifndef __LONG_LONG_MAX__
#define __LONG_LONG_MAX__ 9223372036854775807LL
#endif

#if __ISO_C_VISIBLE >= 1999
/* Minimum and maximum values a `signed long long int' can hold.  */
#undef LLONG_MIN
#define LLONG_MIN (-LLONG_MAX - 1)
#undef LLONG_MAX
#define LLONG_MAX __LONG_LONG_MAX__

/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */
#undef ULLONG_MAX
#define ULLONG_MAX (LLONG_MAX * 2ULL + 1)
#endif

#if __GNU_VISIBLE
/* Minimum and maximum values a `signed long long int' can hold.  */
#undef LONG_LONG_MIN
#define LONG_LONG_MIN (-LONG_LONG_MAX - 1)
#undef LONG_LONG_MAX
#define LONG_LONG_MAX __LONG_LONG_MAX__

/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */
#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1)
#endif

#endif /* _LIBC_LIMITS_H_  */

#ifndef _POSIX2_RE_DUP_MAX
/* The maximum number of repeated occurrences of a regular expression
 *    permitted when using the interval notation `\{M,N\}'.  */
#define _POSIX2_RE_DUP_MAX 255
#endif /* _POSIX2_RE_DUP_MAX  */

#ifndef ARG_MAX
#define ARG_MAX 4096
#endif

#ifndef PATH_MAX
#define PATH_MAX 4096
#endif


================================================
File: deps/ckb-c-stdlib/libc/memory.h
================================================
#include <entry.h>
#include <string.h>


================================================
File: deps/ckb-c-stdlib/libc/stdarg.h
================================================
#ifndef CKB_C_STDLIB_STDARG_H_
#define CKB_C_STDLIB_STDARG_H_

#define va_start(v, l) __builtin_va_start(v, l)
#define va_end(v) __builtin_va_end(v)
#define va_arg(v, l) __builtin_va_arg(v, l)
#define __va_copy(d, s) __builtin_va_copy(d, s)
#define va_list __builtin_va_list

#endif /* CKB_C_STDLIB_STDARG_H_ */


================================================
File: deps/ckb-c-stdlib/libc/stdbool.h
================================================
#ifndef CKB_C_STDLIB_STDBOOL_H_
#define CKB_C_STDLIB_STDBOOL_H_
#include <entry.h>

#define true 1
#define false 0
#define bool _Bool

#endif /* CKB_C_STDLIB_STDBOOL_H_ */


================================================
File: deps/ckb-c-stdlib/libc/stddef.h
================================================
#ifndef CKB_C_STDLIB_STDDEF_H_
#define CKB_C_STDLIB_STDDEF_H_

#include "internal/types.h"
#define NULL ((void*)0)
#include <entry.h>

#endif /* CKB_C_STDLIB_STDDEF_H_ */


================================================
File: deps/ckb-c-stdlib/libc/stdint.h
================================================
#ifndef CKB_C_STDLIB_STDINT_H_
#define CKB_C_STDLIB_STDINT_H_

#include <entry.h>

#include "internal/types.h"

#define INT8_MIN (-1 - 0x7f)
#define INT16_MIN (-1 - 0x7fff)
#define INT32_MIN (-1 - 0x7fffffff)
#define INT64_MIN (-1 - 0x7fffffffffffffff)

#define INT8_MAX (0x7f)
#define INT16_MAX (0x7fff)
#define INT32_MAX (0x7fffffff)
#define INT64_MAX (0x7fffffffffffffff)

#define UINT8_MAX (0xff)
#define UINT16_MAX (0xffff)
#define UINT32_MAX (0xffffffffu)
#define UINT64_MAX (0xffffffffffffffffu)

#define SIZE_MAX UINT64_MAX

#endif /* CKB_C_STDLIB_STDINT_H_ */


================================================
File: deps/ckb-c-stdlib/libc/stdio.h
================================================
///////////////////////////////////////////////////////////////////////////////
// \author (c) Marco Paland (info@paland.com)
//             2014-2019, PALANDesign Hannover, Germany
//
// \license The MIT License (MIT)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
// \brief Tiny printf, sprintf and (v)snprintf implementation, optimized for
// speed on
//        embedded systems with a very limited resources. These routines are
//        thread safe and reentrant! Use this instead of the bloated
//        standard/newlib printf cause these use malloc for printf (and may not
//        be thread safe).
//
///////////////////////////////////////////////////////////////////////////////

#ifndef CKB_C_STDLIB_STDIO_H_
#define CKB_C_STDLIB_STDIO_H_
#include <entry.h>

/*
 * This function uses `ckb_debug` syscall to output formatted messages.
 *
 * Pass `-D CKB_C_STDLIB_PRINTF` flag to GCC to enable printf;
 * If the flag is undefined the printf will be compiled as an empty function.
 *
 * Some versions of GCC raise errors on compiling since those versions have a
 * built-in printf function; pass `-fno-builtin-printf` flag to GCC to fix the
 * compiling.
 */
int printf(const char* format, ...);
/*
 * This function uses `ckb_debug` syscall to output formatted messages.
 *
 * Pass `-D CKB_C_STDLIB_PRINTF` flag to GCC to enable ckb_printf;
 * If the flag is undefined the ckb_printf will be compiled as an empty
 * function.
 */
int ckb_printf(const char* format, ...);
int ckb_debug(const char* s);

#endif /* CKB_C_STDLIB_STDIO_H_ */


================================================
File: deps/ckb-c-stdlib/libc/stdlib.h
================================================
#ifndef CKB_C_STDLIB_STDLIB_H_
#define CKB_C_STDLIB_STDLIB_H_
#include <entry.h>
#include <internal/types.h>

void *malloc(size_t size);
void free(void *ptr);
void *calloc(size_t nmemb, size_t size);
void *realloc(void *ptr, size_t size);
typedef int (*cmpfun)(const void *, const void *);
void qsort(void *base, size_t nel, size_t width, cmpfun cmp);
int rand(void);
void *bsearch(const void *key, const void *base, size_t nel, size_t width,
              int (*cmp)(const void *, const void *));

#endif /* CKB_C_STDLIB_STDLIB_H_ */


================================================
File: deps/ckb-c-stdlib/libc/string.h
================================================
#ifndef CKB_C_STDLIB_STRING_H_
#define CKB_C_STDLIB_STRING_H_

#include <entry.h>
#include <internal/types.h>

void *memset(void *dest, int c, size_t n);
void *memcpy(void *restrict dest, const void *restrict src, size_t n);
void *memmove(void *dest, const void *src, size_t n);
int memcmp(const void *vl, const void *vr, size_t n);
char *strcpy(char *restrict d, const char *restrict s);
size_t strlen(const char *s);
int strcmp(const char *l, const char *r);
char *strstr(const char *, const char *);

#endif /* CKB_C_STDLIB_STRING_H_ */


================================================
File: deps/ckb-c-stdlib/libc/internal/atomic.h
================================================
#ifndef CKB_C_STDLIB_INTERNAL_ATOMIC_H_
#define CKB_C_STDLIB_INTERNAL_ATOMIC_H_
#include <internal/types.h>

/*
 * Modified from
 * https://git.musl-libc.org/cgit/musl/tree/src/internal/atomic.h?id=33338ebc853d37c80f0f236cc7a92cb0acc6aace
 */
static inline int a_ctz_32(uint32_t x) {
  static const char debruijn32[32] = {
      0,  1,  23, 2,  29, 24, 19, 3,  30, 27, 25, 11, 20, 8, 4,  13,
      31, 22, 28, 18, 26, 10, 7,  12, 21, 17, 9,  6,  16, 5, 15, 14};
  return debruijn32[(x & -x) * 0x076be629 >> 27];
}

static inline int a_ctz_64(uint64_t x) {
  static const char debruijn64[64] = {
      0,  1,  2,  53, 3,  7,  54, 27, 4,  38, 41, 8,  34, 55, 48, 28,
      62, 5,  39, 46, 44, 42, 22, 9,  24, 35, 59, 56, 49, 18, 29, 11,
      63, 52, 6,  26, 37, 40, 33, 47, 61, 45, 43, 21, 23, 58, 17, 10,
      51, 25, 36, 32, 60, 20, 57, 16, 50, 31, 19, 15, 30, 14, 13, 12};
  if (sizeof(long) < 8) {
    uint32_t y = x;
    if (!y) {
      y = x >> 32;
      return 32 + a_ctz_32(y);
    }
    return a_ctz_32(y);
  }
  return debruijn64[(x & -x) * 0x022fdd63cc95386dull >> 58];
}

static inline int a_ctz_l(unsigned long x) {
  return (sizeof(long) < 8) ? a_ctz_32(x) : a_ctz_64(x);
}

#endif /* CKB_C_STDLIB_INTERNAL_ATOMIC_H_ */


================================================
File: deps/ckb-c-stdlib/libc/internal/types.h
================================================
#ifndef CKB_C_STDLIB_INTERNAL_TYPES_H_
#define CKB_C_STDLIB_INTERNAL_TYPES_H_

typedef unsigned long size_t;
typedef signed long ssize_t;

typedef unsigned long uintptr_t;
typedef signed long intptr_t;

typedef unsigned char uint8_t;
typedef signed char int8_t;

typedef unsigned short uint16_t;
typedef signed short int16_t;

typedef unsigned int uint32_t;
typedef signed int int32_t;

typedef unsigned long uint64_t;
typedef signed long int64_t;

#endif  /* CKB_C_STDLIB_INTERNAL_TYPES_H_ */


================================================
File: deps/ckb-c-stdlib/libc/src/impl.c
================================================
//
// If you have only one single C file, you can include std header files in it,
// and then done. It automatically includes impl.c(this file). It is compatible
// to a lot of old CKB code.
//
// If you have more than one C file, and it's a big project. You need to define
// macro CKB_DECLARATION_ONLY for every C files. Compile very C file, together
// with this impl.c (compiled *without* macro CKB_DECLARATION_ONLY) and then
// link them together.
//

#ifndef __CKB_IMPL_INCLUDED__
#define __CKB_IMPL_INCLUDED__

#include <internal/atomic.h>
#include <internal/types.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

/*
 * The implementation here is based on musl-libc with modifications for our
 * use case. The original musl-libc follows MIT license, thanks to the authors
 * for the creation.
 */

void *memset(void *dest, int c, size_t n) {
  unsigned char *s = dest;
#ifndef __OPTIMIZE_SIZE__
  size_t k;

  /* Fill head and tail with minimal branching. Each
   * conditional ensures that all the subsequently used
   * offsets are well-defined and in the dest region. */

  if (!n) return dest;
  s[0] = c;
  s[n - 1] = c;
  if (n <= 2) return dest;
  s[1] = c;
  s[2] = c;
  s[n - 2] = c;
  s[n - 3] = c;
  if (n <= 6) return dest;
  s[3] = c;
  s[n - 4] = c;
  if (n <= 8) return dest;

  /* Advance pointer to align it at a 4-byte boundary,
   * and truncate n to a multiple of 4. The previous code
   * already took care of any head/tail that get cut off
   * by the alignment. */

  k = -(uintptr_t)s & 3;
  s += k;
  n -= k;
  n &= -4;

#ifdef __GNUC__
  typedef uint32_t __attribute__((__may_alias__)) u32;
  typedef uint64_t __attribute__((__may_alias__)) u64;

  u32 c32 = ((u32)-1) / 255 * (unsigned char)c;

  /* In preparation to copy 32 bytes at a time, aligned on
   * an 8-byte bounary, fill head/tail up to 28 bytes each.
   * As in the initial byte-based head/tail fill, each
   * conditional below ensures that the subsequent offsets
   * are valid (e.g. !(n<=24) implies n>=28). */

  *(u32 *)(s + 0) = c32;
  *(u32 *)(s + n - 4) = c32;
  if (n <= 8) return dest;
  *(u32 *)(s + 4) = c32;
  *(u32 *)(s + 8) = c32;
  *(u32 *)(s + n - 12) = c32;
  *(u32 *)(s + n - 8) = c32;
  if (n <= 24) return dest;
  *(u32 *)(s + 12) = c32;
  *(u32 *)(s + 16) = c32;
  *(u32 *)(s + 20) = c32;
  *(u32 *)(s + 24) = c32;
  *(u32 *)(s + n - 28) = c32;
  *(u32 *)(s + n - 24) = c32;
  *(u32 *)(s + n - 20) = c32;
  *(u32 *)(s + n - 16) = c32;

  /* Align to a multiple of 8 so we can fill 64 bits at a time,
   * and avoid writing the same bytes twice as much as is
   * practical without introducing additional branching. */

  k = 24 + ((uintptr_t)s & 4);
  s += k;
  n -= k;

  /* If this loop is reached, 28 tail bytes have already been
   * filled, so any remainder when n drops below 32 can be
   * safely ignored. */

  u64 c64 = c32 | ((u64)c32 << 32);
  for (; n >= 32; n -= 32, s += 32) {
    *(u64 *)(s + 0) = c64;
    *(u64 *)(s + 8) = c64;
    *(u64 *)(s + 16) = c64;
    *(u64 *)(s + 24) = c64;
  }
#else
  /* Pure C fallback with no aliasing violations. */
  for (; n; n--, s++) *s = c;
#endif

#else
  for (; n; n--, s++) *s = c;
#endif /* __OPTIMIZE_SIZE__ */

  return dest;
}

void *memcpy(void *restrict dest, const void *restrict src, size_t n) {
  unsigned char *d = dest;
  const unsigned char *s = src;

#if defined(__GNUC__) && (!defined(__OPTIMIZE_SIZE__))

#if __BYTE_ORDER == __LITTLE_ENDIAN
#define LS >>
#define RS <<
#else
#define LS <<
#define RS >>
#endif

  typedef uint32_t __attribute__((__may_alias__)) u32;
  uint32_t w, x;

  for (; (uintptr_t)s % 4 && n; n--) *d++ = *s++;

  if ((uintptr_t)d % 4 == 0) {
    for (; n >= 16; s += 16, d += 16, n -= 16) {
      *(u32 *)(d + 0) = *(u32 *)(s + 0);
      *(u32 *)(d + 4) = *(u32 *)(s + 4);
      *(u32 *)(d + 8) = *(u32 *)(s + 8);
      *(u32 *)(d + 12) = *(u32 *)(s + 12);
    }
    if (n & 8) {
      *(u32 *)(d + 0) = *(u32 *)(s + 0);

      *(u32 *)(d + 4) = *(u32 *)(s + 4);
      d += 8;
      s += 8;
    }
    if (n & 4) {
      *(u32 *)(d + 0) = *(u32 *)(s + 0);
      d += 4;
      s += 4;
    }
    if (n & 2) {
      *d++ = *s++;
      *d++ = *s++;
    }
    if (n & 1) {
      *d = *s;
    }
    return dest;
  }

  if (n >= 32) switch ((uintptr_t)d % 4) {
      case 1:
        w = *(u32 *)s;
        *d++ = *s++;
        *d++ = *s++;
        *d++ = *s++;
        n -= 3;
        for (; n >= 17; s += 16, d += 16, n -= 16) {
          x = *(u32 *)(s + 1);
          *(u32 *)(d + 0) = (w LS 24) | (x RS 8);
          w = *(u32 *)(s + 5);
          *(u32 *)(d + 4) = (x LS 24) | (w RS 8);
          x = *(u32 *)(s + 9);
          *(u32 *)(d + 8) = (w LS 24) | (x RS 8);
          w = *(u32 *)(s + 13);
          *(u32 *)(d + 12) = (x LS 24) | (w RS 8);
        }
        break;
      case 2:
        w = *(u32 *)s;
        *d++ = *s++;
        *d++ = *s++;
        n -= 2;
        for (; n >= 18; s += 16, d += 16, n -= 16) {
          x = *(u32 *)(s + 2);
          *(u32 *)(d + 0) = (w LS 16) | (x RS 16);
          w = *(u32 *)(s + 6);
          *(u32 *)(d + 4) = (x LS 16) | (w RS 16);
          x = *(u32 *)(s + 10);
          *(u32 *)(d + 8) = (w LS 16) | (x RS 16);
          w = *(u32 *)(s + 14);
          *(u32 *)(d + 12) = (x LS 16) | (w RS 16);
        }
        break;
      case 3:
        w = *(u32 *)s;
        *d++ = *s++;
        n -= 1;
        for (; n >= 19; s += 16, d += 16, n -= 16) {
          x = *(u32 *)(s + 3);
          *(u32 *)(d + 0) = (w LS 8) | (x RS 24);
          w = *(u32 *)(s + 7);
          *(u32 *)(d + 4) = (x LS 8) | (w RS 24);
          x = *(u32 *)(s + 11);
          *(u32 *)(d + 8) = (w LS 8) | (x RS 24);
          w = *(u32 *)(s + 15);
          *(u32 *)(d + 12) = (x LS 8) | (w RS 24);
        }
        break;
    }
  if (n & 16) {
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
  }
  if (n & 8) {
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
  }
  if (n & 4) {
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
    *d++ = *s++;
  }
  if (n & 2) {
    *d++ = *s++;
    *d++ = *s++;
  }
  if (n & 1) {
    *d = *s;
  }
  return dest;
#endif

  for (; n; n--) *d++ = *s++;
  return dest;
}

int memcmp(const void *vl, const void *vr, size_t n) {
  const unsigned char *l = vl, *r = vr;
  for (; n && *l == *r; n--, l++, r++)
    ;
  return n ? *l - *r : 0;
}

#ifdef __GNUC__
typedef __attribute__((__may_alias__)) size_t WT;
#define WS (sizeof(WT))
#endif

void *memmove(void *dest, const void *src, size_t n) {
  char *d = dest;
  const char *s = src;

  if (d == s) return d;
  if ((uintptr_t)s - (uintptr_t)d - n <= -2 * n) return memcpy(d, s, n);

  if (d < s) {
#ifdef __GNUC__
    if ((uintptr_t)s % WS == (uintptr_t)d % WS) {
      while ((uintptr_t)d % WS) {
        if (!n--) return dest;
        *d++ = *s++;
      }
      for (; n >= WS; n -= WS, d += WS, s += WS) *(WT *)d = *(WT *)s;
    }
#endif
    for (; n; n--) *d++ = *s++;
  } else {
#ifdef __GNUC__
    if ((uintptr_t)s % WS == (uintptr_t)d % WS) {
      while ((uintptr_t)(d + n) % WS) {
        if (!n--) return dest;
        d[n] = s[n];
      }
      while (n >= WS) n -= WS, *(WT *)(d + n) = *(WT *)(s + n);
    }
#endif
    while (n) n--, d[n] = s[n];
  }

  return dest;
}

char *strcpy(char *restrict d, const char *restrict s) {
  char *dest = d;
  for (; (*d = *s); s++, d++)
    ;
  return dest;
}

size_t strlen(const char *s) {
  const char *a = s;
  for (; *s; s++)
    ;
  return s - a;
}

int strcmp(const char *l, const char *r) {
  for (; *l == *r && *l; l++, r++)
    ;
  return *(unsigned char *)l - *(unsigned char *)r;
}

#ifdef CKB_MALLOC_DECLARATION_ONLY
void *malloc(size_t size);
void free(void *ptr);
void *calloc(size_t nmemb, size_t size);
void *realloc(void *ptr, size_t size);
#else
void *malloc(size_t size) { return NULL; }
void free(void *ptr) {}
void *calloc(size_t nmemb, size_t size) { return NULL; }
void *realloc(void *ptr, size_t size) { return NULL; }
#endif

/*
 * qsort implementation below is modified from
 * https://git.musl-libc.org/cgit/musl/tree/src/stdlib/qsort.c?id=33338ebc853d37c80f0f236cc7a92cb0acc6aace
 */
/* Copyright (C) 2011 by Valentin Ochs
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/* Minor changes by Rich Felker for integration in musl, 2011-04-27. */

/* Smoothsort, an adaptive variant of Heapsort.  Memory usage: O(1).
   Run time: Worst case O(n log n), close to O(n) in the mostly-sorted case. */

#define ntz(x) a_ctz_l((x))

typedef int (*cmpfun)(const void *, const void *);

static inline int pntz(size_t p[2]) {
  int r = ntz(p[0] - 1);
  if (r != 0 || (r = 8 * sizeof(size_t) + ntz(p[1])) != 8 * sizeof(size_t)) {
    return r;
  }
  return 0;
}

#if defined(__GNUC__) && (__GNUC__ >= 12)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdangling-pointer"
#endif

static void cycle(size_t width, unsigned char *ar[], int n) {
  unsigned char tmp[256];
  size_t l;
  int i;

  if (n < 2) {
    return;
  }

  ar[n] = tmp;
  while (width) {
    l = sizeof(tmp) < width ? sizeof(tmp) : width;
    memcpy(ar[n], ar[0], l);
    for (i = 0; i < n; i++) {
      memcpy(ar[i], ar[i + 1], l);
      ar[i] += l;
    }
    width -= l;
  }
}

#if defined(__GNUC__) && (__GNUC__ >= 12)
#pragma GCC diagnostic pop
#endif

/* shl() and shr() need n > 0 */
static inline void shl(size_t p[2], int n) {
  if (n >= (int)(8 * sizeof(size_t))) {
    n -= 8 * sizeof(size_t);
    p[1] = p[0];
    p[0] = 0;
  }
  p[1] <<= n;
  p[1] |= p[0] >> (sizeof(size_t) * 8 - n);
  p[0] <<= n;
}

static inline void shr(size_t p[2], int n) {
  if (n >= (int)(8 * sizeof(size_t))) {
    n -= 8 * sizeof(size_t);
    p[0] = p[1];
    p[1] = 0;
  }
  p[0] >>= n;
  p[0] |= p[1] << (sizeof(size_t) * 8 - n);
  p[1] >>= n;
}

static void sift(unsigned char *head, size_t width, cmpfun cmp, int pshift,
                 size_t lp[]) {
  unsigned char *rt, *lf;
  unsigned char *ar[14 * sizeof(size_t) + 1];
  int i = 1;

  ar[0] = head;
  while (pshift > 1) {
    rt = head - width;
    lf = head - width - lp[pshift - 2];

    if ((*cmp)(ar[0], lf) >= 0 && (*cmp)(ar[0], rt) >= 0) {
      break;
    }
    if ((*cmp)(lf, rt) >= 0) {
      ar[i++] = lf;
      head = lf;
      pshift -= 1;
    } else {
      ar[i++] = rt;
      head = rt;
      pshift -= 2;
    }
  }
  cycle(width, ar, i);
}

static void trinkle(unsigned char *head, size_t width, cmpfun cmp, size_t pp[2],
                    int pshift, int trusty, size_t lp[]) {
  unsigned char *stepson, *rt, *lf;
  size_t p[2];
  unsigned char *ar[14 * sizeof(size_t) + 1];
  int i = 1;
  int trail;

  p[0] = pp[0];
  p[1] = pp[1];

  ar[0] = head;
  while (p[0] != 1 || p[1] != 0) {
    stepson = head - lp[pshift];
    if ((*cmp)(stepson, ar[0]) <= 0) {
      break;
    }
    if (!trusty && pshift > 1) {
      rt = head - width;
      lf = head - width - lp[pshift - 2];
      if ((*cmp)(rt, stepson) >= 0 || (*cmp)(lf, stepson) >= 0) {
        break;
      }
    }

    ar[i++] = stepson;
    head = stepson;
    trail = pntz(p);
    shr(p, trail);
    pshift += trail;
    trusty = 0;
  }
  if (!trusty) {
    cycle(width, ar, i);
    sift(head, width, cmp, pshift, lp);
  }
}

void qsort(void *base, size_t nel, size_t width, cmpfun cmp) {
  size_t lp[12 * sizeof(size_t)];
  size_t i, size = width * nel;
  unsigned char *head, *high;
  size_t p[2] = {1, 0};
  int pshift = 1;
  int trail;

  if (!size) return;

  head = base;
  high = head + size - width;

  /* Precompute Leonardo numbers, scaled by element width */
  for (lp[0] = lp[1] = width, i = 2;
       (lp[i] = lp[i - 2] + lp[i - 1] + width) < size; i++)
    ;

  while (head < high) {
    if ((p[0] & 3) == 3) {
      sift(head, width, cmp, pshift, lp);
      shr(p, 2);
      pshift += 2;
    } else {
      if (lp[pshift - 1] >= (size_t)(high - head)) {
        trinkle(head, width, cmp, p, pshift, 0, lp);
      } else {
        sift(head, width, cmp, pshift, lp);
      }

      if (pshift == 1) {
        shl(p, 1);
        pshift = 0;
      } else {
        shl(p, pshift - 1);
        pshift = 1;
      }
    }

    p[0] |= 1;
    head += width;
  }

  trinkle(head, width, cmp, p, pshift, 0, lp);

  while (pshift != 1 || p[0] != 1 || p[1] != 0) {
    if (pshift <= 1) {
      trail = pntz(p);
      shr(p, trail);
      pshift += trail;
    } else {
      shl(p, 2);
      pshift -= 2;
      p[0] ^= 7;
      shr(p, 1);
      trinkle(head - lp[pshift] - width, width, cmp, p, pshift + 1, 1, lp);
      shl(p, 1);
      p[0] |= 1;
      trinkle(head - width, width, cmp, p, pshift, 1, lp);
    }
    head -= width;
  }
}

//  bsearch implementation below is modified from
// http://git.musl-libc.org/cgit/musl/tree/src/stdlib/bsearch.c
void *bsearch(const void *key, const void *base, size_t nel, size_t width,
              int (*cmp)(const void *, const void *)) {
  void *try_v;
  int sign;
  while (nel > 0) {
    try_v = (char *)base + width * (nel / 2);
    sign = cmp(key, try_v);
    if (sign < 0) {
      nel /= 2;
    } else if (sign > 0) {
      base = (char *)try_v + width;
      nel -= nel / 2 + 1;
    } else {
      return try_v;
    }
  }
  return NULL;
}

// printf, pass -D CKB_C_STDLIB_PRINTF to enable printf
// default: disabled
#ifdef CKB_C_STDLIB_PRINTF

// Default PRINTF_BUFFER_SIZE
#ifndef CKB_C_STDLIB_PRINTF_BUFFER_SIZE
#define CKB_C_STDLIB_PRINTF_BUFFER_SIZE 256
#endif

// define this globally (e.g. gcc -DPRINTF_INCLUDE_CONFIG_H ...) to include the
// printf_config.h header file
// default: undefined
#ifdef PRINTF_INCLUDE_CONFIG_H
#include "printf_config.h"
#endif

// 'ntoa' conversion buffer size, this must be big enough to hold one converted
// numeric number including padded zeros (dynamically created on stack)
// default: 32 byte
#ifndef PRINTF_NTOA_BUFFER_SIZE
#define PRINTF_NTOA_BUFFER_SIZE 32U
#endif

// 'ftoa' conversion buffer size, this must be big enough to hold one converted
// float number including padded zeros (dynamically created on stack)
// default: 32 byte
#ifndef PRINTF_FTOA_BUFFER_SIZE
#define PRINTF_FTOA_BUFFER_SIZE 32U
#endif

// support for the floating point type (%f)
// default: activated
#ifndef PRINTF_DISABLE_SUPPORT_FLOAT
#define PRINTF_SUPPORT_FLOAT
#endif

// support for exponential floating point notation (%e/%g)
// default: activated
#ifndef PRINTF_DISABLE_SUPPORT_EXPONENTIAL
#define PRINTF_SUPPORT_EXPONENTIAL
#endif

// define the default floating point precision
// default: 6 digits
#ifndef PRINTF_DEFAULT_FLOAT_PRECISION
#define PRINTF_DEFAULT_FLOAT_PRECISION 6U
#endif

// define the largest float suitable to print with %f
// default: 1e9
#ifndef PRINTF_MAX_FLOAT
#define PRINTF_MAX_FLOAT 1e9
#endif

// support for the long long types (%llu or %p)
// default: activated
#ifndef PRINTF_DISABLE_SUPPORT_LONG_LONG
#define PRINTF_SUPPORT_LONG_LONG
#endif

// support for the ptrdiff_t type (%t)
// ptrdiff_t is normally defined in <stddef.h> as long or long long type
// default: disabled
#ifndef PRINTF_DISABLE_SUPPORT_PTRDIFF_T
#endif

///////////////////////////////////////////////////////////////////////////////

// internal flag definitions
#define FLAGS_ZEROPAD (1U << 0U)
#define FLAGS_LEFT (1U << 1U)
#define FLAGS_PLUS (1U << 2U)
#define FLAGS_SPACE (1U << 3U)
#define FLAGS_HASH (1U << 4U)
#define FLAGS_UPPERCASE (1U << 5U)
#define FLAGS_CHAR (1U << 6U)
#define FLAGS_SHORT (1U << 7U)
#define FLAGS_LONG (1U << 8U)
#define FLAGS_LONG_LONG (1U << 9U)
#define FLAGS_PRECISION (1U << 10U)
#define FLAGS_ADAPT_EXP (1U << 11U)

// output function type
typedef void (*out_fct_type)(char character, void *buffer, size_t idx,
                             size_t maxlen);

// wrapper (used as buffer) for output function type
typedef struct {
  void (*fct)(char character, void *arg);
  void *arg;
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void *buffer, size_t idx,
                               size_t maxlen) {
  if (idx < maxlen) {
    ((char *)buffer)[idx] = character;
  }
}

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx,
                             size_t maxlen) {
  (void)character;
  (void)buffer;
  (void)idx;
  (void)maxlen;
}

// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx,
                            size_t maxlen) {
  (void)idx;
  (void)maxlen;
  if (character) {
    // buffer is the output fct pointer
    ((out_fct_wrap_type *)buffer)
        ->fct(character, ((out_fct_wrap_type *)buffer)->arg);
  }
}

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by
// 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize) {
  const char *s;
  for (s = str; *s && maxsize--; ++s)
    ;
  return (unsigned int)(s - str);
}

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str) {
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
  }
  return i;
}

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx,
                       size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    for (size_t i = len; i < width; i++) {
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx,
                           size_t maxlen, char *buf, size_t len, bool negative,
                           unsigned int base, unsigned int prec,
                           unsigned int width, unsigned int flags) {
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) &&
        (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) &&
           (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    if (!(flags & FLAGS_PRECISION) && len &&
        ((len == prec) || (len == width))) {
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) &&
        (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'x';
    } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) &&
               (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    } else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    if (negative) {
      buf[len++] = '-';
    } else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    } else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx,
                         size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec,
                         unsigned int width, unsigned int flags) {
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10
                       ? '0' + digit
                       : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
                      (unsigned int)base, prec, width, flags);
}

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx,
                              size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base,
                              unsigned int prec, unsigned int width,
                              unsigned int flags) {
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10
                       ? '0' + digit
                       : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
                      (unsigned int)base, prec, width, flags);
}
#endif  // PRINTF_SUPPORT_LONG_LONG

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen,
                      const char *format, va_list va) {
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
  }

  while (*format) {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
      // no
      out(*format, buffer, idx++, maxlen);
      format++;
      continue;
    } else {
      // yes, evaluate it
      format++;
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
        case '0':
          flags |= FLAGS_ZEROPAD;
          format++;
          n = 1U;
          break;
        case '-':
          flags |= FLAGS_LEFT;
          format++;
          n = 1U;
          break;
        case '+':
          flags |= FLAGS_PLUS;
          format++;
          n = 1U;
          break;
        case ' ':
          flags |= FLAGS_SPACE;
          format++;
          n = 1U;
          break;
        case '#':
          flags |= FLAGS_HASH;
          format++;
          n = 1U;
          break;
        default:
          n = 0U;
          break;
      }
    } while (n);

    // evaluate width field
    width = 0U;
    if (_is_digit(*format)) {
      width = _atoi(&format);
    } else if (*format == '*') {
      const int w = va_arg(va, int);
      if (w < 0) {
        flags |= FLAGS_LEFT;  // reverse padding
        width = (unsigned int)-w;
      } else {
        width = (unsigned int)w;
      }
      format++;
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      } else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
        precision = prec > 0 ? (unsigned int)prec : 0U;
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
      case 'l':
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
          flags |= FLAGS_LONG_LONG;
          format++;
        }
        break;
      case 'h':
        flags |= FLAGS_SHORT;
        format++;
        if (*format == 'h') {
          flags |= FLAGS_CHAR;
          format++;
        }
        break;
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't':
        flags |=
            (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j':
        flags |=
            (sizeof(uint64_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      case 'z':
        flags |=
            (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      default:
        break;
    }

    // evaluate specifier
    switch (*format) {
      case 'd':
      case 'i':
      case 'u':
      case 'x':
      case 'X':
      case 'o':
      case 'b': {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
        } else if (*format == 'o') {
          base = 8U;
        } else if (*format == 'b') {
          base = 2U;
        } else {
          base = 10U;
          flags &= ~FLAGS_HASH;  // no hash for dec format
        }
        // uppercase
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
          flags &= ~FLAGS_ZEROPAD;
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
          // signed
          if (flags & FLAGS_LONG_LONG) {
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
            idx = _ntoa_long_long(
                out, buffer, idx, maxlen,
                (unsigned long long)(value > 0 ? value : 0 - value), value < 0,
                base, precision, width, flags);
#endif
          } else if (flags & FLAGS_LONG) {
            const long value = va_arg(va, long);
            idx = _ntoa_long(out, buffer, idx, maxlen,
                             (unsigned long)(value > 0 ? value : 0 - value),
                             value < 0, base, precision, width, flags);
          } else {
            const int value = (flags & FLAGS_CHAR)
                                  ? (char)va_arg(va, int)
                                  : (flags & FLAGS_SHORT)
                                        ? (short int)va_arg(va, int)
                                        : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen,
                             (unsigned int)(value > 0 ? value : 0 - value),
                             value < 0, base, precision, width, flags);
          }
        } else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                  va_arg(va, unsigned long long), false, base,
                                  precision, width, flags);
#endif
          } else if (flags & FLAGS_LONG) {
            idx =
                _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long),
                           false, base, precision, width, flags);
          } else {
            const unsigned int value =
                (flags & FLAGS_CHAR)
                    ? (unsigned char)va_arg(va, unsigned int)
                    : (flags & FLAGS_SHORT)
                          ? (unsigned short int)va_arg(va, unsigned int)
                          : va_arg(va, unsigned int);
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base,
                             precision, width, flags);
          }
        }
        format++;
        break;
      }
      case 'c': {
        unsigned int l = 1U;
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
        // post padding
        if (flags & FLAGS_LEFT) {
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
      }

      case 's': {
        const char *p = va_arg(va, char *);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
          l = (l < precision ? l : precision);
        }
        if (!(flags & FLAGS_LEFT)) {
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
          out(*(p++), buffer, idx++, maxlen);
        }
        // post padding
        if (flags & FLAGS_LEFT) {
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
      }

      case 'p': {
        width = sizeof(void *) * 2U;
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                (uintptr_t)va_arg(va, void *), false, 16U,
                                precision, width, flags);
        } else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen,
                           (unsigned long)((uintptr_t)va_arg(va, void *)),
                           false, 16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
        break;
      }

      case '%':
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default:
        out(*format, buffer, idx++, maxlen);
        format++;
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
}

///////////////////////////////////////////////////////////////////////////////

int sprintf_(char *buffer, const char *format, ...) {
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
  va_end(va);
  return ret;
}

int snprintf_(char *buffer, size_t count, const char *format, ...) {
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
  va_end(va);
  return ret;
}

int vsnprintf_(char *buffer, size_t count, const char *format, va_list va) {
  return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int fctprintf(void (*out)(char character, void *arg), void *arg,
              const char *format, ...) {
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = {out, arg};
  const int ret = _vsnprintf(_out_fct, (char *)(uintptr_t)&out_fct_wrap,
                             (size_t)-1, format, va);
  va_end(va);
  return ret;
}

// syscall
int ckb_debug(const char *s);
int printf(const char *format, ...) {
  static char buf[CKB_C_STDLIB_PRINTF_BUFFER_SIZE];
  va_list va;
  va_start(va, format);
  int ret = vsnprintf_(buf, CKB_C_STDLIB_PRINTF_BUFFER_SIZE, format, va);
  va_end(va);
  ckb_debug(buf);
  return ret;
}
int ckb_printf(const char *format, ...) {
  static char buf[CKB_C_STDLIB_PRINTF_BUFFER_SIZE];
  va_list va;
  va_start(va, format);
  int ret = vsnprintf_(buf, CKB_C_STDLIB_PRINTF_BUFFER_SIZE, format, va);
  va_end(va);
  ckb_debug(buf);
  return ret;
}

#else

#ifdef CKB_PRINTF_DECLARATION_ONLY
int printf(const char *format, ...);
int ckb_printf(const char *format, ...);
#else
int printf(const char *format, ...) { return 0; }
int ckb_printf(const char *format, ...) { return 0; }
#endif /* CKB_PRINTF_DECLARATION_ONLY */

#endif /* CKB_C_STDLIB_PRINTF */

#endif  // __CKB_IMPL_INCLUDED__


================================================
File: deps/ckb-c-stdlib/molecule/VERSION
================================================
0.4.1


================================================
File: deps/ckb-c-stdlib/molecule/blockchain-api2.h
================================================

#ifndef _BLOCKCHAIN_API2_H_
#define _BLOCKCHAIN_API2_H_

#include "molecule2_reader.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

// ----forward declaration--------
struct Uint32Type;
struct Uint32VTable;
struct Uint32VTable *GetUint32VTable(void);
struct Uint32Type make_Uint32(mol2_cursor_t *cur);
uint32_t Uint32_len_impl(struct Uint32Type *);
uint8_t Uint32_get_impl(struct Uint32Type *, uint32_t, bool *);
struct Uint64Type;
struct Uint64VTable;
struct Uint64VTable *GetUint64VTable(void);
struct Uint64Type make_Uint64(mol2_cursor_t *cur);
uint32_t Uint64_len_impl(struct Uint64Type *);
uint8_t Uint64_get_impl(struct Uint64Type *, uint32_t, bool *);
struct Uint128Type;
struct Uint128VTable;
struct Uint128VTable *GetUint128VTable(void);
struct Uint128Type make_Uint128(mol2_cursor_t *cur);
uint32_t Uint128_len_impl(struct Uint128Type *);
uint8_t Uint128_get_impl(struct Uint128Type *, uint32_t, bool *);
struct Byte32Type;
struct Byte32VTable;
struct Byte32VTable *GetByte32VTable(void);
struct Byte32Type make_Byte32(mol2_cursor_t *cur);
uint32_t Byte32_len_impl(struct Byte32Type *);
uint8_t Byte32_get_impl(struct Byte32Type *, uint32_t, bool *);
struct Uint256Type;
struct Uint256VTable;
struct Uint256VTable *GetUint256VTable(void);
struct Uint256Type make_Uint256(mol2_cursor_t *cur);
uint32_t Uint256_len_impl(struct Uint256Type *);
uint8_t Uint256_get_impl(struct Uint256Type *, uint32_t, bool *);
struct BytesType;
struct BytesVTable;
struct BytesVTable *GetBytesVTable(void);
struct BytesType make_Bytes(mol2_cursor_t *cur);
uint32_t Bytes_len_impl(struct BytesType *);
uint8_t Bytes_get_impl(struct BytesType *, uint32_t, bool *);
struct BytesOptType;
struct BytesOptVTable;
struct BytesOptVTable *GetBytesOptVTable(void);
struct BytesOptType make_BytesOpt(mol2_cursor_t *cur);
bool BytesOpt_is_none_impl(struct BytesOptType *);
bool BytesOpt_is_some_impl(struct BytesOptType *);
mol2_cursor_t BytesOpt_unwrap_impl(struct BytesOptType *);
struct BytesVecType;
struct BytesVecVTable;
struct BytesVecVTable *GetBytesVecVTable(void);
struct BytesVecType make_BytesVec(mol2_cursor_t *cur);
uint32_t BytesVec_len_impl(struct BytesVecType *);
mol2_cursor_t BytesVec_get_impl(struct BytesVecType *, uint32_t, bool *);
struct Byte32VecType;
struct Byte32VecVTable;
struct Byte32VecVTable *GetByte32VecVTable(void);
struct Byte32VecType make_Byte32Vec(mol2_cursor_t *cur);
uint32_t Byte32Vec_len_impl(struct Byte32VecType *);
mol2_cursor_t Byte32Vec_get_impl(struct Byte32VecType *, uint32_t, bool *);
struct ScriptOptType;
struct ScriptOptVTable;
struct ScriptOptVTable *GetScriptOptVTable(void);
struct ScriptOptType make_ScriptOpt(mol2_cursor_t *cur);
bool ScriptOpt_is_none_impl(struct ScriptOptType *);
bool ScriptOpt_is_some_impl(struct ScriptOptType *);
struct ScriptType ScriptOpt_unwrap_impl(struct ScriptOptType *);
struct ProposalShortIdType;
struct ProposalShortIdVTable;
struct ProposalShortIdVTable *GetProposalShortIdVTable(void);
struct ProposalShortIdType make_ProposalShortId(mol2_cursor_t *cur);
uint32_t ProposalShortId_len_impl(struct ProposalShortIdType *);
uint8_t ProposalShortId_get_impl(struct ProposalShortIdType *, uint32_t,
                                 bool *);
struct UncleBlockVecType;
struct UncleBlockVecVTable;
struct UncleBlockVecVTable *GetUncleBlockVecVTable(void);
struct UncleBlockVecType make_UncleBlockVec(mol2_cursor_t *cur);
uint32_t UncleBlockVec_len_impl(struct UncleBlockVecType *);
struct UncleBlockType UncleBlockVec_get_impl(struct UncleBlockVecType *,
                                             uint32_t, bool *);
struct TransactionVecType;
struct TransactionVecVTable;
struct TransactionVecVTable *GetTransactionVecVTable(void);
struct TransactionVecType make_TransactionVec(mol2_cursor_t *cur);
uint32_t TransactionVec_len_impl(struct TransactionVecType *);
struct TransactionType TransactionVec_get_impl(struct TransactionVecType *,
                                               uint32_t, bool *);
struct ProposalShortIdVecType;
struct ProposalShortIdVecVTable;
struct ProposalShortIdVecVTable *GetProposalShortIdVecVTable(void);
struct ProposalShortIdVecType make_ProposalShortIdVec(mol2_cursor_t *cur);
uint32_t ProposalShortIdVec_len_impl(struct ProposalShortIdVecType *);
mol2_cursor_t ProposalShortIdVec_get_impl(struct ProposalShortIdVecType *,
                                          uint32_t, bool *);
struct CellDepVecType;
struct CellDepVecVTable;
struct CellDepVecVTable *GetCellDepVecVTable(void);
struct CellDepVecType make_CellDepVec(mol2_cursor_t *cur);
uint32_t CellDepVec_len_impl(struct CellDepVecType *);
struct CellDepType CellDepVec_get_impl(struct CellDepVecType *, uint32_t,
                                       bool *);
struct CellInputVecType;
struct CellInputVecVTable;
struct CellInputVecVTable *GetCellInputVecVTable(void);
struct CellInputVecType make_CellInputVec(mol2_cursor_t *cur);
uint32_t CellInputVec_len_impl(struct CellInputVecType *);
struct CellInputType CellInputVec_get_impl(struct CellInputVecType *, uint32_t,
                                           bool *);
struct CellOutputVecType;
struct CellOutputVecVTable;
struct CellOutputVecVTable *GetCellOutputVecVTable(void);
struct CellOutputVecType make_CellOutputVec(mol2_cursor_t *cur);
uint32_t CellOutputVec_len_impl(struct CellOutputVecType *);
struct CellOutputType CellOutputVec_get_impl(struct CellOutputVecType *,
                                             uint32_t, bool *);
struct ScriptType;
struct ScriptVTable;
struct ScriptVTable *GetScriptVTable(void);
struct ScriptType make_Script(mol2_cursor_t *cur);
mol2_cursor_t Script_get_code_hash_impl(struct ScriptType *);
uint8_t Script_get_hash_type_impl(struct ScriptType *);
mol2_cursor_t Script_get_args_impl(struct ScriptType *);
struct OutPointType;
struct OutPointVTable;
struct OutPointVTable *GetOutPointVTable(void);
struct OutPointType make_OutPoint(mol2_cursor_t *cur);
mol2_cursor_t OutPoint_get_tx_hash_impl(struct OutPointType *);
uint32_t OutPoint_get_index_impl(struct OutPointType *);
struct CellInputType;
struct CellInputVTable;
struct CellInputVTable *GetCellInputVTable(void);
struct CellInputType make_CellInput(mol2_cursor_t *cur);
uint64_t CellInput_get_since_impl(struct CellInputType *);
struct OutPointType CellInput_get_previous_output_impl(struct CellInputType *);
struct CellOutputType;
struct CellOutputVTable;
struct CellOutputVTable *GetCellOutputVTable(void);
struct CellOutputType make_CellOutput(mol2_cursor_t *cur);
uint64_t CellOutput_get_capacity_impl(struct CellOutputType *);
struct ScriptType CellOutput_get_lock_impl(struct CellOutputType *);
struct ScriptOptType CellOutput_get_type__impl(struct CellOutputType *);
struct CellDepType;
struct CellDepVTable;
struct CellDepVTable *GetCellDepVTable(void);
struct CellDepType make_CellDep(mol2_cursor_t *cur);
struct OutPointType CellDep_get_out_point_impl(struct CellDepType *);
uint8_t CellDep_get_dep_type_impl(struct CellDepType *);
struct RawTransactionType;
struct RawTransactionVTable;
struct RawTransactionVTable *GetRawTransactionVTable(void);
struct RawTransactionType make_RawTransaction(mol2_cursor_t *cur);
uint32_t RawTransaction_get_version_impl(struct RawTransactionType *);
struct CellDepVecType RawTransaction_get_cell_deps_impl(
    struct RawTransactionType *);
struct Byte32VecType RawTransaction_get_header_deps_impl(
    struct RawTransactionType *);
struct CellInputVecType RawTransaction_get_inputs_impl(
    struct RawTransactionType *);
struct CellOutputVecType RawTransaction_get_outputs_impl(
    struct RawTransactionType *);
struct BytesVecType RawTransaction_get_outputs_data_impl(
    struct RawTransactionType *);
struct TransactionType;
struct TransactionVTable;
struct TransactionVTable *GetTransactionVTable(void);
struct TransactionType make_Transaction(mol2_cursor_t *cur);
struct RawTransactionType Transaction_get_raw_impl(struct TransactionType *);
struct BytesVecType Transaction_get_witnesses_impl(struct TransactionType *);
struct RawHeaderType;
struct RawHeaderVTable;
struct RawHeaderVTable *GetRawHeaderVTable(void);
struct RawHeaderType make_RawHeader(mol2_cursor_t *cur);
uint32_t RawHeader_get_version_impl(struct RawHeaderType *);
uint32_t RawHeader_get_compact_target_impl(struct RawHeaderType *);
uint64_t RawHeader_get_timestamp_impl(struct RawHeaderType *);
uint64_t RawHeader_get_number_impl(struct RawHeaderType *);
uint64_t RawHeader_get_epoch_impl(struct RawHeaderType *);
mol2_cursor_t RawHeader_get_parent_hash_impl(struct RawHeaderType *);
mol2_cursor_t RawHeader_get_transactions_root_impl(struct RawHeaderType *);
mol2_cursor_t RawHeader_get_proposals_hash_impl(struct RawHeaderType *);
mol2_cursor_t RawHeader_get_uncles_hash_impl(struct RawHeaderType *);
mol2_cursor_t RawHeader_get_dao_impl(struct RawHeaderType *);
struct HeaderType;
struct HeaderVTable;
struct HeaderVTable *GetHeaderVTable(void);
struct HeaderType make_Header(mol2_cursor_t *cur);
struct RawHeaderType Header_get_raw_impl(struct HeaderType *);
mol2_cursor_t Header_get_nonce_impl(struct HeaderType *);
struct UncleBlockType;
struct UncleBlockVTable;
struct UncleBlockVTable *GetUncleBlockVTable(void);
struct UncleBlockType make_UncleBlock(mol2_cursor_t *cur);
struct HeaderType UncleBlock_get_header_impl(struct UncleBlockType *);
struct ProposalShortIdVecType UncleBlock_get_proposals_impl(
    struct UncleBlockType *);
struct BlockType;
struct BlockVTable;
struct BlockVTable *GetBlockVTable(void);
struct BlockType make_Block(mol2_cursor_t *cur);
struct HeaderType Block_get_header_impl(struct BlockType *);
struct UncleBlockVecType Block_get_uncles_impl(struct BlockType *);
struct TransactionVecType Block_get_transactions_impl(struct BlockType *);
struct ProposalShortIdVecType Block_get_proposals_impl(struct BlockType *);
struct CellbaseWitnessType;
struct CellbaseWitnessVTable;
struct CellbaseWitnessVTable *GetCellbaseWitnessVTable(void);
struct CellbaseWitnessType make_CellbaseWitness(mol2_cursor_t *cur);
struct ScriptType CellbaseWitness_get_lock_impl(struct CellbaseWitnessType *);
mol2_cursor_t CellbaseWitness_get_message_impl(struct CellbaseWitnessType *);
struct WitnessArgsType;
struct WitnessArgsVTable;
struct WitnessArgsVTable *GetWitnessArgsVTable(void);
struct WitnessArgsType make_WitnessArgs(mol2_cursor_t *cur);
struct BytesOptType WitnessArgs_get_lock_impl(struct WitnessArgsType *);
struct BytesOptType WitnessArgs_get_input_type_impl(struct WitnessArgsType *);
struct BytesOptType WitnessArgs_get_output_type_impl(struct WitnessArgsType *);

// ----definition-----------------
typedef struct Uint32VTable {
  uint32_t (*len)(struct Uint32Type *);
  uint8_t (*get)(struct Uint32Type *, uint32_t, bool *);
} Uint32VTable;
typedef struct Uint32Type {
  mol2_cursor_t cur;
  Uint32VTable *t;
} Uint32Type;

typedef struct Uint64VTable {
  uint32_t (*len)(struct Uint64Type *);
  uint8_t (*get)(struct Uint64Type *, uint32_t, bool *);
} Uint64VTable;
typedef struct Uint64Type {
  mol2_cursor_t cur;
  Uint64VTable *t;
} Uint64Type;

typedef struct Uint128VTable {
  uint32_t (*len)(struct Uint128Type *);
  uint8_t (*get)(struct Uint128Type *, uint32_t, bool *);
} Uint128VTable;
typedef struct Uint128Type {
  mol2_cursor_t cur;
  Uint128VTable *t;
} Uint128Type;

typedef struct Byte32VTable {
  uint32_t (*len)(struct Byte32Type *);
  uint8_t (*get)(struct Byte32Type *, uint32_t, bool *);
} Byte32VTable;
typedef struct Byte32Type {
  mol2_cursor_t cur;
  Byte32VTable *t;
} Byte32Type;

typedef struct Uint256VTable {
  uint32_t (*len)(struct Uint256Type *);
  uint8_t (*get)(struct Uint256Type *, uint32_t, bool *);
} Uint256VTable;
typedef struct Uint256Type {
  mol2_cursor_t cur;
  Uint256VTable *t;
} Uint256Type;

typedef struct BytesVTable {
  uint32_t (*len)(struct BytesType *);
  uint8_t (*get)(struct BytesType *, uint32_t, bool *);
} BytesVTable;
typedef struct BytesType {
  mol2_cursor_t cur;
  BytesVTable *t;
} BytesType;

typedef struct BytesOptVTable {
  bool (*is_none)(struct BytesOptType *);
  bool (*is_some)(struct BytesOptType *);
  mol2_cursor_t (*unwrap)(struct BytesOptType *);
} BytesOptVTable;
typedef struct BytesOptType {
  mol2_cursor_t cur;
  BytesOptVTable *t;
} BytesOptType;

typedef struct BytesVecVTable {
  uint32_t (*len)(struct BytesVecType *);
  mol2_cursor_t (*get)(struct BytesVecType *, uint32_t, bool *);
} BytesVecVTable;
typedef struct BytesVecType {
  mol2_cursor_t cur;
  BytesVecVTable *t;
} BytesVecType;

typedef struct Byte32VecVTable {
  uint32_t (*len)(struct Byte32VecType *);
  mol2_cursor_t (*get)(struct Byte32VecType *, uint32_t, bool *);
} Byte32VecVTable;
typedef struct Byte32VecType {
  mol2_cursor_t cur;
  Byte32VecVTable *t;
} Byte32VecType;

typedef struct ScriptOptVTable {
  bool (*is_none)(struct ScriptOptType *);
  bool (*is_some)(struct ScriptOptType *);
  struct ScriptType (*unwrap)(struct ScriptOptType *);
} ScriptOptVTable;
typedef struct ScriptOptType {
  mol2_cursor_t cur;
  ScriptOptVTable *t;
} ScriptOptType;

typedef struct ProposalShortIdVTable {
  uint32_t (*len)(struct ProposalShortIdType *);
  uint8_t (*get)(struct ProposalShortIdType *, uint32_t, bool *);
} ProposalShortIdVTable;
typedef struct ProposalShortIdType {
  mol2_cursor_t cur;
  ProposalShortIdVTable *t;
} ProposalShortIdType;

typedef struct UncleBlockVecVTable {
  uint32_t (*len)(struct UncleBlockVecType *);
  struct UncleBlockType (*get)(struct UncleBlockVecType *, uint32_t, bool *);
} UncleBlockVecVTable;
typedef struct UncleBlockVecType {
  mol2_cursor_t cur;
  UncleBlockVecVTable *t;
} UncleBlockVecType;

typedef struct TransactionVecVTable {
  uint32_t (*len)(struct TransactionVecType *);
  struct TransactionType (*get)(struct TransactionVecType *, uint32_t, bool *);
} TransactionVecVTable;
typedef struct TransactionVecType {
  mol2_cursor_t cur;
  TransactionVecVTable *t;
} TransactionVecType;

typedef struct ProposalShortIdVecVTable {
  uint32_t (*len)(struct ProposalShortIdVecType *);
  mol2_cursor_t (*get)(struct ProposalShortIdVecType *, uint32_t, bool *);
} ProposalShortIdVecVTable;
typedef struct ProposalShortIdVecType {
  mol2_cursor_t cur;
  ProposalShortIdVecVTable *t;
} ProposalShortIdVecType;

typedef struct CellDepVecVTable {
  uint32_t (*len)(struct CellDepVecType *);
  struct CellDepType (*get)(struct CellDepVecType *, uint32_t, bool *);
} CellDepVecVTable;
typedef struct CellDepVecType {
  mol2_cursor_t cur;
  CellDepVecVTable *t;
} CellDepVecType;

typedef struct CellInputVecVTable {
  uint32_t (*len)(struct CellInputVecType *);
  struct CellInputType (*get)(struct CellInputVecType *, uint32_t, bool *);
} CellInputVecVTable;
typedef struct CellInputVecType {
  mol2_cursor_t cur;
  CellInputVecVTable *t;
} CellInputVecType;

typedef struct CellOutputVecVTable {
  uint32_t (*len)(struct CellOutputVecType *);
  struct CellOutputType (*get)(struct CellOutputVecType *, uint32_t, bool *);
} CellOutputVecVTable;
typedef struct CellOutputVecType {
  mol2_cursor_t cur;
  CellOutputVecVTable *t;
} CellOutputVecType;

typedef struct ScriptVTable {
  mol2_cursor_t (*code_hash)(struct ScriptType *);
  uint8_t (*hash_type)(struct ScriptType *);
  mol2_cursor_t (*args)(struct ScriptType *);
} ScriptVTable;
typedef struct ScriptType {
  mol2_cursor_t cur;
  ScriptVTable *t;
} ScriptType;

typedef struct OutPointVTable {
  mol2_cursor_t (*tx_hash)(struct OutPointType *);
  uint32_t (*index)(struct OutPointType *);
} OutPointVTable;
typedef struct OutPointType {
  mol2_cursor_t cur;
  OutPointVTable *t;
} OutPointType;

typedef struct CellInputVTable {
  uint64_t (*since)(struct CellInputType *);
  struct OutPointType (*previous_output)(struct CellInputType *);
} CellInputVTable;
typedef struct CellInputType {
  mol2_cursor_t cur;
  CellInputVTable *t;
} CellInputType;

typedef struct CellOutputVTable {
  uint64_t (*capacity)(struct CellOutputType *);
  struct ScriptType (*lock)(struct CellOutputType *);
  struct ScriptOptType (*type_)(struct CellOutputType *);
} CellOutputVTable;
typedef struct CellOutputType {
  mol2_cursor_t cur;
  CellOutputVTable *t;
} CellOutputType;

typedef struct CellDepVTable {
  struct OutPointType (*out_point)(struct CellDepType *);
  uint8_t (*dep_type)(struct CellDepType *);
} CellDepVTable;
typedef struct CellDepType {
  mol2_cursor_t cur;
  CellDepVTable *t;
} CellDepType;

typedef struct RawTransactionVTable {
  uint32_t (*version)(struct RawTransactionType *);
  struct CellDepVecType (*cell_deps)(struct RawTransactionType *);
  struct Byte32VecType (*header_deps)(struct RawTransactionType *);
  struct CellInputVecType (*inputs)(struct RawTransactionType *);
  struct CellOutputVecType (*outputs)(struct RawTransactionType *);
  struct BytesVecType (*outputs_data)(struct RawTransactionType *);
} RawTransactionVTable;
typedef struct RawTransactionType {
  mol2_cursor_t cur;
  RawTransactionVTable *t;
} RawTransactionType;

typedef struct TransactionVTable {
  struct RawTransactionType (*raw)(struct TransactionType *);
  struct BytesVecType (*witnesses)(struct TransactionType *);
} TransactionVTable;
typedef struct TransactionType {
  mol2_cursor_t cur;
  TransactionVTable *t;
} TransactionType;

typedef struct RawHeaderVTable {
  uint32_t (*version)(struct RawHeaderType *);
  uint32_t (*compact_target)(struct RawHeaderType *);
  uint64_t (*timestamp)(struct RawHeaderType *);
  uint64_t (*number)(struct RawHeaderType *);
  uint64_t (*epoch)(struct RawHeaderType *);
  mol2_cursor_t (*parent_hash)(struct RawHeaderType *);
  mol2_cursor_t (*transactions_root)(struct RawHeaderType *);
  mol2_cursor_t (*proposals_hash)(struct RawHeaderType *);
  mol2_cursor_t (*uncles_hash)(struct RawHeaderType *);
  mol2_cursor_t (*dao)(struct RawHeaderType *);
} RawHeaderVTable;
typedef struct RawHeaderType {
  mol2_cursor_t cur;
  RawHeaderVTable *t;
} RawHeaderType;

typedef struct HeaderVTable {
  struct RawHeaderType (*raw)(struct HeaderType *);
  mol2_cursor_t (*nonce)(struct HeaderType *);
} HeaderVTable;
typedef struct HeaderType {
  mol2_cursor_t cur;
  HeaderVTable *t;
} HeaderType;

typedef struct UncleBlockVTable {
  struct HeaderType (*header)(struct UncleBlockType *);
  struct ProposalShortIdVecType (*proposals)(struct UncleBlockType *);
} UncleBlockVTable;
typedef struct UncleBlockType {
  mol2_cursor_t cur;
  UncleBlockVTable *t;
} UncleBlockType;

typedef struct BlockVTable {
  struct HeaderType (*header)(struct BlockType *);
  struct UncleBlockVecType (*uncles)(struct BlockType *);
  struct TransactionVecType (*transactions)(struct BlockType *);
  struct ProposalShortIdVecType (*proposals)(struct BlockType *);
} BlockVTable;
typedef struct BlockType {
  mol2_cursor_t cur;
  BlockVTable *t;
} BlockType;

typedef struct CellbaseWitnessVTable {
  struct ScriptType (*lock)(struct CellbaseWitnessType *);
  mol2_cursor_t (*message)(struct CellbaseWitnessType *);
} CellbaseWitnessVTable;
typedef struct CellbaseWitnessType {
  mol2_cursor_t cur;
  CellbaseWitnessVTable *t;
} CellbaseWitnessType;

typedef struct WitnessArgsVTable {
  struct BytesOptType (*lock)(struct WitnessArgsType *);
  struct BytesOptType (*input_type)(struct WitnessArgsType *);
  struct BytesOptType (*output_type)(struct WitnessArgsType *);
} WitnessArgsVTable;
typedef struct WitnessArgsType {
  mol2_cursor_t cur;
  WitnessArgsVTable *t;
} WitnessArgsType;

#ifndef MOLECULEC_C2_DECLARATION_ONLY

// ----implementation-------------
struct Uint32Type make_Uint32(mol2_cursor_t *cur) {
  Uint32Type ret;
  ret.cur = *cur;
  ret.t = GetUint32VTable();
  return ret;
}
struct Uint32VTable *GetUint32VTable(void) {
  static Uint32VTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = Uint32_len_impl;
  s_vtable.get = Uint32_get_impl;
  return &s_vtable;
}
uint32_t Uint32_len_impl(Uint32Type *this) { return 4; }
uint8_t Uint32_get_impl(Uint32Type *this, uint32_t index, bool *existing) {
  uint8_t ret = {0};
  mol2_cursor_res_t res = mol2_slice_by_offset2(&this->cur, 1 * index, 1);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_Uint8(&res.cur);
  return ret;
}
struct Uint64Type make_Uint64(mol2_cursor_t *cur) {
  Uint64Type ret;
  ret.cur = *cur;
  ret.t = GetUint64VTable();
  return ret;
}
struct Uint64VTable *GetUint64VTable(void) {
  static Uint64VTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = Uint64_len_impl;
  s_vtable.get = Uint64_get_impl;
  return &s_vtable;
}
uint32_t Uint64_len_impl(Uint64Type *this) { return 8; }
uint8_t Uint64_get_impl(Uint64Type *this, uint32_t index, bool *existing) {
  uint8_t ret = {0};
  mol2_cursor_res_t res = mol2_slice_by_offset2(&this->cur, 1 * index, 1);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_Uint8(&res.cur);
  return ret;
}
struct Uint128Type make_Uint128(mol2_cursor_t *cur) {
  Uint128Type ret;
  ret.cur = *cur;
  ret.t = GetUint128VTable();
  return ret;
}
struct Uint128VTable *GetUint128VTable(void) {
  static Uint128VTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = Uint128_len_impl;
  s_vtable.get = Uint128_get_impl;
  return &s_vtable;
}
uint32_t Uint128_len_impl(Uint128Type *this) { return 16; }
uint8_t Uint128_get_impl(Uint128Type *this, uint32_t index, bool *existing) {
  uint8_t ret = {0};
  mol2_cursor_res_t res = mol2_slice_by_offset2(&this->cur, 1 * index, 1);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_Uint8(&res.cur);
  return ret;
}
struct Byte32Type make_Byte32(mol2_cursor_t *cur) {
  Byte32Type ret;
  ret.cur = *cur;
  ret.t = GetByte32VTable();
  return ret;
}
struct Byte32VTable *GetByte32VTable(void) {
  static Byte32VTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = Byte32_len_impl;
  s_vtable.get = Byte32_get_impl;
  return &s_vtable;
}
uint32_t Byte32_len_impl(Byte32Type *this) { return 32; }
uint8_t Byte32_get_impl(Byte32Type *this, uint32_t index, bool *existing) {
  uint8_t ret = {0};
  mol2_cursor_res_t res = mol2_slice_by_offset2(&this->cur, 1 * index, 1);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_Uint8(&res.cur);
  return ret;
}
struct Uint256Type make_Uint256(mol2_cursor_t *cur) {
  Uint256Type ret;
  ret.cur = *cur;
  ret.t = GetUint256VTable();
  return ret;
}
struct Uint256VTable *GetUint256VTable(void) {
  static Uint256VTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = Uint256_len_impl;
  s_vtable.get = Uint256_get_impl;
  return &s_vtable;
}
uint32_t Uint256_len_impl(Uint256Type *this) { return 32; }
uint8_t Uint256_get_impl(Uint256Type *this, uint32_t index, bool *existing) {
  uint8_t ret = {0};
  mol2_cursor_res_t res = mol2_slice_by_offset2(&this->cur, 1 * index, 1);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_Uint8(&res.cur);
  return ret;
}
struct BytesType make_Bytes(mol2_cursor_t *cur) {
  BytesType ret;
  ret.cur = *cur;
  ret.t = GetBytesVTable();
  return ret;
}
struct BytesVTable *GetBytesVTable(void) {
  static BytesVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = Bytes_len_impl;
  s_vtable.get = Bytes_get_impl;
  return &s_vtable;
}
uint32_t Bytes_len_impl(BytesType *this) {
  return mol2_fixvec_length(&this->cur);
}
uint8_t Bytes_get_impl(BytesType *this, uint32_t index, bool *existing) {
  uint8_t ret = {0};
  mol2_cursor_res_t res = mol2_fixvec_slice_by_index(&this->cur, 1, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_Uint8(&res.cur);
  return ret;
}
struct BytesOptType make_BytesOpt(mol2_cursor_t *cur) {
  BytesOptType ret;
  ret.cur = *cur;
  ret.t = GetBytesOptVTable();
  return ret;
}
struct BytesOptVTable *GetBytesOptVTable(void) {
  static BytesOptVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.is_none = BytesOpt_is_none_impl;
  s_vtable.is_some = BytesOpt_is_some_impl;
  s_vtable.unwrap = BytesOpt_unwrap_impl;
  return &s_vtable;
}
bool BytesOpt_is_none_impl(BytesOptType *this) {
  return mol2_option_is_none(&this->cur);
}
bool BytesOpt_is_some_impl(BytesOptType *this) {
  return !mol2_option_is_none(&this->cur);
}
mol2_cursor_t BytesOpt_unwrap_impl(BytesOptType *this) {
  mol2_cursor_t ret;
  ret = convert_to_rawbytes(&this->cur);
  return ret;
}
struct BytesVecType make_BytesVec(mol2_cursor_t *cur) {
  BytesVecType ret;
  ret.cur = *cur;
  ret.t = GetBytesVecVTable();
  return ret;
}
struct BytesVecVTable *GetBytesVecVTable(void) {
  static BytesVecVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = BytesVec_len_impl;
  s_vtable.get = BytesVec_get_impl;
  return &s_vtable;
}
uint32_t BytesVec_len_impl(BytesVecType *this) {
  return mol2_dynvec_length(&this->cur);
}
mol2_cursor_t BytesVec_get_impl(BytesVecType *this, uint32_t index,
                                bool *existing) {
  mol2_cursor_t ret = {0};
  mol2_cursor_res_t res = mol2_dynvec_slice_by_index(&this->cur, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  return convert_to_rawbytes(&res.cur);
}
struct Byte32VecType make_Byte32Vec(mol2_cursor_t *cur) {
  Byte32VecType ret;
  ret.cur = *cur;
  ret.t = GetByte32VecVTable();
  return ret;
}
struct Byte32VecVTable *GetByte32VecVTable(void) {
  static Byte32VecVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = Byte32Vec_len_impl;
  s_vtable.get = Byte32Vec_get_impl;
  return &s_vtable;
}
uint32_t Byte32Vec_len_impl(Byte32VecType *this) {
  return mol2_fixvec_length(&this->cur);
}
mol2_cursor_t Byte32Vec_get_impl(Byte32VecType *this, uint32_t index,
                                 bool *existing) {
  mol2_cursor_t ret = {0};
  mol2_cursor_res_t res = mol2_fixvec_slice_by_index(&this->cur, 32, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_array(&res.cur);
  return ret;
}
struct ScriptOptType make_ScriptOpt(mol2_cursor_t *cur) {
  ScriptOptType ret;
  ret.cur = *cur;
  ret.t = GetScriptOptVTable();
  return ret;
}
struct ScriptOptVTable *GetScriptOptVTable(void) {
  static ScriptOptVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.is_none = ScriptOpt_is_none_impl;
  s_vtable.is_some = ScriptOpt_is_some_impl;
  s_vtable.unwrap = ScriptOpt_unwrap_impl;
  return &s_vtable;
}
bool ScriptOpt_is_none_impl(ScriptOptType *this) {
  return mol2_option_is_none(&this->cur);
}
bool ScriptOpt_is_some_impl(ScriptOptType *this) {
  return !mol2_option_is_none(&this->cur);
}
ScriptType ScriptOpt_unwrap_impl(ScriptOptType *this) {
  ScriptType ret;
  mol2_cursor_t cur = this->cur;
  ret.cur = cur;
  ret.t = GetScriptVTable();
  return ret;
}
struct ProposalShortIdType make_ProposalShortId(mol2_cursor_t *cur) {
  ProposalShortIdType ret;
  ret.cur = *cur;
  ret.t = GetProposalShortIdVTable();
  return ret;
}
struct ProposalShortIdVTable *GetProposalShortIdVTable(void) {
  static ProposalShortIdVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = ProposalShortId_len_impl;
  s_vtable.get = ProposalShortId_get_impl;
  return &s_vtable;
}
uint32_t ProposalShortId_len_impl(ProposalShortIdType *this) { return 10; }
uint8_t ProposalShortId_get_impl(ProposalShortIdType *this, uint32_t index,
                                 bool *existing) {
  uint8_t ret = {0};
  mol2_cursor_res_t res = mol2_slice_by_offset2(&this->cur, 1 * index, 1);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_Uint8(&res.cur);
  return ret;
}
struct UncleBlockVecType make_UncleBlockVec(mol2_cursor_t *cur) {
  UncleBlockVecType ret;
  ret.cur = *cur;
  ret.t = GetUncleBlockVecVTable();
  return ret;
}
struct UncleBlockVecVTable *GetUncleBlockVecVTable(void) {
  static UncleBlockVecVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = UncleBlockVec_len_impl;
  s_vtable.get = UncleBlockVec_get_impl;
  return &s_vtable;
}
uint32_t UncleBlockVec_len_impl(UncleBlockVecType *this) {
  return mol2_dynvec_length(&this->cur);
}
UncleBlockType UncleBlockVec_get_impl(UncleBlockVecType *this, uint32_t index,
                                      bool *existing) {
  UncleBlockType ret = {0};
  mol2_cursor_res_t res = mol2_dynvec_slice_by_index(&this->cur, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret.cur = res.cur;
  ret.t = GetUncleBlockVTable();
  return ret;
}
struct TransactionVecType make_TransactionVec(mol2_cursor_t *cur) {
  TransactionVecType ret;
  ret.cur = *cur;
  ret.t = GetTransactionVecVTable();
  return ret;
}
struct TransactionVecVTable *GetTransactionVecVTable(void) {
  static TransactionVecVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = TransactionVec_len_impl;
  s_vtable.get = TransactionVec_get_impl;
  return &s_vtable;
}
uint32_t TransactionVec_len_impl(TransactionVecType *this) {
  return mol2_dynvec_length(&this->cur);
}
TransactionType TransactionVec_get_impl(TransactionVecType *this,
                                        uint32_t index, bool *existing) {
  TransactionType ret = {0};
  mol2_cursor_res_t res = mol2_dynvec_slice_by_index(&this->cur, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret.cur = res.cur;
  ret.t = GetTransactionVTable();
  return ret;
}
struct ProposalShortIdVecType make_ProposalShortIdVec(mol2_cursor_t *cur) {
  ProposalShortIdVecType ret;
  ret.cur = *cur;
  ret.t = GetProposalShortIdVecVTable();
  return ret;
}
struct ProposalShortIdVecVTable *GetProposalShortIdVecVTable(void) {
  static ProposalShortIdVecVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = ProposalShortIdVec_len_impl;
  s_vtable.get = ProposalShortIdVec_get_impl;
  return &s_vtable;
}
uint32_t ProposalShortIdVec_len_impl(ProposalShortIdVecType *this) {
  return mol2_fixvec_length(&this->cur);
}
mol2_cursor_t ProposalShortIdVec_get_impl(ProposalShortIdVecType *this,
                                          uint32_t index, bool *existing) {
  mol2_cursor_t ret = {0};
  mol2_cursor_res_t res = mol2_fixvec_slice_by_index(&this->cur, 10, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret = convert_to_array(&res.cur);
  return ret;
}
struct CellDepVecType make_CellDepVec(mol2_cursor_t *cur) {
  CellDepVecType ret;
  ret.cur = *cur;
  ret.t = GetCellDepVecVTable();
  return ret;
}
struct CellDepVecVTable *GetCellDepVecVTable(void) {
  static CellDepVecVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = CellDepVec_len_impl;
  s_vtable.get = CellDepVec_get_impl;
  return &s_vtable;
}
uint32_t CellDepVec_len_impl(CellDepVecType *this) {
  return mol2_fixvec_length(&this->cur);
}
CellDepType CellDepVec_get_impl(CellDepVecType *this, uint32_t index,
                                bool *existing) {
  CellDepType ret = {0};
  mol2_cursor_res_t res = mol2_fixvec_slice_by_index(&this->cur, 37, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret.cur = res.cur;
  ret.t = GetCellDepVTable();
  return ret;
}
struct CellInputVecType make_CellInputVec(mol2_cursor_t *cur) {
  CellInputVecType ret;
  ret.cur = *cur;
  ret.t = GetCellInputVecVTable();
  return ret;
}
struct CellInputVecVTable *GetCellInputVecVTable(void) {
  static CellInputVecVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = CellInputVec_len_impl;
  s_vtable.get = CellInputVec_get_impl;
  return &s_vtable;
}
uint32_t CellInputVec_len_impl(CellInputVecType *this) {
  return mol2_fixvec_length(&this->cur);
}
CellInputType CellInputVec_get_impl(CellInputVecType *this, uint32_t index,
                                    bool *existing) {
  CellInputType ret = {0};
  mol2_cursor_res_t res = mol2_fixvec_slice_by_index(&this->cur, 44, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret.cur = res.cur;
  ret.t = GetCellInputVTable();
  return ret;
}
struct CellOutputVecType make_CellOutputVec(mol2_cursor_t *cur) {
  CellOutputVecType ret;
  ret.cur = *cur;
  ret.t = GetCellOutputVecVTable();
  return ret;
}
struct CellOutputVecVTable *GetCellOutputVecVTable(void) {
  static CellOutputVecVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.len = CellOutputVec_len_impl;
  s_vtable.get = CellOutputVec_get_impl;
  return &s_vtable;
}
uint32_t CellOutputVec_len_impl(CellOutputVecType *this) {
  return mol2_dynvec_length(&this->cur);
}
CellOutputType CellOutputVec_get_impl(CellOutputVecType *this, uint32_t index,
                                      bool *existing) {
  CellOutputType ret = {0};
  mol2_cursor_res_t res = mol2_dynvec_slice_by_index(&this->cur, index);
  if (res.errno != MOL2_OK) {
    *existing = false;
    return ret;
  } else {
    *existing = true;
  }
  ret.cur = res.cur;
  ret.t = GetCellOutputVTable();
  return ret;
}
struct ScriptType make_Script(mol2_cursor_t *cur) {
  ScriptType ret;
  ret.cur = *cur;
  ret.t = GetScriptVTable();
  return ret;
}
struct ScriptVTable *GetScriptVTable(void) {
  static ScriptVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.code_hash = Script_get_code_hash_impl;
  s_vtable.hash_type = Script_get_hash_type_impl;
  s_vtable.args = Script_get_args_impl;
  return &s_vtable;
}
mol2_cursor_t Script_get_code_hash_impl(ScriptType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t ret2 = mol2_table_slice_by_index(&this->cur, 0);
  ret = convert_to_array(&ret2);
  return ret;
}
uint8_t Script_get_hash_type_impl(ScriptType *this) {
  uint8_t ret;
  mol2_cursor_t ret2 = mol2_table_slice_by_index(&this->cur, 1);
  ret = convert_to_Uint8(&ret2);
  return ret;
}
mol2_cursor_t Script_get_args_impl(ScriptType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t re2 = mol2_table_slice_by_index(&this->cur, 2);
  ret = convert_to_rawbytes(&re2);
  return ret;
}
struct OutPointType make_OutPoint(mol2_cursor_t *cur) {
  OutPointType ret;
  ret.cur = *cur;
  ret.t = GetOutPointVTable();
  return ret;
}
struct OutPointVTable *GetOutPointVTable(void) {
  static OutPointVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.tx_hash = OutPoint_get_tx_hash_impl;
  s_vtable.index = OutPoint_get_index_impl;
  return &s_vtable;
}
mol2_cursor_t OutPoint_get_tx_hash_impl(OutPointType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 0, 32);
  ret = convert_to_array(&ret2);
  return ret;
}
uint32_t OutPoint_get_index_impl(OutPointType *this) {
  uint32_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 32, 4);
  ret = convert_to_Uint32(&ret2);
  return ret;
}
struct CellInputType make_CellInput(mol2_cursor_t *cur) {
  CellInputType ret;
  ret.cur = *cur;
  ret.t = GetCellInputVTable();
  return ret;
}
struct CellInputVTable *GetCellInputVTable(void) {
  static CellInputVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.since = CellInput_get_since_impl;
  s_vtable.previous_output = CellInput_get_previous_output_impl;
  return &s_vtable;
}
uint64_t CellInput_get_since_impl(CellInputType *this) {
  uint64_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 0, 8);
  ret = convert_to_Uint64(&ret2);
  return ret;
}
OutPointType CellInput_get_previous_output_impl(CellInputType *this) {
  OutPointType ret;
  mol2_cursor_t cur = mol2_slice_by_offset(&this->cur, 8, 36);
  ret.cur = cur;
  ret.t = GetOutPointVTable();
  return ret;
}
struct CellOutputType make_CellOutput(mol2_cursor_t *cur) {
  CellOutputType ret;
  ret.cur = *cur;
  ret.t = GetCellOutputVTable();
  return ret;
}
struct CellOutputVTable *GetCellOutputVTable(void) {
  static CellOutputVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.capacity = CellOutput_get_capacity_impl;
  s_vtable.lock = CellOutput_get_lock_impl;
  s_vtable.type_ = CellOutput_get_type__impl;
  return &s_vtable;
}
uint64_t CellOutput_get_capacity_impl(CellOutputType *this) {
  uint64_t ret;
  mol2_cursor_t ret2 = mol2_table_slice_by_index(&this->cur, 0);
  ret = convert_to_Uint64(&ret2);
  return ret;
}
ScriptType CellOutput_get_lock_impl(CellOutputType *this) {
  ScriptType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 1);
  ret.cur = cur;
  ret.t = GetScriptVTable();
  return ret;
}
ScriptOptType CellOutput_get_type__impl(CellOutputType *this) {
  ScriptOptType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 2);
  ret.cur = cur;
  ret.t = GetScriptOptVTable();
  return ret;
}
struct CellDepType make_CellDep(mol2_cursor_t *cur) {
  CellDepType ret;
  ret.cur = *cur;
  ret.t = GetCellDepVTable();
  return ret;
}
struct CellDepVTable *GetCellDepVTable(void) {
  static CellDepVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.out_point = CellDep_get_out_point_impl;
  s_vtable.dep_type = CellDep_get_dep_type_impl;
  return &s_vtable;
}
OutPointType CellDep_get_out_point_impl(CellDepType *this) {
  OutPointType ret;
  mol2_cursor_t cur = mol2_slice_by_offset(&this->cur, 0, 36);
  ret.cur = cur;
  ret.t = GetOutPointVTable();
  return ret;
}
uint8_t CellDep_get_dep_type_impl(CellDepType *this) {
  uint8_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 36, 1);
  ret = convert_to_Uint8(&ret2);
  return ret;
}
struct RawTransactionType make_RawTransaction(mol2_cursor_t *cur) {
  RawTransactionType ret;
  ret.cur = *cur;
  ret.t = GetRawTransactionVTable();
  return ret;
}
struct RawTransactionVTable *GetRawTransactionVTable(void) {
  static RawTransactionVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.version = RawTransaction_get_version_impl;
  s_vtable.cell_deps = RawTransaction_get_cell_deps_impl;
  s_vtable.header_deps = RawTransaction_get_header_deps_impl;
  s_vtable.inputs = RawTransaction_get_inputs_impl;
  s_vtable.outputs = RawTransaction_get_outputs_impl;
  s_vtable.outputs_data = RawTransaction_get_outputs_data_impl;
  return &s_vtable;
}
uint32_t RawTransaction_get_version_impl(RawTransactionType *this) {
  uint32_t ret;
  mol2_cursor_t ret2 = mol2_table_slice_by_index(&this->cur, 0);
  ret = convert_to_Uint32(&ret2);
  return ret;
}
CellDepVecType RawTransaction_get_cell_deps_impl(RawTransactionType *this) {
  CellDepVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 1);
  ret.cur = cur;
  ret.t = GetCellDepVecVTable();
  return ret;
}
Byte32VecType RawTransaction_get_header_deps_impl(RawTransactionType *this) {
  Byte32VecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 2);
  ret.cur = cur;
  ret.t = GetByte32VecVTable();
  return ret;
}
CellInputVecType RawTransaction_get_inputs_impl(RawTransactionType *this) {
  CellInputVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 3);
  ret.cur = cur;
  ret.t = GetCellInputVecVTable();
  return ret;
}
CellOutputVecType RawTransaction_get_outputs_impl(RawTransactionType *this) {
  CellOutputVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 4);
  ret.cur = cur;
  ret.t = GetCellOutputVecVTable();
  return ret;
}
BytesVecType RawTransaction_get_outputs_data_impl(RawTransactionType *this) {
  BytesVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 5);
  ret.cur = cur;
  ret.t = GetBytesVecVTable();
  return ret;
}
struct TransactionType make_Transaction(mol2_cursor_t *cur) {
  TransactionType ret;
  ret.cur = *cur;
  ret.t = GetTransactionVTable();
  return ret;
}
struct TransactionVTable *GetTransactionVTable(void) {
  static TransactionVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.raw = Transaction_get_raw_impl;
  s_vtable.witnesses = Transaction_get_witnesses_impl;
  return &s_vtable;
}
RawTransactionType Transaction_get_raw_impl(TransactionType *this) {
  RawTransactionType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 0);
  ret.cur = cur;
  ret.t = GetRawTransactionVTable();
  return ret;
}
BytesVecType Transaction_get_witnesses_impl(TransactionType *this) {
  BytesVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 1);
  ret.cur = cur;
  ret.t = GetBytesVecVTable();
  return ret;
}
struct RawHeaderType make_RawHeader(mol2_cursor_t *cur) {
  RawHeaderType ret;
  ret.cur = *cur;
  ret.t = GetRawHeaderVTable();
  return ret;
}
struct RawHeaderVTable *GetRawHeaderVTable(void) {
  static RawHeaderVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.version = RawHeader_get_version_impl;
  s_vtable.compact_target = RawHeader_get_compact_target_impl;
  s_vtable.timestamp = RawHeader_get_timestamp_impl;
  s_vtable.number = RawHeader_get_number_impl;
  s_vtable.epoch = RawHeader_get_epoch_impl;
  s_vtable.parent_hash = RawHeader_get_parent_hash_impl;
  s_vtable.transactions_root = RawHeader_get_transactions_root_impl;
  s_vtable.proposals_hash = RawHeader_get_proposals_hash_impl;
  s_vtable.uncles_hash = RawHeader_get_uncles_hash_impl;
  s_vtable.dao = RawHeader_get_dao_impl;
  return &s_vtable;
}
uint32_t RawHeader_get_version_impl(RawHeaderType *this) {
  uint32_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 0, 4);
  ret = convert_to_Uint32(&ret2);
  return ret;
}
uint32_t RawHeader_get_compact_target_impl(RawHeaderType *this) {
  uint32_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 4, 4);
  ret = convert_to_Uint32(&ret2);
  return ret;
}
uint64_t RawHeader_get_timestamp_impl(RawHeaderType *this) {
  uint64_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 8, 8);
  ret = convert_to_Uint64(&ret2);
  return ret;
}
uint64_t RawHeader_get_number_impl(RawHeaderType *this) {
  uint64_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 16, 8);
  ret = convert_to_Uint64(&ret2);
  return ret;
}
uint64_t RawHeader_get_epoch_impl(RawHeaderType *this) {
  uint64_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 24, 8);
  ret = convert_to_Uint64(&ret2);
  return ret;
}
mol2_cursor_t RawHeader_get_parent_hash_impl(RawHeaderType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 32, 32);
  ret = convert_to_array(&ret2);
  return ret;
}
mol2_cursor_t RawHeader_get_transactions_root_impl(RawHeaderType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 64, 32);
  ret = convert_to_array(&ret2);
  return ret;
}
mol2_cursor_t RawHeader_get_proposals_hash_impl(RawHeaderType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 96, 32);
  ret = convert_to_array(&ret2);
  return ret;
}
mol2_cursor_t RawHeader_get_uncles_hash_impl(RawHeaderType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 128, 32);
  ret = convert_to_array(&ret2);
  return ret;
}
mol2_cursor_t RawHeader_get_dao_impl(RawHeaderType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 160, 32);
  ret = convert_to_array(&ret2);
  return ret;
}
struct HeaderType make_Header(mol2_cursor_t *cur) {
  HeaderType ret;
  ret.cur = *cur;
  ret.t = GetHeaderVTable();
  return ret;
}
struct HeaderVTable *GetHeaderVTable(void) {
  static HeaderVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.raw = Header_get_raw_impl;
  s_vtable.nonce = Header_get_nonce_impl;
  return &s_vtable;
}
RawHeaderType Header_get_raw_impl(HeaderType *this) {
  RawHeaderType ret;
  mol2_cursor_t cur = mol2_slice_by_offset(&this->cur, 0, 192);
  ret.cur = cur;
  ret.t = GetRawHeaderVTable();
  return ret;
}
mol2_cursor_t Header_get_nonce_impl(HeaderType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t ret2 = mol2_slice_by_offset(&this->cur, 192, 16);
  ret = convert_to_array(&ret2);
  return ret;
}
struct UncleBlockType make_UncleBlock(mol2_cursor_t *cur) {
  UncleBlockType ret;
  ret.cur = *cur;
  ret.t = GetUncleBlockVTable();
  return ret;
}
struct UncleBlockVTable *GetUncleBlockVTable(void) {
  static UncleBlockVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.header = UncleBlock_get_header_impl;
  s_vtable.proposals = UncleBlock_get_proposals_impl;
  return &s_vtable;
}
HeaderType UncleBlock_get_header_impl(UncleBlockType *this) {
  HeaderType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 0);
  ret.cur = cur;
  ret.t = GetHeaderVTable();
  return ret;
}
ProposalShortIdVecType UncleBlock_get_proposals_impl(UncleBlockType *this) {
  ProposalShortIdVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 1);
  ret.cur = cur;
  ret.t = GetProposalShortIdVecVTable();
  return ret;
}
struct BlockType make_Block(mol2_cursor_t *cur) {
  BlockType ret;
  ret.cur = *cur;
  ret.t = GetBlockVTable();
  return ret;
}
struct BlockVTable *GetBlockVTable(void) {
  static BlockVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.header = Block_get_header_impl;
  s_vtable.uncles = Block_get_uncles_impl;
  s_vtable.transactions = Block_get_transactions_impl;
  s_vtable.proposals = Block_get_proposals_impl;
  return &s_vtable;
}
HeaderType Block_get_header_impl(BlockType *this) {
  HeaderType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 0);
  ret.cur = cur;
  ret.t = GetHeaderVTable();
  return ret;
}
UncleBlockVecType Block_get_uncles_impl(BlockType *this) {
  UncleBlockVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 1);
  ret.cur = cur;
  ret.t = GetUncleBlockVecVTable();
  return ret;
}
TransactionVecType Block_get_transactions_impl(BlockType *this) {
  TransactionVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 2);
  ret.cur = cur;
  ret.t = GetTransactionVecVTable();
  return ret;
}
ProposalShortIdVecType Block_get_proposals_impl(BlockType *this) {
  ProposalShortIdVecType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 3);
  ret.cur = cur;
  ret.t = GetProposalShortIdVecVTable();
  return ret;
}
struct CellbaseWitnessType make_CellbaseWitness(mol2_cursor_t *cur) {
  CellbaseWitnessType ret;
  ret.cur = *cur;
  ret.t = GetCellbaseWitnessVTable();
  return ret;
}
struct CellbaseWitnessVTable *GetCellbaseWitnessVTable(void) {
  static CellbaseWitnessVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.lock = CellbaseWitness_get_lock_impl;
  s_vtable.message = CellbaseWitness_get_message_impl;
  return &s_vtable;
}
ScriptType CellbaseWitness_get_lock_impl(CellbaseWitnessType *this) {
  ScriptType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 0);
  ret.cur = cur;
  ret.t = GetScriptVTable();
  return ret;
}
mol2_cursor_t CellbaseWitness_get_message_impl(CellbaseWitnessType *this) {
  mol2_cursor_t ret;
  mol2_cursor_t re2 = mol2_table_slice_by_index(&this->cur, 1);
  ret = convert_to_rawbytes(&re2);
  return ret;
}
struct WitnessArgsType make_WitnessArgs(mol2_cursor_t *cur) {
  WitnessArgsType ret;
  ret.cur = *cur;
  ret.t = GetWitnessArgsVTable();
  return ret;
}
struct WitnessArgsVTable *GetWitnessArgsVTable(void) {
  static WitnessArgsVTable s_vtable;
  static int inited = 0;
  if (inited) return &s_vtable;
  s_vtable.lock = WitnessArgs_get_lock_impl;
  s_vtable.input_type = WitnessArgs_get_input_type_impl;
  s_vtable.output_type = WitnessArgs_get_output_type_impl;
  return &s_vtable;
}
BytesOptType WitnessArgs_get_lock_impl(WitnessArgsType *this) {
  BytesOptType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 0);
  ret.cur = cur;
  ret.t = GetBytesOptVTable();
  return ret;
}
BytesOptType WitnessArgs_get_input_type_impl(WitnessArgsType *this) {
  BytesOptType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 1);
  ret.cur = cur;
  ret.t = GetBytesOptVTable();
  return ret;
}
BytesOptType WitnessArgs_get_output_type_impl(WitnessArgsType *this) {
  BytesOptType ret;
  mol2_cursor_t cur = mol2_table_slice_by_index(&this->cur, 2);
  ret.cur = cur;
  ret.t = GetBytesOptVTable();
  return ret;
}
#endif  // MOLECULEC_C2_DECLARATION_ONLY

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif  // _BLOCKCHAIN_API2_H_


================================================
File: deps/ckb-c-stdlib/molecule/blockchain.h
================================================
// Generated by Molecule 0.7.1

#define MOLECULEC_VERSION 7001
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef BLOCKCHAIN_H
#define BLOCKCHAIN_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_BLOCKCHAIN
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

/*
 * Reader APIs
 */

#define                                 MolReader_Uint32_verify(s, c)                   mol_verify_fixed_size(s, 4)
#define                                 MolReader_Uint32_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint32_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint32_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Uint32_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Uint64_verify(s, c)                   mol_verify_fixed_size(s, 8)
#define                                 MolReader_Uint64_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint64_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint64_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Uint64_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Uint64_get_nth4(s)                    mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Uint64_get_nth5(s)                    mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Uint64_get_nth6(s)                    mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Uint64_get_nth7(s)                    mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Uint128_verify(s, c)                  mol_verify_fixed_size(s, 16)
#define                                 MolReader_Uint128_get_nth0(s)                   mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint128_get_nth1(s)                   mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint128_get_nth2(s)                   mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Uint128_get_nth3(s)                   mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Uint128_get_nth4(s)                   mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Uint128_get_nth5(s)                   mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Uint128_get_nth6(s)                   mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Uint128_get_nth7(s)                   mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Uint128_get_nth8(s)                   mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_Uint128_get_nth9(s)                   mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_Uint128_get_nth10(s)                  mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_Uint128_get_nth11(s)                  mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_Uint128_get_nth12(s)                  mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_Uint128_get_nth13(s)                  mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_Uint128_get_nth14(s)                  mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_Uint128_get_nth15(s)                  mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_Byte32_verify(s, c)                   mol_verify_fixed_size(s, 32)
#define                                 MolReader_Byte32_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Byte32_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Byte32_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Byte32_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Byte32_get_nth4(s)                    mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Byte32_get_nth5(s)                    mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Byte32_get_nth6(s)                    mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Byte32_get_nth7(s)                    mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Byte32_get_nth8(s)                    mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_Byte32_get_nth9(s)                    mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_Byte32_get_nth10(s)                   mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_Byte32_get_nth11(s)                   mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_Byte32_get_nth12(s)                   mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_Byte32_get_nth13(s)                   mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_Byte32_get_nth14(s)                   mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_Byte32_get_nth15(s)                   mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_Byte32_get_nth16(s)                   mol_slice_by_offset(s, 16, 1)
#define                                 MolReader_Byte32_get_nth17(s)                   mol_slice_by_offset(s, 17, 1)
#define                                 MolReader_Byte32_get_nth18(s)                   mol_slice_by_offset(s, 18, 1)
#define                                 MolReader_Byte32_get_nth19(s)                   mol_slice_by_offset(s, 19, 1)
#define                                 MolReader_Byte32_get_nth20(s)                   mol_slice_by_offset(s, 20, 1)
#define                                 MolReader_Byte32_get_nth21(s)                   mol_slice_by_offset(s, 21, 1)
#define                                 MolReader_Byte32_get_nth22(s)                   mol_slice_by_offset(s, 22, 1)
#define                                 MolReader_Byte32_get_nth23(s)                   mol_slice_by_offset(s, 23, 1)
#define                                 MolReader_Byte32_get_nth24(s)                   mol_slice_by_offset(s, 24, 1)
#define                                 MolReader_Byte32_get_nth25(s)                   mol_slice_by_offset(s, 25, 1)
#define                                 MolReader_Byte32_get_nth26(s)                   mol_slice_by_offset(s, 26, 1)
#define                                 MolReader_Byte32_get_nth27(s)                   mol_slice_by_offset(s, 27, 1)
#define                                 MolReader_Byte32_get_nth28(s)                   mol_slice_by_offset(s, 28, 1)
#define                                 MolReader_Byte32_get_nth29(s)                   mol_slice_by_offset(s, 29, 1)
#define                                 MolReader_Byte32_get_nth30(s)                   mol_slice_by_offset(s, 30, 1)
#define                                 MolReader_Byte32_get_nth31(s)                   mol_slice_by_offset(s, 31, 1)
#define                                 MolReader_Uint256_verify(s, c)                  mol_verify_fixed_size(s, 32)
#define                                 MolReader_Uint256_get_nth0(s)                   mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint256_get_nth1(s)                   mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint256_get_nth2(s)                   mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Uint256_get_nth3(s)                   mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Uint256_get_nth4(s)                   mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Uint256_get_nth5(s)                   mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Uint256_get_nth6(s)                   mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Uint256_get_nth7(s)                   mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Uint256_get_nth8(s)                   mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_Uint256_get_nth9(s)                   mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_Uint256_get_nth10(s)                  mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_Uint256_get_nth11(s)                  mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_Uint256_get_nth12(s)                  mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_Uint256_get_nth13(s)                  mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_Uint256_get_nth14(s)                  mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_Uint256_get_nth15(s)                  mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_Uint256_get_nth16(s)                  mol_slice_by_offset(s, 16, 1)
#define                                 MolReader_Uint256_get_nth17(s)                  mol_slice_by_offset(s, 17, 1)
#define                                 MolReader_Uint256_get_nth18(s)                  mol_slice_by_offset(s, 18, 1)
#define                                 MolReader_Uint256_get_nth19(s)                  mol_slice_by_offset(s, 19, 1)
#define                                 MolReader_Uint256_get_nth20(s)                  mol_slice_by_offset(s, 20, 1)
#define                                 MolReader_Uint256_get_nth21(s)                  mol_slice_by_offset(s, 21, 1)
#define                                 MolReader_Uint256_get_nth22(s)                  mol_slice_by_offset(s, 22, 1)
#define                                 MolReader_Uint256_get_nth23(s)                  mol_slice_by_offset(s, 23, 1)
#define                                 MolReader_Uint256_get_nth24(s)                  mol_slice_by_offset(s, 24, 1)
#define                                 MolReader_Uint256_get_nth25(s)                  mol_slice_by_offset(s, 25, 1)
#define                                 MolReader_Uint256_get_nth26(s)                  mol_slice_by_offset(s, 26, 1)
#define                                 MolReader_Uint256_get_nth27(s)                  mol_slice_by_offset(s, 27, 1)
#define                                 MolReader_Uint256_get_nth28(s)                  mol_slice_by_offset(s, 28, 1)
#define                                 MolReader_Uint256_get_nth29(s)                  mol_slice_by_offset(s, 29, 1)
#define                                 MolReader_Uint256_get_nth30(s)                  mol_slice_by_offset(s, 30, 1)
#define                                 MolReader_Uint256_get_nth31(s)                  mol_slice_by_offset(s, 31, 1)
#define                                 MolReader_Bytes_verify(s, c)                    mol_fixvec_verify(s, 1)
#define                                 MolReader_Bytes_length(s)                       mol_fixvec_length(s)
#define                                 MolReader_Bytes_get(s, i)                       mol_fixvec_slice_by_index(s, 1, i)
#define                                 MolReader_Bytes_raw_bytes(s)                    mol_fixvec_slice_raw_bytes(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_BytesOpt_verify                       (const mol_seg_t*, bool);
#define                                 MolReader_BytesOpt_is_none(s)                   mol_option_is_none(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_BytesVec_verify                       (const mol_seg_t*, bool);
#define                                 MolReader_BytesVec_length(s)                    mol_dynvec_length(s)
#define                                 MolReader_BytesVec_get(s, i)                    mol_dynvec_slice_by_index(s, i)
#define                                 MolReader_Byte32Vec_verify(s, c)                mol_fixvec_verify(s, 32)
#define                                 MolReader_Byte32Vec_length(s)                   mol_fixvec_length(s)
#define                                 MolReader_Byte32Vec_get(s, i)                   mol_fixvec_slice_by_index(s, 32, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_ScriptOpt_verify                      (const mol_seg_t*, bool);
#define                                 MolReader_ScriptOpt_is_none(s)                  mol_option_is_none(s)
#define                                 MolReader_ProposalShortId_verify(s, c)          mol_verify_fixed_size(s, 10)
#define                                 MolReader_ProposalShortId_get_nth0(s)           mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_ProposalShortId_get_nth1(s)           mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_ProposalShortId_get_nth2(s)           mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_ProposalShortId_get_nth3(s)           mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_ProposalShortId_get_nth4(s)           mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_ProposalShortId_get_nth5(s)           mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_ProposalShortId_get_nth6(s)           mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_ProposalShortId_get_nth7(s)           mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_ProposalShortId_get_nth8(s)           mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_ProposalShortId_get_nth9(s)           mol_slice_by_offset(s, 9, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_UncleBlockVec_verify                  (const mol_seg_t*, bool);
#define                                 MolReader_UncleBlockVec_length(s)               mol_dynvec_length(s)
#define                                 MolReader_UncleBlockVec_get(s, i)               mol_dynvec_slice_by_index(s, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_TransactionVec_verify                 (const mol_seg_t*, bool);
#define                                 MolReader_TransactionVec_length(s)              mol_dynvec_length(s)
#define                                 MolReader_TransactionVec_get(s, i)              mol_dynvec_slice_by_index(s, i)
#define                                 MolReader_ProposalShortIdVec_verify(s, c)       mol_fixvec_verify(s, 10)
#define                                 MolReader_ProposalShortIdVec_length(s)          mol_fixvec_length(s)
#define                                 MolReader_ProposalShortIdVec_get(s, i)          mol_fixvec_slice_by_index(s, 10, i)
#define                                 MolReader_CellDepVec_verify(s, c)               mol_fixvec_verify(s, 37)
#define                                 MolReader_CellDepVec_length(s)                  mol_fixvec_length(s)
#define                                 MolReader_CellDepVec_get(s, i)                  mol_fixvec_slice_by_index(s, 37, i)
#define                                 MolReader_CellInputVec_verify(s, c)             mol_fixvec_verify(s, 44)
#define                                 MolReader_CellInputVec_length(s)                mol_fixvec_length(s)
#define                                 MolReader_CellInputVec_get(s, i)                mol_fixvec_slice_by_index(s, 44, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_CellOutputVec_verify                  (const mol_seg_t*, bool);
#define                                 MolReader_CellOutputVec_length(s)               mol_dynvec_length(s)
#define                                 MolReader_CellOutputVec_get(s, i)               mol_dynvec_slice_by_index(s, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Script_verify                         (const mol_seg_t*, bool);
#define                                 MolReader_Script_actual_field_count(s)          mol_table_actual_field_count(s)
#define                                 MolReader_Script_has_extra_fields(s)            mol_table_has_extra_fields(s, 3)
#define                                 MolReader_Script_get_code_hash(s)               mol_table_slice_by_index(s, 0)
#define                                 MolReader_Script_get_hash_type(s)               mol_table_slice_by_index(s, 1)
#define                                 MolReader_Script_get_args(s)                    mol_table_slice_by_index(s, 2)
#define                                 MolReader_OutPoint_verify(s, c)                 mol_verify_fixed_size(s, 36)
#define                                 MolReader_OutPoint_get_tx_hash(s)               mol_slice_by_offset(s, 0, 32)
#define                                 MolReader_OutPoint_get_index(s)                 mol_slice_by_offset(s, 32, 4)
#define                                 MolReader_CellInput_verify(s, c)                mol_verify_fixed_size(s, 44)
#define                                 MolReader_CellInput_get_since(s)                mol_slice_by_offset(s, 0, 8)
#define                                 MolReader_CellInput_get_previous_output(s)      mol_slice_by_offset(s, 8, 36)
MOLECULE_API_DECORATOR  mol_errno       MolReader_CellOutput_verify                     (const mol_seg_t*, bool);
#define                                 MolReader_CellOutput_actual_field_count(s)      mol_table_actual_field_count(s)
#define                                 MolReader_CellOutput_has_extra_fields(s)        mol_table_has_extra_fields(s, 3)
#define                                 MolReader_CellOutput_get_capacity(s)            mol_table_slice_by_index(s, 0)
#define                                 MolReader_CellOutput_get_lock(s)                mol_table_slice_by_index(s, 1)
#define                                 MolReader_CellOutput_get_type_(s)               mol_table_slice_by_index(s, 2)
#define                                 MolReader_CellDep_verify(s, c)                  mol_verify_fixed_size(s, 37)
#define                                 MolReader_CellDep_get_out_point(s)              mol_slice_by_offset(s, 0, 36)
#define                                 MolReader_CellDep_get_dep_type(s)               mol_slice_by_offset(s, 36, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_RawTransaction_verify                 (const mol_seg_t*, bool);
#define                                 MolReader_RawTransaction_actual_field_count(s)  mol_table_actual_field_count(s)
#define                                 MolReader_RawTransaction_has_extra_fields(s)    mol_table_has_extra_fields(s, 6)
#define                                 MolReader_RawTransaction_get_version(s)         mol_table_slice_by_index(s, 0)
#define                                 MolReader_RawTransaction_get_cell_deps(s)       mol_table_slice_by_index(s, 1)
#define                                 MolReader_RawTransaction_get_header_deps(s)     mol_table_slice_by_index(s, 2)
#define                                 MolReader_RawTransaction_get_inputs(s)          mol_table_slice_by_index(s, 3)
#define                                 MolReader_RawTransaction_get_outputs(s)         mol_table_slice_by_index(s, 4)
#define                                 MolReader_RawTransaction_get_outputs_data(s)    mol_table_slice_by_index(s, 5)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Transaction_verify                    (const mol_seg_t*, bool);
#define                                 MolReader_Transaction_actual_field_count(s)     mol_table_actual_field_count(s)
#define                                 MolReader_Transaction_has_extra_fields(s)       mol_table_has_extra_fields(s, 2)
#define                                 MolReader_Transaction_get_raw(s)                mol_table_slice_by_index(s, 0)
#define                                 MolReader_Transaction_get_witnesses(s)          mol_table_slice_by_index(s, 1)
#define                                 MolReader_RawHeader_verify(s, c)                mol_verify_fixed_size(s, 192)
#define                                 MolReader_RawHeader_get_version(s)              mol_slice_by_offset(s, 0, 4)
#define                                 MolReader_RawHeader_get_compact_target(s)       mol_slice_by_offset(s, 4, 4)
#define                                 MolReader_RawHeader_get_timestamp(s)            mol_slice_by_offset(s, 8, 8)
#define                                 MolReader_RawHeader_get_number(s)               mol_slice_by_offset(s, 16, 8)
#define                                 MolReader_RawHeader_get_epoch(s)                mol_slice_by_offset(s, 24, 8)
#define                                 MolReader_RawHeader_get_parent_hash(s)          mol_slice_by_offset(s, 32, 32)
#define                                 MolReader_RawHeader_get_transactions_root(s)    mol_slice_by_offset(s, 64, 32)
#define                                 MolReader_RawHeader_get_proposals_hash(s)       mol_slice_by_offset(s, 96, 32)
#define                                 MolReader_RawHeader_get_extra_hash(s)           mol_slice_by_offset(s, 128, 32)
#define                                 MolReader_RawHeader_get_dao(s)                  mol_slice_by_offset(s, 160, 32)
#define                                 MolReader_Header_verify(s, c)                   mol_verify_fixed_size(s, 208)
#define                                 MolReader_Header_get_raw(s)                     mol_slice_by_offset(s, 0, 192)
#define                                 MolReader_Header_get_nonce(s)                   mol_slice_by_offset(s, 192, 16)
MOLECULE_API_DECORATOR  mol_errno       MolReader_UncleBlock_verify                     (const mol_seg_t*, bool);
#define                                 MolReader_UncleBlock_actual_field_count(s)      mol_table_actual_field_count(s)
#define                                 MolReader_UncleBlock_has_extra_fields(s)        mol_table_has_extra_fields(s, 2)
#define                                 MolReader_UncleBlock_get_header(s)              mol_table_slice_by_index(s, 0)
#define                                 MolReader_UncleBlock_get_proposals(s)           mol_table_slice_by_index(s, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Block_verify                          (const mol_seg_t*, bool);
#define                                 MolReader_Block_actual_field_count(s)           mol_table_actual_field_count(s)
#define                                 MolReader_Block_has_extra_fields(s)             mol_table_has_extra_fields(s, 4)
#define                                 MolReader_Block_get_header(s)                   mol_table_slice_by_index(s, 0)
#define                                 MolReader_Block_get_uncles(s)                   mol_table_slice_by_index(s, 1)
#define                                 MolReader_Block_get_transactions(s)             mol_table_slice_by_index(s, 2)
#define                                 MolReader_Block_get_proposals(s)                mol_table_slice_by_index(s, 3)
MOLECULE_API_DECORATOR  mol_errno       MolReader_BlockV1_verify                        (const mol_seg_t*, bool);
#define                                 MolReader_BlockV1_actual_field_count(s)         mol_table_actual_field_count(s)
#define                                 MolReader_BlockV1_has_extra_fields(s)           mol_table_has_extra_fields(s, 5)
#define                                 MolReader_BlockV1_get_header(s)                 mol_table_slice_by_index(s, 0)
#define                                 MolReader_BlockV1_get_uncles(s)                 mol_table_slice_by_index(s, 1)
#define                                 MolReader_BlockV1_get_transactions(s)           mol_table_slice_by_index(s, 2)
#define                                 MolReader_BlockV1_get_proposals(s)              mol_table_slice_by_index(s, 3)
#define                                 MolReader_BlockV1_get_extension(s)              mol_table_slice_by_index(s, 4)
MOLECULE_API_DECORATOR  mol_errno       MolReader_CellbaseWitness_verify                (const mol_seg_t*, bool);
#define                                 MolReader_CellbaseWitness_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_CellbaseWitness_has_extra_fields(s)   mol_table_has_extra_fields(s, 2)
#define                                 MolReader_CellbaseWitness_get_lock(s)           mol_table_slice_by_index(s, 0)
#define                                 MolReader_CellbaseWitness_get_message(s)        mol_table_slice_by_index(s, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_WitnessArgs_verify                    (const mol_seg_t*, bool);
#define                                 MolReader_WitnessArgs_actual_field_count(s)     mol_table_actual_field_count(s)
#define                                 MolReader_WitnessArgs_has_extra_fields(s)       mol_table_has_extra_fields(s, 3)
#define                                 MolReader_WitnessArgs_get_lock(s)               mol_table_slice_by_index(s, 0)
#define                                 MolReader_WitnessArgs_get_input_type(s)         mol_table_slice_by_index(s, 1)
#define                                 MolReader_WitnessArgs_get_output_type(s)        mol_table_slice_by_index(s, 2)

/*
 * Builder APIs
 */

#define                                 MolBuilder_Uint32_init(b)                       mol_builder_initialize_fixed_size(b, 4)
#define                                 MolBuilder_Uint32_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint32_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint32_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Uint32_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Uint32_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint32_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Uint64_init(b)                       mol_builder_initialize_fixed_size(b, 8)
#define                                 MolBuilder_Uint64_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint64_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint64_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Uint64_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Uint64_set_nth4(b, p)                mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Uint64_set_nth5(b, p)                mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Uint64_set_nth6(b, p)                mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Uint64_set_nth7(b, p)                mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Uint64_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint64_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Uint128_init(b)                      mol_builder_initialize_fixed_size(b, 16)
#define                                 MolBuilder_Uint128_set_nth0(b, p)               mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint128_set_nth1(b, p)               mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint128_set_nth2(b, p)               mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Uint128_set_nth3(b, p)               mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Uint128_set_nth4(b, p)               mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Uint128_set_nth5(b, p)               mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Uint128_set_nth6(b, p)               mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Uint128_set_nth7(b, p)               mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Uint128_set_nth8(b, p)               mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_Uint128_set_nth9(b, p)               mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_Uint128_set_nth10(b, p)              mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_Uint128_set_nth11(b, p)              mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_Uint128_set_nth12(b, p)              mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_Uint128_set_nth13(b, p)              mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_Uint128_set_nth14(b, p)              mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_Uint128_set_nth15(b, p)              mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_Uint128_build(b)                     mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint128_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_Byte32_init(b)                       mol_builder_initialize_fixed_size(b, 32)
#define                                 MolBuilder_Byte32_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Byte32_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Byte32_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Byte32_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Byte32_set_nth4(b, p)                mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Byte32_set_nth5(b, p)                mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Byte32_set_nth6(b, p)                mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Byte32_set_nth7(b, p)                mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Byte32_set_nth8(b, p)                mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_Byte32_set_nth9(b, p)                mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_Byte32_set_nth10(b, p)               mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_Byte32_set_nth11(b, p)               mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_Byte32_set_nth12(b, p)               mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_Byte32_set_nth13(b, p)               mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_Byte32_set_nth14(b, p)               mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_Byte32_set_nth15(b, p)               mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_Byte32_set_nth16(b, p)               mol_builder_set_byte_by_offset(b, 16, p)
#define                                 MolBuilder_Byte32_set_nth17(b, p)               mol_builder_set_byte_by_offset(b, 17, p)
#define                                 MolBuilder_Byte32_set_nth18(b, p)               mol_builder_set_byte_by_offset(b, 18, p)
#define                                 MolBuilder_Byte32_set_nth19(b, p)               mol_builder_set_byte_by_offset(b, 19, p)
#define                                 MolBuilder_Byte32_set_nth20(b, p)               mol_builder_set_byte_by_offset(b, 20, p)
#define                                 MolBuilder_Byte32_set_nth21(b, p)               mol_builder_set_byte_by_offset(b, 21, p)
#define                                 MolBuilder_Byte32_set_nth22(b, p)               mol_builder_set_byte_by_offset(b, 22, p)
#define                                 MolBuilder_Byte32_set_nth23(b, p)               mol_builder_set_byte_by_offset(b, 23, p)
#define                                 MolBuilder_Byte32_set_nth24(b, p)               mol_builder_set_byte_by_offset(b, 24, p)
#define                                 MolBuilder_Byte32_set_nth25(b, p)               mol_builder_set_byte_by_offset(b, 25, p)
#define                                 MolBuilder_Byte32_set_nth26(b, p)               mol_builder_set_byte_by_offset(b, 26, p)
#define                                 MolBuilder_Byte32_set_nth27(b, p)               mol_builder_set_byte_by_offset(b, 27, p)
#define                                 MolBuilder_Byte32_set_nth28(b, p)               mol_builder_set_byte_by_offset(b, 28, p)
#define                                 MolBuilder_Byte32_set_nth29(b, p)               mol_builder_set_byte_by_offset(b, 29, p)
#define                                 MolBuilder_Byte32_set_nth30(b, p)               mol_builder_set_byte_by_offset(b, 30, p)
#define                                 MolBuilder_Byte32_set_nth31(b, p)               mol_builder_set_byte_by_offset(b, 31, p)
#define                                 MolBuilder_Byte32_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Byte32_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Uint256_init(b)                      mol_builder_initialize_fixed_size(b, 32)
#define                                 MolBuilder_Uint256_set_nth0(b, p)               mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint256_set_nth1(b, p)               mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint256_set_nth2(b, p)               mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Uint256_set_nth3(b, p)               mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Uint256_set_nth4(b, p)               mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Uint256_set_nth5(b, p)               mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Uint256_set_nth6(b, p)               mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Uint256_set_nth7(b, p)               mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Uint256_set_nth8(b, p)               mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_Uint256_set_nth9(b, p)               mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_Uint256_set_nth10(b, p)              mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_Uint256_set_nth11(b, p)              mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_Uint256_set_nth12(b, p)              mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_Uint256_set_nth13(b, p)              mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_Uint256_set_nth14(b, p)              mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_Uint256_set_nth15(b, p)              mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_Uint256_set_nth16(b, p)              mol_builder_set_byte_by_offset(b, 16, p)
#define                                 MolBuilder_Uint256_set_nth17(b, p)              mol_builder_set_byte_by_offset(b, 17, p)
#define                                 MolBuilder_Uint256_set_nth18(b, p)              mol_builder_set_byte_by_offset(b, 18, p)
#define                                 MolBuilder_Uint256_set_nth19(b, p)              mol_builder_set_byte_by_offset(b, 19, p)
#define                                 MolBuilder_Uint256_set_nth20(b, p)              mol_builder_set_byte_by_offset(b, 20, p)
#define                                 MolBuilder_Uint256_set_nth21(b, p)              mol_builder_set_byte_by_offset(b, 21, p)
#define                                 MolBuilder_Uint256_set_nth22(b, p)              mol_builder_set_byte_by_offset(b, 22, p)
#define                                 MolBuilder_Uint256_set_nth23(b, p)              mol_builder_set_byte_by_offset(b, 23, p)
#define                                 MolBuilder_Uint256_set_nth24(b, p)              mol_builder_set_byte_by_offset(b, 24, p)
#define                                 MolBuilder_Uint256_set_nth25(b, p)              mol_builder_set_byte_by_offset(b, 25, p)
#define                                 MolBuilder_Uint256_set_nth26(b, p)              mol_builder_set_byte_by_offset(b, 26, p)
#define                                 MolBuilder_Uint256_set_nth27(b, p)              mol_builder_set_byte_by_offset(b, 27, p)
#define                                 MolBuilder_Uint256_set_nth28(b, p)              mol_builder_set_byte_by_offset(b, 28, p)
#define                                 MolBuilder_Uint256_set_nth29(b, p)              mol_builder_set_byte_by_offset(b, 29, p)
#define                                 MolBuilder_Uint256_set_nth30(b, p)              mol_builder_set_byte_by_offset(b, 30, p)
#define                                 MolBuilder_Uint256_set_nth31(b, p)              mol_builder_set_byte_by_offset(b, 31, p)
#define                                 MolBuilder_Uint256_build(b)                     mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint256_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_Bytes_init(b)                        mol_fixvec_builder_initialize(b, 16)
#define                                 MolBuilder_Bytes_push(b, p)                     mol_fixvec_builder_push_byte(b, p)
#define                                 MolBuilder_Bytes_build(b)                       mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_Bytes_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_BytesOpt_init(b)                     mol_builder_initialize_fixed_size(b, 0)
#define                                 MolBuilder_BytesOpt_set(b, p, l)                mol_option_builder_set(b, p, l)
#define                                 MolBuilder_BytesOpt_build(b)                    mol_builder_finalize_simple(b)
#define                                 MolBuilder_BytesOpt_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_BytesVec_init(b)                     mol_builder_initialize_with_capacity(b, 64, 64)
#define                                 MolBuilder_BytesVec_push(b, p, l)               mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_BytesVec_build(b)                    mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_BytesVec_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_Byte32Vec_init(b)                    mol_fixvec_builder_initialize(b, 512)
#define                                 MolBuilder_Byte32Vec_push(b, p)                 mol_fixvec_builder_push(b, p, 32)
#define                                 MolBuilder_Byte32Vec_build(b)                   mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_Byte32Vec_clear(b)                   mol_builder_discard(b)
#define                                 MolBuilder_ScriptOpt_init(b)                    mol_builder_initialize_fixed_size(b, 0)
#define                                 MolBuilder_ScriptOpt_set(b, p, l)               mol_option_builder_set(b, p, l)
#define                                 MolBuilder_ScriptOpt_build(b)                   mol_builder_finalize_simple(b)
#define                                 MolBuilder_ScriptOpt_clear(b)                   mol_builder_discard(b)
#define                                 MolBuilder_ProposalShortId_init(b)              mol_builder_initialize_fixed_size(b, 10)
#define                                 MolBuilder_ProposalShortId_set_nth0(b, p)       mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_ProposalShortId_set_nth1(b, p)       mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_ProposalShortId_set_nth2(b, p)       mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_ProposalShortId_set_nth3(b, p)       mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_ProposalShortId_set_nth4(b, p)       mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_ProposalShortId_set_nth5(b, p)       mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_ProposalShortId_set_nth6(b, p)       mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_ProposalShortId_set_nth7(b, p)       mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_ProposalShortId_set_nth8(b, p)       mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_ProposalShortId_set_nth9(b, p)       mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_ProposalShortId_build(b)             mol_builder_finalize_simple(b)
#define                                 MolBuilder_ProposalShortId_clear(b)             mol_builder_discard(b)
#define                                 MolBuilder_UncleBlockVec_init(b)                mol_builder_initialize_with_capacity(b, 4096, 64)
#define                                 MolBuilder_UncleBlockVec_push(b, p, l)          mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_UncleBlockVec_build(b)               mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_UncleBlockVec_clear(b)               mol_builder_discard(b)
#define                                 MolBuilder_TransactionVec_init(b)               mol_builder_initialize_with_capacity(b, 2048, 64)
#define                                 MolBuilder_TransactionVec_push(b, p, l)         mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_TransactionVec_build(b)              mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_TransactionVec_clear(b)              mol_builder_discard(b)
#define                                 MolBuilder_ProposalShortIdVec_init(b)           mol_fixvec_builder_initialize(b, 256)
#define                                 MolBuilder_ProposalShortIdVec_push(b, p)        mol_fixvec_builder_push(b, p, 10)
#define                                 MolBuilder_ProposalShortIdVec_build(b)          mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_ProposalShortIdVec_clear(b)          mol_builder_discard(b)
#define                                 MolBuilder_CellDepVec_init(b)                   mol_fixvec_builder_initialize(b, 1024)
#define                                 MolBuilder_CellDepVec_push(b, p)                mol_fixvec_builder_push(b, p, 37)
#define                                 MolBuilder_CellDepVec_build(b)                  mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_CellDepVec_clear(b)                  mol_builder_discard(b)
#define                                 MolBuilder_CellInputVec_init(b)                 mol_fixvec_builder_initialize(b, 1024)
#define                                 MolBuilder_CellInputVec_push(b, p)              mol_fixvec_builder_push(b, p, 44)
#define                                 MolBuilder_CellInputVec_build(b)                mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_CellInputVec_clear(b)                mol_builder_discard(b)
#define                                 MolBuilder_CellOutputVec_init(b)                mol_builder_initialize_with_capacity(b, 2048, 64)
#define                                 MolBuilder_CellOutputVec_push(b, p, l)          mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_CellOutputVec_build(b)               mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_CellOutputVec_clear(b)               mol_builder_discard(b)
#define                                 MolBuilder_Script_init(b)                       mol_table_builder_initialize(b, 256, 3)
#define                                 MolBuilder_Script_set_code_hash(b, p, l)        mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Script_set_hash_type(b, p)           mol_table_builder_add_byte(b, 1, p)
#define                                 MolBuilder_Script_set_args(b, p, l)             mol_table_builder_add(b, 2, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Script_build                         (mol_builder_t);
#define                                 MolBuilder_Script_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_OutPoint_init(b)                     mol_builder_initialize_fixed_size(b, 36)
#define                                 MolBuilder_OutPoint_set_tx_hash(b, p)           mol_builder_set_by_offset(b, 0, p, 32)
#define                                 MolBuilder_OutPoint_set_index(b, p)             mol_builder_set_by_offset(b, 32, p, 4)
#define                                 MolBuilder_OutPoint_build(b)                    mol_builder_finalize_simple(b)
#define                                 MolBuilder_OutPoint_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_CellInput_init(b)                    mol_builder_initialize_fixed_size(b, 44)
#define                                 MolBuilder_CellInput_set_since(b, p)            mol_builder_set_by_offset(b, 0, p, 8)
#define                                 MolBuilder_CellInput_set_previous_output(b, p)  mol_builder_set_by_offset(b, 8, p, 36)
#define                                 MolBuilder_CellInput_build(b)                   mol_builder_finalize_simple(b)
#define                                 MolBuilder_CellInput_clear(b)                   mol_builder_discard(b)
#define                                 MolBuilder_CellOutput_init(b)                   mol_table_builder_initialize(b, 512, 3)
#define                                 MolBuilder_CellOutput_set_capacity(b, p, l)     mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_CellOutput_set_lock(b, p, l)         mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_CellOutput_set_type_(b, p, l)        mol_table_builder_add(b, 2, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_CellOutput_build                     (mol_builder_t);
#define                                 MolBuilder_CellOutput_clear(b)                  mol_builder_discard(b)
#define                                 MolBuilder_CellDep_init(b)                      mol_builder_initialize_fixed_size(b, 37)
#define                                 MolBuilder_CellDep_set_out_point(b, p)          mol_builder_set_by_offset(b, 0, p, 36)
#define                                 MolBuilder_CellDep_set_dep_type(b, p)           mol_builder_set_byte_by_offset(b, 36, p)
#define                                 MolBuilder_CellDep_build(b)                     mol_builder_finalize_simple(b)
#define                                 MolBuilder_CellDep_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_RawTransaction_init(b)               mol_table_builder_initialize(b, 256, 6)
#define                                 MolBuilder_RawTransaction_set_version(b, p, l)  mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_RawTransaction_set_cell_deps(b, p, l) mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_RawTransaction_set_header_deps(b, p, l) mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_RawTransaction_set_inputs(b, p, l)   mol_table_builder_add(b, 3, p, l)
#define                                 MolBuilder_RawTransaction_set_outputs(b, p, l)  mol_table_builder_add(b, 4, p, l)
#define                                 MolBuilder_RawTransaction_set_outputs_data(b, p, l) mol_table_builder_add(b, 5, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_RawTransaction_build                 (mol_builder_t);
#define                                 MolBuilder_RawTransaction_clear(b)              mol_builder_discard(b)
#define                                 MolBuilder_Transaction_init(b)                  mol_table_builder_initialize(b, 512, 2)
#define                                 MolBuilder_Transaction_set_raw(b, p, l)         mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Transaction_set_witnesses(b, p, l)   mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Transaction_build                    (mol_builder_t);
#define                                 MolBuilder_Transaction_clear(b)                 mol_builder_discard(b)
#define                                 MolBuilder_RawHeader_init(b)                    mol_builder_initialize_fixed_size(b, 192)
#define                                 MolBuilder_RawHeader_set_version(b, p)          mol_builder_set_by_offset(b, 0, p, 4)
#define                                 MolBuilder_RawHeader_set_compact_target(b, p)   mol_builder_set_by_offset(b, 4, p, 4)
#define                                 MolBuilder_RawHeader_set_timestamp(b, p)        mol_builder_set_by_offset(b, 8, p, 8)
#define                                 MolBuilder_RawHeader_set_number(b, p)           mol_builder_set_by_offset(b, 16, p, 8)
#define                                 MolBuilder_RawHeader_set_epoch(b, p)            mol_builder_set_by_offset(b, 24, p, 8)
#define                                 MolBuilder_RawHeader_set_parent_hash(b, p)      mol_builder_set_by_offset(b, 32, p, 32)
#define                                 MolBuilder_RawHeader_set_transactions_root(b, p) mol_builder_set_by_offset(b, 64, p, 32)
#define                                 MolBuilder_RawHeader_set_proposals_hash(b, p)   mol_builder_set_by_offset(b, 96, p, 32)
#define                                 MolBuilder_RawHeader_set_extra_hash(b, p)       mol_builder_set_by_offset(b, 128, p, 32)
#define                                 MolBuilder_RawHeader_set_dao(b, p)              mol_builder_set_by_offset(b, 160, p, 32)
#define                                 MolBuilder_RawHeader_build(b)                   mol_builder_finalize_simple(b)
#define                                 MolBuilder_RawHeader_clear(b)                   mol_builder_discard(b)
#define                                 MolBuilder_Header_init(b)                       mol_builder_initialize_fixed_size(b, 208)
#define                                 MolBuilder_Header_set_raw(b, p)                 mol_builder_set_by_offset(b, 0, p, 192)
#define                                 MolBuilder_Header_set_nonce(b, p)               mol_builder_set_by_offset(b, 192, p, 16)
#define                                 MolBuilder_Header_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Header_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_UncleBlock_init(b)                   mol_table_builder_initialize(b, 1024, 2)
#define                                 MolBuilder_UncleBlock_set_header(b, p, l)       mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_UncleBlock_set_proposals(b, p, l)    mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_UncleBlock_build                     (mol_builder_t);
#define                                 MolBuilder_UncleBlock_clear(b)                  mol_builder_discard(b)
#define                                 MolBuilder_Block_init(b)                        mol_table_builder_initialize(b, 1024, 4)
#define                                 MolBuilder_Block_set_header(b, p, l)            mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Block_set_uncles(b, p, l)            mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_Block_set_transactions(b, p, l)      mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_Block_set_proposals(b, p, l)         mol_table_builder_add(b, 3, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Block_build                          (mol_builder_t);
#define                                 MolBuilder_Block_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_BlockV1_init(b)                      mol_table_builder_initialize(b, 1024, 5)
#define                                 MolBuilder_BlockV1_set_header(b, p, l)          mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_BlockV1_set_uncles(b, p, l)          mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_BlockV1_set_transactions(b, p, l)    mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_BlockV1_set_proposals(b, p, l)       mol_table_builder_add(b, 3, p, l)
#define                                 MolBuilder_BlockV1_set_extension(b, p, l)       mol_table_builder_add(b, 4, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_BlockV1_build                        (mol_builder_t);
#define                                 MolBuilder_BlockV1_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_CellbaseWitness_init(b)              mol_table_builder_initialize(b, 512, 2)
#define                                 MolBuilder_CellbaseWitness_set_lock(b, p, l)    mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_CellbaseWitness_set_message(b, p, l) mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_CellbaseWitness_build                (mol_builder_t);
#define                                 MolBuilder_CellbaseWitness_clear(b)             mol_builder_discard(b)
#define                                 MolBuilder_WitnessArgs_init(b)                  mol_table_builder_initialize(b, 64, 3)
#define                                 MolBuilder_WitnessArgs_set_lock(b, p, l)        mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_WitnessArgs_set_input_type(b, p, l)  mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_WitnessArgs_set_output_type(b, p, l) mol_table_builder_add(b, 2, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_WitnessArgs_build                    (mol_builder_t);
#define                                 MolBuilder_WitnessArgs_clear(b)                 mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint32[4]        =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint64[8]        =  {
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint128[16]      =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Byte32[32]       =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint256[32]      =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Bytes[4]         =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_BytesOpt[0]      =  {};
MOLECULE_API_DECORATOR const uint8_t MolDefault_BytesVec[4]      =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Byte32Vec[4]     =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_ScriptOpt[0]     =  {};
MOLECULE_API_DECORATOR const uint8_t MolDefault_ProposalShortId[10] =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_UncleBlockVec[4] =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_TransactionVec[4] =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_ProposalShortIdVec[4] =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_CellDepVec[4]    =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_CellInputVec[4]  =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_CellOutputVec[4] =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Script[53]       =  {
    0x35, ____, ____, ____, 0x10, ____, ____, ____, 0x30, ____, ____, ____,
    0x31, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_OutPoint[36]     =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_CellInput[44]    =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_CellOutput[77]   =  {
    0x4d, ____, ____, ____, 0x10, ____, ____, ____, 0x18, ____, ____, ____,
    0x4d, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    0x35, ____, ____, ____, 0x10, ____, ____, ____, 0x30, ____, ____, ____,
    0x31, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_CellDep[37]      =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_RawTransaction[52] =  {
    0x34, ____, ____, ____, 0x1c, ____, ____, ____, 0x20, ____, ____, ____,
    0x24, ____, ____, ____, 0x28, ____, ____, ____, 0x2c, ____, ____, ____,
    0x30, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, 0x04, ____, ____, ____,
    0x04, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Transaction[68]  =  {
    0x44, ____, ____, ____, 0x0c, ____, ____, ____, 0x40, ____, ____, ____,
    0x34, ____, ____, ____, 0x1c, ____, ____, ____, 0x20, ____, ____, ____,
    0x24, ____, ____, ____, 0x28, ____, ____, ____, 0x2c, ____, ____, ____,
    0x30, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, 0x04, ____, ____, ____,
    0x04, ____, ____, ____, 0x04, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_RawHeader[192]   =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Header[208]      =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_UncleBlock[224]  =  {
    0xe0, ____, ____, ____, 0x0c, ____, ____, ____, 0xdc, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Block[240]       =  {
    0xf0, ____, ____, ____, 0x14, ____, ____, ____, 0xe4, ____, ____, ____,
    0xe8, ____, ____, ____, 0xec, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    0x04, ____, ____, ____, 0x04, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_BlockV1[248]     =  {
    0xf8, ____, ____, ____, 0x18, ____, ____, ____, 0xe8, ____, ____, ____,
    0xec, ____, ____, ____, 0xf0, ____, ____, ____, 0xf4, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, 0x04, ____, ____, ____, 0x04, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_CellbaseWitness[69] =  {
    0x45, ____, ____, ____, 0x0c, ____, ____, ____, 0x41, ____, ____, ____,
    0x35, ____, ____, ____, 0x10, ____, ____, ____, 0x30, ____, ____, ____,
    0x31, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_WitnessArgs[16]  =  {
    0x10, ____, ____, ____, 0x10, ____, ____, ____, 0x10, ____, ____, ____,
    0x10, ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_BytesOpt_verify (const mol_seg_t *input, bool compatible) {
    if (input->size != 0) {
        return MolReader_Bytes_verify(input, compatible);
    } else {
        return MOL_OK;
    }
}
MOLECULE_API_DECORATOR mol_errno MolReader_BytesVec_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_Bytes_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_ScriptOpt_verify (const mol_seg_t *input, bool compatible) {
    if (input->size != 0) {
        return MolReader_Script_verify(input, compatible);
    } else {
        return MOL_OK;
    }
}
MOLECULE_API_DECORATOR mol_errno MolReader_UncleBlockVec_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_UncleBlock_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_UncleBlock_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_TransactionVec_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_Transaction_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_Transaction_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_CellOutputVec_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_CellOutput_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_CellOutput_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_Script_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 3) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 3) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Byte32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        if (offsets[2] - offsets[1] != 1) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_CellOutput_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 3) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 3) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Uint64_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Script_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_ScriptOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_RawTransaction_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 6) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 6) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Uint32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_CellDepVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Byte32Vec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_CellInputVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[4];
        inner.size = offsets[5] - offsets[4];
        errno = MolReader_CellOutputVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[5];
        inner.size = offsets[6] - offsets[5];
        errno = MolReader_BytesVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_Transaction_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_RawTransaction_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_BytesVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_UncleBlock_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Header_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_ProposalShortIdVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_Block_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 4) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 4) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Header_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_UncleBlockVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_TransactionVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_ProposalShortIdVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_BlockV1_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 5) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 5) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Header_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_UncleBlockVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_TransactionVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_ProposalShortIdVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[4];
        inner.size = offsets[5] - offsets[4];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_CellbaseWitness_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Script_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_WitnessArgs_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 3) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 3) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_BytesOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_BytesOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_BytesOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Script_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 16;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 1 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 1 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_Byte32, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 1;
        *dst = 0;
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_CellOutput_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 16;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 8 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 53 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 0 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 8 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 53 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 0 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 8;
        memcpy(dst, &MolDefault_Uint64, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 53;
        memcpy(dst, &MolDefault_Script, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_ScriptOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_RawTransaction_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 28;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[9];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[11];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[9];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[11];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Uint32, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_CellDepVec, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Byte32Vec, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_CellInputVec, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[9];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_CellOutputVec, len);
    } else {
        mol_num_t of = builder.number_ptr[8];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[11];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_BytesVec, len);
    } else {
        mol_num_t of = builder.number_ptr[10];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Transaction_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 52 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 52 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 52;
        memcpy(dst, &MolDefault_RawTransaction, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_BytesVec, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_UncleBlock_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 208 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 208 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 208;
        memcpy(dst, &MolDefault_Header, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_ProposalShortIdVec, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Block_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 20;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 208 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 208 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 208;
        memcpy(dst, &MolDefault_Header, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_UncleBlockVec, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_TransactionVec, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_ProposalShortIdVec, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_BlockV1_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 24;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 208 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[9];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 208 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[9];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 208;
        memcpy(dst, &MolDefault_Header, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_UncleBlockVec, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_TransactionVec, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_ProposalShortIdVec, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[9];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[8];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_CellbaseWitness_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 53 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 53 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 53;
        memcpy(dst, &MolDefault_Script, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_WitnessArgs_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 16;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 0 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 0 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 0 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 0 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 0 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 0 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_BytesOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_BytesOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_BytesOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_BLOCKCHAIN
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_BLOCKCHAIN
#endif /* __DEFINE_MOLECULE_API_DECORATOR_BLOCKCHAIN */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* BLOCKCHAIN_H */


================================================
File: deps/ckb-c-stdlib/molecule/molecule2_reader.h
================================================
#ifndef MOLECULE2_READER_H
#define MOLECULE2_READER_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef mol2_printf
#define mol2_printf printf
#endif
#ifndef MOL2_EXIT
#define MOL2_EXIT exit
#endif

#ifndef MOL2_PANIC
#define MOL2_PANIC(err)                                   \
  do {                                                    \
    mol2_printf("Error at %s: %d\n", __FILE__, __LINE__); \
    MOL2_EXIT(err);                                       \
  } while (0)
#endif

/*
 * This part is not for normal users.
 */
//
// referenced API or macros
//
#ifndef ASSERT
#define ASSERT(s) ((void)0)
#endif

#ifndef MIN
#define MIN(a, b) ((a > b) ? (b) : (a))
#endif
#ifndef MAX
#define MAX(a, b) ((a > b) ? (a) : (b))
#endif

typedef uint32_t mol2_num_t;  // Item Id
typedef uint8_t mol2_errno;   // Error Number
#define MOL2_NUM_T_SIZE 4

// predefined type
// If the types defined in schema is fundamental type:
// 1. dynvec of byte(<byte>) or
// 2. array([byte; N])
// They will be converted to the type mol2_cursor_t automatically
// 3. byte
// it will be converted to uint8_t.

// predefined type
// If the types defined in schema:
// 1. the name is same as below (case insensitive)
// 2. the type is matched (e.g. Uint32 should have type with [byte; 4])
// they will be converted to the corresponding types automatically instead of
// just returning raw byte array.
//
typedef uint64_t Uint64;  // [byte; 8]
typedef int64_t Int64;    // [byte; 8]
typedef uint32_t Uint32;  // [byte; 4]
typedef int32_t Int32;    // [byte; 4]
typedef uint16_t Uint16;  // [byte; 2]
typedef int16_t Int16;    // [byte; 2]
typedef uint8_t Uint8;    // [byte; 1]
typedef int8_t Int8;      // [byte; 1]

/* Error Numbers */

#define MOL2_OK 0x00
#define MOL2_ERR 0xff

#define MOL2_ERR_TOTAL_SIZE 0x01
#define MOL2_ERR_HEADER 0x02
#define MOL2_ERR_OFFSET 0x03
#define MOL2_ERR_UNKNOWN_ITEM 0x04
#define MOL2_ERR_INDEX_OUT_OF_BOUNDS 0x05
#define MOL2_ERR_FIELD_COUNT 0x06
#define MOL2_ERR_DATA 0x07
#define MOL2_ERR_OVERFLOW 0x08

// converting function
// format: convert_to_${Type}
#define SWAP(a, b, t) \
  {                   \
    (t) = (a);        \
    (a) = (b);        \
    (b) = (t);        \
  }
#define is_le2()      \
  ((union {           \
     uint16_t i;      \
     unsigned char c; \
   }){.i = 1}         \
       .c)

void change_endian(uint8_t *ptr, int size);
/**
 * read from a data source, with offset, up to "len" bytes into ptr.
 * the memory size of "ptr" is "len".
 *
 * Return the length actually written. It may be smaller than "len".
 *
 * The "args" will be passed into "read" function as the first argument.
 */
typedef uint32_t (*mol2_source_t)(uintptr_t arg[], uint8_t *ptr, uint32_t len,
                                  uint32_t offset);

#define MAX_CACHE_SIZE 2048
#define MIN_CACHE_SIZE 64

// data source with cache support
typedef struct mol2_data_source_t {
  // function "read" might have more arguments
  uintptr_t args[4];
  // total size of the data source. It is always true:
  // offset+size <= total_size
  uint32_t total_size;

  mol2_source_t read;
  // start point of the cache
  // if [offset, size) is in [start_point, start_point+cache_size), it returns
  // memory in cache directly otherwise, it will try to load first (like cache
  // miss)
  uint32_t start_point;
  uint32_t cache_size;
  // it's normally same as MAX_CACHE_SIZE.
  // modify it for testing purpose
  uint32_t max_cache_size;
  // variable length structure
  // it's true length is calculated by "MOL2_DATA_SOURCE_LEN".
  uint8_t cache[];
} mol2_data_source_t;

#define MOL2_DATA_SOURCE_LEN(cache_size) \
  (sizeof(mol2_data_source_t) + (cache_size))

#define DEFAULT_DATA_SOURCE_LENGTH (sizeof(mol2_data_source_t) + MAX_CACHE_SIZE)

/**
 * --------------- MUST READ ----------------------
 * This is the most important data struct in this file, MUST READ!
 * The data_source is to fetch data from external, like memory, disk, or some
 * others. It is with cache support. You can get an idea how to implement one
 * from functions: "mol2_source_memory" and "mol2_make_cursor_from_memory".
 *
 * The offset and size, is an "view"/"slice" of the data source.
 *
 * When a new cursor is generated from an old one,
 * the "data_source" must be copied. The offset and size can be different.
 * Currently, there is no way to convert one data source to another.
 *
 */
typedef struct mol2_cursor_t {
  uint32_t offset;  // offset of slice
  uint32_t size;    // size of slice
  mol2_data_source_t *data_source;
} mol2_cursor_t;

// a sample source over memory
uint32_t mol2_source_memory(uintptr_t args[], uint8_t *ptr, uint32_t len,
                            uint32_t offset);
mol2_cursor_t mol2_make_cursor_from_memory(const void *memory, uint32_t size);

uint32_t mol2_read_at(const mol2_cursor_t *cur, uint8_t *buff,
                      uint32_t buff_len);

// Bytes segment.
typedef struct {
  uint8_t *ptr;     // Pointer
  mol2_num_t size;  // Full size
} mol2_seg_t;

// Unpacked Union
typedef struct {
  mol2_num_t item_id;    // Item Id
  mol2_cursor_t cursor;  // Cursor
} mol2_union_t;

// Result for returning segment.
typedef struct {
  mol2_errno errno;   // Error Number
  mol2_cursor_t cur;  // Cursor
} mol2_cursor_res_t;

void mol2_add_offset(mol2_cursor_t *cur, uint32_t offset);
void mol2_sub_size(mol2_cursor_t *cur, uint32_t shrinked_size);
void mol2_validate(const mol2_cursor_t *cur);

mol2_num_t mol2_unpack_number(const mol2_cursor_t *cursor);

mol2_errno mol2_verify_fixed_size(const mol2_cursor_t *input,
                                  mol2_num_t total_size);

mol2_errno mol2_fixvec_verify(const mol2_cursor_t *input, mol2_num_t item_size);

bool mol2_option_is_none(const mol2_cursor_t *input);
mol2_union_t mol2_union_unpack(const mol2_cursor_t *input);
mol2_num_t mol2_fixvec_length(const mol2_cursor_t *input);
mol2_num_t mol2_dynvec_length(const mol2_cursor_t *input);
mol2_num_t mol2_table_actual_field_count(const mol2_cursor_t *input);
bool mol2_table_has_extra_fields(const mol2_cursor_t *input,
                                 mol2_num_t field_count);
mol2_cursor_t mol2_slice_by_offset(const mol2_cursor_t *input,
                                   mol2_num_t offset, mol2_num_t size);

mol2_cursor_res_t mol2_fixvec_slice_by_index(const mol2_cursor_t *input,
                                             mol2_num_t item_size,
                                             mol2_num_t item_index);

mol2_cursor_res_t mol2_dynvec_slice_by_index(const mol2_cursor_t *input,
                                             mol2_num_t item_index);

mol2_cursor_t mol2_table_slice_by_index(const mol2_cursor_t *input,
                                        mol2_num_t field_index);

mol2_cursor_t mol2_fixvec_slice_raw_bytes(const mol2_cursor_t *input);
Uint64 convert_to_Uint64(mol2_cursor_t *cur);
Int64 convert_to_Int64(mol2_cursor_t *cur);
Uint32 convert_to_Uint32(mol2_cursor_t *cur);
Int32 convert_to_Int32(mol2_cursor_t *cur);
Uint16 convert_to_Uint16(mol2_cursor_t *cur);
Int16 convert_to_Int16(mol2_cursor_t *cur);
Uint8 convert_to_Uint8(mol2_cursor_t *cur);
Int8 convert_to_Int8(mol2_cursor_t *cur);
mol2_cursor_t convert_to_array(mol2_cursor_t *cur);
mol2_cursor_t convert_to_rawbytes(mol2_cursor_t *cur);

#ifndef MOLECULEC_C2_DECLARATION_ONLY

// cur->offset = cur->offset + offset
void mol2_add_offset(mol2_cursor_t *cur, uint32_t offset) {
  uint32_t res;
  if (__builtin_add_overflow(cur->offset, offset, &res)) {
    MOL2_PANIC(MOL2_ERR_OVERFLOW);
  }
  cur->offset = res;
}

// cur->size = cur->size - shrinked_size
void mol2_sub_size(mol2_cursor_t *cur, uint32_t shrinked_size) {
  uint32_t res;
  if (__builtin_sub_overflow(cur->size, shrinked_size, &res)) {
    MOL2_PANIC(MOL2_ERR_OVERFLOW);
  }
  cur->size = res;
}

// mol2_unpack_number(cur) / 4 - 1
uint32_t mol2_get_item_count(mol2_cursor_t *cur) {
  uint32_t count = mol2_unpack_number(cur) / 4;
  if (count == 0) {
    MOL2_PANIC(MOL2_ERR_OVERFLOW);
  }
  return count - 1;
}
// item_size * item_count + offset
uint32_t mol2_calculate_offset(uint32_t item_size, uint32_t item_count,
                               uint32_t offset) {
  uint32_t mul_res;
  if (__builtin_mul_overflow(item_size, item_count, &mul_res)) {
    MOL2_PANIC(MOL2_ERR_OVERFLOW);
  }
  uint32_t sum_res;
  if (__builtin_add_overflow(mul_res, offset, &sum_res)) {
    MOL2_PANIC(MOL2_ERR_OVERFLOW);
  }
  return sum_res;
}

void mol2_validate(const mol2_cursor_t *cur) {
  uint32_t res;
  if (__builtin_add_overflow(cur->offset, cur->size, &res)) {
    MOL2_PANIC(MOL2_ERR_OVERFLOW);
  }
  if (res > cur->data_source->total_size) {
    mol2_printf("total_size(%d) > offset(%d) + size(%d)\n",
                cur->data_source->total_size, cur->offset, cur->size);
    MOL2_PANIC(MOL2_ERR_INDEX_OUT_OF_BOUNDS);
  }
}

mol2_errno mol2_verify_fixed_size(const mol2_cursor_t *input,
                                  mol2_num_t total_size) {
  return input->size == total_size ? MOL2_OK : MOL2_ERR_TOTAL_SIZE;
}

mol2_errno mol2_fixvec_verify(const mol2_cursor_t *input,
                              mol2_num_t item_size) {
  if (input->size < MOL2_NUM_T_SIZE) {
    return MOL2_ERR_HEADER;
  }
  mol2_num_t item_count = mol2_unpack_number(input);
  if (item_count == 0) {
    return input->size == MOL2_NUM_T_SIZE ? MOL2_OK : MOL2_ERR_TOTAL_SIZE;
  }
  // mol2_num_t total_size = mol2_NUM_T_SIZE + item_size * item_count;
  mol2_num_t total_size =
      mol2_calculate_offset(item_size, item_count, MOL2_NUM_T_SIZE);
  return input->size == total_size ? MOL2_OK : MOL2_ERR_TOTAL_SIZE;
}

bool mol2_option_is_none(const mol2_cursor_t *input) {
  return input->size == 0;
}

mol2_union_t mol2_union_unpack(const mol2_cursor_t *input) {
  mol2_union_t ret;
  ret.item_id = mol2_unpack_number(input);
  ret.cursor = *input;  // must copy
  //   ret.cursor.offset = input->offset + mol2_NUM_T_SIZE;
  //   ret.cursor.size = input->size - mol2_NUM_T_SIZE;
  mol2_add_offset(&ret.cursor, MOL2_NUM_T_SIZE);
  mol2_sub_size(&ret.cursor, MOL2_NUM_T_SIZE);
  mol2_validate(&ret.cursor);
  return ret;
}

mol2_num_t mol2_fixvec_length(const mol2_cursor_t *input) {
  return mol2_unpack_number(input);
}

mol2_num_t mol2_dynvec_length(const mol2_cursor_t *input) {
  if (input->size == MOL2_NUM_T_SIZE) {
    return 0;
  } else {
    mol2_cursor_t cur = *input;
    mol2_add_offset(&cur, MOL2_NUM_T_SIZE);
    mol2_sub_size(&cur, MOL2_NUM_T_SIZE);
    mol2_validate(&cur);
    // return (mol2_unpack_number(&cur) / 4) - 1;
    return mol2_get_item_count(&cur);
  }
}

mol2_num_t mol2_table_actual_field_count(const mol2_cursor_t *input) {
  return mol2_dynvec_length(input);
}

bool mol2_table_has_extra_fields(const mol2_cursor_t *input,
                                 mol2_num_t field_count) {
  return mol2_table_actual_field_count(input) > field_count;
}

mol2_cursor_t mol2_slice_by_offset(const mol2_cursor_t *input,
                                   mol2_num_t offset, mol2_num_t size) {
  mol2_cursor_t cur = *input;

  //  cur.offset = input->offset + offset;
  mol2_add_offset(&cur, offset);
  cur.size = size;
  mol2_validate(&cur);
  return cur;
}

mol2_cursor_res_t mol2_slice_by_offset2(const mol2_cursor_t *input,
                                        mol2_num_t offset, mol2_num_t size) {
  mol2_cursor_t cur = *input;

  //  cur.offset = input->offset + offset;
  mol2_add_offset(&cur, offset);
  cur.size = size;
  mol2_validate(&cur);

  mol2_cursor_res_t res;
  res.errno = MOL2_OK;
  res.cur = cur;
  return res;
}

mol2_cursor_res_t mol2_fixvec_slice_by_index(const mol2_cursor_t *input,
                                             mol2_num_t item_size,
                                             mol2_num_t item_index) {
  mol2_cursor_res_t res;
  res.cur = *input;
  mol2_num_t item_count = mol2_unpack_number(input);
  if (item_index >= item_count) {
    res.errno = MOL2_ERR_INDEX_OUT_OF_BOUNDS;
  } else {
    res.errno = MOL2_OK;
    //    res.cur.offset = input->offset + mol2_NUM_T_SIZE + item_size *
    //    item_index;
    uint32_t offset =
        mol2_calculate_offset(item_size, item_index, MOL2_NUM_T_SIZE);
    mol2_add_offset(&res.cur, offset);
    res.cur.size = item_size;
    mol2_validate(&res.cur);
  }
  return res;
}

mol2_cursor_res_t mol2_dynvec_slice_by_index(const mol2_cursor_t *input,
                                             mol2_num_t item_index) {
  mol2_cursor_res_t res;
  res.cur = *input;
  struct mol2_cursor_t temp = *input;

  mol2_num_t total_size = mol2_unpack_number(input);
  if (total_size == MOL2_NUM_T_SIZE) {
    res.errno = MOL2_ERR_INDEX_OUT_OF_BOUNDS;
  } else {
    // temp.offset = input->offset + mol2_NUM_T_SIZE;
    mol2_add_offset(&temp, MOL2_NUM_T_SIZE);
    // mol2_num_t item_count = (mol2_unpack_number(&temp) / 4) - 1;
    mol2_num_t item_count = mol2_get_item_count(&temp);

    if (item_index >= item_count) {
      res.errno = MOL2_ERR_INDEX_OUT_OF_BOUNDS;
    } else {
      temp.offset = input->offset;
      uint32_t temp_offset =
          mol2_calculate_offset(MOL2_NUM_T_SIZE, item_index + 1, 0);
      mol2_add_offset(&temp, temp_offset);

      mol2_num_t item_start = mol2_unpack_number(&temp);
      if (item_index + 1 == item_count) {
        res.errno = MOL2_OK;
        res.cur.offset = input->offset;
        mol2_add_offset(&res.cur, item_start);
        res.cur.size = total_size;
        mol2_sub_size(&res.cur, item_start);
      } else {
        temp.offset = input->offset;
        uint32_t calc_offset =
            mol2_calculate_offset(MOL2_NUM_T_SIZE, item_index + 2, 0);
        mol2_add_offset(&temp, calc_offset);

        mol2_num_t item_end = mol2_unpack_number(&temp);
        res.errno = MOL2_OK;
        res.cur.offset = input->offset;
        mol2_add_offset(&res.cur, item_start);
        res.cur.size = item_end;
        mol2_sub_size(&res.cur, item_start);
      }
    }
  }
  if (res.errno == MOL2_OK) {
    mol2_validate(&res.cur);
  }
  return res;
}

mol2_cursor_t mol2_table_slice_by_index(const mol2_cursor_t *input,
                                        mol2_num_t field_index) {
  mol2_cursor_res_t res = mol2_dynvec_slice_by_index(input, field_index);
  ASSERT(res.errno == 0);
  return res.cur;
}

mol2_cursor_t mol2_fixvec_slice_raw_bytes(const mol2_cursor_t *input) {
  mol2_cursor_t cur = *input;
  mol2_add_offset(&cur, MOL2_NUM_T_SIZE);
  cur.size = mol2_unpack_number(input);
  mol2_validate(&cur);
  return cur;
}

Uint64 convert_to_Uint64(mol2_cursor_t *cur) {
  uint64_t ret;
  uint32_t len = mol2_read_at(cur, (uint8_t *)&ret, sizeof(ret));
  if (len != sizeof(ret)) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  change_endian((uint8_t *)&ret, sizeof(ret));
  return ret;
}

Int64 convert_to_Int64(mol2_cursor_t *cur) {
  int64_t ret;
  uint32_t len = mol2_read_at(cur, (uint8_t *)&ret, sizeof(ret));
  if (len != sizeof(ret)) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  change_endian((uint8_t *)&ret, sizeof(ret));
  return ret;
}

Uint32 convert_to_Uint32(mol2_cursor_t *cur) {
  uint32_t ret;
  uint32_t len = mol2_read_at(cur, (uint8_t *)&ret, sizeof(ret));
  if (len != sizeof(ret)) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  change_endian((uint8_t *)&ret, sizeof(ret));
  return ret;
}

Int32 convert_to_Int32(mol2_cursor_t *cur) {
  int32_t ret;
  uint32_t len = mol2_read_at(cur, (uint8_t *)&ret, sizeof(ret));
  if (len != sizeof(ret)) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  change_endian((uint8_t *)&ret, sizeof(ret));
  return ret;
}

Uint16 convert_to_Uint16(mol2_cursor_t *cur) {
  uint16_t ret;
  uint32_t len = mol2_read_at(cur, (uint8_t *)&ret, sizeof(ret));
  if (len != sizeof(ret)) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  change_endian((uint8_t *)&ret, sizeof(ret));
  return ret;
}

Int16 convert_to_Int16(mol2_cursor_t *cur) {
  int16_t ret;
  uint32_t len = mol2_read_at(cur, (uint8_t *)&ret, sizeof(ret));
  ASSERT(len == sizeof(ret));
  if (len != sizeof(ret)) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  return ret;
}

Uint8 convert_to_Uint8(mol2_cursor_t *cur) {
  uint8_t ret;
  uint32_t len = mol2_read_at(cur, (uint8_t *)&ret, sizeof(ret));
  if (len != sizeof(ret)) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  change_endian((uint8_t *)&ret, sizeof(ret));
  return ret;
}

Int8 convert_to_Int8(mol2_cursor_t *cur) {
  int8_t ret;
  uint32_t len = mol2_read_at(cur, (uint8_t *)&ret, sizeof(ret));
  if (len != sizeof(ret)) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  change_endian((uint8_t *)&ret, sizeof(ret));
  return ret;
}

mol2_cursor_t convert_to_array(mol2_cursor_t *cur) { return *cur; }

mol2_cursor_t convert_to_rawbytes(mol2_cursor_t *cur) {
  return mol2_fixvec_slice_raw_bytes(cur);
}

void change_endian(uint8_t *ptr, int size) {
  if (is_le2()) return;
  if (size == 0) return;

  if (size % 2 != 0) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  uint8_t t = 0;
  for (int i = 0; i < size / 2; i++) {
    SWAP(ptr[i], ptr[size - 1 - i], t);
  }
}

// this is a sample implementation over memory
uint32_t mol2_source_memory(uintptr_t args[], uint8_t *ptr, uint32_t len,
                            uint32_t offset) {
  uint32_t mem_len = (uint32_t)args[1];
  ASSERT(offset < mem_len);
  uint32_t remaining_len = mem_len - offset;

  uint32_t min_len = MIN(remaining_len, len);
  uint8_t *start_mem = (uint8_t *)args[0];
  ASSERT((offset + min_len) <= mem_len);
  memcpy(ptr, start_mem + offset, min_len);
  return min_len;
}

// this is a sample implementation over memory
mol2_cursor_t mol2_make_cursor_from_memory(const void *memory, uint32_t size) {
  mol2_cursor_t cur;
  cur.offset = 0;
  cur.size = size;
  // init data source
  static mol2_data_source_t s_data_source = {0};

  s_data_source.read = mol2_source_memory;
  s_data_source.total_size = size;
  s_data_source.args[0] = (uintptr_t)memory;
  s_data_source.args[1] = (uintptr_t)size;

  s_data_source.cache_size = 0;
  s_data_source.start_point = 0;
  s_data_source.max_cache_size = MAX_CACHE_SIZE;
  cur.data_source = &s_data_source;
  return cur;
}

/**
 * mol2_read_at reads MIN(cur->size, buff_len) bytes from data source
 * "cur" into buff. It returns that number.
 *
 * If the return number is smaller than MIN(cur->size, buff_len), the data
 * source might encounter problem. There are some reasons:
 * 1. The data in data source is not consistent with molecule file (too
 * small).
 * 2. I/O error. It's impossible for memory data source or Syscall
 *
 * If a cache miss is triggered: use "read" to load from data source to the
 * the cache. Then use copy from cache to "buff".
 **/
uint32_t mol2_read_at(const mol2_cursor_t *cur, uint8_t *buff,
                      uint32_t buff_len) {
  uint32_t read_len = MIN(cur->size, buff_len);

  mol2_data_source_t *ds = cur->data_source;
  // beyond cache size, "read" it directly.
  if (read_len > ds->max_cache_size) {
    return ds->read(ds->args, buff, read_len, cur->offset);
  }

  // cache miss
  if (cur->offset < ds->start_point ||
      ((cur->offset + read_len) > ds->start_point + ds->cache_size)) {
    uint32_t size =
        ds->read(ds->args, ds->cache, ds->max_cache_size, cur->offset);
    if (size < read_len) {
      MOL2_PANIC(MOL2_ERR_DATA);
      return 0;
    }
    // update cache setting
    ds->cache_size = size;
    ds->start_point = cur->offset;
    if (ds->cache_size > ds->max_cache_size) {
      MOL2_PANIC(MOL2_ERR_OVERFLOW);
      return 0;
    }
  }
  // cache hit
  if (cur->offset < ds->start_point ||
      (cur->offset - ds->start_point) > ds->max_cache_size) {
    MOL2_PANIC(MOL2_ERR_OVERFLOW);
    return 0;
  }
  uint8_t *read_point = ds->cache + cur->offset - ds->start_point;
  if ((read_point + read_len) > (ds->cache + ds->cache_size)) {
    MOL2_PANIC(MOL2_ERR_OVERFLOW);
    return 0;
  }

  memcpy(buff, read_point, read_len);
  return read_len;
}

mol2_num_t mol2_unpack_number(const mol2_cursor_t *cursor) {
  uint8_t src[4];
  uint32_t len = mol2_read_at(cursor, src, 4);
  if (len != 4) {
    MOL2_PANIC(MOL2_ERR_DATA);
  }
  if (is_le2()) {
    return *(const uint32_t *)src;
  } else {
    uint32_t output = 0;
    uint8_t *dst = (uint8_t *)&output;
    dst[3] = src[0];
    dst[2] = src[1];
    dst[1] = src[2];
    dst[0] = src[3];
    return output;
  }
}

#endif  // MOLECULEC_C2_DECLARATION_ONLY

/*
 * Undef macros which are internal use only.
 */

#undef is_le2

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* MOLECULE2_READER_H */


================================================
File: deps/ckb-c-stdlib/molecule/molecule_builder.h
================================================
#ifndef MOLECULE_BUILDER_H
#define MOLECULE_BUILDER_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include "molecule_reader.h"

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

/*
 * This part is not for normal users.
 */

// Test if the host is big endian machine.
#define is_le()                 ((union { uint16_t i; unsigned char c; }){ .i = 1 }.c)

/*
 * Definitions of types and simple utilities.
 */

// The Builder.
//  - Can be stack allocated
//  - Must be initialized with `MolBuilder_Xxx_init`
//  - Must be cleared with `MolBuilder_Xxx_build` or `MolBuilder_Xxx_clear`
//  - Can be set with:
//      - `MolBuilder_Xxx_set` (For Option)
//      - `MolBuilder_Xxx_set_*` (For Union, Array, Struct, Table)
//      - `MolBuilder_Xxx_push` (For FixVec, DynVec)
typedef struct {
    uint8_t                     *data_ptr;          // Data Pointer
    mol_num_t                   data_used;          // Data Used
    mol_num_t                   data_cap;           // Data Capacity

    mol_num_t                   *number_ptr;        // A Pointer of Numbers
    mol_num_t                   number_used;        // Numbers used
    mol_num_t                   number_cap;         // Numbers Capacity
} mol_builder_t;

/* Utilities. */

MOLECULE_API_DECORATOR void mol_pack_number(uint8_t *dst, mol_num_t *num) {
    const uint8_t *src = (const uint8_t *)num;
    if (is_le()) {
        memcpy(dst, src, MOL_NUM_T_SIZE);
    } else {
        dst[3] = src[0];
        dst[2] = src[1];
        dst[1] = src[2];
        dst[0] = src[3];
    }
}

/*
 * Core functions.
 */

MOLECULE_API_DECORATOR void mol_builder_discard(mol_builder_t builder) {
    free(builder.data_ptr);
    free(builder.number_ptr);
}

MOLECULE_API_DECORATOR void mol_builder_initialize_fixed_size(mol_builder_t *builder, mol_num_t fixed_size) {
    if (fixed_size == 0) {
        builder->data_ptr = NULL;
        builder->data_used = 0;
        builder->data_cap = 0;
    } else {
        builder->data_ptr = (uint8_t*)malloc(fixed_size);
        if (builder->data_ptr == NULL) {
            return;
        }
        memset(builder->data_ptr, 0x00, fixed_size);
        builder->data_used = fixed_size;
        builder->data_cap = fixed_size;
    }
    builder->number_ptr = NULL;
    builder->number_used = 0;
    builder->number_cap = 0;
}

MOLECULE_API_DECORATOR void mol_union_builder_initialize(mol_builder_t *builder, mol_num_t data_capacity, mol_num_t item_id, const uint8_t *default_ptr, mol_num_t default_len) {
    builder->data_ptr = (uint8_t*)malloc(data_capacity);
    if (builder->data_ptr == NULL) {
        return;
    }
    builder->data_cap = data_capacity;
    mol_pack_number(builder->data_ptr, &item_id);
    builder->data_used = MOL_NUM_T_SIZE + default_len;
    if (default_ptr == NULL) {
        *(builder->data_ptr+MOL_NUM_T_SIZE) = 0;
    } else {
        memcpy(builder->data_ptr+MOL_NUM_T_SIZE, default_ptr, default_len);
    }
    builder->number_ptr = NULL;
    builder->number_used = 0;
    builder->number_cap = 0;
}

MOLECULE_API_DECORATOR void mol_builder_initialize_with_capacity(mol_builder_t *builder, mol_num_t data_capacity, mol_num_t number_capacity) {
    builder->data_ptr = (uint8_t*)malloc(data_capacity);
    if (builder->data_ptr == NULL) {
        return;
    }
    builder->data_used = 0;
    builder->data_cap = data_capacity;
    builder->number_ptr = (mol_num_t*)malloc(number_capacity);
    if (builder->number_ptr == NULL) {
        return;
    }
    builder->number_used = 0;
    builder->number_cap = number_capacity;
}

MOLECULE_API_DECORATOR void mol_fixvec_builder_initialize(mol_builder_t *builder, mol_num_t data_capacity) {
    mol_builder_initialize_with_capacity(builder, data_capacity, MOL_NUM_T_SIZE);
    builder->number_ptr[0] = 0;
    builder->number_used = MOL_NUM_T_SIZE;
}

MOLECULE_API_DECORATOR void mol_table_builder_initialize(mol_builder_t *builder, mol_num_t data_capacity, mol_num_t field_count) {
    mol_builder_initialize_with_capacity(builder, data_capacity, MOL_NUM_T_SIZE * field_count * 2);
    memset(builder->number_ptr, 0x00, builder->number_cap);
    builder->number_used = builder->number_cap;
}

MOLECULE_API_DECORATOR void mol_option_builder_set(mol_builder_t *builder, const uint8_t *data_ptr, mol_num_t data_len) {
    builder->data_used = data_len;
    if (builder->data_used == 0) {
        builder->data_cap = 0;
        free(builder->data_ptr);
        builder->data_ptr = NULL;
    } else {
        if (builder->data_cap < builder->data_used) {
            builder->data_cap = builder->data_used;
            builder->data_ptr = (uint8_t*)realloc(builder->data_ptr, builder->data_cap);
        }
        memcpy(builder->data_ptr, data_ptr, builder->data_used);
    }
}

MOLECULE_API_DECORATOR void mol_union_builder_set_byte(mol_builder_t *builder, mol_num_t item_id, uint8_t data) {
    builder->data_used = MOL_NUM_T_SIZE + 1;
    if (builder->data_cap < builder->data_used) {
        builder->data_cap = builder->data_used;
        builder->data_ptr = (uint8_t*)realloc(builder->data_ptr, builder->data_cap);
    }
    mol_pack_number(builder->data_ptr, &item_id);
    *(builder->data_ptr+MOL_NUM_T_SIZE) = data;
}

MOLECULE_API_DECORATOR void mol_union_builder_set(mol_builder_t *builder, mol_num_t item_id, const uint8_t *data_ptr, mol_num_t data_len) {
    builder->data_used = MOL_NUM_T_SIZE + data_len;
    if (builder->data_cap < builder->data_used) {
        builder->data_cap = builder->data_used;
        builder->data_ptr = (uint8_t*)realloc(builder->data_ptr, builder->data_cap);
    }
    mol_pack_number(builder->data_ptr, &item_id);
    memcpy(builder->data_ptr+MOL_NUM_T_SIZE, data_ptr, data_len);
}

MOLECULE_API_DECORATOR void mol_builder_set_byte_by_offset(mol_builder_t *builder, mol_num_t offset, uint8_t data) {
    *(builder->data_ptr+offset) = data;
}

MOLECULE_API_DECORATOR void mol_builder_set_by_offset(mol_builder_t *builder, mol_num_t offset, const uint8_t *data_ptr, mol_num_t length) {
    memcpy(builder->data_ptr+offset, data_ptr, length);
}

MOLECULE_API_DECORATOR void mol_fixvec_builder_push_byte(mol_builder_t *builder, uint8_t data) {
    while (builder->data_cap < builder->data_used + 1) {
        builder->data_cap *= 2;
        builder->data_ptr = (uint8_t*)realloc(builder->data_ptr, builder->data_cap);
    }
    builder->number_ptr[0] += 1;
    *(builder->data_ptr+builder->data_used) = data;
    builder->data_used += 1;
}

MOLECULE_API_DECORATOR void mol_fixvec_builder_push(mol_builder_t *builder, const uint8_t *data_ptr, mol_num_t length) {
    while (builder->data_cap < builder->data_used + length) {
        builder->data_cap *= 2;
        builder->data_ptr = (uint8_t*)realloc(builder->data_ptr, builder->data_cap);
    }
    builder->number_ptr[0] += 1;
    memcpy(builder->data_ptr+builder->data_used, data_ptr, length);
    builder->data_used += length;
}

MOLECULE_API_DECORATOR void mol_dynvec_builder_push(mol_builder_t *builder, const uint8_t *data_ptr, mol_num_t data_len) {
    while (builder->data_cap < builder->data_used + data_len) {
        builder->data_cap *= 2;
        builder->data_ptr = (uint8_t*)realloc(builder->data_ptr, builder->data_cap);
    }
    while (builder->number_cap < builder->number_used + MOL_NUM_T_SIZE) {
        builder->number_cap *= 2;
        builder->number_ptr = (mol_num_t*)realloc(builder->number_ptr, builder->number_cap);
    }

    mol_num_t next_number_index = builder->number_used / MOL_NUM_T_SIZE;
    builder->number_ptr[next_number_index] = builder->data_used;
    builder->number_used += MOL_NUM_T_SIZE;

    if (data_len != 0) {
        memcpy(builder->data_ptr+builder->data_used, data_ptr, data_len);
        builder->data_used += data_len;
    }
}

MOLECULE_API_DECORATOR void mol_table_builder_add_byte(mol_builder_t *builder, mol_num_t field_index, uint8_t data) {
    while (builder->data_cap < builder->data_used + 1) {
        builder->data_cap *= 2;
        builder->data_ptr = (uint8_t*)realloc(builder->data_ptr, builder->data_cap);
    }

    builder->number_ptr[field_index * 2] = builder->data_used;
    builder->number_ptr[field_index * 2 + 1] = 1;
    *(builder->data_ptr+builder->data_used) = data;
    builder->data_used += 1;
}

MOLECULE_API_DECORATOR void mol_table_builder_add(mol_builder_t *builder, mol_num_t field_index, const uint8_t *data_ptr, mol_num_t data_len) {
    if (data_len == 0) {
        builder->number_ptr[field_index * 2] = 0;
        builder->number_ptr[field_index * 2 + 1] = 0;
    } else {
        while (builder->data_cap < builder->data_used + data_len) {
            builder->data_cap *= 2;
            builder->data_ptr = (uint8_t*)realloc(builder->data_ptr, builder->data_cap);
        }

        builder->number_ptr[field_index * 2] = builder->data_used;
        builder->number_ptr[field_index * 2 + 1] = data_len;
        memcpy(builder->data_ptr+builder->data_used, data_ptr, data_len);
        builder->data_used += data_len;
    }
}

MOLECULE_API_DECORATOR mol_seg_res_t mol_builder_finalize_simple(mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    res.seg.ptr = builder.data_ptr;
    res.seg.size = builder.data_used;
    free(builder.number_ptr);
    return res;
}

MOLECULE_API_DECORATOR mol_seg_res_t mol_fixvec_builder_finalize(mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    res.seg.size = MOL_NUM_T_SIZE + builder.data_used;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    if (res.seg.ptr == NULL) {
        res.errno = MOL_ERR;
        return res;
    }
    mol_pack_number(res.seg.ptr, &builder.number_ptr[0]);
    if (builder.data_used > 0) {
        memcpy((res.seg.ptr+MOL_NUM_T_SIZE), builder.data_ptr, builder.data_used);
    }
    mol_builder_discard(builder);
    return res;
}

MOLECULE_API_DECORATOR mol_seg_res_t mol_dynvec_builder_finalize(mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    res.seg.size = MOL_NUM_T_SIZE + builder.number_used + builder.data_used;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    if (res.seg.ptr == NULL) {
        res.errno = MOL_ERR;
        return res;
    }
    mol_pack_number(res.seg.ptr, &res.seg.size);
    mol_num_t number_count = builder.number_used / MOL_NUM_T_SIZE;
    mol_num_t header_size = MOL_NUM_T_SIZE + builder.number_used;
    for (mol_num_t number_index=0; number_index<number_count; number_index++) {
        builder.number_ptr[number_index] += header_size;
    }
    memcpy((res.seg.ptr+MOL_NUM_T_SIZE), builder.number_ptr, builder.number_used);
    memcpy((res.seg.ptr+MOL_NUM_T_SIZE+builder.number_used), builder.data_ptr, builder.data_used);
    mol_builder_discard(builder);
    return res;
}

/*
 * Undef macros which are internal use only.
 */

#undef is_le

#ifdef __DEFINE_MOLECULE_API_DECORATOR
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR
#endif /* __DEFINE_MOLECULE_API_DECORATOR */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* MOLECULE_BUILDER_H */


================================================
File: deps/ckb-c-stdlib/molecule/molecule_reader.h
================================================
#ifndef MOLECULE_READER_H
#define MOLECULE_READER_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <stdbool.h>
#include <stdint.h>

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

#define MOLECULE_API_VERSION        7000
#define MOLECULEC_VERSION_MIN       5000

#if MOLECULE_API_VERSION < MOLECULE_API_VERSION_MIN
#error This file was generated by a newer version of moleculec which is \
    incompatible with current headers in use. Please update the headers.
#endif

#if MOLECULEC_VERSION < MOLECULEC_VERSION_MIN
#error This file was generated by an older version of moleculec which is \
    incompatible with current headers in use. Please regenerate this file \
    with a newer version of moleculec.
#endif

/*
 * This part is not for normal users.
 */

// Test if the host is big endian machine.
#define is_le()                 ((union { uint16_t i; unsigned char c; }){ .i = 1 }.c)

/*
 * Definitions of types and simple utilities.
 */

/* Core types */

typedef uint32_t                mol_num_t;          // Item Id

typedef uint8_t                 mol_errno;          // Error Number

#define MolNum                  UINT32_C

#define MOL_NUM_T_SIZE          4

// Bytes segment.
typedef struct {
    uint8_t                     *ptr;               // Pointer
    mol_num_t                   size;               // Full size
} mol_seg_t;

// Unpacked Union
typedef struct {
    mol_num_t                   item_id;            // Item Id
    mol_seg_t                   seg;                // Segment
} mol_union_t;

// Result for returning segment.
typedef struct {
    mol_errno                   errno;              // Error Number
    mol_seg_t                   seg;                // Segment
} mol_seg_res_t;

/* Error Numbers */

#define MOL_OK                              0x00
#define MOL_ERR                             0xff

#define MOL_ERR_TOTAL_SIZE                  0x01
#define MOL_ERR_HEADER                      0x02
#define MOL_ERR_OFFSET                      0x03
#define MOL_ERR_UNKNOWN_ITEM                0x04
#define MOL_ERR_INDEX_OUT_OF_BOUNDS         0x05
#define MOL_ERR_FIELD_COUNT                 0x06
#define MOL_ERR_DATA                        0x07

/* Utilities. */

MOLECULE_API_DECORATOR mol_num_t mol_unpack_number(const uint8_t *src) {
    uint32_t output = 0;
    uint8_t *dst = (uint8_t*) &output;
    if (is_le()) {
      dst[3] = src[3];
      dst[2] = src[2];
      dst[1] = src[1];
      dst[0] = src[0];
    } else {
      dst[3] = src[0];
      dst[2] = src[1];
      dst[1] = src[2];
      dst[0] = src[3];
    }
    return output;
}


/*
 * Core functions.
 */

/* Verify Functions. */

// Verify Array / Struct.
MOLECULE_API_DECORATOR mol_errno mol_verify_fixed_size(const mol_seg_t *input, mol_num_t total_size) {
    return input->size == total_size ? MOL_OK : MOL_ERR_TOTAL_SIZE;
}

// Verify FixVec.
MOLECULE_API_DECORATOR mol_errno mol_fixvec_verify(const mol_seg_t *input, mol_num_t item_size) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    mol_num_t item_count = mol_unpack_number(input->ptr);
    if (item_count == 0) {
        return input->size == MOL_NUM_T_SIZE ? MOL_OK : MOL_ERR_TOTAL_SIZE;
    }
    mol_num_t total_size = MOL_NUM_T_SIZE + item_size * item_count;
    return input->size == total_size ? MOL_OK : MOL_ERR_TOTAL_SIZE;
}

/* Getters.
 *
 * ### Notice
 *
 * The input of getters should be checked.
 *
 * These getters will raise segmentation fault if the input is illegal or
 * return an incorrect result.
 */

// Check if an Option is None.
MOLECULE_API_DECORATOR bool mol_option_is_none(const mol_seg_t *input) {
    return input->size == 0;
}

// Get the inner of a Union.
MOLECULE_API_DECORATOR mol_union_t mol_union_unpack(const mol_seg_t *input) {
    mol_union_t ret;
    ret.item_id = mol_unpack_number(input->ptr);
    ret.seg.ptr = input->ptr + MOL_NUM_T_SIZE;
    ret.seg.size = input->size - MOL_NUM_T_SIZE;
    return ret;
}

// Get the length of a FixVec.
MOLECULE_API_DECORATOR mol_num_t mol_fixvec_length(const mol_seg_t *input) {
    return mol_unpack_number(input->ptr);
}

// Get the length of a DynVec.
MOLECULE_API_DECORATOR mol_num_t mol_dynvec_length(const mol_seg_t *input) {
    if (input->size == MOL_NUM_T_SIZE) {
        return 0;
    } else {
        return (mol_unpack_number(input->ptr + MOL_NUM_T_SIZE) / 4) - 1;
    }
}

// Get the actual field count of a Table.
MOLECULE_API_DECORATOR mol_num_t mol_table_actual_field_count(const mol_seg_t *input) {
    return mol_dynvec_length(input);
}

// If a Table has extra fields.
MOLECULE_API_DECORATOR bool mol_table_has_extra_fields(const mol_seg_t *input, mol_num_t field_count) {
    return mol_table_actual_field_count(input) > field_count;
}

// Slice a segment for Array / Struct by offset.
MOLECULE_API_DECORATOR mol_seg_t mol_slice_by_offset(const mol_seg_t *input, mol_num_t offset, mol_num_t size) {
    mol_seg_t seg;
    seg.ptr = input->ptr + offset;
    seg.size = size;
    return seg;
}

// Slice a segment for FixVec by index.
MOLECULE_API_DECORATOR mol_seg_res_t mol_fixvec_slice_by_index(const mol_seg_t *input, mol_num_t item_size, mol_num_t item_index) {
    mol_seg_res_t res;
    mol_num_t item_count = mol_unpack_number(input->ptr);
    if (item_index >= item_count) {
        res.errno = MOL_ERR_INDEX_OUT_OF_BOUNDS;
    } else {
        res.errno = MOL_OK;
        res.seg.ptr = input->ptr + MOL_NUM_T_SIZE + item_size * item_index;
        res.seg.size = item_size;
    }
    return res;
}

// Slice a segment for DynVec by index.
MOLECULE_API_DECORATOR mol_seg_res_t mol_dynvec_slice_by_index(const mol_seg_t *input, mol_num_t item_index) {
    mol_seg_res_t res;
    mol_num_t total_size = mol_unpack_number(input->ptr);
    if (total_size == MOL_NUM_T_SIZE) {
        res.errno = MOL_ERR_INDEX_OUT_OF_BOUNDS;
    } else {
        mol_num_t item_count = (mol_unpack_number(input->ptr + MOL_NUM_T_SIZE) / 4) - 1;
        if (item_index >= item_count) {
            res.errno = MOL_ERR_INDEX_OUT_OF_BOUNDS;
        } else {
            mol_num_t item_start = mol_unpack_number(input->ptr + MOL_NUM_T_SIZE * (item_index + 1));
            if (item_index + 1 == item_count) {
                res.errno = MOL_OK;
                res.seg.ptr = input->ptr + item_start;
                res.seg.size = total_size - item_start;
            } else {
                mol_num_t item_end = mol_unpack_number(input->ptr + MOL_NUM_T_SIZE * (item_index + 2));
                res.errno = MOL_OK;
                res.seg.ptr = input->ptr + item_start;
                res.seg.size = item_end - item_start;
            }
        }
    }
    return res;
}


// Slice a segment for Table by index.
MOLECULE_API_DECORATOR mol_seg_t mol_table_slice_by_index(const mol_seg_t *input, mol_num_t field_index) {
    mol_seg_res_t res = mol_dynvec_slice_by_index(input, field_index);
    return res.seg;
}

// Slice the raw bytes from a `vector <byte>` (FixVec, with a header).
MOLECULE_API_DECORATOR mol_seg_t mol_fixvec_slice_raw_bytes(const mol_seg_t *input) {
    mol_seg_t seg;
    seg.ptr = input->ptr + MOL_NUM_T_SIZE;
    seg.size = mol_unpack_number(input->ptr);
    return seg;
}

/*
 * Undef macros which are internal use only.
 */

#undef is_le

#ifdef __DEFINE_MOLECULE_API_DECORATOR
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR
#endif /* __DEFINE_MOLECULE_API_DECORATOR */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* MOLECULE_READER_H */


================================================
File: deps/ckb-c-stdlib/simulator/README.md
================================================

# Simulator
The target of simulator is to compile, run code (which will be run on CKB-VM) on any OS and PC.
The we can use our favorite IDE and OS. It can only speed up development but don't skip necessary steps like testing on real CKB-VM.

This is a library: see [ckb-miscellaneous-scripts](https://github.com/nervosnetwork/ckb-miscellaneous-scripts/tree/master/simulator) to get more idea about how to use it.

## Changes
There some changes:
- All contents under simulator folder
- All code enabled by CKB_SIMULATOR macro

If you don't want to use the simulator feature, just ignore the folder.

## How to run
See more in run-simulator.sh script in [ckb-miscellaneous-scripts](https://github.com/nervosnetwork/ckb-miscellaneous-scripts/tree/master/simulator). 

## How to get json file
Dump json using [ckb-transaction-dumper](https://github.com/xxuejie/ckb-transaction-dumper). We need a running mainnet
on local machine to dump json. In the following example,  we named the dumped json: "original.json".

Then write a root json file manually (named it data.json):
```json
{
  "is_lock_script": true,
  "script_index": 0,
  "main": "0xa98c212cf055cedbbb665d475c0561b56c68ea735c8aa830c493264effaf18bd",
  "0xa98c212cf055cedbbb665d475c0561b56c68ea735c8aa830c493264effaf18bd": "original.json"
}
```
* is_lock_script, the script to run is "lock" script or "type" script
* script_index, the index of the script in "input"
* main, the tx hash of the dumped json
* "tx_hash": the file name of the dumped json. The key part should be same as the value part of "main".

It might be possible to extend this json to support more TX data.


When run the executables, pass this json file name (data.json, not original.json) as first arguments. 
See more in simulator/run-simulator.sh :

```bash
../build.simulator/sighash_all data.json
../build.simulator/sighash_all data2.json
../build.simulator/sighash_all data3.json
../build.simulator/sudt sudt_data.json
``` 
 
There are more example data under simulator/data folder.


## Used as a library
The simulator is also compiled into library. After build, we can find
library file "libckb_simulator.a". (location simulator/build.simulator/libckb_simulator.a). 
It must be used together with following files and macro:
- simulator/ckb_syscall_simulator.h
- optional simulator/blake2b_imp.c file
- macro: CKB_SIMULATOR, see example in secp256k1_blake2b_sighash_all_dual.c



Explanation of extra blake2b_imp.c file: Some contracts include implementation of blake2b directly 
but some don't. So we don't include implementation of blake2b source in library.
For example, simple_udt doesn't include it so we need to add it to project manually.


================================================
File: deps/ckb-c-stdlib/simulator/blake2b_decl_only.h
================================================
#ifndef CKB_MISCELLANEOUS_SCRIPTS_SIMULATOR_BLAKE2B_DECL_ONLY_H_
#define CKB_MISCELLANEOUS_SCRIPTS_SIMULATOR_BLAKE2B_DECL_ONLY_H_
#include <stddef.h>
#include <stdint.h>

enum blake2b_constant {
  BLAKE2B_BLOCKBYTES = 128,
  BLAKE2B_OUTBYTES = 64,
  BLAKE2B_KEYBYTES = 64,
  BLAKE2B_SALTBYTES = 16,
  BLAKE2B_PERSONALBYTES = 16
};

typedef struct blake2b_state__ {
  uint64_t h[8];
  uint64_t t[2];
  uint64_t f[2];
  uint8_t buf[BLAKE2B_BLOCKBYTES];
  size_t buflen;
  size_t outlen;
  uint8_t last_node;
} blake2b_state;

/* Streaming API */
int ckb_blake2b_init(blake2b_state *S, size_t outlen);
int blake2b_init(blake2b_state *S, size_t outlen);
int blake2b_init_key(blake2b_state *S, size_t outlen, const void *key,
                     size_t keylen);
int blake2b_update(blake2b_state *S, const void *in, size_t inlen);
int blake2b_final(blake2b_state *S, void *out, size_t outlen);
/* Simple API */
int blake2b(void *out, size_t outlen, const void *in, size_t inlen,
            const void *key, size_t keylen);

/* This is simply an alias for blake2b */
int blake2(void *out, size_t outlen, const void *in, size_t inlen,
           const void *key, size_t keylen);

#endif  // CKB_MISCELLANEOUS_SCRIPTS_SIMULATOR_BLAKE2B_DECL_ONLY_H_


================================================
File: deps/ckb-c-stdlib/simulator/blake2b_imp.c
================================================

#include "blake2b.h"


================================================
File: deps/ckb-c-stdlib/simulator/cJSON.c
================================================
/*
  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/

/* cJSON */
/* JSON parser in C. */

/* disable warnings about old C89 functions in MSVC */
#if !defined(_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
#define _CRT_SECURE_NO_DEPRECATE
#endif

#ifdef __GNUC__
#pragma GCC visibility push(default)
#endif
#if defined(_MSC_VER)
#pragma warning(push)
/* disable warning about single line comments in system headers */
#pragma warning(disable : 4001)
#endif

#include <ctype.h>
#include <float.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// The ckb's C lib doesn't include these declarations.
// double strtod (const char* str, char** endptr);
// int sscanf ( const char * s, const char * format, ...);
// int strncmp ( const char * str1, const char * str2, size_t num );
// int sprintf ( char * str, const char * format, ... );

#ifdef ENABLE_LOCALES
#include <locale.h>
#endif

#if defined(_MSC_VER)
#pragma warning(pop)
#endif
#ifdef __GNUC__
#pragma GCC visibility pop
#endif

#include "cJSON.h"

/* define our own boolean type */
#ifdef true
#undef true
#endif
#define true 1

#ifdef false
#undef false
#endif
#define false 0

/* define isnan and isinf for ANSI C, if in C99 or above, isnan and isinf has
 * been defined in math.h */
#ifndef isinf
#define isinf(d) (isnan((d - d)) && !isnan(d))
#endif
#ifndef isnan
#define isnan(d) (d != d)
#endif

#ifndef NAN
#ifdef _WIN32
#define NAN sqrt(-1.0)
#else
#define NAN 0.0 / 0.0
#endif
#endif

typedef struct {
  const unsigned char *json;
  size_t position;
} error;
static error global_error = {NULL, 0};

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void) {
  return (const char *)(global_error.json + global_error.position);
}

CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON *const item) {
  if (!cJSON_IsString(item)) {
    return NULL;
  }

  return item->valuestring;
}

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON *const item) {
  if (!cJSON_IsNumber(item)) {
    return (double)NAN;
  }

  return item->valuedouble;
}

/* This is a safeguard to prevent copy-pasters from using incompatible C and
 * header files */
#if (CJSON_VERSION_MAJOR != 1) || (CJSON_VERSION_MINOR != 7) || \
    (CJSON_VERSION_PATCH != 14)
#error cJSON.h and cJSON.c have different versions. Make sure that both have the same.
#endif

CJSON_PUBLIC(const char *) cJSON_Version(void) {
  static char version[15];
  sprintf(version, "%i.%i.%i", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR,
          CJSON_VERSION_PATCH);

  return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal
 * though */
static int case_insensitive_strcmp(const unsigned char *string1,
                                   const unsigned char *string2) {
  if ((string1 == NULL) || (string2 == NULL)) {
    return 1;
  }

  if (string1 == string2) {
    return 0;
  }

  for (; tolower(*string1) == tolower(*string2); (void)string1++, string2++) {
    if (*string1 == '\0') {
      return 0;
    }
  }

  return tolower(*string1) - tolower(*string2);
}

typedef struct internal_hooks {
  void *(CJSON_CDECL *allocate)(size_t size);
  void(CJSON_CDECL *deallocate)(void *pointer);
  void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);
} internal_hooks;

#if defined(_MSC_VER)
/* work around MSVC error C2322: '...' address of dllimport '...' is not static
 */
static void *CJSON_CDECL internal_malloc(size_t size) { return malloc(size); }
static void CJSON_CDECL internal_free(void *pointer) { free(pointer); }
static void *CJSON_CDECL internal_realloc(void *pointer, size_t size) {
  return realloc(pointer, size);
}
#else
#define internal_malloc malloc
#define internal_free free
#define internal_realloc realloc
#endif

/* strlen of character literals resolved at compile time */
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = {internal_malloc, internal_free,
                                      internal_realloc};

static unsigned char *cJSON_strdup(const unsigned char *string,
                                   const internal_hooks *const hooks) {
  size_t length = 0;
  unsigned char *copy = NULL;

  if (string == NULL) {
    return NULL;
  }

  length = strlen((const char *)string) + sizeof("");
  copy = (unsigned char *)hooks->allocate(length);
  if (copy == NULL) {
    return NULL;
  }
  memcpy(copy, string, length);

  return copy;
}

CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks *hooks) {
  if (hooks == NULL) {
    /* Reset hooks */
    global_hooks.allocate = malloc;
    global_hooks.deallocate = free;
    global_hooks.reallocate = realloc;
    return;
  }

  global_hooks.allocate = malloc;
  if (hooks->malloc_fn != NULL) {
    global_hooks.allocate = hooks->malloc_fn;
  }

  global_hooks.deallocate = free;
  if (hooks->free_fn != NULL) {
    global_hooks.deallocate = hooks->free_fn;
  }

  /* use realloc only if both free and malloc are used */
  global_hooks.reallocate = NULL;
  if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free)) {
    global_hooks.reallocate = realloc;
  }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks *const hooks) {
  cJSON *node = (cJSON *)hooks->allocate(sizeof(cJSON));
  if (node) {
    memset(node, '\0', sizeof(cJSON));
  }

  return node;
}

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item) {
  cJSON *next = NULL;
  while (item != NULL) {
    next = item->next;
    if (!(item->type & cJSON_IsReference) && (item->child != NULL)) {
      cJSON_Delete(item->child);
    }
    if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL)) {
      global_hooks.deallocate(item->valuestring);
    }
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
      global_hooks.deallocate(item->string);
    }
    global_hooks.deallocate(item);
    item = next;
  }
}

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void) {
#ifdef ENABLE_LOCALES
  struct lconv *lconv = localeconv();
  return (unsigned char)lconv->decimal_point[0];
#else
  return '.';
#endif
}

typedef struct {
  const unsigned char *content;
  size_t length;
  size_t offset;
  size_t depth; /* How deeply nested (in arrays/objects) is the input at the
                   current offset. */
  internal_hooks hooks;
} parse_buffer;

/* check if the given size is left to read in a given parse buffer (starting
 * with 1) */
#define can_read(buffer, size) \
  ((buffer != NULL) && (((buffer)->offset + size) <= (buffer)->length))
/* check if the buffer can be accessed at the given index (starting with 0) */
#define can_access_at_index(buffer, index) \
  ((buffer != NULL) && (((buffer)->offset + index) < (buffer)->length))
#define cannot_access_at_index(buffer, index) \
  (!can_access_at_index(buffer, index))
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item.
 */
static cJSON_bool parse_number(cJSON *const item,
                               parse_buffer *const input_buffer) {
  double number = 0;
  unsigned char *after_end = NULL;
  unsigned char number_c_string[64];
  unsigned char decimal_point = get_decimal_point();
  size_t i = 0;

  if ((input_buffer == NULL) || (input_buffer->content == NULL)) {
    return false;
  }

  /* copy the number into a temporary buffer and replace '.' with the decimal
   * point of the current locale (for strtod) This also takes care of '\0' not
   * necessarily being available for marking the end of the input */
  for (i = 0; (i < (sizeof(number_c_string) - 1)) &&
              can_access_at_index(input_buffer, i);
       i++) {
    switch (buffer_at_offset(input_buffer)[i]) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '+':
      case '-':
      case 'e':
      case 'E':
        number_c_string[i] = buffer_at_offset(input_buffer)[i];
        break;

      case '.':
        number_c_string[i] = decimal_point;
        break;

      default:
        goto loop_end;
    }
  }
loop_end:
  number_c_string[i] = '\0';

  number = strtod((const char *)number_c_string, (char **)&after_end);
  if (number_c_string == after_end) {
    return false; /* parse_error */
  }

  item->valuedouble = number;

  /* use saturation in case of overflow */
  if (number >= INT_MAX) {
    item->valueint = INT_MAX;
  } else if (number <= (double)INT_MIN) {
    item->valueint = INT_MIN;
  } else {
    item->valueint = (int)number;
  }

  item->type = cJSON_Number;

  input_buffer->offset += (size_t)(after_end - number_c_string);
  return true;
}

/* don't ask me, but the original cJSON_SetNumberValue returns an integer or
 * double */
CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number) {
  if (number >= INT_MAX) {
    object->valueint = INT_MAX;
  } else if (number <= (double)INT_MIN) {
    object->valueint = INT_MIN;
  } else {
    object->valueint = (int)number;
  }

  return object->valuedouble = number;
}

CJSON_PUBLIC(char *)
cJSON_SetValuestring(cJSON *object, const char *valuestring) {
  char *copy = NULL;
  /* if object's type is not cJSON_String or is cJSON_IsReference, it should not
   * set valuestring */
  if (!(object->type & cJSON_String) || (object->type & cJSON_IsReference)) {
    return NULL;
  }
  if (strlen(valuestring) <= strlen(object->valuestring)) {
    strcpy(object->valuestring, valuestring);
    return object->valuestring;
  }
  copy =
      (char *)cJSON_strdup((const unsigned char *)valuestring, &global_hooks);
  if (copy == NULL) {
    return NULL;
  }
  if (object->valuestring != NULL) {
    cJSON_free(object->valuestring);
  }
  object->valuestring = copy;

  return copy;
}

typedef struct {
  unsigned char *buffer;
  size_t length;
  size_t offset;
  size_t depth; /* current nesting depth (for formatted printing) */
  cJSON_bool noalloc;
  cJSON_bool format; /* is this print a formatted print */
  internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char *ensure(printbuffer *const p, size_t needed) {
  unsigned char *newbuffer = NULL;
  size_t newsize = 0;

  if ((p == NULL) || (p->buffer == NULL)) {
    return NULL;
  }

  if ((p->length > 0) && (p->offset >= p->length)) {
    /* make sure that offset is valid */
    return NULL;
  }

  if (needed > INT_MAX) {
    /* sizes bigger than INT_MAX are currently not supported */
    return NULL;
  }

  needed += p->offset + 1;
  if (needed <= p->length) {
    return p->buffer + p->offset;
  }

  if (p->noalloc) {
    return NULL;
  }

  /* calculate new buffer size */
  if (needed > (INT_MAX / 2)) {
    /* overflow of int, use INT_MAX if possible */
    if (needed <= INT_MAX) {
      newsize = INT_MAX;
    } else {
      return NULL;
    }
  } else {
    newsize = needed * 2;
  }

  if (p->hooks.reallocate != NULL) {
    /* reallocate with realloc if available */
    newbuffer = (unsigned char *)p->hooks.reallocate(p->buffer, newsize);
    if (newbuffer == NULL) {
      p->hooks.deallocate(p->buffer);
      p->length = 0;
      p->buffer = NULL;

      return NULL;
    }
  } else {
    /* otherwise reallocate manually */
    newbuffer = (unsigned char *)p->hooks.allocate(newsize);
    if (!newbuffer) {
      p->hooks.deallocate(p->buffer);
      p->length = 0;
      p->buffer = NULL;

      return NULL;
    }
    if (newbuffer) {
      memcpy(newbuffer, p->buffer, p->offset + 1);
    }
    p->hooks.deallocate(p->buffer);
  }
  p->length = newsize;
  p->buffer = newbuffer;

  return newbuffer + p->offset;
}

/* calculate the new length of the string in a printbuffer and update the offset
 */
static void update_offset(printbuffer *const buffer) {
  const unsigned char *buffer_pointer = NULL;
  if ((buffer == NULL) || (buffer->buffer == NULL)) {
    return;
  }
  buffer_pointer = buffer->buffer + buffer->offset;

  buffer->offset += strlen((const char *)buffer_pointer);
}

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b) {
  double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
  return (fabs(a - b) <= maxVal * DBL_EPSILON);
}

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON *const item,
                               printbuffer *const output_buffer) {
  unsigned char *output_pointer = NULL;
  double d = item->valuedouble;
  int length = 0;
  size_t i = 0;
  unsigned char number_buffer[26] = {
      0}; /* temporary buffer to print the number into */
  unsigned char decimal_point = get_decimal_point();
  double test = 0.0;

  if (output_buffer == NULL) {
    return false;
  }

  /* This checks for NaN and Infinity */
  if (isnan(d) || isinf(d)) {
    length = sprintf((char *)number_buffer, "null");
  } else {
    /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits
     */
    length = sprintf((char *)number_buffer, "%1.15g", d);

    /* Check whether the original double can be recovered */
    if ((sscanf((char *)number_buffer, "%lg", &test) != 1) ||
        !compare_double((double)test, d)) {
      /* If not, print with 17 decimal places of precision */
      length = sprintf((char *)number_buffer, "%1.17g", d);
    }
  }

  /* sprintf failed or buffer overrun occurred */
  if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1))) {
    return false;
  }

  /* reserve appropriate space in the output */
  output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
  if (output_pointer == NULL) {
    return false;
  }

  /* copy the printed number to the output and replace locale
   * dependent decimal point with '.' */
  for (i = 0; i < ((size_t)length); i++) {
    if (number_buffer[i] == decimal_point) {
      output_pointer[i] = '.';
      continue;
    }

    output_pointer[i] = number_buffer[i];
  }
  output_pointer[i] = '\0';

  output_buffer->offset += (size_t)length;

  return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char *const input) {
  unsigned int h = 0;
  size_t i = 0;

  for (i = 0; i < 4; i++) {
    /* parse digit */
    if ((input[i] >= '0') && (input[i] <= '9')) {
      h += (unsigned int)input[i] - '0';
    } else if ((input[i] >= 'A') && (input[i] <= 'F')) {
      h += (unsigned int)10 + input[i] - 'A';
    } else if ((input[i] >= 'a') && (input[i] <= 'f')) {
      h += (unsigned int)10 + input[i] - 'a';
    } else /* invalid */
    {
      return 0;
    }

    if (i < 3) {
      /* shift left to make place for the next nibble */
      h = h << 4;
    }
  }

  return h;
}

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(
    const unsigned char *const input_pointer,
    const unsigned char *const input_end, unsigned char **output_pointer) {
  long unsigned int codepoint = 0;
  unsigned int first_code = 0;
  const unsigned char *first_sequence = input_pointer;
  unsigned char utf8_length = 0;
  unsigned char utf8_position = 0;
  unsigned char sequence_length = 0;
  unsigned char first_byte_mark = 0;

  if ((input_end - first_sequence) < 6) {
    /* input ends unexpectedly */
    goto fail;
  }

  /* get the first utf16 sequence */
  first_code = parse_hex4(first_sequence + 2);

  /* check that the code is valid */
  if (((first_code >= 0xDC00) && (first_code <= 0xDFFF))) {
    goto fail;
  }

  /* UTF16 surrogate pair */
  if ((first_code >= 0xD800) && (first_code <= 0xDBFF)) {
    const unsigned char *second_sequence = first_sequence + 6;
    unsigned int second_code = 0;
    sequence_length = 12; /* \uXXXX\uXXXX */

    if ((input_end - second_sequence) < 6) {
      /* input ends unexpectedly */
      goto fail;
    }

    if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u')) {
      /* missing second half of the surrogate pair */
      goto fail;
    }

    /* get the second utf16 sequence */
    second_code = parse_hex4(second_sequence + 2);
    /* check that the code is valid */
    if ((second_code < 0xDC00) || (second_code > 0xDFFF)) {
      /* invalid second half of the surrogate pair */
      goto fail;
    }

    /* calculate the unicode codepoint from the surrogate pair */
    codepoint =
        0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
  } else {
    sequence_length = 6; /* \uXXXX */
    codepoint = first_code;
  }

  /* encode as UTF-8
   * takes at maximum 4 bytes to encode:
   * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
  if (codepoint < 0x80) {
    /* normal ascii, encoding 0xxxxxxx */
    utf8_length = 1;
  } else if (codepoint < 0x800) {
    /* two bytes, encoding 110xxxxx 10xxxxxx */
    utf8_length = 2;
    first_byte_mark = 0xC0; /* 11000000 */
  } else if (codepoint < 0x10000) {
    /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
    utf8_length = 3;
    first_byte_mark = 0xE0; /* 11100000 */
  } else if (codepoint <= 0x10FFFF) {
    /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    utf8_length = 4;
    first_byte_mark = 0xF0; /* 11110000 */
  } else {
    /* invalid unicode codepoint */
    goto fail;
  }

  /* encode as utf8 */
  for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0;
       utf8_position--) {
    /* 10xxxxxx */
    (*output_pointer)[utf8_position] =
        (unsigned char)((codepoint | 0x80) & 0xBF);
    codepoint >>= 6;
  }
  /* encode first byte */
  if (utf8_length > 1) {
    (*output_pointer)[0] =
        (unsigned char)((codepoint | first_byte_mark) & 0xFF);
  } else {
    (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
  }

  *output_pointer += utf8_length;

  return sequence_length;

fail:
  return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON *const item,
                               parse_buffer *const input_buffer) {
  const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
  const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
  unsigned char *output_pointer = NULL;
  unsigned char *output = NULL;

  /* not a string */
  if (buffer_at_offset(input_buffer)[0] != '\"') {
    goto fail;
  }

  {
    /* calculate approximate size of the output (overestimate) */
    size_t allocation_length = 0;
    size_t skipped_bytes = 0;
    while (
        ((size_t)(input_end - input_buffer->content) < input_buffer->length) &&
        (*input_end != '\"')) {
      /* is escape sequence */
      if (input_end[0] == '\\') {
        if ((size_t)(input_end + 1 - input_buffer->content) >=
            input_buffer->length) {
          /* prevent buffer overflow when last input character is a backslash */
          goto fail;
        }
        skipped_bytes++;
        input_end++;
      }
      input_end++;
    }
    if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) ||
        (*input_end != '\"')) {
      goto fail; /* string ended unexpectedly */
    }

    /* This is at most how much we need for the output */
    allocation_length =
        (size_t)(input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
    output = (unsigned char *)input_buffer->hooks.allocate(allocation_length +
                                                           sizeof(""));
    if (output == NULL) {
      goto fail; /* allocation failure */
    }
  }

  output_pointer = output;
  /* loop through the string literal */
  while (input_pointer < input_end) {
    if (*input_pointer != '\\') {
      *output_pointer++ = *input_pointer++;
    }
    /* escape sequence */
    else {
      unsigned char sequence_length = 2;
      if ((input_end - input_pointer) < 1) {
        goto fail;
      }

      switch (input_pointer[1]) {
        case 'b':
          *output_pointer++ = '\b';
          break;
        case 'f':
          *output_pointer++ = '\f';
          break;
        case 'n':
          *output_pointer++ = '\n';
          break;
        case 'r':
          *output_pointer++ = '\r';
          break;
        case 't':
          *output_pointer++ = '\t';
          break;
        case '\"':
        case '\\':
        case '/':
          *output_pointer++ = input_pointer[1];
          break;

        /* UTF-16 literal */
        case 'u':
          sequence_length =
              utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
          if (sequence_length == 0) {
            /* failed to convert UTF16-literal to UTF-8 */
            goto fail;
          }
          break;

        default:
          goto fail;
      }
      input_pointer += sequence_length;
    }
  }

  /* zero terminate the output */
  *output_pointer = '\0';

  item->type = cJSON_String;
  item->valuestring = (char *)output;

  input_buffer->offset = (size_t)(input_end - input_buffer->content);
  input_buffer->offset++;

  return true;

fail:
  if (output != NULL) {
    input_buffer->hooks.deallocate(output);
  }

  if (input_pointer != NULL) {
    input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
  }

  return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char *const input,
                                   printbuffer *const output_buffer) {
  const unsigned char *input_pointer = NULL;
  unsigned char *output = NULL;
  unsigned char *output_pointer = NULL;
  size_t output_length = 0;
  /* numbers of additional characters needed for escaping */
  size_t escape_characters = 0;

  if (output_buffer == NULL) {
    return false;
  }

  /* empty string */
  if (input == NULL) {
    output = ensure(output_buffer, sizeof("\"\""));
    if (output == NULL) {
      return false;
    }
    strcpy((char *)output, "\"\"");

    return true;
  }

  /* set "flag" to 1 if something needs to be escaped */
  for (input_pointer = input; *input_pointer; input_pointer++) {
    switch (*input_pointer) {
      case '\"':
      case '\\':
      case '\b':
      case '\f':
      case '\n':
      case '\r':
      case '\t':
        /* one character escape sequence */
        escape_characters++;
        break;
      default:
        if (*input_pointer < 32) {
          /* UTF-16 escape sequence uXXXX */
          escape_characters += 5;
        }
        break;
    }
  }
  output_length = (size_t)(input_pointer - input) + escape_characters;

  output = ensure(output_buffer, output_length + sizeof("\"\""));
  if (output == NULL) {
    return false;
  }

  /* no characters have to be escaped */
  if (escape_characters == 0) {
    output[0] = '\"';
    memcpy(output + 1, input, output_length);
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
  }

  output[0] = '\"';
  output_pointer = output + 1;
  /* copy the string */
  for (input_pointer = input; *input_pointer != '\0';
       (void)input_pointer++, output_pointer++) {
    if ((*input_pointer > 31) && (*input_pointer != '\"') &&
        (*input_pointer != '\\')) {
      /* normal character, copy */
      *output_pointer = *input_pointer;
    } else {
      /* character needs to be escaped */
      *output_pointer++ = '\\';
      switch (*input_pointer) {
        case '\\':
          *output_pointer = '\\';
          break;
        case '\"':
          *output_pointer = '\"';
          break;
        case '\b':
          *output_pointer = 'b';
          break;
        case '\f':
          *output_pointer = 'f';
          break;
        case '\n':
          *output_pointer = 'n';
          break;
        case '\r':
          *output_pointer = 'r';
          break;
        case '\t':
          *output_pointer = 't';
          break;
        default:
          /* escape and print as unicode codepoint */
          sprintf((char *)output_pointer, "u%04x", *input_pointer);
          output_pointer += 4;
          break;
      }
    }
  }
  output[output_length + 1] = '\"';
  output[output_length + 2] = '\0';

  return true;
}

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON *const item, printbuffer *const p) {
  return print_string_ptr((unsigned char *)item->valuestring, p);
}

/* Predeclare these prototypes. */
static cJSON_bool parse_value(cJSON *const item,
                              parse_buffer *const input_buffer);
static cJSON_bool print_value(const cJSON *const item,
                              printbuffer *const output_buffer);
static cJSON_bool parse_array(cJSON *const item,
                              parse_buffer *const input_buffer);
static cJSON_bool print_array(const cJSON *const item,
                              printbuffer *const output_buffer);
static cJSON_bool parse_object(cJSON *const item,
                               parse_buffer *const input_buffer);
static cJSON_bool print_object(const cJSON *const item,
                               printbuffer *const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer *const buffer) {
  if ((buffer == NULL) || (buffer->content == NULL)) {
    return NULL;
  }

  if (cannot_access_at_index(buffer, 0)) {
    return buffer;
  }

  while (can_access_at_index(buffer, 0) &&
         (buffer_at_offset(buffer)[0] <= 32)) {
    buffer->offset++;
  }

  if (buffer->offset == buffer->length) {
    buffer->offset--;
  }

  return buffer;
}

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer *const buffer) {
  if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0)) {
    return NULL;
  }

  if (can_access_at_index(buffer, 4) &&
      (strncmp((const char *)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) ==
       0)) {
    buffer->offset += 3;
  }

  return buffer;
}

CJSON_PUBLIC(cJSON *)
cJSON_ParseWithOpts(const char *value, const char **return_parse_end,
                    cJSON_bool require_null_terminated) {
  size_t buffer_length;

  if (NULL == value) {
    return NULL;
  }

  /* Adding null character size due to require_null_terminated. */
  buffer_length = strlen(value) + sizeof("");

  return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end,
                                   require_null_terminated);
}

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *)
cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length,
                          const char **return_parse_end,
                          cJSON_bool require_null_terminated) {
  parse_buffer buffer = {0, 0, 0, 0, {0, 0, 0}};
  cJSON *item = NULL;

  /* reset error position */
  global_error.json = NULL;
  global_error.position = 0;

  if (value == NULL || 0 == buffer_length) {
    goto fail;
  }

  buffer.content = (const unsigned char *)value;
  buffer.length = buffer_length;
  buffer.offset = 0;
  buffer.hooks = global_hooks;

  item = cJSON_New_Item(&global_hooks);
  if (item == NULL) /* memory fail */
  {
    goto fail;
  }

  if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer)))) {
    /* parse failure. ep is set. */
    goto fail;
  }

  /* if we require null-terminated JSON without appended garbage, skip and then
   * check for a null terminator */
  if (require_null_terminated) {
    buffer_skip_whitespace(&buffer);
    if ((buffer.offset >= buffer.length) ||
        buffer_at_offset(&buffer)[0] != '\0') {
      goto fail;
    }
  }
  if (return_parse_end) {
    *return_parse_end = (const char *)buffer_at_offset(&buffer);
  }

  return item;

fail:
  if (item != NULL) {
    cJSON_Delete(item);
  }

  if (value != NULL) {
    error local_error;
    local_error.json = (const unsigned char *)value;
    local_error.position = 0;

    if (buffer.offset < buffer.length) {
      local_error.position = buffer.offset;
    } else if (buffer.length > 0) {
      local_error.position = buffer.length - 1;
    }

    if (return_parse_end != NULL) {
      *return_parse_end = (const char *)local_error.json + local_error.position;
    }

    global_error = local_error;
  }

  return NULL;
}

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value) {
  return cJSON_ParseWithOpts(value, 0, 0);
}

CJSON_PUBLIC(cJSON *)
cJSON_ParseWithLength(const char *value, size_t buffer_length) {
  return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON *const item, cJSON_bool format,
                            const internal_hooks *const hooks) {
  static const size_t default_buffer_size = 256;
  printbuffer buffer[1];
  unsigned char *printed = NULL;

  memset(buffer, 0, sizeof(buffer));

  /* create buffer */
  buffer->buffer = (unsigned char *)hooks->allocate(default_buffer_size);
  buffer->length = default_buffer_size;
  buffer->format = format;
  buffer->hooks = *hooks;
  if (buffer->buffer == NULL) {
    goto fail;
  }

  /* print the value */
  if (!print_value(item, buffer)) {
    goto fail;
  }
  update_offset(buffer);

  /* check if reallocate is available */
  if (hooks->reallocate != NULL) {
    printed =
        (unsigned char *)hooks->reallocate(buffer->buffer, buffer->offset + 1);
    if (printed == NULL) {
      goto fail;
    }
    buffer->buffer = NULL;
  } else /* otherwise copy the JSON over to a new buffer */
  {
    printed = (unsigned char *)hooks->allocate(buffer->offset + 1);
    if (printed == NULL) {
      goto fail;
    }
    memcpy(printed, buffer->buffer,
           cjson_min(buffer->length, buffer->offset + 1));
    printed[buffer->offset] = '\0'; /* just to be sure */

    /* free the buffer */
    hooks->deallocate(buffer->buffer);
  }

  return printed;

fail:
  if (buffer->buffer != NULL) {
    hooks->deallocate(buffer->buffer);
  }

  if (printed != NULL) {
    hooks->deallocate(printed);
  }

  return NULL;
}

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item) {
  return (char *)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item) {
  return (char *)print(item, false, &global_hooks);
}

CJSON_PUBLIC(char *)
cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt) {
  printbuffer p = {0, 0, 0, 0, 0, 0, {0, 0, 0}};

  if (prebuffer < 0) {
    return NULL;
  }

  p.buffer = (unsigned char *)global_hooks.allocate((size_t)prebuffer);
  if (!p.buffer) {
    return NULL;
  }

  p.length = (size_t)prebuffer;
  p.offset = 0;
  p.noalloc = false;
  p.format = fmt;
  p.hooks = global_hooks;

  if (!print_value(item, &p)) {
    global_hooks.deallocate(p.buffer);
    return NULL;
  }

  return (char *)p.buffer;
}

CJSON_PUBLIC(cJSON_bool)
cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length,
                        const cJSON_bool format) {
  printbuffer p = {0, 0, 0, 0, 0, 0, {0, 0, 0}};

  if ((length < 0) || (buffer == NULL)) {
    return false;
  }

  p.buffer = (unsigned char *)buffer;
  p.length = (size_t)length;
  p.offset = 0;
  p.noalloc = true;
  p.format = format;
  p.hooks = global_hooks;

  return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON *const item,
                              parse_buffer *const input_buffer) {
  if ((input_buffer == NULL) || (input_buffer->content == NULL)) {
    return false; /* no input */
  }

  /* parse the different types of values */
  /* null */
  if (can_read(input_buffer, 4) &&
      (strncmp((const char *)buffer_at_offset(input_buffer), "null", 4) == 0)) {
    item->type = cJSON_NULL;
    input_buffer->offset += 4;
    return true;
  }
  /* false */
  if (can_read(input_buffer, 5) &&
      (strncmp((const char *)buffer_at_offset(input_buffer), "false", 5) ==
       0)) {
    item->type = cJSON_False;
    input_buffer->offset += 5;
    return true;
  }
  /* true */
  if (can_read(input_buffer, 4) &&
      (strncmp((const char *)buffer_at_offset(input_buffer), "true", 4) == 0)) {
    item->type = cJSON_True;
    item->valueint = 1;
    input_buffer->offset += 4;
    return true;
  }
  /* string */
  if (can_access_at_index(input_buffer, 0) &&
      (buffer_at_offset(input_buffer)[0] == '\"')) {
    return parse_string(item, input_buffer);
  }
  /* number */
  if (can_access_at_index(input_buffer, 0) &&
      ((buffer_at_offset(input_buffer)[0] == '-') ||
       ((buffer_at_offset(input_buffer)[0] >= '0') &&
        (buffer_at_offset(input_buffer)[0] <= '9')))) {
    return parse_number(item, input_buffer);
  }
  /* array */
  if (can_access_at_index(input_buffer, 0) &&
      (buffer_at_offset(input_buffer)[0] == '[')) {
    return parse_array(item, input_buffer);
  }
  /* object */
  if (can_access_at_index(input_buffer, 0) &&
      (buffer_at_offset(input_buffer)[0] == '{')) {
    return parse_object(item, input_buffer);
  }

  return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON *const item,
                              printbuffer *const output_buffer) {
  unsigned char *output = NULL;

  if ((item == NULL) || (output_buffer == NULL)) {
    return false;
  }

  switch ((item->type) & 0xFF) {
    case cJSON_NULL:
      output = ensure(output_buffer, 5);
      if (output == NULL) {
        return false;
      }
      strcpy((char *)output, "null");
      return true;

    case cJSON_False:
      output = ensure(output_buffer, 6);
      if (output == NULL) {
        return false;
      }
      strcpy((char *)output, "false");
      return true;

    case cJSON_True:
      output = ensure(output_buffer, 5);
      if (output == NULL) {
        return false;
      }
      strcpy((char *)output, "true");
      return true;

    case cJSON_Number:
      return print_number(item, output_buffer);

    case cJSON_Raw: {
      size_t raw_length = 0;
      if (item->valuestring == NULL) {
        return false;
      }

      raw_length = strlen(item->valuestring) + sizeof("");
      output = ensure(output_buffer, raw_length);
      if (output == NULL) {
        return false;
      }
      memcpy(output, item->valuestring, raw_length);
      return true;
    }

    case cJSON_String:
      return print_string(item, output_buffer);

    case cJSON_Array:
      return print_array(item, output_buffer);

    case cJSON_Object:
      return print_object(item, output_buffer);

    default:
      return false;
  }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON *const item,
                              parse_buffer *const input_buffer) {
  cJSON *head = NULL; /* head of the linked list */
  cJSON *current_item = NULL;

  if (input_buffer->depth >= CJSON_NESTING_LIMIT) {
    return false; /* to deeply nested */
  }
  input_buffer->depth++;

  if (buffer_at_offset(input_buffer)[0] != '[') {
    /* not an array */
    goto fail;
  }

  input_buffer->offset++;
  buffer_skip_whitespace(input_buffer);
  if (can_access_at_index(input_buffer, 0) &&
      (buffer_at_offset(input_buffer)[0] == ']')) {
    /* empty array */
    goto success;
  }

  /* check if we skipped to the end of the buffer */
  if (cannot_access_at_index(input_buffer, 0)) {
    input_buffer->offset--;
    goto fail;
  }

  /* step back to character in front of the first element */
  input_buffer->offset--;
  /* loop through the comma separated array elements */
  do {
    /* allocate next item */
    cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    if (new_item == NULL) {
      goto fail; /* allocation failure */
    }

    /* attach next item to list */
    if (head == NULL) {
      /* start the linked list */
      current_item = head = new_item;
    } else {
      /* add to the end and advance */
      current_item->next = new_item;
      new_item->prev = current_item;
      current_item = new_item;
    }

    /* parse next value */
    input_buffer->offset++;
    buffer_skip_whitespace(input_buffer);
    if (!parse_value(current_item, input_buffer)) {
      goto fail; /* failed to parse value */
    }
    buffer_skip_whitespace(input_buffer);
  } while (can_access_at_index(input_buffer, 0) &&
           (buffer_at_offset(input_buffer)[0] == ','));

  if (cannot_access_at_index(input_buffer, 0) ||
      buffer_at_offset(input_buffer)[0] != ']') {
    goto fail; /* expected end of array */
  }

success:
  input_buffer->depth--;

  if (head != NULL) {
    head->prev = current_item;
  }

  item->type = cJSON_Array;
  item->child = head;

  input_buffer->offset++;

  return true;

fail:
  if (head != NULL) {
    cJSON_Delete(head);
  }

  return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON *const item,
                              printbuffer *const output_buffer) {
  unsigned char *output_pointer = NULL;
  size_t length = 0;
  cJSON *current_element = item->child;

  if (output_buffer == NULL) {
    return false;
  }

  /* Compose the output array. */
  /* opening square bracket */
  output_pointer = ensure(output_buffer, 1);
  if (output_pointer == NULL) {
    return false;
  }

  *output_pointer = '[';
  output_buffer->offset++;
  output_buffer->depth++;

  while (current_element != NULL) {
    if (!print_value(current_element, output_buffer)) {
      return false;
    }
    update_offset(output_buffer);
    if (current_element->next) {
      length = (size_t)(output_buffer->format ? 2 : 1);
      output_pointer = ensure(output_buffer, length + 1);
      if (output_pointer == NULL) {
        return false;
      }
      *output_pointer++ = ',';
      if (output_buffer->format) {
        *output_pointer++ = ' ';
      }
      *output_pointer = '\0';
      output_buffer->offset += length;
    }
    current_element = current_element->next;
  }

  output_pointer = ensure(output_buffer, 2);
  if (output_pointer == NULL) {
    return false;
  }
  *output_pointer++ = ']';
  *output_pointer = '\0';
  output_buffer->depth--;

  return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON *const item,
                               parse_buffer *const input_buffer) {
  cJSON *head = NULL; /* linked list head */
  cJSON *current_item = NULL;

  if (input_buffer->depth >= CJSON_NESTING_LIMIT) {
    return false; /* to deeply nested */
  }
  input_buffer->depth++;

  if (cannot_access_at_index(input_buffer, 0) ||
      (buffer_at_offset(input_buffer)[0] != '{')) {
    goto fail; /* not an object */
  }

  input_buffer->offset++;
  buffer_skip_whitespace(input_buffer);
  if (can_access_at_index(input_buffer, 0) &&
      (buffer_at_offset(input_buffer)[0] == '}')) {
    goto success; /* empty object */
  }

  /* check if we skipped to the end of the buffer */
  if (cannot_access_at_index(input_buffer, 0)) {
    input_buffer->offset--;
    goto fail;
  }

  /* step back to character in front of the first element */
  input_buffer->offset--;
  /* loop through the comma separated array elements */
  do {
    /* allocate next item */
    cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    if (new_item == NULL) {
      goto fail; /* allocation failure */
    }

    /* attach next item to list */
    if (head == NULL) {
      /* start the linked list */
      current_item = head = new_item;
    } else {
      /* add to the end and advance */
      current_item->next = new_item;
      new_item->prev = current_item;
      current_item = new_item;
    }

    /* parse the name of the child */
    input_buffer->offset++;
    buffer_skip_whitespace(input_buffer);
    if (!parse_string(current_item, input_buffer)) {
      goto fail; /* failed to parse name */
    }
    buffer_skip_whitespace(input_buffer);

    /* swap valuestring and string, because we parsed the name */
    current_item->string = current_item->valuestring;
    current_item->valuestring = NULL;

    if (cannot_access_at_index(input_buffer, 0) ||
        (buffer_at_offset(input_buffer)[0] != ':')) {
      goto fail; /* invalid object */
    }

    /* parse the value */
    input_buffer->offset++;
    buffer_skip_whitespace(input_buffer);
    if (!parse_value(current_item, input_buffer)) {
      goto fail; /* failed to parse value */
    }
    buffer_skip_whitespace(input_buffer);
  } while (can_access_at_index(input_buffer, 0) &&
           (buffer_at_offset(input_buffer)[0] == ','));

  if (cannot_access_at_index(input_buffer, 0) ||
      (buffer_at_offset(input_buffer)[0] != '}')) {
    goto fail; /* expected end of object */
  }

success:
  input_buffer->depth--;

  if (head != NULL) {
    head->prev = current_item;
  }

  item->type = cJSON_Object;
  item->child = head;

  input_buffer->offset++;
  return true;

fail:
  if (head != NULL) {
    cJSON_Delete(head);
  }

  return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON *const item,
                               printbuffer *const output_buffer) {
  unsigned char *output_pointer = NULL;
  size_t length = 0;
  cJSON *current_item = item->child;

  if (output_buffer == NULL) {
    return false;
  }

  /* Compose the output: */
  length = (size_t)(output_buffer->format ? 2 : 1); /* fmt: {\n */
  output_pointer = ensure(output_buffer, length + 1);
  if (output_pointer == NULL) {
    return false;
  }

  *output_pointer++ = '{';
  output_buffer->depth++;
  if (output_buffer->format) {
    *output_pointer++ = '\n';
  }
  output_buffer->offset += length;

  while (current_item) {
    if (output_buffer->format) {
      size_t i;
      output_pointer = ensure(output_buffer, output_buffer->depth);
      if (output_pointer == NULL) {
        return false;
      }
      for (i = 0; i < output_buffer->depth; i++) {
        *output_pointer++ = '\t';
      }
      output_buffer->offset += output_buffer->depth;
    }

    /* print key */
    if (!print_string_ptr((unsigned char *)current_item->string,
                          output_buffer)) {
      return false;
    }
    update_offset(output_buffer);

    length = (size_t)(output_buffer->format ? 2 : 1);
    output_pointer = ensure(output_buffer, length);
    if (output_pointer == NULL) {
      return false;
    }
    *output_pointer++ = ':';
    if (output_buffer->format) {
      *output_pointer++ = '\t';
    }
    output_buffer->offset += length;

    /* print value */
    if (!print_value(current_item, output_buffer)) {
      return false;
    }
    update_offset(output_buffer);

    /* print comma if not last */
    length = ((size_t)(output_buffer->format ? 1 : 0) +
              (size_t)(current_item->next ? 1 : 0));
    output_pointer = ensure(output_buffer, length + 1);
    if (output_pointer == NULL) {
      return false;
    }
    if (current_item->next) {
      *output_pointer++ = ',';
    }

    if (output_buffer->format) {
      *output_pointer++ = '\n';
    }
    *output_pointer = '\0';
    output_buffer->offset += length;

    current_item = current_item->next;
  }

  output_pointer = ensure(
      output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
  if (output_pointer == NULL) {
    return false;
  }
  if (output_buffer->format) {
    size_t i;
    for (i = 0; i < (output_buffer->depth - 1); i++) {
      *output_pointer++ = '\t';
    }
  }
  *output_pointer++ = '}';
  *output_pointer = '\0';
  output_buffer->depth--;

  return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array) {
  cJSON *child = NULL;
  size_t size = 0;

  if (array == NULL) {
    return 0;
  }

  child = array->child;

  while (child != NULL) {
    size++;
    child = child->next;
  }

  /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

  return (int)size;
}

static cJSON *get_array_item(const cJSON *array, size_t index) {
  cJSON *current_child = NULL;

  if (array == NULL) {
    return NULL;
  }

  current_child = array->child;
  while ((current_child != NULL) && (index > 0)) {
    index--;
    current_child = current_child->next;
  }

  return current_child;
}

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index) {
  if (index < 0) {
    return NULL;
  }

  return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON *const object, const char *const name,
                              const cJSON_bool case_sensitive) {
  cJSON *current_element = NULL;

  if ((object == NULL) || (name == NULL)) {
    return NULL;
  }

  current_element = object->child;
  if (case_sensitive) {
    while ((current_element != NULL) && (current_element->string != NULL) &&
           (strcmp(name, current_element->string) != 0)) {
      current_element = current_element->next;
    }
  } else {
    while ((current_element != NULL) &&
           (case_insensitive_strcmp(
                (const unsigned char *)name,
                (const unsigned char *)(current_element->string)) != 0)) {
      current_element = current_element->next;
    }
  }

  if ((current_element == NULL) || (current_element->string == NULL)) {
    return NULL;
  }

  return current_element;
}

CJSON_PUBLIC(cJSON *)
cJSON_GetObjectItem(const cJSON *const object, const char *const string) {
  return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *)
cJSON_GetObjectItemCaseSensitive(const cJSON *const object,
                                 const char *const string) {
  return get_object_item(object, string, true);
}

CJSON_PUBLIC(cJSON_bool)
cJSON_HasObjectItem(const cJSON *object, const char *string) {
  return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item) {
  prev->next = item;
  item->prev = prev;
}

/* Utility for handling references. */
static cJSON *create_reference(const cJSON *item,
                               const internal_hooks *const hooks) {
  cJSON *reference = NULL;
  if (item == NULL) {
    return NULL;
  }

  reference = cJSON_New_Item(hooks);
  if (reference == NULL) {
    return NULL;
  }

  memcpy(reference, item, sizeof(cJSON));
  reference->string = NULL;
  reference->type |= cJSON_IsReference;
  reference->next = reference->prev = NULL;
  return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item) {
  cJSON *child = NULL;

  if ((item == NULL) || (array == NULL) || (array == item)) {
    return false;
  }

  child = array->child;
  /*
   * To find the last item in array quickly, we use prev in array
   */
  if (child == NULL) {
    /* list is empty, start new one */
    array->child = item;
    item->prev = item;
    item->next = NULL;
  } else {
    /* append to the end */
    if (child->prev) {
      suffix_object(child->prev, item);
      array->child->prev = item;
    }
  }

  return true;
}

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item) {
  return add_item_to_array(array, item);
}

#if defined(__clang__) || \
    (defined(__GNUC__) && \
     ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
#pragma GCC diagnostic push
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void *cast_away_const(const void *string) { return (void *)string; }
#if defined(__clang__) || \
    (defined(__GNUC__) && \
     ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
#pragma GCC diagnostic pop
#endif

static cJSON_bool add_item_to_object(cJSON *const object,
                                     const char *const string,
                                     cJSON *const item,
                                     const internal_hooks *const hooks,
                                     const cJSON_bool constant_key) {
  char *new_key = NULL;
  int new_type = cJSON_Invalid;

  if ((object == NULL) || (string == NULL) || (item == NULL) ||
      (object == item)) {
    return false;
  }

  if (constant_key) {
    new_key = (char *)cast_away_const(string);
    new_type = item->type | cJSON_StringIsConst;
  } else {
    new_key = (char *)cJSON_strdup((const unsigned char *)string, hooks);
    if (new_key == NULL) {
      return false;
    }

    new_type = item->type & ~cJSON_StringIsConst;
  }

  if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
    hooks->deallocate(item->string);
  }

  item->string = new_key;
  item->type = new_type;

  return add_item_to_array(object, item);
}

CJSON_PUBLIC(cJSON_bool)
cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item) {
  return add_item_to_object(object, string, item, &global_hooks, false);
}

/* Add an item to an object with constant string as key */
CJSON_PUBLIC(cJSON_bool)
cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item) {
  return add_item_to_object(object, string, item, &global_hooks, true);
}

CJSON_PUBLIC(cJSON_bool)
cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item) {
  if (array == NULL) {
    return false;
  }

  return add_item_to_array(array, create_reference(item, &global_hooks));
}

CJSON_PUBLIC(cJSON_bool)
cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item) {
  if ((object == NULL) || (string == NULL)) {
    return false;
  }

  return add_item_to_object(object, string,
                            create_reference(item, &global_hooks),
                            &global_hooks, false);
}

CJSON_PUBLIC(cJSON *)
cJSON_AddNullToObject(cJSON *const object, const char *const name) {
  cJSON *null = cJSON_CreateNull();
  if (add_item_to_object(object, name, null, &global_hooks, false)) {
    return null;
  }

  cJSON_Delete(null);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddTrueToObject(cJSON *const object, const char *const name) {
  cJSON *true_item = cJSON_CreateTrue();
  if (add_item_to_object(object, name, true_item, &global_hooks, false)) {
    return true_item;
  }

  cJSON_Delete(true_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddFalseToObject(cJSON *const object, const char *const name) {
  cJSON *false_item = cJSON_CreateFalse();
  if (add_item_to_object(object, name, false_item, &global_hooks, false)) {
    return false_item;
  }

  cJSON_Delete(false_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddBoolToObject(cJSON *const object, const char *const name,
                      const cJSON_bool boolean) {
  cJSON *bool_item = cJSON_CreateBool(boolean);
  if (add_item_to_object(object, name, bool_item, &global_hooks, false)) {
    return bool_item;
  }

  cJSON_Delete(bool_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddNumberToObject(cJSON *const object, const char *const name,
                        const double number) {
  cJSON *number_item = cJSON_CreateNumber(number);
  if (add_item_to_object(object, name, number_item, &global_hooks, false)) {
    return number_item;
  }

  cJSON_Delete(number_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddStringToObject(cJSON *const object, const char *const name,
                        const char *const string) {
  cJSON *string_item = cJSON_CreateString(string);
  if (add_item_to_object(object, name, string_item, &global_hooks, false)) {
    return string_item;
  }

  cJSON_Delete(string_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddRawToObject(cJSON *const object, const char *const name,
                     const char *const raw) {
  cJSON *raw_item = cJSON_CreateRaw(raw);
  if (add_item_to_object(object, name, raw_item, &global_hooks, false)) {
    return raw_item;
  }

  cJSON_Delete(raw_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddObjectToObject(cJSON *const object, const char *const name) {
  cJSON *object_item = cJSON_CreateObject();
  if (add_item_to_object(object, name, object_item, &global_hooks, false)) {
    return object_item;
  }

  cJSON_Delete(object_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddArrayToObject(cJSON *const object, const char *const name) {
  cJSON *array = cJSON_CreateArray();
  if (add_item_to_object(object, name, array, &global_hooks, false)) {
    return array;
  }

  cJSON_Delete(array);
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_DetachItemViaPointer(cJSON *parent, cJSON *const item) {
  if ((parent == NULL) || (item == NULL)) {
    return NULL;
  }

  if (item != parent->child) {
    /* not the first element */
    item->prev->next = item->next;
  }
  if (item->next != NULL) {
    /* not the last element */
    item->next->prev = item->prev;
  }

  if (item == parent->child) {
    /* first element */
    parent->child = item->next;
  } else if (item->next == NULL) {
    /* last element */
    parent->child->prev = item->prev;
  }

  /* make sure the detached item doesn't point anywhere anymore */
  item->prev = NULL;
  item->next = NULL;

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which) {
  if (which < 0) {
    return NULL;
  }

  return cJSON_DetachItemViaPointer(array,
                                    get_array_item(array, (size_t)which));
}

CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which) {
  cJSON_Delete(cJSON_DetachItemFromArray(array, which));
}

CJSON_PUBLIC(cJSON *)
cJSON_DetachItemFromObject(cJSON *object, const char *string) {
  cJSON *to_detach = cJSON_GetObjectItem(object, string);

  return cJSON_DetachItemViaPointer(object, to_detach);
}

CJSON_PUBLIC(cJSON *)
cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string) {
  cJSON *to_detach = cJSON_GetObjectItemCaseSensitive(object, string);

  return cJSON_DetachItemViaPointer(object, to_detach);
}

CJSON_PUBLIC(void)
cJSON_DeleteItemFromObject(cJSON *object, const char *string) {
  cJSON_Delete(cJSON_DetachItemFromObject(object, string));
}

CJSON_PUBLIC(void)
cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string) {
  cJSON_Delete(cJSON_DetachItemFromObjectCaseSensitive(object, string));
}

/* Replace array/object items with new ones. */
CJSON_PUBLIC(cJSON_bool)
cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem) {
  cJSON *after_inserted = NULL;

  if (which < 0) {
    return false;
  }

  after_inserted = get_array_item(array, (size_t)which);
  if (after_inserted == NULL) {
    return add_item_to_array(array, newitem);
  }

  newitem->next = after_inserted;
  newitem->prev = after_inserted->prev;
  after_inserted->prev = newitem;
  if (after_inserted == array->child) {
    array->child = newitem;
  } else {
    newitem->prev->next = newitem;
  }
  return true;
}

CJSON_PUBLIC(cJSON_bool)
cJSON_ReplaceItemViaPointer(cJSON *const parent, cJSON *const item,
                            cJSON *replacement) {
  if ((parent == NULL) || (replacement == NULL) || (item == NULL)) {
    return false;
  }

  if (replacement == item) {
    return true;
  }

  replacement->next = item->next;
  replacement->prev = item->prev;

  if (replacement->next != NULL) {
    replacement->next->prev = replacement;
  }
  if (parent->child == item) {
    if (parent->child->prev == parent->child) {
      replacement->prev = replacement;
    }
    parent->child = replacement;
  } else { /*
            * To find the last item in array quickly, we use prev in array.
            * We can't modify the last item's next pointer where this item was
            * the parent's child
            */
    if (replacement->prev != NULL) {
      replacement->prev->next = replacement;
    }
    if (replacement->next == NULL) {
      parent->child->prev = replacement;
    }
  }

  item->next = NULL;
  item->prev = NULL;
  cJSON_Delete(item);

  return true;
}

CJSON_PUBLIC(cJSON_bool)
cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem) {
  if (which < 0) {
    return false;
  }

  return cJSON_ReplaceItemViaPointer(
      array, get_array_item(array, (size_t)which), newitem);
}

static cJSON_bool replace_item_in_object(cJSON *object, const char *string,
                                         cJSON *replacement,
                                         cJSON_bool case_sensitive) {
  if ((replacement == NULL) || (string == NULL)) {
    return false;
  }

  /* replace the name in the replacement */
  if (!(replacement->type & cJSON_StringIsConst) &&
      (replacement->string != NULL)) {
    cJSON_free(replacement->string);
  }
  replacement->string =
      (char *)cJSON_strdup((const unsigned char *)string, &global_hooks);
  replacement->type &= ~cJSON_StringIsConst;

  return cJSON_ReplaceItemViaPointer(
      object, get_object_item(object, string, case_sensitive), replacement);
}

CJSON_PUBLIC(cJSON_bool)
cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem) {
  return replace_item_in_object(object, string, newitem, false);
}

CJSON_PUBLIC(cJSON_bool)
cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string,
                                       cJSON *newitem) {
  return replace_item_in_object(object, string, newitem, true);
}

/* Create basic types: */
CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = cJSON_NULL;
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = cJSON_True;
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = cJSON_False;
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = boolean ? cJSON_True : cJSON_False;
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = cJSON_Number;
    item->valuedouble = num;

    /* use saturation in case of overflow */
    if (num >= INT_MAX) {
      item->valueint = INT_MAX;
    } else if (num <= (double)INT_MIN) {
      item->valueint = INT_MIN;
    } else {
      item->valueint = (int)num;
    }
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = cJSON_String;
    item->valuestring =
        (char *)cJSON_strdup((const unsigned char *)string, &global_hooks);
    if (!item->valuestring) {
      cJSON_Delete(item);
      return NULL;
    }
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item != NULL) {
    item->type = cJSON_String | cJSON_IsReference;
    item->valuestring = (char *)cast_away_const(string);
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item != NULL) {
    item->type = cJSON_Object | cJSON_IsReference;
    item->child = (cJSON *)cast_away_const(child);
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item != NULL) {
    item->type = cJSON_Array | cJSON_IsReference;
    item->child = (cJSON *)cast_away_const(child);
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = cJSON_Raw;
    item->valuestring =
        (char *)cJSON_strdup((const unsigned char *)raw, &global_hooks);
    if (!item->valuestring) {
      cJSON_Delete(item);
      return NULL;
    }
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = cJSON_Array;
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void) {
  cJSON *item = cJSON_New_Item(&global_hooks);
  if (item) {
    item->type = cJSON_Object;
  }

  return item;
}

/* Create Arrays: */
CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count) {
  size_t i = 0;
  cJSON *n = NULL;
  cJSON *p = NULL;
  cJSON *a = NULL;

  if ((count < 0) || (numbers == NULL)) {
    return NULL;
  }

  a = cJSON_CreateArray();
  for (i = 0; a && (i < (size_t)count); i++) {
    n = cJSON_CreateNumber(numbers[i]);
    if (!n) {
      cJSON_Delete(a);
      return NULL;
    }
    if (!i) {
      a->child = n;
    } else {
      suffix_object(p, n);
    }
    p = n;
  }
  a->child->prev = n;

  return a;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count) {
  size_t i = 0;
  cJSON *n = NULL;
  cJSON *p = NULL;
  cJSON *a = NULL;

  if ((count < 0) || (numbers == NULL)) {
    return NULL;
  }

  a = cJSON_CreateArray();

  for (i = 0; a && (i < (size_t)count); i++) {
    n = cJSON_CreateNumber((double)numbers[i]);
    if (!n) {
      cJSON_Delete(a);
      return NULL;
    }
    if (!i) {
      a->child = n;
    } else {
      suffix_object(p, n);
    }
    p = n;
  }
  a->child->prev = n;

  return a;
}

CJSON_PUBLIC(cJSON *)
cJSON_CreateDoubleArray(const double *numbers, int count) {
  size_t i = 0;
  cJSON *n = NULL;
  cJSON *p = NULL;
  cJSON *a = NULL;

  if ((count < 0) || (numbers == NULL)) {
    return NULL;
  }

  a = cJSON_CreateArray();

  for (i = 0; a && (i < (size_t)count); i++) {
    n = cJSON_CreateNumber(numbers[i]);
    if (!n) {
      cJSON_Delete(a);
      return NULL;
    }
    if (!i) {
      a->child = n;
    } else {
      suffix_object(p, n);
    }
    p = n;
  }
  a->child->prev = n;

  return a;
}

CJSON_PUBLIC(cJSON *)
cJSON_CreateStringArray(const char *const *strings, int count) {
  size_t i = 0;
  cJSON *n = NULL;
  cJSON *p = NULL;
  cJSON *a = NULL;

  if ((count < 0) || (strings == NULL)) {
    return NULL;
  }

  a = cJSON_CreateArray();

  for (i = 0; a && (i < (size_t)count); i++) {
    n = cJSON_CreateString(strings[i]);
    if (!n) {
      cJSON_Delete(a);
      return NULL;
    }
    if (!i) {
      a->child = n;
    } else {
      suffix_object(p, n);
    }
    p = n;
  }
  a->child->prev = n;

  return a;
}

/* Duplication */
CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse) {
  cJSON *newitem = NULL;
  cJSON *child = NULL;
  cJSON *next = NULL;
  cJSON *newchild = NULL;

  /* Bail on bad ptr */
  if (!item) {
    goto fail;
  }
  /* Create new item */
  newitem = cJSON_New_Item(&global_hooks);
  if (!newitem) {
    goto fail;
  }
  /* Copy over all vars */
  newitem->type = item->type & (~cJSON_IsReference);
  newitem->valueint = item->valueint;
  newitem->valuedouble = item->valuedouble;
  if (item->valuestring) {
    newitem->valuestring =
        (char *)cJSON_strdup((unsigned char *)item->valuestring, &global_hooks);
    if (!newitem->valuestring) {
      goto fail;
    }
  }
  if (item->string) {
    newitem->string = (item->type & cJSON_StringIsConst)
                          ? item->string
                          : (char *)cJSON_strdup((unsigned char *)item->string,
                                                 &global_hooks);
    if (!newitem->string) {
      goto fail;
    }
  }
  /* If non-recursive, then we're done! */
  if (!recurse) {
    return newitem;
  }
  /* Walk the ->next chain for the child. */
  child = item->child;
  while (child != NULL) {
    newchild = cJSON_Duplicate(
        child,
        true); /* Duplicate (with recurse) each item in the ->next chain */
    if (!newchild) {
      goto fail;
    }
    if (next != NULL) {
      /* If newitem->child already set, then crosswire ->prev and ->next and
       * move on */
      next->next = newchild;
      newchild->prev = next;
      next = newchild;
    } else {
      /* Set newitem->child and move to it */
      newitem->child = newchild;
      next = newchild;
    }
    child = child->next;
  }
  if (newitem && newitem->child) {
    newitem->child->prev = newchild;
  }

  return newitem;

fail:
  if (newitem != NULL) {
    cJSON_Delete(newitem);
  }

  return NULL;
}

static void skip_oneline_comment(char **input) {
  *input += static_strlen("//");

  for (; (*input)[0] != '\0'; ++(*input)) {
    if ((*input)[0] == '\n') {
      *input += static_strlen("\n");
      return;
    }
  }
}

static void skip_multiline_comment(char **input) {
  *input += static_strlen("/*");

  for (; (*input)[0] != '\0'; ++(*input)) {
    if (((*input)[0] == '*') && ((*input)[1] == '/')) {
      *input += static_strlen("*/");
      return;
    }
  }
}

static void minify_string(char **input, char **output) {
  (*output)[0] = (*input)[0];
  *input += static_strlen("\"");
  *output += static_strlen("\"");

  for (; (*input)[0] != '\0'; (void)++(*input), ++(*output)) {
    (*output)[0] = (*input)[0];

    if ((*input)[0] == '\"') {
      (*output)[0] = '\"';
      *input += static_strlen("\"");
      *output += static_strlen("\"");
      return;
    } else if (((*input)[0] == '\\') && ((*input)[1] == '\"')) {
      (*output)[1] = (*input)[1];
      *input += static_strlen("\"");
      *output += static_strlen("\"");
    }
  }
}

CJSON_PUBLIC(void) cJSON_Minify(char *json) {
  char *into = json;

  if (json == NULL) {
    return;
  }

  while (json[0] != '\0') {
    switch (json[0]) {
      case ' ':
      case '\t':
      case '\r':
      case '\n':
        json++;
        break;

      case '/':
        if (json[1] == '/') {
          skip_oneline_comment(&json);
        } else if (json[1] == '*') {
          skip_multiline_comment(&json);
        } else {
          json++;
        }
        break;

      case '\"':
        minify_string(&json, (char **)&into);
        break;

      default:
        into[0] = json[0];
        json++;
        into++;
    }
  }

  /* and null-terminate. */
  *into = '\0';
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xFF) == cJSON_Invalid;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xff) == cJSON_True;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & (cJSON_True | cJSON_False)) != 0;
}
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xFF) == cJSON_String;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xFF) == cJSON_Object;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON *const item) {
  if (item == NULL) {
    return false;
  }

  return (item->type & 0xFF) == cJSON_Raw;
}

CJSON_PUBLIC(cJSON_bool)
cJSON_Compare(const cJSON *const a, const cJSON *const b,
              const cJSON_bool case_sensitive) {
  if ((a == NULL) || (b == NULL) || ((a->type & 0xFF) != (b->type & 0xFF)) ||
      cJSON_IsInvalid(a)) {
    return false;
  }

  /* check if type is valid */
  switch (a->type & 0xFF) {
    case cJSON_False:
    case cJSON_True:
    case cJSON_NULL:
    case cJSON_Number:
    case cJSON_String:
    case cJSON_Raw:
    case cJSON_Array:
    case cJSON_Object:
      break;

    default:
      return false;
  }

  /* identical objects are equal */
  if (a == b) {
    return true;
  }

  switch (a->type & 0xFF) {
    /* in these cases and equal type is enough */
    case cJSON_False:
    case cJSON_True:
    case cJSON_NULL:
      return true;

    case cJSON_Number:
      if (compare_double(a->valuedouble, b->valuedouble)) {
        return true;
      }
      return false;

    case cJSON_String:
    case cJSON_Raw:
      if ((a->valuestring == NULL) || (b->valuestring == NULL)) {
        return false;
      }
      if (strcmp(a->valuestring, b->valuestring) == 0) {
        return true;
      }

      return false;

    case cJSON_Array: {
      cJSON *a_element = a->child;
      cJSON *b_element = b->child;

      for (; (a_element != NULL) && (b_element != NULL);) {
        if (!cJSON_Compare(a_element, b_element, case_sensitive)) {
          return false;
        }

        a_element = a_element->next;
        b_element = b_element->next;
      }

      /* one of the arrays is longer than the other */
      if (a_element != b_element) {
        return false;
      }

      return true;
    }

    case cJSON_Object: {
      cJSON *a_element = NULL;
      cJSON *b_element = NULL;
      cJSON_ArrayForEach(a_element, a) {
        /* TODO This has O(n^2) runtime, which is horrible! */
        b_element = get_object_item(b, a_element->string, case_sensitive);
        if (b_element == NULL) {
          return false;
        }

        if (!cJSON_Compare(a_element, b_element, case_sensitive)) {
          return false;
        }
      }

      /* doing this twice, once on a and b to prevent true comparison if a
       * subset of b
       * TODO: Do this the proper way, this is just a fix for now */
      cJSON_ArrayForEach(b_element, b) {
        a_element = get_object_item(a, b_element->string, case_sensitive);
        if (a_element == NULL) {
          return false;
        }

        if (!cJSON_Compare(b_element, a_element, case_sensitive)) {
          return false;
        }
      }

      return true;
    }

    default:
      return false;
  }
}

CJSON_PUBLIC(void *) cJSON_malloc(size_t size) {
  return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object) { global_hooks.deallocate(object); }


================================================
File: deps/ckb-c-stdlib/simulator/cJSON.h
================================================
/*
  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/

#ifndef cJSON__h
#define cJSON__h

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(__WINDOWS__) && \
    (defined(WIN32) || defined(WIN64) || defined(_MSC_VER) || defined(_WIN32))
#define __WINDOWS__
#endif

#ifdef __WINDOWS__

/* When compiling for windows, we specify a specific calling convention to avoid
issues where we are being called from a project with a different default calling
convention.  For windows you have 3 define options:

CJSON_HIDE_SYMBOLS - Define this in the case where you don't want to ever
dllexport symbols CJSON_EXPORT_SYMBOLS - Define this on library build when you
want to dllexport symbols (default) CJSON_IMPORT_SYMBOLS - Define this if you
want to dllimport symbol

For *nix builds that support visibility attribute, you can define similar
behavior by

setting default visibility to hidden by adding
-fvisibility=hidden (for gcc)
or
-xldscope=hidden (for sun cc)
to CFLAGS

then using the CJSON_API_VISIBILITY flag to "export" the same symbols the way
CJSON_EXPORT_SYMBOLS does

*/

#define CJSON_CDECL __cdecl
#define CJSON_STDCALL __stdcall

/* export symbols by default, this is necessary for copy pasting the C and
 * header file */
#if !defined(CJSON_HIDE_SYMBOLS) && !defined(CJSON_IMPORT_SYMBOLS) && \
    !defined(CJSON_EXPORT_SYMBOLS)
#define CJSON_EXPORT_SYMBOLS
#endif

#if defined(CJSON_HIDE_SYMBOLS)
#define CJSON_PUBLIC(type) type CJSON_STDCALL
#elif defined(CJSON_EXPORT_SYMBOLS)
#define CJSON_PUBLIC(type) __declspec(dllexport) type CJSON_STDCALL
#elif defined(CJSON_IMPORT_SYMBOLS)
#define CJSON_PUBLIC(type) __declspec(dllimport) type CJSON_STDCALL
#endif
#else /* !__WINDOWS__ */
#define CJSON_CDECL
#define CJSON_STDCALL

#if (defined(__GNUC__) || defined(__SUNPRO_CC) || defined(__SUNPRO_C)) && \
    defined(CJSON_API_VISIBILITY)
#define CJSON_PUBLIC(type) __attribute__((visibility("default"))) type
#else
#define CJSON_PUBLIC(type) type
#endif
#endif

/* project version */
#define CJSON_VERSION_MAJOR 1
#define CJSON_VERSION_MINOR 7
#define CJSON_VERSION_PATCH 14

#include <stddef.h>

/* cJSON Types: */
#define cJSON_Invalid (0)
#define cJSON_False (1 << 0)
#define cJSON_True (1 << 1)
#define cJSON_NULL (1 << 2)
#define cJSON_Number (1 << 3)
#define cJSON_String (1 << 4)
#define cJSON_Array (1 << 5)
#define cJSON_Object (1 << 6)
#define cJSON_Raw (1 << 7) /* raw json */

#define cJSON_IsReference 256
#define cJSON_StringIsConst 512

/* The cJSON structure: */
typedef struct cJSON {
  /* next/prev allow you to walk array/object chains. Alternatively, use
   * GetArraySize/GetArrayItem/GetObjectItem */
  struct cJSON *next;
  struct cJSON *prev;
  /* An array or object item will have a child pointer pointing to a chain of
   * the items in the array/object. */
  struct cJSON *child;

  /* The type of the item, as above. */
  int type;

  /* The item's string, if type==cJSON_String  and type == cJSON_Raw */
  char *valuestring;
  /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */
  int valueint;
  /* The item's number, if type==cJSON_Number */
  double valuedouble;

  /* The item's name string, if this item is the child of, or is in the list of
   * subitems of an object. */
  char *string;
} cJSON;

typedef struct cJSON_Hooks {
  /* malloc/free are CDECL on Windows regardless of the default calling
   * convention of the compiler, so ensure the hooks allow passing those
   * functions directly. */
  void *(CJSON_CDECL *malloc_fn)(size_t sz);
  void(CJSON_CDECL *free_fn)(void *ptr);
} cJSON_Hooks;

typedef int cJSON_bool;

/* Limits how deeply nested arrays/objects can be before cJSON rejects to parse
 * them. This is to prevent stack overflows. */
#ifndef CJSON_NESTING_LIMIT
#define CJSON_NESTING_LIMIT 1000
#endif

/* returns the version of cJSON as a string */
CJSON_PUBLIC(const char *) cJSON_Version(void);

/* Supply malloc, realloc and free functions to cJSON */
CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks *hooks);

/* Memory Management: the caller is always responsible to free the results from
 * all variants of cJSON_Parse (with cJSON_Delete) and cJSON_Print (with stdlib
 * free, cJSON_Hooks.free_fn, or cJSON_free as appropriate). The exception is
 * cJSON_PrintPreallocated, where the caller has full responsibility of the
 * buffer. */
/* Supply a block of JSON, and this returns a cJSON object you can interrogate.
 */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value);
CJSON_PUBLIC(cJSON *)
cJSON_ParseWithLength(const char *value, size_t buffer_length);
/* ParseWithOpts allows you to require (and check) that the JSON is null
 * terminated, and to retrieve the pointer to the final byte parsed. */
/* If you supply a ptr in return_parse_end and parsing fails, then
 * return_parse_end will contain a pointer to the error so will match
 * cJSON_GetErrorPtr(). */
CJSON_PUBLIC(cJSON *)
cJSON_ParseWithOpts(const char *value, const char **return_parse_end,
                    cJSON_bool require_null_terminated);
CJSON_PUBLIC(cJSON *)
cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length,
                          const char **return_parse_end,
                          cJSON_bool require_null_terminated);

/* Render a cJSON entity to text for transfer/storage. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);
/* Render a cJSON entity to text for transfer/storage without any formatting. */
CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);
/* Render a cJSON entity to text using a buffered strategy. prebuffer is a guess
 * at the final size. guessing well reduces reallocation. fmt=0 gives
 * unformatted, =1 gives formatted */
CJSON_PUBLIC(char *)
cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt);
/* Render a cJSON entity to text using a buffer already allocated in memory with
 * given length. Returns 1 on success and 0 on failure. */
/* NOTE: cJSON is not always 100% accurate in estimating how much memory it will
 * use, so to be safe allocate 5 bytes more than you actually need */
CJSON_PUBLIC(cJSON_bool)
cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length,
                        const cJSON_bool format);
/* Delete a cJSON entity and all subentities. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item);

/* Returns the number of items in an array (or object). */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);
/* Retrieve item number "index" from array "array". Returns NULL if
 * unsuccessful. */
CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index);
/* Get item "string" from object. Case insensitive. */
CJSON_PUBLIC(cJSON *)
cJSON_GetObjectItem(const cJSON *const object, const char *const string);
CJSON_PUBLIC(cJSON *)
cJSON_GetObjectItemCaseSensitive(const cJSON *const object,
                                 const char *const string);
CJSON_PUBLIC(cJSON_bool)
cJSON_HasObjectItem(const cJSON *object, const char *string);
/* For analysing failed parses. This returns a pointer to the parse error.
 * You'll probably need to look a few chars back to make sense of it. Defined
 * when cJSON_Parse() returns 0. 0 when cJSON_Parse() succeeds. */
CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void);

/* Check item type and return its value */
CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON *const item);
CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON *const item);

/* These functions check the type of an item */
CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON *const item);
CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON *const item);

/* These calls create a cJSON item of the appropriate type. */
CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void);
CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void);
CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void);
CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);
CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num);
CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string);
/* raw json */
CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw);
CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void);
CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void);

/* Create a string where valuestring references a string so
 * it will not be freed by cJSON_Delete */
CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string);
/* Create an object/array that only references it's elements so
 * they will not be freed by cJSON_Delete */
CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);
CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);

/* These utilities create an Array of count items.
 * The parameter count cannot be greater than the number of elements in the
 * number array, otherwise array access will be out of bounds.*/
CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count);
CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count);
CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count);
CJSON_PUBLIC(cJSON *)
cJSON_CreateStringArray(const char *const *strings, int count);

/* Append item to the specified array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item);
CJSON_PUBLIC(cJSON_bool)
cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item);
/* Use this when string is definitely const (i.e. a literal, or as good as), and
 * will definitely survive the cJSON object. WARNING: When this function was
 * used, make sure to always check that (item->type & cJSON_StringIsConst) is
 * zero before writing to `item->string` */
CJSON_PUBLIC(cJSON_bool)
cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item);
/* Append reference to item to the specified array/object. Use this when you
 * want to add an existing cJSON to a new cJSON, but don't want to corrupt your
 * existing cJSON. */
CJSON_PUBLIC(cJSON_bool)
cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);
CJSON_PUBLIC(cJSON_bool)
cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item);

/* Remove/Detach items from Arrays/Objects. */
CJSON_PUBLIC(cJSON *)
cJSON_DetachItemViaPointer(cJSON *parent, cJSON *const item);
CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which);
CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which);
CJSON_PUBLIC(cJSON *)
cJSON_DetachItemFromObject(cJSON *object, const char *string);
CJSON_PUBLIC(cJSON *)
cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string);
CJSON_PUBLIC(void)
cJSON_DeleteItemFromObject(cJSON *object, const char *string);
CJSON_PUBLIC(void)
cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string);

/* Update array items. */
CJSON_PUBLIC(cJSON_bool)
cJSON_InsertItemInArray(
    cJSON *array, int which,
    cJSON *newitem); /* Shifts pre-existing items to the right. */
CJSON_PUBLIC(cJSON_bool)
cJSON_ReplaceItemViaPointer(cJSON *const parent, cJSON *const item,
                            cJSON *replacement);
CJSON_PUBLIC(cJSON_bool)
cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem);
CJSON_PUBLIC(cJSON_bool)
cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem);
CJSON_PUBLIC(cJSON_bool)
cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string,
                                       cJSON *newitem);

/* Duplicate a cJSON item */
CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse);
/* Duplicate will create a new, identical cJSON item to the one you pass, in new
 * memory that will need to be released. With recurse!=0, it will duplicate any
 * children connected to the item.
 * The item->next and ->prev pointers are always zero on return from Duplicate.
 */
/* Recursively compare two cJSON items for equality. If either a or b is NULL or
 * invalid, they will be considered unequal.
 * case_sensitive determines if object keys are treated case sensitive (1) or
 * case insensitive (0) */
CJSON_PUBLIC(cJSON_bool)
cJSON_Compare(const cJSON *const a, const cJSON *const b,
              const cJSON_bool case_sensitive);

/* Minify a strings, remove blank characters(such as ' ', '\t', '\r', '\n') from
 * strings. The input pointer json cannot point to a read-only address area,
 * such as a string constant,
 * but should point to a readable and writable adress area. */
CJSON_PUBLIC(void) cJSON_Minify(char *json);

/* Helper functions for creating and adding items to an object at the same time.
 * They return the added item or NULL on failure. */
CJSON_PUBLIC(cJSON *)
cJSON_AddNullToObject(cJSON *const object, const char *const name);
CJSON_PUBLIC(cJSON *)
cJSON_AddTrueToObject(cJSON *const object, const char *const name);
CJSON_PUBLIC(cJSON *)
cJSON_AddFalseToObject(cJSON *const object, const char *const name);
CJSON_PUBLIC(cJSON *)
cJSON_AddBoolToObject(cJSON *const object, const char *const name,
                      const cJSON_bool boolean);
CJSON_PUBLIC(cJSON *)
cJSON_AddNumberToObject(cJSON *const object, const char *const name,
                        const double number);
CJSON_PUBLIC(cJSON *)
cJSON_AddStringToObject(cJSON *const object, const char *const name,
                        const char *const string);
CJSON_PUBLIC(cJSON *)
cJSON_AddRawToObject(cJSON *const object, const char *const name,
                     const char *const raw);
CJSON_PUBLIC(cJSON *)
cJSON_AddObjectToObject(cJSON *const object, const char *const name);
CJSON_PUBLIC(cJSON *)
cJSON_AddArrayToObject(cJSON *const object, const char *const name);

/* When assigning an integer value, it needs to be propagated to valuedouble
 * too. */
#define cJSON_SetIntValue(object, number) \
  ((object) ? (object)->valueint = (object)->valuedouble = (number) : (number))
/* helper for the cJSON_SetNumberValue macro */
CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number);
#define cJSON_SetNumberValue(object, number) \
  ((object != NULL) ? cJSON_SetNumberHelper(object, (double)number) : (number))
/* Change the valuestring of a cJSON_String object, only takes effect when type
 * of object is cJSON_String */
CJSON_PUBLIC(char *)
cJSON_SetValuestring(cJSON *object, const char *valuestring);

/* Macro for iterating over an array or object */
#define cJSON_ArrayForEach(element, array)                                 \
  for (element = (array != NULL) ? (array)->child : NULL; element != NULL; \
       element = element->next)

/* malloc/free objects using the malloc/free functions that have been set with
 * cJSON_InitHooks */
CJSON_PUBLIC(void *) cJSON_malloc(size_t size);
CJSON_PUBLIC(void) cJSON_free(void *object);

#ifdef __cplusplus
}
#endif

#endif


================================================
File: deps/ckb-c-stdlib/simulator/ckb_syscall_sim.c
================================================
#include <stddef.h>
#include <stdint.h>

static inline long __internal_syscall(long n, long _a0, long _a1, long _a2,
                                      long _a3, long _a4, long _a5) {
  return 0;
}

#define syscall(n, a, b, c, d, e, f)                                           \
  __internal_syscall(n, (long)(a), (long)(b), (long)(c), (long)(d), (long)(e), \
                     (long)(f))

int ckb_exit(int8_t code) { return 0; }

int ckb_load_tx_hash(void* addr, uint64_t* len, size_t offset) { return 0; }

int ckb_load_script_hash(void* addr, uint64_t* len, size_t offset) { return 0; }

int ckb_load_cell(void* addr, uint64_t* len, size_t offset, size_t index,
                  size_t source) {
  return 0;
}

int ckb_load_input(void* addr, uint64_t* len, size_t offset, size_t index,
                   size_t source) {
  return 0;
}

int ckb_load_header(void* addr, uint64_t* len, size_t offset, size_t index,
                    size_t source) {
  return 0;
}

int ckb_load_witness(void* addr, uint64_t* len, size_t offset, size_t index,
                     size_t source) {
  return 0;
}

int ckb_load_script(void* addr, uint64_t* len, size_t offset) { return 0; }

int ckb_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                           size_t index, size_t source, size_t field) {
  return 0;
}

int ckb_load_header_by_field(void* addr, uint64_t* len, size_t offset,
                             size_t index, size_t source, size_t field) {
  return 0;
}

int ckb_load_input_by_field(void* addr, uint64_t* len, size_t offset,
                            size_t index, size_t source, size_t field) {
  return 0;
}

int ckb_load_cell_code(void* addr, size_t memory_size, size_t content_offset,
                       size_t content_size, size_t index, size_t source) {
  return 0;
}

int ckb_load_cell_data(void* addr, uint64_t* len, size_t offset, size_t index,
                       size_t source) {
  return 0;
}

int ckb_debug(const char* s) { return 0; }

/* load the actual witness for the current type verify group.
   use this instead of ckb_load_witness if type contract needs args to verify
   input/output.
 */
int load_actual_type_witness(uint8_t* buf, uint64_t* len, size_t index,
                             size_t* type_source) {
  return 0;
}

int ckb_look_for_dep_with_hash(const uint8_t* data_hash, size_t* index) {
  return 0;
}

int ckb_calculate_inputs_len() { return 0; }


================================================
File: deps/ckb-c-stdlib/simulator/ckb_syscall_sim.h
================================================
// note, this macro must be same as in ckb_syscall.h
#ifndef CKB_C_STDLIB_CKB_SYSCALLS_H_
#define CKB_C_STDLIB_CKB_SYSCALLS_H_
#include <assert.h>
#include <blockchain.h>
#include <stddef.h>
#include <stdint.h>

static inline long __internal_syscall(long n, long _a0, long _a1, long _a2,
                                      long _a3, long _a4, long _a5) {
  return 0;
}

#define syscall(n, a, b, c, d, e, f)                                           \
  __internal_syscall(n, (long)(a), (long)(b), (long)(c), (long)(d), (long)(e), \
                     (long)(f))

int ckb_exit(int8_t code);

int ckb_load_tx_hash(void* addr, uint64_t* len, size_t offset) {
  assert(offset == 0);
  uint8_t* p = (uint8_t*)addr;
  for (int i = 0; i < 32; i++) {
    p[i] = 0;
  }
  *len = 32;
  return 0;
}

int ckb_load_script_hash(void* addr, uint64_t* len, size_t offset);

int ckb_load_cell(void* addr, uint64_t* len, size_t offset, size_t index,
                  size_t source);

int ckb_load_input(void* addr, uint64_t* len, size_t offset, size_t index,
                   size_t source);

int ckb_load_header(void* addr, uint64_t* len, size_t offset, size_t index,
                    size_t source);

int ckb_load_witness(void* addr, uint64_t* len, size_t offset, size_t index,
                     size_t source) {
  mol_builder_t b;
  mol_seg_res_t res;
  RsaInfo info;
  info.algorithm_id = CKB_VERIFY_RSA;
  info.key_size = 1024;
  uint8_t* ptr = (uint8_t*)&info;

  if (index > 1) {
    return 1;  // CKB_INDEX_OUT_OF_BOUND;
  }

  MolBuilder_Bytes_init(&b);
  for (int i = 0; i < sizeof(info); i++) {
    MolBuilder_Bytes_push(&b, ptr[i]);
  }

  res = MolBuilder_Bytes_build(b);
  assert(res.errno == 0);
  assert(MolReader_Bytes_verify(&res.seg, false) == 0);
  assert(*len > res.seg.size);

  mol_builder_t w;
  MolBuilder_WitnessArgs_init(&w);
  MolBuilder_WitnessArgs_set_lock(&w, res.seg.ptr, res.seg.size);
  mol_seg_res_t res2 = MolBuilder_WitnessArgs_build(w);
  assert(res2.errno == 0);

  memcpy(addr, res2.seg.ptr, res2.seg.size);
  *len = res2.seg.size;
  return 0;
}

mol_seg_t build_args_bytes() {
  // public key, size: 4+128 = 132 bytes
  const int PUBLIC_KEY_SIZE = 132;
  uint8_t public_key[132] = {1, 0, 1, 0, 0x56, 0x78};

  mol_builder_t b;
  mol_seg_res_t res;
  MolBuilder_Bytes_init(&b);
  for (int i = 0; i < PUBLIC_KEY_SIZE; i++) {
    MolBuilder_Bytes_push(&b, public_key[i]);
  }
  res = MolBuilder_Bytes_build(b);
  return res.seg;
}

int ckb_load_script(void* addr, uint64_t* len, size_t offset) {
  mol_builder_t b;
  mol_seg_res_t res;

  assert(offset == 0);

  MolBuilder_Script_init(&b);
  uint8_t code_hash[32] = {0};
  uint8_t hash_type = 0;

  MolBuilder_Script_set_code_hash(&b, code_hash, 32);
  MolBuilder_Script_set_hash_type(&b, hash_type);
  mol_seg_t bytes = build_args_bytes();
  MolBuilder_Script_set_args(&b, bytes.ptr, bytes.size);

  res = MolBuilder_Script_build(b);
  assert(res.errno == 0);

  if (*len < res.seg.size) {
    return -1;
  }
  memcpy(addr, res.seg.ptr, res.seg.size);
  *len = res.seg.size;
  return 0;
}

int ckb_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                           size_t index, size_t source, size_t field);

int ckb_load_header_by_field(void* addr, uint64_t* len, size_t offset,
                             size_t index, size_t source, size_t field);

int ckb_load_input_by_field(void* addr, uint64_t* len, size_t offset,
                            size_t index, size_t source, size_t field);

int ckb_load_cell_code(void* addr, size_t memory_size, size_t content_offset,
                       size_t content_size, size_t index, size_t source);

int ckb_load_cell_data(void* addr, uint64_t* len, size_t offset, size_t index,
                       size_t source);

int ckb_debug(const char* s);

/* load the actual witness for the current type verify group.
   use this instead of ckb_load_witness if type contract needs args to verify
   input/output.
 */
int load_actual_type_witness(uint8_t* buf, uint64_t* len, size_t index,
                             size_t* type_source);

int ckb_look_for_dep_with_hash(const uint8_t* data_hash, size_t* index);

int ckb_calculate_inputs_len() { return 0; }

#endif


================================================
File: deps/ckb-c-stdlib/simulator/ckb_syscall_simulator.c
================================================

// make assert working under release
#undef NDEBUG
//#define CKB_SIMULATOR_VERBOSE

#include "ckb_syscall_simulator.h"

#include <assert.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include "blake2b_decl_only.h"
#include "blockchain-api2.h"
#include "cJSON.h"
#include "molecule_decl_only.h"

#define FAIL(msg)                                               \
  do {                                                          \
    assert(false);                                              \
    printf("Failed at %s:%d: %s\n", __FILE__, __LINE__, (msg)); \
  } while (0)

#define MAX_GRROUP_SIZE 1024
#define HASH_SIZE 32
#define BLAKE160_SIZE 20
#define SCRIPT_SIZE 32768

static cJSON* s_json = NULL;
static cJSON* s_tx_json = NULL;
static uint8_t s_tx_hash[HASH_SIZE] = {0};
// true: lock script
// false: type script
static bool s_is_lock_script = true;
// index of lock script or type script
static uint32_t s_script_index = 0;

static uint32_t s_in_group_index[MAX_GRROUP_SIZE];
static uint32_t s_in_group_size = 0;

#define MAX_HASH_ITEM_SIZE 1024
typedef struct data_hash_item_t {
  uint8_t hash[HASH_SIZE];
  uint64_t len;
  uint8_t* data;
} data_hash_item_t;
data_hash_item_t s_data_hash[MAX_HASH_ITEM_SIZE] = {0};
size_t s_data_hash_len = 0;

// -----------------------
bool is_in_group(uint32_t index);
int init_json_data_source(const char* file_name);
int load_script(void* addr, uint64_t* len, size_t offset, bool is_lock,
                uint32_t script_index, bool from_cell_deps);

cJSON* get_item_at(cJSON* j, size_t index) {
  if (j == NULL) {
    FAIL("It can't be NULL");
    return NULL;
  }
  cJSON* elm = j->child;
  size_t target = 0;
  while (elm != NULL) {
    if (target == index) return elm;
    elm = elm->next;
    target++;
  }
  return NULL;
}

unsigned char decode_hex(char s) {
  if (s >= '0' && s <= '9') {
    return s - '0';
  } else if (s >= 'a' && s <= 'f') {
    return s - 'a' + 10;
  } else if (s >= 'A' && s <= 'F') {
    return s - 'A' + 10;
  } else {
    FAIL("Invalid hex character");
  }
  return 0;
}

unsigned char compose_byte(const char* s) {
  return decode_hex(s[0]) << 4 | decode_hex(s[1]);
}

void load_data(const char* str, unsigned char* addr, uint64_t* len,
               size_t offset) {
  size_t str_len = strlen(str);
  if (str_len < 2 || str[0] != '0' || str[1] != 'x') {
    FAIL("The data part must be started with 0x");
    return;
  }
  ASSERT((str_len % 2) == 0);
  size_t data_len = (str_len - 2) / 2;
  ASSERT(offset <= data_len);

  size_t start = 2 + offset * 2;
  for (size_t i = 0; i < *len; i++) {
    if ((offset + i) >= data_len) {
      *len = i;
      break;
    }
    addr[i] = compose_byte(&str[start + i * 2]);
  }
}

size_t calculate_size(const char* str) {
  assert(strlen(str) % 2 == 0);
  return (strlen(str) - 2) / 2;
}

void load_offset(uint8_t* source_buff, uint64_t source_size, void* addr,
                 uint64_t* len, size_t offset) {
  assert(source_size > offset);
  assert(*len > 0);

  uint64_t size = MIN(source_size - offset, *len);
  memcpy(addr, source_buff + offset, size);
  *len = size;
}

void blake2b_hash(void* ptr, size_t size, uint8_t* hash) {
  blake2b_state ctx;
  ckb_blake2b_init(&ctx, HASH_SIZE);
  blake2b_update(&ctx, ptr, size);
  blake2b_final(&ctx, hash, HASH_SIZE);
}

void print_hex(uint8_t* ptr, size_t size) {
  printf("0x");
  for (size_t i = 0; i < size; i++) {
    printf("%02x", ptr[i]);
  }
  printf("\n");
}

// todo: free
mol_seg_t build_Bytes(uint8_t* ptr, uint32_t len) {
  mol_builder_t b;
  mol_seg_res_t res;
  MolBuilder_Bytes_init(&b);
  for (uint32_t i = 0; i < len; i++) {
    MolBuilder_Bytes_push(&b, ptr[i]);
  }
  res = MolBuilder_Bytes_build(b);
  assert(res.errno == 0);
  return res.seg;
}

mol_seg_t build_script(uint8_t* code_hash, uint8_t hash_type, uint8_t* args,
                       uint32_t args_len) {
  mol_builder_t b;
  mol_seg_res_t res;

  MolBuilder_Script_init(&b);
  MolBuilder_Script_set_code_hash(&b, code_hash, 32);
  MolBuilder_Script_set_hash_type(&b, hash_type);
  mol_seg_t bytes = build_Bytes(args, args_len);
  MolBuilder_Script_set_args(&b, bytes.ptr, bytes.size);

  res = MolBuilder_Script_build(b);
  assert(res.errno == 0);
  return res.seg;
}

int ckb_exit(int8_t code) {
  printf("ckb_exit\n");
  exit(0);
  return CKB_SUCCESS;
}

int ckb_load_tx_hash(void* addr, uint64_t* len, size_t offset) {
  load_offset(s_tx_hash, HASH_SIZE, addr, len, offset);
  return CKB_SUCCESS;
}

int ckb_load_script_hash(void* addr, uint64_t* len, size_t offset) {
  assert(*len >= HASH_SIZE);

  uint8_t script[SCRIPT_SIZE];
  uint64_t script_size = 0;
  int ret = ckb_load_script(script, &script_size, 0);
  assert(ret == CKB_SUCCESS);

  uint8_t hash[HASH_SIZE];
  blake2b_hash(script, script_size, hash);

  load_offset(hash, HASH_SIZE, addr, len, offset);
  return CKB_SUCCESS;
}

// TODO: currently it's not used, will be implemented
int ckb_load_cell(void* addr, uint64_t* len, size_t offset, size_t index,
                  size_t source) {
  return 0;
}

// TODO: currently it's not used, will be implemented
int ckb_load_input(void* addr, uint64_t* len, size_t offset, size_t index,
                   size_t source) {
  return 0;
}

// TODO: currently it's not used, will be implemented
int ckb_load_header(void* addr, uint64_t* len, size_t offset, size_t index,
                    size_t source) {
  return 0;
}

int ckb_load_witness(void* addr, uint64_t* len, size_t offset, size_t index,
                     size_t source) {
  cJSON* tx = cJSON_GetObjectItem(s_tx_json, "tx");
  cJSON* witness = cJSON_GetObjectItem(tx, "witnesses");
  size_t new_index = index;
  if (source == CKB_SOURCE_GROUP_INPUT) {
    if (index >= s_in_group_size) return CKB_INDEX_OUT_OF_BOUND;
    new_index = s_in_group_index[index];
  } else {
    assert(source == CKB_SOURCE_INPUT);
  }

  cJSON* witness_item = get_item_at(witness, new_index);
  if (witness_item == NULL) {
    return CKB_INDEX_OUT_OF_BOUND;
  }
  load_data(witness_item->valuestring, addr, len, offset);
  return CKB_SUCCESS;
}

bool compare_script(cJSON* a, cJSON* b) {
  assert(a);
  assert(b);
  cJSON* a_args = cJSON_GetObjectItem(a, "args");
  cJSON* a_code_hash = cJSON_GetObjectItem(a, "code_hash");
  cJSON* a_hash_type = cJSON_GetObjectItem(a, "hash_type");

  cJSON* b_args = cJSON_GetObjectItem(b, "args");
  cJSON* b_code_hash = cJSON_GetObjectItem(b, "code_hash");
  cJSON* b_hash_type = cJSON_GetObjectItem(b, "hash_type");

  return (strcmp(a_args->valuestring, b_args->valuestring) == 0) &&
         (strcmp(a_code_hash->valuestring, b_code_hash->valuestring) == 0) &&
         (strcmp(a_hash_type->valuestring, b_hash_type->valuestring) == 0);
}

void prepare_group(bool is_lock_script, uint32_t script_index) {
  cJSON* mock_info = cJSON_GetObjectItem(s_tx_json, "mock_info");
  assert(mock_info);
  cJSON* inputs = cJSON_GetObjectItem(mock_info, "inputs");
  assert(inputs);

  cJSON* input = get_item_at(inputs, script_index);
  assert(input);
  cJSON* output = cJSON_GetObjectItem(input, "output");
  assert(output);
  const char* lock_or_type = is_lock_script ? "lock" : "type";
  cJSON* target = cJSON_GetObjectItem(output, lock_or_type);

  uint32_t index = 0;
  cJSON_ArrayForEach(input, inputs) {
    output = cJSON_GetObjectItem(input, "output");
    cJSON* temp = cJSON_GetObjectItem(output, lock_or_type);
    if (compare_script(temp, target)) {
      s_in_group_index[s_in_group_size] = index;
      s_in_group_size++;
    }
    index++;
  }
}

bool is_in_group(uint32_t index) {
  for (uint32_t i = 0; i < s_in_group_size; i++) {
    if (index == s_in_group_index[i]) return true;
  }
  return false;
}

void prepare_hash(void) {
  cJSON* mock_info = cJSON_GetObjectItem(s_tx_json, "mock_info");
  assert(mock_info);
  cJSON* cell_deps = cJSON_GetObjectItem(mock_info, "cell_deps");
  assert(cell_deps);
  size_t index = 0;
  for (cJSON* it = cell_deps->child; it != NULL; it = it->next) {
    assert(index < MAX_HASH_ITEM_SIZE);
    data_hash_item_t* item = &s_data_hash[index];

    cJSON* data = cJSON_GetObjectItem(it, "data");
    item->len = calculate_size(data->valuestring);
    item->data = malloc(item->len);
    load_data(data->valuestring, item->data, &item->len, 0);
    blake2b_hash(item->data, item->len, item->hash);
#ifdef CKB_SIMULATOR_VERBOSE
    printf("Cell data hash at index %zu:", index);
    print_hex(item->hash, HASH_SIZE);
#endif
    index++;
  }
  s_data_hash_len = index;

  uint8_t script[SCRIPT_SIZE];
  uint64_t script_size = SCRIPT_SIZE;
  uint32_t idx = 0;
  uint8_t hash[HASH_SIZE] = {0};
  while (true) {
    int ret = load_script(script, &script_size, 0, false, idx, true);
    if (ret == CKB_INDEX_OUT_OF_BOUND) break;
    if (ret == CKB_ITEM_MISSING) {
      // it's null
    } else {
      assert(ret == CKB_SUCCESS);
      blake2b_hash(script, script_size, hash);
#ifdef CKB_SIMULATOR_VERBOSE
      printf("script hash at index %d: ", idx);
      print_hex(hash, HASH_SIZE);
#endif
    }
    idx++;
  }
}

int load_script(void* addr, uint64_t* len, size_t offset, bool is_lock,
                uint32_t script_index, bool from_cell_deps) {
  cJSON* mock_info = cJSON_GetObjectItem(s_tx_json, "mock_info");
  const char* field = from_cell_deps ? "cell_deps" : "inputs";
  cJSON* inputs = cJSON_GetObjectItem(mock_info, field);
  cJSON* input_at_index = get_item_at(inputs, script_index);
  if (input_at_index == NULL) return CKB_INDEX_OUT_OF_BOUND;

  cJSON* output = cJSON_GetObjectItem(input_at_index, "output");
  const char* lock_or_type = is_lock ? "lock" : "type";
  cJSON* lock_or_type_json = cJSON_GetObjectItem(output, lock_or_type);
  assert(lock_or_type_json != NULL);
  if (cJSON_IsNull(lock_or_type_json)) {
    return CKB_ITEM_MISSING;
  }
  cJSON* args_json = cJSON_GetObjectItem(lock_or_type_json, "args");
  cJSON* code_hash_json = cJSON_GetObjectItem(lock_or_type_json, "code_hash");
  cJSON* hash_type_json = cJSON_GetObjectItem(lock_or_type_json, "hash_type");
  // to be confirmed
  int hash_type = 0;
  if (strcmp(hash_type_json->valuestring, "type") == 0) {
    hash_type = 1;
  }

  uint8_t code_hash[HASH_SIZE] = {0};
  uint64_t code_hash_len = HASH_SIZE;
  load_data(code_hash_json->valuestring, code_hash, &code_hash_len, 0);

  uint64_t args_len = calculate_size(args_json->valuestring);
  uint8_t args[args_len];
  load_data(args_json->valuestring, args, &args_len, 0);
  mol_seg_t script = build_script(code_hash, hash_type, args, args_len);

  load_offset(script.ptr, script.size, addr, len, offset);
  return CKB_SUCCESS;
}

int ckb_load_script(void* addr, uint64_t* len, size_t offset) {
  return load_script(addr, len, offset, s_is_lock_script, s_script_index,
                     false);
}

int ckb_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                           size_t index, size_t source, size_t field) {
  if (source == CKB_SOURCE_CELL_DEP) {
    if (field == CKB_CELL_FIELD_DATA_HASH) {
      if (index >= s_data_hash_len) {
        return CKB_INDEX_OUT_OF_BOUND;
      }
      load_offset(s_data_hash[index].hash, HASH_SIZE, addr, len, offset);
    } else {
      assert(false);
    }
  } else if (source == CKB_SOURCE_INPUT) {
    if (field == CKB_CELL_FIELD_LOCK_HASH) {
      // make sure it's from 0, otherwise, it consumes a lot of cpu. (computer
      // hash size more than once)
      assert(offset == 0);
      assert(*len >= HASH_SIZE);

      uint8_t lock_script[SCRIPT_SIZE];
      uint64_t lock_script_len = SCRIPT_SIZE;
      int ret = load_script(lock_script, &lock_script_len, 0, s_is_lock_script,
                            index, false);
      if (ret != CKB_SUCCESS) return ret;

      uint8_t hash[HASH_SIZE];
      blake2b_hash(lock_script, lock_script_len, hash);

      load_offset(hash, HASH_SIZE, addr, len, 0);
    } else {
      // TODO: currently it's not used, will be implemented
      assert(false);
    }
  } else {
    assert(false);
  }

  return 0;
}

// TODO: currently it's not used, will be implemented
int ckb_load_header_by_field(void* addr, uint64_t* len, size_t offset,
                             size_t index, size_t source, size_t field) {
  return 0;
}

int ckb_load_input_by_field(void* addr, uint64_t* len, size_t offset,
                            size_t index, size_t source, size_t field) {
  if (field == CKB_INPUT_FIELD_SINCE) {
    cJSON* tx = cJSON_GetObjectItem(s_tx_json, "tx");
    cJSON* inputs = cJSON_GetObjectItem(tx, "inputs");
    assert(inputs != NULL);
    size_t new_index = index;
    if (source == CKB_SOURCE_GROUP_INPUT) {
      if (index >= s_in_group_size) return CKB_INDEX_OUT_OF_BOUND;
      new_index = s_in_group_index[index];
    } else {
      assert(source == CKB_SOURCE_INPUT);
    }

    cJSON* input = get_item_at(inputs, new_index);
    if (input == NULL) {
      return CKB_INDEX_OUT_OF_BOUND;
    } else {
      cJSON* since = cJSON_GetObjectItem(input, "since");
      load_data(since->valuestring, addr, len, offset);
    }
  } else {
    assert(false);
  }
  return CKB_SUCCESS;
}

// TODO: currently it's not used, will be implemented
int ckb_load_cell_code(void* addr, size_t memory_size, size_t content_offset,
                       size_t content_size, size_t index, size_t source) {
  return 0;
}

int ckb_load_cell_data(void* addr, uint64_t* len, size_t offset, size_t index,
                       size_t source) {
  if (source == CKB_SOURCE_CELL_DEP) {
    if (index >= s_data_hash_len) {
      return CKB_INDEX_OUT_OF_BOUND;
    }
    load_offset(s_data_hash[index].data, s_data_hash[index].len, addr, len,
                offset);
  } else if (source == CKB_SOURCE_GROUP_INPUT) {
    cJSON* mock_info = cJSON_GetObjectItem(s_tx_json, "mock_info");
    cJSON* inputs = cJSON_GetObjectItem(mock_info, "inputs");
    cJSON* input_at_index = get_item_at(inputs, index);
    if (input_at_index == NULL) return CKB_INDEX_OUT_OF_BOUND;
    cJSON* data = cJSON_GetObjectItem(input_at_index, "data");
    load_data(data->valuestring, addr, len, offset);
  } else if (source == CKB_SOURCE_GROUP_OUTPUT) {
    cJSON* tx = cJSON_GetObjectItem(s_tx_json, "tx");
    cJSON* outputs_data = cJSON_GetObjectItem(tx, "outputs_data");
    cJSON* output_at_index = get_item_at(outputs_data, index);
    if (output_at_index == NULL) return CKB_INDEX_OUT_OF_BOUND;
    load_data(output_at_index->valuestring, addr, len, offset);
  } else {
    assert(false);
  }
  return 0;
}

int ckb_debug(const char* s) { return 0; }

// TODO: currently it's not used, will be implemented
int load_actual_type_witness(uint8_t* buf, uint64_t* len, size_t index,
                             size_t* type_source) {
  return 0;
}

int ckb_look_for_dep_with_hash(const uint8_t* data_hash, size_t* index) {
  return ckb_look_for_dep_with_hash2(data_hash, 0, index);
}

int ckb_checked_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                                   size_t index, size_t source, size_t field) {
  uint64_t old_len = *len;
  int ret = ckb_load_cell_by_field(addr, len, offset, index, source, field);
  if (ret == CKB_SUCCESS && (*len) > old_len) {
    ret = CKB_LENGTH_NOT_ENOUGH;
  }
  return ret;
}

int ckb_calculate_inputs_len() {
  uint64_t len = 0;
  /* lower bound, at least tx has one input */
  int lo = 0;
  /* higher bound */
  int hi = 4;
  int ret;
  /* try to load input until failing to increase lo and hi */
  while (1) {
    ret = ckb_load_input_by_field(NULL, &len, 0, hi, CKB_SOURCE_INPUT,
                                  CKB_INPUT_FIELD_SINCE);
    if (ret == CKB_SUCCESS) {
      lo = hi;
      hi *= 2;
    } else {
      break;
    }
  }

  /* now we get our lower bound and higher bound,
   count number of inputs by binary search */
  int i;
  while (lo + 1 != hi) {
    i = (lo + hi) / 2;
    ret = ckb_load_input_by_field(NULL, &len, 0, i, CKB_SOURCE_INPUT,
                                  CKB_INPUT_FIELD_SINCE);
    if (ret == CKB_SUCCESS) {
      lo = i;
    } else {
      hi = i;
    }
  }
  /* now lo is last input index and hi is length of inputs */
  return hi;
}

int ckb_look_for_dep_with_hash2(const uint8_t* code_hash, uint8_t hash_type,
                                size_t* index) {
  size_t current = 0;
  size_t field =
      (hash_type == 1) ? CKB_CELL_FIELD_TYPE_HASH : CKB_CELL_FIELD_DATA_HASH;
  while (current < SIZE_MAX) {
    uint64_t len = 32;
    uint8_t hash[32];

    int ret = ckb_load_cell_by_field(hash, &len, 0, current,
                                     CKB_SOURCE_CELL_DEP, field);
    switch (ret) {
      case CKB_ITEM_MISSING:
        break;
      case CKB_SUCCESS:
        if (memcmp(code_hash, hash, 32) == 0) {
          /* Found a match */
          *index = current;
          return CKB_SUCCESS;
        }
        break;
      default:
        return CKB_INDEX_OUT_OF_BOUND;
    }
    current++;
  }
  return CKB_INDEX_OUT_OF_BOUND;
}

#define READALL_CHUNK 262144
#define READALL_OK 0       /* Success */
#define READALL_INVALID -1 /* Invalid parameters */
#define READALL_ERROR -2   /* Stream error */
#define READALL_TOOMUCH -3 /* Too much input */
#define READALL_NOMEM -4   /* Out of memory */

int readall(FILE* in, char** dataptr, size_t* sizeptr) {
  char *data = NULL, *temp = NULL;
  size_t size = 0;
  size_t used = 0;
  size_t n = 0;

  /* None of the parameters can be NULL. */
  if (in == NULL || dataptr == NULL || sizeptr == NULL) return READALL_INVALID;

  /* A read error already occurred? */
  if (ferror(in)) return READALL_ERROR;

  while (1) {
    if (used + READALL_CHUNK + 1 > size) {
      size = used + READALL_CHUNK + 1;

      if (size <= used) {
        free(data);
        return READALL_TOOMUCH;
      }

      temp = realloc(data, size);
      if (temp == NULL) {
        free(data);
        return READALL_NOMEM;
      }
      data = temp;
    }

    n = fread(data + used, 1, READALL_CHUNK, in);
    if (n == 0) break;

    used += n;
  }

  if (ferror(in)) {
    free(data);
    return READALL_ERROR;
  }

  temp = realloc(data, used + 1);
  if (temp == NULL) {
    free(data);
    return READALL_NOMEM;
  }
  data = temp;
  data[used] = '\0';

  *dataptr = data;
  *sizeptr = used;

  return READALL_OK;
}

int init_json_data_source(const char* file_name) {
  FILE* input = NULL;
  if (file_name == NULL) {
    input = stdin;
  } else {
    input = fopen(file_name, "rb");
  }
  char* json_ptr = NULL;
  size_t json_size = 0;
  int ret = readall(input, &json_ptr, &json_size);
  if (ret != 0) {
    return ret;
  }
  s_json = cJSON_ParseWithLength(json_ptr, json_size);
  if (s_json == NULL) {
    char msg[128] = {0};
    sprintf(msg, "Failed to parse json file: %s", file_name);
    FAIL(msg);
    return -1;
  }
  fclose(input);
  free(json_ptr);

  // ---------

  cJSON* tx_hash = cJSON_GetObjectItem(s_json, "main");
  cJSON* fn = cJSON_GetObjectItem(s_json, tx_hash->valuestring);
  input = fopen(fn->valuestring, "rb");
  ret = readall(input, &json_ptr, &json_size);
  assert(ret == READALL_OK);
  s_tx_json = cJSON_ParseWithLength(json_ptr, json_size);
  if (s_tx_json == NULL) {
    char msg[128] = {0};
    sprintf(msg, "Failed to parse json file: %s", fn->valuestring);
    FAIL(msg);
    return -1;
  }
  uint64_t tx_hash_len = HASH_SIZE;
  load_data(tx_hash->valuestring, s_tx_hash, &tx_hash_len, 0);
  assert(tx_hash_len == HASH_SIZE);

  cJSON* is_lock_script = cJSON_GetObjectItem(s_json, "is_lock_script");
  assert(is_lock_script != NULL);
  assert(cJSON_IsBool(is_lock_script));
  s_is_lock_script = cJSON_IsTrue(is_lock_script);

  cJSON* script_index = cJSON_GetObjectItem(s_json, "script_index");
  assert(script_index != NULL);
  s_script_index = script_index->valueint;

  prepare_group(s_is_lock_script, s_script_index);
  fclose(input);
  free(json_ptr);

  return 0;
}

void test_script(void) {
  unsigned char script[SCRIPT_SIZE];
  uint64_t len = SCRIPT_SIZE;
  int ret = ckb_load_script(script, &len, 0);
  assert(ret == CKB_SUCCESS);
  assert(len < SCRIPT_SIZE);

  mol_seg_t script_seg;
  script_seg.ptr = (uint8_t*)script;
  script_seg.size = len;

  assert(MolReader_Script_verify(&script_seg, false) == MOL_OK);

  mol_seg_t args_seg = MolReader_Script_get_args(&script_seg);
  mol_seg_t args_bytes_seg = MolReader_Bytes_raw_bytes(&args_seg);
  assert(args_bytes_seg.size == BLAKE160_SIZE);

  assert(args_bytes_seg.ptr[0] == 0x27);
  assert(args_bytes_seg.ptr[1] == 0xf5);
  assert(args_bytes_seg.ptr[18] == 0x9e);
  assert(args_bytes_seg.ptr[19] == 0xc9);
}

// the test data is from:
// npx ckb-transaction-dumper -x
// 0xa98c212cf055cedbbb665d475c0561b56c68ea735c8aa830c493264effaf18bd

int unit_test(int argc, const char* argv[]) {
  unsigned char witness[1024] = {0};
  uint64_t witness_len = 1024;
  ckb_load_witness(witness, &witness_len, 0, 0, 0);
  assert(witness_len == 85);
  assert(witness[0] == 0x55);
  assert(witness[1] == 0x00);
  assert(witness[83] == 0xe7);
  assert(witness[84] == 0x01);
  test_script();
  return 0;
}

// this is the entry function of contract.
extern int simulator_main(void);

int main(int argc, const char* argv[]) {
  const char* file_name = NULL;
  if (argc == 2 && argv[1] != NULL) file_name = argv[1];
  if (file_name == NULL) {
    printf("Running with stdin ...\n");
  } else {
    printf("Running with file: %s\n", file_name);
  }
  int ret = init_json_data_source(file_name);
  assert(ret == 0);
  prepare_hash();

  if (false) {
    ret = unit_test(argc, argv);
  } else {
    ret = simulator_main();
  }

  if (ret == 0) {
    printf("succeeded!\n");
  } else {
    printf("failed, error code: %d\n", ret);
  }
  return ret;
}


================================================
File: deps/ckb-c-stdlib/simulator/ckb_syscall_simulator.h
================================================
// note, this macro must be same as in ckb_syscall.h
#ifndef CKB_C_STDLIB_CKB_SYSCALLS_H_
#define CKB_C_STDLIB_CKB_SYSCALLS_H_
#include <stddef.h>
#include <stdint.h>

#include "ckb_consts.h"

int ckb_exit(int8_t code);

int ckb_load_tx_hash(void* addr, uint64_t* len, size_t offset);

int ckb_load_script_hash(void* addr, uint64_t* len, size_t offset);

int ckb_load_cell(void* addr, uint64_t* len, size_t offset, size_t index,
                  size_t source);

int ckb_load_input(void* addr, uint64_t* len, size_t offset, size_t index,
                   size_t source);

int ckb_load_header(void* addr, uint64_t* len, size_t offset, size_t index,
                    size_t source);

int ckb_load_witness(void* addr, uint64_t* len, size_t offset, size_t index,
                     size_t source);

int ckb_load_script(void* addr, uint64_t* len, size_t offset);

int ckb_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                           size_t index, size_t source, size_t field);

int ckb_load_header_by_field(void* addr, uint64_t* len, size_t offset,
                             size_t index, size_t source, size_t field);

int ckb_load_input_by_field(void* addr, uint64_t* len, size_t offset,
                            size_t index, size_t source, size_t field);

int ckb_load_cell_code(void* addr, size_t memory_size, size_t content_offset,
                       size_t content_size, size_t index, size_t source);

int ckb_load_cell_data(void* addr, uint64_t* len, size_t offset, size_t index,
                       size_t source);

int ckb_debug(const char* s);

int load_actual_type_witness(uint8_t* buf, uint64_t* len, size_t index,
                             size_t* type_source);

int ckb_look_for_dep_with_hash(const uint8_t* data_hash, size_t* index);

int ckb_calculate_inputs_len();

int ckb_look_for_dep_with_hash2(const uint8_t* code_hash, uint8_t hash_type,
                                size_t* index);

int ckb_checked_load_cell_by_field(void* addr, uint64_t* len, size_t offset,
                                   size_t index, size_t source, size_t field);

#endif


================================================
File: deps/ckb-c-stdlib/simulator/molecule_decl_only.h
================================================
#ifndef CKB_MISCELLANEOUS_SCRIPTS_SIMULATOR_MOLECULE_DECL_ONLY_H_
#define CKB_MISCELLANEOUS_SCRIPTS_SIMULATOR_MOLECULE_DECL_ONLY_H_

#include <stdbool.h>
#include <stdint.h>

#define is_le() (*(unsigned char *)&(uint16_t){1})
typedef uint32_t mol_num_t;  // Item Id
typedef uint8_t mol_errno;   // Error Number
#define MolNum UINT32_C
#define MOL_NUM_T_SIZE 4

// Bytes segment.
typedef struct {
  uint8_t *ptr;    // Pointer
  mol_num_t size;  // Full size
} mol_seg_t;

// Unpacked Union
typedef struct {
  mol_num_t item_id;  // Item Id
  mol_seg_t seg;      // Segment
} mol_union_t;

// Result for returning segment.
typedef struct {
  mol_errno errno;  // Error Number
  mol_seg_t seg;    // Segment
} mol_seg_res_t;

/* Error Numbers */

#define MOL_OK 0x00
#define MOL_ERR 0xff

#define MOL_ERR_TOTAL_SIZE 0x01
#define MOL_ERR_HEADER 0x02
#define MOL_ERR_OFFSET 0x03
#define MOL_ERR_UNKNOWN_ITEM 0x04
#define MOL_ERR_INDEX_OUT_OF_BOUNDS 0x05
#define MOL_ERR_FIELD_COUNT 0x06
#define MOL_ERR_DATA 0x07

/* Utilities. */

mol_num_t mol_unpack_number(const uint8_t *src);

/*
 * Core functions.
 */

/* Verify Functions. */

// Verify Array / Struct.
mol_errno mol_verify_fixed_size(const mol_seg_t *input, mol_num_t total_size);

// Verify FixVec.
mol_errno mol_fixvec_verify(const mol_seg_t *input, mol_num_t item_size);
bool mol_option_is_none(const mol_seg_t *input);
mol_union_t mol_union_unpack(const mol_seg_t *input);
mol_num_t mol_fixvec_length(const mol_seg_t *input);
mol_num_t mol_dynvec_length(const mol_seg_t *input);
mol_num_t mol_table_actual_field_count(const mol_seg_t *input);
bool mol_table_has_extra_fields(const mol_seg_t *input, mol_num_t field_count);
mol_seg_t mol_slice_by_offset(const mol_seg_t *input, mol_num_t offset,
                              mol_num_t size);
mol_seg_res_t mol_fixvec_slice_by_index(const mol_seg_t *input,
                                        mol_num_t item_size,
                                        mol_num_t item_index);
mol_seg_res_t mol_dynvec_slice_by_index(const mol_seg_t *input,
                                        mol_num_t item_index);
mol_seg_t mol_table_slice_by_index(const mol_seg_t *input,
                                   mol_num_t field_index);

mol_seg_t mol_fixvec_slice_raw_bytes(const mol_seg_t *input);

// molecule-builder.h
typedef struct {
  uint8_t *data_ptr;    // Data Pointer
  mol_num_t data_used;  // Data Used
  mol_num_t data_cap;   // Data Capacity

  mol_num_t *number_ptr;  // A Pointer of Numbers
  mol_num_t number_used;  // Numbers used
  mol_num_t number_cap;   // Numbers Capacity
} mol_builder_t;

/* Utilities. */

void mol_pack_number(uint8_t *dst, mol_num_t *num);
/*
 * Core functions.
 */

void mol_builder_discard(mol_builder_t builder);

void mol_builder_initialize_fixed_size(mol_builder_t *builder,
                                       mol_num_t fixed_size);

void mol_union_builder_initialize(mol_builder_t *builder,
                                  mol_num_t data_capacity, mol_num_t item_id,
                                  const uint8_t *default_ptr,
                                  mol_num_t default_len);

void mol_builder_initialize_with_capacity(mol_builder_t *builder,
                                          mol_num_t data_capacity,
                                          mol_num_t number_capacity);

void mol_fixvec_builder_initialize(mol_builder_t *builder,
                                   mol_num_t data_capacity);

void mol_table_builder_initialize(mol_builder_t *builder,
                                  mol_num_t data_capacity,
                                  mol_num_t field_count);

void mol_option_builder_set(mol_builder_t *builder, const uint8_t *data_ptr,
                            mol_num_t data_len);

void mol_union_builder_set_byte(mol_builder_t *builder, mol_num_t item_id,
                                uint8_t data);

void mol_union_builder_set(mol_builder_t *builder, mol_num_t item_id,
                           const uint8_t *data_ptr, mol_num_t data_len);

void mol_builder_set_byte_by_offset(mol_builder_t *builder, mol_num_t offset,
                                    uint8_t data);

void mol_builder_set_by_offset(mol_builder_t *builder, mol_num_t offset,
                               const uint8_t *data_ptr, mol_num_t length);

void mol_fixvec_builder_push_byte(mol_builder_t *builder, uint8_t data);

void mol_fixvec_builder_push(mol_builder_t *builder, const uint8_t *data_ptr,
                             mol_num_t length);

void mol_dynvec_builder_push(mol_builder_t *builder, const uint8_t *data_ptr,
                             mol_num_t data_len);
void mol_table_builder_add_byte(mol_builder_t *builder, mol_num_t field_index,
                                uint8_t data);

void mol_table_builder_add(mol_builder_t *builder, mol_num_t field_index,
                           const uint8_t *data_ptr, mol_num_t data_len);
mol_seg_res_t mol_builder_finalize_simple(mol_builder_t builder);

mol_seg_res_t mol_fixvec_builder_finalize(mol_builder_t builder);
mol_seg_res_t mol_dynvec_builder_finalize(mol_builder_t builder);

// blockchain-api.h
#define MolReader_Uint32_verify(s, c) mol_verify_fixed_size(s, 4)
#define MolReader_Uint32_get_nth0(s) mol_slice_by_offset(s, 0, 1)
#define MolReader_Uint32_get_nth1(s) mol_slice_by_offset(s, 1, 1)
#define MolReader_Uint32_get_nth2(s) mol_slice_by_offset(s, 2, 1)
#define MolReader_Uint32_get_nth3(s) mol_slice_by_offset(s, 3, 1)
#define MolReader_Uint64_verify(s, c) mol_verify_fixed_size(s, 8)
#define MolReader_Uint64_get_nth0(s) mol_slice_by_offset(s, 0, 1)
#define MolReader_Uint64_get_nth1(s) mol_slice_by_offset(s, 1, 1)
#define MolReader_Uint64_get_nth2(s) mol_slice_by_offset(s, 2, 1)
#define MolReader_Uint64_get_nth3(s) mol_slice_by_offset(s, 3, 1)
#define MolReader_Uint64_get_nth4(s) mol_slice_by_offset(s, 4, 1)
#define MolReader_Uint64_get_nth5(s) mol_slice_by_offset(s, 5, 1)
#define MolReader_Uint64_get_nth6(s) mol_slice_by_offset(s, 6, 1)
#define MolReader_Uint64_get_nth7(s) mol_slice_by_offset(s, 7, 1)
#define MolReader_Uint128_verify(s, c) mol_verify_fixed_size(s, 16)
#define MolReader_Uint128_get_nth0(s) mol_slice_by_offset(s, 0, 1)
#define MolReader_Uint128_get_nth1(s) mol_slice_by_offset(s, 1, 1)
#define MolReader_Uint128_get_nth2(s) mol_slice_by_offset(s, 2, 1)
#define MolReader_Uint128_get_nth3(s) mol_slice_by_offset(s, 3, 1)
#define MolReader_Uint128_get_nth4(s) mol_slice_by_offset(s, 4, 1)
#define MolReader_Uint128_get_nth5(s) mol_slice_by_offset(s, 5, 1)
#define MolReader_Uint128_get_nth6(s) mol_slice_by_offset(s, 6, 1)
#define MolReader_Uint128_get_nth7(s) mol_slice_by_offset(s, 7, 1)
#define MolReader_Uint128_get_nth8(s) mol_slice_by_offset(s, 8, 1)
#define MolReader_Uint128_get_nth9(s) mol_slice_by_offset(s, 9, 1)
#define MolReader_Uint128_get_nth10(s) mol_slice_by_offset(s, 10, 1)
#define MolReader_Uint128_get_nth11(s) mol_slice_by_offset(s, 11, 1)
#define MolReader_Uint128_get_nth12(s) mol_slice_by_offset(s, 12, 1)
#define MolReader_Uint128_get_nth13(s) mol_slice_by_offset(s, 13, 1)
#define MolReader_Uint128_get_nth14(s) mol_slice_by_offset(s, 14, 1)
#define MolReader_Uint128_get_nth15(s) mol_slice_by_offset(s, 15, 1)
#define MolReader_Byte32_verify(s, c) mol_verify_fixed_size(s, 32)
#define MolReader_Byte32_get_nth0(s) mol_slice_by_offset(s, 0, 1)
#define MolReader_Byte32_get_nth1(s) mol_slice_by_offset(s, 1, 1)
#define MolReader_Byte32_get_nth2(s) mol_slice_by_offset(s, 2, 1)
#define MolReader_Byte32_get_nth3(s) mol_slice_by_offset(s, 3, 1)
#define MolReader_Byte32_get_nth4(s) mol_slice_by_offset(s, 4, 1)
#define MolReader_Byte32_get_nth5(s) mol_slice_by_offset(s, 5, 1)
#define MolReader_Byte32_get_nth6(s) mol_slice_by_offset(s, 6, 1)
#define MolReader_Byte32_get_nth7(s) mol_slice_by_offset(s, 7, 1)
#define MolReader_Byte32_get_nth8(s) mol_slice_by_offset(s, 8, 1)
#define MolReader_Byte32_get_nth9(s) mol_slice_by_offset(s, 9, 1)
#define MolReader_Byte32_get_nth10(s) mol_slice_by_offset(s, 10, 1)
#define MolReader_Byte32_get_nth11(s) mol_slice_by_offset(s, 11, 1)
#define MolReader_Byte32_get_nth12(s) mol_slice_by_offset(s, 12, 1)
#define MolReader_Byte32_get_nth13(s) mol_slice_by_offset(s, 13, 1)
#define MolReader_Byte32_get_nth14(s) mol_slice_by_offset(s, 14, 1)
#define MolReader_Byte32_get_nth15(s) mol_slice_by_offset(s, 15, 1)
#define MolReader_Byte32_get_nth16(s) mol_slice_by_offset(s, 16, 1)
#define MolReader_Byte32_get_nth17(s) mol_slice_by_offset(s, 17, 1)
#define MolReader_Byte32_get_nth18(s) mol_slice_by_offset(s, 18, 1)
#define MolReader_Byte32_get_nth19(s) mol_slice_by_offset(s, 19, 1)
#define MolReader_Byte32_get_nth20(s) mol_slice_by_offset(s, 20, 1)
#define MolReader_Byte32_get_nth21(s) mol_slice_by_offset(s, 21, 1)
#define MolReader_Byte32_get_nth22(s) mol_slice_by_offset(s, 22, 1)
#define MolReader_Byte32_get_nth23(s) mol_slice_by_offset(s, 23, 1)
#define MolReader_Byte32_get_nth24(s) mol_slice_by_offset(s, 24, 1)
#define MolReader_Byte32_get_nth25(s) mol_slice_by_offset(s, 25, 1)
#define MolReader_Byte32_get_nth26(s) mol_slice_by_offset(s, 26, 1)
#define MolReader_Byte32_get_nth27(s) mol_slice_by_offset(s, 27, 1)
#define MolReader_Byte32_get_nth28(s) mol_slice_by_offset(s, 28, 1)
#define MolReader_Byte32_get_nth29(s) mol_slice_by_offset(s, 29, 1)
#define MolReader_Byte32_get_nth30(s) mol_slice_by_offset(s, 30, 1)
#define MolReader_Byte32_get_nth31(s) mol_slice_by_offset(s, 31, 1)
#define MolReader_Uint256_verify(s, c) mol_verify_fixed_size(s, 32)
#define MolReader_Uint256_get_nth0(s) mol_slice_by_offset(s, 0, 1)
#define MolReader_Uint256_get_nth1(s) mol_slice_by_offset(s, 1, 1)
#define MolReader_Uint256_get_nth2(s) mol_slice_by_offset(s, 2, 1)
#define MolReader_Uint256_get_nth3(s) mol_slice_by_offset(s, 3, 1)
#define MolReader_Uint256_get_nth4(s) mol_slice_by_offset(s, 4, 1)
#define MolReader_Uint256_get_nth5(s) mol_slice_by_offset(s, 5, 1)
#define MolReader_Uint256_get_nth6(s) mol_slice_by_offset(s, 6, 1)
#define MolReader_Uint256_get_nth7(s) mol_slice_by_offset(s, 7, 1)
#define MolReader_Uint256_get_nth8(s) mol_slice_by_offset(s, 8, 1)
#define MolReader_Uint256_get_nth9(s) mol_slice_by_offset(s, 9, 1)
#define MolReader_Uint256_get_nth10(s) mol_slice_by_offset(s, 10, 1)
#define MolReader_Uint256_get_nth11(s) mol_slice_by_offset(s, 11, 1)
#define MolReader_Uint256_get_nth12(s) mol_slice_by_offset(s, 12, 1)
#define MolReader_Uint256_get_nth13(s) mol_slice_by_offset(s, 13, 1)
#define MolReader_Uint256_get_nth14(s) mol_slice_by_offset(s, 14, 1)
#define MolReader_Uint256_get_nth15(s) mol_slice_by_offset(s, 15, 1)
#define MolReader_Uint256_get_nth16(s) mol_slice_by_offset(s, 16, 1)
#define MolReader_Uint256_get_nth17(s) mol_slice_by_offset(s, 17, 1)
#define MolReader_Uint256_get_nth18(s) mol_slice_by_offset(s, 18, 1)
#define MolReader_Uint256_get_nth19(s) mol_slice_by_offset(s, 19, 1)
#define MolReader_Uint256_get_nth20(s) mol_slice_by_offset(s, 20, 1)
#define MolReader_Uint256_get_nth21(s) mol_slice_by_offset(s, 21, 1)
#define MolReader_Uint256_get_nth22(s) mol_slice_by_offset(s, 22, 1)
#define MolReader_Uint256_get_nth23(s) mol_slice_by_offset(s, 23, 1)
#define MolReader_Uint256_get_nth24(s) mol_slice_by_offset(s, 24, 1)
#define MolReader_Uint256_get_nth25(s) mol_slice_by_offset(s, 25, 1)
#define MolReader_Uint256_get_nth26(s) mol_slice_by_offset(s, 26, 1)
#define MolReader_Uint256_get_nth27(s) mol_slice_by_offset(s, 27, 1)
#define MolReader_Uint256_get_nth28(s) mol_slice_by_offset(s, 28, 1)
#define MolReader_Uint256_get_nth29(s) mol_slice_by_offset(s, 29, 1)
#define MolReader_Uint256_get_nth30(s) mol_slice_by_offset(s, 30, 1)
#define MolReader_Uint256_get_nth31(s) mol_slice_by_offset(s, 31, 1)
#define MolReader_Bytes_verify(s, c) mol_fixvec_verify(s, 1)
#define MolReader_Bytes_length(s) mol_fixvec_length(s)
#define MolReader_Bytes_get(s, i) mol_fixvec_slice_by_index(s, 1, i)
#define MolReader_Bytes_raw_bytes(s) mol_fixvec_slice_raw_bytes(s)
mol_errno MolReader_BytesOpt_verify(const mol_seg_t *, bool);
#define MolReader_BytesOpt_is_none(s) mol_option_is_none(s)
mol_errno MolReader_BytesVec_verify(const mol_seg_t *, bool);
#define MolReader_BytesVec_length(s) mol_dynvec_length(s)
#define MolReader_BytesVec_get(s, i) mol_dynvec_slice_by_index(s, i)
#define MolReader_Byte32Vec_verify(s, c) mol_fixvec_verify(s, 32)
#define MolReader_Byte32Vec_length(s) mol_fixvec_length(s)
#define MolReader_Byte32Vec_get(s, i) mol_fixvec_slice_by_index(s, 32, i)
mol_errno MolReader_ScriptOpt_verify(const mol_seg_t *, bool);
#define MolReader_ScriptOpt_is_none(s) mol_option_is_none(s)
#define MolReader_ProposalShortId_verify(s, c) mol_verify_fixed_size(s, 10)
#define MolReader_ProposalShortId_get_nth0(s) mol_slice_by_offset(s, 0, 1)
#define MolReader_ProposalShortId_get_nth1(s) mol_slice_by_offset(s, 1, 1)
#define MolReader_ProposalShortId_get_nth2(s) mol_slice_by_offset(s, 2, 1)
#define MolReader_ProposalShortId_get_nth3(s) mol_slice_by_offset(s, 3, 1)
#define MolReader_ProposalShortId_get_nth4(s) mol_slice_by_offset(s, 4, 1)
#define MolReader_ProposalShortId_get_nth5(s) mol_slice_by_offset(s, 5, 1)
#define MolReader_ProposalShortId_get_nth6(s) mol_slice_by_offset(s, 6, 1)
#define MolReader_ProposalShortId_get_nth7(s) mol_slice_by_offset(s, 7, 1)
#define MolReader_ProposalShortId_get_nth8(s) mol_slice_by_offset(s, 8, 1)
#define MolReader_ProposalShortId_get_nth9(s) mol_slice_by_offset(s, 9, 1)
mol_errno MolReader_UncleBlockVec_verify(const mol_seg_t *, bool);
#define MolReader_UncleBlockVec_length(s) mol_dynvec_length(s)
#define MolReader_UncleBlockVec_get(s, i) mol_dynvec_slice_by_index(s, i)
mol_errno MolReader_TransactionVec_verify(const mol_seg_t *, bool);
#define MolReader_TransactionVec_length(s) mol_dynvec_length(s)
#define MolReader_TransactionVec_get(s, i) mol_dynvec_slice_by_index(s, i)
#define MolReader_ProposalShortIdVec_verify(s, c) mol_fixvec_verify(s, 10)
#define MolReader_ProposalShortIdVec_length(s) mol_fixvec_length(s)
#define MolReader_ProposalShortIdVec_get(s, i) \
  mol_fixvec_slice_by_index(s, 10, i)
#define MolReader_CellDepVec_verify(s, c) mol_fixvec_verify(s, 37)
#define MolReader_CellDepVec_length(s) mol_fixvec_length(s)
#define MolReader_CellDepVec_get(s, i) mol_fixvec_slice_by_index(s, 37, i)
#define MolReader_CellInputVec_verify(s, c) mol_fixvec_verify(s, 44)
#define MolReader_CellInputVec_length(s) mol_fixvec_length(s)
#define MolReader_CellInputVec_get(s, i) mol_fixvec_slice_by_index(s, 44, i)
mol_errno MolReader_CellOutputVec_verify(const mol_seg_t *, bool);
#define MolReader_CellOutputVec_length(s) mol_dynvec_length(s)
#define MolReader_CellOutputVec_get(s, i) mol_dynvec_slice_by_index(s, i)
mol_errno MolReader_Script_verify(const mol_seg_t *, bool);
#define MolReader_Script_actual_field_count(s) mol_table_actual_field_count(s)
#define MolReader_Script_has_extra_fields(s) mol_table_has_extra_fields(s, 3)
#define MolReader_Script_get_code_hash(s) mol_table_slice_by_index(s, 0)
#define MolReader_Script_get_hash_type(s) mol_table_slice_by_index(s, 1)
#define MolReader_Script_get_args(s) mol_table_slice_by_index(s, 2)
#define MolReader_OutPoint_verify(s, c) mol_verify_fixed_size(s, 36)
#define MolReader_OutPoint_get_tx_hash(s) mol_slice_by_offset(s, 0, 32)
#define MolReader_OutPoint_get_index(s) mol_slice_by_offset(s, 32, 4)
#define MolReader_CellInput_verify(s, c) mol_verify_fixed_size(s, 44)
#define MolReader_CellInput_get_since(s) mol_slice_by_offset(s, 0, 8)
#define MolReader_CellInput_get_previous_output(s) mol_slice_by_offset(s, 8, 36)
mol_errno MolReader_CellOutput_verify(const mol_seg_t *, bool);
#define MolReader_CellOutput_actual_field_count(s) \
  mol_table_actual_field_count(s)
#define MolReader_CellOutput_has_extra_fields(s) \
  mol_table_has_extra_fields(s, 3)
#define MolReader_CellOutput_get_capacity(s) mol_table_slice_by_index(s, 0)
#define MolReader_CellOutput_get_lock(s) mol_table_slice_by_index(s, 1)
#define MolReader_CellOutput_get_type_(s) mol_table_slice_by_index(s, 2)
#define MolReader_CellDep_verify(s, c) mol_verify_fixed_size(s, 37)
#define MolReader_CellDep_get_out_point(s) mol_slice_by_offset(s, 0, 36)
#define MolReader_CellDep_get_dep_type(s) mol_slice_by_offset(s, 36, 1)
mol_errno MolReader_RawTransaction_verify(const mol_seg_t *, bool);
#define MolReader_RawTransaction_actual_field_count(s) \
  mol_table_actual_field_count(s)
#define MolReader_RawTransaction_has_extra_fields(s) \
  mol_table_has_extra_fields(s, 6)
#define MolReader_RawTransaction_get_version(s) mol_table_slice_by_index(s, 0)
#define MolReader_RawTransaction_get_cell_deps(s) mol_table_slice_by_index(s, 1)
#define MolReader_RawTransaction_get_header_deps(s) \
  mol_table_slice_by_index(s, 2)
#define MolReader_RawTransaction_get_inputs(s) mol_table_slice_by_index(s, 3)
#define MolReader_RawTransaction_get_outputs(s) mol_table_slice_by_index(s, 4)
#define MolReader_RawTransaction_get_outputs_data(s) \
  mol_table_slice_by_index(s, 5)
mol_errno MolReader_Transaction_verify(const mol_seg_t *, bool);
#define MolReader_Transaction_actual_field_count(s) \
  mol_table_actual_field_count(s)
#define MolReader_Transaction_has_extra_fields(s) \
  mol_table_has_extra_fields(s, 2)
#define MolReader_Transaction_get_raw(s) mol_table_slice_by_index(s, 0)
#define MolReader_Transaction_get_witnesses(s) mol_table_slice_by_index(s, 1)
#define MolReader_RawHeader_verify(s, c) mol_verify_fixed_size(s, 192)
#define MolReader_RawHeader_get_version(s) mol_slice_by_offset(s, 0, 4)
#define MolReader_RawHeader_get_compact_target(s) mol_slice_by_offset(s, 4, 4)
#define MolReader_RawHeader_get_timestamp(s) mol_slice_by_offset(s, 8, 8)
#define MolReader_RawHeader_get_number(s) mol_slice_by_offset(s, 16, 8)
#define MolReader_RawHeader_get_epoch(s) mol_slice_by_offset(s, 24, 8)
#define MolReader_RawHeader_get_parent_hash(s) mol_slice_by_offset(s, 32, 32)
#define MolReader_RawHeader_get_transactions_root(s) \
  mol_slice_by_offset(s, 64, 32)
#define MolReader_RawHeader_get_proposals_hash(s) mol_slice_by_offset(s, 96, 32)
#define MolReader_RawHeader_get_uncles_hash(s) mol_slice_by_offset(s, 128, 32)
#define MolReader_RawHeader_get_dao(s) mol_slice_by_offset(s, 160, 32)
#define MolReader_Header_verify(s, c) mol_verify_fixed_size(s, 208)
#define MolReader_Header_get_raw(s) mol_slice_by_offset(s, 0, 192)
#define MolReader_Header_get_nonce(s) mol_slice_by_offset(s, 192, 16)
mol_errno MolReader_UncleBlock_verify(const mol_seg_t *, bool);
#define MolReader_UncleBlock_actual_field_count(s) \
  mol_table_actual_field_count(s)
#define MolReader_UncleBlock_has_extra_fields(s) \
  mol_table_has_extra_fields(s, 2)
#define MolReader_UncleBlock_get_header(s) mol_table_slice_by_index(s, 0)
#define MolReader_UncleBlock_get_proposals(s) mol_table_slice_by_index(s, 1)
mol_errno MolReader_Block_verify(const mol_seg_t *, bool);
#define MolReader_Block_actual_field_count(s) mol_table_actual_field_count(s)
#define MolReader_Block_has_extra_fields(s) mol_table_has_extra_fields(s, 4)
#define MolReader_Block_get_header(s) mol_table_slice_by_index(s, 0)
#define MolReader_Block_get_uncles(s) mol_table_slice_by_index(s, 1)
#define MolReader_Block_get_transactions(s) mol_table_slice_by_index(s, 2)
#define MolReader_Block_get_proposals(s) mol_table_slice_by_index(s, 3)
mol_errno MolReader_CellbaseWitness_verify(const mol_seg_t *, bool);
#define MolReader_CellbaseWitness_actual_field_count(s) \
  mol_table_actual_field_count(s)
#define MolReader_CellbaseWitness_has_extra_fields(s) \
  mol_table_has_extra_fields(s, 2)
#define MolReader_CellbaseWitness_get_lock(s) mol_table_slice_by_index(s, 0)
#define MolReader_CellbaseWitness_get_message(s) mol_table_slice_by_index(s, 1)
mol_errno MolReader_WitnessArgs_verify(const mol_seg_t *, bool);
#define MolReader_WitnessArgs_actual_field_count(s) \
  mol_table_actual_field_count(s)
#define MolReader_WitnessArgs_has_extra_fields(s) \
  mol_table_has_extra_fields(s, 3)
#define MolReader_WitnessArgs_get_lock(s) mol_table_slice_by_index(s, 0)
#define MolReader_WitnessArgs_get_input_type(s) mol_table_slice_by_index(s, 1)
#define MolReader_WitnessArgs_get_output_type(s) mol_table_slice_by_index(s, 2)

/*
 * Builder APIs
 */

#define MolBuilder_Uint32_init(b) mol_builder_initialize_fixed_size(b, 4)
#define MolBuilder_Uint32_set_nth0(b, p) mol_builder_set_byte_by_offset(b, 0, p)
#define MolBuilder_Uint32_set_nth1(b, p) mol_builder_set_byte_by_offset(b, 1, p)
#define MolBuilder_Uint32_set_nth2(b, p) mol_builder_set_byte_by_offset(b, 2, p)
#define MolBuilder_Uint32_set_nth3(b, p) mol_builder_set_byte_by_offset(b, 3, p)
#define MolBuilder_Uint32_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_Uint32_clear(b) mol_builder_discard(b)
#define MolBuilder_Uint64_init(b) mol_builder_initialize_fixed_size(b, 8)
#define MolBuilder_Uint64_set_nth0(b, p) mol_builder_set_byte_by_offset(b, 0, p)
#define MolBuilder_Uint64_set_nth1(b, p) mol_builder_set_byte_by_offset(b, 1, p)
#define MolBuilder_Uint64_set_nth2(b, p) mol_builder_set_byte_by_offset(b, 2, p)
#define MolBuilder_Uint64_set_nth3(b, p) mol_builder_set_byte_by_offset(b, 3, p)
#define MolBuilder_Uint64_set_nth4(b, p) mol_builder_set_byte_by_offset(b, 4, p)
#define MolBuilder_Uint64_set_nth5(b, p) mol_builder_set_byte_by_offset(b, 5, p)
#define MolBuilder_Uint64_set_nth6(b, p) mol_builder_set_byte_by_offset(b, 6, p)
#define MolBuilder_Uint64_set_nth7(b, p) mol_builder_set_byte_by_offset(b, 7, p)
#define MolBuilder_Uint64_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_Uint64_clear(b) mol_builder_discard(b)
#define MolBuilder_Uint128_init(b) mol_builder_initialize_fixed_size(b, 16)
#define MolBuilder_Uint128_set_nth0(b, p) \
  mol_builder_set_byte_by_offset(b, 0, p)
#define MolBuilder_Uint128_set_nth1(b, p) \
  mol_builder_set_byte_by_offset(b, 1, p)
#define MolBuilder_Uint128_set_nth2(b, p) \
  mol_builder_set_byte_by_offset(b, 2, p)
#define MolBuilder_Uint128_set_nth3(b, p) \
  mol_builder_set_byte_by_offset(b, 3, p)
#define MolBuilder_Uint128_set_nth4(b, p) \
  mol_builder_set_byte_by_offset(b, 4, p)
#define MolBuilder_Uint128_set_nth5(b, p) \
  mol_builder_set_byte_by_offset(b, 5, p)
#define MolBuilder_Uint128_set_nth6(b, p) \
  mol_builder_set_byte_by_offset(b, 6, p)
#define MolBuilder_Uint128_set_nth7(b, p) \
  mol_builder_set_byte_by_offset(b, 7, p)
#define MolBuilder_Uint128_set_nth8(b, p) \
  mol_builder_set_byte_by_offset(b, 8, p)
#define MolBuilder_Uint128_set_nth9(b, p) \
  mol_builder_set_byte_by_offset(b, 9, p)
#define MolBuilder_Uint128_set_nth10(b, p) \
  mol_builder_set_byte_by_offset(b, 10, p)
#define MolBuilder_Uint128_set_nth11(b, p) \
  mol_builder_set_byte_by_offset(b, 11, p)
#define MolBuilder_Uint128_set_nth12(b, p) \
  mol_builder_set_byte_by_offset(b, 12, p)
#define MolBuilder_Uint128_set_nth13(b, p) \
  mol_builder_set_byte_by_offset(b, 13, p)
#define MolBuilder_Uint128_set_nth14(b, p) \
  mol_builder_set_byte_by_offset(b, 14, p)
#define MolBuilder_Uint128_set_nth15(b, p) \
  mol_builder_set_byte_by_offset(b, 15, p)
#define MolBuilder_Uint128_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_Uint128_clear(b) mol_builder_discard(b)
#define MolBuilder_Byte32_init(b) mol_builder_initialize_fixed_size(b, 32)
#define MolBuilder_Byte32_set_nth0(b, p) mol_builder_set_byte_by_offset(b, 0, p)
#define MolBuilder_Byte32_set_nth1(b, p) mol_builder_set_byte_by_offset(b, 1, p)
#define MolBuilder_Byte32_set_nth2(b, p) mol_builder_set_byte_by_offset(b, 2, p)
#define MolBuilder_Byte32_set_nth3(b, p) mol_builder_set_byte_by_offset(b, 3, p)
#define MolBuilder_Byte32_set_nth4(b, p) mol_builder_set_byte_by_offset(b, 4, p)
#define MolBuilder_Byte32_set_nth5(b, p) mol_builder_set_byte_by_offset(b, 5, p)
#define MolBuilder_Byte32_set_nth6(b, p) mol_builder_set_byte_by_offset(b, 6, p)
#define MolBuilder_Byte32_set_nth7(b, p) mol_builder_set_byte_by_offset(b, 7, p)
#define MolBuilder_Byte32_set_nth8(b, p) mol_builder_set_byte_by_offset(b, 8, p)
#define MolBuilder_Byte32_set_nth9(b, p) mol_builder_set_byte_by_offset(b, 9, p)
#define MolBuilder_Byte32_set_nth10(b, p) \
  mol_builder_set_byte_by_offset(b, 10, p)
#define MolBuilder_Byte32_set_nth11(b, p) \
  mol_builder_set_byte_by_offset(b, 11, p)
#define MolBuilder_Byte32_set_nth12(b, p) \
  mol_builder_set_byte_by_offset(b, 12, p)
#define MolBuilder_Byte32_set_nth13(b, p) \
  mol_builder_set_byte_by_offset(b, 13, p)
#define MolBuilder_Byte32_set_nth14(b, p) \
  mol_builder_set_byte_by_offset(b, 14, p)
#define MolBuilder_Byte32_set_nth15(b, p) \
  mol_builder_set_byte_by_offset(b, 15, p)
#define MolBuilder_Byte32_set_nth16(b, p) \
  mol_builder_set_byte_by_offset(b, 16, p)
#define MolBuilder_Byte32_set_nth17(b, p) \
  mol_builder_set_byte_by_offset(b, 17, p)
#define MolBuilder_Byte32_set_nth18(b, p) \
  mol_builder_set_byte_by_offset(b, 18, p)
#define MolBuilder_Byte32_set_nth19(b, p) \
  mol_builder_set_byte_by_offset(b, 19, p)
#define MolBuilder_Byte32_set_nth20(b, p) \
  mol_builder_set_byte_by_offset(b, 20, p)
#define MolBuilder_Byte32_set_nth21(b, p) \
  mol_builder_set_byte_by_offset(b, 21, p)
#define MolBuilder_Byte32_set_nth22(b, p) \
  mol_builder_set_byte_by_offset(b, 22, p)
#define MolBuilder_Byte32_set_nth23(b, p) \
  mol_builder_set_byte_by_offset(b, 23, p)
#define MolBuilder_Byte32_set_nth24(b, p) \
  mol_builder_set_byte_by_offset(b, 24, p)
#define MolBuilder_Byte32_set_nth25(b, p) \
  mol_builder_set_byte_by_offset(b, 25, p)
#define MolBuilder_Byte32_set_nth26(b, p) \
  mol_builder_set_byte_by_offset(b, 26, p)
#define MolBuilder_Byte32_set_nth27(b, p) \
  mol_builder_set_byte_by_offset(b, 27, p)
#define MolBuilder_Byte32_set_nth28(b, p) \
  mol_builder_set_byte_by_offset(b, 28, p)
#define MolBuilder_Byte32_set_nth29(b, p) \
  mol_builder_set_byte_by_offset(b, 29, p)
#define MolBuilder_Byte32_set_nth30(b, p) \
  mol_builder_set_byte_by_offset(b, 30, p)
#define MolBuilder_Byte32_set_nth31(b, p) \
  mol_builder_set_byte_by_offset(b, 31, p)
#define MolBuilder_Byte32_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_Byte32_clear(b) mol_builder_discard(b)
#define MolBuilder_Uint256_init(b) mol_builder_initialize_fixed_size(b, 32)
#define MolBuilder_Uint256_set_nth0(b, p) \
  mol_builder_set_byte_by_offset(b, 0, p)
#define MolBuilder_Uint256_set_nth1(b, p) \
  mol_builder_set_byte_by_offset(b, 1, p)
#define MolBuilder_Uint256_set_nth2(b, p) \
  mol_builder_set_byte_by_offset(b, 2, p)
#define MolBuilder_Uint256_set_nth3(b, p) \
  mol_builder_set_byte_by_offset(b, 3, p)
#define MolBuilder_Uint256_set_nth4(b, p) \
  mol_builder_set_byte_by_offset(b, 4, p)
#define MolBuilder_Uint256_set_nth5(b, p) \
  mol_builder_set_byte_by_offset(b, 5, p)
#define MolBuilder_Uint256_set_nth6(b, p) \
  mol_builder_set_byte_by_offset(b, 6, p)
#define MolBuilder_Uint256_set_nth7(b, p) \
  mol_builder_set_byte_by_offset(b, 7, p)
#define MolBuilder_Uint256_set_nth8(b, p) \
  mol_builder_set_byte_by_offset(b, 8, p)
#define MolBuilder_Uint256_set_nth9(b, p) \
  mol_builder_set_byte_by_offset(b, 9, p)
#define MolBuilder_Uint256_set_nth10(b, p) \
  mol_builder_set_byte_by_offset(b, 10, p)
#define MolBuilder_Uint256_set_nth11(b, p) \
  mol_builder_set_byte_by_offset(b, 11, p)
#define MolBuilder_Uint256_set_nth12(b, p) \
  mol_builder_set_byte_by_offset(b, 12, p)
#define MolBuilder_Uint256_set_nth13(b, p) \
  mol_builder_set_byte_by_offset(b, 13, p)
#define MolBuilder_Uint256_set_nth14(b, p) \
  mol_builder_set_byte_by_offset(b, 14, p)
#define MolBuilder_Uint256_set_nth15(b, p) \
  mol_builder_set_byte_by_offset(b, 15, p)
#define MolBuilder_Uint256_set_nth16(b, p) \
  mol_builder_set_byte_by_offset(b, 16, p)
#define MolBuilder_Uint256_set_nth17(b, p) \
  mol_builder_set_byte_by_offset(b, 17, p)
#define MolBuilder_Uint256_set_nth18(b, p) \
  mol_builder_set_byte_by_offset(b, 18, p)
#define MolBuilder_Uint256_set_nth19(b, p) \
  mol_builder_set_byte_by_offset(b, 19, p)
#define MolBuilder_Uint256_set_nth20(b, p) \
  mol_builder_set_byte_by_offset(b, 20, p)
#define MolBuilder_Uint256_set_nth21(b, p) \
  mol_builder_set_byte_by_offset(b, 21, p)
#define MolBuilder_Uint256_set_nth22(b, p) \
  mol_builder_set_byte_by_offset(b, 22, p)
#define MolBuilder_Uint256_set_nth23(b, p) \
  mol_builder_set_byte_by_offset(b, 23, p)
#define MolBuilder_Uint256_set_nth24(b, p) \
  mol_builder_set_byte_by_offset(b, 24, p)
#define MolBuilder_Uint256_set_nth25(b, p) \
  mol_builder_set_byte_by_offset(b, 25, p)
#define MolBuilder_Uint256_set_nth26(b, p) \
  mol_builder_set_byte_by_offset(b, 26, p)
#define MolBuilder_Uint256_set_nth27(b, p) \
  mol_builder_set_byte_by_offset(b, 27, p)
#define MolBuilder_Uint256_set_nth28(b, p) \
  mol_builder_set_byte_by_offset(b, 28, p)
#define MolBuilder_Uint256_set_nth29(b, p) \
  mol_builder_set_byte_by_offset(b, 29, p)
#define MolBuilder_Uint256_set_nth30(b, p) \
  mol_builder_set_byte_by_offset(b, 30, p)
#define MolBuilder_Uint256_set_nth31(b, p) \
  mol_builder_set_byte_by_offset(b, 31, p)
#define MolBuilder_Uint256_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_Uint256_clear(b) mol_builder_discard(b)
#define MolBuilder_Bytes_init(b) mol_fixvec_builder_initialize(b, 16)
#define MolBuilder_Bytes_push(b, p) mol_fixvec_builder_push_byte(b, p)
#define MolBuilder_Bytes_build(b) mol_fixvec_builder_finalize(b)
#define MolBuilder_Bytes_clear(b) mol_builder_discard(b)
#define MolBuilder_BytesOpt_init(b) mol_builder_initialize_fixed_size(b, 0)
#define MolBuilder_BytesOpt_set(b, p, l) mol_option_builder_set(b, p, l)
#define MolBuilder_BytesOpt_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_BytesOpt_clear(b) mol_builder_discard(b)
#define MolBuilder_BytesVec_init(b) \
  mol_builder_initialize_with_capacity(b, 64, 64)
#define MolBuilder_BytesVec_push(b, p, l) mol_dynvec_builder_push(b, p, l)
#define MolBuilder_BytesVec_build(b) mol_dynvec_builder_finalize(b)
#define MolBuilder_BytesVec_clear(b) mol_builder_discard(b)
#define MolBuilder_Byte32Vec_init(b) mol_fixvec_builder_initialize(b, 512)
#define MolBuilder_Byte32Vec_push(b, p) mol_fixvec_builder_push(b, p, 32)
#define MolBuilder_Byte32Vec_build(b) mol_fixvec_builder_finalize(b)
#define MolBuilder_Byte32Vec_clear(b) mol_builder_discard(b)
#define MolBuilder_ScriptOpt_init(b) mol_builder_initialize_fixed_size(b, 0)
#define MolBuilder_ScriptOpt_set(b, p, l) mol_option_builder_set(b, p, l)
#define MolBuilder_ScriptOpt_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_ScriptOpt_clear(b) mol_builder_discard(b)
#define MolBuilder_ProposalShortId_init(b) \
  mol_builder_initialize_fixed_size(b, 10)
#define MolBuilder_ProposalShortId_set_nth0(b, p) \
  mol_builder_set_byte_by_offset(b, 0, p)
#define MolBuilder_ProposalShortId_set_nth1(b, p) \
  mol_builder_set_byte_by_offset(b, 1, p)
#define MolBuilder_ProposalShortId_set_nth2(b, p) \
  mol_builder_set_byte_by_offset(b, 2, p)
#define MolBuilder_ProposalShortId_set_nth3(b, p) \
  mol_builder_set_byte_by_offset(b, 3, p)
#define MolBuilder_ProposalShortId_set_nth4(b, p) \
  mol_builder_set_byte_by_offset(b, 4, p)
#define MolBuilder_ProposalShortId_set_nth5(b, p) \
  mol_builder_set_byte_by_offset(b, 5, p)
#define MolBuilder_ProposalShortId_set_nth6(b, p) \
  mol_builder_set_byte_by_offset(b, 6, p)
#define MolBuilder_ProposalShortId_set_nth7(b, p) \
  mol_builder_set_byte_by_offset(b, 7, p)
#define MolBuilder_ProposalShortId_set_nth8(b, p) \
  mol_builder_set_byte_by_offset(b, 8, p)
#define MolBuilder_ProposalShortId_set_nth9(b, p) \
  mol_builder_set_byte_by_offset(b, 9, p)
#define MolBuilder_ProposalShortId_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_ProposalShortId_clear(b) mol_builder_discard(b)
#define MolBuilder_UncleBlockVec_init(b) \
  mol_builder_initialize_with_capacity(b, 4096, 64)
#define MolBuilder_UncleBlockVec_push(b, p, l) mol_dynvec_builder_push(b, p, l)
#define MolBuilder_UncleBlockVec_build(b) mol_dynvec_builder_finalize(b)
#define MolBuilder_UncleBlockVec_clear(b) mol_builder_discard(b)
#define MolBuilder_TransactionVec_init(b) \
  mol_builder_initialize_with_capacity(b, 2048, 64)
#define MolBuilder_TransactionVec_push(b, p, l) mol_dynvec_builder_push(b, p, l)
#define MolBuilder_TransactionVec_build(b) mol_dynvec_builder_finalize(b)
#define MolBuilder_TransactionVec_clear(b) mol_builder_discard(b)
#define MolBuilder_ProposalShortIdVec_init(b) \
  mol_fixvec_builder_initialize(b, 256)
#define MolBuilder_ProposalShortIdVec_push(b, p) \
  mol_fixvec_builder_push(b, p, 10)
#define MolBuilder_ProposalShortIdVec_build(b) mol_fixvec_builder_finalize(b)
#define MolBuilder_ProposalShortIdVec_clear(b) mol_builder_discard(b)
#define MolBuilder_CellDepVec_init(b) mol_fixvec_builder_initialize(b, 1024)
#define MolBuilder_CellDepVec_push(b, p) mol_fixvec_builder_push(b, p, 37)
#define MolBuilder_CellDepVec_build(b) mol_fixvec_builder_finalize(b)
#define MolBuilder_CellDepVec_clear(b) mol_builder_discard(b)
#define MolBuilder_CellInputVec_init(b) mol_fixvec_builder_initialize(b, 1024)
#define MolBuilder_CellInputVec_push(b, p) mol_fixvec_builder_push(b, p, 44)
#define MolBuilder_CellInputVec_build(b) mol_fixvec_builder_finalize(b)
#define MolBuilder_CellInputVec_clear(b) mol_builder_discard(b)
#define MolBuilder_CellOutputVec_init(b) \
  mol_builder_initialize_with_capacity(b, 2048, 64)
#define MolBuilder_CellOutputVec_push(b, p, l) mol_dynvec_builder_push(b, p, l)
#define MolBuilder_CellOutputVec_build(b) mol_dynvec_builder_finalize(b)
#define MolBuilder_CellOutputVec_clear(b) mol_builder_discard(b)
#define MolBuilder_Script_init(b) mol_table_builder_initialize(b, 256, 3)
#define MolBuilder_Script_set_code_hash(b, p, l) \
  mol_table_builder_add(b, 0, p, l)
#define MolBuilder_Script_set_hash_type(b, p) \
  mol_table_builder_add_byte(b, 1, p)
#define MolBuilder_Script_set_args(b, p, l) mol_table_builder_add(b, 2, p, l)
mol_seg_res_t MolBuilder_Script_build(mol_builder_t);
#define MolBuilder_Script_clear(b) mol_builder_discard(b)
#define MolBuilder_OutPoint_init(b) mol_builder_initialize_fixed_size(b, 36)
#define MolBuilder_OutPoint_set_tx_hash(b, p) \
  mol_builder_set_by_offset(b, 0, p, 32)
#define MolBuilder_OutPoint_set_index(b, p) \
  mol_builder_set_by_offset(b, 32, p, 4)
#define MolBuilder_OutPoint_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_OutPoint_clear(b) mol_builder_discard(b)
#define MolBuilder_CellInput_init(b) mol_builder_initialize_fixed_size(b, 44)
#define MolBuilder_CellInput_set_since(b, p) \
  mol_builder_set_by_offset(b, 0, p, 8)
#define MolBuilder_CellInput_set_previous_output(b, p) \
  mol_builder_set_by_offset(b, 8, p, 36)
#define MolBuilder_CellInput_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_CellInput_clear(b) mol_builder_discard(b)
#define MolBuilder_CellOutput_init(b) mol_table_builder_initialize(b, 512, 3)
#define MolBuilder_CellOutput_set_capacity(b, p, l) \
  mol_table_builder_add(b, 0, p, l)
#define MolBuilder_CellOutput_set_lock(b, p, l) \
  mol_table_builder_add(b, 1, p, l)
#define MolBuilder_CellOutput_set_type_(b, p, l) \
  mol_table_builder_add(b, 2, p, l)
mol_seg_res_t MolBuilder_CellOutput_build(mol_builder_t);
#define MolBuilder_CellOutput_clear(b) mol_builder_discard(b)
#define MolBuilder_CellDep_init(b) mol_builder_initialize_fixed_size(b, 37)
#define MolBuilder_CellDep_set_out_point(b, p) \
  mol_builder_set_by_offset(b, 0, p, 36)
#define MolBuilder_CellDep_set_dep_type(b, p) \
  mol_builder_set_byte_by_offset(b, 36, p)
#define MolBuilder_CellDep_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_CellDep_clear(b) mol_builder_discard(b)
#define MolBuilder_RawTransaction_init(b) \
  mol_table_builder_initialize(b, 256, 6)
#define MolBuilder_RawTransaction_set_version(b, p, l) \
  mol_table_builder_add(b, 0, p, l)
#define MolBuilder_RawTransaction_set_cell_deps(b, p, l) \
  mol_table_builder_add(b, 1, p, l)
#define MolBuilder_RawTransaction_set_header_deps(b, p, l) \
  mol_table_builder_add(b, 2, p, l)
#define MolBuilder_RawTransaction_set_inputs(b, p, l) \
  mol_table_builder_add(b, 3, p, l)
#define MolBuilder_RawTransaction_set_outputs(b, p, l) \
  mol_table_builder_add(b, 4, p, l)
#define MolBuilder_RawTransaction_set_outputs_data(b, p, l) \
  mol_table_builder_add(b, 5, p, l)
mol_seg_res_t MolBuilder_RawTransaction_build(mol_builder_t);
#define MolBuilder_RawTransaction_clear(b) mol_builder_discard(b)
#define MolBuilder_Transaction_init(b) mol_table_builder_initialize(b, 512, 2)
#define MolBuilder_Transaction_set_raw(b, p, l) \
  mol_table_builder_add(b, 0, p, l)
#define MolBuilder_Transaction_set_witnesses(b, p, l) \
  mol_table_builder_add(b, 1, p, l)
mol_seg_res_t MolBuilder_Transaction_build(mol_builder_t);
#define MolBuilder_Transaction_clear(b) mol_builder_discard(b)
#define MolBuilder_RawHeader_init(b) mol_builder_initialize_fixed_size(b, 192)
#define MolBuilder_RawHeader_set_version(b, p) \
  mol_builder_set_by_offset(b, 0, p, 4)
#define MolBuilder_RawHeader_set_compact_target(b, p) \
  mol_builder_set_by_offset(b, 4, p, 4)
#define MolBuilder_RawHeader_set_timestamp(b, p) \
  mol_builder_set_by_offset(b, 8, p, 8)
#define MolBuilder_RawHeader_set_number(b, p) \
  mol_builder_set_by_offset(b, 16, p, 8)
#define MolBuilder_RawHeader_set_epoch(b, p) \
  mol_builder_set_by_offset(b, 24, p, 8)
#define MolBuilder_RawHeader_set_parent_hash(b, p) \
  mol_builder_set_by_offset(b, 32, p, 32)
#define MolBuilder_RawHeader_set_transactions_root(b, p) \
  mol_builder_set_by_offset(b, 64, p, 32)
#define MolBuilder_RawHeader_set_proposals_hash(b, p) \
  mol_builder_set_by_offset(b, 96, p, 32)
#define MolBuilder_RawHeader_set_uncles_hash(b, p) \
  mol_builder_set_by_offset(b, 128, p, 32)
#define MolBuilder_RawHeader_set_dao(b, p) \
  mol_builder_set_by_offset(b, 160, p, 32)
#define MolBuilder_RawHeader_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_RawHeader_clear(b) mol_builder_discard(b)
#define MolBuilder_Header_init(b) mol_builder_initialize_fixed_size(b, 208)
#define MolBuilder_Header_set_raw(b, p) mol_builder_set_by_offset(b, 0, p, 192)
#define MolBuilder_Header_set_nonce(b, p) \
  mol_builder_set_by_offset(b, 192, p, 16)
#define MolBuilder_Header_build(b) mol_builder_finalize_simple(b)
#define MolBuilder_Header_clear(b) mol_builder_discard(b)
#define MolBuilder_UncleBlock_init(b) mol_table_builder_initialize(b, 1024, 2)
#define MolBuilder_UncleBlock_set_header(b, p, l) \
  mol_table_builder_add(b, 0, p, l)
#define MolBuilder_UncleBlock_set_proposals(b, p, l) \
  mol_table_builder_add(b, 1, p, l)
mol_seg_res_t MolBuilder_UncleBlock_build(mol_builder_t);
#define MolBuilder_UncleBlock_clear(b) mol_builder_discard(b)
#define MolBuilder_Block_init(b) mol_table_builder_initialize(b, 1024, 4)
#define MolBuilder_Block_set_header(b, p, l) mol_table_builder_add(b, 0, p, l)
#define MolBuilder_Block_set_uncles(b, p, l) mol_table_builder_add(b, 1, p, l)
#define MolBuilder_Block_set_transactions(b, p, l) \
  mol_table_builder_add(b, 2, p, l)
#define MolBuilder_Block_set_proposals(b, p, l) \
  mol_table_builder_add(b, 3, p, l)
mol_seg_res_t MolBuilder_Block_build(mol_builder_t);
#define MolBuilder_Block_clear(b) mol_builder_discard(b)
#define MolBuilder_CellbaseWitness_init(b) \
  mol_table_builder_initialize(b, 512, 2)
#define MolBuilder_CellbaseWitness_set_lock(b, p, l) \
  mol_table_builder_add(b, 0, p, l)
#define MolBuilder_CellbaseWitness_set_message(b, p, l) \
  mol_table_builder_add(b, 1, p, l)
mol_seg_res_t MolBuilder_CellbaseWitness_build(mol_builder_t);
#define MolBuilder_CellbaseWitness_clear(b) mol_builder_discard(b)
#define MolBuilder_WitnessArgs_init(b) mol_table_builder_initialize(b, 64, 3)
#define MolBuilder_WitnessArgs_set_lock(b, p, l) \
  mol_table_builder_add(b, 0, p, l)
#define MolBuilder_WitnessArgs_set_input_type(b, p, l) \
  mol_table_builder_add(b, 1, p, l)
#define MolBuilder_WitnessArgs_set_output_type(b, p, l) \
  mol_table_builder_add(b, 2, p, l)
mol_seg_res_t MolBuilder_WitnessArgs_build(mol_builder_t);
#define MolBuilder_WitnessArgs_clear(b) mol_builder_discard(b)

#endif  // CKB_MISCELLANEOUS_SCRIPTS_SIMULATOR_MOLECULE_DECL_ONLY_H_


================================================
File: deps/ckb-c-stdlib/simulator/rsa_sighash_all_usesim.c
================================================
#include <assert.h>
#define ASSERT assert

#include "../c/rsa_sighash_all.c"
#include "mbedtls/ctr_drbg.h"
#include "mbedtls/entropy.h"
#include "mbedtls/md.h"

void dump_as_carray(uint8_t* ptr, size_t size) {
  for (size_t i = 0; i < size; i++) {
    if (i == (size - 1)) {
      mbedtls_printf("0x%02X\n", ptr[i]);
    } else {
      mbedtls_printf("0x%02X,", ptr[i]);
    }
  }
}

static unsigned char get_hex(unsigned char c) {
  if (c >= '0' && c <= '9')
    return c - '0';
  else if (c >= 'A' && c <= 'F')
    return c - 'A' + 10;
  else if (c >= 'a' && c <= 'f')
    return c - 'a' + 10;
  else
    return 0;
}

static int scan_hex(const char* s, unsigned char* value) {
  if (s[0] == '\0' || s[1] == '\0') return 0;

  unsigned char high_part = get_hex(s[0]);
  unsigned char low_part = get_hex(s[1]);

  *value = (high_part << 4) + low_part;
  return 1;
}

static uint32_t read_string(const char* str, uint8_t* buf, uint32_t buf_size) {
  size_t sig_len = strlen(str);
  const char* ptr = str;
  const char* end = str + sig_len;

  uint32_t i = 0;
  while (1) {
    unsigned char c = 0;
    int consumed = scan_hex(ptr, &c);
    if (consumed == 0) break;
    if (i >= buf_size) break;
    buf[i++] = (uint8_t)c;
    ptr += consumed * 2;
    if (ptr >= end) break;
  }
  return i;
}

void mbedtls_mpi_dump(const char* prefix, const mbedtls_mpi* X) {
  size_t n;
  char s[1024];
  memset(s, 0, sizeof(s));

  mbedtls_mpi_write_string(X, 16, s, sizeof(s) - 2, &n);
  mbedtls_printf("%s%s\n", prefix, s);
}

void dup_buffer(const unsigned char* src, int src_len, unsigned char* dest,
                int dup_count) {
  for (int i = 0; i < dup_count; i++) {
    for (int j = 0; j < src_len; j++) {
      dest[i * src_len + j] = src[j];
    }
  }
}

int ecdsa_sighash_random(void);

typedef struct mbedtls_test_rnd_pseudo_info {
  uint32_t key[16];
  uint32_t v0, v1;
} mbedtls_test_rnd_pseudo_info;

int mbedtls_test_rnd_pseudo_rand(void* rng_state, unsigned char* output,
                                 size_t len) {
  for (size_t i = 0; i < len; i++) {
    output[i] = (unsigned char)rand();
  }
  return 0;
}

void srand(unsigned seed);
long time(long*);

int ecdsa_sighash_random(void) {
  int err = 0;
  int id = MBEDTLS_ECP_DP_SECP256R1;
  Secp256r1Info info;
  mbedtls_ecp_group grp;
  mbedtls_ecp_point Q;
  mbedtls_mpi d, r, s;
  mbedtls_test_rnd_pseudo_info rnd_info;
  unsigned char buf[32];

  int alloc_buff_size = 1024 * 1024;
  unsigned char alloc_buff[alloc_buff_size];
  mbedtls_memory_buffer_alloc_init(alloc_buff, alloc_buff_size);

  srand(time(NULL));

  mbedtls_ecp_group_init(&grp);
  mbedtls_ecp_point_init(&Q);
  mbedtls_mpi_init(&d);
  mbedtls_mpi_init(&r);
  mbedtls_mpi_init(&s);
  memset(&rnd_info, 0x00, sizeof(mbedtls_test_rnd_pseudo_info));
  memset(buf, 0, sizeof(buf));

  ASSERT(mbedtls_test_rnd_pseudo_rand(&rnd_info, buf, sizeof(buf)) == 0);
  ASSERT(mbedtls_ecp_group_load(&grp, id) == 0);
  ASSERT(mbedtls_ecp_gen_keypair(&grp, &d, &Q, &mbedtls_test_rnd_pseudo_rand,
                                 &rnd_info) == 0);

  ASSERT(mbedtls_ecdsa_sign(&grp, &r, &s, &d, buf, sizeof(buf),
                            &mbedtls_test_rnd_pseudo_rand, &rnd_info) == 0);

  serialize_secp256r1info(&Q, &r, &s, &info);

  mbedtls_ecp_group_free(&grp);
  mbedtls_ecp_point_free(&Q);
  mbedtls_mpi_free(&d);
  mbedtls_mpi_free(&r);
  mbedtls_mpi_free(&s);

  if (false) {
    mbedtls_ecp_point new_Q;
    mbedtls_mpi new_r;
    mbedtls_mpi new_s;

    deserialize_secp256r1info(&new_Q, &new_r, &new_s, &info);
    ASSERT(mbedtls_ecdsa_verify(&grp, buf, sizeof(buf), &new_Q, &new_r,
                                &new_s) == 0);
  } else {
    info.algorithm_id = CKB_VERIFY_SECP256R1;
    //    dump_as_carray((uint8_t *)&info, sizeof(info));
    //    dump_as_carray(buf, sizeof(buf));
    err = validate_signature_secp256r1(NULL, (const unsigned char*)&info,
                                       sizeof(info), buf, sizeof(buf), NULL,
                                       NULL);
    CHECK(err);
  }
  err = CKB_SUCCESS;
exit:
  if (err == CKB_SUCCESS) {
    mbedtls_printf("ecdsa_sighash_random() passed.\n");
  } else {
    mbedtls_printf("ecdsa_sighash_random() failed.\n");
  }
  return err;
}

#define EXPONENT 65537

int fake_random_entropy_poll(void* data, unsigned char* output, size_t len,
                             size_t* olen) {
  *output = (unsigned char)rand();
  *olen = len;
  return 0;
}

int gen_rsa_key(uint32_t key_size, mbedtls_rsa_context* rsa) {
  int err = 0;
  mbedtls_entropy_context entropy;
  mbedtls_ctr_drbg_context ctr_drbg;
  const char* pers = "rsa_genkey";

  mbedtls_ctr_drbg_init(&ctr_drbg);
  mbedtls_entropy_init(&entropy);
  mbedtls_rsa_init(rsa, MBEDTLS_RSA_PKCS_V15, 0);

  err = mbedtls_entropy_add_source(&entropy, fake_random_entropy_poll, NULL, 32,
                                   MBEDTLS_ENTROPY_SOURCE_STRONG);
  CHECK(err);

  err = mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy,
                              (const unsigned char*)pers, strlen(pers));
  CHECK(err);

  err = mbedtls_rsa_gen_key(rsa, mbedtls_ctr_drbg_random, &ctr_drbg, key_size,
                            EXPONENT);
  CHECK(err);

  err = 0;

exit:
  mbedtls_ctr_drbg_free(&ctr_drbg);
  mbedtls_entropy_free(&entropy);
  return err;
}

int rsa_sign(mbedtls_rsa_context* rsa, const uint8_t* msg_buf,
             uint32_t msg_size, uint8_t* sig) {
  int err = 0;

  uint8_t hash_buf[32] = {0};
  uint32_t hash_size = 32;
  unsigned char hash_result[MBEDTLS_MD_MAX_SIZE];
  mbedtls_mpi N, P, Q, E;
  mbedtls_test_rnd_pseudo_info rnd_info;

  memset(&rnd_info, 0, sizeof(mbedtls_test_rnd_pseudo_info));
  ASSERT(mbedtls_rsa_check_privkey(rsa) == 0);
  err = md_string(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), msg_buf,
                  msg_size, hash_buf);
  CHECK(err);

  err = mbedtls_rsa_pkcs1_sign(rsa, &mbedtls_test_rnd_pseudo_rand, &rnd_info,
                               MBEDTLS_RSA_PRIVATE, MBEDTLS_MD_SHA256,
                               hash_size, hash_buf, sig);
  CHECK(err);
  err = CKB_SUCCESS;
exit:
  return err;
}

int rsa_verify(mbedtls_rsa_context* rsa, const uint8_t* msg_buf,
               uint32_t msg_size, const uint8_t* sig) {
  int err = 0;
  uint8_t hash_buf[32] = {0};
  uint32_t hash_size = 32;

  ASSERT(mbedtls_rsa_check_pubkey(rsa) == 0);
  err = md_string(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), msg_buf,
                  msg_size, hash_buf);
  CHECK(err);
  err = mbedtls_rsa_pkcs1_verify(rsa, NULL, NULL, MBEDTLS_RSA_PUBLIC,
                                 MBEDTLS_MD_SHA256, hash_size, hash_buf, sig);
  CHECK(err);

  err = 0;
exit:
  return err;
}

int rsa_random(void) {
  int err = 0;

  int alloc_buff_size = 1024 * 1024;
  unsigned char alloc_buff[alloc_buff_size];
  mbedtls_memory_buffer_alloc_init(alloc_buff, alloc_buff_size);

  uint32_t key_size = 1024;
  uint32_t byte_size = key_size / 8;

  uint8_t msg[32] = {1, 2, 3, 4};
  uint8_t sig[byte_size];
  mbedtls_rsa_context rsa;
  err = gen_rsa_key(key_size, &rsa);
  CHECK(err);

  err = rsa_sign(&rsa, msg, sizeof(msg), sig);
  CHECK(err);

  err = rsa_verify(&rsa, msg, sizeof(msg), sig);
  CHECK(err);

  err = 0;
exit:
  if (err == CKB_SUCCESS) {
    mbedtls_printf("rsa_random() passed.\n");
  } else {
    mbedtls_printf("rsa_random() failed.\n");
  }
  return err;
}

void export_public_key(const mbedtls_rsa_context* rsa, RsaInfo* info) {
  mbedtls_mpi N, E;
  mbedtls_mpi_init(&N);
  mbedtls_mpi_init(&E);
  int ret = mbedtls_rsa_export(rsa, &N, NULL, NULL, NULL, &E);
  ASSERT(ret == 0);
  mbedtls_mpi_write_binary_le(&N, info->N, info->key_size / 8);
  mbedtls_mpi_write_binary_le(&E, (unsigned char*)&info->E, sizeof(info->E));
}

int rsa_sighash_random(void) {
  int err = 0;

  int alloc_buff_size = 1024 * 1024;
  unsigned char alloc_buff[alloc_buff_size];
  mbedtls_memory_buffer_alloc_init(alloc_buff, alloc_buff_size);

  uint32_t key_size = 1024;
  uint32_t byte_size = key_size / 8;

  uint8_t msg[32] = {1, 2, 3, 4};
  uint8_t sig[byte_size];
  mbedtls_rsa_context rsa;
  err = gen_rsa_key(key_size, &rsa);
  CHECK(err);

  err = rsa_sign(&rsa, msg, sizeof(msg), sig);
  CHECK(err);

  RsaInfo info;
  info.algorithm_id = CKB_VERIFY_RSA;
  info.key_size = key_size;
  export_public_key(&rsa, &info);

  uint8_t* ptr = get_rsa_signature(&info);
  memcpy(ptr, sig, sizeof(sig));

  uint8_t output[20];
  size_t output_len = 20;
  err = validate_signature(NULL, (uint8_t*)&info, sizeof(info), msg,
                           sizeof(msg), output, &output_len);
  CHECK(err);

  err = 0;
exit:
  if (err == CKB_SUCCESS) {
    mbedtls_printf("rsa_sighash_random() passed.\n");
  } else {
    mbedtls_printf("rsa_sighash_random() failed.\n");
  }
  return err;
}

int rsa_sighash_all(void) {
  int err = 0;
  uint8_t output[BLAKE160_SIZE];

  err = validate_rsa_sighash_all(output);
  CHECK2(err == ERROR_RSA_VERIFY_FAILED, err);

  err = 0;
exit:
  if (err == 0) {
    mbedtls_printf(
        "rsa_sighash_all() passed. (Ignore the failed messages above)\n");
  } else {
    mbedtls_printf("rsa_sighash_all() failed.\n");
  }
  return err;
}

int iso97962_test2(void) {
  int err = 0;
  const char* N_str =
      "9cf68418644a5418529373350bafd57ddbf5626527b95e8ea3217d8dac8fbcb7db107eda"
      "5e47979b7e4343ed6441950f7fbd921075579104ba081f1a9af950b4c0ee67c2eef2068d"
      "9fe2d9d0cfdcbb9be7066e19cc945600e9fd41fc50e771f437ce4bdde63e7acf2a828a4b"
      "f38b9f907a252b3dfef550919da1819033f9c619";
  const char* E_str = "10001";
  const char* msg_str = "B30D0D9FA0C8BBDF";
  const char* sig_str =
      "46E52F52599A97B7DBBB8BCDD3A3BE6857F4CEF41B0723BE9FBD404DCF471DFC00D2DBF2"
      "F5DA6A9B8C1A41893A569873CAD2E90EECEC84DEE85DCDE76041390D1E1328751F2832C8"
      "3699986744AF68087EFFB21CD9526317424C136911144AE31B00F1764F1C5CCD974D52F6"
      "278B029197C5746E62F67C544FA5C9B66E2A8AFB";
  const char* plaintext_str =
      "6A51762ED9802385DD5AE676C603778A037FFDCCD2BA92E32DD3AECE0C31AF76CFF88F75"
      "B257930255EA361218BEDCC4B1A96BBC9BCCF77BF6BA4B4A7F847F475F81C1FDD30C74B6"
      "AC97732C32D4B23C4BF8200270F5F15FED198E80AA5089807B9861E374D3871509C9965A"
      "AD886D9FB5A345873A4EB58EEFA5C35A4C3B55BC";

  mbedtls_rsa_context rsa;
  mbedtls_mpi N;
  mbedtls_mpi E;

  uint8_t msg[8];
  uint8_t sig[128];
  uint8_t block[128];
  uint32_t sig_len = 0;
  uint32_t msg_len = 0;
  uint8_t m1[128];
  uint32_t m1_len = 128;
  uint8_t full_msg[1024];
  uint8_t new_msg[1024];
  uint32_t new_msg_len = 1024;

  int alloc_buff_size = 1024 * 1024;
  unsigned char alloc_buff[alloc_buff_size];
  mbedtls_memory_buffer_alloc_init(alloc_buff, alloc_buff_size);

  mbedtls_mpi_init(&N);
  mbedtls_mpi_init(&E);

  mbedtls_mpi_read_string(&N, 16, N_str);
  mbedtls_mpi_read_string(&E, 16, E_str);
  mbedtls_rsa_init(&rsa, MBEDTLS_RSA_PKCS_V15, 0);
  mbedtls_rsa_import(&rsa, &N, NULL, NULL, NULL, &E);

  sig_len = read_string(sig_str, sig, sizeof(sig));
  ASSERT(sig_len == 128);
  msg_len = read_string(msg_str, msg, sizeof(msg));
  ASSERT(msg_len == 8);

  err = mbedtls_rsa_public(&rsa, sig, block);
  CHECK(err);

  ISO97962Encoding enc = {0};
  iso97962_init(&enc, 1024, MBEDTLS_MD_SHA1, false);
  err = iso97962_verify(&enc, block, sizeof(block), msg, msg_len, m1, &m1_len);
  CHECK2(err == 0 || err == ERROR_ISO97962_MISMATCH_HASH,
         ERROR_ISO97962_INVALID_ARG9);

  memcpy(full_msg, m1, m1_len);
  memcpy(full_msg + m1_len, msg, sizeof(msg));

  err = iso97962_verify(&enc, block, sizeof(block), full_msg,
                        m1_len + sizeof(msg), new_msg, &new_msg_len);
  CHECK(err);

  err = 0;
exit:
  if (err == 0) {
    mbedtls_printf("iso97962_test2() passed.\n");
  } else {
    mbedtls_printf("iso97962_test2() failed.\n");
  }
  return err;
}

int iso97962_test(void) {
  int err = 0;
  ISO97962Encoding enc = {0};
  iso97962_init(&enc, 1024, MBEDTLS_MD_SHA1, false);
  uint8_t msg[] = {1, 2, 3, 4, 5, 6, 7, 8};
  uint32_t msg_len = sizeof(msg);

  uint8_t block[128] = {0};
  err = iso97962_sign(&enc, msg, sizeof(msg), block, sizeof(block));
  CHECK(err);
  uint8_t new_msg[128];
  uint32_t new_msg_len = 128;
  err = iso97962_verify(&enc, block, sizeof(block), NULL, 0, new_msg,
                        &new_msg_len);
  CHECK(err);
  ASSERT(new_msg_len == msg_len);
  ASSERT(memcmp(msg, new_msg, msg_len) == 0);

  err = 0;
exit:
  if (err == 0) {
    mbedtls_printf("iso97962_test() passed.\n");
  } else {
    mbedtls_printf("iso97962_test() failed.\n");
  }
  return err;
}

int iso97962_test3(uint32_t key_size, const char* N_str, const char* E_str,
                   const char* msg_str, const char* sig_str) {
  int err = 0;

  mbedtls_mpi N;
  mbedtls_mpi E;

  uint8_t msg[4096];
  uint32_t msg_len = 0;

  uint8_t sig[4096];
  uint32_t sig_len = 0;

  uint8_t new_msg[1024];
  size_t new_msg_len = 1024;

  int alloc_buff_size = 1024 * 1024;
  unsigned char alloc_buff[alloc_buff_size];
  mbedtls_memory_buffer_alloc_init(alloc_buff, alloc_buff_size);

  mbedtls_mpi_init(&N);
  mbedtls_mpi_init(&E);
  mbedtls_mpi_read_string(&N, 16, N_str);
  mbedtls_mpi_read_string(&E, 16, E_str);

  sig_len = read_string(sig_str, sig, sizeof(sig));
  ASSERT(sig_len == key_size);
  msg_len = read_string(msg_str, msg, sizeof(msg));
  ASSERT(msg_len > 0 && msg_len < key_size);

  RsaInfo info;
  info.key_size = key_size * 8;  // in bit
  info.algorithm_id = CKB_VERIFY_ISO9796_2;
  mbedtls_mpi_write_binary_le(&N, (uint8_t*)info.N, key_size);
  mbedtls_mpi_write_binary_le(&E, (uint8_t*)&info.E, sizeof(info.E));

  ASSERT(sig_len == key_size);
  memcpy(info.sig, sig, sig_len);

  err = validate_signature(NULL, (uint8_t*)&info, sizeof(info), msg, msg_len,
                           new_msg, &new_msg_len);
  CHECK(err);

  err = 0;
exit:
  return err;
}

int main(int argc, const char* argv[]) {
  int err = 0;
  err = ecdsa_sighash_random();
  CHECK(err);

  err = rsa_random();
  CHECK(err);

  err = rsa_sighash_random();
  CHECK(err);

  err = rsa_sighash_all();
  CHECK(err);

  err = iso97962_test();
  CHECK(err);

  err = iso97962_test2();
  CHECK(err);

  // RSA public key, N
  const char* N_str =
      "9cf68418644a5418529373350bafd57ddbf5626527b95e8ea3217d8dac8fbcb7db107eda"
      "5e47979b7e4343ed6441950f7fbd921075579104ba081f1a9af950b4c0ee67c2eef2068d"
      "9fe2d9d0cfdcbb9be7066e19cc945600e9fd41fc50e771f437ce4bdde63e7acf2a828a4b"
      "f38b9f907a252b3dfef550919da1819033f9c619";
  // RSA public key, E, 65537
  const char* E_str = "10001";
  // input small message
  const char* msg_str = "B30D0D9FA0C8BBDF";
  // input signature
  const char* sig_str =
      "46E52F52599A97B7DBBB8BCDD3A3BE6857F4CEF41B0723BE9FBD404DCF471DFC00D2DBF2"
      "F5DA6A9B8C1A41893A569873CAD2E90EECEC84DEE85DCDE76041390D1E1328751F2832C8"
      "3699986744AF68087EFFB21CD9526317424C136911144AE31B00F1764F1C5CCD974D52F6"
      "278B029197C5746E62F67C544FA5C9B66E2A8AFB";
  err = iso97962_test3(128, N_str, E_str, msg_str, sig_str);
  CHECK(err);

  err = 0;
exit:
  return err;
}


================================================
File: scripts/find_clang
================================================
#!/usr/bin/env bash
#
# An utility script used to find a binary of clang 16+

if [[ -n "${CLANG}" ]]; then
  echo "${CLANG}"
  exit 0
fi

CANDIDATES=("clang" "clang-16" "clang-17")

BREW_PREFIX=$(brew --prefix 2> /dev/null)
if [[ -n "${BREW_PREFIX}" ]]; then
  CANDIDATES+=(
    "${BREW_PREFIX}/opt/llvm/bin/clang"
    "${BREW_PREFIX}/opt/llvm@16/bin/clang"
    "${BREW_PREFIX}/opt/llvm@17/bin/clang"
  )
fi

for candidate in ${CANDIDATES[@]}; do
  OUTPUT=$($candidate -dumpversion 2> /dev/null | cut -d'.' -f 1)

  if [[ $((OUTPUT)) -ge 16 ]]; then
    echo "$candidate"
    exit 0
  fi
done

>&2 echo "Cannot find clang of version 16+!"
exit 1


================================================
File: tests/Cargo.toml
================================================
[package]
name = "tests"
version = "0.1.0"
edition = "2021"

[dependencies]
ckb-testtool = "0.10.2"
serde_json = "1.0"

[dev-dependencies]
ckb-std = "0.15"
bitcoin = { version = "0.31", features = ["serde"] }
log = "0.4"
env_logger = "0.11"
walkdir = "2.4"

[dev-dependencies.ckb-bitcoin-spv-prover]
version = "0.1.0"
git = "https://github.com/ckb-cell/ckb-bitcoin-spv"
rev = "bfc71d7"

[dev-dependencies.ckb-bitcoin-spv-verifier]
version = "0.1.0"
git = "https://github.com/ckb-cell/ckb-bitcoin-spv"
rev = "bfc71d7"


================================================
File: tests/data/README.md
================================================
# CKB Bitcoin SPV Testdata

[![License]](#license)

Includes test data which are used for testing Bitcoin SPV. \
This repository is a part of [CKB Bitcoin SPV].

[License]: https://img.shields.io/badge/License-WTFPL-red.svg

## License

All data in this repository are collected from the Internet,
and they are under the [WTFPL License].

[CKB Bitcoin SPV]: https://github.com/ckb-cell/ckb-bitcoin-spv
[WTFPL License]: http://www.wtfpl.net/about/


================================================
File: tests/data/LICENSE
================================================
        DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                    Version 2, December 2004

 Copyright (C) 2024 Boyu Yang <yangby@cryptape.com>

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. You just DO WHAT THE FUCK YOU WANT TO.


================================================
File: tests/data/.git
================================================
gitdir: ../../.git/modules/tests/data


================================================
File: tests/data/main-chain/blocks/README.md
================================================
### Bitcoin Main Chain Blocks

- [Continuous Blocks](continuous)


================================================
File: tests/data/main-chain/blocks/continuous/README.md
================================================
### Continuous Blocks

The blocks, which in the current directory, are used for testing the bitcoin continuous blocks.


================================================
File: tests/data/main-chain/chainwork/README.md
================================================
### Bitcoin Main Chain Chainwork

Chainwork by block heights.


================================================
File: tests/data/main-chain/headers/README.md
================================================
### Bitcoin Main Chain Headers

- [Continuous Headers](continuous)

- [Stale Headers](stale)

- [Difficulty-Change Headers](diff-change)


================================================
File: tests/data/main-chain/headers/continuous/README.md
================================================
### Continuous Headers

The headers, which in the current directory, are used for testing the bitcoin continuous headers.

Let's denote the interval of Bitcoin difficulty change to be $I_{\mathnormal{change}}$ [^1],
then the height of the first header in each test case should be $k \cdot I_{\mathnormal{change}}$,
where $k \in \mathbb{Z}$.

[^1]: [How often does the network difficulty change?](https://en.bitcoin.it/wiki/Difficulty#How_often_does_the_network_difficulty_change.3F)


================================================
File: tests/data/main-chain/headers/diff-change/README.md
================================================
### Difficulty-Change Headers

The headers, which in the current directory, are used for testing the bitcoin difficulty change.

Let's denote the interval of Bitcoin difficulty change to be $I_{\mathnormal{change}}$ [^1],
then the heights of headers in the current directory should be $H = H_{first} \cup H_{last}$, where:

```math
H_{first} = \{\, k \cdot I_{\mathnormal{change}} \mid k \in \mathbb{Z}\,\}
```

```math
H_{last}  = \{\, k \cdot I_{\mathnormal{change}} - 1 \mid k \in \mathbb{N}\,\}
```

[^1]: [How often does the network difficulty change?](https://en.bitcoin.it/wiki/Difficulty#How_often_does_the_network_difficulty_change.3F)


================================================
File: tests/data/main-chain/headers/stale/README.md
================================================
### Stale Headers

The headers, which in the current directory, are used for testing the chain reorganizations.

#### Resources

- [Dataset of stale blocks observed on the Bitcoin network.](https://github.com/bitcoin-data/stale-blocks)


================================================
File: tests/data/main-chain/txoutproof/README.md
================================================
### Bitcoin Main Chain TxOut Proofs

The binary files, which in the current directory, are used for testing the bitcoin TxOut proofs.

The filename are format as `block_height || "-" || '_'.join(tx_indexes) `.


================================================
File: tests/src/lib.rs
================================================
use ckb_testtool::{
    ckb_error::Error,
    ckb_types::{
        bytes::Bytes,
        core::{Cycle, TransactionView},
    },
    context::Context,
};
use std::env;
use std::fs;
use std::path::PathBuf;
use std::str::FromStr;

#[cfg(test)]
mod contracts;
#[cfg(test)]
pub(crate) mod utilities;

pub mod prelude {
    use ckb_testtool::{
        ckb_error::Error,
        ckb_types::core::{Cycle, TransactionView},
    };

    pub const MAX_CYCLES: u64 = 10_000_000;
    pub const SPV_CELL_CAP: u64 = 500;
    pub const SPV_HEADERS_GROUP_SIZE: usize = 20; // Speed up to save time.

    // This helper method runs Context::verify_tx, but in case error happens,
    // it also dumps current transaction to failed_txs folder.
    pub trait ContextExt {
        fn should_be_passed(&self, tx: &TransactionView, max_cycles: u64) -> Result<Cycle, Error>;
        fn should_be_failed(&self, tx: &TransactionView, max_cycles: u64) -> Result<Cycle, Error>;
    }
}

// The exact same Loader code from capsule's template, except that
// now we use MODE as the environment variable
const TEST_ENV_VAR: &str = "MODE";

pub enum TestEnv {
    Debug,
    Release,
}

impl FromStr for TestEnv {
    type Err = &'static str;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s.to_lowercase().as_str() {
            "debug" => Ok(TestEnv::Debug),
            "release" => Ok(TestEnv::Release),
            _ => Err("no match"),
        }
    }
}

pub struct Loader(PathBuf);

impl Default for Loader {
    fn default() -> Self {
        let test_env = match env::var(TEST_ENV_VAR) {
            Ok(val) => val.parse().expect("test env"),
            Err(_) => TestEnv::Release,
        };
        Self::with_test_env(test_env)
    }
}

impl Loader {
    fn with_test_env(env: TestEnv) -> Self {
        let load_prefix = match env {
            TestEnv::Debug => "debug",
            TestEnv::Release => "release",
        };
        let mut base_path = match env::var("TOP") {
            Ok(val) => {
                let mut base_path: PathBuf = val.into();
                base_path.push("build");
                base_path
            }
            Err(_) => {
                let mut base_path = PathBuf::new();
                // cargo may use a different cwd when running tests, for example:
                // when running debug in vscode, it will use workspace root as cwd by default,
                // when running test by `cargo test`, it will use tests directory as cwd,
                // so we need a fallback path
                base_path.push("build");
                if !base_path.exists() {
                    base_path.pop();
                    base_path.push("..");
                    base_path.push("build");
                }
                base_path
            }
        };

        base_path.push(load_prefix);
        Loader(base_path)
    }

    pub fn load_binary(&self, name: &str) -> Bytes {
        let mut path = self.0.clone();
        path.push(name);
        let result = fs::read(&path);
        if result.is_err() {
            panic!("Binary {:?} is missing!", path);
        }
        result.unwrap().into()
    }
}

impl prelude::ContextExt for Context {
    fn should_be_passed(&self, tx: &TransactionView, max_cycles: u64) -> Result<Cycle, Error> {
        let result = self.verify_tx(tx, max_cycles);
        if let Err(err) = result {
            let mut path = env::current_dir().expect("current dir");
            path.push("failed_txs");
            std::fs::create_dir_all(&path).expect("create failed_txs dir");
            let mock_tx = self.dump_tx(tx).expect("dump failed tx");
            let json = serde_json::to_string_pretty(&mock_tx).expect("json");
            path.push(format!("0x{:x}.json", tx.hash()));
            println!("Failed tx written to {:?}", path);
            std::fs::write(path, json).expect("write");
            panic!("should be passed, but failed since {err}");
        }
        result
    }

    fn should_be_failed(&self, tx: &TransactionView, max_cycles: u64) -> Result<Cycle, Error> {
        let result = self.verify_tx(tx, max_cycles);
        if result.is_ok() {
            let mut path = env::current_dir().expect("current dir");
            path.push("failed_txs");
            std::fs::create_dir_all(&path).expect("create failed_txs dir");
            let mock_tx = self.dump_tx(tx).expect("dump failed tx");
            let json = serde_json::to_string_pretty(&mock_tx).expect("json");
            path.push(format!("0x{:x}.json", tx.hash()));
            println!("Failed tx written to {:?}", path);
            std::fs::write(path, json).expect("write");
            panic!("should be failed");
        }
        result
    }
}


================================================
File: tests/src/contracts/can_update_without_ownership_lock.rs
================================================
use ckb_testtool::{
    ckb_hash::blake2b_256,
    ckb_types::{bytes::Bytes, core::TransactionBuilder, packed::*, prelude::*},
    context::Context,
};

use crate::{prelude::*, utilities, Loader};

struct Case {
    inputs_capacity: Vec<u64>,
    outputs_capacity: Vec<u64>,
    unlocked: bool,
    should_pass: bool,
}

fn run_test(case: &Case) {
    utilities::setup();

    let loader = Loader::default();
    let mut context = Context::default();

    const PASSWORD: &[u8] = &[0x12, 0x34, 0x56, 0x78];

    // Deploy the lock script.
    let lock_script = {
        let lock_bin = loader.load_binary("can-update-without-ownership-lock");
        let lock_out_point = context.deploy_cell(lock_bin);
        let args = blake2b_256(PASSWORD);
        context
            .build_script(&lock_out_point, Default::default())
            .expect("script")
            .as_builder()
            .args((args[..]).pack())
            .build()
    };

    let inputs = case
        .inputs_capacity
        .iter()
        .map(|cap| {
            let output = CellOutput::new_builder()
                .capacity(cap.pack())
                .lock(lock_script.clone())
                .build();
            let out_point = context.create_cell(output, Bytes::new());
            CellInput::new_builder().previous_output(out_point).build()
        })
        .collect::<Vec<_>>();

    let outputs = case
        .outputs_capacity
        .iter()
        .map(|cap| {
            CellOutput::new_builder()
                .capacity(cap.pack())
                .lock(lock_script.clone())
                .build()
        })
        .collect::<Vec<_>>();
    let outputs_data = vec![Bytes::new(); outputs.len()];

    let tx_builder = TransactionBuilder::default()
        .inputs(inputs)
        .outputs(outputs)
        .outputs_data(outputs_data.pack());
    let tx = if case.unlocked {
        let witness = {
            let type_args = BytesOpt::new_builder()
                .set(Some(Pack::pack(PASSWORD)))
                .build();
            let witness_args = WitnessArgs::new_builder().lock(type_args).build();
            witness_args.as_bytes()
        };
        tx_builder.witness(witness.pack())
    } else {
        tx_builder
    }
    .build();
    let tx = context.complete_tx(tx);

    let inputs_total: u64 = case.inputs_capacity.iter().copied().sum();
    let outputs_total: u64 = case.outputs_capacity.iter().copied().sum();
    let expected_result = case.unlocked || inputs_total <= outputs_total;
    assert_eq!(case.should_pass, expected_result);
    if case.should_pass {
        let _ = context.should_be_passed(&tx, MAX_CYCLES);
    } else {
        let _ = context.should_be_failed(&tx, MAX_CYCLES);
    }
}

#[test]
fn unchanged_case_1() {
    let case = Case {
        inputs_capacity: vec![1000],
        outputs_capacity: vec![1000],
        unlocked: false,
        should_pass: true,
    };
    run_test(&case);
}

#[test]
fn unchanged_case_2() {
    let case = Case {
        inputs_capacity: vec![499, 501],
        outputs_capacity: vec![1000],
        unlocked: false,
        should_pass: true,
    };
    run_test(&case);
}

#[test]
fn unchanged_case_3() {
    let case = Case {
        inputs_capacity: vec![1000],
        outputs_capacity: vec![499, 501],
        unlocked: false,
        should_pass: true,
    };
    run_test(&case);
}

#[test]
fn increase_case_1() {
    let case = Case {
        inputs_capacity: vec![1000],
        outputs_capacity: vec![1001],
        unlocked: false,
        should_pass: true,
    };
    run_test(&case);
}

#[test]
fn increase_case_2() {
    let case = Case {
        inputs_capacity: vec![499, 501],
        outputs_capacity: vec![1001],
        unlocked: false,
        should_pass: true,
    };
    run_test(&case);
}

#[test]
fn increase_case_3() {
    let case = Case {
        inputs_capacity: vec![1000],
        outputs_capacity: vec![500, 501],
        unlocked: false,
        should_pass: true,
    };
    run_test(&case);
}

#[test]
fn decrease_case_1a() {
    let case = Case {
        inputs_capacity: vec![1000],
        outputs_capacity: vec![999],
        unlocked: false,
        should_pass: false,
    };
    run_test(&case);
}

#[test]
fn decrease_case_1b() {
    let case = Case {
        inputs_capacity: vec![1000],
        outputs_capacity: vec![999],
        unlocked: true,
        should_pass: true,
    };
    run_test(&case);
}

#[test]
fn decrease_case_2a() {
    let case = Case {
        inputs_capacity: vec![499, 501],
        outputs_capacity: vec![999],
        unlocked: false,
        should_pass: false,
    };
    run_test(&case);
}

#[test]
fn decrease_case_2b() {
    let case = Case {
        inputs_capacity: vec![499, 501],
        outputs_capacity: vec![999],
        unlocked: true,
        should_pass: true,
    };
    run_test(&case);
}

#[test]
fn decrease_case_3a() {
    let case = Case {
        inputs_capacity: vec![1000],
        outputs_capacity: vec![499, 500],
        unlocked: false,
        should_pass: false,
    };
    run_test(&case);
}

#[test]
fn decrease_case_3b() {
    let case = Case {
        inputs_capacity: vec![1000],
        outputs_capacity: vec![499, 500],
        unlocked: true,
        should_pass: true,
    };
    run_test(&case);
}


================================================
File: tests/src/contracts/mod.rs
================================================
mod can_update_without_ownership_lock;
mod ckb_bitcoin_spv_type_lock;


================================================
File: tests/src/contracts/ckb_bitcoin_spv_type_lock/create.rs
================================================
use ckb_bitcoin_spv_prover::DummyService;
use ckb_bitcoin_spv_verifier::types::{core, packed, prelude::Pack as VPack};
use ckb_testtool::{
    ckb_types::{bytes::Bytes, core::TransactionBuilder, packed::*, prelude::*},
    context::Context,
};

use crate::{prelude::*, utilities, Loader};

#[test]
fn normal_case_1() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 822528,
        clients_count: 3,
    };
    test_normal(case);
}

#[test]
fn normal_case_2() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 824544,
        clients_count: 5,
    };
    test_normal(case);
}

#[test]
fn normal_case_3() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 826560,
        clients_count: 10,
    };
    test_normal(case);
}

#[test]
fn normal_case_4() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 828576,
        clients_count: 20,
    };
    test_normal(case);
}

#[test]
fn normal_case_5() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 830592,
        clients_count: 30,
    };
    test_normal(case);
}

struct NormalCase<'a> {
    headers_path: &'a str,
    height: u32,
    clients_count: u8,
}

fn test_normal(case: NormalCase) {
    utilities::setup();

    let (service, bootstrap) = {
        let headers_path = format!("main-chain/headers/continuous/{}", case.headers_path);
        let filename = format!("{:07}.bin", case.height);

        let header_bin = utilities::find_bin_file(&headers_path, &filename);
        let header: core::Header = utilities::decode_from_bin_file(&header_bin).unwrap();

        log::trace!(
            "process header-{} from file {}",
            case.height,
            header_bin.display()
        );

        let bootstrap = packed::SpvBootstrap::new_builder()
            .height(VPack::pack(&case.height))
            .header(header.pack())
            .build();

        let service = DummyService::bootstrap(case.height, header).unwrap();
        (service, bootstrap)
    };

    let outputs_data = {
        let spv_info = packed::SpvInfo::new_builder().build();
        let mut outputs_data = vec![spv_info.as_bytes()];
        let mut client = service.tip_client();
        for id in 0..case.clients_count {
            client.id = id;
            let packed_client: packed::SpvClient = client.pack();
            outputs_data.push(packed_client.as_bytes());
        }
        outputs_data
    };

    let loader = Loader::default();
    let mut context = Context::default();

    let lock_script = {
        let bin = loader.load_binary("can-update-without-ownership-lock");
        let out_point = context.deploy_cell(bin);
        context
            .build_script(&out_point, Default::default())
            .expect("lock script")
            .as_builder()
            .args([0u8, 1, 2, 3].pack())
            .build()
    };

    let input = {
        let capacity = SPV_CELL_CAP * (u64::from(case.clients_count) + 1);
        let output = CellOutput::new_builder()
            .capacity(capacity.pack())
            .lock(lock_script.clone())
            .build();
        let out_point = context.create_cell(output, Bytes::new());
        CellInput::new_builder().previous_output(out_point).build()
    };

    let type_script = {
        let cells_count = usize::from(case.clients_count) + 1;
        let type_id_array = utilities::calculate_type_id(input.clone(), cells_count);
        let type_id = core::Hash::from_bytes_ref(&type_id_array);
        let args = packed::SpvTypeArgs::new_builder()
            .type_id(type_id.pack())
            .clients_count(case.clients_count.into())
            .build();
        let bin = loader.load_binary("ckb-bitcoin-spv-type-lock");
        let out_point = context.deploy_cell(bin);
        context
            .build_script(&out_point, Default::default())
            .expect("type script")
            .as_builder()
            .args(args.as_slice().pack())
            .build()
    };

    let outputs = {
        let spv_cell = CellOutput::new_builder()
            .capacity(SPV_CELL_CAP.pack())
            .lock(lock_script.clone())
            .type_(Some(type_script.clone()).pack())
            .build();
        vec![spv_cell.clone(); usize::from(case.clients_count) + 1]
    };

    let witness = {
        let type_args = BytesOpt::new_builder()
            .set(Some(Pack::pack(bootstrap.as_slice())))
            .build();
        let witness_args = WitnessArgs::new_builder().output_type(type_args).build();
        witness_args.as_bytes()
    };

    let tx = TransactionBuilder::default()
        .input(input)
        .outputs(outputs)
        .outputs_data(outputs_data.pack())
        .witness(Pack::pack(&witness))
        .build();
    let tx = context.complete_tx(tx);

    let _ = context.should_be_passed(&tx, MAX_CYCLES);
}


================================================
File: tests/src/contracts/ckb_bitcoin_spv_type_lock/destroy.rs
================================================
use ckb_bitcoin_spv_verifier::types::{core, packed, prelude::Pack as VPack};
use ckb_testtool::{
    ckb_types::{bytes::Bytes, core::TransactionBuilder, packed::*, prelude::*},
    context::Context,
};

use crate::{prelude::*, utilities, Loader};

#[test]
fn normal_case_1() {
    let case = NormalCase { clients_count: 3 };
    test_normal(case);
}

#[test]
fn normal_case_2() {
    let case = NormalCase { clients_count: 5 };
    test_normal(case);
}

#[test]
fn normal_case_3() {
    let case = NormalCase { clients_count: 10 };
    test_normal(case);
}

#[test]
fn normal_case_4() {
    let case = NormalCase { clients_count: 20 };
    test_normal(case);
}

#[test]
fn normal_case_5() {
    let case = NormalCase { clients_count: 30 };
    test_normal(case);
}

struct NormalCase {
    clients_count: u8,
}

fn test_normal(case: NormalCase) {
    utilities::setup();

    let loader = Loader::default();
    let mut context = Context::default();

    let lock_script = {
        let bin = loader.load_binary("can-update-without-ownership-lock");
        let out_point = context.deploy_cell(bin);
        context
            .build_script(&out_point, Default::default())
            .expect("lock script")
            .as_builder()
            .args([0u8, 1, 2, 3].pack())
            .build()
    };

    let cells_count = usize::from(case.clients_count) + 1;
    let capacity = SPV_CELL_CAP * (u64::from(case.clients_count) + 1);

    let type_script = {
        let original_input = {
            let output = CellOutput::new_builder()
                .capacity(capacity.pack())
                .lock(lock_script.clone())
                .build();
            let out_point = context.create_cell(output, Bytes::new());
            CellInput::new_builder().previous_output(out_point).build()
        };

        let type_id_array = utilities::calculate_type_id(original_input, cells_count);
        let type_id = core::Hash::from_bytes_ref(&type_id_array);
        let args = packed::SpvTypeArgs::new_builder()
            .type_id(type_id.pack())
            .clients_count(case.clients_count.into())
            .build();
        let bin = loader.load_binary("ckb-bitcoin-spv-type-lock");
        let out_point = context.deploy_cell(bin);
        context
            .build_script(&out_point, Default::default())
            .expect("type script")
            .as_builder()
            .args(args.as_slice().pack())
            .build()
    };

    let inputs = {
        let original_outputs = {
            let spv_cell = CellOutput::new_builder()
                .capacity(SPV_CELL_CAP.pack())
                .lock(lock_script.clone())
                .type_(Some(type_script.clone()).pack())
                .build();
            vec![spv_cell.clone(); usize::from(case.clients_count) + 1]
        };
        original_outputs
            .into_iter()
            .map(|output| {
                let out_point = context.create_cell(output, Bytes::new());
                CellInput::new_builder().previous_output(out_point).build()
            })
            .collect::<Vec<_>>()
    };

    let output = {
        CellOutput::new_builder()
            .capacity(capacity.pack())
            .lock(lock_script.clone())
            .build()
    };

    let tx = TransactionBuilder::default()
        .inputs(inputs)
        .output(output)
        .output_data(Vec::<u8>::default().pack())
        .build();
    let tx = context.complete_tx(tx);

    let _ = context.should_be_passed(&tx, MAX_CYCLES);
}


================================================
File: tests/src/contracts/ckb_bitcoin_spv_type_lock/mod.rs
================================================
mod create;
mod destroy;
mod reorg;
mod update;


================================================
File: tests/src/contracts/ckb_bitcoin_spv_type_lock/reorg.rs
================================================
use std::{cmp::Ordering, mem};

use ckb_bitcoin_spv_prover::DummyService;
use ckb_bitcoin_spv_verifier::types::{core, packed, prelude::Pack as VPack};
use ckb_testtool::{
    ckb_types::{
        bytes::Bytes,
        core::{DepType, TransactionBuilder},
        packed::*,
        prelude::*,
    },
    context::Context,
};

use crate::{prelude::*, utilities, Loader};

#[test]
fn normal_case_1() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        start_height: 822528,
        stale_height: 823226,
        clients_count: 5,
        stale_client_id: 1,
        reorg_clients_count: 3,
    };
    test_normal(case);
}

#[test]
fn normal_case_2() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        start_height: 828576,
        stale_height: 829613,
        clients_count: 20,
        stale_client_id: 1,
        reorg_clients_count: 12,
    };
    test_normal(case);
}

struct NormalCase<'a> {
    headers_path: &'a str,
    start_height: u32,
    stale_height: u32,
    clients_count: u8,
    stale_client_id: u8,
    reorg_clients_count: u8,
}

fn test_normal(case: NormalCase) {
    utilities::setup();

    let mut header_bins_iter = {
        let headers_path = format!("main-chain/headers/continuous/{}", case.headers_path);
        utilities::find_bin_files(&headers_path, "").into_iter()
    };

    let mut service = {
        let header = loop {
            let header_bin = header_bins_iter.next().unwrap();
            let height: u32 = header_bin
                .file_stem()
                .unwrap()
                .to_str()
                .unwrap()
                .parse()
                .unwrap();
            match height.cmp(&case.start_height) {
                Ordering::Equal => {
                    let header: core::Header =
                        utilities::decode_from_bin_file(&header_bin).unwrap();
                    break header;
                }
                Ordering::Greater => {
                    panic!("not enough headers");
                }
                Ordering::Less => {}
            }
        };

        DummyService::bootstrap(case.start_height, header).unwrap()
    };

    let loader = Loader::default();
    let mut context = Context::default();

    let lock_script = {
        let bin = loader.load_binary("can-update-without-ownership-lock");
        let out_point = context.deploy_cell(bin);
        context
            .build_script(&out_point, Default::default())
            .expect("lock script")
            .as_builder()
            .args([0u8, 1, 2, 3].pack())
            .build()
    };

    let type_script = {
        let cells_count = usize::from(case.clients_count) + 1;
        let capacity = SPV_CELL_CAP * (u64::from(case.clients_count) + 1);
        let original_input = {
            let output = CellOutput::new_builder()
                .capacity(capacity.pack())
                .lock(lock_script.clone())
                .build();
            let out_point = context.create_cell(output, Bytes::new());
            CellInput::new_builder().previous_output(out_point).build()
        };

        let type_id_array = utilities::calculate_type_id(original_input, cells_count);
        let type_id = core::Hash::from_bytes_ref(&type_id_array);
        let args = packed::SpvTypeArgs::new_builder()
            .type_id(type_id.pack())
            .clients_count(case.clients_count.into())
            .build();
        let bin = loader.load_binary("ckb-bitcoin-spv-type-lock");
        let out_point = context.deploy_cell(bin);
        context
            .build_script(&out_point, Default::default())
            .expect("type script")
            .as_builder()
            .args(args.as_slice().pack())
            .build()
    };

    let mut headers = Vec::new();

    // Stop at the parent block of the stale header.
    loop {
        let header_bin = header_bins_iter.next().unwrap();

        let header: core::Header = utilities::decode_from_bin_file(&header_bin).unwrap();
        let height: u32 = header_bin
            .file_stem()
            .unwrap()
            .to_str()
            .unwrap()
            .parse()
            .unwrap();
        log::trace!("process header-{height} from file {}", header_bin.display());

        headers.push(header);
        if height + 1 < case.stale_height && headers.len() < SPV_HEADERS_GROUP_SIZE {
            continue;
        }
        let _update = service.update(mem::take(&mut headers)).unwrap();
        if height + 1 >= case.stale_height {
            break;
        }
    }

    let stale_client = {
        let stale_header: core::Header = {
            let headers_path = "main-chain/headers/stale";
            let filename = format!("{:07}.bin", case.stale_height);
            let header_bin = utilities::find_bin_file(headers_path, &filename);
            log::trace!(
                "process stale header-{} from file {}",
                case.stale_height,
                header_bin.display()
            );
            utilities::decode_from_bin_file(&header_bin).unwrap()
        };
        headers.push(stale_header);
        let prev_client = service.tip_client();
        let _update = service.update(mem::take(&mut headers)).unwrap();
        let mut stale_client = service.tip_client();
        service.rollback_to(prev_client).unwrap();
        stale_client.id = case.stale_client_id;
        stale_client
    };

    log::trace!(
        "stale client id {}, reorg size {}",
        case.stale_client_id,
        case.reorg_clients_count
    );
    let (reorg_client_ids, new_tip_client_id) = {
        let mut reorg_client_ids = Vec::new();
        let mut reorg_client_id = case.stale_client_id;
        let mut new_tip_client_id = case.stale_client_id;
        for _ in 0..case.reorg_clients_count {
            reorg_client_ids.push(reorg_client_id);
            new_tip_client_id = reorg_client_id;
            reorg_client_id = utilities::prev_client_id(reorg_client_id, case.clients_count)
        }
        (reorg_client_ids, new_tip_client_id)
    };
    let cell_dep_client_id = utilities::prev_client_id(new_tip_client_id, case.clients_count);
    log::trace!("new tip client id will be {new_tip_client_id}");
    log::trace!("cell dep client id is {cell_dep_client_id}");
    log::trace!("reorg client ids are {:?}", reorg_client_ids);

    let input_spv_info = {
        let spv_info = packed::SpvInfo::new_builder()
            .tip_client_id(case.stale_client_id.into())
            .build();
        let output = CellOutput::new_builder()
            .capacity(SPV_CELL_CAP.pack())
            .lock(lock_script.clone())
            .type_(Some(type_script.clone()).pack())
            .build();
        let out_point = context.create_cell(output, spv_info.as_bytes());
        CellInput::new_builder().previous_output(out_point).build()
    };
    let cell_dep_spv_client = {
        let mut tip_spv_client = service.tip_client();
        tip_spv_client.id = cell_dep_client_id;
        let spv_client: packed::SpvClient = tip_spv_client.pack();
        let output = CellOutput::new_builder()
            .capacity(SPV_CELL_CAP.pack())
            .lock(lock_script.clone())
            .type_(Some(type_script.clone()).pack())
            .build();
        let out_point = context.create_cell(output, spv_client.as_bytes());
        CellDep::new_builder()
            .out_point(out_point)
            .dep_type(DepType::Code.into())
            .build()
    };

    let update = {
        for _ in 0..2 {
            let header_bin = header_bins_iter.next().unwrap();

            let header: core::Header = utilities::decode_from_bin_file(&header_bin).unwrap();
            let height: u32 = header_bin
                .file_stem()
                .unwrap()
                .to_str()
                .unwrap()
                .parse()
                .unwrap();
            log::trace!("process header-{height} from file {}", header_bin.display());

            headers.push(header);
        }

        service.update(mem::take(&mut headers)).unwrap()
    };

    let reorg_clients_count = usize::from(case.reorg_clients_count);

    let inputs = {
        let mut inputs = Vec::new();
        let mut spv_client = stale_client;
        inputs.push(input_spv_info);
        for i in &reorg_client_ids {
            spv_client.id = *i;
            let packed_spv_client = spv_client.pack();
            let output = CellOutput::new_builder()
                .capacity(SPV_CELL_CAP.pack())
                .lock(lock_script.clone())
                .type_(Some(type_script.clone()).pack())
                .build();
            let out_point = context.create_cell(output, packed_spv_client.as_bytes());
            let input_spv_client = CellInput::new_builder().previous_output(out_point).build();
            inputs.push(input_spv_client);
        }
        inputs
    };

    let outputs = {
        let output = CellOutput::new_builder()
            .capacity(SPV_CELL_CAP.pack())
            .lock(lock_script.clone())
            .type_(Some(type_script.clone()).pack())
            .build();
        vec![output; reorg_clients_count + 1]
    };

    let outputs_data = {
        let mut outputs_data = Vec::new();
        let output_spv_info = packed::SpvInfo::new_builder()
            .tip_client_id(new_tip_client_id.into())
            .build();
        outputs_data.push(output_spv_info.as_slice().pack());
        let mut spv_client = service.tip_client();
        for i in &reorg_client_ids {
            spv_client.id = *i;
            let packed_spv_client = spv_client.pack();
            outputs_data.push(packed_spv_client.as_slice().pack());
        }
        outputs_data
    };

    let witnesses = {
        let mut witnesses = vec![Default::default(); reorg_clients_count + 1];
        let witness_spv_client = {
            let type_args = BytesOpt::new_builder()
                .set(Some(Pack::pack(update.as_slice())))
                .build();
            let witness_args = WitnessArgs::new_builder().output_type(type_args).build();
            witness_args.as_slice().pack()
        };
        witnesses[0] = witness_spv_client;
        witnesses
    };

    let tx = TransactionBuilder::default()
        .cell_dep(cell_dep_spv_client)
        .inputs(inputs)
        .outputs(outputs)
        .outputs_data(outputs_data)
        .witnesses(witnesses)
        .build();
    let tx = context.complete_tx(tx);

    let _ = context.should_be_passed(&tx, MAX_CYCLES);
}


================================================
File: tests/src/contracts/ckb_bitcoin_spv_type_lock/update.rs
================================================
use std::{cmp::Ordering, mem};

use ckb_bitcoin_spv_prover::DummyService;
use ckb_bitcoin_spv_verifier::types::{core, packed, prelude::Pack as VPack};
use ckb_testtool::{
    ckb_types::{
        bytes::Bytes,
        core::{DepType, TransactionBuilder},
        packed::*,
        prelude::*,
    },
    context::Context,
};

use crate::{prelude::*, utilities, Loader};

#[test]
fn normal_case_1() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 828576,
        clients_count: 3,
        headers_group_size: 1,
    };
    test_normal(case);
}

#[test]
fn normal_case_2() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 826560,
        clients_count: 5,
        headers_group_size: 2,
    };
    test_normal(case);
}

#[test]
fn normal_case_3() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 824544,
        clients_count: 10,
        headers_group_size: 5,
    };
    test_normal(case);
}

#[test]
fn normal_case_4() {
    let case = NormalCase {
        headers_path: "case-0822528_0830592",
        height: 822528,
        clients_count: 20,
        headers_group_size: 10,
    };
    test_normal(case);
}

struct NormalCase<'a> {
    headers_path: &'a str,
    height: u32,
    clients_count: u8,
    headers_group_size: usize,
}

fn test_normal(case: NormalCase) {
    utilities::setup();

    let mut header_bins_iter = {
        let headers_path = format!("main-chain/headers/continuous/{}", case.headers_path);
        utilities::find_bin_files(&headers_path, "").into_iter()
    };

    let mut service = {
        let header = loop {
            let header_bin = header_bins_iter.next().unwrap();
            let height: u32 = header_bin
                .file_stem()
                .unwrap()
                .to_str()
                .unwrap()
                .parse()
                .unwrap();
            match height.cmp(&case.height) {
                Ordering::Equal => {
                    let header: core::Header =
                        utilities::decode_from_bin_file(&header_bin).unwrap();
                    break header;
                }
                Ordering::Greater => {
                    panic!("not enough headers");
                }
                Ordering::Less => {}
            }
        };

        DummyService::bootstrap(case.height, header).unwrap()
    };

    let loader = Loader::default();
    let mut context = Context::default();

    let lock_script = {
        let bin = loader.load_binary("can-update-without-ownership-lock");
        let out_point = context.deploy_cell(bin);
        context
            .build_script(&out_point, Default::default())
            .expect("lock script")
            .as_builder()
            .args([0u8, 1, 2, 3].pack())
            .build()
    };

    let type_script = {
        let cells_count = usize::from(case.clients_count) + 1;
        let capacity = SPV_CELL_CAP * (u64::from(case.clients_count) + 1);
        let original_input = {
            let output = CellOutput::new_builder()
                .capacity(capacity.pack())
                .lock(lock_script.clone())
                .build();
            let out_point = context.create_cell(output, Bytes::new());
            CellInput::new_builder().previous_output(out_point).build()
        };

        let type_id_array = utilities::calculate_type_id(original_input, cells_count);
        let type_id = core::Hash::from_bytes_ref(&type_id_array);
        let args = packed::SpvTypeArgs::new_builder()
            .type_id(type_id.pack())
            .clients_count(case.clients_count.into())
            .build();
        let bin = loader.load_binary("ckb-bitcoin-spv-type-lock");
        let out_point = context.deploy_cell(bin);
        context
            .build_script(&out_point, Default::default())
            .expect("type script")
            .as_builder()
            .args(args.as_slice().pack())
            .build()
    };

    let mut tip_client_id: u8 = 0;
    let mut headers = Vec::new();
    for header_bin in header_bins_iter {
        let header: core::Header = utilities::decode_from_bin_file(&header_bin).unwrap();
        let height: u32 = header_bin
            .file_stem()
            .unwrap()
            .to_str()
            .unwrap()
            .parse()
            .unwrap();
        log::trace!("process header-{height} from file {}", header_bin.display());

        headers.push(header);
        if headers.len() < case.headers_group_size {
            continue;
        }

        let input_spv_info = {
            let spv_info = packed::SpvInfo::new_builder()
                .tip_client_id(tip_client_id.into())
                .build();
            let output = CellOutput::new_builder()
                .capacity(SPV_CELL_CAP.pack())
                .lock(lock_script.clone())
                .type_(Some(type_script.clone()).pack())
                .build();
            let out_point = context.create_cell(output, spv_info.as_bytes());
            CellInput::new_builder().previous_output(out_point).build()
        };
        let cell_dep_spv_client = {
            let mut tip_spv_client = service.tip_client();
            tip_spv_client.id = tip_client_id;
            let spv_client: packed::SpvClient = tip_spv_client.pack();
            let output = CellOutput::new_builder()
                .capacity(SPV_CELL_CAP.pack())
                .lock(lock_script.clone())
                .type_(Some(type_script.clone()).pack())
                .build();
            let out_point = context.create_cell(output, spv_client.as_bytes());
            CellDep::new_builder()
                .out_point(out_point)
                .dep_type(DepType::Code.into())
                .build()
        };

        tip_client_id = utilities::next_client_id(tip_client_id, case.clients_count);

        let input_spv_client = {
            let spv_client = packed::SpvClient::new_builder()
                .id(tip_client_id.into())
                .build();
            let output = CellOutput::new_builder()
                .capacity(SPV_CELL_CAP.pack())
                .lock(lock_script.clone())
                .type_(Some(type_script.clone()).pack())
                .build();
            let out_point = context.create_cell(output, spv_client.as_bytes());
            CellInput::new_builder().previous_output(out_point).build()
        };

        let update = service.update(mem::take(&mut headers)).unwrap();

        let witness_spv_client = {
            let type_args = BytesOpt::new_builder()
                .set(Some(Pack::pack(update.as_slice())))
                .build();
            let witness_args = WitnessArgs::new_builder().output_type(type_args).build();
            witness_args.as_bytes()
        };

        let outputs = {
            let output = CellOutput::new_builder()
                .capacity(SPV_CELL_CAP.pack())
                .lock(lock_script.clone())
                .type_(Some(type_script.clone()).pack())
                .build();
            vec![output.clone(); 2]
        };

        let output_spv_info = packed::SpvInfo::new_builder()
            .tip_client_id(tip_client_id.into())
            .build();
        let output_spv_client: packed::SpvClient = {
            let mut tip_spv_client = service.tip_client();
            tip_spv_client.id = tip_client_id;
            tip_spv_client.pack()
        };

        let tx = TransactionBuilder::default()
            .cell_dep(cell_dep_spv_client)
            .inputs(vec![input_spv_info, input_spv_client])
            .outputs(outputs)
            .outputs_data([output_spv_info.as_bytes(), output_spv_client.as_bytes()].pack())
            .witness(Pack::pack(&witness_spv_client))
            .build();
        let tx = context.complete_tx(tx);

        let _ = context.should_be_passed(&tx, MAX_CYCLES);
    }
}


================================================
File: tests/src/utilities/data_helper.rs
================================================
use std::{
    path::{Path, PathBuf},
    sync::OnceLock,
};

use walkdir::WalkDir;

static ROOT: OnceLock<PathBuf> = OnceLock::new();

pub(crate) fn root() -> PathBuf {
    ROOT.get_or_init(|| {
        let manifest_dir = env!("CARGO_MANIFEST_DIR");
        let workspace_path = Path::new(manifest_dir)
            .parent()
            .expect("workspace directory should be the parent directory of `CARGO_MANIFEST_DIR`");
        workspace_path.join("tests/data")
    })
    .to_owned()
}

pub(crate) fn find_bin_files(in_dir: &str, filename_prefix: &str) -> Vec<PathBuf> {
    let paths = WalkDir::new(root().join(in_dir))
        .sort_by_file_name()
        .into_iter()
        .filter_map(|entry| entry.ok())
        .filter(check_entry::is_bin)
        .filter(check_entry::if_starts_with(filename_prefix))
        .map(|entry| entry.into_path())
        .collect::<Vec<_>>();
    assert!(!paths.is_empty());
    paths
}

pub(crate) fn find_bin_file(in_dir: &str, filename: &str) -> PathBuf {
    root().join(in_dir).join(filename)
}

mod check_entry {
    use walkdir::DirEntry;

    pub(super) fn is_bin(entry: &DirEntry) -> bool {
        entry
            .path()
            .extension()
            .map(|s| s.to_ascii_lowercase() == "bin")
            .unwrap_or(false)
    }

    pub(super) fn if_starts_with(prefix: &str) -> impl Fn(&DirEntry) -> bool + '_ {
        move |entry: &DirEntry| {
            entry
                .file_name()
                .to_str()
                .map(|s| s.starts_with(prefix))
                .unwrap_or(false)
        }
    }
}


================================================
File: tests/src/utilities/mod.rs
================================================
//! Utilities for tests only.

use env_logger::{Builder, Target};
use log::LevelFilter;

mod data_helper;
mod type_id;

pub(crate) use ckb_bitcoin_spv_prover::utilities::decode_from_bin_file;
pub(crate) use data_helper::{find_bin_file, find_bin_files};
pub(crate) use type_id::calculate_type_id;

pub(crate) fn setup() {
    let _ = Builder::new()
        .filter_module("tests", LevelFilter::Trace)
        .filter_module("ckb_bitcoin_spv", LevelFilter::Trace)
        .target(Target::Stdout)
        .is_test(true)
        .try_init();
    println!();
}

pub(crate) fn prev_client_id(current: u8, count: u8) -> u8 {
    if current == 0 {
        count - 1
    } else {
        current - 1
    }
}

pub(crate) fn next_client_id(current: u8, count: u8) -> u8 {
    if current + 1 < count {
        current + 1
    } else {
        0
    }
}


================================================
File: tests/src/utilities/type_id.rs
================================================
use ckb_testtool::{
    ckb_hash::{new_blake2b, BLAKE2B_LEN},
    ckb_types::{packed, prelude::*},
};

pub(crate) fn calculate_type_id(
    input: packed::CellInput,
    outputs_count: usize,
) -> [u8; BLAKE2B_LEN] {
    let mut blake2b = new_blake2b();
    blake2b.update(input.as_slice());
    blake2b.update(&(outputs_count as u64).to_le_bytes());
    let mut ret = [0; BLAKE2B_LEN];
    blake2b.finalize(&mut ret);
    ret
}


================================================
File: .github/workflows/checksum.yaml
================================================
name: Checksum

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  ubuntu-build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build binaries
      run: make docker-build
    - name: Checksum
      run: git diff --exit-code checksums.txt


================================================
File: .github/workflows/ci.yaml
================================================
name: CI
on:
  push:
    branches: [ master, production, develop, release/* ]
  pull_request:
    branches: [ master, production, release/* ]
defaults:
  run:
    shell: bash
env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: 1.76.0
jobs:
  rustfmt:
    name: Checks / Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        run: |
          rustup toolchain install ${{ env.RUST_TOOLCHAIN }} --profile minimal --component rustfmt
          rustup override set ${{ env.RUST_TOOLCHAIN }}
      - name: Format Check
        run: make fmt
  clippy:
    name: Checks / Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        run: |
          rustup toolchain install ${{ env.RUST_TOOLCHAIN }} --profile minimal --component clippy
          rustup override set ${{ env.RUST_TOOLCHAIN }}
      - name: Lint Check
        run: make clippy
  test:
    name: Tests / Build & Test
    needs: [ rustfmt, clippy ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
      fail-fast: true
      max-parallel: 3
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install LLVM on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 16
          rm llvm.sh
      - name: Install LLVM on macOS
        if: matrix.os == 'macos-latest'
        run: brew install llvm@16
      - name: Install LLVM on Windows
        if: matrix.os == 'windows-2019'
        shell: pwsh
        run: |
          iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
          scoop install llvm yasm
          echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install Rust Toolchain
        run: |
          rustup toolchain install ${{ env.RUST_TOOLCHAIN }} --profile minimal
          rustup override set ${{ env.RUST_TOOLCHAIN }}
          rustup target add riscv64imac-unknown-none-elf
      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest
      - name: Build
        run: make build
      - name: Unit Testing
        run: make test


