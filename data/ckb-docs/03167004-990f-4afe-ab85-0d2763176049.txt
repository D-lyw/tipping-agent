Directory structure:
└── utxostack-rgbpp-explorer/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE
    ├── devbox.json
    ├── devbox.lock
    ├── docker-compose-preview.yaml
    ├── docker-compose.yaml
    ├── docker-entrypoint.sh
    ├── package.json
    ├── pnpm-lock.yaml
    ├── pnpm-workspace.yaml
    ├── .dockerignore
    ├── backend/
    │   ├── README.md
    │   ├── nest-cli.json
    │   ├── package.json
    │   ├── redis-queue.conf
    │   ├── redis.conf
    │   ├── tsconfig.build.json
    │   ├── tsconfig.json
    │   ├── .env.example
    │   ├── .eslintrc.js
    │   ├── .gitignore
    │   ├── .prettierrc
    │   ├── prisma/
    │   │   ├── schema.prisma
    │   │   ├── seed.ts
    │   │   └── migrations/
    │   │       ├── migration_lock.toml
    │   │       ├── 20240903102843_init/
    │   │       │   └── migration.sql
    │   │       ├── 20240903102903_holders/
    │   │       │   └── migration.sql
    │   │       └── 20240916084317_transaction/
    │   │           └── migration.sql
    │   ├── scripts/
    │   │   └── migrate-and-seed.sh
    │   ├── src/
    │   │   ├── app.controller.ts
    │   │   ├── app.module.ts
    │   │   ├── bootstrap.service.ts
    │   │   ├── cluster.service.ts
    │   │   ├── config.ts
    │   │   ├── constants.ts
    │   │   ├── env.ts
    │   │   ├── instrument.ts
    │   │   ├── main.ts
    │   │   ├── schema.gql
    │   │   ├── common/
    │   │   │   ├── dataloader.ts
    │   │   │   ├── date.ts
    │   │   │   └── fee-rate.ts
    │   │   ├── core/
    │   │   │   ├── core.module.ts
    │   │   │   ├── core.service.ts
    │   │   │   ├── bitcoin-api/
    │   │   │   │   ├── bitcoin-api.health.ts
    │   │   │   │   ├── bitcoin-api.interface.ts
    │   │   │   │   ├── bitcoin-api.module.ts
    │   │   │   │   ├── bitcoin-api.schema.ts
    │   │   │   │   ├── bitcoin-api.service.ts
    │   │   │   │   └── provider/
    │   │   │   │       ├── electrs.service.ts
    │   │   │   │       └── mempool.service.ts
    │   │   │   ├── blockchain/
    │   │   │   │   ├── blockchain.factory.ts
    │   │   │   │   ├── blockchain.interface.ts
    │   │   │   │   ├── blockchain.module.ts
    │   │   │   │   └── blockchain.service.ts
    │   │   │   ├── ckb-explorer/
    │   │   │   │   ├── ckb-explorer.health.ts
    │   │   │   │   ├── ckb-explorer.interface.ts
    │   │   │   │   ├── ckb-explorer.module.ts
    │   │   │   │   └── ckb-explorer.service.ts
    │   │   │   ├── ckb-rpc/
    │   │   │   │   ├── ckb-rpc-websocket.service.ts
    │   │   │   │   ├── ckb-rpc.health.ts
    │   │   │   │   ├── ckb-rpc.interface.ts
    │   │   │   │   └── ckb-rpc.module.ts
    │   │   │   ├── database/
    │   │   │   │   ├── database.health.ts
    │   │   │   │   ├── database.module.ts
    │   │   │   │   └── prisma/
    │   │   │   │       ├── prisma.module.ts
    │   │   │   │       └── prisma.service.ts
    │   │   │   ├── health/
    │   │   │   │   ├── health.controller.ts
    │   │   │   │   └── health.module.ts
    │   │   │   └── indexer/
    │   │   │       ├── indexer.factory.ts
    │   │   │       ├── indexer.health.ts
    │   │   │       ├── indexer.module.ts
    │   │   │       ├── indexer.queue.ts
    │   │   │       ├── indexer.service.ts
    │   │   │       ├── flow/
    │   │   │       │   ├── assets.flow.ts
    │   │   │       │   └── transactions.flow.ts
    │   │   │       ├── processor/
    │   │   │       │   ├── assets.processor.ts
    │   │   │       │   ├── block-assets.processor.ts
    │   │   │       │   ├── block.processor.ts
    │   │   │       │   ├── lock.processor.ts
    │   │   │       │   ├── transaction.processor.ts
    │   │   │       │   └── type.processor.ts
    │   │   │       └── service/
    │   │   │           └── assets.service.ts
    │   │   ├── decorators/
    │   │   │   ├── cache-control.decorator.ts
    │   │   │   ├── cacheable.decorator.ts
    │   │   │   ├── parent-field.decorator.ts
    │   │   │   └── plimit.decorator.ts
    │   │   ├── filters/
    │   │   │   └── all-exceptions.filter.ts
    │   │   ├── middlewares/
    │   │   │   └── field-performance.middleware.ts
    │   │   ├── modules/
    │   │   │   ├── api.model.ts
    │   │   │   ├── api.module.ts
    │   │   │   ├── complexity.plugin.ts
    │   │   │   ├── logging.plugin.ts
    │   │   │   ├── bitcoin/
    │   │   │   │   ├── bitcoin.model.ts
    │   │   │   │   ├── bitcoin.module.ts
    │   │   │   │   ├── bitcoin.resolver.ts
    │   │   │   │   ├── address/
    │   │   │   │   │   ├── address.dataloader.ts
    │   │   │   │   │   ├── address.model.ts
    │   │   │   │   │   ├── address.module.ts
    │   │   │   │   │   └── address.resolver.ts
    │   │   │   │   ├── block/
    │   │   │   │   │   ├── block.model.ts
    │   │   │   │   │   ├── block.module.ts
    │   │   │   │   │   ├── block.resolver.ts
    │   │   │   │   │   └── dataloader/
    │   │   │   │   │       ├── base.ts
    │   │   │   │   │       ├── block-transactions.dataloader.ts
    │   │   │   │   │       ├── block-txids.dataloader.ts
    │   │   │   │   │       └── block.dataloader.ts
    │   │   │   │   ├── input/
    │   │   │   │   │   ├── input.model.ts
    │   │   │   │   │   ├── input.module.ts
    │   │   │   │   │   └── input.resolver.ts
    │   │   │   │   ├── output/
    │   │   │   │   │   ├── output.model.ts
    │   │   │   │   │   ├── output.module.ts
    │   │   │   │   │   └── output.resolver.ts
    │   │   │   │   └── transaction/
    │   │   │   │       ├── transaction.dataloader.ts
    │   │   │   │       ├── transaction.model.ts
    │   │   │   │       ├── transaction.module.ts
    │   │   │   │       └── transaction.resolver.ts
    │   │   │   ├── ckb/
    │   │   │   │   ├── ckb.model.ts
    │   │   │   │   ├── ckb.module.ts
    │   │   │   │   ├── ckb.resolver.ts
    │   │   │   │   ├── ckb.service.ts
    │   │   │   │   ├── address/
    │   │   │   │   │   ├── address.dataloader.ts
    │   │   │   │   │   ├── address.model.ts
    │   │   │   │   │   ├── address.module.ts
    │   │   │   │   │   └── address.resolver.ts
    │   │   │   │   ├── block/
    │   │   │   │   │   ├── block.dataloader.ts
    │   │   │   │   │   ├── block.model.ts
    │   │   │   │   │   ├── block.module.ts
    │   │   │   │   │   ├── block.resolver.ts
    │   │   │   │   │   └── block.service.ts
    │   │   │   │   ├── cell/
    │   │   │   │   │   ├── cell.model.ts
    │   │   │   │   │   ├── cell.module.ts
    │   │   │   │   │   ├── cell.resolver.ts
    │   │   │   │   │   └── cell.service.ts
    │   │   │   │   ├── script/
    │   │   │   │   │   ├── dob.service.ts
    │   │   │   │   │   ├── mnft.service.ts
    │   │   │   │   │   ├── script.model.ts
    │   │   │   │   │   ├── script.module.ts
    │   │   │   │   │   ├── script.resolver.ts
    │   │   │   │   │   ├── script.service.ts
    │   │   │   │   │   ├── sudt.service.ts
    │   │   │   │   │   ├── xudt.service.ts
    │   │   │   │   │   └── base/
    │   │   │   │   │       └── base-script.service.ts
    │   │   │   │   └── transaction/
    │   │   │   │       ├── transaction.dataloader.ts
    │   │   │   │       ├── transaction.model.ts
    │   │   │   │       ├── transaction.module.ts
    │   │   │   │       ├── transaction.resolver.ts
    │   │   │   │       └── transaction.service.ts
    │   │   │   ├── rgbpp/
    │   │   │   │   ├── rgbpp.module.ts
    │   │   │   │   ├── rgbpp.service.ts
    │   │   │   │   ├── address/
    │   │   │   │   │   ├── address.model.ts
    │   │   │   │   │   ├── address.module.ts
    │   │   │   │   │   ├── address.resolver.ts
    │   │   │   │   │   └── address.service.ts
    │   │   │   │   ├── asset/
    │   │   │   │   │   ├── asset.model.ts
    │   │   │   │   │   ├── asset.module.ts
    │   │   │   │   │   └── asset.resolver.ts
    │   │   │   │   ├── coin/
    │   │   │   │   │   ├── coin.dataloader.ts
    │   │   │   │   │   ├── coin.model.ts
    │   │   │   │   │   ├── coin.module.ts
    │   │   │   │   │   ├── coin.resolver.ts
    │   │   │   │   │   └── coin.service.ts
    │   │   │   │   ├── statistic/
    │   │   │   │   │   ├── statistic.model.ts
    │   │   │   │   │   ├── statistic.module.ts
    │   │   │   │   │   ├── statistic.resolver.ts
    │   │   │   │   │   └── statistic.service.ts
    │   │   │   │   └── transaction/
    │   │   │   │       ├── transaction.dataloader.ts
    │   │   │   │       ├── transaction.model.ts
    │   │   │   │       ├── transaction.module.ts
    │   │   │   │       ├── transaction.resolver.ts
    │   │   │   │       └── transaction.service.ts
    │   │   │   └── search/
    │   │   │       ├── search.model.ts
    │   │   │       ├── search.module.ts
    │   │   │       └── search.resolver.ts
    │   │   └── pipes/
    │   │       └── validate-address.pipe.ts
    │   ├── test/
    │   │   └── pipes/
    │   │       └── validate-address.pipe.test.ts
    │   └── .husky/
    │       └── pre-commit
    ├── frontend/
    │   ├── README.md
    │   ├── codegen.ts
    │   ├── cspell.json
    │   ├── lingui.config.mjs
    │   ├── next.config.mjs
    │   ├── package.json
    │   ├── panda.config.ts
    │   ├── park-ui.json
    │   ├── postcss.config.cjs
    │   ├── tsconfig.json
    │   ├── .eslintrc.json
    │   ├── .gitignore
    │   ├── .prettierrc
    │   ├── public/
    │   │   └── robots.txt
    │   └── src/
    │       ├── index.ts
    │       ├── middleware.ts
    │       ├── app/
    │       │   ├── error.tsx
    │       │   ├── layout.tsx
    │       │   ├── not-found.tsx
    │       │   └── [lang]/
    │       │       ├── LinguiClientProvider.tsx
    │       │       ├── appRouterI18n.ts
    │       │       ├── loading.tsx
    │       │       ├── page.tsx
    │       │       ├── address/
    │       │       │   └── [address]/
    │       │       │       ├── layout.tsx
    │       │       │       ├── loading.tsx
    │       │       │       ├── route.ts
    │       │       │       ├── assets/
    │       │       │       │   └── page.tsx
    │       │       │       └── transactions/
    │       │       │           ├── btc-tx-list.tsx
    │       │       │           ├── ckb-tx-list.tsx
    │       │       │           ├── loading.tsx
    │       │       │           ├── not-found.ts
    │       │       │           └── page.tsx
    │       │       ├── assets/
    │       │       │   ├── layout.tsx
    │       │       │   ├── loading.tsx
    │       │       │   ├── route.ts
    │       │       │   ├── coins/
    │       │       │   │   ├── loading.tsx
    │       │       │   │   ├── page.tsx
    │       │       │   │   └── [typeHash]/
    │       │       │   │       ├── layout.tsx
    │       │       │   │       ├── loading.tsx
    │       │       │   │       ├── route.ts
    │       │       │   │       ├── holders/
    │       │       │   │       │   └── page.tsx
    │       │       │   │       └── transactions/
    │       │       │   │           ├── loading.tsx
    │       │       │   │           └── page.tsx
    │       │       │   └── dobs/
    │       │       │       └── page.tsx
    │       │       ├── block/
    │       │       │   ├── btc/
    │       │       │   │   └── [hashOrHeight]/
    │       │       │   │       ├── layout.tsx
    │       │       │   │       ├── loading.tsx
    │       │       │   │       ├── route.ts
    │       │       │   │       └── transactions/
    │       │       │   │           ├── loading.tsx
    │       │       │   │           └── page.tsx
    │       │       │   └── ckb/
    │       │       │       └── [hashOrHeight]/
    │       │       │           ├── layout.tsx
    │       │       │           ├── loading.tsx
    │       │       │           ├── route.ts
    │       │       │           └── transactions/
    │       │       │               ├── loading.tsx
    │       │       │               └── page.tsx
    │       │       ├── explorer/
    │       │       │   ├── layout.tsx
    │       │       │   ├── loading.tsx
    │       │       │   ├── route.ts
    │       │       │   ├── btc/
    │       │       │   │   ├── info.tsx
    │       │       │   │   ├── loading.tsx
    │       │       │   │   └── page.tsx
    │       │       │   └── ckb/
    │       │       │       ├── info.tsx
    │       │       │       ├── loading.tsx
    │       │       │       └── page.tsx
    │       │       └── transaction/
    │       │           └── [tx]/
    │       │               ├── btc.tsx
    │       │               ├── ckb.tsx
    │       │               ├── loading.tsx
    │       │               └── page.tsx
    │       ├── assets/
    │       │   ├── chains/
    │       │   ├── social-medias/
    │       │   └── speed/
    │       ├── components/
    │       │   ├── ago-time-formatter.tsx
    │       │   ├── block-header.tsx
    │       │   ├── client-only.tsx
    │       │   ├── coin-list.tsx
    │       │   ├── coming-soon-text.tsx
    │       │   ├── coming-soon.tsx
    │       │   ├── copier.tsx
    │       │   ├── failed-fallback.tsx
    │       │   ├── footer.tsx
    │       │   ├── home-quick-info.tsx
    │       │   ├── home-title.tsx
    │       │   ├── if-breakpoint.tsx
    │       │   ├── if-pathname.tsx
    │       │   ├── infinite-list-bottom.tsx
    │       │   ├── intersection-observer.tsx
    │       │   ├── layer-type.tsx
    │       │   ├── link-tabs.tsx
    │       │   ├── loading.tsx
    │       │   ├── network-cards.tsx
    │       │   ├── network-switcher.tsx
    │       │   ├── no-data.tsx
    │       │   ├── overflow-amount.tsx
    │       │   ├── overview-info.tsx
    │       │   ├── pagination-searchparams.tsx
    │       │   ├── providers.tsx
    │       │   ├── search-bar.tsx
    │       │   ├── text-overflow-tooltip.tsx
    │       │   ├── time-formatter.tsx
    │       │   ├── transaction-header-in-address.tsx
    │       │   ├── transaction-header.tsx
    │       │   ├── utxo-or-cell-footer.tsx
    │       │   ├── view-ckb-explorer.tsx
    │       │   ├── view-mempool.tsx
    │       │   ├── btc/
    │       │   │   ├── btc-address-overview.tsx
    │       │   │   ├── btc-address-type.tsx
    │       │   │   ├── btc-block-overview.tsx
    │       │   │   ├── btc-diff-tags.tsx
    │       │   │   ├── btc-outputs-sum.tsx
    │       │   │   ├── btc-transaction-card-in-address.tsx
    │       │   │   ├── btc-transaction-card-with-query-in-address.tsx
    │       │   │   ├── btc-transaction-card-with-query-in-block.tsx
    │       │   │   ├── btc-transaction-in-view-query.tsx
    │       │   │   ├── btc-transaction-overview.tsx
    │       │   │   ├── btc-utxo-tables.tsx
    │       │   │   └── btc-utxos.tsx
    │       │   ├── ckb/
    │       │   │   ├── ckb-address-overview.tsx
    │       │   │   ├── ckb-block-overview.tsx
    │       │   │   ├── ckb-cell-tables.tsx
    │       │   │   ├── ckb-cells.tsx
    │       │   │   ├── ckb-diff-tags.tsx
    │       │   │   ├── ckb-outputs-sum.tsx
    │       │   │   ├── ckb-transaction-card-with-query-in-address.tsx
    │       │   │   ├── ckb-transaction-card-with-query-in-block.tsx
    │       │   │   ├── ckb-transaction-in-view-query.tsx
    │       │   │   ├── ckb-transaction-overview.tsx
    │       │   │   └── parse-rgbpp-lock-args.ts
    │       │   ├── explorer-tx-list/
    │       │   │   ├── index.tsx
    │       │   │   └── ui.tsx
    │       │   ├── latest-tx-list/
    │       │   │   ├── amount.tsx
    │       │   │   ├── index.tsx
    │       │   │   └── ui.tsx
    │       │   ├── navbar/
    │       │   │   └── index.tsx
    │       │   └── ui/
    │       │       ├── image.tsx
    │       │       ├── index.ts
    │       │       ├── link.tsx
    │       │       ├── number-input.tsx
    │       │       ├── pagination.tsx
    │       │       └── primitives/
    │       │           ├── button.tsx
    │       │           ├── heading.tsx
    │       │           ├── hover-card.tsx
    │       │           ├── icon-button.tsx
    │       │           ├── icon.tsx
    │       │           ├── index.ts
    │       │           ├── number-input.tsx
    │       │           ├── pagination.tsx
    │       │           ├── popover.tsx
    │       │           ├── skeleton.tsx
    │       │           ├── table.tsx
    │       │           ├── tabs.tsx
    │       │           ├── text.tsx
    │       │           └── tooltip.tsx
    │       ├── configs/
    │       │   ├── query-client.ts
    │       │   └── ui-preset/
    │       │       ├── button.ts
    │       │       ├── hover-card.ts
    │       │       ├── icon-button.ts
    │       │       ├── number-input.ts
    │       │       ├── pagination.ts
    │       │       ├── popover.ts
    │       │       ├── skeleton.ts
    │       │       ├── table.ts
    │       │       ├── tabs.ts
    │       │       └── tooltip.ts
    │       ├── constants/
    │       │   ├── env.ts
    │       │   ├── index.ts
    │       │   └── query-key.ts
    │       ├── gql/
    │       │   ├── fragment-masking.ts
    │       │   ├── gql.ts
    │       │   ├── graphql.ts
    │       │   └── index.ts
    │       ├── hooks/
    │       │   ├── useBreakpoints.ts
    │       │   └── useDetectOverflow.ts
    │       ├── lib/
    │       │   ├── create-style-context.tsx
    │       │   ├── deepmerge.ts
    │       │   ├── delay.ts
    │       │   ├── get-locale-from-headers.ts
    │       │   ├── get-pathname.ts
    │       │   ├── get-url.ts
    │       │   ├── graphql.ts
    │       │   ├── if-route-pathname.ts
    │       │   ├── iife.ts
    │       │   ├── parseURL.ts
    │       │   ├── resolve-cell-diff.ts
    │       │   ├── resolve-layer-type-from-rgbpp-transaction.ts
    │       │   ├── resolve-page.ts
    │       │   ├── resolve-rgbpp-tx-hash.ts
    │       │   ├── address/
    │       │   │   ├── format-ckb-address.ts
    │       │   │   └── format-ckb-tx-hash.ts
    │       │   ├── btc/
    │       │   │   ├── get-btc-address-type.ts
    │       │   │   ├── is-valid-btc-address.ts
    │       │   │   ├── resolve-btc-time.ts
    │       │   │   ├── resolve-mempool.ts
    │       │   │   └── sats-to-btc.ts
    │       │   ├── ckb/
    │       │   │   ├── is-rgbpp-lock-cell.ts
    │       │   │   ├── is-valid-ckb-address.ts
    │       │   │   ├── resolve-ckb-explorer-url.ts
    │       │   │   ├── script-to-address.ts
    │       │   │   └── shannon-to-ckb.ts
    │       │   ├── string/
    │       │   │   ├── format-number.ts
    │       │   │   └── truncate-middle.ts
    │       │   └── types/
    │       │       ├── BaseAppRouterProps.ts
    │       │       └── address.ts
    │       ├── locales/
    │       │   └── en/
    │       │       └── messages.po
    │       ├── styles/
    │       │   └── globals.css
    │       └── types/
    │           ├── graphql.ts
    │           ├── route.ts
    │           └── svgr.d.ts
    └── .github/
        ├── PULL_REQUEST_TEMPLATE.md
        └── workflows/
            ├── backend-deploy.yml
            ├── backend-test.yml
            ├── frontend-lint.yml
            └── frontend-spell-check.yml

================================================
File: README.md
================================================
<p align="center"><a href="https://explorer.rgbpp.io" target="_blank" rel="noopener noreferrer"><img height="60px" src="https://explorer.rgbpp.io/logo.svg" alt="rgb++ explorer logo"></a></p>

<h1 align="center">RGB++ Explorer</h1>

RGB++ Explorer is a RGB++ protocol blockchain explorer built with Next.js and Nest.JS and includes two parts: [Frontend](./frontend) and [Backend](./backend).

See live at RGB++ Explorer [mainnet](https://explorer.rgbpp.io) and [testnet](https://testnet.explorer.rgbpp.io).

## About [RGB++](https://www.rgbppfans.com/)
RGB++ is an extension protocol based on RGB that utilizes single-use seals and client-side verification techniques to manage state changes and transaction validation. It maps Bitcoin UTXOs to Nervos CKB cells through isomorphic binding and leverages script constraints on both the CKB and Bitcoin chains to verify the correctness of state calculations and the validity of ownership transfers.

RGB++ addresses the technical challenges of the original RGB protocol in real-world applications and offers additional possibilities, such as blockchain-enhanced client-side verification, transaction folding, shared state across contracts, and non-interactive transfers. It brings Turing-complete contract scalability and performance enhancements to Bitcoin without the need for cross-chain interactions and without compromising security.



================================================
File: Dockerfile
================================================
ARG NODE_VERSION=20

FROM node:${NODE_VERSION} AS base
ARG GIT_BRANCH

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

RUN apt-get update && apt-get install -y --no-install-recommends git
RUN corepack enable
COPY . /app
WORKDIR /app

FROM base AS prod-deps
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile --ignore-scripts
RUN pnpm run --filter backend postinstall

FROM base AS build
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm run --filter backend build

FROM base
ENV NODE_ENV production
ENV GIT_BRANCH=${GIT_BRANCH}

COPY --from=prod-deps /app/node_modules node_modules
COPY --from=prod-deps /app/package*.json .
COPY --from=prod-deps /app/backend/node_modules ./backend/node_modules
COPY --from=prod-deps /app/backend/package*.json ./backend
COPY --from=build /app/backend/dist ./backend/dist

COPY backend/scripts/migrate-and-seed.sh ./backend/scripts/migrate-and-seed.sh
RUN chmod +x ./backend/scripts/migrate-and-seed.sh

COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

EXPOSE 3000
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["node", "backend/dist/src/main.js"]


================================================
File: LICENSE
================================================
ISC License

Copyright (c) 2024 CELL Studio

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.


================================================
File: devbox.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/jetify-com/devbox/0.11.0/.schema/devbox.schema.json",
  "packages": ["nodejs@latest", "postgresql@latest", "redis@latest"],
  "env": {
    "DEVBOX_COREPACK_ENABLED": "true"
  },
  "shell": {
    "init_hook": ["echo 'Welcome to devbox!' > /dev/null"],
    "scripts": {
      "test": ["echo \"Error: no test specified\" && exit 1"]
    }
  }
}


================================================
File: devbox.lock
================================================
{
  "lockfile_version": "1",
  "packages": {
    "nodejs@latest": {
      "last_modified": "2024-07-07T16:08:25Z",
      "plugin_version": "0.0.2",
      "resolved": "github:NixOS/nixpkgs/ab82a9612aa45284d4adf69ee81871a389669a9e#nodejs_22",
      "source": "devbox-search",
      "version": "22.3.0",
      "systems": {
        "aarch64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/xfiwgna8wavxj8wzfn5ihp9kxdvcrphq-nodejs-22.3.0",
              "default": true
            },
            {
              "name": "libv8",
              "path": "/nix/store/hn3z99jhkx7llshh1v0qmlfmnis144k1-nodejs-22.3.0-libv8"
            }
          ],
          "store_path": "/nix/store/xfiwgna8wavxj8wzfn5ihp9kxdvcrphq-nodejs-22.3.0"
        },
        "aarch64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/q7cgrvb6clq0pdp5hlwmq2lldzkl3fmj-nodejs-22.3.0",
              "default": true
            },
            {
              "name": "libv8",
              "path": "/nix/store/5df5695winsxzf80q6z0m35zy3p60yw1-nodejs-22.3.0-libv8"
            }
          ],
          "store_path": "/nix/store/q7cgrvb6clq0pdp5hlwmq2lldzkl3fmj-nodejs-22.3.0"
        },
        "x86_64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/3cqbw1xcmc0xml8s3ys7jviaxvqyjldy-nodejs-22.3.0",
              "default": true
            },
            {
              "name": "libv8",
              "path": "/nix/store/zk7izr97gl525arvyi4mfwxnhx5wl7hx-nodejs-22.3.0-libv8"
            }
          ],
          "store_path": "/nix/store/3cqbw1xcmc0xml8s3ys7jviaxvqyjldy-nodejs-22.3.0"
        },
        "x86_64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/bmvx7ww7qfksjqsckmivkg3mqvjscfh8-nodejs-22.3.0",
              "default": true
            },
            {
              "name": "libv8",
              "path": "/nix/store/w28gijyq24mmk1676gpbxw2xrkysxx1i-nodejs-22.3.0-libv8"
            }
          ],
          "store_path": "/nix/store/bmvx7ww7qfksjqsckmivkg3mqvjscfh8-nodejs-22.3.0"
        }
      }
    },
    "postgresql@latest": {
      "last_modified": "2024-07-07T16:08:25Z",
      "plugin_version": "0.0.2",
      "resolved": "github:NixOS/nixpkgs/ab82a9612aa45284d4adf69ee81871a389669a9e#postgresql",
      "source": "devbox-search",
      "version": "15.7",
      "systems": {
        "aarch64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/g709813dxhgyjwsz4zwqyqb2fxvz9n1l-postgresql-15.7",
              "default": true
            },
            {
              "name": "man",
              "path": "/nix/store/yww09ykk70wjm4ay43yh350zd77i3522-postgresql-15.7-man",
              "default": true
            },
            {
              "name": "doc",
              "path": "/nix/store/4mdg50lfjh1dancf2w9aqjl3fjg1w5wv-postgresql-15.7-doc"
            },
            {
              "name": "lib",
              "path": "/nix/store/7hmvsyvcqrr46v5440c5k137qc4vwz73-postgresql-15.7-lib"
            }
          ],
          "store_path": "/nix/store/g709813dxhgyjwsz4zwqyqb2fxvz9n1l-postgresql-15.7"
        },
        "aarch64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/ggj83wgyjarkcxn99igsband7rq4bnaq-postgresql-15.7",
              "default": true
            },
            {
              "name": "man",
              "path": "/nix/store/ri1fbcw75xj3zp5yp8dknxw484b7fzp5-postgresql-15.7-man",
              "default": true
            },
            {
              "name": "lib",
              "path": "/nix/store/zir7zh3j79fd80zwxkcn6y29aps437dc-postgresql-15.7-lib"
            },
            {
              "name": "debug",
              "path": "/nix/store/z2cnvgq78rallhc03p8wy9zdqq7fpsr2-postgresql-15.7-debug"
            },
            {
              "name": "doc",
              "path": "/nix/store/naz9z3jj54lad70lkq8zkwdk59m3vm52-postgresql-15.7-doc"
            }
          ],
          "store_path": "/nix/store/ggj83wgyjarkcxn99igsband7rq4bnaq-postgresql-15.7"
        },
        "x86_64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/qvhjnll3n3d1va7rxlh1yd348gqwy4v1-postgresql-15.7",
              "default": true
            },
            {
              "name": "man",
              "path": "/nix/store/5mmzk97ppd9b6m2239b4xkwc853116mf-postgresql-15.7-man",
              "default": true
            },
            {
              "name": "doc",
              "path": "/nix/store/jwp1aqs6fkbygfg9gpcx99lhc2dlalgc-postgresql-15.7-doc"
            },
            {
              "name": "lib",
              "path": "/nix/store/sngcqjdypd1bwxz6rs3hwy8jbjb9k690-postgresql-15.7-lib"
            }
          ],
          "store_path": "/nix/store/qvhjnll3n3d1va7rxlh1yd348gqwy4v1-postgresql-15.7"
        },
        "x86_64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/y20f3ng0g3qyvxdnrh6pj05a9gg1vhzc-postgresql-15.7",
              "default": true
            },
            {
              "name": "man",
              "path": "/nix/store/i2dxiiwv6a38azq2bacb4mk7ir4bsxk6-postgresql-15.7-man",
              "default": true
            },
            {
              "name": "debug",
              "path": "/nix/store/4qnj6h95q6akmag8risjilrw5h7vxw8y-postgresql-15.7-debug"
            },
            {
              "name": "doc",
              "path": "/nix/store/bwfx3pfc2s5hjwjzq581i0f70y7fbs8s-postgresql-15.7-doc"
            },
            {
              "name": "lib",
              "path": "/nix/store/3hd8s5jhwqcxz8h8i57w8n7ka85k4g4x-postgresql-15.7-lib"
            }
          ],
          "store_path": "/nix/store/y20f3ng0g3qyvxdnrh6pj05a9gg1vhzc-postgresql-15.7"
        }
      }
    },
    "redis@latest": {
      "last_modified": "2024-07-07T16:08:25Z",
      "plugin_version": "0.0.2",
      "resolved": "github:NixOS/nixpkgs/ab82a9612aa45284d4adf69ee81871a389669a9e#redis",
      "source": "devbox-search",
      "version": "7.2.5",
      "systems": {
        "aarch64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/r25wa9rba51wgaam4cpsfkrw7w04j06s-redis-7.2.5",
              "default": true
            }
          ],
          "store_path": "/nix/store/r25wa9rba51wgaam4cpsfkrw7w04j06s-redis-7.2.5"
        },
        "aarch64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/dh8rdvd9r2az0hcl2iksz3nix7msq11b-redis-7.2.5",
              "default": true
            }
          ],
          "store_path": "/nix/store/dh8rdvd9r2az0hcl2iksz3nix7msq11b-redis-7.2.5"
        },
        "x86_64-darwin": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/l5z6yq56lc1rl5chbjxh4y3521qsby5x-redis-7.2.5",
              "default": true
            }
          ],
          "store_path": "/nix/store/l5z6yq56lc1rl5chbjxh4y3521qsby5x-redis-7.2.5"
        },
        "x86_64-linux": {
          "outputs": [
            {
              "name": "out",
              "path": "/nix/store/n63288jr0baik4d379f44vcjlk4ng2w1-redis-7.2.5",
              "default": true
            }
          ],
          "store_path": "/nix/store/n63288jr0baik4d379f44vcjlk4ng2w1-redis-7.2.5"
        }
      }
    }
  }
}


================================================
File: docker-compose-preview.yaml
================================================
services:
  preview-explorer-backend:
    depends_on:
      preview-redis-cache:
        condition: service_started
      preview-redis-queue:
        condition: service_started
      preview-postgres:
        condition: service_healthy
    restart: unless-stopped
    build:
      context: .
      args:
        - GIT_BRANCH=${GIT_BRANCH}
    env_file:
      - ./backend/.env
    deploy:
      resources:
        limits:
          memory: 2048M
    networks:
      - preview

  preview-redis-cache:
    # https://github.com/docker-library/redis/blob/b77450d/7.4/alpine/Dockerfile
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      # Redis' WORKDIR is /data
      - preview-redis-cache-data:/data
      - ./backend/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: /usr/local/etc/redis/redis.conf
    networks:
      - preview


  preview-redis-queue:
    # https://github.com/docker-library/redis/blob/b77450d/7.4/alpine/Dockerfile
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      # Redis' WORKDIR is /data
      - preview-redis-queue-data:/data
      - ./backend/redis-queue.conf:/usr/local/etc/redis/redis.conf:ro
    command: /usr/local/etc/redis/redis.conf
    networks:
      - preview

  preview-postgres:
    image: postgres:13
    env_file:
      # Need POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB to be set in .env
      - ./backend/.env
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - preview-pg-volume:/var/lib/postgresql/data
    networks:
      - preview

volumes:
  preview-redis-cache-data:
  preview-redis-queue-data:
  preview-pg-volume:

networks:
  preview:
    driver: bridge


================================================
File: docker-compose.yaml
================================================
services:
  explorer-backend:
    restart: unless-stopped
    build:
      context: .
      args:
        - GIT_BRANCH=${GIT_BRANCH}
    ports:
      - '3000:3000'
    depends_on:
      redis-cache:
        condition: service_started
      redis-queue:
        condition: service_started
      postgres:
        condition: service_healthy
    env_file:
      - ./backend/.env
    deploy:
      resources:
        limits:
          memory: 4096M
    networks:
      - internal

  redis-cache:
    # https://github.com/docker-library/redis/blob/b77450d/7.4/alpine/Dockerfile
    image: redis:7-alpine
    restart: unless-stopped
    command: /usr/local/etc/redis/redis.conf
    volumes:
      # Redis' WORKDIR is /data
      - redis-cache-data:/data
      - ./backend/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - internal

  redis-queue:
    # https://github.com/docker-library/redis/blob/b77450d/7.4/alpine/Dockerfile
    image: redis:7-alpine
    restart: unless-stopped
    command: /usr/local/etc/redis/redis.conf
    volumes:
      # Redis' WORKDIR is /data
      - redis-queue-data:/data
      - ./backend/redis-queue.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - internal

  postgres:
    image: postgres:13
    env_file:
      # Need POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB to be set in .env
      - ./backend/.env
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    networks:
      - internal

volumes:
  redis-cache-data:
  redis-queue-data:
  postgres_volume:

networks:
  internal:
    driver: bridge


================================================
File: docker-entrypoint.sh
================================================
#!/bin/sh
set -e

# Run migrations and seed
./backend/scripts/migrate-and-seed.sh

# Then exec the container's main process (what's set as CMD in the Dockerfile)
exec "$@"


================================================
File: package.json
================================================
{
  "name": "utxo-stack-explorer",
  "license": "ISC",
  "packageManager": "pnpm@9.4.0+sha512.f549b8a52c9d2b8536762f99c0722205efc5af913e77835dbccc3b0b0b2ca9e7dc8022b78062c17291c48e88749c70ce88eb5a74f1fa8c4bf5e18bb46c8bd83a"
}


================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .: {}

  backend:
    dependencies:
      '@apollo/server':
        specifier: ^4.11.0
        version: 4.11.0(graphql@16.9.0)
      '@apollo/server-plugin-response-cache':
        specifier: ^4.1.3
        version: 4.1.3(@apollo/server@4.11.0(graphql@16.9.0))(graphql@16.9.0)
      '@as-integrations/fastify':
        specifier: ^2.1.1
        version: 2.1.1(@apollo/server@4.11.0(graphql@16.9.0))(fastify@4.28.1)
      '@cell-studio/mempool.js':
        specifier: ^2.5.3
        version: 2.5.3(bufferutil@4.0.8)(utf-8-validate@5.0.10)
      '@ckb-lumos/bi':
        specifier: ^0.23.0
        version: 0.23.0
      '@ckb-lumos/lumos':
        specifier: ^0.23.0
        version: 0.23.0
      '@ckb-lumos/rpc':
        specifier: ^0.23.0
        version: 0.23.0
      '@nest-lab/throttler-storage-redis':
        specifier: ^1.0.0
        version: 1.0.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/throttler@6.2.1(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2))(ioredis@5.4.1)(reflect-metadata@0.2.2)
      '@nestjs/apollo':
        specifier: ^12.2.0
        version: 12.2.0(@apollo/server@4.11.0(graphql@16.9.0))(@as-integrations/fastify@2.1.1(@apollo/server@4.11.0(graphql@16.9.0))(fastify@4.28.1))(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/graphql@12.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(bufferutil@4.0.8)(graphql@16.9.0)(reflect-metadata@0.2.2)(ts-morph@21.0.1)(utf-8-validate@5.0.10))(graphql@16.9.0)
      '@nestjs/axios':
        specifier: ^3.0.2
        version: 3.0.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(axios@1.7.2)(rxjs@7.8.1)
      '@nestjs/bullmq':
        specifier: ^10.2.0
        version: 10.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(bullmq@5.12.0)
      '@nestjs/cache-manager':
        specifier: ^2.2.2
        version: 2.2.2(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(cache-manager@5.7.4)(rxjs@7.8.1)
      '@nestjs/common':
        specifier: ^10.0.0
        version: 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/config':
        specifier: ^3.2.3
        version: 3.2.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(rxjs@7.8.1)
      '@nestjs/core':
        specifier: ^10.0.0
        version: 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/event-emitter':
        specifier: ^2.0.4
        version: 2.0.4(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))
      '@nestjs/graphql':
        specifier: ^12.2.0
        version: 12.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(bufferutil@4.0.8)(graphql@16.9.0)(reflect-metadata@0.2.2)(ts-morph@21.0.1)(utf-8-validate@5.0.10)
      '@nestjs/platform-fastify':
        specifier: ^10.4.3
        version: 10.4.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))
      '@nestjs/schedule':
        specifier: ^4.1.0
        version: 4.1.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))
      '@nestjs/terminus':
        specifier: ^10.2.3
        version: 10.2.3(@nestjs/axios@3.0.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(axios@1.7.2)(rxjs@7.8.1))(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@prisma/client@5.17.0(prisma@5.17.0))(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/throttler':
        specifier: ^6.2.1
        version: 6.2.1(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2)
      '@prisma/client':
        specifier: ^5.16.2
        version: 5.17.0(prisma@5.17.0)
      '@rgbpp-sdk/btc':
        specifier: ^0.5.0
        version: 0.5.0(@ckb-lumos/lumos@0.23.0)
      '@rgbpp-sdk/ckb':
        specifier: ^0.5.0
        version: 0.5.0(@ckb-lumos/lumos@0.23.0)(lodash@4.17.21)
      '@sentry/nestjs':
        specifier: ^8.28.0
        version: 8.28.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))
      '@sentry/node':
        specifier: ^8.28.0
        version: 8.28.0
      '@sentry/profiling-node':
        specifier: ^8.28.0
        version: 8.28.0
      '@types/ws':
        specifier: ^8.5.11
        version: 8.5.11
      apollo-server-plugin-base:
        specifier: ^3.7.2
        version: 3.7.2(graphql@16.9.0)
      axios:
        specifier: ^1.7.2
        version: 1.7.2
      bullmq:
        specifier: ^5.11.0
        version: 5.12.0
      cache-manager:
        specifier: ^5.2.3
        version: 5.7.4
      cache-manager-redis-yet:
        specifier: ^4.1.2
        version: 4.2.0
      cron:
        specifier: ^3.1.7
        version: 3.1.7
      dataloader:
        specifier: ^2.2.2
        version: 2.2.2
      fastify:
        specifier: ^4.28.1
        version: 4.28.1
      graphql:
        specifier: ^16.9.0
        version: 16.9.0
      graphql-query-complexity:
        specifier: ^1.0.0
        version: 1.0.0(graphql@16.9.0)
      ioredis:
        specifier: ^5.4.1
        version: 5.4.1
      lodash:
        specifier: ^4.17.21
        version: 4.17.21
      p-limit:
        specifier: ^3.1.0
        version: 3.1.0
      prisma:
        specifier: ^5.16.2
        version: 5.17.0
      redis:
        specifier: ^4.6.7
        version: 4.7.0
      reflect-metadata:
        specifier: ^0.2.0
        version: 0.2.2
      rpc-websockets:
        specifier: ^7.11.2
        version: 7.11.2
      rxjs:
        specifier: ^7.8.1
        version: 7.8.1
      serialize-javascript:
        specifier: ^6.0.2
        version: 6.0.2
      ws:
        specifier: ^8.18.0
        version: 8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)
      zod:
        specifier: ^3.23.8
        version: 3.23.8
    devDependencies:
      '@nestjs/cli':
        specifier: ^10.0.0
        version: 10.4.2
      '@nestjs/schematics':
        specifier: ^10.0.0
        version: 10.1.3(chokidar@3.6.0)(typescript@5.5.3)
      '@nestjs/testing':
        specifier: ^10.3.10
        version: 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10))
      '@types/express':
        specifier: ^4.17.17
        version: 4.17.21
      '@types/jest':
        specifier: ^29.5.2
        version: 29.5.12
      '@types/lodash':
        specifier: ^4.17.7
        version: 4.17.7
      '@types/node':
        specifier: ^20.14.10
        version: 20.14.10
      '@types/serialize-javascript':
        specifier: ^5.0.4
        version: 5.0.4
      '@types/supertest':
        specifier: ^6.0.0
        version: 6.0.2
      '@typescript-eslint/eslint-plugin':
        specifier: ^7.0.0
        version: 7.18.0(@typescript-eslint/parser@7.18.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/parser':
        specifier: ^7.0.0
        version: 7.18.0(eslint@8.57.0)(typescript@5.5.3)
      eslint:
        specifier: ^8.42.0
        version: 8.57.0
      eslint-config-prettier:
        specifier: ^9.0.0
        version: 9.1.0(eslint@8.57.0)
      eslint-plugin-prettier:
        specifier: ^5.0.0
        version: 5.2.1(@types/eslint@9.6.0)(eslint-config-prettier@9.1.0(eslint@8.57.0))(eslint@8.57.0)(prettier@3.3.2)
      husky:
        specifier: ^9.1.4
        version: 9.1.4
      jest:
        specifier: ^29.5.0
        version: 29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      lint-staged:
        specifier: ^15.2.7
        version: 15.2.8
      prettier:
        specifier: ^3.0.0
        version: 3.3.2
      source-map-support:
        specifier: ^0.5.21
        version: 0.5.21
      supertest:
        specifier: ^7.0.0
        version: 7.0.0
      ts-jest:
        specifier: ^29.1.0
        version: 29.2.4(@babel/core@7.24.7)(@jest/transform@29.7.0)(@jest/types@29.6.3)(babel-jest@29.7.0(@babel/core@7.24.7))(jest@29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)))(typescript@5.5.3)
      ts-loader:
        specifier: ^9.4.3
        version: 9.5.1(typescript@5.5.3)(webpack@5.92.1)
      ts-node:
        specifier: ^10.9.2
        version: 10.9.2(@types/node@20.14.10)(typescript@5.5.3)
      tsconfig-paths:
        specifier: ^4.2.0
        version: 4.2.0
      typescript:
        specifier: ^5.5.3
        version: 5.5.3
      wscat:
        specifier: ^5.2.1
        version: 5.2.1(bufferutil@4.0.8)(utf-8-validate@5.0.10)

  frontend:
    dependencies:
      '@apollo/client':
        specifier: ^3.11.2
        version: 3.11.2(@types/react@18.3.3)(graphql-ws@5.16.0(graphql@16.9.0))(graphql@16.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(subscriptions-transport-ws@0.11.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10))
      '@ark-ui/react':
        specifier: ^3.12.1
        version: 3.12.1(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@bitcoinerlab/secp256k1':
        specifier: ^1.1.1
        version: 1.1.1
      '@ckb-lumos/lumos':
        specifier: ^0.23.0
        version: 0.23.0
      '@graphql-typed-document-node/core':
        specifier: ^3.2.0
        version: 3.2.0(graphql@16.9.0)
      '@lingui/core':
        specifier: ^4.11.2
        version: 4.11.2
      '@lingui/macro':
        specifier: ^4.11.2
        version: 4.11.2(@lingui/react@4.11.2(react@18.3.1))(babel-plugin-macros@3.1.0)(typescript@5.5.3)
      '@lingui/react':
        specifier: ^4.11.2
        version: 4.11.2(react@18.3.1)
      '@nervosnetwork/ckb-sdk-utils':
        specifier: ^0.109.2
        version: 0.109.3
      '@next/third-parties':
        specifier: ^14.2.13
        version: 14.2.13(next@14.2.4(@babel/core@7.24.7)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(react@18.3.1)
      '@rgbpp-sdk/ckb':
        specifier: ^0.5.0
        version: 0.5.0(@ckb-lumos/lumos@0.23.0)(lodash@4.17.21)
      '@tanstack/react-query':
        specifier: ^5.51.11
        version: 5.51.21(react@18.3.1)
      axios:
        specifier: ^1.7.2
        version: 1.7.2
      bignumber.js:
        specifier: ^9.1.2
        version: 9.1.2
      bitcoinjs-lib:
        specifier: ^6.1.6
        version: 6.1.6
      dayjs:
        specifier: ^1.11.12
        version: 1.11.12
      graphql:
        specifier: ^16.9.0
        version: 16.9.0
      graphql-request:
        specifier: ^7.1.0
        version: 7.1.0(graphql@16.9.0)
      lodash-es:
        specifier: ^4.17.21
        version: 4.17.21
      negotiator:
        specifier: ^0.6.3
        version: 0.6.3
      next:
        specifier: 14.2.4
        version: 14.2.4(@babel/core@7.24.7)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      next-nprogress-bar:
        specifier: ^2.3.13
        version: 2.3.13
      react:
        specifier: ^18
        version: 18.3.1
      react-dom:
        specifier: ^18
        version: 18.3.1(react@18.3.1)
      react-intersection-observer:
        specifier: ^9.13.1
        version: 9.13.1(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      typed.js:
        specifier: ^2.1.0
        version: 2.1.0
      usehooks-ts:
        specifier: ^3.1.0
        version: 3.1.0(react@18.3.1)
      zod:
        specifier: ^3.23.8
        version: 3.23.8
    devDependencies:
      '@0no-co/graphqlsp':
        specifier: ^1.12.12
        version: 1.12.12(graphql@16.9.0)(typescript@5.5.3)
      '@graphql-codegen/cli':
        specifier: ^5.0.2
        version: 5.0.2(@parcel/watcher@2.4.1)(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(typescript@5.5.3)(utf-8-validate@5.0.10)
      '@graphql-codegen/schema-ast':
        specifier: ^4.1.0
        version: 4.1.0(graphql@16.9.0)
      '@lingui/cli':
        specifier: ^4.11.2
        version: 4.11.2(typescript@5.5.3)
      '@lingui/conf':
        specifier: ^4.11.2
        version: 4.11.2(typescript@5.5.3)
      '@lingui/swc-plugin':
        specifier: ^4.0.8
        version: 4.0.8(@lingui/macro@4.11.2(@lingui/react@4.11.2(react@18.3.1))(babel-plugin-macros@3.1.0)(typescript@5.5.3))(next@14.2.4(@babel/core@7.24.7)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))
      '@pandacss/dev':
        specifier: ^0.42.0
        version: 0.42.0(typescript@5.5.3)
      '@parcel/watcher':
        specifier: ^2.4.1
        version: 2.4.1
      '@park-ui/panda-preset':
        specifier: ^0.38.1
        version: 0.38.1(@internationalized/date@3.5.5)(@pandacss/dev@0.42.0(typescript@5.5.3))
      '@svgr/core':
        specifier: ^8.1.0
        version: 8.1.0(typescript@5.5.3)
      '@svgr/webpack':
        specifier: ^8.1.0
        version: 8.1.0(typescript@5.5.3)
      '@types/lodash-es':
        specifier: ^4.17.12
        version: 4.17.12
      '@types/negotiator':
        specifier: ^0.6.3
        version: 0.6.3
      '@types/node':
        specifier: ^20
        version: 20.14.10
      '@types/react':
        specifier: ^18
        version: 18.3.3
      '@types/react-dom':
        specifier: ^18
        version: 18.3.0
      '@typescript-eslint/eslint-plugin':
        specifier: ^6.10.0
        version: 6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/parser':
        specifier: ^6.5.0
        version: 6.21.0(eslint@8.57.0)(typescript@5.5.3)
      cspell:
        specifier: ^8.10.4
        version: 8.13.1
      eslint:
        specifier: ^8
        version: 8.57.0
      eslint-config-next:
        specifier: 14.2.4
        version: 14.2.4(eslint@8.57.0)(typescript@5.5.3)
      eslint-plugin-import:
        specifier: ^2.29.0
        version: 2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-typescript@3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0))(eslint@8.57.0)
      eslint-plugin-no-relative-import-paths:
        specifier: ^1.5.3
        version: 1.5.5
      eslint-plugin-react:
        specifier: ^7.33.2
        version: 7.35.0(eslint@8.57.0)
      eslint-plugin-react-hooks:
        specifier: ^4.6.0
        version: 4.6.2(eslint@8.57.0)
      eslint-plugin-simple-import-sort:
        specifier: ^10.0.0
        version: 10.0.0(eslint@8.57.0)
      eslint-plugin-unicorn:
        specifier: ^49.0.0
        version: 49.0.0(eslint@8.57.0)
      eslint-plugin-unused-imports:
        specifier: ^3.0.0
        version: 3.2.0(@typescript-eslint/eslint-plugin@6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)
      prettier:
        specifier: ^3.1.0
        version: 3.3.2
      typescript:
        specifier: ^5
        version: 5.5.3

packages:

  '@0no-co/graphql.web@1.0.7':
    resolution: {integrity: sha512-E3Qku4mTzdrlwVWGPxklDnME5ANrEGetvYw4i2GCRlppWXXE4QD66j7pwb8HelZwS6LnqEChhrSOGCXpbiu6MQ==}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0
    peerDependenciesMeta:
      graphql:
        optional: true

  '@0no-co/graphqlsp@1.12.12':
    resolution: {integrity: sha512-BmCAc/q3tQcIwXxKoxubYaB23s2fWMMmNGSlY9mgQvWiReBS8ZutPZSf11OADfwTv1J1JIazU6q6OFX+cEp8PQ==}
    peerDependencies:
      graphql: ^15.5.0 || ^16.0.0 || ^17.0.0
      typescript: ^5.0.0

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@angular-devkit/core@17.3.8':
    resolution: {integrity: sha512-Q8q0voCGudbdCgJ7lXdnyaxKHbNQBARH68zPQV72WT8NWy+Gw/tys870i6L58NWbBaCJEUcIj/kb6KoakSRu+Q==}
    engines: {node: ^18.13.0 || >=20.9.0, npm: ^6.11.0 || ^7.5.6 || >=8.0.0, yarn: '>= 1.13.0'}
    peerDependencies:
      chokidar: ^3.5.2
    peerDependenciesMeta:
      chokidar:
        optional: true

  '@angular-devkit/schematics-cli@17.3.8':
    resolution: {integrity: sha512-TjmiwWJarX7oqvNiRAroQ5/LeKUatxBOCNEuKXO/PV8e7pn/Hr/BqfFm+UcYrQoFdZplmtNAfqmbqgVziKvCpA==}
    engines: {node: ^18.13.0 || >=20.9.0, npm: ^6.11.0 || ^7.5.6 || >=8.0.0, yarn: '>= 1.13.0'}
    hasBin: true

  '@angular-devkit/schematics@17.3.8':
    resolution: {integrity: sha512-QRVEYpIfgkprNHc916JlPuNbLzOgrm9DZalHasnLUz4P6g7pR21olb8YCyM2OTJjombNhya9ZpckcADU5Qyvlg==}
    engines: {node: ^18.13.0 || >=20.9.0, npm: ^6.11.0 || ^7.5.6 || >=8.0.0, yarn: '>= 1.13.0'}

  '@apollo/cache-control-types@1.0.3':
    resolution: {integrity: sha512-F17/vCp7QVwom9eG7ToauIKdAxpSoadsJnqIfyryLFSkLSOEqu+eC5Z3N8OXcUVStuOMcNHlyraRsA6rRICu4g==}
    peerDependencies:
      graphql: 14.x || 15.x || 16.x

  '@apollo/client@3.11.2':
    resolution: {integrity: sha512-HVcsJChOVut6gmmf5YukTG52EXg0cxq0LU7I/0yZPcfcJOPW2cpVqveaxZt+B1fL6ZKrYVdSa2nfuK0oSpv0Yw==}
    peerDependencies:
      graphql: ^15.0.0 || ^16.0.0
      graphql-ws: ^5.5.5
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || >=19.0.0-rc <19.0.0
      react-dom: ^16.8.0 || ^17.0.0 || ^18.0.0 || >=19.0.0-rc <19.0.0
      subscriptions-transport-ws: ^0.9.0 || ^0.11.0
    peerDependenciesMeta:
      graphql-ws:
        optional: true
      react:
        optional: true
      react-dom:
        optional: true
      subscriptions-transport-ws:
        optional: true

  '@apollo/protobufjs@1.2.6':
    resolution: {integrity: sha512-Wqo1oSHNUj/jxmsVp4iR3I480p6qdqHikn38lKrFhfzcDJ7lwd7Ck7cHRl4JE81tWNArl77xhnG/OkZhxKBYOw==}
    hasBin: true

  '@apollo/protobufjs@1.2.7':
    resolution: {integrity: sha512-Lahx5zntHPZia35myYDBRuF58tlwPskwHc5CWBZC/4bMKB6siTBWwtMrkqXcsNwQiFSzSx5hKdRPUmemrEp3Gg==}
    hasBin: true

  '@apollo/server-gateway-interface@1.1.1':
    resolution: {integrity: sha512-pGwCl/po6+rxRmDMFgozKQo2pbsSwE91TpsDBAOgf74CRDPXHHtM88wbwjab0wMMZh95QfR45GGyDIdhY24bkQ==}
    peerDependencies:
      graphql: 14.x || 15.x || 16.x

  '@apollo/server-plugin-landing-page-graphql-playground@4.0.0':
    resolution: {integrity: sha512-PBDtKI/chJ+hHeoJUUH9Kuqu58txQl00vUGuxqiC9XcReulIg7RjsyD0G1u3drX4V709bxkL5S0nTeXfRHD0qA==}
    engines: {node: '>=14.0'}
    deprecated: The use of GraphQL Playground in Apollo Server was supported in previous versions, but this is no longer the case as of December 31, 2022. This package exists for v4 migration purposes only. We do not intend to resolve security issues or other bugs with this package if they arise, so please migrate away from this to [Apollo Server's default Explorer](https://www.apollographql.com/docs/apollo-server/api/plugin/landing-pages) as soon as possible.
    peerDependencies:
      '@apollo/server': ^4.0.0

  '@apollo/server-plugin-response-cache@4.1.3':
    resolution: {integrity: sha512-8WaP4Xo9GGIbWn4ZG/TlYKZLo/YI8tuORvxzLOKnZa3EqUvt7iTCGHX491dWNiGkm93VgDDdo5r0WEvLDdHSmQ==}
    engines: {node: '>=14.16.0'}
    peerDependencies:
      '@apollo/server': ^4.0.1
      graphql: ^16.6.0

  '@apollo/server@4.11.0':
    resolution: {integrity: sha512-SWDvbbs0wl2zYhKG6aGLxwTJ72xpqp0awb2lotNpfezd9VcAvzaUizzKQqocephin2uMoaA8MguoyBmgtPzNWw==}
    engines: {node: '>=14.16.0'}
    peerDependencies:
      graphql: ^16.6.0

  '@apollo/usage-reporting-protobuf@4.1.1':
    resolution: {integrity: sha512-u40dIUePHaSKVshcedO7Wp+mPiZsaU6xjv9J+VyxpoU/zL6Jle+9zWeG98tr/+SZ0nZ4OXhrbb8SNr0rAPpIDA==}

  '@apollo/utils.createhash@2.0.1':
    resolution: {integrity: sha512-fQO4/ZOP8LcXWvMNhKiee+2KuKyqIcfHrICA+M4lj/h/Lh1H10ICcUtk6N/chnEo5HXu0yejg64wshdaiFitJg==}
    engines: {node: '>=14'}

  '@apollo/utils.dropunuseddefinitions@2.0.1':
    resolution: {integrity: sha512-EsPIBqsSt2BwDsv8Wu76LK5R1KtsVkNoO4b0M5aK0hx+dGg9xJXuqlr7Fo34Dl+y83jmzn+UvEW+t1/GP2melA==}
    engines: {node: '>=14'}
    peerDependencies:
      graphql: 14.x || 15.x || 16.x

  '@apollo/utils.fetcher@2.0.1':
    resolution: {integrity: sha512-jvvon885hEyWXd4H6zpWeN3tl88QcWnHp5gWF5OPF34uhvoR+DFqcNxs9vrRaBBSY3qda3Qe0bdud7tz2zGx1A==}
    engines: {node: '>=14'}

  '@apollo/utils.isnodelike@2.0.1':
    resolution: {integrity: sha512-w41XyepR+jBEuVpoRM715N2ZD0xMD413UiJx8w5xnAZD2ZkSJnMJBoIzauK83kJpSgNuR6ywbV29jG9NmxjK0Q==}
    engines: {node: '>=14'}

  '@apollo/utils.keyvaluecache@1.0.2':
    resolution: {integrity: sha512-p7PVdLPMnPzmXSQVEsy27cYEjVON+SH/Wb7COyW3rQN8+wJgT1nv9jZouYtztWW8ZgTkii5T6tC9qfoDREd4mg==}

  '@apollo/utils.keyvaluecache@2.1.1':
    resolution: {integrity: sha512-qVo5PvUUMD8oB9oYvq4ViCjYAMWnZ5zZwEjNF37L2m1u528x5mueMlU+Cr1UinupCgdB78g+egA1G98rbJ03Vw==}
    engines: {node: '>=14'}

  '@apollo/utils.logger@1.0.1':
    resolution: {integrity: sha512-XdlzoY7fYNK4OIcvMD2G94RoFZbzTQaNP0jozmqqMudmaGo2I/2Jx71xlDJ801mWA/mbYRihyaw6KJii7k5RVA==}

  '@apollo/utils.logger@2.0.1':
    resolution: {integrity: sha512-YuplwLHaHf1oviidB7MxnCXAdHp3IqYV8n0momZ3JfLniae92eYqMIx+j5qJFX6WKJPs6q7bczmV4lXIsTu5Pg==}
    engines: {node: '>=14'}

  '@apollo/utils.printwithreducedwhitespace@2.0.1':
    resolution: {integrity: sha512-9M4LUXV/fQBh8vZWlLvb/HyyhjJ77/I5ZKu+NBWV/BmYGyRmoEP9EVAy7LCVoY3t8BDcyCAGfxJaLFCSuQkPUg==}
    engines: {node: '>=14'}
    peerDependencies:
      graphql: 14.x || 15.x || 16.x

  '@apollo/utils.removealiases@2.0.1':
    resolution: {integrity: sha512-0joRc2HBO4u594Op1nev+mUF6yRnxoUH64xw8x3bX7n8QBDYdeYgY4tF0vJReTy+zdn2xv6fMsquATSgC722FA==}
    engines: {node: '>=14'}
    peerDependencies:
      graphql: 14.x || 15.x || 16.x

  '@apollo/utils.sortast@2.0.1':
    resolution: {integrity: sha512-eciIavsWpJ09za1pn37wpsCGrQNXUhM0TktnZmHwO+Zy9O4fu/WdB4+5BvVhFiZYOXvfjzJUcc+hsIV8RUOtMw==}
    engines: {node: '>=14'}
    peerDependencies:
      graphql: 14.x || 15.x || 16.x

  '@apollo/utils.stripsensitiveliterals@2.0.1':
    resolution: {integrity: sha512-QJs7HtzXS/JIPMKWimFnUMK7VjkGQTzqD9bKD1h3iuPAqLsxd0mUNVbkYOPTsDhUKgcvUOfOqOJWYohAKMvcSA==}
    engines: {node: '>=14'}
    peerDependencies:
      graphql: 14.x || 15.x || 16.x

  '@apollo/utils.usagereporting@2.1.0':
    resolution: {integrity: sha512-LPSlBrn+S17oBy5eWkrRSGb98sWmnEzo3DPTZgp8IQc8sJe0prDgDuppGq4NeQlpoqEHz0hQeYHAOA0Z3aQsxQ==}
    engines: {node: '>=14'}
    peerDependencies:
      graphql: 14.x || 15.x || 16.x

  '@apollo/utils.withrequired@2.0.1':
    resolution: {integrity: sha512-YBDiuAX9i1lLc6GeTy1m7DGLFn/gMnvXqlalOIMjM7DeOgIacEjjfwPqb0M1CQ2v11HhR15d1NmxJoRCfrNqcA==}
    engines: {node: '>=14'}

  '@apollographql/graphql-playground-html@1.6.29':
    resolution: {integrity: sha512-xCcXpoz52rI4ksJSdOCxeOCn2DLocxwHf9dVT/Q90Pte1LX+LY+91SFtJF3KXVHH8kEin+g1KKCQPKBjZJfWNA==}

  '@ardatan/relay-compiler@12.0.0':
    resolution: {integrity: sha512-9anThAaj1dQr6IGmzBMcfzOQKTa5artjuPmw8NYK/fiGEMjADbSguBY2FMDykt+QhilR3wc9VA/3yVju7JHg7Q==}
    hasBin: true
    peerDependencies:
      graphql: '*'

  '@ardatan/sync-fetch@0.0.1':
    resolution: {integrity: sha512-xhlTqH0m31mnsG0tIP4ETgfSB6gXDaYYsUWTrlUV93fFQPI9dd8hE0Ot6MHLCtqgB32hwJAC3YZMWlXZw7AleA==}
    engines: {node: '>=14'}

  '@ark-ui/anatomy@3.4.0':
    resolution: {integrity: sha512-yRqNfI12UiQ3PliVvE8j81vLX4Nhhk07BWK6NLY6uaDUzMUjcv219zdPDxMnF6Pb9kG9Kxpz1opwsbe4LNB3wQ==}

  '@ark-ui/react@3.12.1':
    resolution: {integrity: sha512-QTWyWer2c5p0QJ1y8nMamsSCWtgmdGmrcb4dHLiPlOlWnWt26J8PTEat2cRyZEGpecl8NzmQQTEOIDiz1DJMmw==}
    peerDependencies:
      react: '>=18.0.0'
      react-dom: '>=18.0.0'

  '@as-integrations/fastify@2.1.1':
    resolution: {integrity: sha512-iupYSQyRrlBAdsDcCYzuKjJlJAKiQpRDLd33A6yAF3Ip/rGrSDDDrxfJWp6FqyVlivSL+MQkGIphmUI/ckfZkg==}
    engines: {node: '>=16'}
    peerDependencies:
      '@apollo/server': ^4.0.0
      fastify: ^4.4.0

  '@babel/code-frame@7.24.7':
    resolution: {integrity: sha512-BcYH1CVJBO9tvyIZ2jVeXgSIMvGZ2FDRvDdOIVQyuklNKSsx+eppDEBq/g47Ayw+RqNFE+URvOShmf+f/qwAlA==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.24.7':
    resolution: {integrity: sha512-qJzAIcv03PyaWqxRgO4mSU3lihncDT296vnyuE2O8uA4w3UHWI4S3hgeZd1L8W1Bft40w9JxJ2b412iDUFFRhw==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.25.2':
    resolution: {integrity: sha512-bYcppcpKBvX4znYaPEeFau03bp89ShqNMLs+rmdptMw+heSZh9+z84d2YG+K7cYLbWwzdjtDoW/uqZmPjulClQ==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.24.7':
    resolution: {integrity: sha512-nykK+LEK86ahTkX/3TgauT0ikKoNCfKHEaZYTUVupJdTLzGNvrblu4u6fa7DhZONAltdf8e662t/abY8idrd/g==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.24.7':
    resolution: {integrity: sha512-oipXieGC3i45Y1A41t4tAqpnEZWgB/lC6Ehh6+rOviR5XWpTtMmLN+fGjz9vOiNRt0p6RtO6DtD0pdU3vpqdSA==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.25.0':
    resolution: {integrity: sha512-3LEEcj3PVW8pW2R1SR1M89g/qrYk/m/mB/tLqn7dn4sbBUQyTqnlod+II2U4dqiGtUmkcnAmkMDralTFZttRiw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-annotate-as-pure@7.24.7':
    resolution: {integrity: sha512-BaDeOonYvhdKw+JoMVkAixAAJzG2jVPIwWoKBPdYuY9b452e2rPuI9QPYh3KpofZ3pW2akOmwZLOiOsHMiqRAg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-builder-binary-assignment-operator-visitor@7.24.7':
    resolution: {integrity: sha512-xZeCVVdwb4MsDBkkyZ64tReWYrLRHlMN72vP7Bdm3OUOuyFZExhsHUUnuWnm2/XOlAJzR0LfPpB56WXZn0X/lA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.24.7':
    resolution: {integrity: sha512-ctSdRHBi20qWOfy27RUb4Fhp07KSJ3sXcuSvTrXrc4aG8NSYDo1ici3Vhg9bg69y5bj0Mr1lh0aeEgTvc12rMg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.25.2':
    resolution: {integrity: sha512-U2U5LsSaZ7TAt3cfaymQ8WHh0pxvdHoEk6HVpaexxixjyEquMh0L0YNJNM6CTGKMXV1iksi0iZkGw4AcFkPaaw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-create-class-features-plugin@7.25.0':
    resolution: {integrity: sha512-GYM6BxeQsETc9mnct+nIIpf63SAyzvyYN7UB/IlTyd+MBg06afFGp0mIeUqGyWgS2mxad6vqbMrHVlaL3m70sQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-create-regexp-features-plugin@7.25.2':
    resolution: {integrity: sha512-+wqVGP+DFmqwFD3EH6TMTfUNeqDehV3E/dl+Sd54eaXqm17tEUNbEIn4sVivVowbvUpOtIGxdo3GoXyDH9N/9g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-define-polyfill-provider@0.6.2':
    resolution: {integrity: sha512-LV76g+C502biUK6AyZ3LK10vDpDyCzZnhZFXkH1L75zHPj68+qc8Zfpx2th+gzwA2MzyK+1g/3EPl62yFnVttQ==}
    peerDependencies:
      '@babel/core': ^7.4.0 || ^8.0.0-0 <8.0.0

  '@babel/helper-environment-visitor@7.24.7':
    resolution: {integrity: sha512-DoiN84+4Gnd0ncbBOM9AZENV4a5ZiL39HYMyZJGZ/AZEykHYdJw0wW3kdcsh9/Kn+BRXHLkkklZ51ecPKmI1CQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-function-name@7.24.7':
    resolution: {integrity: sha512-FyoJTsj/PEUWu1/TYRiXTIHc8lbw+TDYkZuoE43opPS5TrI7MyONBE1oNvfguEXAD9yhQRrVBnXdXzSLQl9XnA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-hoist-variables@7.24.7':
    resolution: {integrity: sha512-MJJwhkoGy5c4ehfoRyrJ/owKeMl19U54h27YYftT0o2teQ3FJ3nQUf/I3LlJsX4l3qlw7WRXUmiyajvHXoTubQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-member-expression-to-functions@7.24.8':
    resolution: {integrity: sha512-LABppdt+Lp/RlBxqrh4qgf1oEH/WxdzQNDJIu5gC/W1GyvPVrOBiItmmM8wan2fm4oYqFuFfkXmlGpLQhPY8CA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.24.7':
    resolution: {integrity: sha512-8AyH3C+74cgCVVXow/myrynrAGv+nTVg5vKu2nZph9x7RcRwzmh0VFallJuFTZ9mx6u4eSdXZfcOzSqTUm0HCA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.24.7':
    resolution: {integrity: sha512-1fuJEwIrp+97rM4RWdO+qrRsZlAeL1lQJoPqtCYWv0NL115XM93hIH4CSRln2w52SqvmY5hqdtauB6QFCDiZNQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-module-transforms@7.25.2':
    resolution: {integrity: sha512-BjyRAbix6j/wv83ftcVJmBt72QtHI56C7JXZoG2xATiLpmoC7dpd8WnkikExHDVPpi/3qCmO6WY1EaXOluiecQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-optimise-call-expression@7.24.7':
    resolution: {integrity: sha512-jKiTsW2xmWwxT1ixIdfXUZp+P5yURx2suzLZr5Hi64rURpDYdMW0pv+Uf17EYk2Rd428Lx4tLsnjGJzYKDM/6A==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-plugin-utils@7.24.7':
    resolution: {integrity: sha512-Rq76wjt7yz9AAc1KnlRKNAi/dMSVWgDRx43FHoJEbcYU6xOWaE2dVPwcdTukJrjxS65GITyfbvEYHvkirZ6uEg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-plugin-utils@7.24.8':
    resolution: {integrity: sha512-FFWx5142D8h2Mgr/iPVGH5G7w6jDn4jUSpZTyDnQO0Yn7Ks2Kuz6Pci8H6MPCoUJegd/UZQ3tAvfLCxQSnWWwg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-remap-async-to-generator@7.25.0':
    resolution: {integrity: sha512-NhavI2eWEIz/H9dbrG0TuOicDhNexze43i5z7lEqwYm0WEZVTwnPpA0EafUTP7+6/W79HWIP2cTe3Z5NiSTVpw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-replace-supers@7.25.0':
    resolution: {integrity: sha512-q688zIvQVYtZu+i2PsdIu/uWGRpfxzr5WESsfpShfZECkO+d2o+WROWezCi/Q6kJ0tfPa5+pUGUlfx2HhrA3Bg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-simple-access@7.24.7':
    resolution: {integrity: sha512-zBAIvbCMh5Ts+b86r/CjU+4XGYIs+R1j951gxI3KmmxBMhCg4oQMsv6ZXQ64XOm/cvzfU1FmoCyt6+owc5QMYg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-skip-transparent-expression-wrappers@7.24.7':
    resolution: {integrity: sha512-IO+DLT3LQUElMbpzlatRASEyQtfhSE0+m465v++3jyyXeBTBUjtVZg28/gHeV5mrTJqvEKhKroBGAvhW+qPHiQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-split-export-declaration@7.24.7':
    resolution: {integrity: sha512-oy5V7pD+UvfkEATUKvIjvIAH/xCzfsFVw7ygW2SI6NClZzquT+mwdTfgfdbUiceh6iQO0CHtCPsyze/MZ2YbAA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.24.8':
    resolution: {integrity: sha512-pO9KhhRcuUyGnJWwyEgnRJTSIZHiT+vMD0kPeD+so0l7mxkMT19g3pjY9GTnHySck/hDzq+dtW/4VgnMkippsQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.24.7':
    resolution: {integrity: sha512-rR+PBcQ1SMQDDyF6X0wxtG8QyLCgUB0eRAGguqRLfkCA87l7yAP7ehq8SNj96OOGTO8OBV70KhuFYcIkHXOg0w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.24.7':
    resolution: {integrity: sha512-yy1/KvjhV/ZCL+SM7hBrvnZJ3ZuT9OuZgIJAGpPEToANvc3iM6iDvBnRjtElWibHU6n8/LPR/EjX9EtIEYO3pw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.24.8':
    resolution: {integrity: sha512-xb8t9tD1MHLungh/AIoWYN+gVHaB9kwlu8gffXGSt3FFEIT7RjS+xWbc2vUD1UTZdIpKj/ab3rdqJ7ufngyi2Q==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-wrap-function@7.25.0':
    resolution: {integrity: sha512-s6Q1ebqutSiZnEjaofc/UKDyC4SbzV5n5SrA2Gq8UawLycr3i04f1dX4OzoQVnexm6aOCh37SQNYlJ/8Ku+PMQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.24.7':
    resolution: {integrity: sha512-NlmJJtvcw72yRJRcnCmGvSi+3jDEg8qFu3z0AFoymmzLx5ERVWyzd9kVXr7Th9/8yIJi2Zc6av4Tqz3wFs8QWg==}
    engines: {node: '>=6.9.0'}

  '@babel/highlight@7.24.7':
    resolution: {integrity: sha512-EStJpq4OuY8xYfhGVXngigBJRWxftKX9ksiGDnmlY3o7B/V7KIAc9X4oiK87uPJSc/vs5L869bem5fhZa8caZw==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.24.8':
    resolution: {integrity: sha512-WzfbgXOkGzZiXXCqk43kKwZjzwx4oulxZi3nq2TYL9mOjQv6kYwul9mz6ID36njuL7Xkp6nJEfok848Zj10j/w==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/parser@7.25.3':
    resolution: {integrity: sha512-iLTJKDbJ4hMvFPgQwwsVoxtHyWpKKPBrxkANrSYewDPaPpT5py5yeVkgPIJ7XYXhndxJpaA3PyALSXQ7u8e/Dw==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-bugfix-firefox-class-in-computed-class-key@7.25.3':
    resolution: {integrity: sha512-wUrcsxZg6rqBXG05HG1FPYgsP6EvwF4WpBbxIpWIIYnH8wG0gzx3yZY3dtEHas4sTAOGkbTsc9EGPxwff8lRoA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-bugfix-safari-class-field-initializer-scope@7.25.0':
    resolution: {integrity: sha512-Bm4bH2qsX880b/3ziJ8KD711LT7z4u8CFudmjqle65AZj/HNUFhEf90dqYv6O86buWvSBmeQDjv0Tn2aF/bIBA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression@7.25.0':
    resolution: {integrity: sha512-lXwdNZtTmeVOOFtwM/WDe7yg1PL8sYhRk/XH0FzbR2HDQ0xC+EnQ/JHeoMYSavtU115tnUk0q9CDyq8si+LMAA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@7.24.7':
    resolution: {integrity: sha512-+izXIbke1T33mY4MSNnrqhPXDz01WYhEf3yF5NbnUtkiNnm+XBZJl3kNfoK6NKmYlz/D07+l2GWVK/QfDkNCuQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.13.0

  '@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly@7.25.0':
    resolution: {integrity: sha512-tggFrk1AIShG/RUQbEwt2Tr/E+ObkfwrPjR6BjbRvsx24+PSjK8zrq0GWPNCjo8qpRx4DuJzlcvWJqlm+0h3kw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-proposal-class-properties@7.18.6':
    resolution: {integrity: sha512-cumfXOF0+nzZrrN8Rf0t7M+tF6sZc7vhQwYQck9q1/5w2OExlD+b4v4RpMJFaV1Z7WcDRgO6FqvxqxGlwo+RHQ==}
    engines: {node: '>=6.9.0'}
    deprecated: This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-class-properties instead.
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-proposal-object-rest-spread@7.20.7':
    resolution: {integrity: sha512-d2S98yCiLxDVmBmE8UjGcfPvNEUbA1U5q5WxaWFUGRzJSVAZqm5W6MbPct0jxnegUZ0niLeNX+IOzEs7wYg9Dg==}
    engines: {node: '>=6.9.0'}
    deprecated: This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-object-rest-spread instead.
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-proposal-private-property-in-object@7.21.0-placeholder-for-preset-env.2':
    resolution: {integrity: sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-async-generators@7.8.4':
    resolution: {integrity: sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-bigint@7.8.3':
    resolution: {integrity: sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-class-properties@7.12.13':
    resolution: {integrity: sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-class-static-block@7.14.5':
    resolution: {integrity: sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-dynamic-import@7.8.3':
    resolution: {integrity: sha512-5gdGbFon+PszYzqs83S3E5mpi7/y/8M9eC90MRTZfduQOYW76ig6SOSPNe41IG5LoP3FGBn2N0RjVDSQiS94kQ==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-export-namespace-from@7.8.3':
    resolution: {integrity: sha512-MXf5laXo6c1IbEbegDmzGPwGNTsHZmEy6QGznu5Sh2UCWvueywb2ee+CCE4zQiZstxU9BMoQO9i6zUFSY0Kj0Q==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-flow@7.24.7':
    resolution: {integrity: sha512-9G8GYT/dxn/D1IIKOUBmGX0mnmj46mGH9NnZyJLwtCpgh5f7D2VbuKodb+2s9m1Yavh1s7ASQN8lf0eqrb1LTw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-assertions@7.24.7':
    resolution: {integrity: sha512-Ec3NRUMoi8gskrkBe3fNmEQfxDvY8bgfQpz6jlk/41kX9eUjvpyqWU7PBP/pLAvMaSQjbMNKJmvX57jP+M6bPg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-attributes@7.24.7':
    resolution: {integrity: sha512-hbX+lKKeUMGihnK8nvKqmXBInriT3GVjzXKFriV3YC6APGxMbP8RZNFwy91+hocLXq90Mta+HshoB31802bb8A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-meta@7.10.4':
    resolution: {integrity: sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-json-strings@7.8.3':
    resolution: {integrity: sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-jsx@7.24.7':
    resolution: {integrity: sha512-6ddciUPe/mpMnOKv/U+RSd2vvVy+Yw/JfBB0ZHYjEZt9NLHmCUylNYlsbqCCS1Bffjlb0fCwC9Vqz+sBz6PsiQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4':
    resolution: {integrity: sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3':
    resolution: {integrity: sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-numeric-separator@7.10.4':
    resolution: {integrity: sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-object-rest-spread@7.8.3':
    resolution: {integrity: sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-catch-binding@7.8.3':
    resolution: {integrity: sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-chaining@7.8.3':
    resolution: {integrity: sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-private-property-in-object@7.14.5':
    resolution: {integrity: sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-top-level-await@7.14.5':
    resolution: {integrity: sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-typescript@7.24.7':
    resolution: {integrity: sha512-c/+fVeJBB0FeKsFvwytYiUD+LBvhHjGSI0g446PRGdSVGZLRNArBUno2PETbAly3tpiNAQR5XaZ+JslxkotsbA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-unicode-sets-regex@7.18.6':
    resolution: {integrity: sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-transform-arrow-functions@7.24.7':
    resolution: {integrity: sha512-Dt9LQs6iEY++gXUwY03DNFat5C2NbO48jj+j/bSAz6b3HgPs39qcPiYt77fDObIcFwj3/C2ICX9YMwGflUoSHQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-async-generator-functions@7.25.0':
    resolution: {integrity: sha512-uaIi2FdqzjpAMvVqvB51S42oC2JEVgh0LDsGfZVDysWE8LrJtQC2jvKmOqEYThKyB7bDEb7BP1GYWDm7tABA0Q==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-async-to-generator@7.24.7':
    resolution: {integrity: sha512-SQY01PcJfmQ+4Ash7NE+rpbLFbmqA2GPIgqzxfFTL4t1FKRq4zTms/7htKpoCUI9OcFYgzqfmCdH53s6/jn5fA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-block-scoped-functions@7.24.7':
    resolution: {integrity: sha512-yO7RAz6EsVQDaBH18IDJcMB1HnrUn2FJ/Jslc/WtPPWcjhpUJXU/rjbwmluzp7v/ZzWcEhTMXELnnsz8djWDwQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-block-scoping@7.25.0':
    resolution: {integrity: sha512-yBQjYoOjXlFv9nlXb3f1casSHOZkWr29NX+zChVanLg5Nc157CrbEX9D7hxxtTpuFy7Q0YzmmWfJxzvps4kXrQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-class-properties@7.24.7':
    resolution: {integrity: sha512-vKbfawVYayKcSeSR5YYzzyXvsDFWU2mD8U5TFeXtbCPLFUqe7GyCgvO6XDHzje862ODrOwy6WCPmKeWHbCFJ4w==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-class-static-block@7.24.7':
    resolution: {integrity: sha512-HMXK3WbBPpZQufbMG4B46A90PkuuhN9vBCb5T8+VAHqvAqvcLi+2cKoukcpmUYkszLhScU3l1iudhrks3DggRQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.12.0

  '@babel/plugin-transform-classes@7.25.0':
    resolution: {integrity: sha512-xyi6qjr/fYU304fiRwFbekzkqVJZ6A7hOjWZd+89FVcBqPV3S9Wuozz82xdpLspckeaafntbzglaW4pqpzvtSw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-computed-properties@7.24.7':
    resolution: {integrity: sha512-25cS7v+707Gu6Ds2oY6tCkUwsJ9YIDbggd9+cu9jzzDgiNq7hR/8dkzxWfKWnTic26vsI3EsCXNd4iEB6e8esQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-destructuring@7.24.8':
    resolution: {integrity: sha512-36e87mfY8TnRxc7yc6M9g9gOB7rKgSahqkIKwLpz4Ppk2+zC2Cy1is0uwtuSG6AE4zlTOUa+7JGz9jCJGLqQFQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-dotall-regex@7.24.7':
    resolution: {integrity: sha512-ZOA3W+1RRTSWvyqcMJDLqbchh7U4NRGqwRfFSVbOLS/ePIP4vHB5e8T8eXcuqyN1QkgKyj5wuW0lcS85v4CrSw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-duplicate-keys@7.24.7':
    resolution: {integrity: sha512-JdYfXyCRihAe46jUIliuL2/s0x0wObgwwiGxw/UbgJBr20gQBThrokO4nYKgWkD7uBaqM7+9x5TU7NkExZJyzw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-duplicate-named-capturing-groups-regex@7.25.0':
    resolution: {integrity: sha512-YLpb4LlYSc3sCUa35un84poXoraOiQucUTTu8X1j18JV+gNa8E0nyUf/CjZ171IRGr4jEguF+vzJU66QZhn29g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-transform-dynamic-import@7.24.7':
    resolution: {integrity: sha512-sc3X26PhZQDb3JhORmakcbvkeInvxz+A8oda99lj7J60QRuPZvNAk9wQlTBS1ZynelDrDmTU4pw1tyc5d5ZMUg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-exponentiation-operator@7.24.7':
    resolution: {integrity: sha512-Rqe/vSc9OYgDajNIK35u7ot+KeCoetqQYFXM4Epf7M7ez3lWlOjrDjrwMei6caCVhfdw+mIKD4cgdGNy5JQotQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-export-namespace-from@7.24.7':
    resolution: {integrity: sha512-v0K9uNYsPL3oXZ/7F9NNIbAj2jv1whUEtyA6aujhekLs56R++JDQuzRcP2/z4WX5Vg/c5lE9uWZA0/iUoFhLTA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-flow-strip-types@7.25.2':
    resolution: {integrity: sha512-InBZ0O8tew5V0K6cHcQ+wgxlrjOw1W4wDXLkOTjLRD8GYhTSkxTVBtdy3MMtvYBrbAWa1Qm3hNoTc1620Yj+Mg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-for-of@7.24.7':
    resolution: {integrity: sha512-wo9ogrDG1ITTTBsy46oGiN1dS9A7MROBTcYsfS8DtsImMkHk9JXJ3EWQM6X2SUw4x80uGPlwj0o00Uoc6nEE3g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-function-name@7.25.1':
    resolution: {integrity: sha512-TVVJVdW9RKMNgJJlLtHsKDTydjZAbwIsn6ySBPQaEAUU5+gVvlJt/9nRmqVbsV/IBanRjzWoaAQKLoamWVOUuA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-json-strings@7.24.7':
    resolution: {integrity: sha512-2yFnBGDvRuxAaE/f0vfBKvtnvvqU8tGpMHqMNpTN2oWMKIR3NqFkjaAgGwawhqK/pIN2T3XdjGPdaG0vDhOBGw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-literals@7.25.2':
    resolution: {integrity: sha512-HQI+HcTbm9ur3Z2DkO+jgESMAMcYLuN/A7NRw9juzxAezN9AvqvUTnpKP/9kkYANz6u7dFlAyOu44ejuGySlfw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-logical-assignment-operators@7.24.7':
    resolution: {integrity: sha512-4D2tpwlQ1odXmTEIFWy9ELJcZHqrStlzK/dAOWYyxX3zT0iXQB6banjgeOJQXzEc4S0E0a5A+hahxPaEFYftsw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-member-expression-literals@7.24.7':
    resolution: {integrity: sha512-T/hRC1uqrzXMKLQ6UCwMT85S3EvqaBXDGf0FaMf4446Qx9vKwlghvee0+uuZcDUCZU5RuNi4781UQ7R308zzBw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-amd@7.24.7':
    resolution: {integrity: sha512-9+pB1qxV3vs/8Hdmz/CulFB8w2tuu6EB94JZFsjdqxQokwGa9Unap7Bo2gGBGIvPmDIVvQrom7r5m/TCDMURhg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-commonjs@7.24.8':
    resolution: {integrity: sha512-WHsk9H8XxRs3JXKWFiqtQebdh9b/pTk4EgueygFzYlTKAg0Ud985mSevdNjdXdFBATSKVJGQXP1tv6aGbssLKA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-systemjs@7.25.0':
    resolution: {integrity: sha512-YPJfjQPDXxyQWg/0+jHKj1llnY5f/R6a0p/vP4lPymxLu7Lvl4k2WMitqi08yxwQcCVUUdG9LCUj4TNEgAp3Jw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-umd@7.24.7':
    resolution: {integrity: sha512-3aytQvqJ/h9z4g8AsKPLvD4Zqi2qT+L3j7XoFFu1XBlZWEl2/1kWnhmAbxpLgPrHSY0M6UA02jyTiwUVtiKR6A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-named-capturing-groups-regex@7.24.7':
    resolution: {integrity: sha512-/jr7h/EWeJtk1U/uz2jlsCioHkZk1JJZVcc8oQsJ1dUlaJD83f4/6Zeh2aHt9BIFokHIsSeDfhUmju0+1GPd6g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-transform-new-target@7.24.7':
    resolution: {integrity: sha512-RNKwfRIXg4Ls/8mMTza5oPF5RkOW8Wy/WgMAp1/F1yZ8mMbtwXW+HDoJiOsagWrAhI5f57Vncrmr9XeT4CVapA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-nullish-coalescing-operator@7.24.7':
    resolution: {integrity: sha512-Ts7xQVk1OEocqzm8rHMXHlxvsfZ0cEF2yomUqpKENHWMF4zKk175Y4q8H5knJes6PgYad50uuRmt3UJuhBw8pQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-numeric-separator@7.24.7':
    resolution: {integrity: sha512-e6q1TiVUzvH9KRvicuxdBTUj4AdKSRwzIyFFnfnezpCfP2/7Qmbb8qbU2j7GODbl4JMkblitCQjKYUaX/qkkwA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-object-rest-spread@7.24.7':
    resolution: {integrity: sha512-4QrHAr0aXQCEFni2q4DqKLD31n2DL+RxcwnNjDFkSG0eNQ/xCavnRkfCUjsyqGC2OviNJvZOF/mQqZBw7i2C5Q==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-object-super@7.24.7':
    resolution: {integrity: sha512-A/vVLwN6lBrMFmMDmPPz0jnE6ZGx7Jq7d6sT/Ev4H65RER6pZ+kczlf1DthF5N0qaPHBsI7UXiE8Zy66nmAovg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-optional-catch-binding@7.24.7':
    resolution: {integrity: sha512-uLEndKqP5BfBbC/5jTwPxLh9kqPWWgzN/f8w6UwAIirAEqiIVJWWY312X72Eub09g5KF9+Zn7+hT7sDxmhRuKA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-optional-chaining@7.24.8':
    resolution: {integrity: sha512-5cTOLSMs9eypEy8JUVvIKOu6NgvbJMnpG62VpIHrTmROdQ+L5mDAaI40g25k5vXti55JWNX5jCkq3HZxXBQANw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-parameters@7.24.7':
    resolution: {integrity: sha512-yGWW5Rr+sQOhK0Ot8hjDJuxU3XLRQGflvT4lhlSY0DFvdb3TwKaY26CJzHtYllU0vT9j58hc37ndFPsqT1SrzA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-private-methods@7.24.7':
    resolution: {integrity: sha512-COTCOkG2hn4JKGEKBADkA8WNb35TGkkRbI5iT845dB+NyqgO8Hn+ajPbSnIQznneJTa3d30scb6iz/DhH8GsJQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-private-property-in-object@7.24.7':
    resolution: {integrity: sha512-9z76mxwnwFxMyxZWEgdgECQglF2Q7cFLm0kMf8pGwt+GSJsY0cONKj/UuO4bOH0w/uAel3ekS4ra5CEAyJRmDA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-property-literals@7.24.7':
    resolution: {integrity: sha512-EMi4MLQSHfd2nrCqQEWxFdha2gBCqU4ZcCng4WBGZ5CJL4bBRW0ptdqqDdeirGZcpALazVVNJqRmsO8/+oNCBA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-constant-elements@7.25.1':
    resolution: {integrity: sha512-SLV/giH/V4SmloZ6Dt40HjTGTAIkxn33TVIHxNGNvo8ezMhrxBkzisj4op1KZYPIOHFLqhv60OHvX+YRu4xbmQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-display-name@7.24.7':
    resolution: {integrity: sha512-H/Snz9PFxKsS1JLI4dJLtnJgCJRoo0AUm3chP6NYr+9En1JMKloheEiLIhlp5MDVznWo+H3AAC1Mc8lmUEpsgg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-jsx-development@7.24.7':
    resolution: {integrity: sha512-QG9EnzoGn+Qar7rxuW+ZOsbWOt56FvvI93xInqsZDC5fsekx1AlIO4KIJ5M+D0p0SqSH156EpmZyXq630B8OlQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-jsx@7.25.2':
    resolution: {integrity: sha512-KQsqEAVBpU82NM/B/N9j9WOdphom1SZH3R+2V7INrQUH+V9EBFwZsEJl8eBIVeQE62FxJCc70jzEZwqU7RcVqA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-pure-annotations@7.24.7':
    resolution: {integrity: sha512-PLgBVk3fzbmEjBJ/u8kFzOqS9tUeDjiaWud/rRym/yjCo/M9cASPlnrd2ZmmZpQT40fOOrvR8jh+n8jikrOhNA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-regenerator@7.24.7':
    resolution: {integrity: sha512-lq3fvXPdimDrlg6LWBoqj+r/DEWgONuwjuOuQCSYgRroXDH/IdM1C0IZf59fL5cHLpjEH/O6opIRBbqv7ELnuA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-reserved-words@7.24.7':
    resolution: {integrity: sha512-0DUq0pHcPKbjFZCfTss/pGkYMfy3vFWydkUBd9r0GHpIyfs2eCDENvqadMycRS9wZCXR41wucAfJHJmwA0UmoQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-shorthand-properties@7.24.7':
    resolution: {integrity: sha512-KsDsevZMDsigzbA09+vacnLpmPH4aWjcZjXdyFKGzpplxhbeB4wYtury3vglQkg6KM/xEPKt73eCjPPf1PgXBA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-spread@7.24.7':
    resolution: {integrity: sha512-x96oO0I09dgMDxJaANcRyD4ellXFLLiWhuwDxKZX5g2rWP1bTPkBSwCYv96VDXVT1bD9aPj8tppr5ITIh8hBng==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-sticky-regex@7.24.7':
    resolution: {integrity: sha512-kHPSIJc9v24zEml5geKg9Mjx5ULpfncj0wRpYtxbvKyTtHCYDkVE3aHQ03FrpEo4gEe2vrJJS1Y9CJTaThA52g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-template-literals@7.24.7':
    resolution: {integrity: sha512-AfDTQmClklHCOLxtGoP7HkeMw56k1/bTQjwsfhL6pppo/M4TOBSq+jjBUBLmV/4oeFg4GWMavIl44ZeCtmmZTw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-typeof-symbol@7.24.8':
    resolution: {integrity: sha512-adNTUpDCVnmAE58VEqKlAA6ZBlNkMnWD0ZcW76lyNFN3MJniyGFZfNwERVk8Ap56MCnXztmDr19T4mPTztcuaw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-typescript@7.25.2':
    resolution: {integrity: sha512-lBwRvjSmqiMYe/pS0+1gggjJleUJi7NzjvQ1Fkqtt69hBa/0t1YuW/MLQMAPixfwaQOHUXsd6jeU3Z+vdGv3+A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-unicode-escapes@7.24.7':
    resolution: {integrity: sha512-U3ap1gm5+4edc2Q/P+9VrBNhGkfnf+8ZqppY71Bo/pzZmXhhLdqgaUl6cuB07O1+AQJtCLfaOmswiNbSQ9ivhw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-unicode-property-regex@7.24.7':
    resolution: {integrity: sha512-uH2O4OV5M9FZYQrwc7NdVmMxQJOCCzFeYudlZSzUAHRFeOujQefa92E74TQDVskNHCzOXoigEuoyzHDhaEaK5w==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-unicode-regex@7.24.7':
    resolution: {integrity: sha512-hlQ96MBZSAXUq7ltkjtu3FJCCSMx/j629ns3hA3pXnBXjanNP0LHi+JpPeA81zaWgVK1VGH95Xuy7u0RyQ8kMg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-unicode-sets-regex@7.24.7':
    resolution: {integrity: sha512-2G8aAvF4wy1w/AGZkemprdGMRg5o6zPNhbHVImRz3lss55TYCBd6xStN19rt8XJHq20sqV0JbyWjOWwQRwV/wg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/preset-env@7.25.3':
    resolution: {integrity: sha512-QsYW7UeAaXvLPX9tdVliMJE7MD7M6MLYVTovRTIwhoYQVFHR1rM4wO8wqAezYi3/BpSD+NzVCZ69R6smWiIi8g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/preset-modules@0.1.6-no-external-plugins':
    resolution: {integrity: sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0 || ^8.0.0-0 <8.0.0

  '@babel/preset-react@7.24.7':
    resolution: {integrity: sha512-AAH4lEkpmzFWrGVlHaxJB7RLH21uPQ9+He+eFLWHmF9IuFQVugz8eAsamaW0DXRrTfco5zj1wWtpdcXJUOfsag==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/preset-typescript@7.24.7':
    resolution: {integrity: sha512-SyXRe3OdWwIwalxDg5UtJnJQO+YPcTfwiIY2B0Xlddh9o7jpWLvv8X1RthIeDOxQ+O1ML5BLPCONToObyVQVuQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/regjsgen@0.8.0':
    resolution: {integrity: sha512-x/rqGMdzj+fWZvCOYForTghzbtqPDZ5gPwaoNGHdgDfF2QA/XZbCBp4Moo5scrkAMPhB7z26XM/AaHuIJdgauA==}

  '@babel/runtime@7.25.0':
    resolution: {integrity: sha512-7dRy4DwXwtzBrPbZflqxnvfxLF8kdZXPkhymtDeFoFqE6ldzjQFgYTtYIFARcLEYDrqfBfYcZt1WqFxRoyC9Rw==}
    engines: {node: '>=6.9.0'}

  '@babel/template@7.24.7':
    resolution: {integrity: sha512-jYqfPrU9JTF0PmPy1tLYHW4Mp4KlgxJD9l2nP9fD6yT/ICi554DmrWBAEYpIelzjHf1msDP3PxJIRt/nFNfBig==}
    engines: {node: '>=6.9.0'}

  '@babel/template@7.25.0':
    resolution: {integrity: sha512-aOOgh1/5XzKvg1jvVz7AVrx2piJ2XBi227DHmbY6y+bM9H2FlN+IfecYu4Xl0cNiiVejlsCri89LUsbj8vJD9Q==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.24.7':
    resolution: {integrity: sha512-yb65Ed5S/QAcewNPh0nZczy9JdYXkkAbIsEo+P7BE7yO3txAY30Y/oPa3QkQ5It3xVG2kpKMg9MsdxZaO31uKA==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.25.3':
    resolution: {integrity: sha512-HefgyP1x754oGCsKmV5reSmtV7IXj/kpaE1XYY+D9G5PvKKoFfSbiS4M77MdjuwlZKDIKFCffq9rPU+H/s3ZdQ==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.24.9':
    resolution: {integrity: sha512-xm8XrMKz0IlUdocVbYJe0Z9xEgidU7msskG8BbhnTPK/HZ2z/7FP7ykqPgrUH+C+r414mNfNWam1f2vqOjqjYQ==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.25.2':
    resolution: {integrity: sha512-YTnYtra7W9e6/oAZEHj0bJehPRUlLH9/fbpT5LfB0NhQXyALCRkRs3zH9v07IYhkgpqX6Z78FnuccZr/l4Fs4Q==}
    engines: {node: '>=6.9.0'}

  '@bcoe/v8-coverage@0.2.3':
    resolution: {integrity: sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==}

  '@bitcoinerlab/secp256k1@1.1.1':
    resolution: {integrity: sha512-uhjW51WfVLpnHN7+G0saDcM/k9IqcyTbZ+bDgLF3AX8V/a3KXSE9vn7UPBrcdU72tp0J4YPR7BHp2m7MLAZ/1Q==}

  '@cell-studio/mempool.js@2.5.3':
    resolution: {integrity: sha512-GRJYCErcL4kMWo4us1gAn/rwXuhPgrIzKQgPO+Ppg7Js0lD2IU80+VzLuNLeRw/6NyezfjjBSKXUFWqKh0aJ3w==}

  '@ckb-lumos/base@0.22.2':
    resolution: {integrity: sha512-nosUCSa5rTV2IzxbEpqzrvUeQNXB66mgA0h40+QEdnE/gV/s4ke83AScrTAxWkErJy1G/sToIHCc2kWwO95DfQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/base@0.23.0':
    resolution: {integrity: sha512-8aLFsUyWIK0rT7GQlYFuXyiG5lQ2bLRK2GvUsxv5G7I3nJ1UyxjwvVOdtlsR/cwhzOam3ujwqASqBIayBL6GLA==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/bi@0.22.2':
    resolution: {integrity: sha512-F+dLC/tE+xdtNuGgJxlDqbgX/f8azg1tvIFTR5mu7Vhz08nkFgnA+Z+yC0t/I3fDwwH4p/SlGP/yducrsfVTqw==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/bi@0.23.0':
    resolution: {integrity: sha512-KAy+lyVpL+Al4XD+c9tHrA9DSpHkMusyXtTS81aNZi5MyL6F9jrVmFcqLorhfyfl8Fsv2sEjMe5Neo2Y+w/RJQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/ckb-indexer@0.23.0':
    resolution: {integrity: sha512-yLODLJzvtz4M6W6OJR4iRbBTUGrKReV2dhVePPjbH/HRkRY6f6J6cEM9+qM2I3QABmaCXeAM3hWvnWU9hjalQQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/codec@0.22.2':
    resolution: {integrity: sha512-P5SyhT2qkJwCwcHF3yMLInE0z3wWHDkqJNbSM2Q9oyu0+9kjMQfexNia3T+atBl2M7ELFzN5WvttojYr6DrCwQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/codec@0.23.0':
    resolution: {integrity: sha512-FwYooXnsFDjlHHnlFnCTB1UbBzV72I0VjkRpeauFk5nQ4+/75xl28ywK3J14M+0aHTnYU9msXUTRDAGqC0CaNQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/common-scripts@0.23.0':
    resolution: {integrity: sha512-Dwic0Al94afdGNu+TGAMmZiU5OVF/zvXbzhCvNmkFS25t8BxPdFjGEc0MlWBI4ZSEoGRrC0O+BOxjzfl5VxSYg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/config-manager@0.23.0':
    resolution: {integrity: sha512-MvNyzGIJTmIpEf5WJB3TkE4icZyZ2HZhFIfJB2SXDRAC84E02jxENPelCnqRbM1rlFHnxjh/5a/oCi5LcXefag==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/hd@0.23.0':
    resolution: {integrity: sha512-z7EsR/GeX54hq4ukqwW3nrqLCsYrTWIFAjZLR1Ao8xycqQp0IBjCWZLLjRrZY6krbUQpVOoiKo3NBLpPW36LXg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/helpers@0.23.0':
    resolution: {integrity: sha512-yfD28vSn1BBk8BA+/ivL7pF3rMsx4OPQ+UUJjsQiR1zGdkNR3zhJOecgICeddJGYDTBBDVgwHcuyoekLxQzmGg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/light-client@0.23.0':
    resolution: {integrity: sha512-O+dbfubDjl0iODiQ8Q+RVJLfuXYNCN6c0am8xEv4vvazLwfw1y/vn6fG/pFu9Mc1GahZ58y9o6fkUgs8ujH3Mg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/lumos@0.23.0':
    resolution: {integrity: sha512-ocsmzgTgevVwyQeQkUZrg4PLJCfX48D5MEBNYTMoGh5b1g0f1iEBHcAgw4WBGOKgMJQmGRmWB5P6tPDZ3OZBwQ==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/rpc@0.23.0':
    resolution: {integrity: sha512-NEY1Wb2cNMYdHwcZYtd8XZ3CP6WGPd25hcsudoDAFlAt9vjHsPlNiwSS7tcZCZfg1XiJy3taViVgG8pFemgpbA==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/toolkit@0.22.2':
    resolution: {integrity: sha512-HmKz2dGQeaW2XDqkvjJfLv50VQWGKbthg2RDfIxGsZyjveluRROTyuHP1akypy4pqF8TApGLsXci2MaHCRau+w==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/toolkit@0.23.0':
    resolution: {integrity: sha512-7LTsUFfoNCBWJLgh+V/QFnemjGw+y4mmLeQvubwYuJqIPIhIpwKUuKRzkvVG8snA8xVQSfjSSQOs5m3mKp66Kg==}
    engines: {node: '>=12.0.0'}

  '@ckb-lumos/transaction-manager@0.23.0':
    resolution: {integrity: sha512-sfwt2g8JlYxr5jRx5r/UZNffTpkwn3sh4dD2THzKmX0S1CsSgww2D1ZD7yruWwSu05ZLKlDPFVKyJ50tNc3LuQ==}
    engines: {node: '>=12.0.0'}

  '@clack/core@0.3.4':
    resolution: {integrity: sha512-H4hxZDXgHtWTwV3RAVenqcC4VbJZNegbBjlPvzOzCouXtS2y3sDvlO3IsbrPNWuLWPPlYVYPghQdSF64683Ldw==}

  '@clack/prompts@0.7.0':
    resolution: {integrity: sha512-0MhX9/B4iL6Re04jPrttDm+BsP8y6mS7byuv0BvXgdXhbV5PdlsHt55dvNsuBCPZ7xq1oTAOOuotR9NFbQyMSA==}
    bundledDependencies:
      - is-unicode-supported

  '@colors/colors@1.5.0':
    resolution: {integrity: sha512-ooWCrlZP11i8GImSjTHYHLkvFDP48nS4+204nGb1RiX/WXYHmJA2III9/e2DWVabCESdW7hBAEzHRqUn9OUVvQ==}
    engines: {node: '>=0.1.90'}

  '@cspell/cspell-bundled-dicts@8.13.1':
    resolution: {integrity: sha512-ylAwnIdxBMJ9v6BHpFAQFZM+5zbybLtqVQJG7zQePts4e0/Qr2xjYFbC3F+fovZqyXPIx24BR+S6gFJNO1OdAw==}
    engines: {node: '>=18'}

  '@cspell/cspell-json-reporter@8.13.1':
    resolution: {integrity: sha512-vYZTBRkYjpNBifGNbYQsgIXesDEdUa9QAwllDcLZGKbhh5mY/C1ygPnAVpYDYiJNt1WCeIqW286DUyjRjkmHeA==}
    engines: {node: '>=18'}

  '@cspell/cspell-pipe@8.13.1':
    resolution: {integrity: sha512-acLWTQv3yWfeWXMds/cfQKZapslOrLHVL4VDp4rFyL/EnfgaCr7Ew9hQ7zAIARY3r/n0dByqWbOt2HKthdhx/g==}
    engines: {node: '>=18'}

  '@cspell/cspell-resolver@8.13.1':
    resolution: {integrity: sha512-EGdb7KLYCklV3sLxf/895b7s6sExh8DCHZFpDos2hjKwMt+F4ynsu1+ceybQtqoUF/MsyLoJXrrmPvV2uGVmUQ==}
    engines: {node: '>=18'}

  '@cspell/cspell-service-bus@8.13.1':
    resolution: {integrity: sha512-oLFJfxuB1rwGXn3eD5qSF9nf0lHu6YjO0JcrjWhAZQ0r3AsO97gsX50wwCFCw6szVU3rd1cTUktW0KYEZUY6dA==}
    engines: {node: '>=18'}

  '@cspell/cspell-types@8.13.1':
    resolution: {integrity: sha512-9dJdmyXLXJVesCJa/DWgwKsEC9p2RRFc6KORcLhNvtm1tE9TvCXiu5jV47sOmYXd6Hwan8IurBXXTz82CLVjPQ==}
    engines: {node: '>=18'}

  '@cspell/dict-ada@4.0.2':
    resolution: {integrity: sha512-0kENOWQeHjUlfyId/aCM/mKXtkEgV0Zu2RhUXCBr4hHo9F9vph+Uu8Ww2b0i5a4ZixoIkudGA+eJvyxrG1jUpA==}

  '@cspell/dict-aws@4.0.3':
    resolution: {integrity: sha512-0C0RQ4EM29fH0tIYv+EgDQEum0QI6OrmjENC9u98pB8UcnYxGG/SqinuPxo+TgcEuInj0Q73MsBpJ1l5xUnrsw==}

  '@cspell/dict-bash@4.1.3':
    resolution: {integrity: sha512-tOdI3QVJDbQSwPjUkOiQFhYcu2eedmX/PtEpVWg0aFps/r6AyjUQINtTgpqMYnYuq8O1QUIQqnpx21aovcgZCw==}

  '@cspell/dict-companies@3.1.4':
    resolution: {integrity: sha512-y9e0amzEK36EiiKx3VAA+SHQJPpf2Qv5cCt5eTUSggpTkiFkCh6gRKQ97rVlrKh5GJrqinDwYIJtTsxuh2vy2Q==}

  '@cspell/dict-cpp@5.1.12':
    resolution: {integrity: sha512-6lXLOFIa+k/qBcu0bjaE/Kc6v3sh9VhsDOXD1Dalm3zgd0QIMjp5XBmkpSdCAK3pWCPV0Se7ysVLDfCea1BuXg==}

  '@cspell/dict-cryptocurrencies@5.0.0':
    resolution: {integrity: sha512-Z4ARIw5+bvmShL+4ZrhDzGhnc9znaAGHOEMaB/GURdS/jdoreEDY34wdN0NtdLHDO5KO7GduZnZyqGdRoiSmYA==}

  '@cspell/dict-csharp@4.0.2':
    resolution: {integrity: sha512-1JMofhLK+4p4KairF75D3A924m5ERMgd1GvzhwK2geuYgd2ZKuGW72gvXpIV7aGf52E3Uu1kDXxxGAiZ5uVG7g==}

  '@cspell/dict-css@4.0.12':
    resolution: {integrity: sha512-vGBgPM92MkHQF5/2jsWcnaahOZ+C6OE/fPvd5ScBP72oFY9tn5GLuomcyO0z8vWCr2e0nUSX1OGimPtcQAlvSw==}

  '@cspell/dict-dart@2.0.3':
    resolution: {integrity: sha512-cLkwo1KT5CJY5N5RJVHks2genFkNCl/WLfj+0fFjqNR+tk3tBI1LY7ldr9piCtSFSm4x9pO1x6IV3kRUY1lLiw==}

  '@cspell/dict-data-science@2.0.1':
    resolution: {integrity: sha512-xeutkzK0eBe+LFXOFU2kJeAYO6IuFUc1g7iRLr7HeCmlC4rsdGclwGHh61KmttL3+YHQytYStxaRBdGAXWC8Lw==}

  '@cspell/dict-django@4.1.0':
    resolution: {integrity: sha512-bKJ4gPyrf+1c78Z0Oc4trEB9MuhcB+Yg+uTTWsvhY6O2ncFYbB/LbEZfqhfmmuK/XJJixXfI1laF2zicyf+l0w==}

  '@cspell/dict-docker@1.1.7':
    resolution: {integrity: sha512-XlXHAr822euV36GGsl2J1CkBIVg3fZ6879ZOg5dxTIssuhUOCiV2BuzKZmt6aIFmcdPmR14+9i9Xq+3zuxeX0A==}

  '@cspell/dict-dotnet@5.0.2':
    resolution: {integrity: sha512-UD/pO2A2zia/YZJ8Kck/F6YyDSpCMq0YvItpd4YbtDVzPREfTZ48FjZsbYi4Jhzwfvc6o8R56JusAE58P+4sNQ==}

  '@cspell/dict-elixir@4.0.3':
    resolution: {integrity: sha512-g+uKLWvOp9IEZvrIvBPTr/oaO6619uH/wyqypqvwpmnmpjcfi8+/hqZH8YNKt15oviK8k4CkINIqNhyndG9d9Q==}

  '@cspell/dict-en-common-misspellings@2.0.4':
    resolution: {integrity: sha512-lvOiRjV/FG4pAGZL3PN2GCVHSTCE92cwhfLGGkOsQtxSmef6WCHfHwp9auafkBlX0yFQSKDfq6/TlpQbjbJBtQ==}

  '@cspell/dict-en-gb@1.1.33':
    resolution: {integrity: sha512-tKSSUf9BJEV+GJQAYGw5e+ouhEe2ZXE620S7BLKe3ZmpnjlNG9JqlnaBhkIMxKnNFkLY2BP/EARzw31AZnOv4g==}

  '@cspell/dict-en_us@4.3.23':
    resolution: {integrity: sha512-l0SoEQBsi3zDSl3OuL4/apBkxjuj4hLIg/oy6+gZ7LWh03rKdF6VNtSZNXWAmMY+pmb1cGA3ouleTiJIglbsIg==}

  '@cspell/dict-filetypes@3.0.4':
    resolution: {integrity: sha512-IBi8eIVdykoGgIv5wQhOURi5lmCNJq0we6DvqKoPQJHthXbgsuO1qrHSiUVydMiQl/XvcnUWTMeAlVUlUClnVg==}

  '@cspell/dict-fonts@4.0.0':
    resolution: {integrity: sha512-t9V4GeN/m517UZn63kZPUYP3OQg5f0OBLSd3Md5CU3eH1IFogSvTzHHnz4Wqqbv8NNRiBZ3HfdY/pqREZ6br3Q==}

  '@cspell/dict-fsharp@1.0.1':
    resolution: {integrity: sha512-23xyPcD+j+NnqOjRHgW3IU7Li912SX9wmeefcY0QxukbAxJ/vAN4rBpjSwwYZeQPAn3fxdfdNZs03fg+UM+4yQ==}

  '@cspell/dict-fullstack@3.2.0':
    resolution: {integrity: sha512-sIGQwU6G3rLTo+nx0GKyirR5dQSFeTIzFTOrURw51ISf+jKG9a3OmvsVtc2OANfvEAOLOC9Wfd8WYhmsO8KRDQ==}

  '@cspell/dict-gaming-terms@1.0.5':
    resolution: {integrity: sha512-C3riccZDD3d9caJQQs1+MPfrUrQ+0KHdlj9iUR1QD92FgTOF6UxoBpvHUUZ9YSezslcmpFQK4xQQ5FUGS7uWfw==}

  '@cspell/dict-git@3.0.0':
    resolution: {integrity: sha512-simGS/lIiXbEaqJu9E2VPoYW1OTC2xrwPPXNXFMa2uo/50av56qOuaxDrZ5eH1LidFXwoc8HROCHYeKoNrDLSw==}

  '@cspell/dict-golang@6.0.9':
    resolution: {integrity: sha512-etDt2WQauyEQDA+qPS5QtkYTb2I9l5IfQftAllVoB1aOrT6bxxpHvMEpJ0Hsn/vezxrCqa/BmtUbRxllIxIuSg==}

  '@cspell/dict-google@1.0.1':
    resolution: {integrity: sha512-dQr4M3n95uOhtloNSgB9tYYGXGGEGEykkFyRtfcp5pFuEecYUa0BSgtlGKx9RXVtJtKgR+yFT/a5uQSlt8WjqQ==}

  '@cspell/dict-haskell@4.0.1':
    resolution: {integrity: sha512-uRrl65mGrOmwT7NxspB4xKXFUenNC7IikmpRZW8Uzqbqcu7ZRCUfstuVH7T1rmjRgRkjcIjE4PC11luDou4wEQ==}

  '@cspell/dict-html-symbol-entities@4.0.0':
    resolution: {integrity: sha512-HGRu+48ErJjoweR5IbcixxETRewrBb0uxQBd6xFGcxbEYCX8CnQFTAmKI5xNaIt2PKaZiJH3ijodGSqbKdsxhw==}

  '@cspell/dict-html@4.0.5':
    resolution: {integrity: sha512-p0brEnRybzSSWi8sGbuVEf7jSTDmXPx7XhQUb5bgG6b54uj+Z0Qf0V2n8b/LWwIPJNd1GygaO9l8k3HTCy1h4w==}

  '@cspell/dict-java@5.0.7':
    resolution: {integrity: sha512-ejQ9iJXYIq7R09BScU2y5OUGrSqwcD+J5mHFOKbduuQ5s/Eh/duz45KOzykeMLI6KHPVxhBKpUPBWIsfewECpQ==}

  '@cspell/dict-julia@1.0.1':
    resolution: {integrity: sha512-4JsCLCRhhLMLiaHpmR7zHFjj1qOauzDI5ZzCNQS31TUMfsOo26jAKDfo0jljFAKgw5M2fEG7sKr8IlPpQAYrmQ==}

  '@cspell/dict-k8s@1.0.6':
    resolution: {integrity: sha512-srhVDtwrd799uxMpsPOQqeDJY+gEocgZpoK06EFrb4GRYGhv7lXo9Fb+xQMyQytzOW9dw4DNOEck++nacDuymg==}

  '@cspell/dict-latex@4.0.0':
    resolution: {integrity: sha512-LPY4y6D5oI7D3d+5JMJHK/wxYTQa2lJMSNxps2JtuF8hbAnBQb3igoWEjEbIbRRH1XBM0X8dQqemnjQNCiAtxQ==}

  '@cspell/dict-lorem-ipsum@4.0.0':
    resolution: {integrity: sha512-1l3yjfNvMzZPibW8A7mQU4kTozwVZVw0AvFEdy+NcqtbxH+TvbSkNMqROOFWrkD2PjnKG0+Ea0tHI2Pi6Gchnw==}

  '@cspell/dict-lua@4.0.3':
    resolution: {integrity: sha512-lDHKjsrrbqPaea13+G9s0rtXjMO06gPXPYRjRYawbNmo4E/e3XFfVzeci3OQDQNDmf2cPOwt9Ef5lu2lDmwfJg==}

  '@cspell/dict-makefile@1.0.0':
    resolution: {integrity: sha512-3W9tHPcSbJa6s0bcqWo6VisEDTSN5zOtDbnPabF7rbyjRpNo0uHXHRJQF8gAbFzoTzBBhgkTmrfSiuyQm7vBUQ==}

  '@cspell/dict-monkeyc@1.0.6':
    resolution: {integrity: sha512-oO8ZDu/FtZ55aq9Mb67HtaCnsLn59xvhO/t2mLLTHAp667hJFxpp7bCtr2zOrR1NELzFXmKln/2lw/PvxMSvrA==}

  '@cspell/dict-node@5.0.1':
    resolution: {integrity: sha512-lax/jGz9h3Dv83v8LHa5G0bf6wm8YVRMzbjJPG/9rp7cAGPtdrga+XANFq+B7bY5+jiSA3zvj10LUFCFjnnCCg==}

  '@cspell/dict-npm@5.0.18':
    resolution: {integrity: sha512-weMTyxWpzz19q4wv9n183BtFvdD5fCjtze+bFKpl+4rO/YlPhHL2cXLAeexJz/VDSBecwX4ybTZYoknd1h2J4w==}

  '@cspell/dict-php@4.0.8':
    resolution: {integrity: sha512-TBw3won4MCBQ2wdu7kvgOCR3dY2Tb+LJHgDUpuquy3WnzGiSDJ4AVelrZdE1xu7mjFJUr4q48aB21YT5uQqPZA==}

  '@cspell/dict-powershell@5.0.5':
    resolution: {integrity: sha512-3JVyvMoDJesAATYGOxcUWPbQPUvpZmkinV3m8HL1w1RrjeMVXXuK7U1jhopSneBtLhkU+9HKFwgh9l9xL9mY2Q==}

  '@cspell/dict-public-licenses@2.0.7':
    resolution: {integrity: sha512-KlBXuGcN3LE7tQi/GEqKiDewWGGuopiAD0zRK1QilOx5Co8XAvs044gk4MNIQftc8r0nHeUI+irJKLGcR36DIQ==}

  '@cspell/dict-python@4.2.3':
    resolution: {integrity: sha512-C1CPX9wwEGgcHv/p7KfjuIOp1G6KNyx5gWYweAd6/KPv+ZpeM1v572zFUTmpO8WDuAfKFf00nqYL8/GmCENWBw==}

  '@cspell/dict-r@2.0.1':
    resolution: {integrity: sha512-KCmKaeYMLm2Ip79mlYPc8p+B2uzwBp4KMkzeLd5E6jUlCL93Y5Nvq68wV5fRLDRTf7N1LvofkVFWfDcednFOgA==}

  '@cspell/dict-ruby@5.0.2':
    resolution: {integrity: sha512-cIh8KTjpldzFzKGgrqUX4bFyav5lC52hXDKo4LbRuMVncs3zg4hcSf4HtURY+f2AfEZzN6ZKzXafQpThq3dl2g==}

  '@cspell/dict-rust@4.0.5':
    resolution: {integrity: sha512-DIvlPRDemjKQy8rCqftAgGNZxY5Bg+Ps7qAIJjxkSjmMETyDgl0KTVuaJPt7EK4jJt6uCZ4ILy96npsHDPwoXA==}

  '@cspell/dict-scala@5.0.3':
    resolution: {integrity: sha512-4yGb4AInT99rqprxVNT9TYb1YSpq58Owzq7zi3ZS5T0u899Y4VsxsBiOgHnQ/4W+ygi+sp+oqef8w8nABR2lkg==}

  '@cspell/dict-software-terms@4.0.4':
    resolution: {integrity: sha512-AHr3Wxa4pxbpKgxhyQseBmoJhdyeraeRGdQn0e8YD5pz4J6Mu47MLzKysasDKWK/yzmHQfwAsb2zm2k+ItMEUw==}

  '@cspell/dict-sql@2.1.4':
    resolution: {integrity: sha512-wsrNK6UBQ92IzQ4SqQqgM04BEYzqVsk3qZH3ZgascaqDtUgK6GI+z3Czi0rQ+9Qe2zKiklGnGMC8sJwYdlIw7g==}

  '@cspell/dict-svelte@1.0.2':
    resolution: {integrity: sha512-rPJmnn/GsDs0btNvrRBciOhngKV98yZ9SHmg8qI6HLS8hZKvcXc0LMsf9LLuMK1TmS2+WQFAan6qeqg6bBxL2Q==}

  '@cspell/dict-swift@2.0.1':
    resolution: {integrity: sha512-gxrCMUOndOk7xZFmXNtkCEeroZRnS2VbeaIPiymGRHj5H+qfTAzAKxtv7jJbVA3YYvEzWcVE2oKDP4wcbhIERw==}

  '@cspell/dict-terraform@1.0.0':
    resolution: {integrity: sha512-Ak+vy4HP/bOgzf06BAMC30+ZvL9mzv21xLM2XtfnBLTDJGdxlk/nK0U6QT8VfFLqJ0ZZSpyOxGsUebWDCTr/zQ==}

  '@cspell/dict-typescript@3.1.6':
    resolution: {integrity: sha512-1beC6O4P/j23VuxX+i0+F7XqPVc3hhiAzGJHEKqnWf5cWAXQtg0xz3xQJ5MvYx2a7iLaSa+lu7+05vG9UHyu9Q==}

  '@cspell/dict-vue@3.0.0':
    resolution: {integrity: sha512-niiEMPWPV9IeRBRzZ0TBZmNnkK3olkOPYxC1Ny2AX4TGlYRajcW0WUtoSHmvvjZNfWLSg2L6ruiBeuPSbjnG6A==}

  '@cspell/dynamic-import@8.13.1':
    resolution: {integrity: sha512-jMqJHWmQy+in99JMSFlaGV9P033gCx7DCZvGO/ZSeZ2EatrUTanJk3oTG1TZknZydb0nnxr1mgTWXN7PCAAXDg==}
    engines: {node: '>=18.0'}

  '@cspell/strong-weak-map@8.13.1':
    resolution: {integrity: sha512-ga1ibI9ZLJWNszfP7e6qQ8gnoQOP9rE/clALMAim9ssO6cmMhEEm+i1ROH4nsDfThd6sVlUJ0IOtx5dEqPmWxw==}
    engines: {node: '>=18'}

  '@cspell/url@8.13.1':
    resolution: {integrity: sha512-cCyojz5ovgGCexhez2urle4Q1UOEsp96lvl4pDmWNDHa/6n8dqiIn60SVzQIsAHzJ4yEV077RSaIrTlq/T+oSQ==}
    engines: {node: '>=18.0'}

  '@cspotcode/source-map-support@0.8.1':
    resolution: {integrity: sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==}
    engines: {node: '>=12'}

  '@csstools/postcss-cascade-layers@4.0.6':
    resolution: {integrity: sha512-Xt00qGAQyqAODFiFEJNkTpSUz5VfYqnDLECdlA/Vv17nl/OIV5QfTRHGAXrBGG5YcJyHpJ+GF9gF/RZvOQz4oA==}
    engines: {node: ^14 || ^16 || >=18}
    peerDependencies:
      postcss: ^8.4

  '@csstools/selector-specificity@3.1.1':
    resolution: {integrity: sha512-a7cxGcJ2wIlMFLlh8z2ONm+715QkPHiyJcxwQlKOz/03GPw1COpfhcmC9wm4xlZfp//jWHNNMwzjtqHXVWU9KA==}
    engines: {node: ^14 || ^16 || >=18}
    peerDependencies:
      postcss-selector-parser: ^6.0.13

  '@esbuild/aix-ppc64@0.20.2':
    resolution: {integrity: sha512-D+EBOJHXdNZcLJRBkhENNG8Wji2kgc9AZ9KiPr1JuZjsNtyHzrsfLRrY0tk2H2aoFu6RANO1y1iPPUCDYWkb5g==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.17.19':
    resolution: {integrity: sha512-KBMWvEZooR7+kzY0BtbTQn0OAYY7CsiydT63pVEaPtVYF0hXbUaOyZog37DKxK7NF3XacBJOpYT4adIJh+avxA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm64@0.20.2':
    resolution: {integrity: sha512-mRzjLacRtl/tWU0SvD8lUEwb61yP9cqQo6noDZP/O8VkwafSYwZ4yWy24kan8jE/IMERpYncRt2dw438LP3Xmg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.17.19':
    resolution: {integrity: sha512-rIKddzqhmav7MSmoFCmDIb6e2W57geRsM94gV2l38fzhXMwq7hZoClug9USI2pFRGL06f4IOPHHpFNOkWieR8A==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-arm@0.20.2':
    resolution: {integrity: sha512-t98Ra6pw2VaDhqNWO2Oph2LXbz/EJcnLmKLGBJwEwXX/JAN83Fym1rU8l0JUWK6HkIbWONCSSatf4sf2NBRx/w==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.17.19':
    resolution: {integrity: sha512-uUTTc4xGNDT7YSArp/zbtmbhO0uEEK9/ETW29Wk1thYUJBz3IVnvgEiEwEa9IeLyvnpKrWK64Utw2bgUmDveww==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/android-x64@0.20.2':
    resolution: {integrity: sha512-btzExgV+/lMGDDa194CcUQm53ncxzeBrWJcncOBxuC6ndBkKxnHdFJn86mCIgTELsooUmwUm9FkhSp5HYu00Rg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.17.19':
    resolution: {integrity: sha512-80wEoCfF/hFKM6WE1FyBHc9SfUblloAWx6FJkFWTWiCoht9Mc0ARGEM47e67W9rI09YoUxJL68WHfDRYEAvOhg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-arm64@0.20.2':
    resolution: {integrity: sha512-4J6IRT+10J3aJH3l1yzEg9y3wkTDgDk7TSDFX+wKFiWjqWp/iCfLIYzGyasx9l0SAFPT1HwSCR+0w/h1ES/MjA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.17.19':
    resolution: {integrity: sha512-IJM4JJsLhRYr9xdtLytPLSH9k/oxR3boaUIYiHkAawtwNOXKE8KoU8tMvryogdcT8AU+Bflmh81Xn6Q0vTZbQw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/darwin-x64@0.20.2':
    resolution: {integrity: sha512-tBcXp9KNphnNH0dfhv8KYkZhjc+H3XBkF5DKtswJblV7KlT9EI2+jeA8DgBjp908WEuYll6pF+UStUCfEpdysA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.17.19':
    resolution: {integrity: sha512-pBwbc7DufluUeGdjSU5Si+P3SoMF5DQ/F/UmTSb8HXO80ZEAJmrykPyzo1IfNbAoaqw48YRpv8shwd1NoI0jcQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-arm64@0.20.2':
    resolution: {integrity: sha512-d3qI41G4SuLiCGCFGUrKsSeTXyWG6yem1KcGZVS+3FYlYhtNoNgYrWcvkOoaqMhwXSMrZRl69ArHsGJ9mYdbbw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.17.19':
    resolution: {integrity: sha512-4lu+n8Wk0XlajEhbEffdy2xy53dpR06SlzvhGByyg36qJw6Kpfk7cp45DR/62aPH9mtJRmIyrXAS5UWBrJT6TQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.20.2':
    resolution: {integrity: sha512-d+DipyvHRuqEeM5zDivKV1KuXn9WeRX6vqSqIDgwIfPQtwMP4jaDsQsDncjTDDsExT4lR/91OLjRo8bmC1e+Cw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.17.19':
    resolution: {integrity: sha512-ct1Tg3WGwd3P+oZYqic+YZF4snNl2bsnMKRkb3ozHmnM0dGWuxcPTTntAF6bOP0Sp4x0PjSF+4uHQ1xvxfRKqg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm64@0.20.2':
    resolution: {integrity: sha512-9pb6rBjGvTFNira2FLIWqDk/uaf42sSyLE8j1rnUpuzsODBq7FvpwHYZxQ/It/8b+QOS1RYfqgGFNLRI+qlq2A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.17.19':
    resolution: {integrity: sha512-cdmT3KxjlOQ/gZ2cjfrQOtmhG4HJs6hhvm3mWSRDPtZ/lP5oe8FWceS10JaSJC13GBd4eH/haHnqf7hhGNLerA==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-arm@0.20.2':
    resolution: {integrity: sha512-VhLPeR8HTMPccbuWWcEUD1Az68TqaTYyj6nfE4QByZIQEQVWBB8vup8PpR7y1QHL3CpcF6xd5WVBU/+SBEvGTg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.17.19':
    resolution: {integrity: sha512-w4IRhSy1VbsNxHRQpeGCHEmibqdTUx61Vc38APcsRbuVgK0OPEnQ0YD39Brymn96mOx48Y2laBQGqgZ0j9w6SQ==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-ia32@0.20.2':
    resolution: {integrity: sha512-o10utieEkNPFDZFQm9CoP7Tvb33UutoJqg3qKf1PWVeeJhJw0Q347PxMvBgVVFgouYLGIhFYG0UGdBumROyiig==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.17.19':
    resolution: {integrity: sha512-2iAngUbBPMq439a+z//gE+9WBldoMp1s5GWsUSgqHLzLJ9WoZLZhpwWuym0u0u/4XmZ3gpHmzV84PonE+9IIdQ==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-loong64@0.20.2':
    resolution: {integrity: sha512-PR7sp6R/UC4CFVomVINKJ80pMFlfDfMQMYynX7t1tNTeivQ6XdX5r2XovMmha/VjR1YN/HgHWsVcTRIMkymrgQ==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.17.19':
    resolution: {integrity: sha512-LKJltc4LVdMKHsrFe4MGNPp0hqDFA1Wpt3jE1gEyM3nKUvOiO//9PheZZHfYRfYl6AwdTH4aTcXSqBerX0ml4A==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-mips64el@0.20.2':
    resolution: {integrity: sha512-4BlTqeutE/KnOiTG5Y6Sb/Hw6hsBOZapOVF6njAESHInhlQAghVVZL1ZpIctBOoTFbQyGW+LsVYZ8lSSB3wkjA==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.17.19':
    resolution: {integrity: sha512-/c/DGybs95WXNS8y3Ti/ytqETiW7EU44MEKuCAcpPto3YjQbyK3IQVKfF6nbghD7EcLUGl0NbiL5Rt5DMhn5tg==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-ppc64@0.20.2':
    resolution: {integrity: sha512-rD3KsaDprDcfajSKdn25ooz5J5/fWBylaaXkuotBDGnMnDP1Uv5DLAN/45qfnf3JDYyJv/ytGHQaziHUdyzaAg==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.17.19':
    resolution: {integrity: sha512-FC3nUAWhvFoutlhAkgHf8f5HwFWUL6bYdvLc/TTuxKlvLi3+pPzdZiFKSWz/PF30TB1K19SuCxDTI5KcqASJqA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-riscv64@0.20.2':
    resolution: {integrity: sha512-snwmBKacKmwTMmhLlz/3aH1Q9T8v45bKYGE3j26TsaOVtjIag4wLfWSiZykXzXuE1kbCE+zJRmwp+ZbIHinnVg==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.17.19':
    resolution: {integrity: sha512-IbFsFbxMWLuKEbH+7sTkKzL6NJmG2vRyy6K7JJo55w+8xDk7RElYn6xvXtDW8HCfoKBFK69f3pgBJSUSQPr+4Q==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-s390x@0.20.2':
    resolution: {integrity: sha512-wcWISOobRWNm3cezm5HOZcYz1sKoHLd8VL1dl309DiixxVFoFe/o8HnwuIwn6sXre88Nwj+VwZUvJf4AFxkyrQ==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.17.19':
    resolution: {integrity: sha512-68ngA9lg2H6zkZcyp22tsVt38mlhWde8l3eJLWkyLrp4HwMUr3c1s/M2t7+kHIhvMjglIBrFpncX1SzMckomGw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/linux-x64@0.20.2':
    resolution: {integrity: sha512-1MdwI6OOTsfQfek8sLwgyjOXAu+wKhLEoaOLTjbijk6E2WONYpH9ZU2mNtR+lZ2B4uwr+usqGuVfFT9tMtGvGw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-x64@0.17.19':
    resolution: {integrity: sha512-CwFq42rXCR8TYIjIfpXCbRX0rp1jo6cPIUPSaWwzbVI4aOfX96OXY8M6KNmtPcg7QjYeDmN+DD0Wp3LaBOLf4Q==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.20.2':
    resolution: {integrity: sha512-K8/DhBxcVQkzYc43yJXDSyjlFeHQJBiowJ0uVL6Tor3jGQfSGHNNJcWxNbOI8v5k82prYqzPuwkzHt3J1T1iZQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-x64@0.17.19':
    resolution: {integrity: sha512-cnq5brJYrSZ2CF6c35eCmviIN3k3RczmHz8eYaVlNasVqsNY+JKohZU5MKmaOI+KkllCdzOKKdPs762VCPC20g==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.20.2':
    resolution: {integrity: sha512-eMpKlV0SThJmmJgiVyN9jTPJ2VBPquf6Kt/nAoo6DgHAoN57K15ZghiHaMvqjCye/uU4X5u3YSMgVBI1h3vKrQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.17.19':
    resolution: {integrity: sha512-vCRT7yP3zX+bKWFeP/zdS6SqdWB8OIpaRq/mbXQxTGHnIxspRtigpkUcDMlSCOejlHowLqII7K2JKevwyRP2rg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/sunos-x64@0.20.2':
    resolution: {integrity: sha512-2UyFtRC6cXLyejf/YEld4Hajo7UHILetzE1vsRcGL3earZEW77JxrFjH4Ez2qaTiEfMgAXxfAZCm1fvM/G/o8w==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.17.19':
    resolution: {integrity: sha512-yYx+8jwowUstVdorcMdNlzklLYhPxjniHWFKgRqH7IFlUEa0Umu3KuYplf1HUZZ422e3NU9F4LGb+4O0Kdcaag==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-arm64@0.20.2':
    resolution: {integrity: sha512-GRibxoawM9ZCnDxnP3usoUDO9vUkpAxIIZ6GQI+IlVmr5kP3zUq+l17xELTHMWTWzjxa2guPNyrpq1GWmPvcGQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.17.19':
    resolution: {integrity: sha512-eggDKanJszUtCdlVs0RB+h35wNlb5v4TWEkq4vZcmVt5u/HiDZrTXe2bWFQUez3RgNHwx/x4sk5++4NSSicKkw==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-ia32@0.20.2':
    resolution: {integrity: sha512-HfLOfn9YWmkSKRQqovpnITazdtquEW8/SoHW7pWpuEeguaZI4QnCRW6b+oZTztdBnZOS2hqJ6im/D5cPzBTTlQ==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.17.19':
    resolution: {integrity: sha512-lAhycmKnVOuRYNtRtatQR1LPQf2oYCkRGkSFnseDAKPl8lu5SOsK/e1sXe5a0Pc5kHIHe6P2I/ilntNv2xf3cA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@esbuild/win32-x64@0.20.2':
    resolution: {integrity: sha512-N49X4lJX27+l9jbLKSqZ6bKNjzQvHaT8IIFUy+YIqmXQdjYCToGWwOItDrfby14c78aDd5NHQl29xingXfCdLQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.4.0':
    resolution: {integrity: sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.11.0':
    resolution: {integrity: sha512-G/M/tIiMrTAxEWRfLfQJMmGNX28IxBg4PBz8XqQhqUHLFI6TL2htpIB1iQCj144V5ee/JaKyT9/WZ0MGZWfA7A==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/eslintrc@2.1.4':
    resolution: {integrity: sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@eslint/js@8.57.0':
    resolution: {integrity: sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@exact-realty/multipart-parser@1.0.14':
    resolution: {integrity: sha512-ln1+s1XOvRY9NRof3lpjWJZfSoV5XOWdVgK7sYeE3TAt0brtB+pIPJpSbxaol/490re2rcMEo24VZXeffKm8Aw==}
    engines: {node: '>=16.0.0', npm: '>=8.0.0'}

  '@fastify/ajv-compiler@3.6.0':
    resolution: {integrity: sha512-LwdXQJjmMD+GwLOkP7TVC68qa+pSSogeWWmznRJ/coyTcfe9qA05AHFSe1eZFwK6q+xVRpChnvFUkf1iYaSZsQ==}

  '@fastify/cors@9.0.1':
    resolution: {integrity: sha512-YY9Ho3ovI+QHIL2hW+9X4XqQjXLjJqsU+sMV/xFsxZkE8p3GNnYVFpoOxF7SsP5ZL76gwvbo3V9L+FIekBGU4Q==}

  '@fastify/error@3.4.1':
    resolution: {integrity: sha512-wWSvph+29GR783IhmvdwWnN4bUxTD01Vm5Xad4i7i1VuAOItLvbPAb69sb0IQ2N57yprvhNIwAP5B6xfKTmjmQ==}

  '@fastify/fast-json-stringify-compiler@4.3.0':
    resolution: {integrity: sha512-aZAXGYo6m22Fk1zZzEUKBvut/CIIQe/BapEORnxiD5Qr0kPHqqI69NtEMCme74h+at72sPhbkb4ZrLd1W3KRLA==}

  '@fastify/formbody@7.4.0':
    resolution: {integrity: sha512-H3C6h1GN56/SMrZS8N2vCT2cZr7mIHzBHzOBa5OPpjfB/D6FzP9mMpE02ZzrFX0ANeh0BAJdoXKOF2e7IbV+Og==}

  '@fastify/merge-json-schemas@0.1.1':
    resolution: {integrity: sha512-fERDVz7topgNjtXsJTTW1JKLy0rhuLRcquYqNR9rF7OcVpCa2OVW49ZPDIhaRRCaUuvVxI+N416xUoF76HNSXA==}

  '@fastify/middie@8.3.3':
    resolution: {integrity: sha512-+WHavMQr9CNTZoy2cjoDxoWp76kZ3JKjAtZj5sXNlxX5XBzHig0TeCPfPc+1+NQmliXtndT3PFwAjrQHE/6wnQ==}

  '@floating-ui/core@1.6.5':
    resolution: {integrity: sha512-8GrTWmoFhm5BsMZOTHeGD2/0FLKLQQHvO/ZmQga4tKempYRLz8aqJGqXVuQgisnMObq2YZ2SgkwctN1LOOxcqA==}

  '@floating-ui/dom@1.6.10':
    resolution: {integrity: sha512-fskgCFv8J8OamCmyun8MfjB1Olfn+uZKjOKZ0vhYF3gRmEUXcGOjxWL8bBr7i4kIuPZ2KD2S3EUIOxnjC8kl2A==}

  '@floating-ui/dom@1.6.5':
    resolution: {integrity: sha512-Nsdud2X65Dz+1RHjAIP0t8z5e2ff/IRbei6BqFrl1urT8sDVzM1HMQ+R0XcU5ceRfyO3I6ayeqIfh+6Wb8LGTw==}

  '@floating-ui/utils@0.2.5':
    resolution: {integrity: sha512-sTcG+QZ6fdEUObICavU+aB3Mp8HY4n14wYHdxK4fXjPmv3PXZZeY5RaguJmGyeH/CJQhX3fqKUtS4qc1LoHwhQ==}

  '@floating-ui/utils@0.2.8':
    resolution: {integrity: sha512-kym7SodPp8/wloecOpcmSnWJsK7M0E5Wg8UcFA+uO4B9s5d0ywXOEro/8HM9x0rW+TljRzul/14UYz3TleT3ig==}

  '@gql.tada/internal@1.0.6':
    resolution: {integrity: sha512-K5dKMqqU0pcNWS+/i6EnoUGvA7lW2Agwl+nepZOEWbGpG80aJxXfL+yAvaHihP5VqGZFOygyc3NDBo1mm+Z4KQ==}
    peerDependencies:
      graphql: ^15.5.0 || ^16.0.0 || ^17.0.0
      typescript: ^5.0.0

  '@graphql-codegen/add@5.0.3':
    resolution: {integrity: sha512-SxXPmramkth8XtBlAHu4H4jYcYXM/o3p01+psU+0NADQowA8jtYkK6MW5rV6T+CxkEaNZItfSmZRPgIuypcqnA==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/cli@5.0.2':
    resolution: {integrity: sha512-MBIaFqDiLKuO4ojN6xxG9/xL9wmfD3ZjZ7RsPjwQnSHBCUXnEkdKvX+JVpx87Pq29Ycn8wTJUguXnTZ7Di0Mlw==}
    hasBin: true
    peerDependencies:
      '@parcel/watcher': ^2.1.0
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0
    peerDependenciesMeta:
      '@parcel/watcher':
        optional: true

  '@graphql-codegen/client-preset@4.3.3':
    resolution: {integrity: sha512-IrDsSVe8bkKtxgVfKPHzjL9tYlv7KEpA59R4gZLqx/t2WIJncW1i0OMvoz9tgoZsFEs8OKKgXZbnwPZ/Qf1kEw==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/core@4.0.2':
    resolution: {integrity: sha512-IZbpkhwVqgizcjNiaVzNAzm/xbWT6YnGgeOLwVjm4KbJn3V2jchVtuzHH09G5/WkkLSk2wgbXNdwjM41JxO6Eg==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/gql-tag-operations@4.0.9':
    resolution: {integrity: sha512-lVgu1HClel896HqZAEjynatlU6eJrYOw+rh05DPgM150xvmb7Gz5TnRHA2vfwlDNIXDaToAIpz5RFfkjjnYM1Q==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/plugin-helpers@5.0.4':
    resolution: {integrity: sha512-MOIuHFNWUnFnqVmiXtrI+4UziMTYrcquljaI5f/T/Bc7oO7sXcfkAvgkNWEEi9xWreYwvuer3VHCuPI/lAFWbw==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/schema-ast@4.1.0':
    resolution: {integrity: sha512-kZVn0z+th9SvqxfKYgztA6PM7mhnSZaj4fiuBWvMTqA+QqQ9BBed6Pz41KuD/jr0gJtnlr2A4++/0VlpVbCTmQ==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/typed-document-node@5.0.9':
    resolution: {integrity: sha512-Wx6fyA4vpfIbfNTMiWUECGnjqzKkJdEbZHxVMIegiCBPzBYPAJV4mZZcildLAfm2FtZcgW4YKtFoTbnbXqPB3w==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/typescript-operations@4.2.3':
    resolution: {integrity: sha512-6z7avSSOr03l5SyKbeDs7MzRyGwnQFSCqQm8Om5wIuoIgXVu2gXRmcJAY/I7SLdAy9xbF4Sho7XNqieFM2CAFQ==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/typescript@4.0.9':
    resolution: {integrity: sha512-0O35DMR4d/ctuHL1Zo6mRUUzp0BoszKfeWsa6sCm/g70+S98+hEfTwZNDkQHylLxapiyjssF9uw/F+sXqejqLw==}
    peerDependencies:
      graphql: ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-codegen/visitor-plugin-common@5.3.1':
    resolution: {integrity: sha512-MktoBdNZhSmugiDjmFl1z6rEUUaqyxtFJYWnDilE7onkPgyw//O0M+TuPBJPBWdyV6J2ond0Hdqtq+rkghgSIQ==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  '@graphql-tools/apollo-engine-loader@8.0.1':
    resolution: {integrity: sha512-NaPeVjtrfbPXcl+MLQCJLWtqe2/E4bbAqcauEOQ+3sizw1Fc2CNmhHRF8a6W4D0ekvTRRXAMptXYgA2uConbrA==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/batch-execute@9.0.4':
    resolution: {integrity: sha512-kkebDLXgDrep5Y0gK1RN3DMUlLqNhg60OAz0lTCqrYeja6DshxLtLkj+zV4mVbBA4mQOEoBmw6g1LZs3dA84/w==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/code-file-loader@8.1.3':
    resolution: {integrity: sha512-Qoo8VyU0ux7k20DkzL5wFm7Y6iqlG1GQ0xA4T3EQbm4B/qbENsMc38l76QnXYIVmIlKAnD9EAvzxPEQ8iv+ZPA==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/delegate@10.0.17':
    resolution: {integrity: sha512-YIJleGaSjYnqIcJ5uoBWVBBE3eP5h3CvEM9PiANHtRUBmoNBKdYstkrS3IqBSlgKLsboD5CTYfmXDVQAPfH+mw==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/documents@1.0.1':
    resolution: {integrity: sha512-aweoMH15wNJ8g7b2r4C4WRuJxZ0ca8HtNO54rkye/3duxTkW4fGBEutCx03jCIr5+a1l+4vFJNP859QnAVBVCA==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/executor-graphql-ws@1.2.0':
    resolution: {integrity: sha512-tSYC1QdrabWexLrYV0UI3uRGbde9WCY/bRhq6Jc+VXMZcfq6ea6pP5NEAVTfwbhUQ4xZvJABVVbKXtKb9uTg1w==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/executor-http@1.1.5':
    resolution: {integrity: sha512-ZAsVGUwafPc1GapLA1yoJuRx7ihpVdAv7JDHmlI2eHRQsJnMVQwcxHnjfUb/id9YAEBrP86/s4pgEoRyad3Zng==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/executor-legacy-ws@1.1.0':
    resolution: {integrity: sha512-k+6ZyiaAd8SmwuzbEOfA/LVkuI1nqidhoMw+CJ7c41QGOjSMzc0VS0UZbJyeitI0n7a+uP/Meln1wjzJ2ReDtQ==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/executor@1.3.0':
    resolution: {integrity: sha512-e+rmEf/2EO4hDnbkO8mTS2FI+jGUNmYkSDKw5TgPVlO8VOKS+TXmJBK6E9v4Gc/39yVkZsffYfW/R8obJrA0mg==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/git-loader@8.0.7':
    resolution: {integrity: sha512-+s23lxHR24+zLDk9/Hfl7/8Qcal8Q1yJ8armRp1fvcJyuc0RTZv97ZoZb0tArTfME74z+kJ92Mx4SfZMd7mHSQ==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/github-loader@8.0.1':
    resolution: {integrity: sha512-W4dFLQJ5GtKGltvh/u1apWRFKBQOsDzFxO9cJkOYZj1VzHCpRF43uLST4VbCfWve+AwBqOuKr7YgkHoxpRMkcg==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/graphql-file-loader@8.0.1':
    resolution: {integrity: sha512-7gswMqWBabTSmqbaNyWSmRRpStWlcCkBc73E6NZNlh4YNuiyKOwbvSkOUYFOqFMfEL+cFsXgAvr87Vz4XrYSbA==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/graphql-tag-pluck@8.3.2':
    resolution: {integrity: sha512-wJKkDjXRg2qJAVhAVE96zJGMli8Ity9mKUB7gTbvJwsAniaquRqLcTXUQ19X9qVT4ACzbbp+tAfk96b2U3tfog==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/import@7.0.1':
    resolution: {integrity: sha512-935uAjAS8UAeXThqHfYVr4HEAp6nHJ2sximZKO1RzUTq5WoALMAhhGARl0+ecm6X+cqNUwIChJbjtaa6P/ML0w==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/json-file-loader@8.0.1':
    resolution: {integrity: sha512-lAy2VqxDAHjVyqeJonCP6TUemrpYdDuKt25a10X6zY2Yn3iFYGnuIDQ64cv3ytyGY6KPyPB+Kp+ZfOkNDG3FQA==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/load@8.0.2':
    resolution: {integrity: sha512-S+E/cmyVmJ3CuCNfDuNF2EyovTwdWfQScXv/2gmvJOti2rGD8jTt9GYVzXaxhblLivQR9sBUCNZu/w7j7aXUCA==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/merge@8.4.2':
    resolution: {integrity: sha512-XbrHAaj8yDuINph+sAfuq3QCZ/tKblrTLOpirK0+CAgNlZUCHs0Fa+xtMUURgwCVThLle1AF7svJCxFizygLsw==}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/merge@9.0.4':
    resolution: {integrity: sha512-MivbDLUQ+4Q8G/Hp/9V72hbn810IJDEZQ57F01sHnlrrijyadibfVhaQfW/pNH+9T/l8ySZpaR/DpL5i+ruZ+g==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/optimize@2.0.0':
    resolution: {integrity: sha512-nhdT+CRGDZ+bk68ic+Jw1OZ99YCDIKYA5AlVAnBHJvMawSx9YQqQAIj4refNc1/LRieGiuWvhbG3jvPVYho0Dg==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/prisma-loader@8.0.4':
    resolution: {integrity: sha512-hqKPlw8bOu/GRqtYr0+dINAI13HinTVYBDqhwGAPIFmLr5s+qKskzgCiwbsckdrb5LWVFmVZc+UXn80OGiyBzg==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/relay-operation-optimizer@7.0.1':
    resolution: {integrity: sha512-y0ZrQ/iyqWZlsS/xrJfSir3TbVYJTYmMOu4TaSz6F4FRDTQ3ie43BlKkhf04rC28pnUOS4BO9pDcAo1D30l5+A==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/schema@10.0.4':
    resolution: {integrity: sha512-HuIwqbKxPaJujox25Ra4qwz0uQzlpsaBOzO6CVfzB/MemZdd+Gib8AIvfhQArK0YIN40aDran/yi+E5Xf0mQww==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/schema@9.0.19':
    resolution: {integrity: sha512-oBRPoNBtCkk0zbUsyP4GaIzCt8C0aCI4ycIRUL67KK5pOHljKLBBtGT+Jr6hkzA74C8Gco8bpZPe7aWFjiaK2w==}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/url-loader@8.0.2':
    resolution: {integrity: sha512-1dKp2K8UuFn7DFo1qX5c1cyazQv2h2ICwA9esHblEqCYrgf69Nk8N7SODmsfWg94OEaI74IqMoM12t7eIGwFzQ==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/utils@10.2.3':
    resolution: {integrity: sha512-j7x0sO0VtWVhD3FubyY42abx+g61/at5W5Y3DSOckPkBo7yVjkcnAsXoB4jiUnznhGme/o+uX5VgA8HrjyR5ZQ==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/utils@10.3.2':
    resolution: {integrity: sha512-iaqOHS4f90KNADBHqVsRBjKpM6iSvsUg1q5GhWMK03loYLaDzftrEwcsl0OkSSnRhJvAsT7q4q3r3YzRoV0v1g==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/utils@9.2.1':
    resolution: {integrity: sha512-WUw506Ql6xzmOORlriNrD6Ugx+HjVgYxt9KCXD9mHAak+eaXSwuGGPyE60hy9xaDEoXKBsG7SkG69ybitaVl6A==}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-tools/wrap@10.0.5':
    resolution: {integrity: sha512-Cbr5aYjr3HkwdPvetZp1cpDWTGdD1Owgsb3z/ClzhmrboiK86EnQDxDvOJiQkDCPWE9lNBwj8Y4HfxroY0D9DQ==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      graphql: ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@graphql-typed-document-node/core@3.2.0':
    resolution: {integrity: sha512-mB9oAsNCm9aM3/SOv4YtBMqZbYj10R7dkq8byBqxGY/ncFwhf2oQzMV+LCRlWoDSEBJ3COiR1yeDvMtsoOsuFQ==}
    peerDependencies:
      graphql: ^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0

  '@humanwhocodes/config-array@0.11.14':
    resolution: {integrity: sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==}
    engines: {node: '>=10.10.0'}
    deprecated: Use @eslint/config-array instead

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/object-schema@2.0.3':
    resolution: {integrity: sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==}
    deprecated: Use @eslint/object-schema instead

  '@internationalized/date@3.5.4':
    resolution: {integrity: sha512-qoVJVro+O0rBaw+8HPjUB1iH8Ihf8oziEnqMnvhJUSuVIrHOuZ6eNLHNvzXJKUvAtaDiqMnRlg8Z2mgh09BlUw==}

  '@internationalized/date@3.5.5':
    resolution: {integrity: sha512-H+CfYvOZ0LTJeeLOqm19E3uj/4YjrmOFtBufDHPfvtI80hFAMqtrp7oCACpe4Cil5l8S0Qu/9dYfZc/5lY8WQQ==}

  '@internationalized/number@3.5.3':
    resolution: {integrity: sha512-rd1wA3ebzlp0Mehj5YTuTI50AQEx80gWFyHcQu+u91/5NgdwBecO8BH6ipPfE+lmQ9d63vpB3H9SHoIUiupllw==}

  '@ioredis/commands@1.2.0':
    resolution: {integrity: sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg==}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@istanbuljs/load-nyc-config@1.1.0':
    resolution: {integrity: sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==}
    engines: {node: '>=8'}

  '@istanbuljs/schema@0.1.3':
    resolution: {integrity: sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==}
    engines: {node: '>=8'}

  '@jest/console@29.7.0':
    resolution: {integrity: sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/core@29.7.0':
    resolution: {integrity: sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/environment@29.7.0':
    resolution: {integrity: sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect-utils@29.7.0':
    resolution: {integrity: sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect@29.7.0':
    resolution: {integrity: sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/fake-timers@29.7.0':
    resolution: {integrity: sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/globals@29.7.0':
    resolution: {integrity: sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/reporters@29.7.0':
    resolution: {integrity: sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/schemas@29.6.3':
    resolution: {integrity: sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/source-map@29.6.3':
    resolution: {integrity: sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-result@29.7.0':
    resolution: {integrity: sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-sequencer@29.7.0':
    resolution: {integrity: sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/transform@29.7.0':
    resolution: {integrity: sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/types@29.6.3':
    resolution: {integrity: sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jridgewell/gen-mapping@0.3.5':
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/source-map@0.3.6':
    resolution: {integrity: sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@jridgewell/trace-mapping@0.3.9':
    resolution: {integrity: sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==}

  '@kamilkisiela/fast-url-parser@1.1.4':
    resolution: {integrity: sha512-gbkePEBupNydxCelHCESvFSFM8XPh1Zs/OAVRW/rKpEqPAl5PbOM90Si8mv9bvnR53uPD2s/FiRxdvSejpRJew==}

  '@lingui/babel-plugin-extract-messages@4.11.2':
    resolution: {integrity: sha512-CjIUy55ICw2nQpJeO9Yhoc65nbDje3b/8Ghbux8OUMbtEYguMKi1pA21eYPYDjTUnjglVTDtapEtLN0iNPWHdg==}
    engines: {node: '>=16.0.0'}

  '@lingui/cli@4.11.2':
    resolution: {integrity: sha512-onwASvA6KffAos+ceP1K1Hx0mPg6vb3s9Rw7VXSyaUQih225GXlrTZbYKOZkM1XgfMmhN+7kgFrRaqxjiKnLLQ==}
    engines: {node: '>=16.0.0'}
    hasBin: true

  '@lingui/conf@4.11.2':
    resolution: {integrity: sha512-Kw45dRa3biV8CLg50R0e4vCfU750H5fFJ8zBUAIEtWkksKsRDOvf3l1qxfUF76xuLSCPhdLjYfnmW0FqMe/kdg==}
    engines: {node: '>=16.0.0'}

  '@lingui/core@4.11.2':
    resolution: {integrity: sha512-5wFmpHeDbLXEqaEUwlayS4SoqrCbDI3/bVRlwhmdNCeUcUYWh+7dTDlQnp4tPek1x1dEppABIkdN/0qLDdKcBQ==}
    engines: {node: '>=16.0.0'}

  '@lingui/format-po@4.11.2':
    resolution: {integrity: sha512-o5TxpiIjtwObkOipsuNw3zaiHlikhivFfd70paps4Nb5w0Fiaa6pKqvLmIqgsxx7/bgmySr0S/vu8hpAerr4Kg==}
    engines: {node: '>=16.0.0'}

  '@lingui/macro@4.11.2':
    resolution: {integrity: sha512-hipoxMwwD5uKl9t6PHK7Ey/yb6pIgRyFLal2TfkqOH/HCsDR9j6Dusj74szJqzpclJv7zfWgJxk52X/pb+OYpg==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      '@lingui/react': ^4.0.0
      babel-plugin-macros: 2 || 3

  '@lingui/message-utils@4.11.2':
    resolution: {integrity: sha512-3oJk7ZKExk4NVa4d3CM0z0iNqIokaFOWeu7lYVzu0oEX7DP6OxNjlCAtObIhJCB0FdIPz8sXxhDkyDHFj+eIvw==}
    engines: {node: '>=16.0.0'}

  '@lingui/react@4.11.2':
    resolution: {integrity: sha512-OKHCg3yPW2xhYWoY2kOz+eP7qpdkab+4tERUvJ9QJ9bzQ6OnPLCagaRftB3nqdKuWzKoA5F2VG2QLUhF7DjpGA==}
    engines: {node: '>=16.0.0'}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0

  '@lingui/swc-plugin@4.0.8':
    resolution: {integrity: sha512-zWvfFAvo2NOV+yFAjTbuEE0x53XEJlBS3EQ1R4xswjWSgpXWbLg45Rg37Ai2Ud0qeQkQLZnL93yt7dOwstX5eQ==}
    peerDependencies:
      '@lingui/macro': '4'
      '@swc/core': '*'
      next: '*'
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      next:
        optional: true

  '@ljharb/through@2.3.13':
    resolution: {integrity: sha512-/gKJun8NNiWGZJkGzI/Ragc53cOdcLNdzjLaIa+GEjguQs0ulsurx8WN0jijdK9yPqDvziX995sMRLyLt1uZMQ==}
    engines: {node: '>= 0.4'}

  '@lukeed/csprng@1.1.0':
    resolution: {integrity: sha512-Z7C/xXCiGWsg0KuKsHTKJxbWhpI3Vs5GwLfOean7MGyVFGqdRgBbAjOCh6u4bbjPc/8MJ2pZmK/0DLdCbivLDA==}
    engines: {node: '>=8'}

  '@messageformat/parser@5.1.0':
    resolution: {integrity: sha512-jKlkls3Gewgw6qMjKZ9SFfHUpdzEVdovKFtW1qRhJ3WI4FW5R/NnGDqr8SDGz+krWDO3ki94boMmQvGke1HwUQ==}

  '@molt/command@0.9.0':
    resolution: {integrity: sha512-1JI8dAlpqlZoXyKWVQggX7geFNPxBpocHIXQCsnxDjKy+3WX4SGyZVJXuLlqRRrX7FmQCuuMAfx642ovXmPA9g==}

  '@molt/types@0.2.0':
    resolution: {integrity: sha512-p6ChnEZDGjg9PYPec9BK6Yp5/DdSrYQvXTBAtgrnqX6N36cZy37ql1c8Tc5LclfIYBNG7EZp8NBcRTYJwyi84g==}

  '@msgpackr-extract/msgpackr-extract-darwin-arm64@3.0.3':
    resolution: {integrity: sha512-QZHtlVgbAdy2zAqNA9Gu1UpIuI8Xvsd1v8ic6B2pZmeFnFcMWiPLfWXh7TVw4eGEZ/C9TH281KwhVoeQUKbyjw==}
    cpu: [arm64]
    os: [darwin]

  '@msgpackr-extract/msgpackr-extract-darwin-x64@3.0.3':
    resolution: {integrity: sha512-mdzd3AVzYKuUmiWOQ8GNhl64/IoFGol569zNRdkLReh6LRLHOXxU4U8eq0JwaD8iFHdVGqSy4IjFL4reoWCDFw==}
    cpu: [x64]
    os: [darwin]

  '@msgpackr-extract/msgpackr-extract-linux-arm64@3.0.3':
    resolution: {integrity: sha512-YxQL+ax0XqBJDZiKimS2XQaf+2wDGVa1enVRGzEvLLVFeqa5kx2bWbtcSXgsxjQB7nRqqIGFIcLteF/sHeVtQg==}
    cpu: [arm64]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-linux-arm@3.0.3':
    resolution: {integrity: sha512-fg0uy/dG/nZEXfYilKoRe7yALaNmHoYeIoJuJ7KJ+YyU2bvY8vPv27f7UKhGRpY6euFYqEVhxCFZgAUNQBM3nw==}
    cpu: [arm]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-linux-x64@3.0.3':
    resolution: {integrity: sha512-cvwNfbP07pKUfq1uH+S6KJ7dT9K8WOE4ZiAcsrSes+UY55E/0jLYc+vq+DO7jlmqRb5zAggExKm0H7O/CBaesg==}
    cpu: [x64]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-win32-x64@3.0.3':
    resolution: {integrity: sha512-x0fWaQtYp4E6sktbsdAqnehxDgEc/VwM7uLsRCYWaiGu0ykYdZPiS8zCWdnjHwyiumousxfBm4SO31eXqwEZhQ==}
    cpu: [x64]
    os: [win32]

  '@nervosnetwork/ckb-sdk-core@0.109.1':
    resolution: {integrity: sha512-YU3yJZvz69WU6Bw//vRxzxLGcIj74CwGffdp6GYZbQpZwFaACT6FCojvOMjHIyJ8Rw32r114LhMKHvyBwagWjw==}

  '@nervosnetwork/ckb-sdk-rpc@0.109.1':
    resolution: {integrity: sha512-RoUhXmaOm1g7ga1G3guNTzSDit79k7nqj3rYbk2jSlULRo34g9L06juU24hmwwuFZfiCaARI9mgACu0ScW9itw==}

  '@nervosnetwork/ckb-sdk-utils@0.109.1':
    resolution: {integrity: sha512-KK8w+JZGPt/Gq/Y0b87AuQp8mGR46fBSkqnjwASdBAi2rts9tJ6srEaZ3FVVa9LtjTlThQ120hex+mcyastrkQ==}

  '@nervosnetwork/ckb-sdk-utils@0.109.3':
    resolution: {integrity: sha512-sV3WXlZmd765qtFsXpwl0Bl3hOgGev15Og810acO6iC0cVHEVvv/Uiabd8a2xkqyfziRDI0tfWC0DewOJB28rg==}

  '@nervosnetwork/ckb-types@0.109.1':
    resolution: {integrity: sha512-mD5mOCGa1JertKZekHSUVYwFPW27VJ0/MdwblWvEEK7pNIU6az+dLiIxgvl4TxR+j+7/GqmXNH1U59CM92y/wg==}

  '@nervosnetwork/ckb-types@0.109.3':
    resolution: {integrity: sha512-i9EVTXCT0bTLpAQXAoF5zHGLWYCXNE5AP4Zl0Niwl3ZplaVAZHNU6ygsh2O3EGmCFv5qlkoY2DuLmsjysEaNLA==}

  '@nest-lab/throttler-storage-redis@1.0.0':
    resolution: {integrity: sha512-k0eVe1yzTF8kgi5xQ+httwVBsNGDcq2liBLYK++ROpqiHUb7QxXet3JgERTQ4PWusyacPKz5DCtw9ijmGBx5YQ==}
    peerDependencies:
      '@nestjs/common': ^7.0.0 || ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/core': ^7.0.0 || ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/throttler': '>=6.0.0'
      ioredis: '>=5.0.0'
      reflect-metadata: ^0.2.1

  '@nestjs/apollo@12.2.0':
    resolution: {integrity: sha512-z1zpbgrxaEaIdP6luiDdQ6f4OH3/xhszakxekXFvLq77wqO3nezKvZvz/etTaSlVW5y06jaCYKhypfXVv4sgzQ==}
    peerDependencies:
      '@apollo/gateway': ^2.0.0
      '@apollo/server': ^4.3.2
      '@apollo/subgraph': ^2.0.0
      '@as-integrations/fastify': ^1.3.0 || ^2.0.0
      '@nestjs/common': ^9.3.8 || ^10.0.0
      '@nestjs/core': ^9.3.8 || ^10.0.0
      '@nestjs/graphql': ^12.0.0
      graphql: ^16.6.0
    peerDependenciesMeta:
      '@apollo/gateway':
        optional: true
      '@apollo/subgraph':
        optional: true
      '@as-integrations/fastify':
        optional: true

  '@nestjs/axios@3.0.3':
    resolution: {integrity: sha512-h6TCn3yJwD6OKqqqfmtRS5Zo4E46Ip2n+gK1sqwzNBC+qxQ9xpCu+ODVRFur6V3alHSCSBxb3nNtt73VEdluyA==}
    peerDependencies:
      '@nestjs/common': ^7.0.0 || ^8.0.0 || ^9.0.0 || ^10.0.0
      axios: ^1.3.1
      rxjs: ^6.0.0 || ^7.0.0

  '@nestjs/bull-shared@10.2.0':
    resolution: {integrity: sha512-cSi6CyPECHDFumnHWWfwLCnbc6hm5jXt7FqzJ0Id6EhGqdz5ja0FmgRwXoS4xoMA2RRjlxn2vGXr4YOaHBAeig==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/core': ^8.0.0 || ^9.0.0 || ^10.0.0

  '@nestjs/bullmq@10.2.0':
    resolution: {integrity: sha512-lHXWDocXh1Yl6unsUzGFEKmK02mu0DdI35cdBp3Fq/9D5V3oLuWjwAPFnTztedshIjlFmNW6x5mdaT5WZ0AV1Q==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/core': ^8.0.0 || ^9.0.0 || ^10.0.0
      bullmq: ^3.0.0 || ^4.0.0 || ^5.0.0

  '@nestjs/cache-manager@2.2.2':
    resolution: {integrity: sha512-+n7rpU1QABeW2WV17Dl1vZCG3vWjJU1MaamWgZvbGxYE9EeCM0lVLfw3z7acgDTNwOy+K68xuQPoIMxD0bhjlA==}
    peerDependencies:
      '@nestjs/common': ^9.0.0 || ^10.0.0
      '@nestjs/core': ^9.0.0 || ^10.0.0
      cache-manager: <=5
      rxjs: ^7.0.0

  '@nestjs/cli@10.4.2':
    resolution: {integrity: sha512-fQexIfLHfp6GUgX+CO4fOg+AEwV5ox/LHotQhyZi9wXUQDyIqS0NTTbumr//62EcX35qV4nU0359nYnuEdzG+A==}
    engines: {node: '>= 16.14'}
    hasBin: true
    peerDependencies:
      '@swc/cli': ^0.1.62 || ^0.3.0 || ^0.4.0
      '@swc/core': ^1.3.62
    peerDependenciesMeta:
      '@swc/cli':
        optional: true
      '@swc/core':
        optional: true

  '@nestjs/common@10.3.10':
    resolution: {integrity: sha512-H8k0jZtxk1IdtErGDmxFRy0PfcOAUg41Prrqpx76DQusGGJjsaovs1zjXVD1rZWaVYchfT1uczJ6L4Kio10VNg==}
    peerDependencies:
      class-transformer: '*'
      class-validator: '*'
      reflect-metadata: ^0.1.12 || ^0.2.0
      rxjs: ^7.1.0
    peerDependenciesMeta:
      class-transformer:
        optional: true
      class-validator:
        optional: true

  '@nestjs/config@3.2.3':
    resolution: {integrity: sha512-p6yv/CvoBewJ72mBq4NXgOAi2rSQNWx3a+IMJLVKS2uiwFCOQQuiIatGwq6MRjXV3Jr+B41iUO8FIf4xBrZ4/w==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      rxjs: ^7.1.0

  '@nestjs/core@10.3.10':
    resolution: {integrity: sha512-ZbQ4jovQyzHtCGCrzK5NdtW1SYO2fHSsgSY1+/9WdruYCUra+JDkWEXgZ4M3Hv480Dl3OXehAmY1wCOojeMyMQ==}
    peerDependencies:
      '@nestjs/common': ^10.0.0
      '@nestjs/microservices': ^10.0.0
      '@nestjs/platform-express': ^10.0.0
      '@nestjs/websockets': ^10.0.0
      reflect-metadata: ^0.1.12 || ^0.2.0
      rxjs: ^7.1.0
    peerDependenciesMeta:
      '@nestjs/microservices':
        optional: true
      '@nestjs/platform-express':
        optional: true
      '@nestjs/websockets':
        optional: true

  '@nestjs/event-emitter@2.0.4':
    resolution: {integrity: sha512-quMiw8yOwoSul0pp3mOonGz8EyXWHSBTqBy8B0TbYYgpnG1Ix2wGUnuTksLWaaBiiOTDhciaZ41Y5fJZsSJE1Q==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/core': ^8.0.0 || ^9.0.0 || ^10.0.0

  '@nestjs/graphql@12.2.0':
    resolution: {integrity: sha512-du/aI+EXADxtJrHF1mAXR6RYRHuEWPNnJyHTmIOPW2Wx5qN32P7lQoHGD7TySATMl5aa47w05lPzxcasdUmpMQ==}
    peerDependencies:
      '@apollo/subgraph': ^2.0.0
      '@nestjs/common': ^9.3.8 || ^10.0.0
      '@nestjs/core': ^9.3.8 || ^10.0.0
      class-transformer: '*'
      class-validator: '*'
      graphql: ^16.6.0
      reflect-metadata: ^0.1.13 || ^0.2.0
      ts-morph: ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^20.0.0 || ^21.0.0
    peerDependenciesMeta:
      '@apollo/subgraph':
        optional: true
      class-transformer:
        optional: true
      class-validator:
        optional: true
      ts-morph:
        optional: true

  '@nestjs/mapped-types@2.0.5':
    resolution: {integrity: sha512-bSJv4pd6EY99NX9CjBIyn4TVDoSit82DUZlL4I3bqNfy5Gt+gXTa86i3I/i0iIV9P4hntcGM5GyO+FhZAhxtyg==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      class-transformer: ^0.4.0 || ^0.5.0
      class-validator: ^0.13.0 || ^0.14.0
      reflect-metadata: ^0.1.12 || ^0.2.0
    peerDependenciesMeta:
      class-transformer:
        optional: true
      class-validator:
        optional: true

  '@nestjs/platform-express@10.3.10':
    resolution: {integrity: sha512-wK2ow3CZI2KFqWeEpPmoR300OB6BcBLxARV1EiClJLCj4S1mZsoCmS0YWgpk3j1j6mo0SI8vNLi/cC2iZPEPQA==}
    peerDependencies:
      '@nestjs/common': ^10.0.0
      '@nestjs/core': ^10.0.0

  '@nestjs/platform-fastify@10.4.3':
    resolution: {integrity: sha512-F7SlU0ZAZkSSDlfNBRggqtxPnkJ0LjW7E6b4eWH/RjxNabmyxDtEx7BsQayMMPcuQS6T5l1iKSLdmKcDOGMUKQ==}
    peerDependencies:
      '@fastify/static': ^6.0.0 || ^7.0.0
      '@fastify/view': ^7.0.0 || ^8.0.0
      '@nestjs/common': ^10.0.0
      '@nestjs/core': ^10.0.0
    peerDependenciesMeta:
      '@fastify/static':
        optional: true
      '@fastify/view':
        optional: true

  '@nestjs/schedule@4.1.0':
    resolution: {integrity: sha512-WEc96WTXZW+VI/Ng+uBpiBUwm6TWtAbQ4RKWkfbmzKvmbRGzA/9k/UyAWDS9k0pp+ZcbC+MaZQtt7TjQHrwX6g==}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/core': ^8.0.0 || ^9.0.0 || ^10.0.0

  '@nestjs/schematics@10.1.3':
    resolution: {integrity: sha512-aLJ4Nl/K/u6ZlgLa0NjKw5CuBOIgc6vudF42QvmGueu5FaMGM6IJrAuEvB5T2kr0PAfVwYmDFBBHCWdYhTw4Tg==}
    peerDependencies:
      typescript: '>=4.8.2'

  '@nestjs/terminus@10.2.3':
    resolution: {integrity: sha512-iX7gXtAooePcyQqFt57aDke5MzgdkBeYgF5YsFNNFwOiAFdIQEhfv3PR0G+HlH9F6D7nBCDZt9U87Pks/qHijg==}
    peerDependencies:
      '@grpc/grpc-js': '*'
      '@grpc/proto-loader': '*'
      '@mikro-orm/core': '*'
      '@mikro-orm/nestjs': '*'
      '@nestjs/axios': ^1.0.0 || ^2.0.0 || ^3.0.0
      '@nestjs/common': ^9.0.0 || ^10.0.0
      '@nestjs/core': ^9.0.0 || ^10.0.0
      '@nestjs/microservices': ^9.0.0 || ^10.0.0
      '@nestjs/mongoose': ^9.0.0 || ^10.0.0
      '@nestjs/sequelize': ^9.0.0 || ^10.0.0
      '@nestjs/typeorm': ^9.0.0 || ^10.0.0
      '@prisma/client': '*'
      mongoose: '*'
      reflect-metadata: 0.1.x || 0.2.x
      rxjs: 7.x
      sequelize: '*'
      typeorm: '*'
    peerDependenciesMeta:
      '@grpc/grpc-js':
        optional: true
      '@grpc/proto-loader':
        optional: true
      '@mikro-orm/core':
        optional: true
      '@mikro-orm/nestjs':
        optional: true
      '@nestjs/axios':
        optional: true
      '@nestjs/microservices':
        optional: true
      '@nestjs/mongoose':
        optional: true
      '@nestjs/sequelize':
        optional: true
      '@nestjs/typeorm':
        optional: true
      '@prisma/client':
        optional: true
      mongoose:
        optional: true
      sequelize:
        optional: true
      typeorm:
        optional: true

  '@nestjs/testing@10.3.10':
    resolution: {integrity: sha512-i3HAtVQJijxNxJq1k39aelyJlyEIBRONys7IipH/4r8W0J+M1V+y5EKDOyi4j1SdNSb/vmNyWpZ2/ewZjl3kRA==}
    peerDependencies:
      '@nestjs/common': ^10.0.0
      '@nestjs/core': ^10.0.0
      '@nestjs/microservices': ^10.0.0
      '@nestjs/platform-express': ^10.0.0
    peerDependenciesMeta:
      '@nestjs/microservices':
        optional: true
      '@nestjs/platform-express':
        optional: true

  '@nestjs/throttler@6.2.1':
    resolution: {integrity: sha512-vdt6VjhKC6vcLBJRUb97IuR6Htykn5kokZzmT8+S5XFOLLjUF7rzRpr+nUOhK9pi1L0hhbzSf2v2FJl4v64EJA==}
    peerDependencies:
      '@nestjs/common': ^7.0.0 || ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/core': ^7.0.0 || ^8.0.0 || ^9.0.0 || ^10.0.0
      reflect-metadata: ^0.1.13 || ^0.2.0

  '@next/env@14.2.4':
    resolution: {integrity: sha512-3EtkY5VDkuV2+lNmKlbkibIJxcO4oIHEhBWne6PaAp+76J9KoSsGvNikp6ivzAT8dhhBMYrm6op2pS1ApG0Hzg==}

  '@next/eslint-plugin-next@14.2.4':
    resolution: {integrity: sha512-svSFxW9f3xDaZA3idQmlFw7SusOuWTpDTAeBlO3AEPDltrraV+lqs7mAc6A27YdnpQVVIA3sODqUAAHdWhVWsA==}

  '@next/swc-darwin-arm64@14.2.4':
    resolution: {integrity: sha512-AH3mO4JlFUqsYcwFUHb1wAKlebHU/Hv2u2kb1pAuRanDZ7pD/A/KPD98RHZmwsJpdHQwfEc/06mgpSzwrJYnNg==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@next/swc-darwin-x64@14.2.4':
    resolution: {integrity: sha512-QVadW73sWIO6E2VroyUjuAxhWLZWEpiFqHdZdoQ/AMpN9YWGuHV8t2rChr0ahy+irKX5mlDU7OY68k3n4tAZTg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@next/swc-linux-arm64-gnu@14.2.4':
    resolution: {integrity: sha512-KT6GUrb3oyCfcfJ+WliXuJnD6pCpZiosx2X3k66HLR+DMoilRb76LpWPGb4tZprawTtcnyrv75ElD6VncVamUQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-arm64-musl@14.2.4':
    resolution: {integrity: sha512-Alv8/XGSs/ytwQcbCHwze1HmiIkIVhDHYLjczSVrf0Wi2MvKn/blt7+S6FJitj3yTlMwMxII1gIJ9WepI4aZ/A==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-x64-gnu@14.2.4':
    resolution: {integrity: sha512-ze0ShQDBPCqxLImzw4sCdfnB3lRmN3qGMB2GWDRlq5Wqy4G36pxtNOo2usu/Nm9+V2Rh/QQnrRc2l94kYFXO6Q==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-linux-x64-musl@14.2.4':
    resolution: {integrity: sha512-8dwC0UJoc6fC7PX70csdaznVMNr16hQrTDAMPvLPloazlcaWfdPogq+UpZX6Drqb1OBlwowz8iG7WR0Tzk/diQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-win32-arm64-msvc@14.2.4':
    resolution: {integrity: sha512-jxyg67NbEWkDyvM+O8UDbPAyYRZqGLQDTPwvrBBeOSyVWW/jFQkQKQ70JDqDSYg1ZDdl+E3nkbFbq8xM8E9x8A==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@next/swc-win32-ia32-msvc@14.2.4':
    resolution: {integrity: sha512-twrmN753hjXRdcrZmZttb/m5xaCBFa48Dt3FbeEItpJArxriYDunWxJn+QFXdJ3hPkm4u7CKxncVvnmgQMY1ag==}
    engines: {node: '>= 10'}
    cpu: [ia32]
    os: [win32]

  '@next/swc-win32-x64-msvc@14.2.4':
    resolution: {integrity: sha512-tkLrjBzqFTP8DVrAAQmZelEahfR9OxWpFR++vAI9FBhCiIxtwHwBHC23SBHCTURBtwB4kc/x44imVOnkKGNVGg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@next/third-parties@14.2.13':
    resolution: {integrity: sha512-OSqD2E9JO0/GE8HT5QAUsYVXwjWtPLScAX70kO2xopwDAdRzakrsQS55Cihd862X/4bUB37ApVZ9DlHcExzeOg==}
    peerDependencies:
      next: ^13.0.0 || ^14.0.0
      react: ^18.2.0

  '@noble/hashes@1.4.0':
    resolution: {integrity: sha512-V1JJ1WTRUqHHrOSh597hURcMqVKVGL/ea3kv0gSnEdsEZ0/+VyPghM1lMNGc00z7CIQorSvbKpuJkxvuHbvdbg==}
    engines: {node: '>= 16'}

  '@noble/secp256k1@1.7.1':
    resolution: {integrity: sha512-hOUk6AyBFmqVrv7k5WAw/LpszxVbj9gGN4JRkIX52fdFAj1UA61KXmZDvqVEm+pOyec3+fIeZB02LYa/pWOArw==}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nuxtjs/opencollective@0.3.2':
    resolution: {integrity: sha512-um0xL3fO7Mf4fDxcqx9KryrB7zgRM5JSlvGN5AGkP6JLM5XEKyjeAiPbNxdXVXQ16isuAhYpvP88NgL2BGd6aA==}
    engines: {node: '>=8.0.0', npm: '>=5.0.0'}
    hasBin: true

  '@opentelemetry/api-logs@0.52.1':
    resolution: {integrity: sha512-qnSqB2DQ9TPP96dl8cDubDvrUyWc0/sK81xHTK8eSUspzDM3bsewX903qclQFvVhgStjRWdC5bLb3kQqMkfV5A==}
    engines: {node: '>=14'}

  '@opentelemetry/api@1.9.0':
    resolution: {integrity: sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==}
    engines: {node: '>=8.0.0'}

  '@opentelemetry/context-async-hooks@1.26.0':
    resolution: {integrity: sha512-HedpXXYzzbaoutw6DFLWLDket2FwLkLpil4hGCZ1xYEIMTcivdfwEOISgdbLEWyG3HW52gTq2V9mOVJrONgiwg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/core@1.25.1':
    resolution: {integrity: sha512-GeT/l6rBYWVQ4XArluLVB6WWQ8flHbdb6r2FCHC3smtdOAbrJBIv35tpV/yp9bmYUJf+xmZpu9DRTIeJVhFbEQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/core@1.26.0':
    resolution: {integrity: sha512-1iKxXXE8415Cdv0yjG3G6hQnB5eVEsJce3QaawX8SjDn0mAS0ZM8fAbZZJD4ajvhC15cePvosSCut404KrIIvQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/instrumentation-connect@0.38.0':
    resolution: {integrity: sha512-2/nRnx3pjYEmdPIaBwtgtSviTKHWnDZN3R+TkRUnhIVrvBKVcq+I5B2rtd6mr6Fe9cHlZ9Ojcuh7pkNh/xdWWg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-express@0.41.1':
    resolution: {integrity: sha512-uRx0V3LPGzjn2bxAnV8eUsDT82vT7NTwI0ezEuPMBOTOsnPpGhWdhcdNdhH80sM4TrWrOfXm9HGEdfWE3TRIww==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-fastify@0.38.0':
    resolution: {integrity: sha512-HBVLpTSYpkQZ87/Df3N0gAw7VzYZV3n28THIBrJWfuqw3Or7UqdhnjeuMIPQ04BKk3aZc0cWn2naSQObbh5vXw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-fs@0.14.0':
    resolution: {integrity: sha512-pVc8P5AgliC1DphyyBUgsxXlm2XaPH4BpYvt7rAZDMIqUpRk8gs19SioABtKqqxvFzg5jPtgJfJsdxq0Y+maLw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-graphql@0.42.0':
    resolution: {integrity: sha512-N8SOwoKL9KQSX7z3gOaw5UaTeVQcfDO1c21csVHnmnmGUoqsXbArK2B8VuwPWcv6/BC/i3io+xTo7QGRZ/z28Q==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-hapi@0.40.0':
    resolution: {integrity: sha512-8U/w7Ifumtd2bSN1OLaSwAAFhb9FyqWUki3lMMB0ds+1+HdSxYBe9aspEJEgvxAqOkrQnVniAPTEGf1pGM7SOw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-http@0.52.1':
    resolution: {integrity: sha512-dG/aevWhaP+7OLv4BQQSEKMJv8GyeOp3Wxl31NHqE8xo9/fYMfEljiZphUHIfyg4gnZ9swMyWjfOQs5GUQe54Q==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-ioredis@0.42.0':
    resolution: {integrity: sha512-P11H168EKvBB9TUSasNDOGJCSkpT44XgoM6d3gRIWAa9ghLpYhl0uRkS8//MqPzcJVHr3h3RmfXIpiYLjyIZTw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-koa@0.42.0':
    resolution: {integrity: sha512-H1BEmnMhho8o8HuNRq5zEI4+SIHDIglNB7BPKohZyWG4fWNuR7yM4GTlR01Syq21vODAS7z5omblScJD/eZdKw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-mongodb@0.46.0':
    resolution: {integrity: sha512-VF/MicZ5UOBiXrqBslzwxhN7TVqzu1/LN/QDpkskqM0Zm0aZ4CVRbUygL8d7lrjLn15x5kGIe8VsSphMfPJzlA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-mongoose@0.40.0':
    resolution: {integrity: sha512-niRi5ZUnkgzRhIGMOozTyoZIvJKNJyhijQI4nF4iFSb+FUx2v5fngfR+8XLmdQAO7xmsD8E5vEGdDVYVtKbZew==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-mysql2@0.40.0':
    resolution: {integrity: sha512-0xfS1xcqUmY7WE1uWjlmI67Xg3QsSUlNT+AcXHeA4BDUPwZtWqF4ezIwLgpVZfHOnkAEheqGfNSWd1PIu3Wnfg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-mysql@0.40.0':
    resolution: {integrity: sha512-d7ja8yizsOCNMYIJt5PH/fKZXjb/mS48zLROO4BzZTtDfhNCl2UM/9VIomP2qkGIFVouSJrGr/T00EzY7bPtKA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-nestjs-core@0.39.0':
    resolution: {integrity: sha512-mewVhEXdikyvIZoMIUry8eb8l3HUjuQjSjVbmLVTt4NQi35tkpnHQrG9bTRBrl3403LoWZ2njMPJyg4l6HfKvA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-pg@0.43.0':
    resolution: {integrity: sha512-og23KLyoxdnAeFs1UWqzSonuCkePUzCX30keSYigIzJe/6WSYA8rnEI5lobcxPEzg+GcU06J7jzokuEHbjVJNw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation-redis-4@0.41.0':
    resolution: {integrity: sha512-H7IfGTqW2reLXqput4yzAe8YpDC0fmVNal95GHMLOrS89W+qWUKIqxolSh63hJyfmwPSFwXASzj7wpSk8Az+Dg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation@0.46.0':
    resolution: {integrity: sha512-a9TijXZZbk0vI5TGLZl+0kxyFfrXHhX6Svtz7Pp2/VBlCSKrazuULEyoJQrOknJyFWNMEmbbJgOciHCCpQcisw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/instrumentation@0.52.1':
    resolution: {integrity: sha512-uXJbYU/5/MBHjMp1FqrILLRuiJCs3Ofk0MeRDk8g1S1gD47U8X3JnSwcMO1rtRo1x1a7zKaQHaoYu49p/4eSKw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.3.0

  '@opentelemetry/redis-common@0.36.2':
    resolution: {integrity: sha512-faYX1N0gpLhej/6nyp6bgRjzAKXn5GOEMYY7YhciSfCoITAktLUtQ36d24QEWNA1/WA1y6qQunCe0OhHRkVl9g==}
    engines: {node: '>=14'}

  '@opentelemetry/resources@1.26.0':
    resolution: {integrity: sha512-CPNYchBE7MBecCSVy0HKpUISEeJOniWqcHaAHpmasZ3j9o6V3AyBzhRc90jdmemq0HOxDr6ylhUbDhBqqPpeNw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/sdk-metrics@1.26.0':
    resolution: {integrity: sha512-0SvDXmou/JjzSDOjUmetAAvcKQW6ZrvosU0rkbDGpXvvZN+pQF6JbK/Kd4hNdK4q/22yeruqvukXEJyySTzyTQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.3.0 <1.10.0'

  '@opentelemetry/sdk-trace-base@1.26.0':
    resolution: {integrity: sha512-olWQldtvbK4v22ymrKLbIcBi9L2SpMO84sCPY54IVsJhP9fRsxJT194C/AVaAuJzLE30EdhhM1VmvVYR7az+cw==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': '>=1.0.0 <1.10.0'

  '@opentelemetry/semantic-conventions@1.25.1':
    resolution: {integrity: sha512-ZDjMJJQRlyk8A1KZFCc+bCbsyrn1wTwdNt56F7twdfUfnHUZUq77/WfONCj8p72NZOyP7pNTdUWSTYC3GTbuuQ==}
    engines: {node: '>=14'}

  '@opentelemetry/semantic-conventions@1.27.0':
    resolution: {integrity: sha512-sAay1RrB+ONOem0OZanAR1ZI/k7yDpnOQSQmTMuGImUQb2y8EbSaCJ94FQluM74xoU03vlb2d2U90hZluL6nQg==}
    engines: {node: '>=14'}

  '@opentelemetry/sql-common@0.40.1':
    resolution: {integrity: sha512-nSDlnHSqzC3pXn/wZEZVLuAuJ1MYMXPBwtv2qAbCa3847SaHItdE7SzUq/Jtb0KZmh1zfAbNi3AAMjztTT4Ugg==}
    engines: {node: '>=14'}
    peerDependencies:
      '@opentelemetry/api': ^1.1.0

  '@pandacss/config@0.42.0':
    resolution: {integrity: sha512-DXxQTwuFhsBau619WVuKcUA7LkQMJaPr6eDo8q9mDx579qCcbmBdRkcjqihMTxjJVxUJ7CwcOohq3nbOOhQWHw==}

  '@pandacss/core@0.42.0':
    resolution: {integrity: sha512-XEGAUX8Z6ttcSad3KZRVzkARco0Lx56tlsfJHct/DraFXQ/veJC7Iao2VbHVnwLxdKrdTY/BlWPqT6/8Qt07uA==}

  '@pandacss/dev@0.42.0':
    resolution: {integrity: sha512-HHercZJqkYZ0LRHjVmDbkqq5YBqFAlxY+YgVxmFqxGxw6pkwgQTHBvpF4Z748XQTAaULbiTp3Huy5Yq+Xg9H/w==}
    hasBin: true

  '@pandacss/extractor@0.42.0':
    resolution: {integrity: sha512-17hiNdmCojBGW2SJ63x1kG+I325ndsir2oARn62IIZxETVlEik2fYUEcMrTzzbILpwE3OOZ6mLVhrdcA+6m0yw==}

  '@pandacss/generator@0.42.0':
    resolution: {integrity: sha512-XK4l1HM3zZo5SAgE4WyhonvFhYdYammRH5W6uBgDpcS5bj7aZ0TUZ1lhFztRihPrm3fFUihG/cf4wfHgZlvz5A==}

  '@pandacss/is-valid-prop@0.42.0':
    resolution: {integrity: sha512-XGQBl3pCVieOls6FVP6LqhgvCsDxijhrOwTGWmRSyuH/MUhSFT2cJjFYkAAKoerA7p+JotBgWV/FBDt5+zWc+w==}

  '@pandacss/logger@0.42.0':
    resolution: {integrity: sha512-DtDF80QEpP+raQwT7IVPxNrDifJQlPGrDfaVBEmWjX0SsiOYIOCzg27Ac5dWYTC9wxzBdXJOq/mPSfGrHhsiVw==}

  '@pandacss/node@0.42.0':
    resolution: {integrity: sha512-wK2dJS2fdfCAZJ1VHG5fzr4yt/O5ZonktrI5OskRyjZs+Y/uGlV8vyXV0/XUGhCTk8QgfAsUzv7MWFKCnN+s4A==}

  '@pandacss/parser@0.42.0':
    resolution: {integrity: sha512-PnSh4WfAtTqCQd/DtTRJ6SytJZcz9JFHn2C0ClLCTvypVcId9cMqXNnZl9/M9JNAeuVntaCakhia4fVkGkb9WA==}

  '@pandacss/postcss@0.42.0':
    resolution: {integrity: sha512-jdkTy2cZuqMAMCnfph3Wi4EWFyY6ECSs5cwNm7FRx4rVJ12FgbWSGGf+kyTw5fH4Fzwa7qmhTqQMTjzjjVOEQQ==}

  '@pandacss/preset-base@0.42.0':
    resolution: {integrity: sha512-zQJBlb6Cw6+pO6ICn3inVKyK1luC0H32WCLWRfOO6JwwK8RrLe1NaPenc2zJD/4XNdtmLO0LYTrIM/ozgHF9/Q==}

  '@pandacss/preset-panda@0.42.0':
    resolution: {integrity: sha512-AcJJsRN2oGG58NZ/LEsJLff9Nbh9ho8EC7hTaP8OwNCmxJupscBhFX76Xtq1krwSzf0EaFeOM0Vztfj/se5WIA==}

  '@pandacss/shared@0.42.0':
    resolution: {integrity: sha512-BSD/LEg0aD1wcItdCxQO7v6A6/NU4JsLmsrizO/X7O5g17NM0P7zW0iRwni/q9D2ixcFM9V9Ktlaeael93hbqw==}

  '@pandacss/token-dictionary@0.42.0':
    resolution: {integrity: sha512-tK45Q3wFAFDbhNR331jidhEeMiptEkrVsQaS2qbQ9TzcE4/aXnqBnT8PkyIVVICCrcdOFODQkPbXGN/fqEgcFQ==}

  '@pandacss/types@0.42.0':
    resolution: {integrity: sha512-+qTXEjoXwd4IlquhHqrZzFwsXjY0VA12RMTahMLPnph/IoXegqpWM7Si0443SVNylpwuY+54BZ5tHFACiiqzXQ==}

  '@parcel/watcher-android-arm64@2.4.1':
    resolution: {integrity: sha512-LOi/WTbbh3aTn2RYddrO8pnapixAziFl6SMxHM69r3tvdSm94JtCenaKgk1GRg5FJ5wpMCpHeW+7yqPlvZv7kg==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [android]

  '@parcel/watcher-darwin-arm64@2.4.1':
    resolution: {integrity: sha512-ln41eihm5YXIY043vBrrHfn94SIBlqOWmoROhsMVTSXGh0QahKGy77tfEywQ7v3NywyxBBkGIfrWRHm0hsKtzA==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [darwin]

  '@parcel/watcher-darwin-x64@2.4.1':
    resolution: {integrity: sha512-yrw81BRLjjtHyDu7J61oPuSoeYWR3lDElcPGJyOvIXmor6DEo7/G2u1o7I38cwlcoBHQFULqF6nesIX3tsEXMg==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [darwin]

  '@parcel/watcher-freebsd-x64@2.4.1':
    resolution: {integrity: sha512-TJa3Pex/gX3CWIx/Co8k+ykNdDCLx+TuZj3f3h7eOjgpdKM+Mnix37RYsYU4LHhiYJz3DK5nFCCra81p6g050w==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [freebsd]

  '@parcel/watcher-linux-arm-glibc@2.4.1':
    resolution: {integrity: sha512-4rVYDlsMEYfa537BRXxJ5UF4ddNwnr2/1O4MHM5PjI9cvV2qymvhwZSFgXqbS8YoTk5i/JR0L0JDs69BUn45YA==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm]
    os: [linux]

  '@parcel/watcher-linux-arm64-glibc@2.4.1':
    resolution: {integrity: sha512-BJ7mH985OADVLpbrzCLgrJ3TOpiZggE9FMblfO65PlOCdG++xJpKUJ0Aol74ZUIYfb8WsRlUdgrZxKkz3zXWYA==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [linux]

  '@parcel/watcher-linux-arm64-musl@2.4.1':
    resolution: {integrity: sha512-p4Xb7JGq3MLgAfYhslU2SjoV9G0kI0Xry0kuxeG/41UfpjHGOhv7UoUDAz/jb1u2elbhazy4rRBL8PegPJFBhA==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [linux]

  '@parcel/watcher-linux-x64-glibc@2.4.1':
    resolution: {integrity: sha512-s9O3fByZ/2pyYDPoLM6zt92yu6P4E39a03zvO0qCHOTjxmt3GHRMLuRZEWhWLASTMSrrnVNWdVI/+pUElJBBBg==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [linux]

  '@parcel/watcher-linux-x64-musl@2.4.1':
    resolution: {integrity: sha512-L2nZTYR1myLNST0O632g0Dx9LyMNHrn6TOt76sYxWLdff3cB22/GZX2UPtJnaqQPdCRoszoY5rcOj4oMTtp5fQ==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [linux]

  '@parcel/watcher-win32-arm64@2.4.1':
    resolution: {integrity: sha512-Uq2BPp5GWhrq/lcuItCHoqxjULU1QYEcyjSO5jqqOK8RNFDBQnenMMx4gAl3v8GiWa59E9+uDM7yZ6LxwUIfRg==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [win32]

  '@parcel/watcher-win32-ia32@2.4.1':
    resolution: {integrity: sha512-maNRit5QQV2kgHFSYwftmPBxiuK5u4DXjbXx7q6eKjq5dsLXZ4FJiVvlcw35QXzk0KrUecJmuVFbj4uV9oYrcw==}
    engines: {node: '>= 10.0.0'}
    cpu: [ia32]
    os: [win32]

  '@parcel/watcher-win32-x64@2.4.1':
    resolution: {integrity: sha512-+DvS92F9ezicfswqrvIRM2njcYJbd5mb9CUgtrHCHmvn7pPPa+nMDRu1o1bYYz/l5IB2NVGNJWiH7h1E58IF2A==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [win32]

  '@parcel/watcher@2.4.1':
    resolution: {integrity: sha512-HNjmfLQEVRZmHRET336f20H/8kOozUGwk7yajvsonjNxbj2wBTK1WsQuHkD5yYh9RxFGL2EyDHryOihOwUoKDA==}
    engines: {node: '>= 10.0.0'}

  '@park-ui/panda-preset@0.38.1':
    resolution: {integrity: sha512-5SQXojWcj/TAB64BjF02YL6pe+bCuYK2EsI2e2KoTbQjVwBiBEXP7Ed+OJ6i1//UBEUy5h36taM8i2ifgD8TIw==}
    peerDependencies:
      '@pandacss/dev': '>0.22.0'

  '@peculiar/asn1-schema@2.3.13':
    resolution: {integrity: sha512-3Xq3a01WkHRZL8X04Zsfg//mGaA21xlL4tlVn4v2xGT0JStiztATRkMwa5b+f/HXmY2smsiLXYK46Gwgzvfg3g==}

  '@peculiar/json-schema@1.1.12':
    resolution: {integrity: sha512-coUfuoMeIB7B8/NMekxaDzLhaYmp0HZNPEjYRm9goRou8UZIC3z21s0sL9AWoCw4EG876QyO3kYrc61WNF9B/w==}
    engines: {node: '>=8.0.0'}

  '@peculiar/webcrypto@1.5.0':
    resolution: {integrity: sha512-BRs5XUAwiyCDQMsVA9IDvDa7UBR9gAvPHgugOeGng3YN6vJ9JYonyDc0lNczErgtCWtucjR5N7VtaonboD/ezg==}
    engines: {node: '>=10.12.0'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@pkgr/core@0.1.1':
    resolution: {integrity: sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==}
    engines: {node: ^12.20.0 || ^14.18.0 || >=16.0.0}

  '@prisma/client@5.17.0':
    resolution: {integrity: sha512-N2tnyKayT0Zf7mHjwEyE8iG7FwTmXDHFZ1GnNhQp0pJUObsuel4ZZ1XwfuAYkq5mRIiC/Kot0kt0tGCfLJ70Jw==}
    engines: {node: '>=16.13'}
    peerDependencies:
      prisma: '*'
    peerDependenciesMeta:
      prisma:
        optional: true

  '@prisma/debug@5.17.0':
    resolution: {integrity: sha512-l7+AteR3P8FXiYyo496zkuoiJ5r9jLQEdUuxIxNCN1ud8rdbH3GTxm+f+dCyaSv9l9WY+29L9czaVRXz9mULfg==}

  '@prisma/engines-version@5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053':
    resolution: {integrity: sha512-tUuxZZysZDcrk5oaNOdrBnnkoTtmNQPkzINFDjz7eG6vcs9AVDmA/F6K5Plsb2aQc/l5M2EnFqn3htng9FA4hg==}

  '@prisma/engines@5.17.0':
    resolution: {integrity: sha512-+r+Nf+JP210Jur+/X8SIPLtz+uW9YA4QO5IXA+KcSOBe/shT47bCcRMTYCbOESw3FFYFTwe7vU6KTWHKPiwvtg==}

  '@prisma/fetch-engine@5.17.0':
    resolution: {integrity: sha512-ESxiOaHuC488ilLPnrv/tM2KrPhQB5TRris/IeIV4ZvUuKeaicCl4Xj/JCQeG9IlxqOgf1cCg5h5vAzlewN91Q==}

  '@prisma/get-platform@5.17.0':
    resolution: {integrity: sha512-UlDgbRozCP1rfJ5Tlkf3Cnftb6srGrEQ4Nm3og+1Se2gWmCZ0hmPIi+tQikGDUVLlvOWx3Gyi9LzgRP+HTXV9w==}

  '@prisma/instrumentation@5.18.0':
    resolution: {integrity: sha512-r074avGkpPXItk+josQPhufZEmGhUCb16PQx4ITPS40vWTpTPET4VsgCBZB2alIN6SS7pRFod2vz2M2HHEEylQ==}

  '@protobufjs/aspromise@1.1.2':
    resolution: {integrity: sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==}

  '@protobufjs/base64@1.1.2':
    resolution: {integrity: sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==}

  '@protobufjs/codegen@2.0.4':
    resolution: {integrity: sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==}

  '@protobufjs/eventemitter@1.1.0':
    resolution: {integrity: sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==}

  '@protobufjs/fetch@1.1.0':
    resolution: {integrity: sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==}

  '@protobufjs/float@1.0.2':
    resolution: {integrity: sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==}

  '@protobufjs/inquire@1.1.0':
    resolution: {integrity: sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==}

  '@protobufjs/path@1.1.2':
    resolution: {integrity: sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==}

  '@protobufjs/pool@1.1.0':
    resolution: {integrity: sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==}

  '@protobufjs/utf8@1.1.0':
    resolution: {integrity: sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==}

  '@radix-ui/colors@3.0.0':
    resolution: {integrity: sha512-FUOsGBkHrYJwCSEtWRCIfQbZG7q1e6DgxCIOe1SUQzDe/7rXXeA47s8yCn6fuTNQAj1Zq4oTFi9Yjp3wzElcxg==}

  '@redis/bloom@1.2.0':
    resolution: {integrity: sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==}
    peerDependencies:
      '@redis/client': ^1.0.0

  '@redis/client@1.6.0':
    resolution: {integrity: sha512-aR0uffYI700OEEH4gYnitAnv3vzVGXCFvYfdpu/CJKvk4pHfLPEy/JSZyrpQ+15WhXe1yJRXLtfQ84s4mEXnPg==}
    engines: {node: '>=14'}

  '@redis/graph@1.1.1':
    resolution: {integrity: sha512-FEMTcTHZozZciLRl6GiiIB4zGm5z5F3F6a6FZCyrfxdKOhFlGkiAqlexWMBzCi4DcRoyiOsuLfW+cjlGWyExOw==}
    peerDependencies:
      '@redis/client': ^1.0.0

  '@redis/json@1.0.7':
    resolution: {integrity: sha512-6UyXfjVaTBTJtKNG4/9Z8PSpKE6XgSyEb8iwaqDcy+uKrd/DGYHTWkUdnQDyzm727V7p21WUMhsqz5oy65kPcQ==}
    peerDependencies:
      '@redis/client': ^1.0.0

  '@redis/search@1.2.0':
    resolution: {integrity: sha512-tYoDBbtqOVigEDMAcTGsRlMycIIjwMCgD8eR2t0NANeQmgK/lvxNAvYyb6bZDD4frHRhIHkJu2TBRvB0ERkOmw==}
    peerDependencies:
      '@redis/client': ^1.0.0

  '@redis/time-series@1.1.0':
    resolution: {integrity: sha512-c1Q99M5ljsIuc4YdaCwfUEXsofakb9c8+Zse2qxTadu8TalLXuAESzLvFAvNVbkmSlvlzIQOLpBCmWI9wTOt+g==}
    peerDependencies:
      '@redis/client': ^1.0.0

  '@repeaterjs/repeater@3.0.6':
    resolution: {integrity: sha512-Javneu5lsuhwNCryN+pXH93VPQ8g0dBX7wItHFgYiwQmzE1sVdg5tWHiOgHywzL2W21XQopa7IwIEnNbmeUJYA==}

  '@rgbpp-sdk/btc@0.5.0':
    resolution: {integrity: sha512-udqocY2ZonGtNa2q9QEr6EZX/WaW/lnqbFQbp6dHyVT22qchtpZt+Ef92X+XGLIwqWd2fqKIv4oejHhn2S9ncA==}

  '@rgbpp-sdk/ckb@0.5.0':
    resolution: {integrity: sha512-GVkz1tq+HT8do77bmcWH/oN5BsWfIVTXfnlTpocKZ86OhIEj+2z5cBwECIjdZ5MKe3h49xH81bCn0jFWqa7yhQ==}

  '@rgbpp-sdk/service@0.5.0':
    resolution: {integrity: sha512-hcgWltNE7aeQXXfCcysj2TXf3J/IodpP9nEXis1MrT3MTTNnEm2PpRh0URLOVEZOkpeSxAw2Nyb9Eu9dWzDdiw==}

  '@rushstack/eslint-patch@1.10.4':
    resolution: {integrity: sha512-WJgX9nzTqknM393q1QJDJmoW28kUfEnybeTfVNcNAPnIx210RXm2DiXiHzfNPJNIUUb1tJnz/l4QGtJ30PgWmA==}

  '@scure/base@1.1.7':
    resolution: {integrity: sha512-PPNYBslrLNNUQ/Yad37MHYsNQtK67EhWb6WtSvNLLPo7SdVZgkUjD6Dg+5On7zNwmskf8OX7I7Nx5oN+MIWE0g==}

  '@sentry/core@8.28.0':
    resolution: {integrity: sha512-+If9uubvpZpvaQQw4HLiKPhrSS9/KcoA/AcdQkNm+5CVwAoOmDPtyYfkPBgfo2hLZnZQqR1bwkz/PrNoOm+gqA==}
    engines: {node: '>=14.18'}

  '@sentry/nestjs@8.28.0':
    resolution: {integrity: sha512-irXlszfo8vYQKfufmS9VX7nxL+N29A/8DTYmTCLVn4yDPBHw7HfXCdAaVWf+c+wvX8w6dykKLjGlE6iOD9Mncw==}
    engines: {node: '>=16'}
    peerDependencies:
      '@nestjs/common': ^8.0.0 || ^9.0.0 || ^10.0.0
      '@nestjs/core': ^8.0.0 || ^9.0.0 || ^10.0.0

  '@sentry/node@8.28.0':
    resolution: {integrity: sha512-444hx0S7EAYDdq3g2U37qHFC/WFErgf8ZvXqhWfoCI4RweHHntdFbz3azexYnO61iUsmSAnFAX6htJtAG2zNdA==}
    engines: {node: '>=14.18'}

  '@sentry/opentelemetry@8.28.0':
    resolution: {integrity: sha512-xClK/fa2Y9AMoaV6f7sWfoHAz56actn2RN3UuYAfxlgmNEfZEa0tc78x4XygCT+2b83QbUb+qf1q4+1ft+HEsQ==}
    engines: {node: '>=14.18'}
    peerDependencies:
      '@opentelemetry/api': ^1.9.0
      '@opentelemetry/core': ^1.25.1
      '@opentelemetry/instrumentation': ^0.52.1
      '@opentelemetry/sdk-trace-base': ^1.25.1
      '@opentelemetry/semantic-conventions': ^1.25.1

  '@sentry/profiling-node@8.28.0':
    resolution: {integrity: sha512-VJFj0XxodeRm+mRJlLYMEmn6HKnYkEm07Zb2mdhG979bQwt2VRoPd+Cv4M6irEfmFoRD1OAR9HX0/p9ClcWzXg==}
    engines: {node: '>=14.18'}
    hasBin: true

  '@sentry/types@8.28.0':
    resolution: {integrity: sha512-hOfqfd92/AzBrEdMgmmV1VfOXJbIfleFTnerRl0mg/+CcNgP/6+Fdonp354TD56ouWNF2WkOM6sEKSXMWp6SEQ==}
    engines: {node: '>=14.18'}

  '@sentry/utils@8.28.0':
    resolution: {integrity: sha512-smhk7PJpvDMQ2DB5p2qn9UeoUHdU41IgjMmS2xklZpa8tjzBTxDeWpGvrX2fuH67D9bAJuLC/XyZjJCHLoEW5g==}
    engines: {node: '>=14.18'}

  '@sinclair/typebox@0.27.8':
    resolution: {integrity: sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==}

  '@sinonjs/commons@3.0.1':
    resolution: {integrity: sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==}

  '@sinonjs/fake-timers@10.3.0':
    resolution: {integrity: sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==}

  '@spore-sdk/core@0.2.1':
    resolution: {integrity: sha512-mNUxoQu4h6H4DIEwBxUzntFf6HFG5xXOsSwnN9jF0+oL+fIjOTNt4erwZeeJo1H7H6AS4S9OkDFikykYVIzZSg==}
    peerDependencies:
      '@ckb-lumos/lumos': 0.22.0-next.5
      lodash: ^4.17.21

  '@svgr/babel-plugin-add-jsx-attribute@8.0.0':
    resolution: {integrity: sha512-b9MIk7yhdS1pMCZM8VeNfUlSKVRhsHZNMl5O9SfaX0l0t5wjdgu4IDzGB8bpnGBBOjGST3rRFVsaaEtI4W6f7g==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-remove-jsx-attribute@8.0.0':
    resolution: {integrity: sha512-BcCkm/STipKvbCl6b7QFrMh/vx00vIP63k2eM66MfHJzPr6O2U0jYEViXkHJWqXqQYjdeA9cuCl5KWmlwjDvbA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-remove-jsx-empty-expression@8.0.0':
    resolution: {integrity: sha512-5BcGCBfBxB5+XSDSWnhTThfI9jcO5f0Ai2V24gZpG+wXF14BzwxxdDb4g6trdOux0rhibGs385BeFMSmxtS3uA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-replace-jsx-attribute-value@8.0.0':
    resolution: {integrity: sha512-KVQ+PtIjb1BuYT3ht8M5KbzWBhdAjjUPdlMtpuw/VjT8coTrItWX6Qafl9+ji831JaJcu6PJNKCV0bp01lBNzQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-svg-dynamic-title@8.0.0':
    resolution: {integrity: sha512-omNiKqwjNmOQJ2v6ge4SErBbkooV2aAWwaPFs2vUY7p7GhVkzRkJ00kILXQvRhA6miHnNpXv7MRnnSjdRjK8og==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-svg-em-dimensions@8.0.0':
    resolution: {integrity: sha512-mURHYnu6Iw3UBTbhGwE/vsngtCIbHE43xCRK7kCw4t01xyGqb2Pd+WXekRRoFOBIY29ZoOhUCTEweDMdrjfi9g==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-transform-react-native-svg@8.1.0':
    resolution: {integrity: sha512-Tx8T58CHo+7nwJ+EhUwx3LfdNSG9R2OKfaIXXs5soiy5HtgoAEkDay9LIimLOcG8dJQH1wPZp/cnAv6S9CrR1Q==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-transform-svg-component@8.0.0':
    resolution: {integrity: sha512-DFx8xa3cZXTdb/k3kfPeaixecQLgKh5NVBMwD0AQxOzcZawK4oo1Jh9LbrcACUivsCA7TLG8eeWgrDXjTMhRmw==}
    engines: {node: '>=12'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-preset@8.1.0':
    resolution: {integrity: sha512-7EYDbHE7MxHpv4sxvnVPngw5fuR6pw79SkcrILHJ/iMpuKySNCl5W1qcwPEpU+LgyRXOaAFgH0KhwD18wwg6ug==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/core@8.1.0':
    resolution: {integrity: sha512-8QqtOQT5ACVlmsvKOJNEaWmRPmcojMOzCz4Hs2BGG/toAp/K38LcsMRyLp349glq5AzJbCEeimEoxaX6v/fLrA==}
    engines: {node: '>=14'}

  '@svgr/hast-util-to-babel-ast@8.0.0':
    resolution: {integrity: sha512-EbDKwO9GpfWP4jN9sGdYwPBU0kdomaPIL2Eu4YwmgP+sJeXT+L7bMwJUBnhzfH8Q2qMBqZ4fJwpCyYsAN3mt2Q==}
    engines: {node: '>=14'}

  '@svgr/plugin-jsx@8.1.0':
    resolution: {integrity: sha512-0xiIyBsLlr8quN+WyuxooNW9RJ0Dpr8uOnH/xrCVO8GLUcwHISwj1AG0k+LFzteTkAA0GbX0kj9q6Dk70PTiPA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@svgr/core': '*'

  '@svgr/plugin-svgo@8.1.0':
    resolution: {integrity: sha512-Ywtl837OGO9pTLIN/onoWLmDQ4zFUycI1g76vuKGEz6evR/ZTJlJuz3G/fIkb6OVBJ2g0o6CGJzaEjfmEo3AHA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@svgr/core': '*'

  '@svgr/webpack@8.1.0':
    resolution: {integrity: sha512-LnhVjMWyMQV9ZmeEy26maJk+8HTIbd59cH4F2MJ439k9DqejRisfFNGAPvRYlKETuh9LrImlS8aKsBgKjMA8WA==}
    engines: {node: '>=14'}

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/helpers@0.5.12':
    resolution: {integrity: sha512-KMZNXiGibsW9kvZAO1Pam2JPTDBm+KSHMMHWdsyI/1DbIZjT2A6Gy3hblVXUMEDvUAKq+e0vL0X0o54owWji7g==}

  '@swc/helpers@0.5.5':
    resolution: {integrity: sha512-KGYxvIOXcceOAbEk4bi/dVLEK9z8sZ0uBB3Il5b1rhfClSpcX0yfRO0KmTkqR2cnQDymwLB+25ZyMzICg/cm/A==}

  '@tanstack/query-core@5.51.21':
    resolution: {integrity: sha512-POQxm42IUp6n89kKWF4IZi18v3fxQWFRolvBA6phNVmA8psdfB1MvDnGacCJdS+EOX12w/CyHM62z//rHmYmvw==}

  '@tanstack/react-query@5.51.21':
    resolution: {integrity: sha512-Q/V81x3sAYgCsxjwOkfLXfrmoG+FmDhLeHH5okC/Bp8Aaw2c33lbEo/mMcMnkxUPVtB2FLpzHT0tq3c+OlZEbw==}
    peerDependencies:
      react: ^18.0.0

  '@trysound/sax@0.2.0':
    resolution: {integrity: sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==}
    engines: {node: '>=10.13.0'}

  '@ts-morph/common@0.22.0':
    resolution: {integrity: sha512-HqNBuV/oIlMKdkLshXd1zKBqNQCsuPEsgQOkfFQ/eUKjRlwndXW1AjN9LVkBEIukm00gGXSRmfkl0Wv5VXLnlw==}

  '@tsconfig/node10@1.0.11':
    resolution: {integrity: sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==}

  '@tsconfig/node12@1.0.11':
    resolution: {integrity: sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==}

  '@tsconfig/node14@1.0.3':
    resolution: {integrity: sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==}

  '@tsconfig/node16@1.0.4':
    resolution: {integrity: sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==}

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.6.8':
    resolution: {integrity: sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.6':
    resolution: {integrity: sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==}

  '@types/blake2b@2.1.3':
    resolution: {integrity: sha512-MFCdX0MNxFBP/xEILO5Td0kv6nI7+Q2iRWZbTL/yzH2/eDVZS5Wd1LHdsmXClvsCyzqaZfHFzZaN6BUeUCfSDA==}

  '@types/body-parser@1.19.5':
    resolution: {integrity: sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==}

  '@types/connect@3.4.36':
    resolution: {integrity: sha512-P63Zd/JUGq+PdrM1lv0Wv5SBYeA2+CORvbrXbngriYY0jzLUWfQMQQxOhjONEz/wlHOAxOdY7CY65rgQdTjq2w==}

  '@types/connect@3.4.38':
    resolution: {integrity: sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==}

  '@types/cookiejar@2.1.5':
    resolution: {integrity: sha512-he+DHOWReW0nghN24E1WUqM0efK4kI9oTqDm6XmK8ZPe2djZ90BSNdGnIyCLzCPw7/pogPlGbzI2wHGGmi4O/Q==}

  '@types/deep-freeze-strict@1.1.2':
    resolution: {integrity: sha512-VvMETBojHvhX4f+ocYTySQlXMZfxKV3Jyb7iCWlWaC+exbedkv6Iv2bZZqI736qXjVguH6IH7bzwMBMfTT+zuQ==}

  '@types/eslint-scope@3.7.7':
    resolution: {integrity: sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==}

  '@types/eslint@9.6.0':
    resolution: {integrity: sha512-gi6WQJ7cHRgZxtkQEoyHMppPjq9Kxo5Tjn2prSKDSmZrCz8TZ3jSRCeTJm+WoM+oB0WG37bRqLzaaU3q7JypGg==}

  '@types/estree@1.0.5':
    resolution: {integrity: sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==}

  '@types/express-serve-static-core@4.19.5':
    resolution: {integrity: sha512-y6W03tvrACO72aijJ5uF02FRq5cgDR9lUxddQ8vyF+GvmjJQqbzDcJngEjURc+ZsG31VI3hODNZJ2URj86pzmg==}

  '@types/express@4.17.21':
    resolution: {integrity: sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==}

  '@types/graceful-fs@4.1.9':
    resolution: {integrity: sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==}

  '@types/http-errors@2.0.4':
    resolution: {integrity: sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==}

  '@types/istanbul-lib-coverage@2.0.6':
    resolution: {integrity: sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==}

  '@types/istanbul-lib-report@3.0.3':
    resolution: {integrity: sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==}

  '@types/istanbul-reports@3.0.4':
    resolution: {integrity: sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==}

  '@types/jest@29.5.12':
    resolution: {integrity: sha512-eDC8bTvT/QhYdxJAulQikueigY5AsdBRH2yDKW3yveW7svY3+DzN84/2NUgkw10RTiJbWqZrTtoGVdYlvFJdLw==}

  '@types/js-yaml@4.0.9':
    resolution: {integrity: sha512-k4MGaQl5TGo/iipqb2UDG2UwjXziSWkh0uysQelTlJpX1qGlpUZYm8PnO4DxG1qBomtJUdYJ6qR6xdIah10JLg==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/json5@0.0.29':
    resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}

  '@types/lodash-es@4.17.12':
    resolution: {integrity: sha512-0NgftHUcV4v34VhXm8QBSftKVXtbkBG3ViCjs6+eJ5a6y6Mi/jiFGPc1sC7QK+9BFhWrURE3EOggmWaSxL9OzQ==}

  '@types/lodash.isequal@4.5.8':
    resolution: {integrity: sha512-uput6pg4E/tj2LGxCZo9+y27JNyB2OZuuI/T5F+ylVDYuqICLG2/ktjxx0v6GvVntAf8TvEzeQLcV0ffRirXuA==}

  '@types/lodash@4.17.7':
    resolution: {integrity: sha512-8wTvZawATi/lsmNu10/j2hk1KEP0IvjubqPE3cu1Xz7xfXXt5oCq3SNUz4fMIP4XGF9Ky+Ue2tBA3hcS7LSBlA==}

  '@types/long@4.0.2':
    resolution: {integrity: sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==}

  '@types/luxon@3.4.2':
    resolution: {integrity: sha512-TifLZlFudklWlMBfhubvgqTXRzLDI5pCbGa4P8a3wPyUQSW+1xQ5eDsreP9DWHX3tjq1ke96uYG/nwundroWcA==}

  '@types/methods@1.1.4':
    resolution: {integrity: sha512-ymXWVrDiCxTBE3+RIrrP533E70eA+9qu7zdWoHuOmGujkYtzf4HQF96b8nwHLqhuf4ykX61IGRIB38CC6/sImQ==}

  '@types/mime@1.3.5':
    resolution: {integrity: sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==}

  '@types/mysql@2.15.22':
    resolution: {integrity: sha512-wK1pzsJVVAjYCSZWQoWHziQZbNggXFDUEIGf54g4ZM/ERuP86uGdWeKZWMYlqTPMZfHJJvLPyogXGvCOg87yLQ==}

  '@types/negotiator@0.6.3':
    resolution: {integrity: sha512-JkXTOdKs5MF086b/pt8C3+yVp3iDUwG635L7oCH6HvJvvr6lSUU5oe/gLXnPEfYRROHjJIPgCV6cuAg8gGkntQ==}

  '@types/node-fetch@2.6.11':
    resolution: {integrity: sha512-24xFj9R5+rfQJLRyM56qh+wnVSYhyXC2tkoBndtY0U+vubqNsYXGjufB2nn8Q6gt0LrARwL6UBtMCSVCwl4B1g==}

  '@types/node@10.17.60':
    resolution: {integrity: sha512-F0KIgDJfy2nA3zMLmWGKxcH2ZVEtCZXHHdOQs2gSaQ27+lNeEfGxzkIw90aXswATX7AZ33tahPbzy6KAfUreVw==}

  '@types/node@17.0.45':
    resolution: {integrity: sha512-w+tIMs3rq2afQdsPJlODhoUEKzFP1ayaoyl1CcnwtIlsVe7K7bA1NGm4s3PraqTLlXnbIN84zuBlxBWo1u9BLw==}

  '@types/node@20.14.10':
    resolution: {integrity: sha512-MdiXf+nDuMvY0gJKxyfZ7/6UFsETO7mGKF54MVD/ekJS6HdFtpZFBgrh6Pseu64XTb2MLyFPlbW6hj8HYRQNOQ==}

  '@types/normalize-package-data@2.4.4':
    resolution: {integrity: sha512-37i+OaWTh9qeK4LSHPsyRC7NahnGotNuZvjLSgcPzblpHB3rrCJxAOgI5gCdKm7coonsaX1Of0ILiTcnZjbfxA==}

  '@types/parse-json@4.0.2':
    resolution: {integrity: sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==}

  '@types/pg-pool@2.0.4':
    resolution: {integrity: sha512-qZAvkv1K3QbmHHFYSNRYPkRjOWRLBYrL4B9c+wG0GSVGBw0NtJwPcgx/DSddeDJvRGMHCEQ4VMEVfuJ/0gZ3XQ==}

  '@types/pg@8.6.1':
    resolution: {integrity: sha512-1Kc4oAGzAl7uqUStZCDvaLFqZrW9qWSjXOmBfdgyBP5La7Us6Mg4GBvRlSoaZMhQF/zSj1C8CtKMBkoiT8eL8w==}

  '@types/prop-types@15.7.12':
    resolution: {integrity: sha512-5zvhXYtRNRluoE/jAp4GVsSduVUzNWKkOZrCDBWYtE7biZywwdC2AcEzg+cSMLFRfVgeAFqpfNabiPjxFddV1Q==}

  '@types/qs@6.9.15':
    resolution: {integrity: sha512-uXHQKES6DQKKCLh441Xv/dwxOq1TVS3JPUMlEqoEglvlhR6Mxnlew/Xq/LRVHpLyk7iK3zODe1qYHIMltO7XGg==}

  '@types/range-parser@1.2.7':
    resolution: {integrity: sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==}

  '@types/react-dom@18.3.0':
    resolution: {integrity: sha512-EhwApuTmMBmXuFOikhQLIBUn6uFg81SwLMOAUgodJF14SOBOCMdU04gDoYi0WOJJHD144TL32z4yDqCW3dnkQg==}

  '@types/react@18.3.3':
    resolution: {integrity: sha512-hti/R0pS0q1/xx+TsI73XIqk26eBsISZ2R0wUijXIngRK9R/e7Xw/cXVxQK7R5JjW+SV4zGcn5hXjudkN/pLIw==}

  '@types/semver@7.5.8':
    resolution: {integrity: sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==}

  '@types/send@0.17.4':
    resolution: {integrity: sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==}

  '@types/serialize-javascript@5.0.4':
    resolution: {integrity: sha512-Z2R7UKFuNWCP8eoa2o9e5rkD3hmWxx/1L0CYz0k2BZzGh0PhEVMp9kfGiqEml/0IglwNERXZ2hwNzIrSz/KHTA==}

  '@types/serve-static@1.15.7':
    resolution: {integrity: sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==}

  '@types/shimmer@1.2.0':
    resolution: {integrity: sha512-UE7oxhQLLd9gub6JKIAhDq06T0F6FnztwMNRvYgjeQSBeMc1ZG/tA47EwfduvkuQS8apbkM/lpLpWsaCeYsXVg==}

  '@types/stack-utils@2.0.3':
    resolution: {integrity: sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==}

  '@types/superagent@8.1.8':
    resolution: {integrity: sha512-nTqHJ2OTa7PFEpLahzSEEeFeqbMpmcN7OeayiOc7v+xk+/vyTKljRe+o4MPqSnPeRCMvtxuLG+5QqluUVQJOnA==}

  '@types/supertest@6.0.2':
    resolution: {integrity: sha512-137ypx2lk/wTQbW6An6safu9hXmajAifU/s7szAHLN/FeIm5w7yR0Wkl9fdJMRSHwOn4HLAI0DaB2TOORuhPDg==}

  '@types/ws@8.5.11':
    resolution: {integrity: sha512-4+q7P5h3SpJxaBft0Dzpbr6lmMaqh0Jr2tbhJZ/luAwvD7ohSCniYkwz/pLxuT2h0EOa6QADgJj1Ko+TzRfZ+w==}

  '@types/yargs-parser@21.0.3':
    resolution: {integrity: sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==}

  '@types/yargs@17.0.32':
    resolution: {integrity: sha512-xQ67Yc/laOG5uMfX/093MRlGGCIBzZMarVa+gfNKJxWAIgykYpVGkBdbqEzGDDfCrVUj6Hiff4mTZ5BA6TmAog==}

  '@typescript-eslint/eslint-plugin@6.21.0':
    resolution: {integrity: sha512-oy9+hTPCUFpngkEZUSzbf9MxI65wbKFoQYsgPdILTfbUldp5ovUuphZVe4i30emU9M/kP+T64Di0mxl7dSw3MA==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      '@typescript-eslint/parser': ^6.0.0 || ^6.0.0-alpha
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/eslint-plugin@7.18.0':
    resolution: {integrity: sha512-94EQTWZ40mzBc42ATNIBimBEDltSJ9RQHCC8vc/PDbxi4k8dVwUAv4o98dk50M1zB+JGFxp43FP7f8+FP8R6Sw==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      '@typescript-eslint/parser': ^7.0.0
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@6.21.0':
    resolution: {integrity: sha512-tbsV1jPne5CkFQCgPBcDOt30ItF7aJoZL997JSF7MhGQqOeT3svWRYxiqlfA5RUdlHN6Fi+EI9bxqbdyAUZjYQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@7.18.0':
    resolution: {integrity: sha512-4Z+L8I2OqhZV8qA132M4wNL30ypZGYOQVBfMgxDH/K5UX0PNqTu1c6za9ST5r9+tavvHiTWmBnKzpCJ/GlVFtg==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/scope-manager@6.21.0':
    resolution: {integrity: sha512-OwLUIWZJry80O99zvqXVEioyniJMa+d2GrqpUTqi5/v5D5rOrppJVBPa0yKCblcigC0/aYAzxxqQ1B+DS2RYsg==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/scope-manager@7.18.0':
    resolution: {integrity: sha512-jjhdIE/FPF2B7Z1uzc6i3oWKbGcHb87Qw7AWj6jmEqNOfDFbJWtjt/XfwCpvNkpGWlcJaog5vTR+VV8+w9JflA==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@typescript-eslint/type-utils@6.21.0':
    resolution: {integrity: sha512-rZQI7wHfao8qMX3Rd3xqeYSMCL3SoiSQLBATSiVKARdFGCYSRvmViieZjqc58jKgs8Y8i9YvVVhRbHSTA4VBag==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/type-utils@7.18.0':
    resolution: {integrity: sha512-XL0FJXuCLaDuX2sYqZUUSOJ2sG5/i1AAze+axqmLnSkNEVMVYLF+cbwlB2w8D1tinFuSikHmFta+P+HOofrLeA==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/types@6.21.0':
    resolution: {integrity: sha512-1kFmZ1rOm5epu9NZEZm1kckCDGj5UJEf7P1kliH4LKu/RkwpsfqqGmY2OOcUs18lSlQBKLDYBOGxRVtrMN5lpg==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/types@7.18.0':
    resolution: {integrity: sha512-iZqi+Ds1y4EDYUtlOOC+aUmxnE9xS/yCigkjA7XpTKV6nCBd3Hp/PRGGmdwnfkV2ThMyYldP1wRpm/id99spTQ==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@typescript-eslint/typescript-estree@6.21.0':
    resolution: {integrity: sha512-6npJTkZcO+y2/kr+z0hc4HwNfrrP4kNYh57ek7yCNlrBjWQ1Y0OS7jiZTkgumrvkX5HkEKXFZkkdFNkaW2wmUQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/typescript-estree@7.18.0':
    resolution: {integrity: sha512-aP1v/BSPnnyhMHts8cf1qQ6Q1IFwwRvAQGRvBFkWlo3/lH29OXA3Pts+c10nxRxIBrDnoMqzhgdwVe5f2D6OzA==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/utils@6.21.0':
    resolution: {integrity: sha512-NfWVaC8HP9T8cbKQxHcsJBY5YE1O33+jpMwN45qzWWaPDZgLIbo12toGMWnmhvCpd3sIxkpDw3Wv1B3dYrbDQQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0

  '@typescript-eslint/utils@7.18.0':
    resolution: {integrity: sha512-kK0/rNa2j74XuHVcoCZxdFBMF+aq/vH83CXAOHieC+2Gis4mF8jJXT5eAfyD3K0sAxtPuwxaIOIOvhwzVDt/kw==}
    engines: {node: ^18.18.0 || >=20.0.0}
    peerDependencies:
      eslint: ^8.56.0

  '@typescript-eslint/visitor-keys@6.21.0':
    resolution: {integrity: sha512-JJtkDduxLi9bivAB+cYOVMtbkqdPOhZ+ZI5LC47MIRrDV4Yn2o+ZnW10Nkmr28xRpSpdJ6Sm42Hjf2+REYXm0A==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/visitor-keys@7.18.0':
    resolution: {integrity: sha512-cDF0/Gf81QpY3xYyJKDV14Zwdmid5+uuENhjH2EqFaF0ni+yAyq/LzMaIJdhNJXZI7uLzwIlA+V7oWoyn6Curg==}
    engines: {node: ^18.18.0 || >=20.0.0}

  '@ungap/structured-clone@1.2.0':
    resolution: {integrity: sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==}

  '@vue/compiler-core@3.4.19':
    resolution: {integrity: sha512-gj81785z0JNzRcU0Mq98E56e4ltO1yf8k5PQ+tV/7YHnbZkrM0fyFyuttnN8ngJZjbpofWE/m4qjKBiLl8Ju4w==}

  '@vue/compiler-dom@3.4.19':
    resolution: {integrity: sha512-vm6+cogWrshjqEHTzIDCp72DKtea8Ry/QVpQRYoyTIg9k7QZDX6D8+HGURjtmatfgM8xgCFtJJaOlCaRYRK3QA==}

  '@vue/compiler-sfc@3.4.19':
    resolution: {integrity: sha512-LQ3U4SN0DlvV0xhr1lUsgLCYlwQfUfetyPxkKYu7dkfvx7g3ojrGAkw0AERLOKYXuAGnqFsEuytkdcComei3Yg==}

  '@vue/compiler-ssr@3.4.19':
    resolution: {integrity: sha512-P0PLKC4+u4OMJ8sinba/5Z/iDT84uMRRlrWzadgLA69opCpI1gG4N55qDSC+dedwq2fJtzmGald05LWR5TFfLw==}

  '@vue/shared@3.4.19':
    resolution: {integrity: sha512-/KliRRHMF6LoiThEy+4c1Z4KB/gbPrGjWwJR+crg2otgrf/egKzRaCPvJ51S5oetgsgXLfc4Rm5ZgrKHZrtMSw==}

  '@webassemblyjs/ast@1.12.1':
    resolution: {integrity: sha512-EKfMUOPRRUTy5UII4qJDGPpqfwjOmZ5jeGFwid9mnoqIFK+e0vqoi1qH56JpmZSzEL53jKnNzScdmftJyG5xWg==}

  '@webassemblyjs/floating-point-hex-parser@1.11.6':
    resolution: {integrity: sha512-ejAj9hfRJ2XMsNHk/v6Fu2dGS+i4UaXBXGemOfQ/JfQ6mdQg/WXtwleQRLLS4OvfDhv8rYnVwH27YJLMyYsxhw==}

  '@webassemblyjs/helper-api-error@1.11.6':
    resolution: {integrity: sha512-o0YkoP4pVu4rN8aTJgAyj9hC2Sv5UlkzCHhxqWj8butaLvnpdc2jOwh4ewE6CX0txSfLn/UYaV/pheS2Txg//Q==}

  '@webassemblyjs/helper-buffer@1.12.1':
    resolution: {integrity: sha512-nzJwQw99DNDKr9BVCOZcLuJJUlqkJh+kVzVl6Fmq/tI5ZtEyWT1KZMyOXltXLZJmDtvLCDgwsyrkohEtopTXCw==}

  '@webassemblyjs/helper-numbers@1.11.6':
    resolution: {integrity: sha512-vUIhZ8LZoIWHBohiEObxVm6hwP034jwmc9kuq5GdHZH0wiLVLIPcMCdpJzG4C11cHoQ25TFIQj9kaVADVX7N3g==}

  '@webassemblyjs/helper-wasm-bytecode@1.11.6':
    resolution: {integrity: sha512-sFFHKwcmBprO9e7Icf0+gddyWYDViL8bpPjJJl0WHxCdETktXdmtWLGVzoHbqUcY4Be1LkNfwTmXOJUFZYSJdA==}

  '@webassemblyjs/helper-wasm-section@1.12.1':
    resolution: {integrity: sha512-Jif4vfB6FJlUlSbgEMHUyk1j234GTNG9dBJ4XJdOySoj518Xj0oGsNi59cUQF4RRMS9ouBUxDDdyBVfPTypa5g==}

  '@webassemblyjs/ieee754@1.11.6':
    resolution: {integrity: sha512-LM4p2csPNvbij6U1f19v6WR56QZ8JcHg3QIJTlSwzFcmx6WSORicYj6I63f9yU1kEUtrpG+kjkiIAkevHpDXrg==}

  '@webassemblyjs/leb128@1.11.6':
    resolution: {integrity: sha512-m7a0FhE67DQXgouf1tbN5XQcdWoNgaAuoULHIfGFIEVKA6tu/edls6XnIlkmS6FrXAquJRPni3ZZKjw6FSPjPQ==}

  '@webassemblyjs/utf8@1.11.6':
    resolution: {integrity: sha512-vtXf2wTQ3+up9Zsg8sa2yWiQpzSsMyXj0qViVP6xKGCUT8p8YJ6HqI7l5eCnWx1T/FYdsv07HQs2wTFbbof/RA==}

  '@webassemblyjs/wasm-edit@1.12.1':
    resolution: {integrity: sha512-1DuwbVvADvS5mGnXbE+c9NfA8QRcZ6iKquqjjmR10k6o+zzsRVesil54DKexiowcFCPdr/Q0qaMgB01+SQ1u6g==}

  '@webassemblyjs/wasm-gen@1.12.1':
    resolution: {integrity: sha512-TDq4Ojh9fcohAw6OIMXqiIcTq5KUXTGRkVxbSo1hQnSy6lAM5GSdfwWeSxpAo0YzgsgF182E/U0mDNhuA0tW7w==}

  '@webassemblyjs/wasm-opt@1.12.1':
    resolution: {integrity: sha512-Jg99j/2gG2iaz3hijw857AVYekZe2SAskcqlWIZXjji5WStnOpVoat3gQfT/Q5tb2djnCjBtMocY/Su1GfxPBg==}

  '@webassemblyjs/wasm-parser@1.12.1':
    resolution: {integrity: sha512-xikIi7c2FHXysxXe3COrVUPSheuBtpcfhbpFj4gmu7KRLYOzANztwUU0IbsqvMqzuNK2+glRGWCEqZo1WCLyAQ==}

  '@webassemblyjs/wast-printer@1.12.1':
    resolution: {integrity: sha512-+X4WAlOisVWQMikjbcvY2e0rwPsKQ9F688lksZhBcPycBBuii3O7m8FACbDMWDojpAqvjIncrG8J0XHKyQfVeA==}

  '@whatwg-node/events@0.0.3':
    resolution: {integrity: sha512-IqnKIDWfXBJkvy/k6tzskWTc2NK3LcqHlb+KHGCrjOCH4jfQckRX0NAiIcC/vIqQkzLYw2r2CTSwAxcrtcD6lA==}

  '@whatwg-node/fetch@0.8.8':
    resolution: {integrity: sha512-CdcjGC2vdKhc13KKxgsc6/616BQ7ooDIgPeTuAiE8qfCnS0mGzcfCOoZXypQSz73nxI+GWc7ZReIAVhxoE1KCg==}

  '@whatwg-node/fetch@0.9.19':
    resolution: {integrity: sha512-J+zopRcUVOhkiQYlHpxOEZuOgZtqW9xMaNQFDjESm9vRcyATms+E2/p2mZiVQGllPqWflkA3SzoJC1MxV4Pf9g==}
    engines: {node: '>=16.0.0'}

  '@whatwg-node/node-fetch@0.3.6':
    resolution: {integrity: sha512-w9wKgDO4C95qnXZRwZTfCmLWqyRnooGjcIwG0wADWjw9/HN0p7dtvtgSvItZtUyNteEvgTrd8QojNEqV6DAGTA==}

  '@whatwg-node/node-fetch@0.5.20':
    resolution: {integrity: sha512-DFLsOG//CrDdIO0x7Q7Ompxj3TZhB4iMDeXpQKY4toSbIbzsKmbwyOkzXMwvV1syxvAtPoHBzyGGtDrPV424FA==}
    engines: {node: '>=18.0.0'}

  '@wry/caches@1.0.1':
    resolution: {integrity: sha512-bXuaUNLVVkD20wcGBWRyo7j9N3TxePEWFZj2Y+r9OoUzfqmavM84+mFykRicNsBqatba5JLay1t48wxaXaWnlA==}
    engines: {node: '>=8'}

  '@wry/context@0.7.4':
    resolution: {integrity: sha512-jmT7Sb4ZQWI5iyu3lobQxICu2nC/vbUhP0vIdd6tHC9PTfenmRmuIFqktc6GH9cgi+ZHnsLWPvfSvc4DrYmKiQ==}
    engines: {node: '>=8'}

  '@wry/equality@0.5.7':
    resolution: {integrity: sha512-BRFORjsTuQv5gxcXsuDXx6oGRhuVsEGwZy6LOzRRfgu+eSfxbhUQ9L9YtSEIuIjY/o7g3iWFjrc5eSY1GXP2Dw==}
    engines: {node: '>=8'}

  '@wry/trie@0.4.3':
    resolution: {integrity: sha512-I6bHwH0fSf6RqQcnnXLJKhkSXG45MFral3GxPaY4uAl0LYDZM+YDVDAiU9bYwjTuysy1S0IeecWtmq1SZA3M1w==}
    engines: {node: '>=8'}

  '@wry/trie@0.5.0':
    resolution: {integrity: sha512-FNoYzHawTMk/6KMQoEG5O4PuioX19UbwdQKF44yw0nLfOypfQdjtfZzo/UIJWAJ23sNIFbD1Ug9lbaDGMwbqQA==}
    engines: {node: '>=8'}

  '@xtuc/ieee754@1.2.0':
    resolution: {integrity: sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==}

  '@xtuc/long@4.2.2':
    resolution: {integrity: sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==}

  '@zag-js/accordion@0.58.2':
    resolution: {integrity: sha512-Mt+fC3tjh52zI+GowOjGwusnnPGDP/rQEGIH3nVOzrRbkS6DvXahfWy/gUw3N5sxEz5dCr0S7xkBSF9uokikLA==}

  '@zag-js/accordion@0.68.1':
    resolution: {integrity: sha512-GoJ1AVQ0apcc9lXns8KCDzxCeJoSJD43JJJBUoHZTQWgbkkMnvVoxZ8vrJZxhIBXB+n2rilYIbm/C+rTQ2MkNA==}

  '@zag-js/anatomy@0.58.2':
    resolution: {integrity: sha512-sDE57Yg789fAG8U/oACIUAHYe7iDSy7KE2jjboSucKDPleNOMQEhmXPGJzP/54QGyG/OT6jUATsnHnOjf+Ds7A==}

  '@zag-js/anatomy@0.68.1':
    resolution: {integrity: sha512-Zd/8VIR9H48vAM8qHSsCNOPe7IyrIMZ0qhHvrANNXpI3XFApVE7kRUsyieno7jJxbTWwbI1fFd7/gSfhbrdrBg==}

  '@zag-js/aria-hidden@0.58.2':
    resolution: {integrity: sha512-GoL5ABAzbvMTNu3ykTbVUSSgG2GWDedcFUBAYoN3POF+aGEaZI3Oba2tgjm3Wtpo6yWo+I8rxVFRQ4M+kRINIA==}

  '@zag-js/aria-hidden@0.68.1':
    resolution: {integrity: sha512-ldq5IVRM93I3atx5V1Mn+PfUiS+iIqZCVRaoYAnxdstJxix+H6S5/zZc+L9Scc4xwaI+rp9jm4zx929hjCKAKw==}

  '@zag-js/auto-resize@0.58.2':
    resolution: {integrity: sha512-dTv8fdW6p7fpsfj4GEKOccHBMzrkz3L5xbgzk15USn089O69ck9PHmnLmBkCrFuEkMA6MjBphMvKbtRhQi+FTA==}

  '@zag-js/auto-resize@0.68.1':
    resolution: {integrity: sha512-FZ7kvoY3w4l53DAzoV1LRGwyzTt1Ey374U66Cp/yN//JvvQjYH9Y32n2le3NPZHTER6eRHBHj31g23PG4Ox4sQ==}

  '@zag-js/avatar@0.58.2':
    resolution: {integrity: sha512-g9ijgn/kakXhj+1hgFm7ceGb6wWFQsxh54YN+hOY4ykMn4Rbb7/iOpBKoQ87Buxb8CZjbwXyRIj0P/bbelQQHA==}

  '@zag-js/avatar@0.68.1':
    resolution: {integrity: sha512-7aCep07PCJnaA5hgKOJmjARn8NqinckA6cn7vSwVPOUjtdWurg/Azk71d89Zw6OnC/eluzGkL/0aEkp8+24KqA==}

  '@zag-js/carousel@0.58.2':
    resolution: {integrity: sha512-OzOr+0VAZbqlaxXQ78R4Kdzu+bepJd6H/4Dw0SmypzEtitahQLx+ukbn/rnysfZz2rDdFu0ZLwTrIAsb89IzJA==}

  '@zag-js/carousel@0.68.1':
    resolution: {integrity: sha512-ncJ3adPEFF/r8+mEuV7w395qPAWh71AN/+ytUWEeTIuSYHDza3yZFhw8hDRxe1VCUloHpd6pOm0p2l9K6onjDw==}

  '@zag-js/checkbox@0.58.2':
    resolution: {integrity: sha512-0FtwbLYNckjMpdrpGOirUp1iIktEqRVJjdiRkAug6SSFVUtehIz6JzoZXGdUdHEXvv+Jw97ojkZKOypZZChgLQ==}

  '@zag-js/checkbox@0.68.1':
    resolution: {integrity: sha512-XqzsHeGMxqddpfUJLfq2LMnswanETN7VcH4vfZ9qHMvSlNl67qsWxbxmB6g+e8FKLd81cb8lMEo74PHiWQMhjg==}

  '@zag-js/clipboard@0.58.2':
    resolution: {integrity: sha512-N2MwLDtLOtMWPhFt/VRLsEU+7zBDlydI52az8VbDlOJTFI2rXarSMABjiuO+AxO5IMKpDOi0+Up1DYYhYUSD5Q==}

  '@zag-js/clipboard@0.68.1':
    resolution: {integrity: sha512-vuS3HDEZWPJaVKZUHuo7S5GKieAzdIaavawMCPph5cdgWjLp1F6jklbntHZWcYJnTCgSE1VaBkFaBnh3FoJb1A==}

  '@zag-js/collapsible@0.58.2':
    resolution: {integrity: sha512-OJrGqSn/TintXEYq4zI0HXdBTpm/g09DIT9Y9z53kN7gTguOlH1Hle7+Ea42UkQFnaQEri/txgn8HalMccoNzQ==}

  '@zag-js/collapsible@0.68.1':
    resolution: {integrity: sha512-FrCSHW4Nc9vOis7FXosq2vZqBW9TWDKy0Thfetm7q2BrCR2B86YFTvxQqSUR9jIapos6cPVvxNMc2+/QMtU2iA==}

  '@zag-js/collection@0.58.2':
    resolution: {integrity: sha512-6wfGkveaB9j7kYEIpyhLpwl+6gOQY9Ge6CfafDJgdVLGFlIjvyQ7+pSC5yZ0sBjwQ0dg/GBVULVrv699jh+Srw==}

  '@zag-js/collection@0.68.1':
    resolution: {integrity: sha512-nGL6HprXDTDy0efNBMIZBsaldoQ6MSrtYe+EDTm5QP96R49MQIShEnRzUCZjGHu2kpCqUeQ9zylivvIA3oRWng==}

  '@zag-js/color-picker@0.58.2':
    resolution: {integrity: sha512-lNUE6DgPI7fgf5X8KJnVM6KG87A29CFlyMA3wNAiqofrew822gP/A+Dw7yyEBRCLLxbSrwkjdjUnXYV6J/uRGw==}

  '@zag-js/color-picker@0.68.1':
    resolution: {integrity: sha512-sqYDunqfvGVdzBVjAQiK0ADJpsYCzPTYbVd50CjYO5okx9qL/2LJ0i40wu6Lk0DXfwEuHY9g35xRfRgmE1s8lw==}

  '@zag-js/color-utils@0.58.2':
    resolution: {integrity: sha512-hQNKijzaUGf1fHh8+MnHrIzp+O5Ole4960VSdwjESY14gbbcLnxvCSxBpusE1hSU9LC9UeoCptNiPIiEF04bKg==}

  '@zag-js/color-utils@0.68.1':
    resolution: {integrity: sha512-9LkQX5JftbaciHHPEObZoij+pBArFw51LPEPuL5RliTOIBLvnGhVLFr3ZU71WSgm15HVHWErrE/+9zzbjErAtg==}

  '@zag-js/combobox@0.58.2':
    resolution: {integrity: sha512-HgozaE7vUa2C68cjuPBal9Xk/cgjTsujvwiwmxEdMzOA5eFnwkuJ198OlU8ie3n3RDd4iKYkoy4TYz62uA3fGQ==}

  '@zag-js/combobox@0.68.1':
    resolution: {integrity: sha512-9dOkz2sPTnhpGcfcKw1SE41iVLIUi4F+X/OqmS9O+dJQ4cq+92+PkGO7u4sa7LKCBhWO3I8KbPak+52zdTZZYA==}

  '@zag-js/core@0.58.2':
    resolution: {integrity: sha512-rdpyPvSxM+cl0LCQXHsBjqztVJ+kMQAwerj4sERnt9Hj9SY8xNvI8wzJ8QwuAEq0PXpEoIdzsRsZulft4Ftz9g==}

  '@zag-js/core@0.68.1':
    resolution: {integrity: sha512-s5wFFK9Hk40a+W93pme+yh0ZLXSwO2itCQmwSvTOUzS3gp3rYS59M+NxxAcPoHHBrrQgu+Cf3Btzs5cgKU6Xvw==}

  '@zag-js/date-picker@0.58.2':
    resolution: {integrity: sha512-nB5tc/YiSo2ZGX2beFphwNtdB0t2WhB0426z0lkmigCRAmjweqa4k7sq/WTXCviWY2U445EIcOaSChAOpBsh9w==}

  '@zag-js/date-picker@0.68.1':
    resolution: {integrity: sha512-bzvKQ47n3vSZTtBKTj+W8LBVGqX/NBBlmFwCPBYBJ62CFU5RjyOlvVry8U1xM4hA/Coc0tYAUBcAF2jYJbWjjA==}

  '@zag-js/date-utils@0.58.2':
    resolution: {integrity: sha512-ceyMBySwm7ssReAZWOWe/pz+iPTmQHMCretE4Bm5YX13lyhpFLK72rDQhx+ZK7sMPFZeyeZv3ESB7qWUw6qZBQ==}
    peerDependencies:
      '@internationalized/date': '>=3.0.0'

  '@zag-js/date-utils@0.68.1':
    resolution: {integrity: sha512-19WyAlPrfzj//OEBLDm/DNA+lMhfseL4OfVX9ZnrLFxYGuiIDljhGi45jYb+4oRsfsW0O9AvjdtRinT5xDsRDg==}
    peerDependencies:
      '@internationalized/date': '>=3.0.0'

  '@zag-js/dialog@0.58.2':
    resolution: {integrity: sha512-dn08pcdI7MLOJQqHrkMTcJxR8gnQRpFF+Mu8hF1bhoNiRre2b14N+D/fhP3+MI1H3w5uT4uzmdJqLNhSmy4ltg==}

  '@zag-js/dialog@0.68.1':
    resolution: {integrity: sha512-9sHc01X4nUKbWcdm+fGK/kBujxoNzZvDfUJJ59pj5sn05XxsbcW/1nL7ssB/SHr2jEt8kqOKwCnfOOHCl5HMGA==}

  '@zag-js/dismissable@0.58.2':
    resolution: {integrity: sha512-cdjHvonkWlUWc2c+cnTR+3o359+ZRiIpnq47MI4mH/Lym8a0moEDDszc90auSgw41r+rIBkwAwi3nFydwb7a/Q==}

  '@zag-js/dismissable@0.68.1':
    resolution: {integrity: sha512-3K0Q5pnvBVKMZcnZVvG6iE8WbKuagQcUZCp3ZGKkc7ZLy1a5dWqdg4pjQGWvjzSezQ5E12hptbPNE9M9e/0iyw==}

  '@zag-js/dom-event@0.58.2':
    resolution: {integrity: sha512-RysmSlRAQV7iPEbzMJx14ZprNEdnDPKbukI0LiMG0FzyHJVMmw+3F/FbiI4dwJMWlvEjlZ+4JNhxrBd3FaXegw==}

  '@zag-js/dom-event@0.68.1':
    resolution: {integrity: sha512-A/Oz7ywErOt1v/1EOq3QTQqVo3XHKpV3H4FDsKW6t/fEkE2nFyuDbo0tSeZdCnMmlRxEEzwkqdjDmudL/oAfDg==}

  '@zag-js/dom-query@0.58.2':
    resolution: {integrity: sha512-vbuXOD5pJaNs2258WO9PrGwIIZagDMHUcADnN6MegMttJGA4pO7M4EUqESXuHvol8GF8dzaQY7vxmkZdBio6hQ==}

  '@zag-js/dom-query@0.68.1':
    resolution: {integrity: sha512-Z/XvXQZw79w8FWF+zeeltD8cutZjmvOq5NnbCrFsh5aACZj74eoeJWBX/6bYDD/msk+sxANpgSdvlnguUAnSOw==}

  '@zag-js/editable@0.58.2':
    resolution: {integrity: sha512-lwT+m67jngiezv/p+KrnScLADHXE3budnfVNhfEtCS+OG6nxK3Oou4nL3VK5PwOeo+0nq+GjnquH9g7gCfs/hg==}

  '@zag-js/editable@0.68.1':
    resolution: {integrity: sha512-yW8nxlUkERUBhTrYwXg2VpYyTu5sh/8Vw11rcRw+ytnAj80V459Bdn+Xa9OnNtWmGuGRu/RD0z3ZdZvMV48Qsg==}

  '@zag-js/element-rect@0.58.2':
    resolution: {integrity: sha512-Rfd3mrRvWoFFfHg+HiOpvdLxXnq5OuqVBv7XQWHx6NzlJNBpcj4FgZ9m6Yx5YrYfFnjWJ2eWvCZdnxC+X4s07g==}

  '@zag-js/element-rect@0.68.1':
    resolution: {integrity: sha512-dqnEjCI4O1mhfy0uH9iZvd7XtZtcwA0XOxCRkHqk1BhaPQ1iJUe9HiySdFqY0W7WDwOk9XuldgTpJcnOMxERkA==}

  '@zag-js/element-size@0.58.2':
    resolution: {integrity: sha512-Oi46+b5FP5sz3NtAGPBYjKjLJx4r5Iyiwi63ukes3tbIgxp5mua0Cnqy3qOib4mzQGyYbGJ/sGK/SdYiuSpfjA==}

  '@zag-js/element-size@0.68.1':
    resolution: {integrity: sha512-Rbr+RKqhNKfqmDmRBXpsG+Kgitjj6x9izzyrNDUJMTO8GiJcbW1T4R8Hzdd9rCC/pe+/ResWZ4T43fIm2iC+Lg==}

  '@zag-js/file-upload@0.58.2':
    resolution: {integrity: sha512-Oh43MPpao8bBvRHa2Cgn9BeEDmupdMYcFDIwNR+4He6fcIJjKZ0gyathFrP320lR+xH0fn5WpwU3Gzu5Sfgulw==}

  '@zag-js/file-upload@0.68.1':
    resolution: {integrity: sha512-6q7sEi43UgCDpvh69a73hZM6zgb8N3IufqyZzpT45S93S3WOIZyITsaFMX6AwfEqHln29OE6qbsTNbqu5Z9cAg==}

  '@zag-js/file-utils@0.58.2':
    resolution: {integrity: sha512-Apm49yY7fndgL4ywcZ2jOjt2miMKiT0XJ1DgYPviV+bICM6yEiJEMLr7s56PbibEU4stwNaNDE2pTzltf8dQJw==}

  '@zag-js/file-utils@0.68.1':
    resolution: {integrity: sha512-HU7/N5KXOWmgMgCXWa1RRxHSOR2KFfeyCIz4A0JRlNmYZ+vUALquuF3bVqjNVYTw4u0HdiIcyd8Hxqxi+M3N4A==}

  '@zag-js/form-utils@0.58.2':
    resolution: {integrity: sha512-pUnVtC3p+WG5BblumTbN6ai/oLtnxk1jLVCCSCp4mWcMc+IZvBwDbKs8Y+98tAoYMMXuEBiJAwjcjH/yjKHlIQ==}

  '@zag-js/form-utils@0.68.1':
    resolution: {integrity: sha512-t/o5Tjp+Qle19a+glWytPdpAJK3Tmykoeu3pYKKiaAe7bkhELO3pBeNBB0w/xVQ2tAADWhdnXSdGz2dJO4WKng==}

  '@zag-js/highlight-word@0.68.1':
    resolution: {integrity: sha512-oV/M/kG61ohw21RLC4hZpAEXR19XKpje20J5wDAXF/HEQf2t7W8lRdBb155/ykEZSz6zOgn1tBfrFpRsUpVj/g==}

  '@zag-js/hover-card@0.58.2':
    resolution: {integrity: sha512-ZcRAhMHGLClMZ7w2wzEgSOe8bKE/hQ3wWvFwujlkJdSwERBTErgrgbrmFFIg6HPWACFx3zOOqYYTdW8qJiVKvw==}

  '@zag-js/hover-card@0.68.1':
    resolution: {integrity: sha512-LVq5RlMEC7HKS8ADP8kqBb88YqJ8YszQ7XqzxY/5A84pqjV6s6VgJI5+Rea8WrhVCTQSiITYegJTOqG7pAAltA==}

  '@zag-js/i18n-utils@0.58.2':
    resolution: {integrity: sha512-zVEkw1yRDOkqZOj+/mEF/YU9MDG/FbPodcCZMujHH4bhUrRD14XI//PY9td3Vi3Y/OjagHhgVa9M/bUs+PFZ3w==}

  '@zag-js/i18n-utils@0.68.1':
    resolution: {integrity: sha512-+L5Jh6ZU+9jwhsWIp7XKacjk/V+KDnWSe7gOLAfpt4X678K1QviA6rSmqN41wej0pv4NW7wKfF70XVXsjFG4og==}

  '@zag-js/interact-outside@0.58.2':
    resolution: {integrity: sha512-Odux6Hzvy1So4tx9XqdyFEbfJ60vimOGVvDT7uSe3Rv80bmY+3MAcuDU51nFB2Jo8q6AfUYOZa+3SLkvEF+cuQ==}

  '@zag-js/interact-outside@0.68.1':
    resolution: {integrity: sha512-xwrJ+cTGPUhrFSHL54qm13gT2midk6nux4NJD8vaOyrpJ+bVmxR0QIWECGhFC/s1wt6SGPr1NYGb7Y3LYyEU7A==}

  '@zag-js/live-region@0.58.2':
    resolution: {integrity: sha512-6ejhHhB+JMsBAknTFFkEBxEILiCXaoJ58z0QFftoEoT8OET916IU4o+QSvkz9lhYzmVkaNkUJKc0z57Pcy8eYw==}

  '@zag-js/live-region@0.68.1':
    resolution: {integrity: sha512-sYVpiehtmlMxWuXR6D3AjSsVvTs05vGS0JnFRffsU2euC99JvKXE9XXsIDuHbpeWUWzLhLRxWHhnGHF6lhAHSA==}

  '@zag-js/menu@0.58.2':
    resolution: {integrity: sha512-g3bJNEnM+GgyR869xqvQbvZ7efl4yXnw7BFbHLy1l2fgjtk7Fja/cF6hB/u9QnKA8t5dAcQxGD14r+Ht3jky9g==}

  '@zag-js/menu@0.68.1':
    resolution: {integrity: sha512-Q0dkM/TV8EOwGhQsFnCk8uae9FJrshSOqbF5k6QOJso2uhv2EJB8U/8o60OXK2neanGDPGyyIOoIQcOevzD2Zg==}

  '@zag-js/number-input@0.58.2':
    resolution: {integrity: sha512-/0hceqgKfd8eitUGzZ338PQSP+ZrPZngrRRH8/hyZXO3o9w0B4/csL7z2sXAQFV9ETnyFRuwbDiDpz32qN4IgA==}

  '@zag-js/number-input@0.68.1':
    resolution: {integrity: sha512-JwBygv9WE9Ndd1NxpjMq2FAqhhEfQX/vmoDvwlU/9OX4xnuxnz9+9vZ0uP2NT0kQa5qyaPvzylg5oaBoFEnowQ==}

  '@zag-js/number-utils@0.58.2':
    resolution: {integrity: sha512-n9kgr6aVUbFvAOJPghEe6qYnWsDzUauYo19GV6fsgeWNA+OzrkRxFLV4K3Eg+tII+b3vIb5uGFBmOB+nP9SRuA==}

  '@zag-js/number-utils@0.68.1':
    resolution: {integrity: sha512-UzHJspt8MfxFTyJ5RW2kWX9UhV42YfLu0Cn0bGI1nXf/vBUpC0xiaxLpcLCcVfyEFEAPOGjSZJAIdKzUFeALCg==}

  '@zag-js/numeric-range@0.58.2':
    resolution: {integrity: sha512-IT5+xmJlb68TjLtrOdyVmoc5VL/dYNmEOhtyqTqguVXuK/3B6pgQeZ6j9jxaB0muuXwTPyOjJJGzqR450gZO5w==}

  '@zag-js/numeric-range@0.68.1':
    resolution: {integrity: sha512-t/XNKEVIgkvOVtxxmy/1otND8LY8TXcBL5a0tP3S7lbbdAgxj6Rn7ZI+oaOwkRyHBf8ODvo8XYMSYJI4xawK9A==}

  '@zag-js/pagination@0.58.2':
    resolution: {integrity: sha512-7/sR0tLrX54eoAq/S9DYwJKBEMhNcl/ylILpJrrG3NfgVP3lw84vQSP6GpA9avKGjt3af8wJcnAC0g6sjFIPSQ==}

  '@zag-js/pagination@0.68.1':
    resolution: {integrity: sha512-kVXawlQKXEw1MC2oZCofBQ7rZH2RNaZfJFnyW3+7i7Y0veVX3vTHq8pIoDmVI2NUtyAPXrDPTlfmI1zigeCQ0Q==}

  '@zag-js/pin-input@0.58.2':
    resolution: {integrity: sha512-jEgXPT4SvqN/abz/HXzoA4Qb/3MnJfiSsAdfDzrXEo6t4aHlB9hqGxdB/0exbC1GXl2hnuxH80PopxEOYv0uMQ==}

  '@zag-js/pin-input@0.68.1':
    resolution: {integrity: sha512-itY1NEASvYFi1/woqcsJ27txUbMgTMoORtFuN/5K5HftIKOytSiKZqfvPpLMHOKRkWBrzaJw8J5rORMQYXR+mQ==}

  '@zag-js/popover@0.58.2':
    resolution: {integrity: sha512-CPv3dlGv3V+HfnI08H4LRviqqMTAhiU5+iPRNv3K9qh5u/7fm70oxD35m4iXSMK/GWU4eIRO0ZNedHqYD/0RNQ==}

  '@zag-js/popover@0.68.1':
    resolution: {integrity: sha512-lIvm7Cd9VqWqV5jx2Mk96KA9A4KAR0jNKCvaaR1ayQ3WGNSHZlwBkcyenj6jnCy5hNf5dEcX3my0/ysLwZ6r/Q==}

  '@zag-js/popper@0.58.2':
    resolution: {integrity: sha512-heXDTyNOO70TWgpCR+QONFA7mZUNczcchik3kQBci1EEUBA6/0zd42EZhZtWrmh4B+Du6xWCbFHMAQzZYdS3ng==}

  '@zag-js/popper@0.68.1':
    resolution: {integrity: sha512-H9jAB5UZmj5Ki4HfJJJe7KglO5WtilSwA/tK3y6SmknpcOqbjuBVTmJ7hwmkepyop7ysh7uelNWl21v98Vfq0A==}

  '@zag-js/presence@0.58.2':
    resolution: {integrity: sha512-/NRJ9/BIQJZLvOwz+MqDRF6VYJPCtgnRv3yUXmxjSX86BRN2HonxJyjKV4T5PAIcCcZvWmGueMPROaPjimixZA==}

  '@zag-js/presence@0.68.1':
    resolution: {integrity: sha512-ZgzZTWJ/eYGjG3XM8ZXcGrzeYvgQvMhIy7OliG3tqSELY4JCsJz98/TnYc3j9LF0OUN0kYYbJ30F2eP/ezpM1A==}

  '@zag-js/progress@0.58.2':
    resolution: {integrity: sha512-rJFt58QPZnqx4b+eAb6wdvnC9XEII+/gxfAM82ItKnDjlyMuhIQ9UTOX4I/MUMnaLhTsKsDJtWrDXVq5WkB03g==}

  '@zag-js/progress@0.68.1':
    resolution: {integrity: sha512-VlwZXoSK7s1BDpYvIMBhQZkCFD0aOLhSgqIFmIwutT9hrbxtCquab6dSjdzueEQ7nPpkO3nQp7MS2EHosYn0bA==}

  '@zag-js/qr-code@0.58.2':
    resolution: {integrity: sha512-P+D+vhdRlCxQ5NegPxSZaSMBidjil5UoFCjY/DarFAdxfxgam1E2XFe8agmTyq0e6wbIHSG7ArQ+2KCMTtmFYw==}

  '@zag-js/qr-code@0.68.1':
    resolution: {integrity: sha512-2cdPAvUo/uDVI5upYYG2YcDbbfLGudTVo2AoIQbups8yEhqIshX5nfCNepJp+oESRig2q9dByFZH5G42KsW7oA==}

  '@zag-js/radio-group@0.58.2':
    resolution: {integrity: sha512-Oi9EWPitTf1wfczOh7NA0IYfu9GxxSuJCbOhrtU6dlTSdBZEMeyu2DJUGmI0K7uJ6cZKJh/m/onRCH8d+JVeEw==}

  '@zag-js/radio-group@0.68.1':
    resolution: {integrity: sha512-YvKJaYO8cJXfH3e6+fAcJ3bLouIJH3vL9UwX5fHOB9St9+YeTPOB+vUgFvJhbh4v8htlMT5cZflUPsFLVkImOQ==}

  '@zag-js/rating-group@0.58.2':
    resolution: {integrity: sha512-x6QnFWV8FlA9Sce+upbs9UUR06vaBIrtDTb5t7Snnx3lnzXhE5SN06FRYhdkDzwP5JX+unT8xE05IK+lmvm+rA==}

  '@zag-js/rating-group@0.68.1':
    resolution: {integrity: sha512-PhC8TKQOZtKkKXEoA6r1qZ28ss/nLmVxUwIelSve0Mr41guJZdMe5JtNIvEIHpqh9/IdnWYE4C+4+36Mwm0yiQ==}

  '@zag-js/react@0.68.1':
    resolution: {integrity: sha512-8so9B+LFEjsUQdSKd5ES+XYB8CoeIN7aK/DshzcDL0oASf4Taah7bmYQmWXMI9fVtP9AZTKgVb3Yf/mILRu4HA==}
    peerDependencies:
      react: '>=18.0.0'
      react-dom: '>=18.0.0'

  '@zag-js/rect-utils@0.58.2':
    resolution: {integrity: sha512-35lbWUoyOoa6U+GZqf+7f5c9anBESFXEKkVrc2DGvz5+bP1zB427Tkqe16fO7kNW5f+q576qFTNkSIVjRRf5Fg==}

  '@zag-js/rect-utils@0.68.1':
    resolution: {integrity: sha512-iwRC8e3pv12urNUeDwLQX8l0g6SlFTShM2oEMtWWvFWioHLtoL/ufcxZsWLiORJi9aEwBjRuzUMgTsaECb/M8w==}

  '@zag-js/remove-scroll@0.58.2':
    resolution: {integrity: sha512-HGDdsCubcqOXKRWP/mEmPghC5x9iCZ7l1373n9IqLYMPHz2qI+/OqlzKUXMz/+NAykYYz28ylnz220DngMUNMw==}

  '@zag-js/remove-scroll@0.68.1':
    resolution: {integrity: sha512-dVBEgACvL7A4Dn+oSfRYkEI14Wee6Vmzc2nAJiYcT+Qax+yuLHRzSy/ubDNAz0fLEp4RmDuG2mJM58m5k+qVhw==}

  '@zag-js/select@0.58.2':
    resolution: {integrity: sha512-W34z/1Gi7x97nFizm3NfK2Y5R3RI9MsxMbiHRALziAwHw4QLwNurYmWJNUmW/OU/buK1OPysBc5/T6Hciuz7Kg==}

  '@zag-js/select@0.68.1':
    resolution: {integrity: sha512-fgVbiB/i46u/8w8Q/nZVh7o2wKTMGnd6tDG4OHFaPrztyKCtLl9bdomQ2Ti8CnedpDYlNGZ+CLo6KoPTfRXsJg==}

  '@zag-js/signature-pad@0.58.2':
    resolution: {integrity: sha512-mKgewi2k6FeYW+/bGGmhoOIaRk3nt5H8XKOMPTjwdqcfGcqxJH1jfAfrx01fP61fEDt4g6mur1OMK3OQchDvfQ==}

  '@zag-js/signature-pad@0.68.1':
    resolution: {integrity: sha512-JGS6rjX40Hwqv1sLaeFf5KUaHbWzjFM8JnbOpSchQKtm/9Fbd16Ije5MIWdLhEN25ZBwtnfg8CrbzKZvjY/pQA==}

  '@zag-js/slider@0.58.2':
    resolution: {integrity: sha512-rpmaZ99E35rLr25za6tN2PMU4YpPDD00p59JRAkOpBNdx3pPKmqhFSZJUJHCqxj9OxzYEmHiEBRRpApC5ay6hg==}

  '@zag-js/slider@0.68.1':
    resolution: {integrity: sha512-FpxE7H7xAMOcUX0UyEyqyXgpeINwEfvFRu0M1Hx94ocN61LlWkkLp6FAaf0+fYpO7QxopZm0n/hXU7YKKG0rAQ==}

  '@zag-js/splitter@0.58.2':
    resolution: {integrity: sha512-YUxFzr56vV+gVH4MsGqT1GyXG63f9qTC1Jv+p6Hm7RFFSw0yp4CfdTN7JWqeI63PfNgpbG3xuKnTLgIheNWegw==}

  '@zag-js/splitter@0.68.1':
    resolution: {integrity: sha512-QUfIcJ+u1ii9zRdzP7t32M/vkHHWVa0jdUYSC8fAy/ST5HM0QVJUk8P93LNVooT256ZO2FXnIJMVKqf97m3mew==}

  '@zag-js/steps@0.68.1':
    resolution: {integrity: sha512-brhxiHFGcTkDdlZGhC5V7r5bV62rTnX9kkb/eab+R7Ejenhaj0b8YncLNj7fnnmJjM2GYP79u42hJuGeVXoa0g==}

  '@zag-js/store@0.58.2':
    resolution: {integrity: sha512-/p7cC4vGl4Rzu9xidxJxVNIkIjTUTljcaVU5iRReSzQEjP5hKk3PWDJpf5L1/WAzsf2VtsE8fmfDz7v0kTzi9g==}

  '@zag-js/store@0.68.1':
    resolution: {integrity: sha512-fwD7aj6r6B2Xm7xD47yjP+qVg3t+9P/mUYmU4I1E20ai5t+k1RZyv+tYHgrQzWK56jkW3IcgO6JAzDFPiGiZOA==}

  '@zag-js/switch@0.58.2':
    resolution: {integrity: sha512-Ycq+bwFQrmNqU8NJbt28cwJQ6wBk4usXvzdjcUndvXsvx2N1yxY01tv2qvOf6vM9OFbrROJ/MwwcaAiCvHBSzA==}

  '@zag-js/switch@0.68.1':
    resolution: {integrity: sha512-LSJKeAgeXoXAY/GKv1rzTPNH+9SjHCjerFnH8J0R+088dV6EfgVWj/070BGwRbaa7NIvI9jM2EBiNmLjd0Wpnw==}

  '@zag-js/tabs@0.58.2':
    resolution: {integrity: sha512-FdbOMLygOZ+cW8SM2LPtMfutmSc2vNJnRkn6UP4DsXlPUvP/QubYr2k8qB3gvOdGc/TPV2uK0YCsKpbs5y7ePQ==}

  '@zag-js/tabs@0.68.1':
    resolution: {integrity: sha512-Iq+6eT76q4rRsr89KFn7HwS+LNcf8tDKtkki5fNTXZ1AsolCngBl05U6+VRNec4hHTHakKENai+ek2fSdAzbSQ==}

  '@zag-js/tags-input@0.58.2':
    resolution: {integrity: sha512-RC8SeR+HRg+Hyi1bq4F0ZmQnSr1W2KnI51H1fTuPZpEu4fTCnKnQcL+8ENa+XidpHx5T/Vwxxw+QTeXBN8U4VA==}

  '@zag-js/tags-input@0.68.1':
    resolution: {integrity: sha512-qdisiv9E6XKFeb04cqL2ezaG2ti10MXIK9s1/Lrn1c4wCzDkFFaaMia67AgWq1cpNQzLc5Rwain7XIIAxP3w5A==}

  '@zag-js/text-selection@0.58.2':
    resolution: {integrity: sha512-N+4KmTbP40ykgT0ocJjyN9aom/+3DepPCzsomqnjnkP4YzW0ANIVXSM7mI2K8YawnMkCnw2EJhw5ZM9Xr0yY8w==}

  '@zag-js/text-selection@0.68.1':
    resolution: {integrity: sha512-L+xjgzpKPoaA8bhCP3o8N+gU57FcTr5tblP8Mx7v8jbs6ih2NWveQcHbVMV4BWacEVAOGHFGvLvPymb00fwumw==}

  '@zag-js/time-picker@0.68.1':
    resolution: {integrity: sha512-RF9ZbnEwB2lY3+U9UzHKXAKoSs5oqm4trYrxHtVcha8Hlak/neXIzxpaa4NNb12Kr7LMQHYDItfAdBD9cA7uCg==}

  '@zag-js/timer@0.68.1':
    resolution: {integrity: sha512-l9bpsKnw5Fj9tdi8X5oLeZ4O4K7KoT/gS2Y7CscYV2VtI+qm3YXDd1PvKlZ8VJepC/aL31KqjV/39EgzhlsFmQ==}

  '@zag-js/toast@0.58.2':
    resolution: {integrity: sha512-i9VWEx7nrwePWWRgWM4cCjs9FlKrfJ/aQGsaOwfSK/FOlSXdPqMXvLPZMdjjQL8VJHYq7e4+a4jsk99AhWZDmQ==}

  '@zag-js/toast@0.68.1':
    resolution: {integrity: sha512-1JVlU1cUNXNahFiHeWrjNnDTaWthm0OTGXX0sDaSxa3IZPJjGRz/CJqhJ6SY2ekjgNeFNjc26HKahEUGgqzGow==}

  '@zag-js/toggle-group@0.58.2':
    resolution: {integrity: sha512-EUm2r/mSEg39b+Fg2IVZVV+jUy53+cCR5bi7W2gqrEL+8dNiW/yUy+nLEfHq5/3vOmzXkLmklqCyJtcLoJ5Gbw==}

  '@zag-js/toggle-group@0.68.1':
    resolution: {integrity: sha512-Nbm+8PdVY38KIWMVuZoFKX7OCw8AyFsXJbC9kvzf4IWxi/Y14j65V0pNI9OKmE+jKMIZtGgjmTVlB/4yLmVR9A==}

  '@zag-js/tooltip@0.58.2':
    resolution: {integrity: sha512-+ixNMoDE7cgTJ3A1pc/jER9/yuDntUG/sUan0nrbW0zdFojra9Cs75L8MGTAxIdmkbQogFImoTJRmsgagXFSNQ==}

  '@zag-js/tooltip@0.68.1':
    resolution: {integrity: sha512-sMo74McAaVyBCHJR2+j495XRN+Fn8dyu8jc0IWMvMcsz3gwCvdmloBerPJQLyLq3A3fhGK21uxQ+dXnpNmvcnQ==}

  '@zag-js/tree-view@0.58.2':
    resolution: {integrity: sha512-LLIeptBvMeun6kaCvK9uOYlvEsty8Nzr43Vwc0fcMG/9a9zajs7QLrjXlGbdM3DDYHBfAzBpwNZNOG9HaulRRQ==}

  '@zag-js/tree-view@0.68.1':
    resolution: {integrity: sha512-HWqpfogBUJxzOrHjmUyimhjnM7hkT343Zqjoy26UQ4IcF1WtGJp35d2aW2MaSmSaQCLWFSPKxO9SdrpM+bNCXQ==}

  '@zag-js/types@0.58.2':
    resolution: {integrity: sha512-UhnVjh2MuwqwDZaX0a/9pQn40x9xFbq5FjwnZuNVdG/zaNgjrbY7FcuzB6rvE7Ftm8OahiTOOBBD7pSxTV85zQ==}

  '@zag-js/types@0.68.1':
    resolution: {integrity: sha512-VHfQ8TiiDsZdvwypGK2j8vXWILgpEfUMXr4PTPUW2qxB95s1Pb/xKvmoujm34RUjILWRQw0EElXYNFYB9J3XFQ==}

  '@zag-js/utils@0.58.2':
    resolution: {integrity: sha512-EvqDmCjG9ORl2XhkQwx71Eesf+krGVKJ5OXNA/G3p7hJWekgrgBliQ5i7m/GYMpWu1Ofp+UfAvDjZO1Lj37ngg==}

  '@zag-js/utils@0.68.1':
    resolution: {integrity: sha512-BgIkTRbCQdSS1ih/uoSbiV4yLJIJN57dy9LOPNeqQe/8tSZP4pYJkQV1rfhDQ+aF4p85xXnSs5teF7jZE1Pzuw==}

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  abstract-logging@2.0.1:
    resolution: {integrity: sha512-2BjRTZxTPvheOvGbBslFSYOUkr+SjPtOnrLP33f+VIWLzezQpZcqVg7ja3L4dBXmzzgwT+a029jRx5PCi3JuiA==}

  accepts@1.3.8:
    resolution: {integrity: sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==}
    engines: {node: '>= 0.6'}

  acorn-import-assertions@1.9.0:
    resolution: {integrity: sha512-cmMwop9x+8KFhxvKrKfPYmN6/pKTYYHBqLa0DfvVZcKMJWNyWLnaqND7dx/qn66R7ewM1UX5XMaDVP5wlVTaVA==}
    peerDependencies:
      acorn: ^8

  acorn-import-attributes@1.9.5:
    resolution: {integrity: sha512-n02Vykv5uA3eHGM/Z2dQrcD56kL8TyDb2p1+0P83PClMnC/nc+anbQRhIOWnSq4Ke/KvDPrY3C9hDtC/A3eHnQ==}
    peerDependencies:
      acorn: ^8

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn-walk@8.3.3:
    resolution: {integrity: sha512-MxXdReSRhGO7VlFe1bRG/oI7/mdLV9B9JJT0N8vZOhF7gFRR5l3M8W9G8JxmKV+JC5mGqJ0QvqfSOLsCPa4nUw==}
    engines: {node: '>=0.4.0'}

  acorn@8.12.1:
    resolution: {integrity: sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agent-base@7.1.1:
    resolution: {integrity: sha512-H0TSyFNDMomMNJQBn8wFV5YC/2eJ+VXECwOadZJT554xP6cODZHPX3H9QMQECxvrgiSOP1pHjy1sMWQVYJOUOA==}
    engines: {node: '>= 14'}

  aggregate-error@3.1.0:
    resolution: {integrity: sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==}
    engines: {node: '>=8'}

  ajv-formats@2.1.1:
    resolution: {integrity: sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-formats@3.0.1:
    resolution: {integrity: sha512-8iUql50EUR+uUcdRQ3HDqa6EVyo3docL8g5WJ3FNcWmu62IbkGUue/pEyLBW8VGKKucTPgqeks4fIU1DA4yowQ==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-keywords@3.5.2:
    resolution: {integrity: sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==}
    peerDependencies:
      ajv: ^6.9.1

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ajv@8.12.0:
    resolution: {integrity: sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==}

  ajv@8.17.1:
    resolution: {integrity: sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==}

  alge@0.8.1:
    resolution: {integrity: sha512-kiV9nTt+XIauAXsowVygDxMZLplZxDWt0W8plE/nB32/V2ziM/P/TxDbSVK7FYIUt2Xo16h3/htDh199LNPCKQ==}

  ansi-align@3.0.1:
    resolution: {integrity: sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==}

  ansi-colors@4.1.3:
    resolution: {integrity: sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==}
    engines: {node: '>=6'}

  ansi-escapes@4.3.2:
    resolution: {integrity: sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==}
    engines: {node: '>=8'}

  ansi-escapes@7.0.0:
    resolution: {integrity: sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==}
    engines: {node: '>=18'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.0.1:
    resolution: {integrity: sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==}
    engines: {node: '>=12'}

  ansi-styles@3.2.1:
    resolution: {integrity: sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==}
    engines: {node: '>=4'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  apollo-reporting-protobuf@3.4.0:
    resolution: {integrity: sha512-h0u3EbC/9RpihWOmcSsvTW2O6RXVaD/mPEjfrPkxRPTEPWqncsgOoRJw+wih4OqfH3PvTJvoEIf4LwKrUaqWog==}
    deprecated: The `apollo-reporting-protobuf` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/usage-reporting-protobuf` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.

  apollo-server-env@4.2.1:
    resolution: {integrity: sha512-vm/7c7ld+zFMxibzqZ7SSa5tBENc4B0uye9LTfjJwGoQFY5xsUPH5FpO5j0bMUDZ8YYNbrF9SNtzc5Cngcr90g==}
    engines: {node: '>=12.0'}
    deprecated: The `apollo-server-env` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/utils.fetcher` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.

  apollo-server-plugin-base@3.7.2:
    resolution: {integrity: sha512-wE8dwGDvBOGehSsPTRZ8P/33Jan6/PmL0y0aN/1Z5a5GcbFhDaaJCjK5cav6npbbGL2DPKK0r6MPXi3k3N45aw==}
    engines: {node: '>=12.0'}
    deprecated: The `apollo-server-plugin-base` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.
    peerDependencies:
      graphql: ^15.3.0 || ^16.0.0

  apollo-server-types@3.8.0:
    resolution: {integrity: sha512-ZI/8rTE4ww8BHktsVpb91Sdq7Cb71rdSkXELSwdSR0eXu600/sY+1UXhTWdiJvk+Eq5ljqoHLwLbY2+Clq2b9A==}
    engines: {node: '>=12.0'}
    deprecated: The `apollo-server-types` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023 and October 22nd 2024, respectively). This package's functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.
    peerDependencies:
      graphql: ^15.3.0 || ^16.0.0

  append-field@1.0.0:
    resolution: {integrity: sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==}

  arg@4.1.3:
    resolution: {integrity: sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==}

  argparse@1.0.10:
    resolution: {integrity: sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  aria-hidden@1.2.4:
    resolution: {integrity: sha512-y+CcFFwelSXpLZk/7fMB2mUbGtX9lKycf1MWJ7CaTIERyitVlyQx6C+sxcROU2BAJ24OiZyK+8wj2i8AlBoS3A==}
    engines: {node: '>=10'}

  aria-query@5.1.3:
    resolution: {integrity: sha512-R5iJ5lkuHybztUfuOAznmboyjWq8O6sqNqtK7CLOqdydi54VNbORp49mb14KbWgG1QD3JFO9hJdZ+y4KutfdOQ==}

  array-buffer-byte-length@1.0.1:
    resolution: {integrity: sha512-ahC5W1xgou+KTXix4sAO8Ki12Q+jf4i0+tmk3sC+zgcynshkHxzpXdImBehiUYKKKDwvfFiJl1tZt6ewscS1Mg==}
    engines: {node: '>= 0.4'}

  array-flatten@1.1.1:
    resolution: {integrity: sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==}

  array-includes@3.1.8:
    resolution: {integrity: sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==}
    engines: {node: '>= 0.4'}

  array-timsort@1.0.3:
    resolution: {integrity: sha512-/+3GRL7dDAGEfM6TseQk/U+mi18TU2Ms9I3UlLdUMhz2hbvGNTKdj9xniwXfUqgYhHxRx0+8UnKkvlNwVU+cWQ==}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  array.prototype.findlast@1.2.5:
    resolution: {integrity: sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlastindex@1.2.5:
    resolution: {integrity: sha512-zfETvRFA8o7EiNn++N5f/kaCw221hrpGsDmcpndVupkPzEc1Wuf3VgC0qby1BbHs7f5DVYjgtEU2LLh5bqeGfQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.2:
    resolution: {integrity: sha512-djYB+Zx2vLewY8RWlNCUdHjDXs2XOgm602S9E7P/UpHgfeHL00cRiIF+IN/G/aUJ7kGPb6yO/ErDI5V2s8iycA==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.2:
    resolution: {integrity: sha512-Ewyx0c9PmpcsByhSW4r+9zDU7sGjFc86qf/kKtuSCRdhfbk0SNLLkaT5qvcHnRGgc5NP/ly/y+qkXkqONX54CQ==}
    engines: {node: '>= 0.4'}

  array.prototype.tosorted@1.1.4:
    resolution: {integrity: sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.3:
    resolution: {integrity: sha512-bMxMKAjg13EBSVscxTaYA4mRc5t1UAXa2kXiGTNfZ079HIWXEkKmkgFrh/nJqamaLSrXO5H4WFFkPEaLJWbs3A==}
    engines: {node: '>= 0.4'}

  asap@2.0.6:
    resolution: {integrity: sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==}

  asn1js@3.0.5:
    resolution: {integrity: sha512-FVnvrKJwpt9LP2lAMl8qZswRNm3T4q9CON+bxldk2iwk3FFpuwhx2FfinyitizWHsVYyaY+y5JzDR0rCMV5yTQ==}
    engines: {node: '>=12.0.0'}

  ast-types-flow@0.0.8:
    resolution: {integrity: sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==}

  astral-regex@2.0.0:
    resolution: {integrity: sha512-Z7tMw1ytTXt5jqMcOP+OQteU1VuNK9Y02uuJtKQ1Sv69jXQKKg5cibLwGJow8yzZP+eAc18EmLGPal0bp36rvQ==}
    engines: {node: '>=8'}

  async-retry@1.3.3:
    resolution: {integrity: sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==}

  async@3.2.5:
    resolution: {integrity: sha512-baNZyqaaLhyLVKm/DlvdW051MSgO6b8eVfIezl9E5PqWxFgzLm/wQntEW4zOytVburDEr0JlALEpdOFwvErLsg==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  atomic-sleep@1.0.0:
    resolution: {integrity: sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==}
    engines: {node: '>=8.0.0'}

  auto-bind@4.0.0:
    resolution: {integrity: sha512-Hdw8qdNiqdJ8LqT0iK0sVzkFbzg6fhnQqqfWhBDxcHZvU75+B+ayzTy8x+k5Ix0Y92XOhOUlx74ps+bA6BeYMQ==}
    engines: {node: '>=8'}

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  avvio@8.3.2:
    resolution: {integrity: sha512-st8e519GWHa/azv8S87mcJvZs4WsgTBjOw/Ih1CP6u+8SZvcOeAYNG6JbsIrAUUJJ7JfmrnOkR8ipDS+u9SIRQ==}

  axe-core@4.10.0:
    resolution: {integrity: sha512-Mr2ZakwQ7XUAjp7pAwQWRhhK8mQQ6JAaNWSjmjxil0R8BPioMtQsTLOolGYkji1rcL++3dCqZA3zWqpT+9Ew6g==}
    engines: {node: '>=4'}

  axios@1.6.7:
    resolution: {integrity: sha512-/hDJGff6/c7u0hDkvkGxR/oy6CbCs8ziCsC7SqmhjfozqiJGc8Z11wrv9z9lYfY4K8l+H9TpjcMDX0xOZmx+RA==}

  axios@1.7.2:
    resolution: {integrity: sha512-2A8QhOMrbomlDuiLeK9XibIBzuHeRcqqNOHp0Cyp5EoJ1IFDh+XZH3A6BkXtv0K4gFGCI0Y4BM7B1wOEi0Rmgw==}

  axobject-query@3.1.1:
    resolution: {integrity: sha512-goKlv8DZrK9hUh975fnHzhNIO4jUnFCfv/dszV5VwUGDFjI6vQ2VwoyjYjYNEbBE8AH87TduWP5uyDR1D+Iteg==}

  b4a@1.6.6:
    resolution: {integrity: sha512-5Tk1HLk6b6ctmjIkAcU/Ujv/1WqiDl0F0JdRCR80VsOcUlHcu7pWeWRlOqQLHfDEsVx9YH/aif5AG4ehoCtTmg==}

  babel-jest@29.7.0:
    resolution: {integrity: sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.8.0

  babel-plugin-istanbul@6.1.1:
    resolution: {integrity: sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==}
    engines: {node: '>=8'}

  babel-plugin-jest-hoist@29.6.3:
    resolution: {integrity: sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  babel-plugin-macros@3.1.0:
    resolution: {integrity: sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==}
    engines: {node: '>=10', npm: '>=6'}

  babel-plugin-polyfill-corejs2@0.4.11:
    resolution: {integrity: sha512-sMEJ27L0gRHShOh5G54uAAPaiCOygY/5ratXuiyb2G46FmlSpc9eFCzYVyDiPxfNbwzA7mYahmjQc5q+CZQ09Q==}
    peerDependencies:
      '@babel/core': ^7.4.0 || ^8.0.0-0 <8.0.0

  babel-plugin-polyfill-corejs3@0.10.6:
    resolution: {integrity: sha512-b37+KR2i/khY5sKmWNVQAnitvquQbNdWy6lJdsr0kmquCKEEUgMKK4SboVM3HtfnZilfjr4MMQ7vY58FVWDtIA==}
    peerDependencies:
      '@babel/core': ^7.4.0 || ^8.0.0-0 <8.0.0

  babel-plugin-polyfill-regenerator@0.6.2:
    resolution: {integrity: sha512-2R25rQZWP63nGwaAswvDazbPXfrM3HwVoBXK6HcqeKrSrL/JqcC/rDcf95l4r7LXLyxDXc8uQDa064GubtCABg==}
    peerDependencies:
      '@babel/core': ^7.4.0 || ^8.0.0-0 <8.0.0

  babel-plugin-syntax-trailing-function-commas@7.0.0-beta.0:
    resolution: {integrity: sha512-Xj9XuRuz3nTSbaTXWv3itLOcxyF4oPD8douBBmj7U9BBC6nEBYfyOJYQMf/8PJAFotC62UY5dFfIGEPr7WswzQ==}

  babel-preset-current-node-syntax@1.0.1:
    resolution: {integrity: sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==}
    peerDependencies:
      '@babel/core': ^7.0.0

  babel-preset-fbjs@3.4.0:
    resolution: {integrity: sha512-9ywCsCvo1ojrw0b+XYk7aFvTH6D9064t0RIL1rtMf3nsa02Xw41MS7sZw216Im35xj/UY0PDBQsa1brUDDF1Ow==}
    peerDependencies:
      '@babel/core': ^7.0.0

  babel-preset-jest@29.6.3:
    resolution: {integrity: sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.0.0

  backo2@1.0.2:
    resolution: {integrity: sha512-zj6Z6M7Eq+PBZ7PQxl5NT665MvJdAkzp0f60nAJ+sLaSCBPMwVak5ZegFbgVCzFcCJTKFoMizvM5Ld7+JrRJHA==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base-x@3.0.10:
    resolution: {integrity: sha512-7d0s06rR9rYaIWHkpfLIFICM/tkSVdoPC9qYAQRpxn9DdKNWNsKC0uk++akckyLq16Tx2WIinnZ6WRriAt6njQ==}

  base-x@4.0.0:
    resolution: {integrity: sha512-FuwxlW4H5kh37X/oW59pwTzzTKRzfrrQwhmyspRM7swOEZcHtDZSCt45U6oKgtuFE+WYPblePMVIPR4RZrh/hw==}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  bech32@2.0.0:
    resolution: {integrity: sha512-LcknSilhIGatDAsY1ak2I8VtGaHNhgMSYVxFrGLXv+xLHytaKZKcaUJJUE7qmBr7h33o5YQwP55pMI0xmkpJwg==}

  bignumber.js@9.1.2:
    resolution: {integrity: sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  bip174@2.1.1:
    resolution: {integrity: sha512-mdFV5+/v0XyNYXjBS6CQPLo9ekCx4gtKZFnJm5PMto7Fs9hTTDpkkzOB7/FtluRI6JbUUAu+snTYfJRgHLZbZQ==}
    engines: {node: '>=8.0.0'}

  bip32@4.0.0:
    resolution: {integrity: sha512-aOGy88DDlVUhspIXJN+dVEtclhIsfAUppD43V0j40cPTld3pv/0X/MlrZSZ6jowIaQQzFwP8M6rFU2z2mVYjDQ==}
    engines: {node: '>=6.0.0'}

  bitcoinjs-lib@6.1.6:
    resolution: {integrity: sha512-Fk8+Vc+e2rMoDU5gXkW9tD+313rhkm5h6N9HfZxXvYU9LedttVvmXKTgd9k5rsQJjkSfsv6XRM8uhJv94SrvcA==}
    engines: {node: '>=8.0.0'}

  bl@4.1.0:
    resolution: {integrity: sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==}

  blake2b-wasm@2.4.0:
    resolution: {integrity: sha512-S1kwmW2ZhZFFFOghcx73+ZajEfKBqhP82JMssxtLVMxlaPea1p9uoLiUZ5WYyHn0KddwbLc+0vh4wR0KBNoT5w==}

  blake2b@2.1.4:
    resolution: {integrity: sha512-AyBuuJNI64gIvwx13qiICz6H6hpmjvYS5DGkG6jbXMOT8Z3WUJ3V1X0FlhIoT1b/5JtHE3ki+xjtMvu1nn+t9A==}

  bn.js@4.12.0:
    resolution: {integrity: sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA==}

  bn.js@5.2.1:
    resolution: {integrity: sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ==}

  body-parser@1.20.2:
    resolution: {integrity: sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  boolbase@1.0.0:
    resolution: {integrity: sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==}

  boxen@5.1.2:
    resolution: {integrity: sha512-9gYgQKXx+1nP8mP7CzFyaUARhg7D3n1dF/FnErWmu9l6JvGpNUN278h0aSb+QjoiKSWG+iZ3uHrcqk0qrY9RQQ==}
    engines: {node: '>=10'}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  brorand@1.1.0:
    resolution: {integrity: sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==}

  browserslist@4.23.1:
    resolution: {integrity: sha512-TUfofFo/KsK/bWZ9TWQ5O26tsWW4Uhmt8IYklbnUa70udB6P2wA7w7o4PY4muaEPBQaAX+CEnmmIA41NVHtPVw==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  browserslist@4.23.2:
    resolution: {integrity: sha512-qkqSyistMYdxAcw+CzbZwlBy8AGmS/eEWs+sEV5TnLRGDOL+C5M2EnH6tlZyg0YoAxGJAFKh61En9BR941GnHA==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  browserslist@4.23.3:
    resolution: {integrity: sha512-btwCFJVjI4YWDNfau8RhZ+B1Q/VLoUITrm3RlP6y1tYGWIOa+InuYiRGXUBXo8nA1qKmHMyLB/iVQg5TT4eFoA==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  bs-logger@0.2.6:
    resolution: {integrity: sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==}
    engines: {node: '>= 6'}

  bs58@4.0.1:
    resolution: {integrity: sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==}

  bs58@5.0.0:
    resolution: {integrity: sha512-r+ihvQJvahgYT50JD05dyJNKlmmSlMoOGwn1lCcEzanPglg7TxYjioQUYehQ9mAR/+hOSd2jRc/Z2y5UxBymvQ==}

  bs58check@2.1.2:
    resolution: {integrity: sha512-0TS1jicxdU09dwJMNZtVAfzPi6Q6QeN0pM1Fkzrjn+XYHvzMKPU3pHVpva+769iNVSfIYWf7LJ6WR+BuuMf8cA==}

  bs58check@3.0.1:
    resolution: {integrity: sha512-hjuuJvoWEybo7Hn/0xOrczQKKEKD63WguEjlhLExYs2wUBcebDC1jDNK17eEAD2lYfw82d5ASC1d7K3SWszjaQ==}

  bser@2.1.1:
    resolution: {integrity: sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  buffer@5.7.1:
    resolution: {integrity: sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==}

  buffer@6.0.3:
    resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}

  bufferutil@4.0.8:
    resolution: {integrity: sha512-4T53u4PdgsXqKaIctwF8ifXlRTTmEPJ8iEPWFdGZvcf7sbwYo6FKFEX9eNNAnzFZ7EzJAQ3CJeOtCRA4rDp7Pw==}
    engines: {node: '>=6.14.2'}

  builtin-modules@3.3.0:
    resolution: {integrity: sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==}
    engines: {node: '>=6'}

  bullmq@5.12.0:
    resolution: {integrity: sha512-kOtSQx9ymylslsLNFD0xOMJM9mHqnq3x6KD7+DYkHByWe0HFRdblpYKhZyL4uR3rwaKZwzOrJVl3RwRaDjZxSg==}

  bundle-n-require@1.1.1:
    resolution: {integrity: sha512-EB2wFjXF106LQLe/CYnKCMCdLeTW47AtcEtUfiqAOgr2a08k0+YgRklur2aLfEYHlhz6baMskZ8L2U92Hh0vyA==}

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  bytes@3.1.2:
    resolution: {integrity: sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==}
    engines: {node: '>= 0.8'}

  cac@6.7.14:
    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
    engines: {node: '>=8'}

  cache-manager-redis-yet@4.2.0:
    resolution: {integrity: sha512-3Exp8Hv52G/K8oY5U8OwS2A7MJEJmNUvn9DPEnNSo/yu+Ken4v9VEnIAq9YZ6b6E0LN1NwPXNF3N+IaQM9RcTQ==}
    engines: {node: '>= 16.17.0'}

  cache-manager@5.7.4:
    resolution: {integrity: sha512-7B29xK1D8hOVdrP0SAy2DGJ/QZxy2TqxS8s2drlLGYI/xOTSJmXfatks7aKKNHvXN6SnKnPtYCi0T82lslB3Fw==}
    engines: {node: '>= 18'}

  call-bind@1.0.7:
    resolution: {integrity: sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camel-case@4.1.2:
    resolution: {integrity: sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==}

  camelcase-keys@7.0.2:
    resolution: {integrity: sha512-Rjs1H+A9R+Ig+4E/9oyB66UC5Mj9Xq3N//vcLf2WzgdTi/3gUu3Z9KoqmlrEG4VuuLK8wJHofxzdQXz/knhiYg==}
    engines: {node: '>=12'}

  camelcase@5.3.1:
    resolution: {integrity: sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==}
    engines: {node: '>=6'}

  camelcase@6.3.0:
    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
    engines: {node: '>=10'}

  caniuse-api@3.0.0:
    resolution: {integrity: sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==}

  caniuse-lite@1.0.30001641:
    resolution: {integrity: sha512-Phv5thgl67bHYo1TtMY/MurjkHhV4EDaCosezRXgZ8jzA/Ub+wjxAvbGvjoFENStinwi5kCyOYV3mi5tOGykwA==}

  caniuse-lite@1.0.30001649:
    resolution: {integrity: sha512-fJegqZZ0ZX8HOWr6rcafGr72+xcgJKI9oWfDW5DrD7ExUtgZC7a7R7ZYmZqplh7XDocFdGeIFn7roAxhOeYrPQ==}

  capital-case@1.0.4:
    resolution: {integrity: sha512-ds37W8CytHgwnhGGTi88pcPyR15qoNkOpYwmMMfnWqqWgESapLqvDx6huFjQ5vqWSn2Z06173XNA7LtMOeUh1A==}

  chalk-template@1.1.0:
    resolution: {integrity: sha512-T2VJbcDuZQ0Tb2EWwSotMPJjgpy1/tGee1BTpUNsGZ/qgNjV2t7Mvu+d4600U564nbLesN1x2dPL+xii174Ekg==}
    engines: {node: '>=14.16'}

  chalk@2.4.2:
    resolution: {integrity: sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==}
    engines: {node: '>=4'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.3.0:
    resolution: {integrity: sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  change-case-all@1.0.15:
    resolution: {integrity: sha512-3+GIFhk3sNuvFAJKU46o26OdzudQlPNBCu1ZQi3cMeMHhty1bhDxu2WrEilVNYaGvqUtR1VSigFcJOiS13dRhQ==}

  change-case@4.1.2:
    resolution: {integrity: sha512-bSxY2ws9OtviILG1EiY5K7NNxkqg/JnRnFxLtKQ96JaviiIxi7djMrSd0ECT9AC+lttClmYwKw53BWpOMblo7A==}

  char-regex@1.0.2:
    resolution: {integrity: sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==}
    engines: {node: '>=10'}

  chardet@0.7.0:
    resolution: {integrity: sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==}

  check-disk-space@3.4.0:
    resolution: {integrity: sha512-drVkSqfwA+TvuEhFipiR1OC9boEGZL5RrWvVsOthdcvQNXyCCuKkEiTOTXZ7qxSf/GLwq4GvzfrQD/Wz325hgw==}
    engines: {node: '>=16'}

  chokidar@3.5.1:
    resolution: {integrity: sha512-9+s+Od+W0VJJzawDma/gvBNQqkTiqYTWLuZoyAsivsI4AaWTCzHG06/TMjsf1cYe9Cb97UCEhjz7HvnPk2p/tw==}
    engines: {node: '>= 8.10.0'}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  chrome-trace-event@1.0.4:
    resolution: {integrity: sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==}
    engines: {node: '>=6.0'}

  ci-info@3.9.0:
    resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}
    engines: {node: '>=8'}

  cipher-base@1.0.4:
    resolution: {integrity: sha512-Kkht5ye6ZGmwv40uUDZztayT2ThLQGfnj/T71N/XzeZeo3nf8foyW7zGTsPYkEya3m5f3cAypH+qe7YOrM1U2Q==}

  cjs-module-lexer@1.3.1:
    resolution: {integrity: sha512-a3KdPAANPbNE4ZUv9h6LckSl9zLsYOP4MBmhIPkRaeyybt+r4UghLvq+xw/YwUcC1gqylCkL4rdVs3Lwupjm4Q==}

  clean-regexp@1.0.0:
    resolution: {integrity: sha512-GfisEZEJvzKrmGWkvfhgzcz/BllN1USeqD2V6tg14OAOgaCD2Z/PUEuxnAZ/nPvmaHRG7a8y77p1T/IRQ4D1Hw==}
    engines: {node: '>=4'}

  clean-stack@2.2.0:
    resolution: {integrity: sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==}
    engines: {node: '>=6'}

  clear-module@4.1.2:
    resolution: {integrity: sha512-LWAxzHqdHsAZlPlEyJ2Poz6AIs384mPeqLVCru2p0BrP9G/kVGuhNyZYClLO6cXlnuJjzC8xtsJIuMjKqLXoAw==}
    engines: {node: '>=8'}

  cli-boxes@2.2.1:
    resolution: {integrity: sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw==}
    engines: {node: '>=6'}

  cli-cursor@3.1.0:
    resolution: {integrity: sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==}
    engines: {node: '>=8'}

  cli-cursor@5.0.0:
    resolution: {integrity: sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==}
    engines: {node: '>=18'}

  cli-spinners@2.9.2:
    resolution: {integrity: sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==}
    engines: {node: '>=6'}

  cli-table3@0.6.5:
    resolution: {integrity: sha512-+W/5efTR7y5HRD7gACw9yQjqMVvEMLBHmboM/kPWam+H+Hmyrgjh6YncVKK122YZkXrLudzTuAukUw9FnMf7IQ==}
    engines: {node: 10.* || >= 12.*}

  cli-table@0.3.6:
    resolution: {integrity: sha512-ZkNZbnZjKERTY5NwC2SeMeLeifSPq/pubeRoTpdr3WchLlnZg6hEgvHkK5zL7KNFdd9PmHN8lxrENUwI3cE8vQ==}
    engines: {node: '>= 0.2.0'}

  cli-truncate@2.1.0:
    resolution: {integrity: sha512-n8fOixwDD6b/ObinzTrp1ZKFzbgvKZvuz/TvejnLn1aQfC6r52XEx85FmuC+3HI+JM7coBRXUvNqEU2PHVrHpg==}
    engines: {node: '>=8'}

  cli-truncate@4.0.0:
    resolution: {integrity: sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==}
    engines: {node: '>=18'}

  cli-width@3.0.0:
    resolution: {integrity: sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==}
    engines: {node: '>= 10'}

  cli-width@4.1.0:
    resolution: {integrity: sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==}
    engines: {node: '>= 12'}

  client-only@0.0.1:
    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}

  cliui@6.0.0:
    resolution: {integrity: sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==}

  cliui@8.0.1:
    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
    engines: {node: '>=12'}

  clone@1.0.4:
    resolution: {integrity: sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==}
    engines: {node: '>=0.8'}

  cluster-key-slot@1.1.2:
    resolution: {integrity: sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==}
    engines: {node: '>=0.10.0'}

  co@4.6.0:
    resolution: {integrity: sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==}
    engines: {iojs: '>= 1.0.0', node: '>= 0.12.0'}

  code-block-writer@12.0.0:
    resolution: {integrity: sha512-q4dMFMlXtKR3XNBHyMHt/3pwYNA69EDk00lloMOaaUMKPUXBw6lpXtbu3MMVG6/uOihGnRDOlkyqsONEUj60+w==}

  collect-v8-coverage@1.0.2:
    resolution: {integrity: sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==}

  color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  colorette@2.0.20:
    resolution: {integrity: sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==}

  colors@1.0.3:
    resolution: {integrity: sha512-pFGrxThWcWQ2MsAz6RtgeWe4NK2kUE1WfsrvvlctdII745EW9I0yflqhe7++M5LEc7bV2c/9/5zc8sFcpL0Drw==}
    engines: {node: '>=0.1.90'}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@10.0.1:
    resolution: {integrity: sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==}
    engines: {node: '>=14'}

  commander@12.1.0:
    resolution: {integrity: sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==}
    engines: {node: '>=18'}

  commander@2.20.3:
    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  commander@7.2.0:
    resolution: {integrity: sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==}
    engines: {node: '>= 10'}

  commander@9.5.0:
    resolution: {integrity: sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==}
    engines: {node: ^12.20.0 || >=14}

  comment-json@4.2.3:
    resolution: {integrity: sha512-SsxdiOf064DWoZLH799Ata6u7iV658A11PlWtZATDlXPpKGJnbJZ5Z24ybixAi+LUUqJ/GKowAejtC5GFUG7Tw==}
    engines: {node: '>= 6'}

  comment-json@4.2.4:
    resolution: {integrity: sha512-E5AjpSW+O+N5T2GsOQMHLLsJvrYw6G/AFt9GvU6NguEAfzKShh7hRiLtVo6S9KbRpFMGqE5ojo0/hE+sdteWvQ==}
    engines: {node: '>= 6'}

  common-tags@1.8.2:
    resolution: {integrity: sha512-gk/Z852D2Wtb//0I+kRFNKKE9dIIVirjoqPoA1wJU+XePVXZfGeBpk45+A1rKO4Q43prqWBNY/MiIeRLbPWUaA==}
    engines: {node: '>=4.0.0'}

  component-emitter@1.3.1:
    resolution: {integrity: sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  concat-stream@1.6.2:
    resolution: {integrity: sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==}
    engines: {'0': node >= 0.8}

  confbox@0.1.7:
    resolution: {integrity: sha512-uJcB/FKZtBMCJpK8MQji6bJHgu1tixKPxRLeGkNzBoOZzpnZUJm0jm2/sBDWcuBx1dYgxV4JU+g5hmNxCyAmdA==}

  consola@2.15.3:
    resolution: {integrity: sha512-9vAdYbHj6x2fLKC4+oPH0kFzY/orMZyG2Aj+kNylHxKGJ/Ed4dpNyAQYwJOdqO4zdM7XpVHmyejQDcQHrnuXbw==}

  constant-case@3.0.4:
    resolution: {integrity: sha512-I2hSBi7Vvs7BEuJDr5dDHfzb/Ruj3FyvFyh7KLilAjNQw3Be+xgqUBA2W6scVEcL0hL1dwPRtIqEPVUCKkSsyQ==}

  content-disposition@0.5.4:
    resolution: {integrity: sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==}
    engines: {node: '>= 0.6'}

  content-type@1.0.5:
    resolution: {integrity: sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==}
    engines: {node: '>= 0.6'}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cookie-signature@1.0.6:
    resolution: {integrity: sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==}

  cookie@0.6.0:
    resolution: {integrity: sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==}
    engines: {node: '>= 0.6'}

  cookiejar@2.1.4:
    resolution: {integrity: sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==}

  core-js-compat@3.38.0:
    resolution: {integrity: sha512-75LAicdLa4OJVwFxFbQR3NdnZjNgX6ILpVcVzcC4T2smerB5lELMrJQQQoWV6TiuC/vlaFqgU2tKQx9w5s0e0A==}

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  cors@2.8.5:
    resolution: {integrity: sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==}
    engines: {node: '>= 0.10'}

  cosmiconfig@7.1.0:
    resolution: {integrity: sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==}
    engines: {node: '>=10'}

  cosmiconfig@8.3.6:
    resolution: {integrity: sha512-kcZ6+W5QzcJ3P1Mt+83OUv/oHFqZHIx8DuxG6eZ5RGMERoLqp4BuGjhHLYGK+Kf5XVkQvqBSmAy/nGWN3qDgEA==}
    engines: {node: '>=14'}
    peerDependencies:
      typescript: '>=4.9.5'
    peerDependenciesMeta:
      typescript:
        optional: true

  create-hash@1.2.0:
    resolution: {integrity: sha512-z00bCGNHDG8mHAkP7CtT1qVu+bFQUPjYq/4Iv3C3kWjTFV10zIjfSoeqXo9Asws8gwSHDGj/hl2u4OGIjapeCg==}

  create-jest@29.7.0:
    resolution: {integrity: sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true

  create-require@1.1.1:
    resolution: {integrity: sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==}

  cron-parser@4.9.0:
    resolution: {integrity: sha512-p0SaNjrHOnQeR8/VnfGbmg9te2kfyYSQ7Sc/j/6DtPL3JQvKxmjO9TSjNFpujqV3vEYYBvNNvXSxzyksBWAx1Q==}
    engines: {node: '>=12.0.0'}

  cron@3.1.7:
    resolution: {integrity: sha512-tlBg7ARsAMQLzgwqVxy8AZl/qlTc5nibqYwtNGoCrd+cV+ugI+tvZC1oT/8dFH8W455YrywGykx/KMmAqOr7Jw==}

  cross-fetch@3.1.8:
    resolution: {integrity: sha512-cvA+JwZoU0Xq+h6WkMvAUqPEYy92Obet6UdKLfW60qn99ftItKjB5T+BkyWOFWe2pUyfQ+IJHmpOTznqk1M6Kg==}

  cross-inspect@1.0.0:
    resolution: {integrity: sha512-4PFfn4b5ZN6FMNGSZlyb7wUhuN8wvj8t/VQHZdM4JsDcruGJ8L2kf9zao98QIrBPFCpdk27qst/AGTl7pL3ypQ==}
    engines: {node: '>=16.0.0'}

  cross-spawn@7.0.3:
    resolution: {integrity: sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==}
    engines: {node: '>= 8'}

  crosspath@2.0.0:
    resolution: {integrity: sha512-ju88BYCQ2uvjO2bR+SsgLSTwTSctU+6Vp2ePbKPgSCZyy4MWZxYsT738DlKVRE5utUjobjPRm1MkTYKJxCmpTA==}
    engines: {node: '>=14.9.0'}

  cspell-config-lib@8.13.1:
    resolution: {integrity: sha512-sXUFOyxvk+qDkoQdFkVEqj1hfQWzMi+tbi6ksiotQaqpm7r+YitZLSgwJjN4xgDO/rTLyP70k9fagdZ67MVZbw==}
    engines: {node: '>=18'}

  cspell-dictionary@8.13.1:
    resolution: {integrity: sha512-Z0T4J4ahOJaHmWq83w24KXGik1zeauO5WvDRyzDyaSgpbA5MN2hN98LvxaIx72g3I+trtRK77XFcKginuME9EA==}
    engines: {node: '>=18'}

  cspell-gitignore@8.13.1:
    resolution: {integrity: sha512-XyZ3X5d6x0gkWtNXSAQRcPMG41bEdLx9cTgZCYCJhEZCesU1VpNm60F3oc11dMLkO+BqPH3An+AO/YEIiaje3A==}
    engines: {node: '>=18'}
    hasBin: true

  cspell-glob@8.13.1:
    resolution: {integrity: sha512-rW1A3t7YvPXxcC4z1pp1m9coeWzUVUmRjUw3vMNGlEDC2zecB39KKbEqesziBqnBceNAY7O5itllIGFKr03vqA==}
    engines: {node: '>=18'}

  cspell-grammar@8.13.1:
    resolution: {integrity: sha512-HUkd24bulvBwee1UNBurxGlPUOiywb9pB34iXXoxFWuloHohZ/DuFlE8B/31ZtjW48ffEYIu3QZfWhcnD8e81w==}
    engines: {node: '>=18'}
    hasBin: true

  cspell-io@8.13.1:
    resolution: {integrity: sha512-t2sgZuWGBzPSOAStfvz/U3KoFEfDxEt1cXZj0Kd0Vs36v2uoLktm6ihMe7XNFu7zIdOFSajsYQ8Bi4RSLPGPxQ==}
    engines: {node: '>=18'}

  cspell-lib@8.13.1:
    resolution: {integrity: sha512-H1HHG1pmATSeAaY0KmQ0xnkbSqJLvh9QpXWARDLWKUBvtE+/l44H4yVhIp/No3rM7PKMmb82GuSJzMaoIhHFLQ==}
    engines: {node: '>=18'}

  cspell-trie-lib@8.13.1:
    resolution: {integrity: sha512-2moCsIYDmMT7hp5Non3CvWatfXptFWCuxjbXQGDNvWJ2Cj3oso/oBe4802GJv5GEenv9QBWmEtum/E7rFcx4JA==}
    engines: {node: '>=18'}

  cspell@8.13.1:
    resolution: {integrity: sha512-Bqppilpwx9xt3jZPaYcqe1JPteNmfKhx9pw9YglZEePDUzdiJQNVIfs31589GAnXjgdqqctR8N87ffLcaBNPXw==}
    engines: {node: '>=18'}
    hasBin: true

  css-select@5.1.0:
    resolution: {integrity: sha512-nwoRF1rvRRnnCqqY7updORDsuqKzqYJ28+oSMaJMMgOauh3fvwHqMS7EZpIPqK8GL+g9mKxF1vP/ZjSeNjEVHg==}

  css-tree@2.2.1:
    resolution: {integrity: sha512-OA0mILzGc1kCOCSJerOeqDxDQ4HOh+G8NbOJFOTgOCzpw7fCBubk0fEyxp8AgOL/jvLgYA/uV0cMbe43ElF1JA==}
    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0, npm: '>=7.0.0'}

  css-tree@2.3.1:
    resolution: {integrity: sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==}
    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0}

  css-what@6.1.0:
    resolution: {integrity: sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==}
    engines: {node: '>= 6'}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  cssfilter@0.0.10:
    resolution: {integrity: sha512-FAaLDaplstoRsDR8XGYH51znUN0UY7nMc6Z9/fvE8EXGwvJE9hu7W2vHwx1+bd6gCYnln9nLbzxFTrcO9YQDZw==}

  cssnano-utils@5.0.0:
    resolution: {integrity: sha512-Uij0Xdxc24L6SirFr25MlwC2rCFX6scyUmuKpzI+JQ7cyqDEwD42fJ0xfB3yLfOnRDU5LKGgjQ9FA6LYh76GWQ==}
    engines: {node: ^18.12.0 || ^20.9.0 || >=22.0}
    peerDependencies:
      postcss: ^8.4.31

  csso@5.0.5:
    resolution: {integrity: sha512-0LrrStPOdJj+SPCCrGhzryycLjwcgUSHBtxNA8aIDxf0GLsRh1cKYhB00Gd1lDOS4yGH69+SNn13+TWbVHETFQ==}
    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0, npm: '>=7.0.0'}

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  damerau-levenshtein@1.0.8:
    resolution: {integrity: sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==}

  data-view-buffer@1.0.1:
    resolution: {integrity: sha512-0lht7OugA5x3iJLOWFhWK/5ehONdprk0ISXqVFn/NFrDu+cuc8iADFrGQz5BnRK7LLU3JmkbXSxaqX+/mXYtUA==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.1:
    resolution: {integrity: sha512-4J7wRJD3ABAzr8wP+OcIcqq2dlUKp4DVflx++hs5h5ZKydWMI6/D/fAot+yh6g2tHh8fLFTvNOaVN357NvSrOQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.0:
    resolution: {integrity: sha512-t/Ygsytq+R995EJ5PZlD4Cu56sWa8InXySaViRzw9apusqsOO2bQP+SbYzAhR0pFKoB+43lYy8rWban9JSuXnA==}
    engines: {node: '>= 0.4'}

  dataloader@2.2.2:
    resolution: {integrity: sha512-8YnDaaf7N3k/q5HnTJVuzSyLETjoZjVmHc4AeKAzOvKHEFQKcn64OKBfzHYtE9zGjctNM7V9I0MfnUVLpi7M5g==}

  date-fns@3.6.0:
    resolution: {integrity: sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==}

  dayjs@1.11.12:
    resolution: {integrity: sha512-Rt2g+nTbLlDWZTwwrIXjy9MeiZmSDI375FvZs72ngxx8PDC6YXOeR3q5LAuPzjZQxhiWdRKac7RKV+YyQYfYIg==}

  debounce@1.2.1:
    resolution: {integrity: sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug==}

  debug@2.6.9:
    resolution: {integrity: sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@3.2.7:
    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.3.6:
    resolution: {integrity: sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decamelize@1.2.0:
    resolution: {integrity: sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==}
    engines: {node: '>=0.10.0'}

  dedent@1.5.3:
    resolution: {integrity: sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ==}
    peerDependencies:
      babel-plugin-macros: ^3.1.0
    peerDependenciesMeta:
      babel-plugin-macros:
        optional: true

  deep-equal@2.2.3:
    resolution: {integrity: sha512-ZIwpnevOurS8bpT4192sqAowWM76JDKSHYzMLty3BZGSswgq6pBaH3DhCSW5xVAZICZyKdOBPjwww5wfgT/6PA==}
    engines: {node: '>= 0.4'}

  deep-freeze-strict@1.1.1:
    resolution: {integrity: sha512-QemROZMM2IvhAcCFvahdX2Vbm4S/txeq5rFYU9fh4mQP79WTMW5c/HkQ2ICl1zuzcDZdPZ6zarDxQeQMsVYoNA==}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  deepmerge@4.3.1:
    resolution: {integrity: sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==}
    engines: {node: '>=0.10.0'}

  defaults@1.0.4:
    resolution: {integrity: sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  denque@2.1.0:
    resolution: {integrity: sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==}
    engines: {node: '>=0.10'}

  depd@2.0.0:
    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}
    engines: {node: '>= 0.8'}

  dependency-graph@0.11.0:
    resolution: {integrity: sha512-JeMq7fEshyepOWDfcfHK06N3MhyPhz++vtqWhMT5O9A3K42rdsEDpfdVqjaqaAhsw6a+ZqeDvQVtD0hFHQWrzg==}
    engines: {node: '>= 0.6.0'}

  destroy@1.2.0:
    resolution: {integrity: sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  detect-indent@6.1.0:
    resolution: {integrity: sha512-reYkTUJAZb9gUuZ2RvVCNhVHdg62RHnJ7WJl8ftMi4diZ6NWlciOzQN88pUhSELEwflJht4oQDv0F0BMlwaYtA==}
    engines: {node: '>=8'}

  detect-libc@1.0.3:
    resolution: {integrity: sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==}
    engines: {node: '>=0.10'}
    hasBin: true

  detect-libc@2.0.3:
    resolution: {integrity: sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==}
    engines: {node: '>=8'}

  detect-newline@3.1.0:
    resolution: {integrity: sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==}
    engines: {node: '>=8'}

  dezalgo@1.0.4:
    resolution: {integrity: sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==}

  diff-sequences@29.6.3:
    resolution: {integrity: sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  diff@4.0.2:
    resolution: {integrity: sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==}
    engines: {node: '>=0.3.1'}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  doctrine@3.0.0:
    resolution: {integrity: sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==}
    engines: {node: '>=6.0.0'}

  dom-serializer@2.0.0:
    resolution: {integrity: sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==}

  domelementtype@2.3.0:
    resolution: {integrity: sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==}

  domhandler@5.0.3:
    resolution: {integrity: sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==}
    engines: {node: '>= 4'}

  domutils@3.1.0:
    resolution: {integrity: sha512-H78uMmQtI2AhgDJjWeQmHwJJ2bLPD3GMmO7Zja/ZZh84wkm+4ut+IUnUdRa8uCGX88DiVx1j6FRe1XfxEgjEZA==}

  dot-case@3.0.4:
    resolution: {integrity: sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==}

  dotenv-expand@10.0.0:
    resolution: {integrity: sha512-GopVGCpVS1UKH75VKHGuQFqS1Gusej0z4FyQkPdwjil2gNIv+LNsqBlboOzpJFZKVT95GkCyWJbBSdFEFUWI2A==}
    engines: {node: '>=12'}

  dotenv@16.4.5:
    resolution: {integrity: sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==}
    engines: {node: '>=12'}

  dset@3.1.3:
    resolution: {integrity: sha512-20TuZZHCEZ2O71q9/+8BwKwZ0QtD9D8ObhrihJPr+vLLYlSuAU3/zL4cSlgbfeoGHTjCSJBa7NGcrF9/Bx/WJQ==}
    engines: {node: '>=4'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  ecpair@2.1.0:
    resolution: {integrity: sha512-cL/mh3MtJutFOvFc27GPZE2pWL3a3k4YvzUWEOvilnfZVlH3Jwgx/7d6tlD7/75tNk8TG2m+7Kgtz0SI1tWcqw==}
    engines: {node: '>=8.0.0'}

  ee-first@1.1.1:
    resolution: {integrity: sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==}

  ejs@3.1.10:
    resolution: {integrity: sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==}
    engines: {node: '>=0.10.0'}
    hasBin: true

  electron-to-chromium@1.4.825:
    resolution: {integrity: sha512-OCcF+LwdgFGcsYPYC5keEEFC2XT0gBhrYbeGzHCx7i9qRFbzO/AqTmc/C/1xNhJj+JA7rzlN7mpBuStshh96Cg==}

  electron-to-chromium@1.5.4:
    resolution: {integrity: sha512-orzA81VqLyIGUEA77YkVA1D+N+nNfl2isJVjjmOyrlxuooZ19ynb+dOlaDTqd/idKRS9lDCSBmtzM+kyCsMnkA==}

  elliptic@6.5.4:
    resolution: {integrity: sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==}

  emittery@0.13.1:
    resolution: {integrity: sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==}
    engines: {node: '>=12'}

  emoji-regex@10.3.0:
    resolution: {integrity: sha512-QpLs9D9v9kArv4lfDEgg1X/gN5XLnf/A6l9cs8SPZLRZR3ZkY9+kwIQTxm+fsSej5UMYGE8fdoaZVIBlqG0XTw==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  encodeurl@1.0.2:
    resolution: {integrity: sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==}
    engines: {node: '>= 0.8'}

  enhanced-resolve@5.17.0:
    resolution: {integrity: sha512-dwDPwZL0dmye8Txp2gzFmA6sxALaSvdRDjPH0viLcKrtlOL3tw62nWWweVD1SdILDTJrbrL6tdWVN58Wo6U3eA==}
    engines: {node: '>=10.13.0'}

  entities@4.5.0:
    resolution: {integrity: sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==}
    engines: {node: '>=0.12'}

  env-paths@3.0.0:
    resolution: {integrity: sha512-dtJUTepzMW3Lm/NPxRf3wP4642UWhjL2sQxc+ym2YMj1m/H2zDNQOlezafzkHwn6sMstjHTwG6iQQsctDW/b1A==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  environment@1.1.0:
    resolution: {integrity: sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==}
    engines: {node: '>=18'}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  es-abstract@1.23.3:
    resolution: {integrity: sha512-e+HfNH61Bj1X9/jLc5v1owaLYuHdeHHSQlkhCBiTK8rBvKaULl/beGMxwrMXjpYrv4pz22BlY570vVePA2ho4A==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.0:
    resolution: {integrity: sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-get-iterator@1.1.3:
    resolution: {integrity: sha512-sPZmqHBe6JIiTfN5q2pEi//TwxmAFHwj/XEuYjTuse78i8KxaqMTTzxPoFKuzRpDpTJ+0NAbpfenkmH2rePtuw==}

  es-iterator-helpers@1.0.19:
    resolution: {integrity: sha512-zoMwbCcH5hwUkKJkT8kDIBZSz9I6mVG//+lDCinLCGov4+r7NIy0ld8o03M0cJxl2spVf6ESYVS6/gpIfq1FFw==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.5.4:
    resolution: {integrity: sha512-MVNK56NiMrOwitFB7cqDwq0CQutbw+0BvLshJSse0MUNU+y1FC3bUS/AQg7oUng+/wKrrki7JfmwtVHkVfPLlw==}

  es-object-atoms@1.0.0:
    resolution: {integrity: sha512-MZ4iQ6JwHOBQjahnjwaC1ZtIBH+2ohjamzAO3oaHcXYup7qxjF2fixyH+Q71voWHeOkI2q/TnJao/KfXYIZWbw==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.0.3:
    resolution: {integrity: sha512-3T8uNMC3OQTHkFUsFq8r/BwAXLHvU/9O9mE0fBc/MY5iq/8H7ncvO947LmYA6ldWw9Uh8Yhf25zu6n7nML5QWQ==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.0.2:
    resolution: {integrity: sha512-J3yBRXCzDu4ULnQwxyToo/OjdMx6akgVC7K6few0a7F/0wLtmKKN7I73AH5T2836UuXRqN7Qg+IIUw/+YJksRw==}

  es-to-primitive@1.2.1:
    resolution: {integrity: sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==}
    engines: {node: '>= 0.4'}

  esbuild@0.17.19:
    resolution: {integrity: sha512-XQ0jAPFkK/u3LcVRcvVHQcTIqD6E2H1fvZMA5dQPSOWb3suUbWbfbRf94pjc0bNzRYLfIrDRQXr7X+LHIm5oHw==}
    engines: {node: '>=12'}
    hasBin: true

  esbuild@0.20.2:
    resolution: {integrity: sha512-WdOOppmUNU+IbZ0PaDiTst80zjnrOkyJNHoKupIcVyU8Lvla3Ugx94VzkQ32Ijqd7UhHJy75gNWDMUekcrSJ6g==}
    engines: {node: '>=12'}
    hasBin: true

  escalade@3.1.2:
    resolution: {integrity: sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==}
    engines: {node: '>=6'}

  escape-html@1.0.3:
    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}

  escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}

  escape-string-regexp@2.0.0:
    resolution: {integrity: sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==}
    engines: {node: '>=8'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-next@14.2.4:
    resolution: {integrity: sha512-Qr0wMgG9m6m4uYy2jrYJmyuNlYZzPRQq5Kvb9IDlYwn+7yq6W6sfMNFgb+9guM1KYwuIo6TIaiFhZJ6SnQ/Efw==}
    peerDependencies:
      eslint: ^7.23.0 || ^8.0.0
      typescript: '>=3.3.1'
    peerDependenciesMeta:
      typescript:
        optional: true

  eslint-config-prettier@9.1.0:
    resolution: {integrity: sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==}
    hasBin: true
    peerDependencies:
      eslint: '>=7.0.0'

  eslint-import-resolver-node@0.3.9:
    resolution: {integrity: sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==}

  eslint-import-resolver-typescript@3.6.1:
    resolution: {integrity: sha512-xgdptdoi5W3niYeuQxKmzVDTATvLYqhpwmykwsh7f6HIOStGWEIL9iqZgQDF9u9OEzrRwR8no5q2VT+bjAujTg==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      eslint: '*'
      eslint-plugin-import: '*'

  eslint-module-utils@2.8.1:
    resolution: {integrity: sha512-rXDXR3h7cs7dy9RNpUlQf80nX31XWJEyGq1tRMo+6GsO5VmTe4UTwtmonAD4ZkAsrfMVDA2wlGJ3790Ys+D49Q==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: '*'
      eslint-import-resolver-node: '*'
      eslint-import-resolver-typescript: '*'
      eslint-import-resolver-webpack: '*'
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true
      eslint:
        optional: true
      eslint-import-resolver-node:
        optional: true
      eslint-import-resolver-typescript:
        optional: true
      eslint-import-resolver-webpack:
        optional: true

  eslint-plugin-import@2.29.1:
    resolution: {integrity: sha512-BbPC0cuExzhiMo4Ff1BTVwHpjjv28C5R+btTOGaCRC7UEz801up0JadwkeSk5Ued6TG34uaczuVuH6qyy5YUxw==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: ^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true

  eslint-plugin-jsx-a11y@6.9.0:
    resolution: {integrity: sha512-nOFOCaJG2pYqORjK19lqPqxMO/JpvdCZdPtNdxY3kvom3jTvkAbOvQvD8wuD0G8BYR0IGAGYDlzqWJOh/ybn2g==}
    engines: {node: '>=4.0'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8

  eslint-plugin-no-relative-import-paths@1.5.5:
    resolution: {integrity: sha512-UjudFFdBbv93v0CsVdEKcMLbBzRIjeK2PubTctX57tgnHxZcMj1Jm8lDBWoETnPxk0S5g5QLSltEM+511yL4+w==}

  eslint-plugin-prettier@5.2.1:
    resolution: {integrity: sha512-gH3iR3g4JfF+yYPaJYkN7jEl9QbweL/YfkoRlNnuIEHEz1vHVlCmWOS+eGGiRuzHQXdJFCOTxRgvju9b8VUmrw==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      '@types/eslint': '>=8.0.0'
      eslint: '>=8.0.0'
      eslint-config-prettier: '*'
      prettier: '>=3.0.0'
    peerDependenciesMeta:
      '@types/eslint':
        optional: true
      eslint-config-prettier:
        optional: true

  eslint-plugin-react-hooks@4.6.2:
    resolution: {integrity: sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0

  eslint-plugin-react@7.35.0:
    resolution: {integrity: sha512-v501SSMOWv8gerHkk+IIQBkcGRGrO2nfybfj5pLxuJNFTPxxA3PSryhXTK+9pNbtkggheDdsC0E9Q8CuPk6JKA==}
    engines: {node: '>=4'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7

  eslint-plugin-simple-import-sort@10.0.0:
    resolution: {integrity: sha512-AeTvO9UCMSNzIHRkg8S6c3RPy5YEwKWSQPx3DYghLedo2ZQxowPFLGDN1AZ2evfg6r6mjBSZSLxLFsWSu3acsw==}
    peerDependencies:
      eslint: '>=5.0.0'

  eslint-plugin-unicorn@49.0.0:
    resolution: {integrity: sha512-0fHEa/8Pih5cmzFW5L7xMEfUTvI9WKeQtjmKpTUmY+BiFCDxkxrTdnURJOHKykhtwIeyYsxnecbGvDCml++z4Q==}
    engines: {node: '>=16'}
    peerDependencies:
      eslint: '>=8.52.0'

  eslint-plugin-unused-imports@3.2.0:
    resolution: {integrity: sha512-6uXyn6xdINEpxE1MtDjxQsyXB37lfyO2yKGVVgtD7WEWQGORSOZjgrD6hBhvGv4/SO+TOlS+UnC6JppRqbuwGQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      '@typescript-eslint/eslint-plugin': 6 - 7
      eslint: '8'
    peerDependenciesMeta:
      '@typescript-eslint/eslint-plugin':
        optional: true

  eslint-rule-composer@0.3.0:
    resolution: {integrity: sha512-bt+Sh8CtDmn2OajxvNO+BX7Wn4CIWMpTRm3MaiKPCQcnnlm0CS2mhui6QaoeQugs+3Kj2ESKEEGJUdVafwhiCg==}
    engines: {node: '>=4.0.0'}

  eslint-scope@5.1.1:
    resolution: {integrity: sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==}
    engines: {node: '>=8.0.0'}

  eslint-scope@7.2.2:
    resolution: {integrity: sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint@8.57.0:
    resolution: {integrity: sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    hasBin: true

  espree@9.6.1:
    resolution: {integrity: sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  esprima@4.0.1:
    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
    engines: {node: '>=4'}
    hasBin: true

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@4.3.0:
    resolution: {integrity: sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-walker@2.0.2:
    resolution: {integrity: sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  etag@1.8.1:
    resolution: {integrity: sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==}
    engines: {node: '>= 0.6'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  eventemitter2@6.4.9:
    resolution: {integrity: sha512-JEPTiaOt9f04oa6NOkc4aH+nVp5I3wEjpHbIPqfgCdD5v5bUzy7xQqwcVO2aDQgOWhI28da57HksMrzK9HlRxg==}

  eventemitter3@3.1.2:
    resolution: {integrity: sha512-tvtQIeLVHjDkJYnzf2dgVMxfuSGJeM/7UCG17TT4EumTfNtF+0nebF/4zWOIkCreAbtNqhGEboB6BWrwqNaw4Q==}

  eventemitter3@4.0.7:
    resolution: {integrity: sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==}

  eventemitter3@5.0.1:
    resolution: {integrity: sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  execa@5.1.1:
    resolution: {integrity: sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==}
    engines: {node: '>=10'}

  execa@8.0.1:
    resolution: {integrity: sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==}
    engines: {node: '>=16.17'}

  exit@0.1.2:
    resolution: {integrity: sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==}
    engines: {node: '>= 0.8.0'}

  expect@29.7.0:
    resolution: {integrity: sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  express@4.19.2:
    resolution: {integrity: sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==}
    engines: {node: '>= 0.10.0'}

  external-editor@3.1.0:
    resolution: {integrity: sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==}
    engines: {node: '>=4'}

  extract-files@11.0.0:
    resolution: {integrity: sha512-FuoE1qtbJ4bBVvv94CC7s0oTnKUGvQs+Rjf1L2SJFfS+HTVVjhPFtehPdQ0JiGPqVNfSSZvL5yzHHQq2Z4WNhQ==}
    engines: {node: ^12.20 || >= 14.13}

  fast-content-type-parse@1.1.0:
    resolution: {integrity: sha512-fBHHqSTFLVnR61C+gltJuE5GkVQMV0S2nqUO8TJ+5Z3qAKG8vAx4FKai1s5jq/inV1+sREynIWSuQ6HgoSXpDQ==}

  fast-decode-uri-component@1.0.1:
    resolution: {integrity: sha512-WKgKWg5eUxvRZGwW8FvfbaH7AXSh2cL+3j5fMGzUMCxWBJ3dV3a7Wz8y2f/uQ0e3B6WmodD3oS54jTQ9HVTIIg==}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-diff@1.3.0:
    resolution: {integrity: sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==}

  fast-equals@5.0.1:
    resolution: {integrity: sha512-WF1Wi8PwwSY7/6Kx0vKXtw8RwuSGoM1bvDaJbu7MxDlR1vovZjIAKrnzyrThgAjm6JDTu0fVgWXDlMGspodfoQ==}
    engines: {node: '>=6.0.0'}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-json-stringify@5.16.1:
    resolution: {integrity: sha512-KAdnLvy1yu/XrRtP+LJnxbBGrhN+xXu+gt3EUvZhYGKCr3lFHq/7UFJHHFgmJKoqlh6B40bZLEv7w46B0mqn1g==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fast-querystring@1.1.2:
    resolution: {integrity: sha512-g6KuKWmFXc0fID8WWH0jit4g0AGBoJhCkJMb1RmbsSEUNvQ+ZC8D6CUZ+GtF8nMzSPXnhiePyyqqipzNNEnHjg==}

  fast-redact@3.5.0:
    resolution: {integrity: sha512-dwsoQlS7h9hMeYUq1W++23NDcBLV4KqONnITDV9DjfS3q1SgDGVrBdvvTLUotWtPSD7asWDV9/CmsZPy8Hf70A==}
    engines: {node: '>=6'}

  fast-safe-stringify@2.1.1:
    resolution: {integrity: sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==}

  fast-uri@2.4.0:
    resolution: {integrity: sha512-ypuAmmMKInk5q7XcepxlnUWDLWv4GFtaJqAzWKqn62IpQ3pejtr5dTVbt3vwqVaMKmkNR55sTT+CqUKIaT21BA==}

  fast-uri@3.0.1:
    resolution: {integrity: sha512-MWipKbbYiYI0UC7cl8m/i/IWTqfC8YXsqjzybjddLsFjStroQzsHXkc73JutMvBiXmOvapk+axIl79ig5t55Bw==}

  fast-url-parser@1.1.3:
    resolution: {integrity: sha512-5jOCVXADYNuRkKFzNJ0dCCewsZiYo0dz8QNYljkOpFC6r2U4OBmKtvm/Tsuh4w1YYdDqDb31a8TVhBJ2OJKdqQ==}

  fastify-plugin@4.5.1:
    resolution: {integrity: sha512-stRHYGeuqpEZTL1Ef0Ovr2ltazUT9g844X5z/zEBFLG8RYlpDiOCIG+ATvYEp+/zmc7sN29mcIMp8gvYplYPIQ==}

  fastify@4.28.1:
    resolution: {integrity: sha512-kFWUtpNr4i7t5vY2EJPCN2KgMVpuqfU4NjnJNCgiNB900oiDeYqaNDRcAfeBbOF5hGixixxcKnOU4KN9z6QncQ==}

  fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}

  fb-watchman@2.0.2:
    resolution: {integrity: sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==}

  fbjs-css-vars@1.0.2:
    resolution: {integrity: sha512-b2XGFAFdWZWg0phtAWLHCk836A1Xann+I+Dgd3Gk64MHKZO44FfoD1KxyvbSh0qZsIoXQGGlVztIY+oitJPpRQ==}

  fbjs@3.0.5:
    resolution: {integrity: sha512-ztsSx77JBtkuMrEypfhgc3cI0+0h+svqeie7xHbh1k/IKdcydnvadp/mUaGgjAOXQmQSxsqgaRhS3q9fy+1kxg==}

  figures@3.2.0:
    resolution: {integrity: sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==}
    engines: {node: '>=8'}

  file-entry-cache@6.0.1:
    resolution: {integrity: sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==}
    engines: {node: ^10.12.0 || >=12.0.0}

  file-entry-cache@9.0.0:
    resolution: {integrity: sha512-6MgEugi8p2tiUhqO7GnPsmbCCzj0YRCwwaTbpGRyKZesjRSzkqkAE9fPp7V2yMs5hwfgbQLgdvSSkGNg1s5Uvw==}
    engines: {node: '>=18'}

  file-size@1.0.0:
    resolution: {integrity: sha512-tLIdonWTpABkU6Axg2yGChYdrOsy4V8xcm0IcyAP8fSsu6jiXLm5pgs083e4sq5fzNRZuAYolUbZyYmPvCKfwQ==}

  filelist@1.0.4:
    resolution: {integrity: sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==}

  filesize@10.1.2:
    resolution: {integrity: sha512-Dx770ai81ohflojxhU+oG+Z2QGvKdYxgEr9OSA8UVrqhwNHjfH9A8f5NKfg83fEH8ZFA5N5llJo5T3PIoZ4CRA==}
    engines: {node: '>= 10.4.0'}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  finalhandler@1.2.0:
    resolution: {integrity: sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==}
    engines: {node: '>= 0.8'}

  find-my-way@8.2.0:
    resolution: {integrity: sha512-HdWXgFYc6b1BJcOBDBwjqWuHJj1WYiqrxSh25qtU4DabpMFdj/gSunNBQb83t+8Zt67D7CXEzJWTkxaShMTMOA==}
    engines: {node: '>=14'}

  find-up-simple@1.0.0:
    resolution: {integrity: sha512-q7Us7kcjj2VMePAa02hDAF6d+MzsdsAWEwYyOpwUtlerRBkOEPBCRZrAV4XfcSN8fHAgaD0hP7miwoay6DCprw==}
    engines: {node: '>=18'}

  find-up@3.0.0:
    resolution: {integrity: sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==}
    engines: {node: '>=6'}

  find-up@4.1.0:
    resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  find-yarn-workspace-root2@1.2.16:
    resolution: {integrity: sha512-hr6hb1w8ePMpPVUK39S4RlwJzi+xPLuVuG8XlwXU3KD5Yn3qgBWVfy3AzNlDhWvE1EORCE65/Qm26rFQt3VLVA==}

  flat-cache@3.2.0:
    resolution: {integrity: sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==}
    engines: {node: ^10.12.0 || >=12.0.0}

  flat-cache@5.0.0:
    resolution: {integrity: sha512-JrqFmyUl2PnPi1OvLyTVHnQvwQ0S+e6lGSwu8OkAZlSaNIZciTY2H/cOOROxsBA1m/LZNHDsqAgDZt6akWcjsQ==}
    engines: {node: '>=18'}

  flatted@3.3.1:
    resolution: {integrity: sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==}

  focus-trap@7.5.4:
    resolution: {integrity: sha512-N7kHdlgsO/v+iD/dMoJKtsSqs5Dz/dXZVebRgJw23LDk+jMi/974zyiOYDziY2JPp8xivq9BmUGwIJMiuSBi7w==}

  follow-redirects@1.15.6:
    resolution: {integrity: sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.3:
    resolution: {integrity: sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==}

  foreground-child@3.2.1:
    resolution: {integrity: sha512-PXUUyLqrR2XCWICfv6ukppP96sdFwWbNEnfEMt7jNsISjMsvaLNinAHNDYyvkyU+SZG2BTSbT5NjG+vZslfGTA==}
    engines: {node: '>=14'}

  fork-ts-checker-webpack-plugin@9.0.2:
    resolution: {integrity: sha512-Uochze2R8peoN1XqlSi/rGUkDQpRogtLFocP9+PGu68zk1BDAKXfdeCdyVZpgTk8V8WFVQXdEz426VKjXLO1Gg==}
    engines: {node: '>=12.13.0', yarn: '>=1.0.0'}
    peerDependencies:
      typescript: '>3.6.0'
      webpack: ^5.11.0

  form-data@4.0.0:
    resolution: {integrity: sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==}
    engines: {node: '>= 6'}

  formidable@3.5.1:
    resolution: {integrity: sha512-WJWKelbRHN41m5dumb0/k8TeAx7Id/y3a+Z7QfhxP/htI9Js5zYaEDtG8uMgG0vM0lOlqnmjE99/kfpOYi/0Og==}

  forwarded@0.2.0:
    resolution: {integrity: sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==}
    engines: {node: '>= 0.6'}

  fresh@0.5.2:
    resolution: {integrity: sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==}
    engines: {node: '>= 0.6'}

  fs-extra@10.1.0:
    resolution: {integrity: sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==}
    engines: {node: '>=12'}

  fs-extra@11.2.0:
    resolution: {integrity: sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==}
    engines: {node: '>=14.14'}

  fs-monkey@1.0.6:
    resolution: {integrity: sha512-b1FMfwetIKymC0eioW7mTywihSQE4oLzQn1dB6rZB5fx/3NpNEdAWeCSMB+60/AeT0TCXsxzAlcYVEFCTAksWg==}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.6:
    resolution: {integrity: sha512-Z5kx79swU5P27WEayXM1tBi5Ze/lbIyiNgU3qyXUOf9b2rgXYyF9Dy9Cx+IQv/Lc8WCG6L82zwUPpSS9hGehIg==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  generic-pool@3.9.0:
    resolution: {integrity: sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g==}
    engines: {node: '>= 4'}

  gensequence@7.0.0:
    resolution: {integrity: sha512-47Frx13aZh01afHJTB3zTtKIlFI6vWY+MYCN9Qpew6i52rfKjnhCF/l1YlC8UmEMvvntZZ6z4PiCcmyuedR2aQ==}
    engines: {node: '>=18'}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-caller-file@2.0.5:
    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
    engines: {node: 6.* || 8.* || >= 10.*}

  get-east-asian-width@1.2.0:
    resolution: {integrity: sha512-2nk+7SIVb14QrgXFHcm84tD4bKQz0RxPuMT8Ag5KPOq7J5fEmAg0UbXdTOSHqNuHSU28k55qnceesxXRZGzKWA==}
    engines: {node: '>=18'}

  get-intrinsic@1.2.4:
    resolution: {integrity: sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==}
    engines: {node: '>= 0.4'}

  get-package-type@0.1.0:
    resolution: {integrity: sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==}
    engines: {node: '>=8.0.0'}

  get-stdin@9.0.0:
    resolution: {integrity: sha512-dVKBjfWisLAicarI2Sf+JuBE/DghV4UzNAVe9yhEJuzeREd3JhOTE9cUaJTeSa77fsbQUK3pcOpJfM59+VKZaA==}
    engines: {node: '>=12'}

  get-stream@6.0.1:
    resolution: {integrity: sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==}
    engines: {node: '>=10'}

  get-stream@8.0.1:
    resolution: {integrity: sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==}
    engines: {node: '>=16'}

  get-symbol-description@1.0.2:
    resolution: {integrity: sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.7.6:
    resolution: {integrity: sha512-ZAqrLlu18NbDdRaHq+AKXzAmqIUPswPWKUchfytdAjiRFnCe5ojG2bstg6mRiZabkKfCoL/e98pbBELIV/YCeA==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob-to-regexp@0.4.1:
    resolution: {integrity: sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==}

  glob@10.3.10:
    resolution: {integrity: sha512-fa46+tv1Ak0UPK1TOy/pZrIybNNt4HCv7SDzwyfiOZkvZLEbjsZkJBPtDHVshZjbecAoAGSC20MjLDG/qr679g==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  glob@10.4.2:
    resolution: {integrity: sha512-GwMlUF6PkPo3Gk21UxkCohOv0PLcIXVtKyLlpEI28R/cO/4eNOdmLk3CMW1wROV/WR/EsZOWAfBbBOqYvs88/w==}
    engines: {node: '>=16 || 14 >=14.18'}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  global-directory@4.0.1:
    resolution: {integrity: sha512-wHTUcDUoZ1H5/0iVqEudYW4/kAlN5cZ3j/bXn0Dpbizl9iaUVeWSHqiOjsgk6OW2bkLclbBjzewBz6weQ1zA2Q==}
    engines: {node: '>=18'}

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  globals@13.24.0:
    resolution: {integrity: sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==}
    engines: {node: '>=8'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  gopd@1.0.1:
    resolution: {integrity: sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  graphql-config@5.1.0:
    resolution: {integrity: sha512-g4mNs1OZmZI+LHwRly3BbHO3mRZryyRCbmFKDGsFGde3U0F7TlIwJ0mhX1KTJlQzGQVDZDexZWnvIwodFERPvg==}
    engines: {node: '>= 16.0.0'}
    peerDependencies:
      cosmiconfig-toml-loader: ^1.0.0
      graphql: ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0
    peerDependenciesMeta:
      cosmiconfig-toml-loader:
        optional: true

  graphql-query-complexity@1.0.0:
    resolution: {integrity: sha512-Tj7mRIuKWjGomPaRW5E+ztY8bhYPf1v/7bkDPuzksrR3GqHeIS5jxzX8CfimlV3g9z0lT20RG9JgaUUjhRjtOA==}
    peerDependencies:
      graphql: ^14.6.0 || ^15.0.0 || ^16.0.0

  graphql-request@6.1.0:
    resolution: {integrity: sha512-p+XPfS4q7aIpKVcgmnZKhMNqhltk20hfXtkaIkTfjjmiKMJ5xrt5c743cL03y/K7y1rg3WrIC49xGiEQ4mxdNw==}
    peerDependencies:
      graphql: 14 - 16

  graphql-request@7.1.0:
    resolution: {integrity: sha512-Ouu/lYVFhARS1aXeZoVJWnGT6grFJXTLwXJuK4mUGGRo0EUk1JkyYp43mdGmRgUVezpRm6V5Sq3t8jBDQcajng==}
    hasBin: true
    peerDependencies:
      '@dprint/formatter': ^0.3.0
      '@dprint/typescript': ^0.91.1
      dprint: ^0.46.2
      graphql: 14 - 16
    peerDependenciesMeta:
      '@dprint/formatter':
        optional: true
      '@dprint/typescript':
        optional: true
      dprint:
        optional: true

  graphql-tag@2.12.6:
    resolution: {integrity: sha512-FdSNcu2QQcWnM2VNvSCCDCVS5PpPqpzgFT8+GXzqJuoDd0CBncxCY278u4mhRO7tMgo2JjgJA5aZ+nWSQ/Z+xg==}
    engines: {node: '>=10'}
    peerDependencies:
      graphql: ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0

  graphql-ws@5.16.0:
    resolution: {integrity: sha512-Ju2RCU2dQMgSKtArPbEtsK5gNLnsQyTNIo/T7cZNp96niC1x0KdJNZV0TIoilceBPQwfb5itrGl8pkFeOUMl4A==}
    engines: {node: '>=10'}
    peerDependencies:
      graphql: '>=0.11 <=16'

  graphql@16.9.0:
    resolution: {integrity: sha512-GGTKBX4SD7Wdb8mqeDLni2oaRGYQWjWHGKPQ24ZMnUtKfcsVoiv4uX8+LJr1K6U5VW2Lu1BwJnj7uiori0YtRw==}
    engines: {node: ^12.22.0 || ^14.16.0 || ^16.0.0 || >=17.0.0}

  has-bigints@1.0.2:
    resolution: {integrity: sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==}

  has-flag@3.0.0:
    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
    engines: {node: '>=4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-own-prop@2.0.0:
    resolution: {integrity: sha512-Pq0h+hvsVm6dDEa8x82GnLSYHOzNDt7f0ddFa3FqcQlgzEiptPqL+XrOJNavjOzSYiYWIrgeVYYgGlLmnxwilQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.0.3:
    resolution: {integrity: sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==}
    engines: {node: '>= 0.4'}

  has-symbols@1.0.3:
    resolution: {integrity: sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hash-base@3.1.0:
    resolution: {integrity: sha512-1nmYp/rhMDiE7AYkDw+lLwlAzz0AntGIe51F3RfFfEqyQ3feY2eI/NcwC6umIQVOASPMsWJLJScWKSSvzL9IVA==}
    engines: {node: '>=4'}

  hash.js@1.1.7:
    resolution: {integrity: sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  header-case@2.0.4:
    resolution: {integrity: sha512-H/vuk5TEEVZwrR0lp2zed9OCo1uAILMlx0JEMgC26rzyJJ3N1v6XkwHHXJQdR2doSjcGPM6OKPYoJgf0plJ11Q==}

  hexoid@1.0.0:
    resolution: {integrity: sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==}
    engines: {node: '>=8'}

  hmac-drbg@1.0.1:
    resolution: {integrity: sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==}

  hoist-non-react-statics@3.3.2:
    resolution: {integrity: sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==}

  hookable@5.5.3:
    resolution: {integrity: sha512-Yc+BQe8SvoXH1643Qez1zqLRmbA5rCL+sSmk6TVos0LWVfNIB7PGncdlId77WzLGSIB5KaWgTaNTs2lNVEI6VQ==}

  hosted-git-info@2.8.9:
    resolution: {integrity: sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  http-errors@2.0.0:
    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}
    engines: {node: '>= 0.8'}

  http-proxy-agent@7.0.2:
    resolution: {integrity: sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==}
    engines: {node: '>= 14'}

  https-proxy-agent@7.0.5:
    resolution: {integrity: sha512-1e4Wqeblerz+tMKPIq2EMGiiWW1dIjZOksyHWSUm1rmuvw/how9hBHZ38lAGj5ID4Ik6EdkOw7NmWPy6LAwalw==}
    engines: {node: '>= 14'}

  human-signals@2.1.0:
    resolution: {integrity: sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==}
    engines: {node: '>=10.17.0'}

  human-signals@5.0.0:
    resolution: {integrity: sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==}
    engines: {node: '>=16.17.0'}

  husky@9.1.4:
    resolution: {integrity: sha512-bho94YyReb4JV7LYWRWxZ/xr6TtOTt8cMfmQ39MQYJ7f/YE268s3GdghGwi+y4zAeqewE5zYLvuhV0M0ijsDEA==}
    engines: {node: '>=18'}
    hasBin: true

  iconv-lite@0.4.24:
    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}
    engines: {node: '>=0.10.0'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.1:
    resolution: {integrity: sha512-5Fytz/IraMjqpwfd34ke28PTVMjZjJG2MPn5t7OE4eUCUNf8BAa7b5WUS9/Qvr6mwOQS7Mk6vdsMno5he+T8Xw==}
    engines: {node: '>= 4'}

  immutable@3.7.6:
    resolution: {integrity: sha512-AizQPcaofEtO11RZhPPHBOJRdo/20MKQF9mBLnVkBoyHi1/zXK8fzVdnEpSV9gxqtnh6Qomfp3F0xT5qP/vThw==}
    engines: {node: '>=0.8.0'}

  immutable@4.3.7:
    resolution: {integrity: sha512-1hqclzwYwjRDFLjcFxOM5AYkkG0rpFPpr1RLPMEuGczoS7YA8gLhy8SWXYRAA/XwfEHpfo3cw5JGioS32fnMRw==}

  import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}

  import-from@4.0.0:
    resolution: {integrity: sha512-P9J71vT5nLlDeV8FHs5nNxaLbrpfAV5cF5srvbZfpwpcJoM/xZR3hiv+q+SAnuSmuGbXMWud063iIMx/V/EWZQ==}
    engines: {node: '>=12.2'}

  import-in-the-middle@1.11.0:
    resolution: {integrity: sha512-5DimNQGoe0pLUHbR9qK84iWaWjjbsxiqXnw6Qz64+azRgleqv9k2kTt5fw7QsOpmaGYtuxxursnPPsnTKEx10Q==}

  import-in-the-middle@1.7.1:
    resolution: {integrity: sha512-1LrZPDtW+atAxH42S6288qyDFNQ2YCty+2mxEPRtfazH6Z5QwkaBSTS2ods7hnVJioF6rkRfNoA6A/MstpFXLg==}

  import-local@3.2.0:
    resolution: {integrity: sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==}
    engines: {node: '>=8'}
    hasBin: true

  import-meta-resolve@4.1.0:
    resolution: {integrity: sha512-I6fiaX09Xivtk+THaMfAwnA3MVA5Big1WHF1Dfx9hFuvNIWpXnorlkzhcQf6ehrqQiiZECRt1poOAkPmer3ruw==}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  indent-string@4.0.0:
    resolution: {integrity: sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==}
    engines: {node: '>=8'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ini@4.1.1:
    resolution: {integrity: sha512-QQnnxNyfvmHFIsj7gkPcYymR8Jdw/o7mp5ZFihxn6h8Ci6fh3Dx4E1gPjpQEpIuPo9XVNY/ZUwh4BPMjGyL01g==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  inquirer@7.3.3:
    resolution: {integrity: sha512-JG3eIAj5V9CwcGvuOmoo6LB9kbAYT8HXffUl6memuszlwDC/qvFAJw49XJ5NROSFNPxp3iQg1GqkFhaY/CR0IA==}
    engines: {node: '>=8.0.0'}

  inquirer@8.2.6:
    resolution: {integrity: sha512-M1WuAmb7pn9zdFRtQYk26ZBoY043Sse0wVDdk4Bppr+JOXyQYybdtvK+l9wUibhtjdjvtoiNy8tk+EgsYIUqKg==}
    engines: {node: '>=12.0.0'}

  inquirer@9.2.15:
    resolution: {integrity: sha512-vI2w4zl/mDluHt9YEQ/543VTCwPKWiHzKtm9dM2V0NdFcqEexDAjUHzO1oA60HRNaVifGXXM1tRRNluLVHa0Kg==}
    engines: {node: '>=18'}

  internal-slot@1.0.7:
    resolution: {integrity: sha512-NGnrKwXzSms2qUUih/ILZ5JBqNTSa1+ZmP6flaIp6KmSElgE9qdndzS3cqjrDovwFdmwsGsLdeFgB6suw+1e9g==}
    engines: {node: '>= 0.4'}

  invariant@2.2.4:
    resolution: {integrity: sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==}

  ioredis@5.4.1:
    resolution: {integrity: sha512-2YZsvl7jopIa1gaePkeMtd9rAcSjOOjPtpcLlOeusyO+XH2SK5ZcT+UCrElPP+WVIInh2TzeI4XW9ENaSLVVHA==}
    engines: {node: '>=12.22.0'}

  ipaddr.js@1.9.1:
    resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}
    engines: {node: '>= 0.10'}

  is-absolute@1.0.0:
    resolution: {integrity: sha512-dOWoqflvcydARa360Gvv18DZ/gRuHKi2NU/wU5X1ZFzdYfH29nkiNZsF3mp4OJ3H4yo9Mx8A/uAGNzpzPN3yBA==}
    engines: {node: '>=0.10.0'}

  is-arguments@1.1.1:
    resolution: {integrity: sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==}
    engines: {node: '>= 0.4'}

  is-array-buffer@3.0.4:
    resolution: {integrity: sha512-wcjaerHw0ydZwfhiKbXJWLDY8A7yV7KhjQOpb83hGgGfId/aQa4TOvwyzn2PuswW2gPCYEL/nEAiSVpdOj1lXw==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-async-function@2.0.0:
    resolution: {integrity: sha512-Y1JXKrfykRJGdlDwdKlLpLyMIiWqWvuSd17TvZk68PLAOGOoF4Xyav1z0Xhoi+gCYjZVeC5SI+hYFOfvXmGRCA==}
    engines: {node: '>= 0.4'}

  is-bigint@1.0.4:
    resolution: {integrity: sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-boolean-object@1.1.2:
    resolution: {integrity: sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==}
    engines: {node: '>= 0.4'}

  is-builtin-module@3.2.1:
    resolution: {integrity: sha512-BSLE3HnV2syZ0FK0iMA/yUGplUeMmNz4AW5fnTunbCIqZi4vG3WjJT9FHMy5D69xmAYBHXQhJdALdpwVxV501A==}
    engines: {node: '>=6'}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.14.0:
    resolution: {integrity: sha512-a5dFJih5ZLYlRtDc0dZWP7RiKr6xIKzmn/oAYCDvdLThadVgyJwlaoQPmRtMSpz+rk0OGAgIu+TcM9HUF0fk1A==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.1:
    resolution: {integrity: sha512-AHkaJrsUVW6wq6JS8y3JnM/GJF/9cf+k20+iDzlSaJrinEo5+7vRiteOSwBhHRiAyQATN1AmY4hwzxJKPmYf+w==}
    engines: {node: '>= 0.4'}

  is-date-object@1.0.5:
    resolution: {integrity: sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-finalizationregistry@1.0.2:
    resolution: {integrity: sha512-0by5vtUJs8iFQb5TYUHHPudOR+qXYIMKtiUzvLIZITZUjknFmziyBJuLhVRc+Ds0dREFlskDNJKYIdIzu/9pfw==}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-fullwidth-code-point@4.0.0:
    resolution: {integrity: sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==}
    engines: {node: '>=12'}

  is-fullwidth-code-point@5.0.0:
    resolution: {integrity: sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==}
    engines: {node: '>=18'}

  is-generator-fn@2.1.0:
    resolution: {integrity: sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==}
    engines: {node: '>=6'}

  is-generator-function@1.0.10:
    resolution: {integrity: sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-interactive@1.0.0:
    resolution: {integrity: sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==}
    engines: {node: '>=8'}

  is-lower-case@2.0.2:
    resolution: {integrity: sha512-bVcMJy4X5Og6VZfdOZstSexlEy20Sr0k/p/b2IlQJlfdKAQuMpiv5w2Ccxb8sKdRUNAG1PnHVHjFSdRDVS6NlQ==}

  is-map@2.0.3:
    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
    engines: {node: '>= 0.4'}

  is-negative-zero@2.0.3:
    resolution: {integrity: sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==}
    engines: {node: '>= 0.4'}

  is-number-object@1.0.7:
    resolution: {integrity: sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  is-regex@1.1.4:
    resolution: {integrity: sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==}
    engines: {node: '>= 0.4'}

  is-relative@1.0.0:
    resolution: {integrity: sha512-Kw/ReK0iqwKeu0MITLFuj0jbPAmEiOsIwyIXvvbfa6QfmN9pkD1M+8pdk7Rl/dTKbH34/XBFMbgD4iMJhLQbGA==}
    engines: {node: '>=0.10.0'}

  is-set@2.0.3:
    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.3:
    resolution: {integrity: sha512-nA2hv5XIhLR3uVzDDfCIknerhx8XUKnstuOERPNNIinXG7v9u+ohXF67vxm4TPTEPU6lm61ZkwP3c9PCB97rhg==}
    engines: {node: '>= 0.4'}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-stream@3.0.0:
    resolution: {integrity: sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  is-string@1.0.7:
    resolution: {integrity: sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==}
    engines: {node: '>= 0.4'}

  is-symbol@1.0.4:
    resolution: {integrity: sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.13:
    resolution: {integrity: sha512-uZ25/bUAlUY5fR4OKT4rZQEBrzQWYV9ZJYGGsUmEJ6thodVJ1HX64ePQ6Z0qPWP+m+Uq6e9UugrE38jeYsDSMw==}
    engines: {node: '>= 0.4'}

  is-unc-path@1.0.0:
    resolution: {integrity: sha512-mrGpVd0fs7WWLfVsStvgF6iEJnbjDFZh9/emhRDcGWTduTfNHd9CHeUwH3gYIjdbwo4On6hunkztwOaAw0yllQ==}
    engines: {node: '>=0.10.0'}

  is-unicode-supported@0.1.0:
    resolution: {integrity: sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==}
    engines: {node: '>=10'}

  is-upper-case@2.0.2:
    resolution: {integrity: sha512-44pxmxAvnnAOwBg4tHPnkfvgjPwbc5QIsSstNU+YcJ1ovxVzCWpSGosPJOZh/a1tdl81fbgnLc9LLv+x2ywbPQ==}

  is-weakmap@2.0.2:
    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
    engines: {node: '>= 0.4'}

  is-weakref@1.0.2:
    resolution: {integrity: sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==}

  is-weakset@2.0.3:
    resolution: {integrity: sha512-LvIm3/KWzS9oRFHugab7d+M/GcBXuXX5xZkzPmN+NxihdQlZUQ4dWuSV1xR/sq6upL1TJEDrfBgRepHFdBtSNQ==}
    engines: {node: '>= 0.4'}

  is-what@4.1.16:
    resolution: {integrity: sha512-ZhMwEosbFJkA0YhFnNDgTM4ZxDRsS6HqTo7qsZM08fehyRYIYa0yHu5R6mgo1n/8MgaPBXiPimPD77baVFYg+A==}
    engines: {node: '>=12.13'}

  is-windows@1.0.2:
    resolution: {integrity: sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==}
    engines: {node: '>=0.10.0'}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  isomorphic-ws@5.0.0:
    resolution: {integrity: sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==}
    peerDependencies:
      ws: '*'

  istanbul-lib-coverage@3.2.2:
    resolution: {integrity: sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@5.2.1:
    resolution: {integrity: sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@6.0.3:
    resolution: {integrity: sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==}
    engines: {node: '>=10'}

  istanbul-lib-report@3.0.1:
    resolution: {integrity: sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==}
    engines: {node: '>=10'}

  istanbul-lib-source-maps@4.0.1:
    resolution: {integrity: sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==}
    engines: {node: '>=10'}

  istanbul-reports@3.1.7:
    resolution: {integrity: sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==}
    engines: {node: '>=8'}

  iterall@1.3.0:
    resolution: {integrity: sha512-QZ9qOMdF+QLHxy1QIpUHUU1D5pS2CG2P69LF6L6CPjPYA/XMOmKV3PZpawHoAjHNyB0swdVTRxdYT4tbBbxqwg==}

  iterare@1.2.1:
    resolution: {integrity: sha512-RKYVTCjAnRthyJes037NX/IiqeidgN1xc3j1RjFfECFp28A1GVwK9nA+i0rJPaHqSZwygLzRnFlzUuHFoWWy+Q==}
    engines: {node: '>=6'}

  iterator.prototype@1.1.2:
    resolution: {integrity: sha512-DR33HMMr8EzwuRL8Y9D3u2BMj8+RqSE850jfGu59kS7tbmPLzGkZmVSfyCFSDxuZiEY6Rzt3T2NA/qU+NwVj1w==}

  jackspeak@2.3.6:
    resolution: {integrity: sha512-N3yCS/NegsOBokc8GAdM8UcmfsKiSS8cipheD/nivzr700H+nsMOxJjQnvwOcRYVuFkdH0wGUvW2WbXGmrZGbQ==}
    engines: {node: '>=14'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jake@10.9.2:
    resolution: {integrity: sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA==}
    engines: {node: '>=10'}
    hasBin: true

  javascript-stringify@2.1.0:
    resolution: {integrity: sha512-JVAfqNPTvNq3sB/VHQJAFxN/sPgKnsKrCwyRt15zwNCdrMMJDdcEOdubuy+DuJYYdm0ox1J4uzEuYKkN+9yhVg==}

  jest-changed-files@29.7.0:
    resolution: {integrity: sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-circus@29.7.0:
    resolution: {integrity: sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-cli@29.7.0:
    resolution: {integrity: sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  jest-config@29.7.0:
    resolution: {integrity: sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@types/node': '*'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      '@types/node':
        optional: true
      ts-node:
        optional: true

  jest-diff@29.7.0:
    resolution: {integrity: sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-docblock@29.7.0:
    resolution: {integrity: sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-each@29.7.0:
    resolution: {integrity: sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-environment-node@29.7.0:
    resolution: {integrity: sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-get-type@29.6.3:
    resolution: {integrity: sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-haste-map@29.7.0:
    resolution: {integrity: sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-leak-detector@29.7.0:
    resolution: {integrity: sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-matcher-utils@29.7.0:
    resolution: {integrity: sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-message-util@29.7.0:
    resolution: {integrity: sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-mock@29.7.0:
    resolution: {integrity: sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-pnp-resolver@1.2.3:
    resolution: {integrity: sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==}
    engines: {node: '>=6'}
    peerDependencies:
      jest-resolve: '*'
    peerDependenciesMeta:
      jest-resolve:
        optional: true

  jest-regex-util@29.6.3:
    resolution: {integrity: sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve-dependencies@29.7.0:
    resolution: {integrity: sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve@29.7.0:
    resolution: {integrity: sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runner@29.7.0:
    resolution: {integrity: sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runtime@29.7.0:
    resolution: {integrity: sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-snapshot@29.7.0:
    resolution: {integrity: sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-util@29.7.0:
    resolution: {integrity: sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-validate@29.7.0:
    resolution: {integrity: sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-watcher@29.7.0:
    resolution: {integrity: sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-worker@27.5.1:
    resolution: {integrity: sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==}
    engines: {node: '>= 10.13.0'}

  jest-worker@29.7.0:
    resolution: {integrity: sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest@29.7.0:
    resolution: {integrity: sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  jiti@1.21.6:
    resolution: {integrity: sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==}
    hasBin: true

  jose@5.6.3:
    resolution: {integrity: sha512-1Jh//hEEwMhNYPDDLwXHa2ePWgWiFNNUadVmguAAw2IJ6sj9mNxV5tGXJNqlMkJAybF6Lgw1mISDxTePP/187g==}

  js-sha256@0.10.1:
    resolution: {integrity: sha512-5obBtsz9301ULlsgggLg542s/jqtddfOpV5KJc4hajc9JV8GeY2gZHSVpYBn4nWqAUTJ9v+xwtbJ1mIBgIH5Vw==}

  js-sha256@0.11.0:
    resolution: {integrity: sha512-6xNlKayMZvds9h1Y1VWc0fQHQ82BxTXizWPEtEeGvmOUYpBRy4gbWroHLpzowe6xiQhHpelCQiE7HEdznyBL9Q==}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-xxhash@1.0.4:
    resolution: {integrity: sha512-S/6Oo7ruxx5k8m4qlMnbpwQdJjRsvvfcIhIk1dA9c5y5GNhYHKYKu9krEK3QgBax6CxJuf4gRL2opgLkdzWIKg==}
    engines: {node: '>=8.0.0'}

  js-yaml@3.14.1:
    resolution: {integrity: sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==}
    hasBin: true

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsbi@3.1.3:
    resolution: {integrity: sha512-nBJqA0C6Qns+ZxurbEoIR56wyjiUszpNy70FHvxO5ervMoCbZVE3z3kxr5nKGhlxr/9MhKTSUBs7cAwwuf3g9w==}

  jsbi@4.3.0:
    resolution: {integrity: sha512-SnZNcinB4RIcnEyZqFPdGPVgrg2AcnykiBy0sHVJQKHYeaLUvi3Exj+iaPpLnFVkDPZIV4U0yvgC9/R4uEAZ9g==}

  jsesc@0.5.0:
    resolution: {integrity: sha512-uZz5UnB7u4T9LvwmFqXii7pZSouaRPorGs5who1Ip7VO0wxanFvBL7GkM6dTHlgX+jhBApRetaWpnDabOeTcnA==}
    hasBin: true

  jsesc@2.5.2:
    resolution: {integrity: sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==}
    engines: {node: '>=4'}
    hasBin: true

  jsesc@3.0.2:
    resolution: {integrity: sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-schema-ref-resolver@1.0.1:
    resolution: {integrity: sha512-EJAj1pgHc1hxF6vo2Z3s69fMjO1INq6eGHXZ8Z6wCQeldCuwxGK9Sxf4/cScGn3FZubCVUehfWtcDM/PLteCQw==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema-traverse@1.0.0:
    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json-to-pretty-yaml@1.2.2:
    resolution: {integrity: sha512-rvm6hunfCcqegwYaG5T4yKJWxc9FXFgBVrcTZ4XfSVRwa5HA/Xs+vB/Eo9treYYHCeNM0nrSUr82V/M31Urc7A==}
    engines: {node: '>= 0.2.0'}

  json5@1.0.2:
    resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsonc-parser@3.2.1:
    resolution: {integrity: sha512-AilxAyFOAcK5wA1+LeaySVBrHsGQvUFCDWXKpZjzaL0PqW+xfBOttn8GNtWKFWqneyMZj41MWF9Kl6iPWLwgOA==}

  jsonc-parser@3.3.1:
    resolution: {integrity: sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==}

  jsonfile@6.1.0:
    resolution: {integrity: sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==}

  jsx-ast-utils@3.3.5:
    resolution: {integrity: sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==}
    engines: {node: '>=4.0'}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kleur@3.0.3:
    resolution: {integrity: sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==}
    engines: {node: '>=6'}

  kleur@4.1.5:
    resolution: {integrity: sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==}
    engines: {node: '>=6'}

  klona@2.0.6:
    resolution: {integrity: sha512-dhG34DXATL5hSxJbIexCft8FChFXtmskoZYnoPWjXQuebWYCNkVeV3KkGegCK9CP1oswI/vQibS2GY7Em/sJJA==}
    engines: {node: '>= 8'}

  language-subtag-registry@0.3.23:
    resolution: {integrity: sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==}

  language-tags@1.0.9:
    resolution: {integrity: sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==}
    engines: {node: '>=0.10'}

  leven@3.1.0:
    resolution: {integrity: sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==}
    engines: {node: '>=6'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  light-my-request@5.13.0:
    resolution: {integrity: sha512-9IjUN9ZyCS9pTG+KqTDEQo68Sui2lHsYBrfMyVUTTZ3XhH8PMZq7xO94Kr+eP9dhi/kcKsx4N41p2IXEBil1pQ==}

  light-my-request@6.0.0:
    resolution: {integrity: sha512-kFkFXrmKCL0EEeOmJybMH5amWFd+AFvlvMlvFTRxCUwbhfapZqDmeLMPoWihntnYY6JpoQDE9k+vOzObF1fDqg==}

  lightningcss-darwin-arm64@1.25.1:
    resolution: {integrity: sha512-G4Dcvv85bs5NLENcu/s1f7ehzE3D5ThnlWSDwE190tWXRQCQaqwcuHe+MGSVI/slm0XrxnaayXY+cNl3cSricw==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [darwin]

  lightningcss-darwin-x64@1.25.1:
    resolution: {integrity: sha512-dYWuCzzfqRueDSmto6YU5SoGHvZTMU1Em9xvhcdROpmtOQLorurUZz8+xFxZ51lCO2LnYbfdjZ/gCqWEkwixNg==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [darwin]

  lightningcss-freebsd-x64@1.25.1:
    resolution: {integrity: sha512-hXoy2s9A3KVNAIoKz+Fp6bNeY+h9c3tkcx1J3+pS48CqAt+5bI/R/YY4hxGL57fWAIquRjGKW50arltD6iRt/w==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [freebsd]

  lightningcss-linux-arm-gnueabihf@1.25.1:
    resolution: {integrity: sha512-tWyMgHFlHlp1e5iW3EpqvH5MvsgoN7ZkylBbG2R2LWxnvH3FuWCJOhtGcYx9Ks0Kv0eZOBud789odkYLhyf1ng==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm]
    os: [linux]

  lightningcss-linux-arm64-gnu@1.25.1:
    resolution: {integrity: sha512-Xjxsx286OT9/XSnVLIsFEDyDipqe4BcLeB4pXQ/FEA5+2uWCCuAEarUNQumRucnj7k6ftkAHUEph5r821KBccQ==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [linux]

  lightningcss-linux-arm64-musl@1.25.1:
    resolution: {integrity: sha512-IhxVFJoTW8wq6yLvxdPvyHv4NjzcpN1B7gjxrY3uaykQNXPHNIpChLB52+wfH+yS58zm1PL4LemUp8u9Cfp6Bw==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [linux]

  lightningcss-linux-x64-gnu@1.25.1:
    resolution: {integrity: sha512-RXIaru79KrREPEd6WLXfKfIp4QzoppZvD3x7vuTKkDA64PwTzKJ2jaC43RZHRt8BmyIkRRlmywNhTRMbmkPYpA==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [linux]

  lightningcss-linux-x64-musl@1.25.1:
    resolution: {integrity: sha512-TdcNqFsAENEEFr8fJWg0Y4fZ/nwuqTRsIr7W7t2wmDUlA8eSXVepeeONYcb+gtTj1RaXn/WgNLB45SFkz+XBZA==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [linux]

  lightningcss-win32-x64-msvc@1.25.1:
    resolution: {integrity: sha512-9KZZkmmy9oGDSrnyHuxP6iMhbsgChUiu/NSgOx+U1I/wTngBStDf2i2aGRCHvFqj19HqqBEI4WuGVQBa2V6e0A==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [win32]

  lightningcss@1.25.1:
    resolution: {integrity: sha512-V0RMVZzK1+rCHpymRv4URK2lNhIRyO8g7U7zOFwVAhJuat74HtkjIQpQRKNCwFEYkRGpafOpmXXLoaoBcyVtBg==}
    engines: {node: '>= 12.0.0'}

  lilconfig@3.1.2:
    resolution: {integrity: sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  lint-staged@15.2.8:
    resolution: {integrity: sha512-PUWFf2zQzsd9EFU+kM1d7UP+AZDbKFKuj+9JNVTBkhUFhbg4MAt6WfyMMwBfM4lYqd4D2Jwac5iuTu9rVj4zCQ==}
    engines: {node: '>=18.12.0'}
    hasBin: true

  listr2@4.0.5:
    resolution: {integrity: sha512-juGHV1doQdpNT3GSTs9IUN43QJb7KHdF9uqg7Vufs/tG9VTzpFphqF4pm/ICdAABGQxsyNn9CiYA3StkI6jpwA==}
    engines: {node: '>=12'}
    peerDependencies:
      enquirer: '>= 2.3.0 < 3'
    peerDependenciesMeta:
      enquirer:
        optional: true

  listr2@8.2.4:
    resolution: {integrity: sha512-opevsywziHd3zHCVQGAj8zu+Z3yHNkkoYhWIGnq54RrCVwLz0MozotJEDnKsIBLvkfLGN6BLOyAeRrYI0pKA4g==}
    engines: {node: '>=18.0.0'}

  load-yaml-file@0.2.0:
    resolution: {integrity: sha512-OfCBkGEw4nN6JLtgRidPX6QxjBQGQf72q3si2uvqyFEMbycSFFHwAZeXx6cJgFM9wmLrf9zBwCP3Ivqa+LLZPw==}
    engines: {node: '>=6'}

  loader-runner@4.3.0:
    resolution: {integrity: sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==}
    engines: {node: '>=6.11.5'}

  locate-path@3.0.0:
    resolution: {integrity: sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==}
    engines: {node: '>=6'}

  locate-path@5.0.0:
    resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
    engines: {node: '>=8'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash-es@4.17.21:
    resolution: {integrity: sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw==}

  lodash.camelcase@4.3.0:
    resolution: {integrity: sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==}

  lodash.clonedeep@4.5.0:
    resolution: {integrity: sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==}

  lodash.debounce@4.0.8:
    resolution: {integrity: sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==}

  lodash.defaults@4.2.0:
    resolution: {integrity: sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==}

  lodash.get@4.4.2:
    resolution: {integrity: sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ==}

  lodash.isarguments@3.1.0:
    resolution: {integrity: sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg==}

  lodash.isequal@4.5.0:
    resolution: {integrity: sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==}

  lodash.ismatch@4.4.0:
    resolution: {integrity: sha512-fPMfXjGQEV9Xsq/8MTSgUf255gawYRbjwMyDbcvDhXgV7enSZA0hynz6vMPnpAb5iONEzBHBPsT+0zes5Z301g==}

  lodash.memoize@4.1.2:
    resolution: {integrity: sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash.omit@4.5.0:
    resolution: {integrity: sha512-XeqSp49hNGmlkj2EJlfrQFIzQ6lXdNro9sddtQzcJY8QaoC2GO0DT7xaIokHeyM+mIT0mPMlPvkYzg2xCuHdZg==}

  lodash.snakecase@4.1.1:
    resolution: {integrity: sha512-QZ1d4xoBHYUeuouhEq3lk3Uq7ldgyFXGBhg04+oRLnIz8o9T65Eh+8YdroUwn846zchkA9yDsDl5CVVaV2nqYw==}

  lodash.sortby@4.7.0:
    resolution: {integrity: sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==}

  lodash.uniq@4.5.0:
    resolution: {integrity: sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  log-symbols@4.1.0:
    resolution: {integrity: sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==}
    engines: {node: '>=10'}

  log-update@4.0.0:
    resolution: {integrity: sha512-9fkkDevMefjg0mmzWFBW8YkFP91OrizzkW3diF7CpG+S2EYdy4+TVfGwz1zeF8x7hCx1ovSPTOE9Ngib74qqUg==}
    engines: {node: '>=10'}

  log-update@6.1.0:
    resolution: {integrity: sha512-9ie8ItPR6tjY5uYJh8K/Zrv/RMZ5VOlOWvtZdEHYSTFKZfIBPQa9tOAEeAWhd+AnIneLJ22w5fjOYtoutpWq5w==}
    engines: {node: '>=18'}

  loglevel@1.9.2:
    resolution: {integrity: sha512-HgMmCqIJSAKqo68l0rS2AanEWfkxaZ5wNiEFb5ggm08lDs9Xl2KxBlX3PTcaD2chBM1gXAYf491/M2Rv8Jwayg==}
    engines: {node: '>= 0.6.0'}

  long@4.0.0:
    resolution: {integrity: sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA==}

  look-it-up@2.1.0:
    resolution: {integrity: sha512-nMoGWW2HurtuJf6XAL56FWTDCWLOTSsanrgwOyaR5Y4e3zfG5N/0cU5xWZSEU3tBxhQugRbV1xL9jb+ug7yZww==}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  lower-case-first@2.0.2:
    resolution: {integrity: sha512-EVm/rR94FJTZi3zefZ82fLWab+GX14LJN4HrWBcuo6Evmsl9hEfnqxgcHCKb9q+mNf6EVdsjx/qucYFIIB84pg==}

  lower-case@2.0.2:
    resolution: {integrity: sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lru-cache@7.13.1:
    resolution: {integrity: sha512-CHqbAq7NFlW3RSnoWXLJBxCWaZVBrfa9UEHId2M3AW8iEBurbqduNexEUCGc3SHc6iCYXNJCDi903LajSVAEPQ==}
    engines: {node: '>=12'}

  lru-cache@7.18.3:
    resolution: {integrity: sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==}
    engines: {node: '>=12'}

  luxon@3.4.4:
    resolution: {integrity: sha512-zobTr7akeGHnv7eBOXcRgMeCP6+uyYsczwmeRCauvpvaAltgNyTbLH/+VaEAPUeWBT+1GuNmz4wC/6jtQzbbVA==}
    engines: {node: '>=12'}

  luxon@3.5.0:
    resolution: {integrity: sha512-rh+Zjr6DNfUYR3bPwJEnuwDdqMbxZW7LOQfUN4B54+Cl+0o5zaU9RJ6bcidfDtC1cWCZXQ+nvX8bf6bAji37QQ==}
    engines: {node: '>=12'}

  magic-string@0.30.10:
    resolution: {integrity: sha512-iIRwTIf0QKV3UAnYK4PU8uiEc4SRh5jX0mwpIwETPpHdhVM4f53RSwS/vXvN1JhGX+Cs7B8qIq3d6AH49O5fAQ==}

  magic-string@0.30.8:
    resolution: {integrity: sha512-ISQTe55T2ao7XtlAStud6qwYPZjE4GK1S/BeVPus4jrq6JuOnQ00YKQC581RWhR122W7msZV263KzVeLoqidyQ==}
    engines: {node: '>=12'}

  make-dir@4.0.0:
    resolution: {integrity: sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==}
    engines: {node: '>=10'}

  make-error@1.3.6:
    resolution: {integrity: sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==}

  makeerror@1.0.12:
    resolution: {integrity: sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==}

  map-cache@0.2.2:
    resolution: {integrity: sha512-8y/eV9QQZCiyn1SprXSrCmqJN0yNRATe+PO8ztwqrvrbdRLA3eYJF0yaR0YayLWkMbsQSKWS9N2gPcGEc4UsZg==}
    engines: {node: '>=0.10.0'}

  map-obj@4.3.0:
    resolution: {integrity: sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ==}
    engines: {node: '>=8'}

  md5.js@1.3.5:
    resolution: {integrity: sha512-xitP+WxNPcTTOgnTJcrhM0xvdPepipPSf3I8EIpGKeFLjt3PlJLIDG3u8EX53ZIubkb+5U2+3rELYpEhHhzdkg==}

  mdn-data@2.0.28:
    resolution: {integrity: sha512-aylIc7Z9y4yzHYAJNuESG3hfhC+0Ibp/MAMiaOZgNv4pmEdFyfZhhhny4MNiAfWdBQ1RQ2mfDWmM1x8SvGyp8g==}

  mdn-data@2.0.30:
    resolution: {integrity: sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==}

  media-typer@0.3.0:
    resolution: {integrity: sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==}
    engines: {node: '>= 0.6'}

  memfs@3.5.3:
    resolution: {integrity: sha512-UERzLsxzllchadvbPs5aolHh65ISpKpM+ccLbOJ8/vvpBKmAWf+la7dXFy7Mr0ySHbdHrFv5kGFCUHHe6GFEmw==}
    engines: {node: '>= 4.0.0'}

  merge-anything@5.1.7:
    resolution: {integrity: sha512-eRtbOb1N5iyH0tkQDAoQ4Ipsp/5qSR79Dzrz8hEPxRX10RWWR/iQXdoKmBSRCThY1Fh5EhISDtpSc93fpxUniQ==}
    engines: {node: '>=12.13'}

  merge-descriptors@1.0.1:
    resolution: {integrity: sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  meros@1.3.0:
    resolution: {integrity: sha512-2BNGOimxEz5hmjUG2FwoxCt5HN7BXdaWyFqEwxPTrJzVdABtrL4TiHTcsWSFAxPQ/tOnEaQEJh3qWq71QRMY+w==}
    engines: {node: '>=13'}
    peerDependencies:
      '@types/node': '>=13'
    peerDependenciesMeta:
      '@types/node':
        optional: true

  methods@1.1.2:
    resolution: {integrity: sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==}
    engines: {node: '>= 0.6'}

  microdiff@1.3.2:
    resolution: {integrity: sha512-pKy60S2febliZIbwdfEQKTtL5bLNxOyiRRmD400gueYl9XcHyNGxzHSlJWn9IMHwYXT0yohPYL08+bGozVk8cQ==}

  micromatch@4.0.2:
    resolution: {integrity: sha512-y7FpHSbMUMoyPbYUSzO6PaZ6FyRnQOpHuKwbo1G+Knck95XVU4QAiKdGEnj5wwoS7PlOgthX/09u5iFJ+aYf5Q==}
    engines: {node: '>=8'}

  micromatch@4.0.7:
    resolution: {integrity: sha512-LPP/3KorzCwBxfeUuZmaR6bG2kdeHSbe0P2tY3FLRU4vYrjYz5hI4QZwV0njUx3jeuKe67YukQ1LSPZBKDqO/Q==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mime@1.6.0:
    resolution: {integrity: sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==}
    engines: {node: '>=4'}
    hasBin: true

  mime@2.6.0:
    resolution: {integrity: sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==}
    engines: {node: '>=4.0.0'}
    hasBin: true

  mimic-fn@2.1.0:
    resolution: {integrity: sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==}
    engines: {node: '>=6'}

  mimic-fn@4.0.0:
    resolution: {integrity: sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==}
    engines: {node: '>=12'}

  mimic-function@5.0.1:
    resolution: {integrity: sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==}
    engines: {node: '>=18'}

  min-indent@1.0.1:
    resolution: {integrity: sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==}
    engines: {node: '>=4'}

  minimalistic-assert@1.0.1:
    resolution: {integrity: sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==}

  minimalistic-crypto-utils@1.0.1:
    resolution: {integrity: sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg==}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@4.2.3:
    resolution: {integrity: sha512-lIUdtK5hdofgCTu3aT0sOaHsYR37viUuIc0rwnnDXImbwFRcumyLMeZaM0t0I/fgxS6s6JMfu0rLD1Wz9pv1ng==}
    engines: {node: '>=10'}

  minimatch@5.1.6:
    resolution: {integrity: sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==}
    engines: {node: '>=10'}

  minimatch@9.0.3:
    resolution: {integrity: sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  mkdirp@0.5.6:
    resolution: {integrity: sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==}
    hasBin: true

  mkdirp@3.0.1:
    resolution: {integrity: sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==}
    engines: {node: '>=10'}
    hasBin: true

  mlly@1.7.1:
    resolution: {integrity: sha512-rrVRZRELyQzrIUAVMHxP97kv+G786pHmOKzuFII8zDYahFBS7qnHh2AlYSl1GAHhaMPCz6/oHjVMcfFYgFYHgA==}

  mnemonist@0.39.6:
    resolution: {integrity: sha512-A/0v5Z59y63US00cRSLiloEIw3t5G+MiKz4BhX21FI+YBJXBOGW0ohFxTxO08dsOYlzxo87T7vGfZKYp2bcAWA==}

  module-details-from-path@1.0.3:
    resolution: {integrity: sha512-ySViT69/76t8VhE1xXHK6Ch4NcDd26gx0MzKXLO+F7NOtnqH68d9zF94nT8ZWSxXh8ELOERsnJO/sWt1xZYw5A==}

  moo@0.5.2:
    resolution: {integrity: sha512-iSAJLHYKnX41mKcJKjqvnAN9sf0LMDTXDEvFv+ffuRR9a1MIuXLjMNL6EsnDHSkKLTWNqQQ5uo61P4EbU4NU+Q==}

  ms@2.0.0:
    resolution: {integrity: sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==}

  ms@2.1.2:
    resolution: {integrity: sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  msgpackr-extract@3.0.3:
    resolution: {integrity: sha512-P0efT1C9jIdVRefqjzOQ9Xml57zpOXnIuS+csaB4MdZbTdmGDLo8XhzBG1N7aO11gKDDkJvBLULeFTo46wwreA==}
    hasBin: true

  msgpackr@1.11.0:
    resolution: {integrity: sha512-I8qXuuALqJe5laEBYoFykChhSXLikZmUhccjGsPuSJ/7uPip2TJ7lwdIQwWSAi0jGZDXv4WOP8Qg65QZRuXxXw==}

  multer@1.4.4-lts.1:
    resolution: {integrity: sha512-WeSGziVj6+Z2/MwQo3GvqzgR+9Uc+qt8SwHKh3gvNPiISKfsMfG4SvCOFYlxxgkXt7yIV2i1yczehm0EOKIxIg==}
    engines: {node: '>= 6.0.0'}

  mute-stream@0.0.8:
    resolution: {integrity: sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==}

  mute-stream@1.0.0:
    resolution: {integrity: sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  nanoassert@2.0.0:
    resolution: {integrity: sha512-7vO7n28+aYO4J+8w96AzhmU8G+Y/xpPDJz/se19ICsqj/momRbb9mh9ZUtkoJ5X3nTnPdhEJyc0qnM6yAsHBaA==}

  nanoid@3.3.7:
    resolution: {integrity: sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  negotiator@0.6.3:
    resolution: {integrity: sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==}
    engines: {node: '>= 0.6'}

  neo-async@2.6.2:
    resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}

  next-nprogress-bar@2.3.13:
    resolution: {integrity: sha512-eJQDvPSUwZ2yRyNKqAH6xTFI4RtIFvs+qtY8essTtfooyaxLGmkanEO7vL83U166bullMtVpixD6FQk5SQkhMw==}

  next@14.2.4:
    resolution: {integrity: sha512-R8/V7vugY+822rsQGQCjoLhMuC9oFj9SOi4Cl4b2wjDrseD0LRZ10W7R6Czo4w9ZznVSshKjuIomsRjvm9EKJQ==}
    engines: {node: '>=18.17.0'}
    hasBin: true
    peerDependencies:
      '@opentelemetry/api': ^1.1.0
      '@playwright/test': ^1.41.2
      react: ^18.2.0
      react-dom: ^18.2.0
      sass: ^1.3.0
    peerDependenciesMeta:
      '@opentelemetry/api':
        optional: true
      '@playwright/test':
        optional: true
      sass:
        optional: true

  no-case@3.0.4:
    resolution: {integrity: sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==}

  node-abi@3.65.0:
    resolution: {integrity: sha512-ThjYBfoDNr08AWx6hGaRbfPwxKV9kVzAzOzlLKbk2CuqXE2xnCh+cbAGnwM3t8Lq4v9rUB7VfondlkBckcJrVA==}
    engines: {node: '>=10'}

  node-abort-controller@3.1.1:
    resolution: {integrity: sha512-AGK2yQKIjRuqnc6VkX2Xj5d+QW8xZ87pa1UK6yA6ouUyuxfHuMP6umE5QK7UmTeOAymo+Zx1Fxiuw9rVx8taHQ==}

  node-addon-api@7.1.1:
    resolution: {integrity: sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==}

  node-emoji@1.11.0:
    resolution: {integrity: sha512-wo2DpQkQp7Sjm2A0cq+sN7EHKO6Sl0ctXeBdFZrL9T9+UywORbufTcTZxom8YqpLQt/FqNMUkOpkZrJVYSKD3A==}

  node-eval@2.0.0:
    resolution: {integrity: sha512-Ap+L9HznXAVeJj3TJ1op6M6bg5xtTq8L5CU/PJxtkhea/DrIxdTknGKIECKd/v/Lgql95iuMAYvIzBNd0pmcMg==}
    engines: {node: '>= 4'}

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-gyp-build-optional-packages@5.2.2:
    resolution: {integrity: sha512-s+w+rBWnpTMwSFbaE0UXsRlg7hU4FjekKU4eyAih5T8nJuNZT1nNsskXpxmeqSK9UzkBl6UgRlnKc8hz8IEqOw==}
    hasBin: true

  node-gyp-build@4.8.1:
    resolution: {integrity: sha512-OSs33Z9yWr148JZcbZd5WiAXhh/n9z8TxQcdMhIOlpN9AhWpLfvVFO73+m77bBABQMaY9XSvIa+qk0jlI7Gcaw==}
    hasBin: true

  node-int64@0.4.0:
    resolution: {integrity: sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==}

  node-releases@2.0.14:
    resolution: {integrity: sha512-y10wOWt8yZpqXmOgRo77WaHEmhYQYGNA6y421PKsKYWEK8aW+cqAphborZDhqfyKrbZEN92CN1X2KbafY2s7Yw==}

  node-releases@2.0.18:
    resolution: {integrity: sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==}

  normalize-package-data@2.5.0:
    resolution: {integrity: sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==}

  normalize-path@2.1.1:
    resolution: {integrity: sha512-3pKJwH184Xo/lnH6oyP1q2pMd7HcypqqmRs91/6/i2CGtWwIKGCkOOMTm/zXbgTEWHw1uNpNi/igc3ePOYHb6w==}
    engines: {node: '>=0.10.0'}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  npm-run-path@4.0.1:
    resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
    engines: {node: '>=8'}

  npm-run-path@5.3.0:
    resolution: {integrity: sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  nprogress@0.2.0:
    resolution: {integrity: sha512-I19aIingLgR1fmhftnbWWO3dXc0hSxqHQHQb3H8m+K3TnEn/iSeTZZOyvKXWqQESMwuUVnatlCnZdLBZZt2VSA==}

  nth-check@2.1.1:
    resolution: {integrity: sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==}

  nullthrows@1.1.1:
    resolution: {integrity: sha512-2vPPEi+Z7WqML2jZYddDIfy5Dqb0r2fze2zTxNNknZaFpVHU3mFB3R+DWeJWGVx0ecvttSGlJTI+WG+8Z4cDWw==}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-inspect@1.13.2:
    resolution: {integrity: sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==}
    engines: {node: '>= 0.4'}

  object-is@1.1.6:
    resolution: {integrity: sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object-path@0.11.8:
    resolution: {integrity: sha512-YJjNZrlXJFM42wTBn6zgOJVar9KFJvzx6sTWDte8sWZF//cnjl0BxHNpfZx+ZffXX63A9q0b1zsFiBX4g4X5KA==}
    engines: {node: '>= 10.12.0'}

  object.assign@4.1.5:
    resolution: {integrity: sha512-byy+U7gp+FVwmyzKPYhW2h5l3crpmGsxl7X2s8y43IgxvG4g3QZ6CffDtsNQy1WsmZpQbO+ybo0AlW7TY6DcBQ==}
    engines: {node: '>= 0.4'}

  object.entries@1.1.8:
    resolution: {integrity: sha512-cmopxi8VwRIAw/fkijJohSfpef5PdN0pMQJN6VC/ZKvn0LIknWD8KtgY6KlQdEc4tIjcQ3HxSMmnvtzIscdaYQ==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.groupby@1.0.3:
    resolution: {integrity: sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.0:
    resolution: {integrity: sha512-yBYjY9QX2hnRmZHAjG/f13MzmBzxzYgQhFrke06TTyKY5zSTEqkOeukBzIdVA3j3ulu8Qa3MbVFShV7T2RmGtQ==}
    engines: {node: '>= 0.4'}

  obliterator@2.0.4:
    resolution: {integrity: sha512-lgHwxlxV1qIg1Eap7LgIeoBWIMFibOjbrYPIPJZcI1mmGAI2m3lNYpK12Y+GBdPQ0U1hRwSord7GIaawz962qQ==}

  on-exit-leak-free@2.1.2:
    resolution: {integrity: sha512-0eJJY6hXLGf1udHwfNftBqH+g73EU4B504nZeKpz1sYRKafAghwxEJunB2O7rDZkL4PGfsMVnTXZ2EjibbqcsA==}
    engines: {node: '>=14.0.0'}

  on-finished@2.4.1:
    resolution: {integrity: sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==}
    engines: {node: '>= 0.8'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  onetime@5.1.2:
    resolution: {integrity: sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==}
    engines: {node: '>=6'}

  onetime@6.0.0:
    resolution: {integrity: sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==}
    engines: {node: '>=12'}

  onetime@7.0.0:
    resolution: {integrity: sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==}
    engines: {node: '>=18'}

  opentelemetry-instrumentation-fetch-node@1.2.3:
    resolution: {integrity: sha512-Qb11T7KvoCevMaSeuamcLsAD+pZnavkhDnlVL0kRozfhl42dKG5Q3anUklAFKJZjY3twLR+BnRa6DlwwkIE/+A==}
    engines: {node: '>18.0.0'}
    peerDependencies:
      '@opentelemetry/api': ^1.6.0

  optimism@0.18.0:
    resolution: {integrity: sha512-tGn8+REwLRNFnb9WmcY5IfpOqeX2kpaYJ1s6Ae3mn12AeydLkR3j+jSCmVQFoXqU8D41PAJ1RG1rCRNWmNZVmQ==}

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  ora@5.4.1:
    resolution: {integrity: sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==}
    engines: {node: '>=10'}

  os-tmpdir@1.0.2:
    resolution: {integrity: sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==}
    engines: {node: '>=0.10.0'}

  outdent@0.8.0:
    resolution: {integrity: sha512-KiOAIsdpUTcAXuykya5fnVVT+/5uS0Q1mrkRHcF89tpieSmY33O/tmc54CqwA+bfhbtEfZUNLHaPUiB9X3jt1A==}

  p-limit@2.3.0:
    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
    engines: {node: '>=6'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@3.0.0:
    resolution: {integrity: sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==}
    engines: {node: '>=6'}

  p-locate@4.1.0:
    resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
    engines: {node: '>=8'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-map@4.0.0:
    resolution: {integrity: sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==}
    engines: {node: '>=10'}

  p-try@2.2.0:
    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
    engines: {node: '>=6'}

  package-json-from-dist@1.0.0:
    resolution: {integrity: sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw==}

  param-case@3.0.4:
    resolution: {integrity: sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parent-module@2.0.0:
    resolution: {integrity: sha512-uo0Z9JJeWzv8BG+tRcapBKNJ0dro9cLyczGzulS6EfeyAdeC9sbojtW6XwvYxJkEne9En+J2XEl4zyglVeIwFg==}
    engines: {node: '>=8'}

  parse-filepath@1.0.2:
    resolution: {integrity: sha512-FwdRXKCohSVeXqwtYonZTXtbGJKrn+HNyWDYVcp5yuJlesTwNH4rsmRZ+GrKAPJ5bLpRxESMeS+Rl0VCHRvB2Q==}
    engines: {node: '>=0.8'}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  parseurl@1.3.3:
    resolution: {integrity: sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==}
    engines: {node: '>= 0.8'}

  pascal-case@3.1.2:
    resolution: {integrity: sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==}

  path-browserify@1.0.1:
    resolution: {integrity: sha512-b7uo2UCUOYZcnF/3ID0lulOJi/bafxa1xPe7ZPsammBSpjSWQkjNxlt635YGS2MiR9GjvuXCtz2emr3jbsz98g==}

  path-case@3.0.4:
    resolution: {integrity: sha512-qO4qCFjXqVTrcbPt/hQfhTQ+VhFsqNKOPtytgNKkKxSoEp3XPUQ8ObFuePylOIok5gjn69ry8XiULxCwot3Wfg==}

  path-exists@3.0.0:
    resolution: {integrity: sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==}
    engines: {node: '>=4'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-key@4.0.0:
    resolution: {integrity: sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==}
    engines: {node: '>=12'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-root-regex@0.1.2:
    resolution: {integrity: sha512-4GlJ6rZDhQZFE0DPVKh0e9jmZ5egZfxTkp7bcRDuPlJXbAwhxcl2dINPUAsjLdejqaLsCeg8axcLjIbvBjN4pQ==}
    engines: {node: '>=0.10.0'}

  path-root@0.1.1:
    resolution: {integrity: sha512-QLcPegTHF11axjfojBIoDygmS2E3Lf+8+jI6wOVmNVenrKSo3mFdSGiIgdSHenczw3wPtlVMQaFVwGmM7BJdtg==}
    engines: {node: '>=0.10.0'}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-to-regexp@0.1.7:
    resolution: {integrity: sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==}

  path-to-regexp@3.2.0:
    resolution: {integrity: sha512-jczvQbCUS7XmS7o+y1aEO9OBVFeZBQ1MDSEqmO7xSoPgOPoowY/SxLpZ6Vh97/8qHZOteiCKb7gkG9gA2ZUxJA==}

  path-to-regexp@3.3.0:
    resolution: {integrity: sha512-qyCH421YQPS2WFDxDjftfc1ZR5WKQzVzqsp4n9M2kQhVOo/ByahFoUNJfl58kOcEGfQ//7weFTDhm+ss8Ecxgw==}

  path-to-regexp@6.3.0:
    resolution: {integrity: sha512-Yhpw4T9C6hPpgPeA28us07OJeqZ5EzQTkbfwuhsUg0c237RomFoETJgmp2sa3F/41gfLE6G5cqcYwznmeEeOlQ==}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  pathe@1.1.2:
    resolution: {integrity: sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==}

  perfect-debounce@1.0.0:
    resolution: {integrity: sha512-xCy9V055GLEqoFaHoC1SoLIaLmWctgCUaBaWxDZ7/Zx4CTyX7cJQLJOok/orfjZAh9kEYpjJa4d0KcJmCbctZA==}

  perfect-freehand@1.2.2:
    resolution: {integrity: sha512-eh31l019WICQ03pkF3FSzHxB8n07ItqIQ++G5UV8JX0zVOXzgTGCqnRR0jJ2h9U8/2uW4W4mtGJELt9kEV0CFQ==}

  pg-int8@1.0.1:
    resolution: {integrity: sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==}
    engines: {node: '>=4.0.0'}

  pg-protocol@1.6.1:
    resolution: {integrity: sha512-jPIlvgoD63hrEuihvIg+tJhoGjUsLPn6poJY9N5CnlPd91c2T18T/9zBtLxZSb1EhYxBRoZJtzScCaWlYLtktg==}

  pg-types@2.2.0:
    resolution: {integrity: sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==}
    engines: {node: '>=4'}

  picocolors@1.0.1:
    resolution: {integrity: sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  picomatch@4.0.1:
    resolution: {integrity: sha512-xUXwsxNjwTQ8K3GnT4pCJm+xq3RUPQbmkYJTP5aFIfNIvbcc/4MUxgBaaRSZJ6yGJZiGSyYlM6MzwTsRk8SYCg==}
    engines: {node: '>=12'}

  pidtree@0.6.0:
    resolution: {integrity: sha512-eG2dWTVw5bzqGRztnHExczNxt5VGsE6OwTeCG3fdUf9KBsZzO3R5OIIIzWR+iZA0NtZ+RDVdaoE2dK1cn6jH4g==}
    engines: {node: '>=0.10'}
    hasBin: true

  pify@4.0.1:
    resolution: {integrity: sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==}
    engines: {node: '>=6'}

  pino-abstract-transport@1.2.0:
    resolution: {integrity: sha512-Guhh8EZfPCfH+PMXAb6rKOjGQEoy0xlAIn+irODG5kgfYV+BQ0rGYYWTIel3P5mmyXqkYkPmdIkywsn6QKUR1Q==}

  pino-std-serializers@7.0.0:
    resolution: {integrity: sha512-e906FRY0+tV27iq4juKzSYPbUj2do2X2JX4EzSca1631EB2QJQUqGbDuERal7LCtOpxl6x3+nvo9NPZcmjkiFA==}

  pino@9.3.2:
    resolution: {integrity: sha512-WtARBjgZ7LNEkrGWxMBN/jvlFiE17LTbBoH0konmBU684Kd0uIiDwBXlcTCW7iJnA6HfIKwUssS/2AC6cDEanw==}
    hasBin: true

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  pkg-dir@4.2.0:
    resolution: {integrity: sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==}
    engines: {node: '>=8'}

  pkg-types@1.0.3:
    resolution: {integrity: sha512-nN7pYi0AQqJnoLPC9eHFQ8AcyaixBUOwvqc5TDnIKCMEE6I0y8P7OKA7fPexsXGCGxQDl/cmrLAp26LhcwxZ4A==}

  pkg-types@1.1.3:
    resolution: {integrity: sha512-+JrgthZG6m3ckicaOB74TwQ+tBWsFl3qVQg7mN8ulwSOElJ7gBhKzj2VkCPnZ4NlF6kEquYU+RIYNVAvzd54UA==}

  pkg-up@3.1.0:
    resolution: {integrity: sha512-nDywThFk1i4BQK4twPQ6TA4RT8bDY96yeuCVBWL3ePARCiEKDRSrNGbFIgUJpLp+XeIR65v8ra7WuJOFUBtkMA==}
    engines: {node: '>=8'}

  pluralize@8.0.0:
    resolution: {integrity: sha512-Nc3IT5yHzflTfbjgqWcCPpo7DaKy4FnpB0l/zCAW0Tc7jxAiuqSxHasntB3D7887LSrA93kDJ9IXovxJYxyLCA==}
    engines: {node: '>=4'}

  pofile@1.1.4:
    resolution: {integrity: sha512-r6Q21sKsY1AjTVVjOuU02VYKVNQGJNQHjTIvs4dEbeuuYfxgYk/DGD2mqqq4RDaVkwdSq0VEtmQUOPe/wH8X3g==}

  possible-typed-array-names@1.0.0:
    resolution: {integrity: sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==}
    engines: {node: '>= 0.4'}

  postcss-discard-duplicates@7.0.0:
    resolution: {integrity: sha512-bAnSuBop5LpAIUmmOSsuvtKAAKREB6BBIYStWUTGq8oG5q9fClDMMuY8i4UPI/cEcDx2TN+7PMnXYIId20UVDw==}
    engines: {node: ^18.12.0 || ^20.9.0 || >=22.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-discard-empty@7.0.0:
    resolution: {integrity: sha512-e+QzoReTZ8IAwhnSdp/++7gBZ/F+nBq9y6PomfwORfP7q9nBpK5AMP64kOt0bA+lShBFbBDcgpJ3X4etHg4lzA==}
    engines: {node: ^18.12.0 || ^20.9.0 || >=22.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-merge-rules@7.0.2:
    resolution: {integrity: sha512-VAR47UNvRsdrTHLe7TV1CeEtF9SJYR5ukIB9U4GZyZOptgtsS20xSxy+k5wMrI3udST6O1XuIn7cjQkg7sDAAw==}
    engines: {node: ^18.12.0 || ^20.9.0 || >=22.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-minify-selectors@7.0.2:
    resolution: {integrity: sha512-dCzm04wqW1uqLmDZ41XYNBJfjgps3ZugDpogAmJXoCb5oCiTzIX4oPXXKxDpTvWOnKxQKR4EbV4ZawJBLcdXXA==}
    engines: {node: ^18.12.0 || ^20.9.0 || >=22.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-nested@6.0.1:
    resolution: {integrity: sha512-mEp4xPMi5bSWiMbsgoPfcP74lsWLHkQbZc3sY+jWYd65CUwXrUaTp0fmNpa01ZcETKlIgUdFN/MpS2xZtqL9dQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-normalize-whitespace@7.0.0:
    resolution: {integrity: sha512-37/toN4wwZErqohedXYqWgvcHUGlT8O/m2jVkAfAe9Bd4MzRqlBmXrJRePH0e9Wgnz2X7KymTgTOaaFizQe3AQ==}
    engines: {node: ^18.12.0 || ^20.9.0 || >=22.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-selector-parser@6.1.0:
    resolution: {integrity: sha512-UMz42UD0UY0EApS0ZL9o1XnLhSTtvvvLe5Dc2H2O56fvRZi+KulDyf5ctDhhtYJBGKStV2FL1fy6253cmLgqVQ==}
    engines: {node: '>=4'}

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss@8.4.31:
    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.4.38:
    resolution: {integrity: sha512-Wglpdk03BSfXkHoQa3b/oulrotAkwrlLDRSOb9D0bN86FdRyE9lppSp33aHNPgBa0JKCoB+drFLZkQoRRYae5A==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.4.39:
    resolution: {integrity: sha512-0vzE+lAiG7hZl1/9I8yzKLx3aR9Xbof3fBHKunvMfOCYAtMhrsnccJY2iTURb9EZd5+pLuiNV9/c/GZJOHsgIw==}
    engines: {node: ^10 || ^12 || >=14}

  postgres-array@2.0.0:
    resolution: {integrity: sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==}
    engines: {node: '>=4'}

  postgres-bytea@1.0.0:
    resolution: {integrity: sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==}
    engines: {node: '>=0.10.0'}

  postgres-date@1.0.7:
    resolution: {integrity: sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==}
    engines: {node: '>=0.10.0'}

  postgres-interval@1.2.0:
    resolution: {integrity: sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==}
    engines: {node: '>=0.10.0'}

  preferred-pm@3.1.2:
    resolution: {integrity: sha512-nk7dKrcW8hfCZ4H6klWcdRknBOXWzNQByJ0oJyX97BOupsYD+FzLS4hflgEu/uPUEHZCuRfMxzCBsuWd7OzT8Q==}
    engines: {node: '>=10'}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier-linter-helpers@1.0.0:
    resolution: {integrity: sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==}
    engines: {node: '>=6.0.0'}

  prettier@3.2.5:
    resolution: {integrity: sha512-3/GWa9aOC0YeD7LUfvOG2NiDyhOWRvt1k+rcKhOuYnMY24iiCphgneUfJDyFXd6rZCAnuLBv6UeAULtrhT/F4A==}
    engines: {node: '>=14'}
    hasBin: true

  prettier@3.3.2:
    resolution: {integrity: sha512-rAVeHYMcv8ATV5d508CFdn+8/pHPpXeIid1DdrPwXnaAdH7cqjVbpJaT5eq4yRAFU/lsbwYwSF/n5iNrdJHPQA==}
    engines: {node: '>=14'}
    hasBin: true

  pretty-format@29.7.0:
    resolution: {integrity: sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  prisma@5.17.0:
    resolution: {integrity: sha512-m4UWkN5lBE6yevqeOxEvmepnL5cNPEjzMw2IqDB59AcEV6w7D8vGljDLd1gPFH+W6gUxw9x7/RmN5dCS/WTPxA==}
    engines: {node: '>=16.13'}
    hasBin: true

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  process-warning@3.0.0:
    resolution: {integrity: sha512-mqn0kFRl0EoqhnL0GQ0veqFHyIN1yig9RHh/InzORTUiZHFRAur+aMtRkELNwGs9aNwKS6tg/An4NYBPGwvtzQ==}

  process-warning@4.0.0:
    resolution: {integrity: sha512-/MyYDxttz7DfGMMHiysAsFE4qF+pQYAA8ziO/3NcRVrQ5fSk+Mns4QZA/oRPFzvcqNoVJXQNWNAsdwBXLUkQKw==}

  process@0.11.10:
    resolution: {integrity: sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==}
    engines: {node: '>= 0.6.0'}

  promise-coalesce@1.1.2:
    resolution: {integrity: sha512-zLaJ9b8hnC564fnJH6NFSOGZYYdzrAJn2JUUIwzoQb32fG2QAakpDNM+CZo1km6keXkRXRM+hml1BFAPVnPkxg==}
    engines: {node: '>=16'}

  promise@7.3.1:
    resolution: {integrity: sha512-nolQXZ/4L+bP/UGlkfaIujX9BKxGwmQ9OT4mOt5yvy8iK1h3wqTEJCijzGANTCCl9nWjY41juyAn2K3Q1hLLTg==}

  prompts@2.4.2:
    resolution: {integrity: sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==}
    engines: {node: '>= 6'}

  prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}

  proxy-addr@2.0.7:
    resolution: {integrity: sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==}
    engines: {node: '>= 0.10'}

  proxy-compare@3.0.0:
    resolution: {integrity: sha512-y44MCkgtZUCT9tZGuE278fB7PWVf7fRYy0vbRXAts2o5F0EfC4fIQrvQQGBJo1WJbFcVLXzApOscyJuZqHQc1w==}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  proxy-memoize@3.0.0:
    resolution: {integrity: sha512-2fs4eIg4w6SfOjKHGVdg5tJ9WgHifEXKo2gfS/+tHGajO2YtAu03lLs+ltNKnteGKvq3SvHromkZeKus4J39/g==}

  proxy-memoize@3.0.1:
    resolution: {integrity: sha512-VDdG/VYtOgdGkWJx7y0o7p+zArSf2383Isci8C+BP3YXgMYDoPd3cCBjw0JdWb6YBb9sFiOPbAADDVTPJnh+9g==}

  pseudolocale@2.1.0:
    resolution: {integrity: sha512-af5fsrRvVwD+MBasBJvuDChT0KDqT0nEwD9NTgbtHJ16FKomWac9ua0z6YVNB4G9x9IOaiGWym62aby6n4tFMA==}
    engines: {node: '>=16.0.0'}
    hasBin: true

  punycode@1.4.1:
    resolution: {integrity: sha512-jmYNElW7yvO7TV33CjSmvSiE2yco3bV2czu/OzDKdMNVZQWfxCblURLhf+47syQRBntjfLdd/H0egrzIG+oaFQ==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  pure-rand@6.1.0:
    resolution: {integrity: sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==}

  pvtsutils@1.3.5:
    resolution: {integrity: sha512-ARvb14YB9Nm2Xi6nBq1ZX6dAM0FsJnuk+31aUp4TrcZEdKUlSqOqsxJHUPJDNE3qiIp+iUPEIeR6Je/tgV7zsA==}

  pvutils@1.1.3:
    resolution: {integrity: sha512-pMpnA0qRdFp32b1sJl1wOJNxZLQ2cbQx+k6tjNtZ8CpvVhNqEPRgivZ2WOUev2YMajecdH7ctUPDvEe87nariQ==}
    engines: {node: '>=6.0.0'}

  qs@6.11.0:
    resolution: {integrity: sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==}
    engines: {node: '>=0.6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  quick-format-unescaped@4.0.4:
    resolution: {integrity: sha512-tYC1Q1hgyRuHgloV/YXs2w15unPVh8qfu/qCTfhTYamaw7fyhumKa2yGpdSo87vY32rIclj+4fWYQXUMs9EHvg==}

  quick-lru@5.1.1:
    resolution: {integrity: sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==}
    engines: {node: '>=10'}

  ramda@0.27.2:
    resolution: {integrity: sha512-SbiLPU40JuJniHexQSAgad32hfwd+DRUdwF2PlVuI5RZD0/vahUco7R8vD86J/tcEKKF9vZrUVwgtmGCqlCKyA==}

  randombytes@2.1.0:
    resolution: {integrity: sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==}

  range-parser@1.2.1:
    resolution: {integrity: sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==}
    engines: {node: '>= 0.6'}

  raw-body@2.5.2:
    resolution: {integrity: sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==}
    engines: {node: '>= 0.8'}

  react-dom@18.3.1:
    resolution: {integrity: sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==}
    peerDependencies:
      react: ^18.3.1

  react-intersection-observer@9.13.1:
    resolution: {integrity: sha512-tSzDaTy0qwNPLJHg8XZhlyHTgGW6drFKTtvjdL+p6um12rcnp8Z5XstE+QNBJ7c64n5o0Lj4ilUleA41bmDoMw==}
    peerDependencies:
      react: ^15.0.0 || ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^15.0.0 || ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      react-dom:
        optional: true

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}

  react@18.3.1:
    resolution: {integrity: sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==}
    engines: {node: '>=0.10.0'}

  read-pkg-up@7.0.1:
    resolution: {integrity: sha512-zK0TB7Xd6JpCLmlLmufqykGE+/TlOePD6qKClNW7hHDKFh/J7/7gCWGR7joEQEW1bKq3a3yUZSObOoWLFQ4ohg==}
    engines: {node: '>=8'}

  read-pkg@5.2.0:
    resolution: {integrity: sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==}
    engines: {node: '>=8'}

  read@1.0.7:
    resolution: {integrity: sha512-rSOKNYUmaxy0om1BNjMN4ezNT6VKK+2xF4GBhc81mkH7L60i6dp8qPYrkndNLT3QPphoII3maL9PVC9XmhHwVQ==}
    engines: {node: '>=0.8'}

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readable-stream@4.5.2:
    resolution: {integrity: sha512-yjavECdqeZ3GLXNgRXgeQEdz9fvDDkNKyHnbHRFtOr7/LcfgBcmct7t/ET+HaCTqfh06OzoAxrkN/IfjJBVe+g==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  readdirp@3.5.0:
    resolution: {integrity: sha512-cMhu7c/8rdhkHXWsY+osBhfSy0JikwpHK/5+imo+LpeasTF8ouErHrlYkwT0++njiyuDvc7OFY5T3ukvZ8qmFQ==}
    engines: {node: '>=8.10.0'}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  readline-sync@1.4.10:
    resolution: {integrity: sha512-gNva8/6UAe8QYepIQH/jQ2qn91Qj0B9sYjMBBs3QOB8F2CXcKgLxQaJRP76sWVRQt+QU+8fAkCbCvjjMFu7Ycw==}
    engines: {node: '>= 0.8.0'}

  real-require@0.2.0:
    resolution: {integrity: sha512-57frrGM/OCTLqLOAh0mhVA9VBMHd+9U7Zb2THMGdBUoZVOtGbJzjxsYGDJ3A9AYYCP4hn6y1TVbaOfzWtm5GFg==}
    engines: {node: '>= 12.13.0'}

  redis-errors@1.2.0:
    resolution: {integrity: sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==}
    engines: {node: '>=4'}

  redis-parser@3.0.0:
    resolution: {integrity: sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==}
    engines: {node: '>=4'}

  redis@4.7.0:
    resolution: {integrity: sha512-zvmkHEAdGMn+hMRXuMBtu4Vo5P6rHQjLoHftu+lBqq8ZTA3RCVC/WzD790bkKKiNFp7d5/9PcSD19fJyyRvOdQ==}

  reflect-metadata@0.2.2:
    resolution: {integrity: sha512-urBwgfrvVP/eAyXx4hluJivBKzuEbSQs9rKWCrCkbSxNv8mxPcUZKeuoF3Uy4mJl3Lwprp6yy5/39VWigZ4K6Q==}

  reflect.getprototypeof@1.0.6:
    resolution: {integrity: sha512-fmfw4XgoDke3kdI6h4xcUz1dG8uaiv5q9gcEwLS4Pnth2kxT+GZ7YehS1JTMGBQmtV7Y4GFGbs2re2NqhdozUg==}
    engines: {node: '>= 0.4'}

  regenerate-unicode-properties@10.1.1:
    resolution: {integrity: sha512-X007RyZLsCJVVrjgEFVpLUTZwyOZk3oiL75ZcuYjlIWd6rNJtOjkBwQc5AsRrpbKVkxN6sklw/k/9m2jJYOf8Q==}
    engines: {node: '>=4'}

  regenerate@1.4.2:
    resolution: {integrity: sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==}

  regenerator-runtime@0.14.1:
    resolution: {integrity: sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==}

  regenerator-transform@0.15.2:
    resolution: {integrity: sha512-hfMp2BoF0qOk3uc5V20ALGDS2ddjQaLrdl7xrGXvAIow7qeWRM2VA2HuCHkUKk9slq3VwEwLNK3DFBqDfPGYtg==}

  regexp-tree@0.1.27:
    resolution: {integrity: sha512-iETxpjK6YoRWJG5o6hXLwvjYAoW+FEZn9os0PD/b6AP6xQwsa/Y7lCVgIixBbUPMfhu+i2LtdeAqVTgGlQarfA==}
    hasBin: true

  regexp.prototype.flags@1.5.2:
    resolution: {integrity: sha512-NcDiDkTLuPR+++OCKB0nWafEmhg/Da8aUPLPMQbK+bxKKCm1/S5he+AqYa4PlMCVBalb4/yxIRub6qkEx5yJbw==}
    engines: {node: '>= 0.4'}

  regexpu-core@5.3.2:
    resolution: {integrity: sha512-RAM5FlZz+Lhmo7db9L298p2vHP5ZywrVXmVXpmAD9GuL5MPH6t9ROw1iA/wfHkQ76Qe7AaPF0nGuim96/IrQMQ==}
    engines: {node: '>=4'}

  regjsparser@0.10.0:
    resolution: {integrity: sha512-qx+xQGZVsy55CH0a1hiVwHmqjLryfh7wQyF5HO07XJ9f7dQMY/gPQHhlyDkIzJKC+x2fUCpCcUODUUUFrm7SHA==}
    hasBin: true

  regjsparser@0.9.1:
    resolution: {integrity: sha512-dQUtn90WanSNl+7mQKcXAgZxvUe7Z0SqXlgzv0za4LwiUhyzBC58yQO3liFoUgu8GiJVInAhJjkj1N0EtQ5nkQ==}
    hasBin: true

  rehackt@0.1.0:
    resolution: {integrity: sha512-7kRDOuLHB87D/JESKxQoRwv4DzbIdwkAGQ7p6QKGdVlY1IZheUnVhlk/4UZlNUVxdAXpyxikE3URsG067ybVzw==}
    peerDependencies:
      '@types/react': '*'
      react: '*'
    peerDependenciesMeta:
      '@types/react':
        optional: true
      react:
        optional: true

  relay-runtime@12.0.0:
    resolution: {integrity: sha512-QU6JKr1tMsry22DXNy9Whsq5rmvwr3LSZiiWV/9+DFpuTWvp+WFhobWMc8TC4OjKFfNhEZy7mOiqUAn5atQtug==}

  remeda@1.61.0:
    resolution: {integrity: sha512-caKfSz9rDeSKBQQnlJnVW3mbVdFgxgGWQKq1XlFokqjf+hQD5gxutLGTTY2A/x24UxVyJe9gH5fAkFI63ULw4A==}

  remedial@1.0.8:
    resolution: {integrity: sha512-/62tYiOe6DzS5BqVsNpH/nkGlX45C/Sp6V+NtiN6JQNS1Viay7cWkazmRkrQrdFj2eshDe96SIQNIoMxqhzBOg==}

  remove-trailing-separator@1.1.0:
    resolution: {integrity: sha512-/hS+Y0u3aOfIETiaiirUFwDBDzmXPvO+jAfKTitUngIPzdKc6Z0LoFjM/CK5PL4C+eKwHohlHAb6H0VFfmmUsw==}

  remove-trailing-spaces@1.0.8:
    resolution: {integrity: sha512-O3vsMYfWighyFbTd8hk8VaSj9UAGENxAtX+//ugIst2RMk5e03h6RoIS+0ylsFxY1gvmPuAY/PO4It+gPEeySA==}

  repeat-string@1.6.1:
    resolution: {integrity: sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==}
    engines: {node: '>=0.10'}

  require-directory@2.1.1:
    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
    engines: {node: '>=0.10.0'}

  require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}

  require-in-the-middle@7.4.0:
    resolution: {integrity: sha512-X34iHADNbNDfr6OTStIAHWSAvvKQRYgLO6duASaVf7J2VA3lvmNYboAHOuLC2huav1IwgZJtyEcJCKVzFxOSMQ==}
    engines: {node: '>=8.6.0'}

  require-main-filename@2.0.0:
    resolution: {integrity: sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==}

  resolve-cwd@3.0.0:
    resolution: {integrity: sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==}
    engines: {node: '>=8'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve.exports@2.0.2:
    resolution: {integrity: sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==}
    engines: {node: '>=10'}

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  resolve@2.0.0-next.5:
    resolution: {integrity: sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==}
    hasBin: true

  response-iterator@0.2.6:
    resolution: {integrity: sha512-pVzEEzrsg23Sh053rmDUvLSkGXluZio0qu8VT6ukrYuvtjVfCbDZH9d6PGXb8HZfzdNZt8feXv/jvUzlhRgLnw==}
    engines: {node: '>=0.8'}

  restore-cursor@3.1.0:
    resolution: {integrity: sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==}
    engines: {node: '>=8'}

  restore-cursor@5.1.0:
    resolution: {integrity: sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==}
    engines: {node: '>=18'}

  ret@0.4.3:
    resolution: {integrity: sha512-0f4Memo5QP7WQyUEAYUO3esD/XjOc3Zjjg5CPsAq1p8sIu0XPeMbHJemKA0BO7tV0X7+A0FoEpbmHXWxPyD3wQ==}
    engines: {node: '>=10'}

  retry@0.13.1:
    resolution: {integrity: sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==}
    engines: {node: '>= 4'}

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rfdc@1.4.1:
    resolution: {integrity: sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==}

  rimraf@3.0.2:
    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}
    deprecated: Rimraf versions prior to v4 are no longer supported
    hasBin: true

  ripemd160@2.0.2:
    resolution: {integrity: sha512-ii4iagi25WusVoiC4B4lq7pbXfAp3D9v5CwfkY33vffw2+pkDjY1D8GaN7spsxvCSx8dkPqOZCEZyfxcmJG2IA==}

  rpc-websockets@7.11.2:
    resolution: {integrity: sha512-pL9r5N6AVHlMN/vT98+fcO+5+/UcPLf/4tq+WUaid/PPUGS/ttJ3y8e9IqmaWKtShNAysMSjkczuEA49NuV7UQ==}

  run-async@2.4.1:
    resolution: {integrity: sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==}
    engines: {node: '>=0.12.0'}

  run-async@3.0.0:
    resolution: {integrity: sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==}
    engines: {node: '>=0.12.0'}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  rxjs@6.6.7:
    resolution: {integrity: sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==}
    engines: {npm: '>=2.0.0'}

  rxjs@7.8.1:
    resolution: {integrity: sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==}

  safe-array-concat@1.1.2:
    resolution: {integrity: sha512-vj6RsCsWBCf19jIeHEfkRMw8DPiBb+DMXklQ/1SGDHOMlHdPUkZXFQ2YdplS23zESTijAcurb1aSgJA3AgMu1Q==}
    engines: {node: '>=0.4'}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-regex-test@1.0.3:
    resolution: {integrity: sha512-CdASjNJPvRa7roO6Ra/gLYBTzYzzPyyBXxIMdGW3USQLyjWEls2RgW5UBTXaQVp+OrpeCK3bLem8smtmheoRuw==}
    engines: {node: '>= 0.4'}

  safe-regex2@3.1.0:
    resolution: {integrity: sha512-RAAZAGbap2kBfbVhvmnTFv73NWLMvDGOITFYTZBAaY8eR+Ir4ef7Up/e7amo+y1+AH+3PtLkrt9mvcTsG9LXug==}

  safe-stable-stringify@2.4.3:
    resolution: {integrity: sha512-e2bDA2WJT0wxseVd4lsDP4+3ONX6HpMXQa1ZhFQ7SU+GjvORCmShbCMltrtIDfkYhVHrOcPtj+KhmDBdPdZD1g==}
    engines: {node: '>=10'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  scheduler@0.23.2:
    resolution: {integrity: sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==}

  schema-utils@3.3.0:
    resolution: {integrity: sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==}
    engines: {node: '>= 10.13.0'}

  scrypt-js@3.0.1:
    resolution: {integrity: sha512-cdwTTnqPu0Hyvf5in5asVdZocVDTNRmR7XEcJuIzMjJeSHybHl7vpB66AzwTaIg6CLSbtjcxc8fqcySfnTkccA==}

  scuid@1.1.0:
    resolution: {integrity: sha512-MuCAyrGZcTLfQoH2XoBlQ8C6bzwN88XT/0slOGz0pn8+gIP85BOAfYa44ZXQUTOwRwPU0QvgU+V+OSajl/59Xg==}

  secure-json-parse@2.7.0:
    resolution: {integrity: sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw==}

  semver@5.7.2:
    resolution: {integrity: sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==}
    hasBin: true

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.6.2:
    resolution: {integrity: sha512-FNAIBWCx9qcRhoHcgcJ0gvU7SN1lYU2ZXuSfl04bSC5OpvDHFyJCjdNHomPXxjQlCBU67YW64PzY7/VIEH7F2w==}
    engines: {node: '>=10'}
    hasBin: true

  semver@7.6.3:
    resolution: {integrity: sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==}
    engines: {node: '>=10'}
    hasBin: true

  send@0.18.0:
    resolution: {integrity: sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==}
    engines: {node: '>= 0.8.0'}

  sentence-case@3.0.4:
    resolution: {integrity: sha512-8LS0JInaQMCRoQ7YUytAo/xUu5W2XnQxV2HI/6uM6U7CITS1RqPElr30V6uIqyMKM9lJGRVFy5/4CuzcixNYSg==}

  serialize-javascript@6.0.2:
    resolution: {integrity: sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==}

  serve-static@1.15.0:
    resolution: {integrity: sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==}
    engines: {node: '>= 0.8.0'}

  set-blocking@2.0.0:
    resolution: {integrity: sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==}

  set-cookie-parser@2.7.0:
    resolution: {integrity: sha512-lXLOiqpkUumhRdFF3k1osNXCy9akgx/dyPZ5p8qAg9seJzXr5ZrlqZuWIMuY6ejOsVLE6flJ5/h3lsn57fQ/PQ==}

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  setimmediate@1.0.5:
    resolution: {integrity: sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==}

  setprototypeof@1.2.0:
    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}

  sha.js@2.4.11:
    resolution: {integrity: sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==}
    hasBin: true

  sha3@2.1.4:
    resolution: {integrity: sha512-S8cNxbyb0UGUM2VhRD4Poe5N58gJnJsLJ5vC7FYWGUmGhcsj4++WaIOBFVDxlG0W3To6xBuiRh+i0Qp2oNCOtg==}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  shell-quote@1.8.1:
    resolution: {integrity: sha512-6j1W9l1iAs/4xYBI1SYOVZyFcCis9b4KCLQ8fgAGG07QvzaRLVVRQvAy85yNmmZSjYjg4MWh4gNvlPujU/5LpA==}

  shimmer@1.2.1:
    resolution: {integrity: sha512-sQTKC1Re/rM6XyFM6fIAGHRPVGvyXfgzIDvzoq608vM+jeyVD0Tu1E6Np0Kc2zAIFWIj963V2800iF/9LPieQw==}

  side-channel@1.0.6:
    resolution: {integrity: sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==}
    engines: {node: '>= 0.4'}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  signedsource@1.0.0:
    resolution: {integrity: sha512-6+eerH9fEnNmi/hyM1DXcRK3pWdoMQtlkQ+ns0ntzunjKqp5i3sKCc80ym8Fib3iaYhdJUOPdhlJWj1tvge2Ww==}

  sisteransi@1.0.5:
    resolution: {integrity: sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  slice-ansi@3.0.0:
    resolution: {integrity: sha512-pSyv7bSTC7ig9Dcgbw9AuRNUb5k5V6oDudjZoMBSr13qpLBG7tB+zgCkARjq7xIUgdz5P1Qe8u+rSGdouOOIyQ==}
    engines: {node: '>=8'}

  slice-ansi@4.0.0:
    resolution: {integrity: sha512-qMCMfhY040cVHT43K9BFygqYbUPFZKHOg7K73mtTWJRb8pyP3fzf4Ixd5SzdEJQ6MRUg/WBnOLxghZtKKurENQ==}
    engines: {node: '>=10'}

  slice-ansi@5.0.0:
    resolution: {integrity: sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==}
    engines: {node: '>=12'}

  slice-ansi@7.1.0:
    resolution: {integrity: sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==}
    engines: {node: '>=18'}

  snake-case@3.0.4:
    resolution: {integrity: sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==}

  sonic-boom@4.0.1:
    resolution: {integrity: sha512-hTSD/6JMLyT4r9zeof6UtuBDpjJ9sO08/nmS5djaA9eozT9oOlNdpXSnzcgj4FTqpk3nkLrs61l4gip9r1HCrQ==}

  source-map-js@1.2.0:
    resolution: {integrity: sha512-itJW8lvSA0TXEphiRoawsCksnlf8SyvmFzIhltqAHluXd88pkCd+cXJVHTDwdCr0IzwptSm035IHQktUu1QUMg==}
    engines: {node: '>=0.10.0'}

  source-map-support@0.5.13:
    resolution: {integrity: sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==}

  source-map-support@0.5.21:
    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  source-map@0.7.4:
    resolution: {integrity: sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==}
    engines: {node: '>= 8'}

  source-map@0.8.0-beta.0:
    resolution: {integrity: sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==}
    engines: {node: '>= 8'}

  spdx-correct@3.2.0:
    resolution: {integrity: sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==}

  spdx-exceptions@2.5.0:
    resolution: {integrity: sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==}

  spdx-expression-parse@3.0.1:
    resolution: {integrity: sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==}

  spdx-license-ids@3.0.18:
    resolution: {integrity: sha512-xxRs31BqRYHwiMzudOrpSiHtZ8i/GeionCBDSilhYRj+9gIcI8wCZTlXZKu9vZIVqViP3dcp9qE5G6AlIaD+TQ==}

  split2@4.2.0:
    resolution: {integrity: sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==}
    engines: {node: '>= 10.x'}

  sponge-case@1.0.1:
    resolution: {integrity: sha512-dblb9Et4DAtiZ5YSUZHLl4XhH4uK80GhAZrVXdN4O2P4gQ40Wa5UIOPUHlA/nFd2PLblBZWUioLMMAVrgpoYcA==}

  sprintf-js@1.0.3:
    resolution: {integrity: sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==}

  stack-utils@2.0.6:
    resolution: {integrity: sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==}
    engines: {node: '>=10'}

  standard-as-callback@2.1.0:
    resolution: {integrity: sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A==}

  statuses@2.0.1:
    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}
    engines: {node: '>= 0.8'}

  stop-iteration-iterator@1.0.0:
    resolution: {integrity: sha512-iCGQj+0l0HOdZ2AEeBADlsRC+vsnDsZsbdSiH1yNSjcfKM7fdpCMfqAL/dwF5BLiw/XhRft/Wax6zQbhq2BcjQ==}
    engines: {node: '>= 0.4'}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  string-argv@0.3.2:
    resolution: {integrity: sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==}
    engines: {node: '>=0.6.19'}

  string-env-interpolation@1.0.1:
    resolution: {integrity: sha512-78lwMoCcn0nNu8LszbP1UA7g55OeE4v7rCeWnM5B453rnNr4aq+5it3FEYtZrSEiMvHZOZ9Jlqb0OD0M2VInqg==}

  string-length@4.0.2:
    resolution: {integrity: sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==}
    engines: {node: '>=10'}

  string-length@6.0.0:
    resolution: {integrity: sha512-1U361pxZHEQ+FeSjzqRpV+cu2vTzYeWeafXFLykiFlv4Vc0n3njgU8HrMbyik5uwm77naWMuVG8fhEF+Ovb1Kg==}
    engines: {node: '>=16'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string-width@7.2.0:
    resolution: {integrity: sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==}
    engines: {node: '>=18'}

  string.prototype.includes@2.0.0:
    resolution: {integrity: sha512-E34CkBgyeqNDcrbU76cDjL5JLcVrtSdYq0MEh/B10r17pRP4ciHLwTgnuLV8Ay6cgEMLkcBkFCKyFZ43YldYzg==}

  string.prototype.matchall@4.0.11:
    resolution: {integrity: sha512-NUdh0aDavY2og7IbBPenWqR9exH+E26Sv8e0/eTe1tltDGZL+GtBkDAnnyBtmekfK6/Dq3MkcGtzXFEd1LQrtg==}
    engines: {node: '>= 0.4'}

  string.prototype.repeat@1.0.0:
    resolution: {integrity: sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==}

  string.prototype.trim@1.2.9:
    resolution: {integrity: sha512-klHuCNxiMZ8MlsOihJhJEBJAiMVqU3Z2nEXWfWnIqjN0gEFS9J9+IxKozWWtQGcgoa1WUZzLjKPTr4ZHNFTFxw==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.8:
    resolution: {integrity: sha512-p73uL5VCHCO2BZZ6krwwQE3kCzM7NKmis8S//xEC6fQonchbum4eP6kR4DLEjQFO3Wnj3Fuo8NM0kOSjVdHjZQ==}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-bom@4.0.0:
    resolution: {integrity: sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==}
    engines: {node: '>=8'}

  strip-final-newline@2.0.0:
    resolution: {integrity: sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==}
    engines: {node: '>=6'}

  strip-final-newline@3.0.0:
    resolution: {integrity: sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==}
    engines: {node: '>=12'}

  strip-indent@3.0.0:
    resolution: {integrity: sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==}
    engines: {node: '>=8'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  styled-jsx@5.1.1:
    resolution: {integrity: sha512-pW7uC1l4mBZ8ugbiZrcIsiIvVx1UmTfw7UkC3Um2tmfUq9Bhk8IiyEIPl6F8agHgjzku6j0xQEZbfA5uSgSaCw==}
    engines: {node: '>= 12.0.0'}
    peerDependencies:
      '@babel/core': '*'
      babel-plugin-macros: '*'
      react: '>= 16.8.0 || 17.x.x || ^18.0.0-0'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      babel-plugin-macros:
        optional: true

  subscriptions-transport-ws@0.11.0:
    resolution: {integrity: sha512-8D4C6DIH5tGiAIpp5I0wD/xRlNiZAPGHygzCe7VzyzUoxHtawzjNAY9SUTXU05/EY2NMY9/9GF0ycizkXr1CWQ==}
    deprecated: The `subscriptions-transport-ws` package is no longer maintained. We recommend you use `graphql-ws` instead. For help migrating Apollo software to `graphql-ws`, see https://www.apollographql.com/docs/apollo-server/data/subscriptions/#switching-from-subscriptions-transport-ws    For general help using `graphql-ws`, see https://github.com/enisdenjo/graphql-ws/blob/master/README.md
    peerDependencies:
      graphql: ^15.7.2 || ^16.0.0

  superagent@9.0.2:
    resolution: {integrity: sha512-xuW7dzkUpcJq7QnhOsnNUgtYp3xRwpt2F7abdRYIpCsAt0hhUqia0EdxyXZQQpNmGtsCzYHryaKSV3q3GJnq7w==}
    engines: {node: '>=14.18.0'}

  supertest@7.0.0:
    resolution: {integrity: sha512-qlsr7fIC0lSddmA3tzojvzubYxvlGtzumcdHgPwbFWMISQwL22MhM2Y3LNt+6w9Yyx7559VW5ab70dgphm8qQA==}
    engines: {node: '>=14.18.0'}

  supports-color@5.5.0:
    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}
    engines: {node: '>=4'}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  svg-parser@2.0.4:
    resolution: {integrity: sha512-e4hG1hRwoOdRb37cIMSgzNsxyzKfayW6VOflrwvR+/bzrkyxY/31WkbgnQpgtrNp1SdpJvpUAGTa/ZoiPNDuRQ==}

  svgo@3.3.2:
    resolution: {integrity: sha512-OoohrmuUlBs8B8o6MB2Aevn+pRIH9zDALSR+6hhqVfa6fRwG/Qw9VUMSMW9VNg2CFc/MTIfabtdOVl9ODIJjpw==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  swap-case@2.0.2:
    resolution: {integrity: sha512-kc6S2YS/2yXbtkSMunBtKdah4VFETZ8Oh6ONSmSd9bRxhqTrtARUCBUiWXH3xVPpvR7tz2CSnkuXVE42EcGnMw==}

  symbol-observable@1.2.0:
    resolution: {integrity: sha512-e900nM8RRtGhlV36KGEU9k65K3mPb1WV70OdjfxlG2EAuM1noi/E/BaW/uMhL7bPEssK8QV57vN3esixjUvcXQ==}
    engines: {node: '>=0.10.0'}

  symbol-observable@4.0.0:
    resolution: {integrity: sha512-b19dMThMV4HVFynSAM1++gBHAbk2Tc/osgLIBZMKsyqh34jb2e8Os7T6ZW/Bt3pJFdBTd2JwAnAAEQV7rSNvcQ==}
    engines: {node: '>=0.10'}

  synckit@0.9.1:
    resolution: {integrity: sha512-7gr8p9TQP6RAHusBOSLs46F4564ZrjV8xFmw5zCmgmhGUcw2hxsShhJ6CEiHQMgPDwAQ1fWHPM0ypc4RMAig4A==}
    engines: {node: ^14.18.0 || >=16.0.0}

  tabbable@6.2.0:
    resolution: {integrity: sha512-Cat63mxsVJlzYvN51JmVXIgNoUokrIaT2zLclCXjRd8boZ0004U4KCs/sToJ75C6sdlByWxpYnb5Boif1VSFew==}

  tapable@2.2.1:
    resolution: {integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==}
    engines: {node: '>=6'}

  terser-webpack-plugin@5.3.10:
    resolution: {integrity: sha512-BKFPWlPDndPs+NGGCr1U59t0XScL5317Y0UReNrHaw9/FwhPENlq6bfgs+4yPfyP51vqC1bQ4rp1EfXW5ZSH9w==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      '@swc/core': '*'
      esbuild: '*'
      uglify-js: '*'
      webpack: ^5.1.0
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      esbuild:
        optional: true
      uglify-js:
        optional: true

  terser@5.31.3:
    resolution: {integrity: sha512-pAfYn3NIZLyZpa83ZKigvj6Rn9c/vd5KfYGX7cN1mnzqgDcxWvrU5ZtAfIKhEXz9nRecw4z3LXkjaq96/qZqAA==}
    engines: {node: '>=10'}
    hasBin: true

  test-exclude@6.0.0:
    resolution: {integrity: sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==}
    engines: {node: '>=8'}

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  third-party-capital@1.0.20:
    resolution: {integrity: sha512-oB7yIimd8SuGptespDAZnNkzIz+NWaJCu2RMsbs4Wmp9zSDUM8Nhi3s2OOcqYuv3mN4hitXc8DVx+LyUmbUDiA==}

  thread-stream@3.1.0:
    resolution: {integrity: sha512-OqyPZ9u96VohAyMfJykzmivOrY2wfMSf3C5TtFJVgN+Hm6aj+voFhlK+kZEIv2FBh1X6Xp3DlnCOfEQ3B2J86A==}

  through@2.3.8:
    resolution: {integrity: sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==}

  title-case@3.0.3:
    resolution: {integrity: sha512-e1zGYRvbffpcHIrnuqT0Dh+gEJtDaxDSoG4JAIpq4oDFyooziLBIiYQv0GBT4FUAnUop5uZ1hiIAj7oAF6sOCA==}

  tmp@0.0.33:
    resolution: {integrity: sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==}
    engines: {node: '>=0.6.0'}

  tmpl@1.0.5:
    resolution: {integrity: sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==}

  to-fast-properties@2.0.0:
    resolution: {integrity: sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==}
    engines: {node: '>=4'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  toad-cache@3.7.0:
    resolution: {integrity: sha512-/m8M+2BJUpoJdgAHoG+baCwBT+tf2VraSfkBgl0Y00qIWt41DJ8R5B8nsEw0I58YwF5IZH6z24/2TobDKnqSWw==}
    engines: {node: '>=12'}

  toidentifier@1.0.1:
    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}
    engines: {node: '>=0.6'}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  tr46@1.0.1:
    resolution: {integrity: sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==}

  tree-kill@1.2.2:
    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
    hasBin: true

  ts-api-utils@1.3.0:
    resolution: {integrity: sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'

  ts-evaluator@1.2.0:
    resolution: {integrity: sha512-ncSGek1p92bj2ifB7s9UBgryHCkU9vwC5d+Lplt12gT9DH+e41X8dMoHRQjIMeAvyG7j9dEnuHmwgOtuRIQL+Q==}
    engines: {node: '>=14.19.0'}
    peerDependencies:
      jsdom: '>=14.x || >=15.x || >=16.x || >=17.x || >=18.x || >=19.x || >=20.x || >=21.x || >=22.x'
      typescript: '>=3.2.x || >= 4.x || >= 5.x'
    peerDependenciesMeta:
      jsdom:
        optional: true

  ts-invariant@0.10.3:
    resolution: {integrity: sha512-uivwYcQaxAucv1CzRp2n/QdYPo4ILf9VXgH19zEIjFx2EJufV16P0JtJVpYHy89DItG6Kwj2oIUjrcK5au+4tQ==}
    engines: {node: '>=8'}

  ts-jest@29.2.4:
    resolution: {integrity: sha512-3d6tgDyhCI29HlpwIq87sNuI+3Q6GLTTCeYRHCs7vDz+/3GCMwEtV9jezLyl4ZtnBgx00I7hm8PCP8cTksMGrw==}
    engines: {node: ^14.15.0 || ^16.10.0 || ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@babel/core': '>=7.0.0-beta.0 <8'
      '@jest/transform': ^29.0.0
      '@jest/types': ^29.0.0
      babel-jest: ^29.0.0
      esbuild: '*'
      jest: ^29.0.0
      typescript: '>=4.3 <6'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      '@jest/transform':
        optional: true
      '@jest/types':
        optional: true
      babel-jest:
        optional: true
      esbuild:
        optional: true

  ts-loader@9.5.1:
    resolution: {integrity: sha512-rNH3sK9kGZcH9dYzC7CewQm4NtxJTjSEVRJ2DyBZR7f8/wcta+iV44UPCXc5+nzDzivKtlzV6c9P4e+oFhDLYg==}
    engines: {node: '>=12.0.0'}
    peerDependencies:
      typescript: '*'
      webpack: ^5.0.0

  ts-log@2.2.5:
    resolution: {integrity: sha512-PGcnJoTBnVGy6yYNFxWVNkdcAuAMstvutN9MgDJIV6L0oG8fB+ZNNy1T+wJzah8RPGor1mZuPQkVfXNDpy9eHA==}

  ts-morph@21.0.1:
    resolution: {integrity: sha512-dbDtVdEAncKctzrVZ+Nr7kHpHkv+0JDJb2MjjpBaj8bFeCkePU9rHfMklmhuLFnpeq/EJZk2IhStY6NzqgjOkg==}

  ts-node@10.9.2:
    resolution: {integrity: sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==}
    hasBin: true
    peerDependencies:
      '@swc/core': '>=1.2.50'
      '@swc/wasm': '>=1.2.50'
      '@types/node': '*'
      typescript: '>=2.7'
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      '@swc/wasm':
        optional: true

  ts-pattern@5.0.8:
    resolution: {integrity: sha512-aafbuAQOTEeWmA7wtcL94w6I89EgLD7F+IlWkr596wYxeb0oveWDO5dQpv85YP0CGbxXT/qXBIeV6IYLcoZ2uA==}

  ts-pattern@5.1.2:
    resolution: {integrity: sha512-u+ElKUIWnqisjpRBhv6Y89yNq7Pmz6xL0v7pTSckrVZ0+5Vf32oh/3jmxWl80rAOGcnbBa7fCyeqNdP4yXzWWg==}

  ts-toolbelt@9.6.0:
    resolution: {integrity: sha512-nsZd8ZeNUzukXPlJmTBwUAuABDe/9qtVDelJeT/qW0ow3ZS3BsQJtNkan1802aM9Uf68/Y8ljw86Hu0h5IUW3w==}

  tsconfck@3.0.2:
    resolution: {integrity: sha512-6lWtFjwuhS3XI4HsX4Zg0izOI3FU/AI9EGVlPEUMDIhvLPMD4wkiof0WCoDgW7qY+Dy198g4d9miAqUHWHFH6Q==}
    engines: {node: ^18 || >=20}
    hasBin: true
    peerDependencies:
      typescript: ^5.0.0
    peerDependenciesMeta:
      typescript:
        optional: true

  tsconfig-paths-webpack-plugin@4.1.0:
    resolution: {integrity: sha512-xWFISjviPydmtmgeUAuXp4N1fky+VCtfhOkDUFIv5ea7p4wuTomI4QTrXvFBX2S4jZsmyTSrStQl+E+4w+RzxA==}
    engines: {node: '>=10.13.0'}

  tsconfig-paths@3.15.0:
    resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}

  tsconfig-paths@4.2.0:
    resolution: {integrity: sha512-NoZ4roiN7LnbKn9QqE1amc9DJfzvZXxF4xDavcOWt1BPkdx+m+0gJuPM+S0vCe7zTJMYUP0R8pO2XMr+Y8oLIg==}
    engines: {node: '>=6'}

  tslib@1.14.1:
    resolution: {integrity: sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==}

  tslib@2.3.1:
    resolution: {integrity: sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw==}

  tslib@2.6.3:
    resolution: {integrity: sha512-xNvxJEOUiWPGhUuUdQgAJPKOOJfGnIyKySOc09XkKsgdUV/3E2zvwZYdejjmRgPCgcym1juLH3226yA7sEFJKQ==}

  tslib@2.7.0:
    resolution: {integrity: sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-detect@4.0.8:
    resolution: {integrity: sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==}
    engines: {node: '>=4'}

  type-fest@0.20.2:
    resolution: {integrity: sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==}
    engines: {node: '>=10'}

  type-fest@0.21.3:
    resolution: {integrity: sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==}
    engines: {node: '>=10'}

  type-fest@0.6.0:
    resolution: {integrity: sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==}
    engines: {node: '>=8'}

  type-fest@0.8.1:
    resolution: {integrity: sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==}
    engines: {node: '>=8'}

  type-fest@1.4.0:
    resolution: {integrity: sha512-yGSza74xk0UG8k+pLh5oeoYirvIiWo5t0/o3zHHAO2tRDiZcxWP7fywNlXhqb6/r6sWvwi+RsyQMWhVLe4BVuA==}
    engines: {node: '>=10'}

  type-fest@4.23.0:
    resolution: {integrity: sha512-ZiBujro2ohr5+Z/hZWHESLz3g08BBdrdLMieYFULJO+tWc437sn8kQsWLJoZErY8alNhxre9K4p3GURAG11n+w==}
    engines: {node: '>=16'}

  type-is@1.6.18:
    resolution: {integrity: sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==}
    engines: {node: '>= 0.6'}

  typed-array-buffer@1.0.2:
    resolution: {integrity: sha512-gEymJYKZtKXzzBzM4jqa9w6Q1Jjm7x2d+sh19AdsD4wqnMPDYyvwpsIc2Q/835kHuo3BEQ7CjelGhfTsoBb2MQ==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.1:
    resolution: {integrity: sha512-3iMJ9q0ao7WE9tWcaYKIptkNBuOIcZCCT0d4MRvuuH88fEoEH62IuQe0OtraD3ebQEoTRk8XCBoknUNc1Y67pw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.2:
    resolution: {integrity: sha512-Ous0vodHa56FviZucS2E63zkgtgrACj7omjwd/8lTEMEPFFyjfixMZ1ZXenpgCFBBt4EC1J2XsyVS2gkG0eTFA==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.6:
    resolution: {integrity: sha512-/OxDN6OtAk5KBpGb28T+HZc2M+ADtvRxXrKKbUwtsLgdoxgX13hyy7ek6bFRl5+aBs2yZzB0c4CnQfAtVypW/g==}
    engines: {node: '>= 0.4'}

  typed.js@2.1.0:
    resolution: {integrity: sha512-bDuXEf7YcaKN4g08NMTUM6G90XU25CK3bh6U0THC/Mod/QPKlEt9g/EjvbYB8x2Qwr2p6J6I3NrsoYaVnY6wsQ==}

  typedarray@0.0.6:
    resolution: {integrity: sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==}

  typeforce@1.18.0:
    resolution: {integrity: sha512-7uc1O8h1M1g0rArakJdf0uLRSSgFcYexrVoKo+bzJd32gd4gDy2L/Z+8/FjPnU9ydY3pEnVPtr9FyscYY60K1g==}

  typescript@5.3.3:
    resolution: {integrity: sha512-pXWcraxM0uxAS+tN0AG/BF2TyqmHO014Z070UsJ+pFvYuRSq8KH8DmWpnbXe0pEPDHXZV3FcAbJkijJ5oNEnWw==}
    engines: {node: '>=14.17'}
    hasBin: true

  typescript@5.5.3:
    resolution: {integrity: sha512-/hreyEujaB0w76zKo6717l3L0o/qEUtRgdvUBvlkhoWeOVMjMuHNHk0BRBzikzuGDqNmPQbg5ifMEqsHLiIUcQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  ua-parser-js@1.0.38:
    resolution: {integrity: sha512-Aq5ppTOfvrCMgAPneW1HfWj66Xi7XL+/mIy996R1/CLS/rcyJQm6QZdsKrUeivDFQ+Oc9Wyuwor8Ze8peEoUoQ==}

  ufo@1.5.4:
    resolution: {integrity: sha512-UsUk3byDzKd04EyoZ7U4DOlxQaD14JUKQl6/P7wiX4FNvUfm3XL246n9W5AmqwW5RSFJ27NAuM0iLscAOYUiGQ==}

  uid@2.0.2:
    resolution: {integrity: sha512-u3xV3X7uzvi5b1MncmZo3i2Aw222Zk1keqLA1YkHldREkAhAqi65wuPfe7lHx8H/Wzy+8CE7S7uS3jekIM5s8g==}
    engines: {node: '>=8'}

  unbox-primitive@1.0.2:
    resolution: {integrity: sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==}

  unc-path-regex@0.1.2:
    resolution: {integrity: sha512-eXL4nmJT7oCpkZsHZUOJo8hcX3GbsiDOa0Qu9F646fi8dT3XuSVopVqAcEiVzSKKH7UoDti23wNX3qGFxcW5Qg==}
    engines: {node: '>=0.10.0'}

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  unicode-canonical-property-names-ecmascript@2.0.0:
    resolution: {integrity: sha512-yY5PpDlfVIU5+y/BSCxAJRBIS1Zc2dDG3Ujq+sR0U+JjUevW2JhocOF+soROYDSaAezOzOKuyyixhD6mBknSmQ==}
    engines: {node: '>=4'}

  unicode-match-property-ecmascript@2.0.0:
    resolution: {integrity: sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==}
    engines: {node: '>=4'}

  unicode-match-property-value-ecmascript@2.1.0:
    resolution: {integrity: sha512-qxkjQt6qjg/mYscYMC0XKRn3Rh0wFPlfxB0xkt9CfyTvpX1Ra0+rAmdX2QyAobptSEvuy4RtpPRui6XkV+8wjA==}
    engines: {node: '>=4'}

  unicode-property-aliases-ecmascript@2.1.0:
    resolution: {integrity: sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==}
    engines: {node: '>=4'}

  universalify@2.0.1:
    resolution: {integrity: sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==}
    engines: {node: '>= 10.0.0'}

  unixify@1.0.0:
    resolution: {integrity: sha512-6bc58dPYhCMHHuwxldQxO3RRNZ4eCogZ/st++0+fcC1nr0jiGUtAdBJ2qzmLQWSxbtz42pWt4QQMiZ9HvZf5cg==}
    engines: {node: '>=0.10.0'}

  unpipe@1.0.0:
    resolution: {integrity: sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==}
    engines: {node: '>= 0.8'}

  unraw@3.0.0:
    resolution: {integrity: sha512-08/DA66UF65OlpUDIQtbJyrqTR0jTAlJ+jsnkQ4jxR7+K5g5YG1APZKQSMCE1vqqmD+2pv6+IdEjmopFatacvg==}

  update-browserslist-db@1.1.0:
    resolution: {integrity: sha512-EdRAaAyk2cUE1wOf2DkEhzxqOQvFOoRJFNS6NeyJ01Gp2beMRpBAINjM2iDXE3KCuKhwnvHIQCJm6ThL2Z+HzQ==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  upper-case-first@2.0.2:
    resolution: {integrity: sha512-514ppYHBaKwfJRK/pNC6c/OxfGa0obSnAl106u97Ed0I625Nin96KAjttZF6ZL3e1XLtphxnqrOi9iWgm+u+bg==}

  upper-case@2.0.2:
    resolution: {integrity: sha512-KgdgDGJt2TpuwBUIjgG6lzw2GWFRCW9Qkfkiv0DxqHHLYJHmtmdUIKcZd8rHgFSjopVTlw6ggzCm1b8MFQwikg==}

  uqr@0.1.2:
    resolution: {integrity: sha512-MJu7ypHq6QasgF5YRTjqscSzQp/W11zoUk6kvmlH+fmWEs63Y0Eib13hYFwAzagRJcVY8WVnlV+eBDUGMJ5IbA==}

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  urlpattern-polyfill@10.0.0:
    resolution: {integrity: sha512-H/A06tKD7sS1O1X2SshBVeA5FLycRpjqiBeqGKmBwBDBy28EnRjORxTNe269KSSr5un5qyWi1iL61wLxpd+ZOg==}

  urlpattern-polyfill@8.0.2:
    resolution: {integrity: sha512-Qp95D4TPJl1kC9SKigDcqgyM2VDVO4RiJc2d4qe5GrYm+zbIQCWWKAFaJNQ4BhdFeDGwBmAxqJBwWSJDb9T3BQ==}

  usehooks-ts@3.1.0:
    resolution: {integrity: sha512-bBIa7yUyPhE1BCc0GmR96VU/15l/9gP1Ch5mYdLcFBaFGQsdmXkvjV0TtOqW1yUd6VjIwDunm+flSciCQXujiw==}
    engines: {node: '>=16.15.0'}
    peerDependencies:
      react: ^16.8.0  || ^17 || ^18

  utf-8-validate@5.0.10:
    resolution: {integrity: sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==}
    engines: {node: '>=6.14.2'}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  utils-merge@1.0.1:
    resolution: {integrity: sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==}
    engines: {node: '>= 0.4.0'}

  uuid@10.0.0:
    resolution: {integrity: sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==}
    hasBin: true

  uuid@8.3.2:
    resolution: {integrity: sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==}
    hasBin: true

  uuid@9.0.1:
    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
    hasBin: true

  v8-compile-cache-lib@3.0.1:
    resolution: {integrity: sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==}

  v8-to-istanbul@9.3.0:
    resolution: {integrity: sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==}
    engines: {node: '>=10.12.0'}

  validate-npm-package-license@3.0.4:
    resolution: {integrity: sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==}

  value-or-promise@1.0.12:
    resolution: {integrity: sha512-Z6Uz+TYwEqE7ZN50gwn+1LCVo9ZVrpxRPOhOLnncYkY1ZzOYtrX8Fwf/rFktZ8R5mJms6EZf5TqNOMeZmnPq9Q==}
    engines: {node: '>=12'}

  varuint-bitcoin@1.1.2:
    resolution: {integrity: sha512-4EVb+w4rx+YfVM32HQX42AbbT7/1f5zwAYhIujKXKk8NQK+JfRVl3pqT3hjNn/L+RstigmGGKVwHA/P0wgITZw==}

  vary@1.1.2:
    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}
    engines: {node: '>= 0.8'}

  vscode-languageserver-textdocument@1.0.12:
    resolution: {integrity: sha512-cxWNPesCnQCcMPeenjKKsOCKQZ/L6Tv19DTRIGuLWe32lyzWhihGVJ/rcckZXJxfdKCFvRLS3fpBIsV/ZGX4zA==}

  vscode-uri@3.0.8:
    resolution: {integrity: sha512-AyFQ0EVmsOZOlAnxoFOGOq1SQDWAB7C6aqMGS23svWAllfOaxbuFvcT8D1i8z3Gyn8fraVeZNNmN6e9bxxXkKw==}

  walker@1.0.8:
    resolution: {integrity: sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==}

  watchpack@2.4.1:
    resolution: {integrity: sha512-8wrBCMtVhqcXP2Sup1ctSkga6uc2Bx0IIvKyT7yTFier5AXHooSI+QyQQAtTb7+E0IUCCKyTFmXqdqgum2XWGg==}
    engines: {node: '>=10.13.0'}

  wcwidth@1.0.1:
    resolution: {integrity: sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==}

  web-streams-polyfill@3.3.3:
    resolution: {integrity: sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==}
    engines: {node: '>= 8'}

  webcrypto-core@1.8.0:
    resolution: {integrity: sha512-kR1UQNH8MD42CYuLzvibfakG5Ew5seG85dMMoAM/1LqvckxaF6pUiidLuraIu4V+YCIFabYecUZAW0TuxAoaqw==}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  webidl-conversions@4.0.2:
    resolution: {integrity: sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==}

  webpack-node-externals@3.0.0:
    resolution: {integrity: sha512-LnL6Z3GGDPht/AigwRh2dvL9PQPFQ8skEpVrWZXLWBYmqcaojHNN0onvHzie6rq7EWKrrBfPYqNEzTJgiwEQDQ==}
    engines: {node: '>=6'}

  webpack-sources@3.2.3:
    resolution: {integrity: sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==}
    engines: {node: '>=10.13.0'}

  webpack@5.92.1:
    resolution: {integrity: sha512-JECQ7IwJb+7fgUFBlrJzbyu3GEuNBcdqr1LD7IbSzwkSmIevTm8PF+wej3Oxuz/JFBUZ6O1o43zsPkwm1C4TmA==}
    engines: {node: '>=10.13.0'}
    hasBin: true
    peerDependencies:
      webpack-cli: '*'
    peerDependenciesMeta:
      webpack-cli:
        optional: true

  whatwg-mimetype@3.0.0:
    resolution: {integrity: sha512-nt+N2dzIutVRxARx1nghPKGv1xHikU7HKdfafKkLNLindmPU/ch3U31NOCGGA/dmPcmb1VlofO0vnKAcsm0o/Q==}
    engines: {node: '>=12'}

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  whatwg-url@7.1.0:
    resolution: {integrity: sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==}

  which-boxed-primitive@1.0.2:
    resolution: {integrity: sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==}

  which-builtin-type@1.1.4:
    resolution: {integrity: sha512-bppkmBSsHFmIMSl8BO9TbsyzsvGjVoppt8xUiGzwiu/bhDCGxnpOKCxgqj6GuyHE0mINMDecBFPlOm2hzY084w==}
    engines: {node: '>= 0.4'}

  which-collection@1.0.2:
    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
    engines: {node: '>= 0.4'}

  which-module@2.0.1:
    resolution: {integrity: sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ==}

  which-pm@2.0.0:
    resolution: {integrity: sha512-Lhs9Pmyph0p5n5Z3mVnN0yWcbQYUAD7rbQUiMsQxOJ3T57k7RFe35SUwWMf7dsbDZks1uOmw4AecB/JMDj3v/w==}
    engines: {node: '>=8.15'}

  which-typed-array@1.1.15:
    resolution: {integrity: sha512-oV0jmFtUky6CXfkqehVvBP/LSWJ2sy4vWMioiENyJLePrBO/yKyV9OyJySfAKosh+RYkIl5zJCNZ8/4JncrpdA==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  widest-line@3.1.0:
    resolution: {integrity: sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==}
    engines: {node: '>=8'}

  wif@2.0.6:
    resolution: {integrity: sha512-HIanZn1zmduSF+BQhkE+YXIbEiH0xPr1012QbFEGB0xsKqJii0/SqJjyn8dFv6y36kOznMgMB+LGcbZTJ1xACQ==}

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@6.2.0:
    resolution: {integrity: sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==}
    engines: {node: '>=8'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrap-ansi@9.0.0:
    resolution: {integrity: sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==}
    engines: {node: '>=18'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  write-file-atomic@4.0.2:
    resolution: {integrity: sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==}
    engines: {node: ^12.13.0 || ^14.15.0 || >=16.0.0}

  ws@7.5.10:
    resolution: {integrity: sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==}
    engines: {node: '>=8.3.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: ^5.0.2
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  ws@8.17.1:
    resolution: {integrity: sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  ws@8.18.0:
    resolution: {integrity: sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  ws@8.3.0:
    resolution: {integrity: sha512-Gs5EZtpqZzLvmIM59w4igITU57lrtYVFneaa434VROv4thzJyV6UjIL3D42lslWlI+D4KzLYnxSwtfuiO79sNw==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: ^5.0.2
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  wscat@5.2.1:
    resolution: {integrity: sha512-exfNiRWipig9UsMHB7MSoZi2uHISX1/9XbSBA006MOzKkt/LUqnzF3bwetAZWumzUQe9NtskRBDillmxPH79Fg==}
    hasBin: true

  xdg-basedir@5.1.0:
    resolution: {integrity: sha512-GCPAHLvrIH13+c0SuacwvRYj2SxJXQ4kaVTT5xgL3kPrz56XxkF21IGhjSE1+W0aw7gpBWRGXLCPnPby6lSpmQ==}
    engines: {node: '>=12'}

  xss@1.0.15:
    resolution: {integrity: sha512-FVdlVVC67WOIPvfOwhoMETV72f6GbW7aOabBC3WxN/oUdoEMDyLz4OgRv5/gck2ZeNqEQu+Tb0kloovXOfpYVg==}
    engines: {node: '>= 0.10.0'}
    hasBin: true

  xtend@4.0.2:
    resolution: {integrity: sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==}
    engines: {node: '>=0.4'}

  y18n@4.0.3:
    resolution: {integrity: sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==}

  y18n@5.0.8:
    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
    engines: {node: '>=10'}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yallist@4.0.0:
    resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}

  yaml-ast-parser@0.0.43:
    resolution: {integrity: sha512-2PTINUwsRqSd+s8XxKaJWQlUuEMHJQyEuh2edBbW8KNJz0SJPwUSD2zRWqezFEdN7IzAgeuYHFUCF7o8zRdZ0A==}

  yaml@1.10.2:
    resolution: {integrity: sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==}
    engines: {node: '>= 6'}

  yaml@2.5.0:
    resolution: {integrity: sha512-2wWLbGbYDiSqqIKoPjar3MPgB94ErzCtrNE1FdqGuaO0pi2JGjmE8aW8TDZwzU7vuxcGRdL/4gPQwQ7hD5AMSw==}
    engines: {node: '>= 14'}
    hasBin: true

  yargs-parser@18.1.3:
    resolution: {integrity: sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==}
    engines: {node: '>=6'}

  yargs-parser@21.1.1:
    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
    engines: {node: '>=12'}

  yargs@15.4.1:
    resolution: {integrity: sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==}
    engines: {node: '>=8'}

  yargs@17.7.2:
    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
    engines: {node: '>=12'}

  yn@3.1.1:
    resolution: {integrity: sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==}
    engines: {node: '>=6'}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  zen-observable-ts@1.2.5:
    resolution: {integrity: sha512-QZWQekv6iB72Naeake9hS1KxHlotfRpe+WGNbNx5/ta+R3DNjVO2bswf63gXlWDcs+EMd7XY8HfVQyP1X6T4Zg==}

  zen-observable@0.8.15:
    resolution: {integrity: sha512-PQ2PC7R9rslx84ndNBZB/Dkv8V8fZEpk83RLgXtYd0fwUgEjseMn1Dgajh2x6S8QbZAFa9p2qVCEuYZNgve0dQ==}

  zod@3.23.8:
    resolution: {integrity: sha512-XBx9AXhXktjUqnepgTiE5flcKIYWi/rme0Eaj+5Y0lftuGBq+jyRu/md4WnuxqgP1ubdpNCsYEYPxrzVHD8d6g==}

snapshots:

  '@0no-co/graphql.web@1.0.7(graphql@16.9.0)':
    optionalDependencies:
      graphql: 16.9.0

  '@0no-co/graphqlsp@1.12.12(graphql@16.9.0)(typescript@5.5.3)':
    dependencies:
      '@gql.tada/internal': 1.0.6(graphql@16.9.0)(typescript@5.5.3)
      graphql: 16.9.0
      typescript: 5.5.3

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25

  '@angular-devkit/core@17.3.8(chokidar@3.6.0)':
    dependencies:
      ajv: 8.12.0
      ajv-formats: 2.1.1(ajv@8.12.0)
      jsonc-parser: 3.2.1
      picomatch: 4.0.1
      rxjs: 7.8.1
      source-map: 0.7.4
    optionalDependencies:
      chokidar: 3.6.0

  '@angular-devkit/schematics-cli@17.3.8(chokidar@3.6.0)':
    dependencies:
      '@angular-devkit/core': 17.3.8(chokidar@3.6.0)
      '@angular-devkit/schematics': 17.3.8(chokidar@3.6.0)
      ansi-colors: 4.1.3
      inquirer: 9.2.15
      symbol-observable: 4.0.0
      yargs-parser: 21.1.1
    transitivePeerDependencies:
      - chokidar

  '@angular-devkit/schematics@17.3.8(chokidar@3.6.0)':
    dependencies:
      '@angular-devkit/core': 17.3.8(chokidar@3.6.0)
      jsonc-parser: 3.2.1
      magic-string: 0.30.8
      ora: 5.4.1
      rxjs: 7.8.1
    transitivePeerDependencies:
      - chokidar

  '@apollo/cache-control-types@1.0.3(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0

  '@apollo/client@3.11.2(@types/react@18.3.3)(graphql-ws@5.16.0(graphql@16.9.0))(graphql@16.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(subscriptions-transport-ws@0.11.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10))':
    dependencies:
      '@graphql-typed-document-node/core': 3.2.0(graphql@16.9.0)
      '@wry/caches': 1.0.1
      '@wry/equality': 0.5.7
      '@wry/trie': 0.5.0
      graphql: 16.9.0
      graphql-tag: 2.12.6(graphql@16.9.0)
      hoist-non-react-statics: 3.3.2
      optimism: 0.18.0
      prop-types: 15.8.1
      rehackt: 0.1.0(@types/react@18.3.3)(react@18.3.1)
      response-iterator: 0.2.6
      symbol-observable: 4.0.0
      ts-invariant: 0.10.3
      tslib: 2.6.3
      zen-observable-ts: 1.2.5
    optionalDependencies:
      graphql-ws: 5.16.0(graphql@16.9.0)
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      subscriptions-transport-ws: 0.11.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)
    transitivePeerDependencies:
      - '@types/react'

  '@apollo/protobufjs@1.2.6':
    dependencies:
      '@protobufjs/aspromise': 1.1.2
      '@protobufjs/base64': 1.1.2
      '@protobufjs/codegen': 2.0.4
      '@protobufjs/eventemitter': 1.1.0
      '@protobufjs/fetch': 1.1.0
      '@protobufjs/float': 1.0.2
      '@protobufjs/inquire': 1.1.0
      '@protobufjs/path': 1.1.2
      '@protobufjs/pool': 1.1.0
      '@protobufjs/utf8': 1.1.0
      '@types/long': 4.0.2
      '@types/node': 10.17.60
      long: 4.0.0

  '@apollo/protobufjs@1.2.7':
    dependencies:
      '@protobufjs/aspromise': 1.1.2
      '@protobufjs/base64': 1.1.2
      '@protobufjs/codegen': 2.0.4
      '@protobufjs/eventemitter': 1.1.0
      '@protobufjs/fetch': 1.1.0
      '@protobufjs/float': 1.0.2
      '@protobufjs/inquire': 1.1.0
      '@protobufjs/path': 1.1.2
      '@protobufjs/pool': 1.1.0
      '@protobufjs/utf8': 1.1.0
      '@types/long': 4.0.2
      long: 4.0.0

  '@apollo/server-gateway-interface@1.1.1(graphql@16.9.0)':
    dependencies:
      '@apollo/usage-reporting-protobuf': 4.1.1
      '@apollo/utils.fetcher': 2.0.1
      '@apollo/utils.keyvaluecache': 2.1.1
      '@apollo/utils.logger': 2.0.1
      graphql: 16.9.0

  '@apollo/server-plugin-landing-page-graphql-playground@4.0.0(@apollo/server@4.11.0(graphql@16.9.0))':
    dependencies:
      '@apollo/server': 4.11.0(graphql@16.9.0)
      '@apollographql/graphql-playground-html': 1.6.29

  '@apollo/server-plugin-response-cache@4.1.3(@apollo/server@4.11.0(graphql@16.9.0))(graphql@16.9.0)':
    dependencies:
      '@apollo/server': 4.11.0(graphql@16.9.0)
      '@apollo/utils.createhash': 2.0.1
      '@apollo/utils.keyvaluecache': 2.1.1
      graphql: 16.9.0

  '@apollo/server@4.11.0(graphql@16.9.0)':
    dependencies:
      '@apollo/cache-control-types': 1.0.3(graphql@16.9.0)
      '@apollo/server-gateway-interface': 1.1.1(graphql@16.9.0)
      '@apollo/usage-reporting-protobuf': 4.1.1
      '@apollo/utils.createhash': 2.0.1
      '@apollo/utils.fetcher': 2.0.1
      '@apollo/utils.isnodelike': 2.0.1
      '@apollo/utils.keyvaluecache': 2.1.1
      '@apollo/utils.logger': 2.0.1
      '@apollo/utils.usagereporting': 2.1.0(graphql@16.9.0)
      '@apollo/utils.withrequired': 2.0.1
      '@graphql-tools/schema': 9.0.19(graphql@16.9.0)
      '@types/express': 4.17.21
      '@types/express-serve-static-core': 4.19.5
      '@types/node-fetch': 2.6.11
      async-retry: 1.3.3
      cors: 2.8.5
      express: 4.19.2
      graphql: 16.9.0
      loglevel: 1.9.2
      lru-cache: 7.18.3
      negotiator: 0.6.3
      node-abort-controller: 3.1.1
      node-fetch: 2.7.0
      uuid: 9.0.1
      whatwg-mimetype: 3.0.0
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@apollo/usage-reporting-protobuf@4.1.1':
    dependencies:
      '@apollo/protobufjs': 1.2.7

  '@apollo/utils.createhash@2.0.1':
    dependencies:
      '@apollo/utils.isnodelike': 2.0.1
      sha.js: 2.4.11

  '@apollo/utils.dropunuseddefinitions@2.0.1(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0

  '@apollo/utils.fetcher@2.0.1': {}

  '@apollo/utils.isnodelike@2.0.1': {}

  '@apollo/utils.keyvaluecache@1.0.2':
    dependencies:
      '@apollo/utils.logger': 1.0.1
      lru-cache: 7.13.1

  '@apollo/utils.keyvaluecache@2.1.1':
    dependencies:
      '@apollo/utils.logger': 2.0.1
      lru-cache: 7.18.3

  '@apollo/utils.logger@1.0.1': {}

  '@apollo/utils.logger@2.0.1': {}

  '@apollo/utils.printwithreducedwhitespace@2.0.1(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0

  '@apollo/utils.removealiases@2.0.1(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0

  '@apollo/utils.sortast@2.0.1(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0
      lodash.sortby: 4.7.0

  '@apollo/utils.stripsensitiveliterals@2.0.1(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0

  '@apollo/utils.usagereporting@2.1.0(graphql@16.9.0)':
    dependencies:
      '@apollo/usage-reporting-protobuf': 4.1.1
      '@apollo/utils.dropunuseddefinitions': 2.0.1(graphql@16.9.0)
      '@apollo/utils.printwithreducedwhitespace': 2.0.1(graphql@16.9.0)
      '@apollo/utils.removealiases': 2.0.1(graphql@16.9.0)
      '@apollo/utils.sortast': 2.0.1(graphql@16.9.0)
      '@apollo/utils.stripsensitiveliterals': 2.0.1(graphql@16.9.0)
      graphql: 16.9.0

  '@apollo/utils.withrequired@2.0.1': {}

  '@apollographql/graphql-playground-html@1.6.29':
    dependencies:
      xss: 1.0.15

  '@ardatan/relay-compiler@12.0.0(graphql@16.9.0)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/generator': 7.25.0
      '@babel/parser': 7.25.3
      '@babel/runtime': 7.25.0
      '@babel/traverse': 7.25.3
      '@babel/types': 7.25.2
      babel-preset-fbjs: 3.4.0(@babel/core@7.24.7)
      chalk: 4.1.2
      fb-watchman: 2.0.2
      fbjs: 3.0.5
      glob: 7.2.3
      graphql: 16.9.0
      immutable: 3.7.6
      invariant: 2.2.4
      nullthrows: 1.1.1
      relay-runtime: 12.0.0
      signedsource: 1.0.0
      yargs: 15.4.1
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@ardatan/sync-fetch@0.0.1':
    dependencies:
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  '@ark-ui/anatomy@3.4.0(@internationalized/date@3.5.5)':
    dependencies:
      '@zag-js/accordion': 0.58.2
      '@zag-js/anatomy': 0.58.2
      '@zag-js/avatar': 0.58.2
      '@zag-js/carousel': 0.58.2
      '@zag-js/checkbox': 0.58.2
      '@zag-js/clipboard': 0.58.2
      '@zag-js/collapsible': 0.58.2
      '@zag-js/color-picker': 0.58.2
      '@zag-js/color-utils': 0.58.2
      '@zag-js/combobox': 0.58.2
      '@zag-js/date-picker': 0.58.2
      '@zag-js/date-utils': 0.58.2(@internationalized/date@3.5.5)
      '@zag-js/dialog': 0.58.2
      '@zag-js/editable': 0.58.2
      '@zag-js/file-upload': 0.58.2
      '@zag-js/hover-card': 0.58.2
      '@zag-js/menu': 0.58.2
      '@zag-js/number-input': 0.58.2
      '@zag-js/pagination': 0.58.2
      '@zag-js/pin-input': 0.58.2
      '@zag-js/popover': 0.58.2
      '@zag-js/presence': 0.58.2
      '@zag-js/progress': 0.58.2
      '@zag-js/qr-code': 0.58.2
      '@zag-js/radio-group': 0.58.2
      '@zag-js/rating-group': 0.58.2
      '@zag-js/select': 0.58.2
      '@zag-js/signature-pad': 0.58.2
      '@zag-js/slider': 0.58.2
      '@zag-js/splitter': 0.58.2
      '@zag-js/switch': 0.58.2
      '@zag-js/tabs': 0.58.2
      '@zag-js/tags-input': 0.58.2
      '@zag-js/toast': 0.58.2
      '@zag-js/toggle-group': 0.58.2
      '@zag-js/tooltip': 0.58.2
      '@zag-js/tree-view': 0.58.2
    transitivePeerDependencies:
      - '@internationalized/date'

  '@ark-ui/react@3.12.1(react-dom@18.3.1(react@18.3.1))(react@18.3.1)':
    dependencies:
      '@internationalized/date': 3.5.5
      '@zag-js/accordion': 0.68.1
      '@zag-js/anatomy': 0.68.1
      '@zag-js/avatar': 0.68.1
      '@zag-js/carousel': 0.68.1
      '@zag-js/checkbox': 0.68.1
      '@zag-js/clipboard': 0.68.1
      '@zag-js/collapsible': 0.68.1
      '@zag-js/color-picker': 0.68.1
      '@zag-js/color-utils': 0.68.1
      '@zag-js/combobox': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/date-picker': 0.68.1
      '@zag-js/date-utils': 0.68.1(@internationalized/date@3.5.5)
      '@zag-js/dialog': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/editable': 0.68.1
      '@zag-js/file-upload': 0.68.1
      '@zag-js/file-utils': 0.68.1
      '@zag-js/highlight-word': 0.68.1
      '@zag-js/hover-card': 0.68.1
      '@zag-js/i18n-utils': 0.68.1
      '@zag-js/menu': 0.68.1
      '@zag-js/number-input': 0.68.1
      '@zag-js/pagination': 0.68.1
      '@zag-js/pin-input': 0.68.1
      '@zag-js/popover': 0.68.1
      '@zag-js/presence': 0.68.1
      '@zag-js/progress': 0.68.1
      '@zag-js/qr-code': 0.68.1
      '@zag-js/radio-group': 0.68.1
      '@zag-js/rating-group': 0.68.1
      '@zag-js/react': 0.68.1(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@zag-js/select': 0.68.1
      '@zag-js/signature-pad': 0.68.1
      '@zag-js/slider': 0.68.1
      '@zag-js/splitter': 0.68.1
      '@zag-js/steps': 0.68.1
      '@zag-js/switch': 0.68.1
      '@zag-js/tabs': 0.68.1
      '@zag-js/tags-input': 0.68.1
      '@zag-js/time-picker': 0.68.1
      '@zag-js/timer': 0.68.1
      '@zag-js/toast': 0.68.1
      '@zag-js/toggle-group': 0.68.1
      '@zag-js/tooltip': 0.68.1
      '@zag-js/tree-view': 0.68.1
      '@zag-js/types': 0.68.1
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)

  '@as-integrations/fastify@2.1.1(@apollo/server@4.11.0(graphql@16.9.0))(fastify@4.28.1)':
    dependencies:
      '@apollo/server': 4.11.0(graphql@16.9.0)
      fastify: 4.28.1
      fastify-plugin: 4.5.1

  '@babel/code-frame@7.24.7':
    dependencies:
      '@babel/highlight': 7.24.7
      picocolors: 1.0.1

  '@babel/compat-data@7.24.7': {}

  '@babel/compat-data@7.25.2': {}

  '@babel/core@7.24.7':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.24.7
      '@babel/helper-compilation-targets': 7.24.7
      '@babel/helper-module-transforms': 7.24.7(@babel/core@7.24.7)
      '@babel/helpers': 7.24.7
      '@babel/parser': 7.24.8
      '@babel/template': 7.24.7
      '@babel/traverse': 7.24.7
      '@babel/types': 7.24.9
      convert-source-map: 2.0.0
      debug: 4.3.6
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.24.7':
    dependencies:
      '@babel/types': 7.24.9
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 2.5.2

  '@babel/generator@7.25.0':
    dependencies:
      '@babel/types': 7.25.2
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 2.5.2

  '@babel/helper-annotate-as-pure@7.24.7':
    dependencies:
      '@babel/types': 7.25.2

  '@babel/helper-builder-binary-assignment-operator-visitor@7.24.7':
    dependencies:
      '@babel/traverse': 7.24.7
      '@babel/types': 7.24.9
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-compilation-targets@7.24.7':
    dependencies:
      '@babel/compat-data': 7.24.7
      '@babel/helper-validator-option': 7.24.7
      browserslist: 4.23.2
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-compilation-targets@7.25.2':
    dependencies:
      '@babel/compat-data': 7.25.2
      '@babel/helper-validator-option': 7.24.8
      browserslist: 4.23.2
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-create-class-features-plugin@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-annotate-as-pure': 7.24.7
      '@babel/helper-member-expression-to-functions': 7.24.8
      '@babel/helper-optimise-call-expression': 7.24.7
      '@babel/helper-replace-supers': 7.25.0(@babel/core@7.24.7)
      '@babel/helper-skip-transparent-expression-wrappers': 7.24.7
      '@babel/traverse': 7.25.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-create-regexp-features-plugin@7.25.2(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-annotate-as-pure': 7.24.7
      regexpu-core: 5.3.2
      semver: 6.3.1

  '@babel/helper-define-polyfill-provider@0.6.2(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-compilation-targets': 7.25.2
      '@babel/helper-plugin-utils': 7.24.8
      debug: 4.3.6
      lodash.debounce: 4.0.8
      resolve: 1.22.8
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-environment-visitor@7.24.7':
    dependencies:
      '@babel/types': 7.24.9

  '@babel/helper-function-name@7.24.7':
    dependencies:
      '@babel/template': 7.24.7
      '@babel/types': 7.24.9

  '@babel/helper-hoist-variables@7.24.7':
    dependencies:
      '@babel/types': 7.24.9

  '@babel/helper-member-expression-to-functions@7.24.8':
    dependencies:
      '@babel/traverse': 7.25.3
      '@babel/types': 7.24.9
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-imports@7.24.7':
    dependencies:
      '@babel/traverse': 7.24.7
      '@babel/types': 7.24.9
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-environment-visitor': 7.24.7
      '@babel/helper-module-imports': 7.24.7
      '@babel/helper-simple-access': 7.24.7
      '@babel/helper-split-export-declaration': 7.24.7
      '@babel/helper-validator-identifier': 7.24.7
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.25.2(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-module-imports': 7.24.7
      '@babel/helper-simple-access': 7.24.7
      '@babel/helper-validator-identifier': 7.24.7
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-optimise-call-expression@7.24.7':
    dependencies:
      '@babel/types': 7.24.9

  '@babel/helper-plugin-utils@7.24.7': {}

  '@babel/helper-plugin-utils@7.24.8': {}

  '@babel/helper-remap-async-to-generator@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-annotate-as-pure': 7.24.7
      '@babel/helper-wrap-function': 7.25.0
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-replace-supers@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-member-expression-to-functions': 7.24.8
      '@babel/helper-optimise-call-expression': 7.24.7
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-simple-access@7.24.7':
    dependencies:
      '@babel/traverse': 7.24.7
      '@babel/types': 7.24.9
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-skip-transparent-expression-wrappers@7.24.7':
    dependencies:
      '@babel/traverse': 7.24.7
      '@babel/types': 7.24.9
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-split-export-declaration@7.24.7':
    dependencies:
      '@babel/types': 7.24.9

  '@babel/helper-string-parser@7.24.8': {}

  '@babel/helper-validator-identifier@7.24.7': {}

  '@babel/helper-validator-option@7.24.7': {}

  '@babel/helper-validator-option@7.24.8': {}

  '@babel/helper-wrap-function@7.25.0':
    dependencies:
      '@babel/template': 7.25.0
      '@babel/traverse': 7.25.3
      '@babel/types': 7.25.2
    transitivePeerDependencies:
      - supports-color

  '@babel/helpers@7.24.7':
    dependencies:
      '@babel/template': 7.24.7
      '@babel/types': 7.24.9

  '@babel/highlight@7.24.7':
    dependencies:
      '@babel/helper-validator-identifier': 7.24.7
      chalk: 2.4.2
      js-tokens: 4.0.0
      picocolors: 1.0.1

  '@babel/parser@7.24.8':
    dependencies:
      '@babel/types': 7.24.9

  '@babel/parser@7.25.3':
    dependencies:
      '@babel/types': 7.25.2

  '@babel/plugin-bugfix-firefox-class-in-computed-class-key@7.25.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-bugfix-safari-class-field-initializer-scope@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-skip-transparent-expression-wrappers': 7.24.7
      '@babel/plugin-transform-optional-chaining': 7.24.8(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-proposal-class-properties@7.18.6(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-class-features-plugin': 7.25.0(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-proposal-object-rest-spread@7.20.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/compat-data': 7.25.2
      '@babel/core': 7.24.7
      '@babel/helper-compilation-targets': 7.25.2
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-transform-parameters': 7.24.7(@babel/core@7.24.7)

  '@babel/plugin-proposal-private-property-in-object@7.21.0-placeholder-for-preset-env.2(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@babel/plugin-syntax-async-generators@7.8.4(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-bigint@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-class-properties@7.12.13(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-class-static-block@7.14.5(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-dynamic-import@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-export-namespace-from@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-flow@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-import-assertions@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-import-attributes@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-import-meta@7.10.4(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-json-strings@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-jsx@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-numeric-separator@7.10.4(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-object-rest-spread@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-optional-catch-binding@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-optional-chaining@7.8.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-private-property-in-object@7.14.5(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-top-level-await@7.14.5(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-typescript@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-syntax-unicode-sets-regex@7.18.6(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-regexp-features-plugin': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-arrow-functions@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-async-generator-functions@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-remap-async-to-generator': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.24.7)
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-async-to-generator@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-module-imports': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-remap-async-to-generator': 7.25.0(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-block-scoped-functions@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-block-scoping@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-class-properties@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-class-features-plugin': 7.25.0(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-class-static-block@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-class-features-plugin': 7.25.0(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-class-static-block': 7.14.5(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-classes@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-annotate-as-pure': 7.24.7
      '@babel/helper-compilation-targets': 7.25.2
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-replace-supers': 7.25.0(@babel/core@7.24.7)
      '@babel/traverse': 7.25.3
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-computed-properties@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/template': 7.24.7

  '@babel/plugin-transform-destructuring@7.24.8(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-dotall-regex@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-regexp-features-plugin': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-duplicate-keys@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-duplicate-named-capturing-groups-regex@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-regexp-features-plugin': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-dynamic-import@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-dynamic-import': 7.8.3(@babel/core@7.24.7)

  '@babel/plugin-transform-exponentiation-operator@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-builder-binary-assignment-operator-visitor': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-export-namespace-from@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-export-namespace-from': 7.8.3(@babel/core@7.24.7)

  '@babel/plugin-transform-flow-strip-types@7.25.2(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-flow': 7.24.7(@babel/core@7.24.7)

  '@babel/plugin-transform-for-of@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-skip-transparent-expression-wrappers': 7.24.7
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-function-name@7.25.1(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-compilation-targets': 7.25.2
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-json-strings@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-json-strings': 7.8.3(@babel/core@7.24.7)

  '@babel/plugin-transform-literals@7.25.2(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-logical-assignment-operators@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-logical-assignment-operators': 7.10.4(@babel/core@7.24.7)

  '@babel/plugin-transform-member-expression-literals@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-modules-amd@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-module-transforms': 7.24.7(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-modules-commonjs@7.24.8(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-module-transforms': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-simple-access': 7.24.7
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-modules-systemjs@7.25.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-module-transforms': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-validator-identifier': 7.24.7
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-modules-umd@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-module-transforms': 7.24.7(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-named-capturing-groups-regex@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-regexp-features-plugin': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-new-target@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-nullish-coalescing-operator@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-nullish-coalescing-operator': 7.8.3(@babel/core@7.24.7)

  '@babel/plugin-transform-numeric-separator@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-numeric-separator': 7.10.4(@babel/core@7.24.7)

  '@babel/plugin-transform-object-rest-spread@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-compilation-targets': 7.25.2
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-transform-parameters': 7.24.7(@babel/core@7.24.7)

  '@babel/plugin-transform-object-super@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-replace-supers': 7.25.0(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-optional-catch-binding@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-optional-catch-binding': 7.8.3(@babel/core@7.24.7)

  '@babel/plugin-transform-optional-chaining@7.24.8(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-skip-transparent-expression-wrappers': 7.24.7
      '@babel/plugin-syntax-optional-chaining': 7.8.3(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-parameters@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-private-methods@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-class-features-plugin': 7.25.0(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-private-property-in-object@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-annotate-as-pure': 7.24.7
      '@babel/helper-create-class-features-plugin': 7.25.0(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-private-property-in-object': 7.14.5(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-property-literals@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-react-constant-elements@7.25.1(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-react-display-name@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-transform-react-jsx-development@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/plugin-transform-react-jsx': 7.25.2(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-react-jsx@7.25.2(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-annotate-as-pure': 7.24.7
      '@babel/helper-module-imports': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/plugin-syntax-jsx': 7.24.7(@babel/core@7.24.7)
      '@babel/types': 7.25.2
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-react-pure-annotations@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-annotate-as-pure': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7

  '@babel/plugin-transform-regenerator@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      regenerator-transform: 0.15.2

  '@babel/plugin-transform-reserved-words@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-shorthand-properties@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-spread@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-skip-transparent-expression-wrappers': 7.24.7
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-sticky-regex@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-template-literals@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-typeof-symbol@7.24.8(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-typescript@7.25.2(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-annotate-as-pure': 7.24.7
      '@babel/helper-create-class-features-plugin': 7.25.0(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-skip-transparent-expression-wrappers': 7.24.7
      '@babel/plugin-syntax-typescript': 7.24.7(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-unicode-escapes@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-unicode-property-regex@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-regexp-features-plugin': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-unicode-regex@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-regexp-features-plugin': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/plugin-transform-unicode-sets-regex@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-create-regexp-features-plugin': 7.25.2(@babel/core@7.24.7)
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/preset-env@7.25.3(@babel/core@7.24.7)':
    dependencies:
      '@babel/compat-data': 7.25.2
      '@babel/core': 7.24.7
      '@babel/helper-compilation-targets': 7.25.2
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/helper-validator-option': 7.24.8
      '@babel/plugin-bugfix-firefox-class-in-computed-class-key': 7.25.3(@babel/core@7.24.7)
      '@babel/plugin-bugfix-safari-class-field-initializer-scope': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-proposal-private-property-in-object': 7.21.0-placeholder-for-preset-env.2(@babel/core@7.24.7)
      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.24.7)
      '@babel/plugin-syntax-class-static-block': 7.14.5(@babel/core@7.24.7)
      '@babel/plugin-syntax-dynamic-import': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-export-namespace-from': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-import-assertions': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-syntax-import-attributes': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-syntax-import-meta': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-json-strings': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-logical-assignment-operators': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-nullish-coalescing-operator': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-numeric-separator': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-optional-catch-binding': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-optional-chaining': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-private-property-in-object': 7.14.5(@babel/core@7.24.7)
      '@babel/plugin-syntax-top-level-await': 7.14.5(@babel/core@7.24.7)
      '@babel/plugin-syntax-unicode-sets-regex': 7.18.6(@babel/core@7.24.7)
      '@babel/plugin-transform-arrow-functions': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-async-generator-functions': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-transform-async-to-generator': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-block-scoped-functions': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-block-scoping': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-transform-class-properties': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-class-static-block': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-classes': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-transform-computed-properties': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-destructuring': 7.24.8(@babel/core@7.24.7)
      '@babel/plugin-transform-dotall-regex': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-duplicate-keys': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-duplicate-named-capturing-groups-regex': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-transform-dynamic-import': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-exponentiation-operator': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-export-namespace-from': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-for-of': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-function-name': 7.25.1(@babel/core@7.24.7)
      '@babel/plugin-transform-json-strings': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-literals': 7.25.2(@babel/core@7.24.7)
      '@babel/plugin-transform-logical-assignment-operators': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-member-expression-literals': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-modules-amd': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-modules-commonjs': 7.24.8(@babel/core@7.24.7)
      '@babel/plugin-transform-modules-systemjs': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-transform-modules-umd': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-named-capturing-groups-regex': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-new-target': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-nullish-coalescing-operator': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-numeric-separator': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-object-rest-spread': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-object-super': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-optional-catch-binding': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-optional-chaining': 7.24.8(@babel/core@7.24.7)
      '@babel/plugin-transform-parameters': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-private-methods': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-private-property-in-object': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-property-literals': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-regenerator': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-reserved-words': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-shorthand-properties': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-spread': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-sticky-regex': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-template-literals': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-typeof-symbol': 7.24.8(@babel/core@7.24.7)
      '@babel/plugin-transform-unicode-escapes': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-unicode-property-regex': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-unicode-regex': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-unicode-sets-regex': 7.24.7(@babel/core@7.24.7)
      '@babel/preset-modules': 0.1.6-no-external-plugins(@babel/core@7.24.7)
      babel-plugin-polyfill-corejs2: 0.4.11(@babel/core@7.24.7)
      babel-plugin-polyfill-corejs3: 0.10.6(@babel/core@7.24.7)
      babel-plugin-polyfill-regenerator: 0.6.2(@babel/core@7.24.7)
      core-js-compat: 3.38.0
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/preset-modules@0.1.6-no-external-plugins(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/types': 7.24.9
      esutils: 2.0.3

  '@babel/preset-react@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7
      '@babel/helper-validator-option': 7.24.7
      '@babel/plugin-transform-react-display-name': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-react-jsx': 7.25.2(@babel/core@7.24.7)
      '@babel/plugin-transform-react-jsx-development': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-react-pure-annotations': 7.24.7(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/preset-typescript@7.24.7(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-plugin-utils': 7.24.7
      '@babel/helper-validator-option': 7.24.7
      '@babel/plugin-syntax-jsx': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-modules-commonjs': 7.24.8(@babel/core@7.24.7)
      '@babel/plugin-transform-typescript': 7.25.2(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  '@babel/regjsgen@0.8.0': {}

  '@babel/runtime@7.25.0':
    dependencies:
      regenerator-runtime: 0.14.1

  '@babel/template@7.24.7':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/parser': 7.24.8
      '@babel/types': 7.24.9

  '@babel/template@7.25.0':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/parser': 7.25.3
      '@babel/types': 7.25.2

  '@babel/traverse@7.24.7':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.24.7
      '@babel/helper-environment-visitor': 7.24.7
      '@babel/helper-function-name': 7.24.7
      '@babel/helper-hoist-variables': 7.24.7
      '@babel/helper-split-export-declaration': 7.24.7
      '@babel/parser': 7.24.8
      '@babel/types': 7.24.9
      debug: 4.3.6
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/traverse@7.25.3':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.25.0
      '@babel/parser': 7.25.3
      '@babel/template': 7.25.0
      '@babel/types': 7.25.2
      debug: 4.3.6
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.24.9':
    dependencies:
      '@babel/helper-string-parser': 7.24.8
      '@babel/helper-validator-identifier': 7.24.7
      to-fast-properties: 2.0.0

  '@babel/types@7.25.2':
    dependencies:
      '@babel/helper-string-parser': 7.24.8
      '@babel/helper-validator-identifier': 7.24.7
      to-fast-properties: 2.0.0

  '@bcoe/v8-coverage@0.2.3': {}

  '@bitcoinerlab/secp256k1@1.1.1':
    dependencies:
      '@noble/hashes': 1.4.0
      '@noble/secp256k1': 1.7.1

  '@cell-studio/mempool.js@2.5.3(bufferutil@4.0.8)(utf-8-validate@5.0.10)':
    dependencies:
      axios: 1.6.7
      ws: 8.3.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)
    transitivePeerDependencies:
      - bufferutil
      - debug
      - utf-8-validate

  '@ckb-lumos/base@0.22.2':
    dependencies:
      '@ckb-lumos/bi': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@ckb-lumos/toolkit': 0.22.2
      '@types/blake2b': 2.1.3
      '@types/lodash.isequal': 4.5.8
      blake2b: 2.1.4
      js-xxhash: 1.0.4
      lodash.isequal: 4.5.0

  '@ckb-lumos/base@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      '@types/blake2b': 2.1.3
      '@types/lodash.isequal': 4.5.8
      blake2b: 2.1.4
      js-xxhash: 1.0.4
      lodash.isequal: 4.5.0

  '@ckb-lumos/bi@0.22.2':
    dependencies:
      jsbi: 4.3.0

  '@ckb-lumos/bi@0.23.0':
    dependencies:
      jsbi: 4.3.0

  '@ckb-lumos/ckb-indexer@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      cross-fetch: 3.1.8
      events: 3.3.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/codec@0.22.2':
    dependencies:
      '@ckb-lumos/bi': 0.22.2

  '@ckb-lumos/codec@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0

  '@ckb-lumos/common-scripts@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/config-manager': 0.23.0
      '@ckb-lumos/helpers': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      bech32: 2.0.0
      bs58: 5.0.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/config-manager@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@types/deep-freeze-strict': 1.1.2
      deep-freeze-strict: 1.1.1
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/hd@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      bn.js: 5.2.1
      elliptic: 6.5.4
      scrypt-js: 3.0.1
      sha3: 2.1.4
      uuid: 8.3.2

  '@ckb-lumos/helpers@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/config-manager': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      bech32: 2.0.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/light-client@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/ckb-indexer': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      cross-fetch: 3.1.8
      events: 3.3.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/lumos@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      '@ckb-lumos/ckb-indexer': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/common-scripts': 0.23.0
      '@ckb-lumos/config-manager': 0.23.0
      '@ckb-lumos/hd': 0.23.0
      '@ckb-lumos/helpers': 0.23.0
      '@ckb-lumos/light-client': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      '@ckb-lumos/transaction-manager': 0.23.0
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/rpc@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/bi': 0.23.0
      abort-controller: 3.0.0
      cross-fetch: 3.1.8
    transitivePeerDependencies:
      - encoding

  '@ckb-lumos/toolkit@0.22.2':
    dependencies:
      '@ckb-lumos/bi': 0.22.2

  '@ckb-lumos/toolkit@0.23.0':
    dependencies:
      '@ckb-lumos/bi': 0.23.0

  '@ckb-lumos/transaction-manager@0.23.0':
    dependencies:
      '@ckb-lumos/base': 0.23.0
      '@ckb-lumos/ckb-indexer': 0.23.0
      '@ckb-lumos/codec': 0.23.0
      '@ckb-lumos/rpc': 0.23.0
      '@ckb-lumos/toolkit': 0.23.0
      immutable: 4.3.7
    transitivePeerDependencies:
      - encoding

  '@clack/core@0.3.4':
    dependencies:
      picocolors: 1.0.1
      sisteransi: 1.0.5

  '@clack/prompts@0.7.0':
    dependencies:
      '@clack/core': 0.3.4
      picocolors: 1.0.1
      sisteransi: 1.0.5

  '@colors/colors@1.5.0':
    optional: true

  '@cspell/cspell-bundled-dicts@8.13.1':
    dependencies:
      '@cspell/dict-ada': 4.0.2
      '@cspell/dict-aws': 4.0.3
      '@cspell/dict-bash': 4.1.3
      '@cspell/dict-companies': 3.1.4
      '@cspell/dict-cpp': 5.1.12
      '@cspell/dict-cryptocurrencies': 5.0.0
      '@cspell/dict-csharp': 4.0.2
      '@cspell/dict-css': 4.0.12
      '@cspell/dict-dart': 2.0.3
      '@cspell/dict-django': 4.1.0
      '@cspell/dict-docker': 1.1.7
      '@cspell/dict-dotnet': 5.0.2
      '@cspell/dict-elixir': 4.0.3
      '@cspell/dict-en-common-misspellings': 2.0.4
      '@cspell/dict-en-gb': 1.1.33
      '@cspell/dict-en_us': 4.3.23
      '@cspell/dict-filetypes': 3.0.4
      '@cspell/dict-fonts': 4.0.0
      '@cspell/dict-fsharp': 1.0.1
      '@cspell/dict-fullstack': 3.2.0
      '@cspell/dict-gaming-terms': 1.0.5
      '@cspell/dict-git': 3.0.0
      '@cspell/dict-golang': 6.0.9
      '@cspell/dict-google': 1.0.1
      '@cspell/dict-haskell': 4.0.1
      '@cspell/dict-html': 4.0.5
      '@cspell/dict-html-symbol-entities': 4.0.0
      '@cspell/dict-java': 5.0.7
      '@cspell/dict-julia': 1.0.1
      '@cspell/dict-k8s': 1.0.6
      '@cspell/dict-latex': 4.0.0
      '@cspell/dict-lorem-ipsum': 4.0.0
      '@cspell/dict-lua': 4.0.3
      '@cspell/dict-makefile': 1.0.0
      '@cspell/dict-monkeyc': 1.0.6
      '@cspell/dict-node': 5.0.1
      '@cspell/dict-npm': 5.0.18
      '@cspell/dict-php': 4.0.8
      '@cspell/dict-powershell': 5.0.5
      '@cspell/dict-public-licenses': 2.0.7
      '@cspell/dict-python': 4.2.3
      '@cspell/dict-r': 2.0.1
      '@cspell/dict-ruby': 5.0.2
      '@cspell/dict-rust': 4.0.5
      '@cspell/dict-scala': 5.0.3
      '@cspell/dict-software-terms': 4.0.4
      '@cspell/dict-sql': 2.1.4
      '@cspell/dict-svelte': 1.0.2
      '@cspell/dict-swift': 2.0.1
      '@cspell/dict-terraform': 1.0.0
      '@cspell/dict-typescript': 3.1.6
      '@cspell/dict-vue': 3.0.0

  '@cspell/cspell-json-reporter@8.13.1':
    dependencies:
      '@cspell/cspell-types': 8.13.1

  '@cspell/cspell-pipe@8.13.1': {}

  '@cspell/cspell-resolver@8.13.1':
    dependencies:
      global-directory: 4.0.1

  '@cspell/cspell-service-bus@8.13.1': {}

  '@cspell/cspell-types@8.13.1': {}

  '@cspell/dict-ada@4.0.2': {}

  '@cspell/dict-aws@4.0.3': {}

  '@cspell/dict-bash@4.1.3': {}

  '@cspell/dict-companies@3.1.4': {}

  '@cspell/dict-cpp@5.1.12': {}

  '@cspell/dict-cryptocurrencies@5.0.0': {}

  '@cspell/dict-csharp@4.0.2': {}

  '@cspell/dict-css@4.0.12': {}

  '@cspell/dict-dart@2.0.3': {}

  '@cspell/dict-data-science@2.0.1': {}

  '@cspell/dict-django@4.1.0': {}

  '@cspell/dict-docker@1.1.7': {}

  '@cspell/dict-dotnet@5.0.2': {}

  '@cspell/dict-elixir@4.0.3': {}

  '@cspell/dict-en-common-misspellings@2.0.4': {}

  '@cspell/dict-en-gb@1.1.33': {}

  '@cspell/dict-en_us@4.3.23': {}

  '@cspell/dict-filetypes@3.0.4': {}

  '@cspell/dict-fonts@4.0.0': {}

  '@cspell/dict-fsharp@1.0.1': {}

  '@cspell/dict-fullstack@3.2.0': {}

  '@cspell/dict-gaming-terms@1.0.5': {}

  '@cspell/dict-git@3.0.0': {}

  '@cspell/dict-golang@6.0.9': {}

  '@cspell/dict-google@1.0.1': {}

  '@cspell/dict-haskell@4.0.1': {}

  '@cspell/dict-html-symbol-entities@4.0.0': {}

  '@cspell/dict-html@4.0.5': {}

  '@cspell/dict-java@5.0.7': {}

  '@cspell/dict-julia@1.0.1': {}

  '@cspell/dict-k8s@1.0.6': {}

  '@cspell/dict-latex@4.0.0': {}

  '@cspell/dict-lorem-ipsum@4.0.0': {}

  '@cspell/dict-lua@4.0.3': {}

  '@cspell/dict-makefile@1.0.0': {}

  '@cspell/dict-monkeyc@1.0.6': {}

  '@cspell/dict-node@5.0.1': {}

  '@cspell/dict-npm@5.0.18': {}

  '@cspell/dict-php@4.0.8': {}

  '@cspell/dict-powershell@5.0.5': {}

  '@cspell/dict-public-licenses@2.0.7': {}

  '@cspell/dict-python@4.2.3':
    dependencies:
      '@cspell/dict-data-science': 2.0.1

  '@cspell/dict-r@2.0.1': {}

  '@cspell/dict-ruby@5.0.2': {}

  '@cspell/dict-rust@4.0.5': {}

  '@cspell/dict-scala@5.0.3': {}

  '@cspell/dict-software-terms@4.0.4': {}

  '@cspell/dict-sql@2.1.4': {}

  '@cspell/dict-svelte@1.0.2': {}

  '@cspell/dict-swift@2.0.1': {}

  '@cspell/dict-terraform@1.0.0': {}

  '@cspell/dict-typescript@3.1.6': {}

  '@cspell/dict-vue@3.0.0': {}

  '@cspell/dynamic-import@8.13.1':
    dependencies:
      import-meta-resolve: 4.1.0

  '@cspell/strong-weak-map@8.13.1': {}

  '@cspell/url@8.13.1': {}

  '@cspotcode/source-map-support@0.8.1':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.9

  '@csstools/postcss-cascade-layers@4.0.6(postcss@8.4.39)':
    dependencies:
      '@csstools/selector-specificity': 3.1.1(postcss-selector-parser@6.1.0)
      postcss: 8.4.39
      postcss-selector-parser: 6.1.0

  '@csstools/selector-specificity@3.1.1(postcss-selector-parser@6.1.0)':
    dependencies:
      postcss-selector-parser: 6.1.0

  '@esbuild/aix-ppc64@0.20.2':
    optional: true

  '@esbuild/android-arm64@0.17.19':
    optional: true

  '@esbuild/android-arm64@0.20.2':
    optional: true

  '@esbuild/android-arm@0.17.19':
    optional: true

  '@esbuild/android-arm@0.20.2':
    optional: true

  '@esbuild/android-x64@0.17.19':
    optional: true

  '@esbuild/android-x64@0.20.2':
    optional: true

  '@esbuild/darwin-arm64@0.17.19':
    optional: true

  '@esbuild/darwin-arm64@0.20.2':
    optional: true

  '@esbuild/darwin-x64@0.17.19':
    optional: true

  '@esbuild/darwin-x64@0.20.2':
    optional: true

  '@esbuild/freebsd-arm64@0.17.19':
    optional: true

  '@esbuild/freebsd-arm64@0.20.2':
    optional: true

  '@esbuild/freebsd-x64@0.17.19':
    optional: true

  '@esbuild/freebsd-x64@0.20.2':
    optional: true

  '@esbuild/linux-arm64@0.17.19':
    optional: true

  '@esbuild/linux-arm64@0.20.2':
    optional: true

  '@esbuild/linux-arm@0.17.19':
    optional: true

  '@esbuild/linux-arm@0.20.2':
    optional: true

  '@esbuild/linux-ia32@0.17.19':
    optional: true

  '@esbuild/linux-ia32@0.20.2':
    optional: true

  '@esbuild/linux-loong64@0.17.19':
    optional: true

  '@esbuild/linux-loong64@0.20.2':
    optional: true

  '@esbuild/linux-mips64el@0.17.19':
    optional: true

  '@esbuild/linux-mips64el@0.20.2':
    optional: true

  '@esbuild/linux-ppc64@0.17.19':
    optional: true

  '@esbuild/linux-ppc64@0.20.2':
    optional: true

  '@esbuild/linux-riscv64@0.17.19':
    optional: true

  '@esbuild/linux-riscv64@0.20.2':
    optional: true

  '@esbuild/linux-s390x@0.17.19':
    optional: true

  '@esbuild/linux-s390x@0.20.2':
    optional: true

  '@esbuild/linux-x64@0.17.19':
    optional: true

  '@esbuild/linux-x64@0.20.2':
    optional: true

  '@esbuild/netbsd-x64@0.17.19':
    optional: true

  '@esbuild/netbsd-x64@0.20.2':
    optional: true

  '@esbuild/openbsd-x64@0.17.19':
    optional: true

  '@esbuild/openbsd-x64@0.20.2':
    optional: true

  '@esbuild/sunos-x64@0.17.19':
    optional: true

  '@esbuild/sunos-x64@0.20.2':
    optional: true

  '@esbuild/win32-arm64@0.17.19':
    optional: true

  '@esbuild/win32-arm64@0.20.2':
    optional: true

  '@esbuild/win32-ia32@0.17.19':
    optional: true

  '@esbuild/win32-ia32@0.20.2':
    optional: true

  '@esbuild/win32-x64@0.17.19':
    optional: true

  '@esbuild/win32-x64@0.20.2':
    optional: true

  '@eslint-community/eslint-utils@4.4.0(eslint@8.57.0)':
    dependencies:
      eslint: 8.57.0
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.11.0': {}

  '@eslint/eslintrc@2.1.4':
    dependencies:
      ajv: 6.12.6
      debug: 4.3.6
      espree: 9.6.1
      globals: 13.24.0
      ignore: 5.3.1
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@8.57.0': {}

  '@exact-realty/multipart-parser@1.0.14': {}

  '@fastify/ajv-compiler@3.6.0':
    dependencies:
      ajv: 8.17.1
      ajv-formats: 2.1.1(ajv@8.17.1)
      fast-uri: 2.4.0

  '@fastify/cors@9.0.1':
    dependencies:
      fastify-plugin: 4.5.1
      mnemonist: 0.39.6

  '@fastify/error@3.4.1': {}

  '@fastify/fast-json-stringify-compiler@4.3.0':
    dependencies:
      fast-json-stringify: 5.16.1

  '@fastify/formbody@7.4.0':
    dependencies:
      fast-querystring: 1.1.2
      fastify-plugin: 4.5.1

  '@fastify/merge-json-schemas@0.1.1':
    dependencies:
      fast-deep-equal: 3.1.3

  '@fastify/middie@8.3.3':
    dependencies:
      '@fastify/error': 3.4.1
      fastify-plugin: 4.5.1
      path-to-regexp: 6.3.0
      reusify: 1.0.4

  '@floating-ui/core@1.6.5':
    dependencies:
      '@floating-ui/utils': 0.2.5

  '@floating-ui/dom@1.6.10':
    dependencies:
      '@floating-ui/core': 1.6.5
      '@floating-ui/utils': 0.2.8

  '@floating-ui/dom@1.6.5':
    dependencies:
      '@floating-ui/core': 1.6.5
      '@floating-ui/utils': 0.2.5

  '@floating-ui/utils@0.2.5': {}

  '@floating-ui/utils@0.2.8': {}

  '@gql.tada/internal@1.0.6(graphql@16.9.0)(typescript@5.5.3)':
    dependencies:
      '@0no-co/graphql.web': 1.0.7(graphql@16.9.0)
      graphql: 16.9.0
      typescript: 5.5.3

  '@graphql-codegen/add@5.0.3(graphql@16.9.0)':
    dependencies:
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.6.3

  '@graphql-codegen/cli@5.0.2(@parcel/watcher@2.4.1)(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(typescript@5.5.3)(utf-8-validate@5.0.10)':
    dependencies:
      '@babel/generator': 7.25.0
      '@babel/template': 7.25.0
      '@babel/types': 7.25.2
      '@graphql-codegen/client-preset': 4.3.3(graphql@16.9.0)
      '@graphql-codegen/core': 4.0.2(graphql@16.9.0)
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-tools/apollo-engine-loader': 8.0.1(graphql@16.9.0)
      '@graphql-tools/code-file-loader': 8.1.3(graphql@16.9.0)
      '@graphql-tools/git-loader': 8.0.7(graphql@16.9.0)
      '@graphql-tools/github-loader': 8.0.1(@types/node@20.14.10)(graphql@16.9.0)
      '@graphql-tools/graphql-file-loader': 8.0.1(graphql@16.9.0)
      '@graphql-tools/json-file-loader': 8.0.1(graphql@16.9.0)
      '@graphql-tools/load': 8.0.2(graphql@16.9.0)
      '@graphql-tools/prisma-loader': 8.0.4(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)
      '@graphql-tools/url-loader': 8.0.2(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@whatwg-node/fetch': 0.8.8
      chalk: 4.1.2
      cosmiconfig: 8.3.6(typescript@5.5.3)
      debounce: 1.2.1
      detect-indent: 6.1.0
      graphql: 16.9.0
      graphql-config: 5.1.0(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(typescript@5.5.3)(utf-8-validate@5.0.10)
      inquirer: 8.2.6
      is-glob: 4.0.3
      jiti: 1.21.6
      json-to-pretty-yaml: 1.2.2
      listr2: 4.0.5
      log-symbols: 4.1.0
      micromatch: 4.0.7
      shell-quote: 1.8.1
      string-env-interpolation: 1.0.1
      ts-log: 2.2.5
      tslib: 2.6.3
      yaml: 2.5.0
      yargs: 17.7.2
    optionalDependencies:
      '@parcel/watcher': 2.4.1
    transitivePeerDependencies:
      - '@types/node'
      - bufferutil
      - cosmiconfig-toml-loader
      - encoding
      - enquirer
      - supports-color
      - typescript
      - utf-8-validate

  '@graphql-codegen/client-preset@4.3.3(graphql@16.9.0)':
    dependencies:
      '@babel/helper-plugin-utils': 7.24.8
      '@babel/template': 7.25.0
      '@graphql-codegen/add': 5.0.3(graphql@16.9.0)
      '@graphql-codegen/gql-tag-operations': 4.0.9(graphql@16.9.0)
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-codegen/typed-document-node': 5.0.9(graphql@16.9.0)
      '@graphql-codegen/typescript': 4.0.9(graphql@16.9.0)
      '@graphql-codegen/typescript-operations': 4.2.3(graphql@16.9.0)
      '@graphql-codegen/visitor-plugin-common': 5.3.1(graphql@16.9.0)
      '@graphql-tools/documents': 1.0.1(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@graphql-typed-document-node/core': 3.2.0(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.6.3
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@graphql-codegen/core@4.0.2(graphql@16.9.0)':
    dependencies:
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-tools/schema': 10.0.4(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.6.3

  '@graphql-codegen/gql-tag-operations@4.0.9(graphql@16.9.0)':
    dependencies:
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-codegen/visitor-plugin-common': 5.3.1(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      auto-bind: 4.0.0
      graphql: 16.9.0
      tslib: 2.6.3
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@graphql-codegen/plugin-helpers@5.0.4(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      change-case-all: 1.0.15
      common-tags: 1.8.2
      graphql: 16.9.0
      import-from: 4.0.0
      lodash: 4.17.21
      tslib: 2.6.3

  '@graphql-codegen/schema-ast@4.1.0(graphql@16.9.0)':
    dependencies:
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.6.3

  '@graphql-codegen/typed-document-node@5.0.9(graphql@16.9.0)':
    dependencies:
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-codegen/visitor-plugin-common': 5.3.1(graphql@16.9.0)
      auto-bind: 4.0.0
      change-case-all: 1.0.15
      graphql: 16.9.0
      tslib: 2.6.3
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@graphql-codegen/typescript-operations@4.2.3(graphql@16.9.0)':
    dependencies:
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-codegen/typescript': 4.0.9(graphql@16.9.0)
      '@graphql-codegen/visitor-plugin-common': 5.3.1(graphql@16.9.0)
      auto-bind: 4.0.0
      graphql: 16.9.0
      tslib: 2.6.3
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@graphql-codegen/typescript@4.0.9(graphql@16.9.0)':
    dependencies:
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-codegen/schema-ast': 4.1.0(graphql@16.9.0)
      '@graphql-codegen/visitor-plugin-common': 5.3.1(graphql@16.9.0)
      auto-bind: 4.0.0
      graphql: 16.9.0
      tslib: 2.6.3
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@graphql-codegen/visitor-plugin-common@5.3.1(graphql@16.9.0)':
    dependencies:
      '@graphql-codegen/plugin-helpers': 5.0.4(graphql@16.9.0)
      '@graphql-tools/optimize': 2.0.0(graphql@16.9.0)
      '@graphql-tools/relay-operation-optimizer': 7.0.1(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      auto-bind: 4.0.0
      change-case-all: 1.0.15
      dependency-graph: 0.11.0
      graphql: 16.9.0
      graphql-tag: 2.12.6(graphql@16.9.0)
      parse-filepath: 1.0.2
      tslib: 2.6.3
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@graphql-tools/apollo-engine-loader@8.0.1(graphql@16.9.0)':
    dependencies:
      '@ardatan/sync-fetch': 0.0.1
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@whatwg-node/fetch': 0.9.19
      graphql: 16.9.0
      tslib: 2.7.0
    transitivePeerDependencies:
      - encoding

  '@graphql-tools/batch-execute@9.0.4(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      dataloader: 2.2.2
      graphql: 16.9.0
      tslib: 2.7.0
      value-or-promise: 1.0.12

  '@graphql-tools/code-file-loader@8.1.3(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/graphql-tag-pluck': 8.3.2(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      globby: 11.1.0
      graphql: 16.9.0
      tslib: 2.7.0
      unixify: 1.0.0
    transitivePeerDependencies:
      - supports-color

  '@graphql-tools/delegate@10.0.17(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/batch-execute': 9.0.4(graphql@16.9.0)
      '@graphql-tools/executor': 1.3.0(graphql@16.9.0)
      '@graphql-tools/schema': 10.0.4(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      dataloader: 2.2.2
      graphql: 16.9.0
      tslib: 2.7.0

  '@graphql-tools/documents@1.0.1(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0
      lodash.sortby: 4.7.0
      tslib: 2.7.0

  '@graphql-tools/executor-graphql-ws@1.2.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@types/ws': 8.5.11
      graphql: 16.9.0
      graphql-ws: 5.16.0(graphql@16.9.0)
      isomorphic-ws: 5.0.0(ws@8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10))
      tslib: 2.7.0
      ws: 8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  '@graphql-tools/executor-http@1.1.5(@types/node@20.14.10)(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@repeaterjs/repeater': 3.0.6
      '@whatwg-node/fetch': 0.9.19
      extract-files: 11.0.0
      graphql: 16.9.0
      meros: 1.3.0(@types/node@20.14.10)
      tslib: 2.7.0
      value-or-promise: 1.0.12
    transitivePeerDependencies:
      - '@types/node'

  '@graphql-tools/executor-legacy-ws@1.1.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@types/ws': 8.5.11
      graphql: 16.9.0
      isomorphic-ws: 5.0.0(ws@8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10))
      tslib: 2.7.0
      ws: 8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  '@graphql-tools/executor@1.3.0(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@graphql-typed-document-node/core': 3.2.0(graphql@16.9.0)
      '@repeaterjs/repeater': 3.0.6
      graphql: 16.9.0
      tslib: 2.7.0
      value-or-promise: 1.0.12

  '@graphql-tools/git-loader@8.0.7(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/graphql-tag-pluck': 8.3.2(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      is-glob: 4.0.3
      micromatch: 4.0.7
      tslib: 2.7.0
      unixify: 1.0.0
    transitivePeerDependencies:
      - supports-color

  '@graphql-tools/github-loader@8.0.1(@types/node@20.14.10)(graphql@16.9.0)':
    dependencies:
      '@ardatan/sync-fetch': 0.0.1
      '@graphql-tools/executor-http': 1.1.5(@types/node@20.14.10)(graphql@16.9.0)
      '@graphql-tools/graphql-tag-pluck': 8.3.2(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@whatwg-node/fetch': 0.9.19
      graphql: 16.9.0
      tslib: 2.7.0
      value-or-promise: 1.0.12
    transitivePeerDependencies:
      - '@types/node'
      - encoding
      - supports-color

  '@graphql-tools/graphql-file-loader@8.0.1(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/import': 7.0.1(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      globby: 11.1.0
      graphql: 16.9.0
      tslib: 2.7.0
      unixify: 1.0.0

  '@graphql-tools/graphql-tag-pluck@8.3.2(graphql@16.9.0)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/parser': 7.25.3
      '@babel/plugin-syntax-import-assertions': 7.24.7(@babel/core@7.24.7)
      '@babel/traverse': 7.25.3
      '@babel/types': 7.25.2
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.7.0
    transitivePeerDependencies:
      - supports-color

  '@graphql-tools/import@7.0.1(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      resolve-from: 5.0.0
      tslib: 2.7.0

  '@graphql-tools/json-file-loader@8.0.1(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      globby: 11.1.0
      graphql: 16.9.0
      tslib: 2.7.0
      unixify: 1.0.0

  '@graphql-tools/load@8.0.2(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/schema': 10.0.4(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      p-limit: 3.1.0
      tslib: 2.7.0

  '@graphql-tools/merge@8.4.2(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/utils': 9.2.1(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.7.0

  '@graphql-tools/merge@9.0.4(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.6.3

  '@graphql-tools/optimize@2.0.0(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0
      tslib: 2.7.0

  '@graphql-tools/prisma-loader@8.0.4(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)':
    dependencies:
      '@graphql-tools/url-loader': 8.0.2(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@types/js-yaml': 4.0.9
      '@whatwg-node/fetch': 0.9.19
      chalk: 4.1.2
      debug: 4.3.6
      dotenv: 16.4.5
      graphql: 16.9.0
      graphql-request: 6.1.0(graphql@16.9.0)
      http-proxy-agent: 7.0.2
      https-proxy-agent: 7.0.5
      jose: 5.6.3
      js-yaml: 4.1.0
      lodash: 4.17.21
      scuid: 1.1.0
      tslib: 2.7.0
      yaml-ast-parser: 0.0.43
    transitivePeerDependencies:
      - '@types/node'
      - bufferutil
      - encoding
      - supports-color
      - utf-8-validate

  '@graphql-tools/relay-operation-optimizer@7.0.1(graphql@16.9.0)':
    dependencies:
      '@ardatan/relay-compiler': 12.0.0(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.7.0
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@graphql-tools/schema@10.0.4(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/merge': 9.0.4(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.6.3
      value-or-promise: 1.0.12

  '@graphql-tools/schema@9.0.19(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/merge': 8.4.2(graphql@16.9.0)
      '@graphql-tools/utils': 9.2.1(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.6.3
      value-or-promise: 1.0.12

  '@graphql-tools/url-loader@8.0.2(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)':
    dependencies:
      '@ardatan/sync-fetch': 0.0.1
      '@graphql-tools/delegate': 10.0.17(graphql@16.9.0)
      '@graphql-tools/executor-graphql-ws': 1.2.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)
      '@graphql-tools/executor-http': 1.1.5(@types/node@20.14.10)(graphql@16.9.0)
      '@graphql-tools/executor-legacy-ws': 1.1.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      '@graphql-tools/wrap': 10.0.5(graphql@16.9.0)
      '@types/ws': 8.5.11
      '@whatwg-node/fetch': 0.9.19
      graphql: 16.9.0
      isomorphic-ws: 5.0.0(ws@8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10))
      tslib: 2.7.0
      value-or-promise: 1.0.12
      ws: 8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)
    transitivePeerDependencies:
      - '@types/node'
      - bufferutil
      - encoding
      - utf-8-validate

  '@graphql-tools/utils@10.2.3(graphql@16.9.0)':
    dependencies:
      '@graphql-typed-document-node/core': 3.2.0(graphql@16.9.0)
      cross-inspect: 1.0.0
      dset: 3.1.3
      graphql: 16.9.0
      tslib: 2.6.3

  '@graphql-tools/utils@10.3.2(graphql@16.9.0)':
    dependencies:
      '@graphql-typed-document-node/core': 3.2.0(graphql@16.9.0)
      cross-inspect: 1.0.0
      dset: 3.1.3
      graphql: 16.9.0
      tslib: 2.7.0

  '@graphql-tools/utils@9.2.1(graphql@16.9.0)':
    dependencies:
      '@graphql-typed-document-node/core': 3.2.0(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.7.0

  '@graphql-tools/wrap@10.0.5(graphql@16.9.0)':
    dependencies:
      '@graphql-tools/delegate': 10.0.17(graphql@16.9.0)
      '@graphql-tools/schema': 10.0.4(graphql@16.9.0)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      graphql: 16.9.0
      tslib: 2.7.0
      value-or-promise: 1.0.12

  '@graphql-typed-document-node/core@3.2.0(graphql@16.9.0)':
    dependencies:
      graphql: 16.9.0

  '@humanwhocodes/config-array@0.11.14':
    dependencies:
      '@humanwhocodes/object-schema': 2.0.3
      debug: 4.3.6
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/object-schema@2.0.3': {}

  '@internationalized/date@3.5.4':
    dependencies:
      '@swc/helpers': 0.5.12

  '@internationalized/date@3.5.5':
    dependencies:
      '@swc/helpers': 0.5.12

  '@internationalized/number@3.5.3':
    dependencies:
      '@swc/helpers': 0.5.12

  '@ioredis/commands@1.2.0': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@istanbuljs/load-nyc-config@1.1.0':
    dependencies:
      camelcase: 5.3.1
      find-up: 4.1.0
      get-package-type: 0.1.0
      js-yaml: 3.14.1
      resolve-from: 5.0.0

  '@istanbuljs/schema@0.1.3': {}

  '@jest/console@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0

  '@jest/core@29.7.0(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/reporters': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      ci-info: 3.9.0
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-changed-files: 29.7.0
      jest-config: 29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-resolve-dependencies: 29.7.0
      jest-runner: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      jest-watcher: 29.7.0
      micromatch: 4.0.7
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-ansi: 6.0.1
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color
      - ts-node

  '@jest/environment@29.7.0':
    dependencies:
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-mock: 29.7.0

  '@jest/expect-utils@29.7.0':
    dependencies:
      jest-get-type: 29.6.3

  '@jest/expect@29.7.0':
    dependencies:
      expect: 29.7.0
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/fake-timers@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@sinonjs/fake-timers': 10.3.0
      '@types/node': 20.14.10
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-util: 29.7.0

  '@jest/globals@29.7.0':
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/types': 29.6.3
      jest-mock: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/reporters@29.7.0':
    dependencies:
      '@bcoe/v8-coverage': 0.2.3
      '@jest/console': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.25
      '@types/node': 20.14.10
      chalk: 4.1.2
      collect-v8-coverage: 1.0.2
      exit: 0.1.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      istanbul-lib-coverage: 3.2.2
      istanbul-lib-instrument: 6.0.3
      istanbul-lib-report: 3.0.1
      istanbul-lib-source-maps: 4.0.1
      istanbul-reports: 3.1.7
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      jest-worker: 29.7.0
      slash: 3.0.0
      string-length: 4.0.2
      strip-ansi: 6.0.1
      v8-to-istanbul: 9.3.0
    transitivePeerDependencies:
      - supports-color

  '@jest/schemas@29.6.3':
    dependencies:
      '@sinclair/typebox': 0.27.8

  '@jest/source-map@29.6.3':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      callsites: 3.1.0
      graceful-fs: 4.2.11

  '@jest/test-result@29.7.0':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/types': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      collect-v8-coverage: 1.0.2

  '@jest/test-sequencer@29.7.0':
    dependencies:
      '@jest/test-result': 29.7.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      slash: 3.0.0

  '@jest/transform@29.7.0':
    dependencies:
      '@babel/core': 7.24.7
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.25
      babel-plugin-istanbul: 6.1.1
      chalk: 4.1.2
      convert-source-map: 2.0.0
      fast-json-stable-stringify: 2.1.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      micromatch: 4.0.7
      pirates: 4.0.6
      slash: 3.0.0
      write-file-atomic: 4.0.2
    transitivePeerDependencies:
      - supports-color

  '@jest/types@29.6.3':
    dependencies:
      '@jest/schemas': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      '@types/istanbul-reports': 3.0.4
      '@types/node': 20.14.10
      '@types/yargs': 17.0.32
      chalk: 4.1.2

  '@jridgewell/gen-mapping@0.3.5':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/source-map@0.3.6':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@jridgewell/trace-mapping@0.3.9':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@kamilkisiela/fast-url-parser@1.1.4': {}

  '@lingui/babel-plugin-extract-messages@4.11.2': {}

  '@lingui/cli@4.11.2(typescript@5.5.3)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/generator': 7.24.7
      '@babel/parser': 7.24.8
      '@babel/runtime': 7.25.0
      '@babel/types': 7.24.9
      '@lingui/babel-plugin-extract-messages': 4.11.2
      '@lingui/conf': 4.11.2(typescript@5.5.3)
      '@lingui/core': 4.11.2
      '@lingui/format-po': 4.11.2(typescript@5.5.3)
      '@lingui/message-utils': 4.11.2
      babel-plugin-macros: 3.1.0
      chalk: 4.1.2
      chokidar: 3.5.1
      cli-table: 0.3.6
      commander: 10.0.1
      convert-source-map: 2.0.0
      date-fns: 3.6.0
      esbuild: 0.17.19
      glob: 7.2.3
      inquirer: 7.3.3
      micromatch: 4.0.2
      normalize-path: 3.0.0
      ora: 5.4.1
      pathe: 1.1.2
      pkg-up: 3.1.0
      pofile: 1.1.4
      pseudolocale: 2.1.0
      ramda: 0.27.2
      source-map: 0.8.0-beta.0
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@lingui/conf@4.11.2(typescript@5.5.3)':
    dependencies:
      '@babel/runtime': 7.25.0
      chalk: 4.1.2
      cosmiconfig: 8.3.6(typescript@5.5.3)
      jest-validate: 29.7.0
      jiti: 1.21.6
      lodash.get: 4.4.2
    transitivePeerDependencies:
      - typescript

  '@lingui/core@4.11.2':
    dependencies:
      '@babel/runtime': 7.25.0
      '@lingui/message-utils': 4.11.2
      unraw: 3.0.0

  '@lingui/format-po@4.11.2(typescript@5.5.3)':
    dependencies:
      '@lingui/conf': 4.11.2(typescript@5.5.3)
      '@lingui/message-utils': 4.11.2
      date-fns: 3.6.0
      pofile: 1.1.4
    transitivePeerDependencies:
      - typescript

  '@lingui/macro@4.11.2(@lingui/react@4.11.2(react@18.3.1))(babel-plugin-macros@3.1.0)(typescript@5.5.3)':
    dependencies:
      '@babel/runtime': 7.25.0
      '@babel/types': 7.24.9
      '@lingui/conf': 4.11.2(typescript@5.5.3)
      '@lingui/core': 4.11.2
      '@lingui/message-utils': 4.11.2
      '@lingui/react': 4.11.2(react@18.3.1)
      babel-plugin-macros: 3.1.0
    transitivePeerDependencies:
      - typescript

  '@lingui/message-utils@4.11.2':
    dependencies:
      '@messageformat/parser': 5.1.0
      js-sha256: 0.10.1

  '@lingui/react@4.11.2(react@18.3.1)':
    dependencies:
      '@babel/runtime': 7.25.0
      '@lingui/core': 4.11.2
      react: 18.3.1

  '@lingui/swc-plugin@4.0.8(@lingui/macro@4.11.2(@lingui/react@4.11.2(react@18.3.1))(babel-plugin-macros@3.1.0)(typescript@5.5.3))(next@14.2.4(@babel/core@7.24.7)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))':
    dependencies:
      '@lingui/macro': 4.11.2(@lingui/react@4.11.2(react@18.3.1))(babel-plugin-macros@3.1.0)(typescript@5.5.3)
    optionalDependencies:
      next: 14.2.4(@babel/core@7.24.7)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)

  '@ljharb/through@2.3.13':
    dependencies:
      call-bind: 1.0.7

  '@lukeed/csprng@1.1.0': {}

  '@messageformat/parser@5.1.0':
    dependencies:
      moo: 0.5.2

  '@molt/command@0.9.0':
    dependencies:
      '@molt/types': 0.2.0
      alge: 0.8.1
      chalk: 5.3.0
      lodash.camelcase: 4.3.0
      lodash.snakecase: 4.1.1
      readline-sync: 1.4.10
      string-length: 6.0.0
      strip-ansi: 7.1.0
      ts-toolbelt: 9.6.0
      type-fest: 4.23.0
      zod: 3.23.8

  '@molt/types@0.2.0':
    dependencies:
      ts-toolbelt: 9.6.0

  '@msgpackr-extract/msgpackr-extract-darwin-arm64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-darwin-x64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-arm64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-arm@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-x64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-win32-x64@3.0.3':
    optional: true

  '@nervosnetwork/ckb-sdk-core@0.109.1':
    dependencies:
      '@nervosnetwork/ckb-sdk-rpc': 0.109.1
      '@nervosnetwork/ckb-sdk-utils': 0.109.1
      '@nervosnetwork/ckb-types': 0.109.1
      tslib: 2.3.1
    transitivePeerDependencies:
      - debug

  '@nervosnetwork/ckb-sdk-rpc@0.109.1':
    dependencies:
      '@nervosnetwork/ckb-sdk-utils': 0.109.1
      axios: 1.6.7
      tslib: 2.3.1
    transitivePeerDependencies:
      - debug

  '@nervosnetwork/ckb-sdk-utils@0.109.1':
    dependencies:
      '@nervosnetwork/ckb-types': 0.109.1
      bech32: 2.0.0
      elliptic: 6.5.4
      jsbi: 3.1.3
      tslib: 2.3.1

  '@nervosnetwork/ckb-sdk-utils@0.109.3':
    dependencies:
      '@nervosnetwork/ckb-types': 0.109.3
      bech32: 2.0.0
      elliptic: 6.5.4
      jsbi: 3.1.3
      tslib: 2.3.1

  '@nervosnetwork/ckb-types@0.109.1': {}

  '@nervosnetwork/ckb-types@0.109.3': {}

  '@nest-lab/throttler-storage-redis@1.0.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/throttler@6.2.1(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2))(ioredis@5.4.1)(reflect-metadata@0.2.2)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/throttler': 6.2.1(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2)
      ioredis: 5.4.1
      reflect-metadata: 0.2.2
      tslib: 2.7.0

  '@nestjs/apollo@12.2.0(@apollo/server@4.11.0(graphql@16.9.0))(@as-integrations/fastify@2.1.1(@apollo/server@4.11.0(graphql@16.9.0))(fastify@4.28.1))(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/graphql@12.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(bufferutil@4.0.8)(graphql@16.9.0)(reflect-metadata@0.2.2)(ts-morph@21.0.1)(utf-8-validate@5.0.10))(graphql@16.9.0)':
    dependencies:
      '@apollo/server': 4.11.0(graphql@16.9.0)
      '@apollo/server-plugin-landing-page-graphql-playground': 4.0.0(@apollo/server@4.11.0(graphql@16.9.0))
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/graphql': 12.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(bufferutil@4.0.8)(graphql@16.9.0)(reflect-metadata@0.2.2)(ts-morph@21.0.1)(utf-8-validate@5.0.10)
      graphql: 16.9.0
      iterall: 1.3.0
      lodash.omit: 4.5.0
      tslib: 2.6.3
    optionalDependencies:
      '@as-integrations/fastify': 2.1.1(@apollo/server@4.11.0(graphql@16.9.0))(fastify@4.28.1)

  '@nestjs/axios@3.0.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(axios@1.7.2)(rxjs@7.8.1)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      axios: 1.7.2
      rxjs: 7.8.1

  '@nestjs/bull-shared@10.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      tslib: 2.6.3

  '@nestjs/bullmq@10.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(bullmq@5.12.0)':
    dependencies:
      '@nestjs/bull-shared': 10.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      bullmq: 5.12.0
      tslib: 2.6.3

  '@nestjs/cache-manager@2.2.2(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(cache-manager@5.7.4)(rxjs@7.8.1)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      cache-manager: 5.7.4
      rxjs: 7.8.1

  '@nestjs/cli@10.4.2':
    dependencies:
      '@angular-devkit/core': 17.3.8(chokidar@3.6.0)
      '@angular-devkit/schematics': 17.3.8(chokidar@3.6.0)
      '@angular-devkit/schematics-cli': 17.3.8(chokidar@3.6.0)
      '@nestjs/schematics': 10.1.3(chokidar@3.6.0)(typescript@5.3.3)
      chalk: 4.1.2
      chokidar: 3.6.0
      cli-table3: 0.6.5
      commander: 4.1.1
      fork-ts-checker-webpack-plugin: 9.0.2(typescript@5.3.3)(webpack@5.92.1)
      glob: 10.4.2
      inquirer: 8.2.6
      node-emoji: 1.11.0
      ora: 5.4.1
      tree-kill: 1.2.2
      tsconfig-paths: 4.2.0
      tsconfig-paths-webpack-plugin: 4.1.0
      typescript: 5.3.3
      webpack: 5.92.1
      webpack-node-externals: 3.0.0
    transitivePeerDependencies:
      - esbuild
      - uglify-js
      - webpack-cli

  '@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)':
    dependencies:
      iterare: 1.2.1
      reflect-metadata: 0.2.2
      rxjs: 7.8.1
      tslib: 2.6.3
      uid: 2.0.2

  '@nestjs/config@3.2.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(rxjs@7.8.1)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      dotenv: 16.4.5
      dotenv-expand: 10.0.0
      lodash: 4.17.21
      rxjs: 7.8.1

  '@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nuxtjs/opencollective': 0.3.2
      fast-safe-stringify: 2.1.1
      iterare: 1.2.1
      path-to-regexp: 3.2.0
      reflect-metadata: 0.2.2
      rxjs: 7.8.1
      tslib: 2.6.3
      uid: 2.0.2
    optionalDependencies:
      '@nestjs/platform-express': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10)
    transitivePeerDependencies:
      - encoding

  '@nestjs/event-emitter@2.0.4(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      eventemitter2: 6.4.9

  '@nestjs/graphql@12.2.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(bufferutil@4.0.8)(graphql@16.9.0)(reflect-metadata@0.2.2)(ts-morph@21.0.1)(utf-8-validate@5.0.10)':
    dependencies:
      '@graphql-tools/merge': 9.0.4(graphql@16.9.0)
      '@graphql-tools/schema': 10.0.4(graphql@16.9.0)
      '@graphql-tools/utils': 10.2.3(graphql@16.9.0)
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/mapped-types': 2.0.5(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2)
      chokidar: 3.6.0
      fast-glob: 3.3.2
      graphql: 16.9.0
      graphql-tag: 2.12.6(graphql@16.9.0)
      graphql-ws: 5.16.0(graphql@16.9.0)
      lodash: 4.17.21
      normalize-path: 3.0.0
      reflect-metadata: 0.2.2
      subscriptions-transport-ws: 0.11.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)
      tslib: 2.6.3
      uuid: 9.0.1
      ws: 8.17.1(bufferutil@4.0.8)(utf-8-validate@5.0.10)
    optionalDependencies:
      ts-morph: 21.0.1
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  '@nestjs/mapped-types@2.0.5(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      reflect-metadata: 0.2.2

  '@nestjs/platform-express@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      body-parser: 1.20.2
      cors: 2.8.5
      express: 4.19.2
      multer: 1.4.4-lts.1
      tslib: 2.6.3
    transitivePeerDependencies:
      - supports-color
    optional: true

  '@nestjs/platform-fastify@10.4.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))':
    dependencies:
      '@fastify/cors': 9.0.1
      '@fastify/formbody': 7.4.0
      '@fastify/middie': 8.3.3
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      fastify: 4.28.1
      light-my-request: 6.0.0
      path-to-regexp: 3.3.0
      tslib: 2.7.0

  '@nestjs/schedule@4.1.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      cron: 3.1.7
      uuid: 10.0.0

  '@nestjs/schematics@10.1.3(chokidar@3.6.0)(typescript@5.3.3)':
    dependencies:
      '@angular-devkit/core': 17.3.8(chokidar@3.6.0)
      '@angular-devkit/schematics': 17.3.8(chokidar@3.6.0)
      comment-json: 4.2.3
      jsonc-parser: 3.3.1
      pluralize: 8.0.0
      typescript: 5.3.3
    transitivePeerDependencies:
      - chokidar

  '@nestjs/schematics@10.1.3(chokidar@3.6.0)(typescript@5.5.3)':
    dependencies:
      '@angular-devkit/core': 17.3.8(chokidar@3.6.0)
      '@angular-devkit/schematics': 17.3.8(chokidar@3.6.0)
      comment-json: 4.2.3
      jsonc-parser: 3.3.1
      pluralize: 8.0.0
      typescript: 5.5.3
    transitivePeerDependencies:
      - chokidar

  '@nestjs/terminus@10.2.3(@nestjs/axios@3.0.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(axios@1.7.2)(rxjs@7.8.1))(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@prisma/client@5.17.0(prisma@5.17.0))(reflect-metadata@0.2.2)(rxjs@7.8.1)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      boxen: 5.1.2
      check-disk-space: 3.4.0
      reflect-metadata: 0.2.2
      rxjs: 7.8.1
    optionalDependencies:
      '@nestjs/axios': 3.0.3(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(axios@1.7.2)(rxjs@7.8.1)
      '@prisma/client': 5.17.0(prisma@5.17.0)

  '@nestjs/testing@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10))':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      tslib: 2.6.3
    optionalDependencies:
      '@nestjs/platform-express': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10)

  '@nestjs/throttler@6.2.1(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))(reflect-metadata@0.2.2)':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      reflect-metadata: 0.2.2

  '@next/env@14.2.4': {}

  '@next/eslint-plugin-next@14.2.4':
    dependencies:
      glob: 10.3.10

  '@next/swc-darwin-arm64@14.2.4':
    optional: true

  '@next/swc-darwin-x64@14.2.4':
    optional: true

  '@next/swc-linux-arm64-gnu@14.2.4':
    optional: true

  '@next/swc-linux-arm64-musl@14.2.4':
    optional: true

  '@next/swc-linux-x64-gnu@14.2.4':
    optional: true

  '@next/swc-linux-x64-musl@14.2.4':
    optional: true

  '@next/swc-win32-arm64-msvc@14.2.4':
    optional: true

  '@next/swc-win32-ia32-msvc@14.2.4':
    optional: true

  '@next/swc-win32-x64-msvc@14.2.4':
    optional: true

  '@next/third-parties@14.2.13(next@14.2.4(@babel/core@7.24.7)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(react@18.3.1)':
    dependencies:
      next: 14.2.4(@babel/core@7.24.7)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      react: 18.3.1
      third-party-capital: 1.0.20

  '@noble/hashes@1.4.0': {}

  '@noble/secp256k1@1.7.1': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1

  '@nuxtjs/opencollective@0.3.2':
    dependencies:
      chalk: 4.1.2
      consola: 2.15.3
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  '@opentelemetry/api-logs@0.52.1':
    dependencies:
      '@opentelemetry/api': 1.9.0

  '@opentelemetry/api@1.9.0': {}

  '@opentelemetry/context-async-hooks@1.26.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0

  '@opentelemetry/core@1.25.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/semantic-conventions': 1.25.1

  '@opentelemetry/core@1.26.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/semantic-conventions': 1.27.0

  '@opentelemetry/instrumentation-connect@0.38.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
      '@types/connect': 3.4.36
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-express@0.41.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-fastify@0.38.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-fs@0.14.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-graphql@0.42.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-hapi@0.40.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-http@0.52.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.25.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.25.1
      semver: 7.6.3
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-ioredis@0.42.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/redis-common': 0.36.2
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-koa@0.42.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-mongodb@0.46.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/sdk-metrics': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-mongoose@0.40.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-mysql2@0.40.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
      '@opentelemetry/sql-common': 0.40.1(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-mysql@0.40.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
      '@types/mysql': 2.15.22
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-nestjs-core@0.39.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-pg@0.43.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
      '@opentelemetry/sql-common': 0.40.1(@opentelemetry/api@1.9.0)
      '@types/pg': 8.6.1
      '@types/pg-pool': 2.0.4
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation-redis-4@0.41.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/redis-common': 0.36.2
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/instrumentation@0.46.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@types/shimmer': 1.2.0
      import-in-the-middle: 1.7.1
      require-in-the-middle: 7.4.0
      semver: 7.6.3
      shimmer: 1.2.1
    transitivePeerDependencies:
      - supports-color
    optional: true

  '@opentelemetry/instrumentation@0.52.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/api-logs': 0.52.1
      '@types/shimmer': 1.2.0
      import-in-the-middle: 1.11.0
      require-in-the-middle: 7.4.0
      semver: 7.6.3
      shimmer: 1.2.1
    transitivePeerDependencies:
      - supports-color

  '@opentelemetry/redis-common@0.36.2': {}

  '@opentelemetry/resources@1.26.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0

  '@opentelemetry/sdk-metrics@1.26.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/resources': 1.26.0(@opentelemetry/api@1.9.0)

  '@opentelemetry/sdk-trace-base@1.26.0(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/resources': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0

  '@opentelemetry/semantic-conventions@1.25.1': {}

  '@opentelemetry/semantic-conventions@1.27.0': {}

  '@opentelemetry/sql-common@0.40.1(@opentelemetry/api@1.9.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)

  '@pandacss/config@0.42.0':
    dependencies:
      '@pandacss/logger': 0.42.0
      '@pandacss/preset-base': 0.42.0
      '@pandacss/preset-panda': 0.42.0
      '@pandacss/shared': 0.42.0
      '@pandacss/types': 0.42.0
      bundle-n-require: 1.1.1
      escalade: 3.1.2
      merge-anything: 5.1.7
      microdiff: 1.3.2
      typescript: 5.3.3

  '@pandacss/core@0.42.0':
    dependencies:
      '@csstools/postcss-cascade-layers': 4.0.6(postcss@8.4.39)
      '@pandacss/is-valid-prop': 0.42.0
      '@pandacss/logger': 0.42.0
      '@pandacss/shared': 0.42.0
      '@pandacss/token-dictionary': 0.42.0
      '@pandacss/types': 0.42.0
      browserslist: 4.23.1
      hookable: 5.5.3
      lightningcss: 1.25.1
      lodash.merge: 4.6.2
      outdent: 0.8.0
      postcss: 8.4.39
      postcss-discard-duplicates: 7.0.0(postcss@8.4.39)
      postcss-discard-empty: 7.0.0(postcss@8.4.39)
      postcss-merge-rules: 7.0.2(postcss@8.4.39)
      postcss-minify-selectors: 7.0.2(postcss@8.4.39)
      postcss-nested: 6.0.1(postcss@8.4.39)
      postcss-normalize-whitespace: 7.0.0(postcss@8.4.39)
      postcss-selector-parser: 6.1.0
      ts-pattern: 5.0.8

  '@pandacss/dev@0.42.0(typescript@5.5.3)':
    dependencies:
      '@clack/prompts': 0.7.0
      '@pandacss/config': 0.42.0
      '@pandacss/logger': 0.42.0
      '@pandacss/node': 0.42.0(typescript@5.5.3)
      '@pandacss/postcss': 0.42.0(typescript@5.5.3)
      '@pandacss/preset-panda': 0.42.0
      '@pandacss/shared': 0.42.0
      '@pandacss/token-dictionary': 0.42.0
      '@pandacss/types': 0.42.0
      cac: 6.7.14
    transitivePeerDependencies:
      - jsdom
      - typescript

  '@pandacss/extractor@0.42.0(typescript@5.5.3)':
    dependencies:
      '@pandacss/shared': 0.42.0
      ts-evaluator: 1.2.0(typescript@5.5.3)
      ts-morph: 21.0.1
    transitivePeerDependencies:
      - jsdom
      - typescript

  '@pandacss/generator@0.42.0':
    dependencies:
      '@pandacss/core': 0.42.0
      '@pandacss/is-valid-prop': 0.42.0
      '@pandacss/logger': 0.42.0
      '@pandacss/shared': 0.42.0
      '@pandacss/token-dictionary': 0.42.0
      '@pandacss/types': 0.42.0
      javascript-stringify: 2.1.0
      outdent: 0.8.0
      pluralize: 8.0.0
      postcss: 8.4.38
      ts-pattern: 5.0.8

  '@pandacss/is-valid-prop@0.42.0': {}

  '@pandacss/logger@0.42.0':
    dependencies:
      '@pandacss/types': 0.42.0
      kleur: 4.1.5

  '@pandacss/node@0.42.0(typescript@5.5.3)':
    dependencies:
      '@pandacss/config': 0.42.0
      '@pandacss/core': 0.42.0
      '@pandacss/extractor': 0.42.0(typescript@5.5.3)
      '@pandacss/generator': 0.42.0
      '@pandacss/logger': 0.42.0
      '@pandacss/parser': 0.42.0(typescript@5.5.3)
      '@pandacss/shared': 0.42.0
      '@pandacss/token-dictionary': 0.42.0
      '@pandacss/types': 0.42.0
      browserslist: 4.23.1
      chokidar: 3.6.0
      fast-glob: 3.3.2
      file-size: 1.0.0
      filesize: 10.1.2
      fs-extra: 11.2.0
      glob-parent: 6.0.2
      is-glob: 4.0.3
      lodash.merge: 4.6.2
      look-it-up: 2.1.0
      outdent: 0.8.0
      perfect-debounce: 1.0.0
      pkg-types: 1.0.3
      pluralize: 8.0.0
      postcss: 8.4.38
      preferred-pm: 3.1.2
      prettier: 3.2.5
      ts-morph: 21.0.1
      ts-pattern: 5.0.8
      tsconfck: 3.0.2(typescript@5.5.3)
    transitivePeerDependencies:
      - jsdom
      - typescript

  '@pandacss/parser@0.42.0(typescript@5.5.3)':
    dependencies:
      '@pandacss/config': 0.42.0
      '@pandacss/core': 0.42.0
      '@pandacss/extractor': 0.42.0(typescript@5.5.3)
      '@pandacss/logger': 0.42.0
      '@pandacss/shared': 0.42.0
      '@pandacss/types': 0.42.0
      '@vue/compiler-sfc': 3.4.19
      magic-string: 0.30.10
      ts-morph: 21.0.1
      ts-pattern: 5.0.8
    transitivePeerDependencies:
      - jsdom
      - typescript

  '@pandacss/postcss@0.42.0(typescript@5.5.3)':
    dependencies:
      '@pandacss/node': 0.42.0(typescript@5.5.3)
      postcss: 8.4.38
    transitivePeerDependencies:
      - jsdom
      - typescript

  '@pandacss/preset-base@0.42.0':
    dependencies:
      '@pandacss/types': 0.42.0

  '@pandacss/preset-panda@0.42.0':
    dependencies:
      '@pandacss/types': 0.42.0

  '@pandacss/shared@0.42.0': {}

  '@pandacss/token-dictionary@0.42.0':
    dependencies:
      '@pandacss/logger': 0.42.0
      '@pandacss/shared': 0.42.0
      '@pandacss/types': 0.42.0
      ts-pattern: 5.0.8

  '@pandacss/types@0.42.0': {}

  '@parcel/watcher-android-arm64@2.4.1':
    optional: true

  '@parcel/watcher-darwin-arm64@2.4.1':
    optional: true

  '@parcel/watcher-darwin-x64@2.4.1':
    optional: true

  '@parcel/watcher-freebsd-x64@2.4.1':
    optional: true

  '@parcel/watcher-linux-arm-glibc@2.4.1':
    optional: true

  '@parcel/watcher-linux-arm64-glibc@2.4.1':
    optional: true

  '@parcel/watcher-linux-arm64-musl@2.4.1':
    optional: true

  '@parcel/watcher-linux-x64-glibc@2.4.1':
    optional: true

  '@parcel/watcher-linux-x64-musl@2.4.1':
    optional: true

  '@parcel/watcher-win32-arm64@2.4.1':
    optional: true

  '@parcel/watcher-win32-ia32@2.4.1':
    optional: true

  '@parcel/watcher-win32-x64@2.4.1':
    optional: true

  '@parcel/watcher@2.4.1':
    dependencies:
      detect-libc: 1.0.3
      is-glob: 4.0.3
      micromatch: 4.0.7
      node-addon-api: 7.1.1
    optionalDependencies:
      '@parcel/watcher-android-arm64': 2.4.1
      '@parcel/watcher-darwin-arm64': 2.4.1
      '@parcel/watcher-darwin-x64': 2.4.1
      '@parcel/watcher-freebsd-x64': 2.4.1
      '@parcel/watcher-linux-arm-glibc': 2.4.1
      '@parcel/watcher-linux-arm64-glibc': 2.4.1
      '@parcel/watcher-linux-arm64-musl': 2.4.1
      '@parcel/watcher-linux-x64-glibc': 2.4.1
      '@parcel/watcher-linux-x64-musl': 2.4.1
      '@parcel/watcher-win32-arm64': 2.4.1
      '@parcel/watcher-win32-ia32': 2.4.1
      '@parcel/watcher-win32-x64': 2.4.1

  '@park-ui/panda-preset@0.38.1(@internationalized/date@3.5.5)(@pandacss/dev@0.42.0(typescript@5.5.3))':
    dependencies:
      '@ark-ui/anatomy': 3.4.0(@internationalized/date@3.5.5)
      '@pandacss/dev': 0.42.0(typescript@5.5.3)
      '@radix-ui/colors': 3.0.0
      deepmerge: 4.3.1
      ts-pattern: 5.1.2
    transitivePeerDependencies:
      - '@internationalized/date'

  '@peculiar/asn1-schema@2.3.13':
    dependencies:
      asn1js: 3.0.5
      pvtsutils: 1.3.5
      tslib: 2.7.0

  '@peculiar/json-schema@1.1.12':
    dependencies:
      tslib: 2.7.0

  '@peculiar/webcrypto@1.5.0':
    dependencies:
      '@peculiar/asn1-schema': 2.3.13
      '@peculiar/json-schema': 1.1.12
      pvtsutils: 1.3.5
      tslib: 2.7.0
      webcrypto-core: 1.8.0

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@pkgr/core@0.1.1': {}

  '@prisma/client@5.17.0(prisma@5.17.0)':
    optionalDependencies:
      prisma: 5.17.0

  '@prisma/debug@5.17.0': {}

  '@prisma/engines-version@5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053': {}

  '@prisma/engines@5.17.0':
    dependencies:
      '@prisma/debug': 5.17.0
      '@prisma/engines-version': 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
      '@prisma/fetch-engine': 5.17.0
      '@prisma/get-platform': 5.17.0

  '@prisma/fetch-engine@5.17.0':
    dependencies:
      '@prisma/debug': 5.17.0
      '@prisma/engines-version': 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
      '@prisma/get-platform': 5.17.0

  '@prisma/get-platform@5.17.0':
    dependencies:
      '@prisma/debug': 5.17.0

  '@prisma/instrumentation@5.18.0':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/sdk-trace-base': 1.26.0(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@protobufjs/aspromise@1.1.2': {}

  '@protobufjs/base64@1.1.2': {}

  '@protobufjs/codegen@2.0.4': {}

  '@protobufjs/eventemitter@1.1.0': {}

  '@protobufjs/fetch@1.1.0':
    dependencies:
      '@protobufjs/aspromise': 1.1.2
      '@protobufjs/inquire': 1.1.0

  '@protobufjs/float@1.0.2': {}

  '@protobufjs/inquire@1.1.0': {}

  '@protobufjs/path@1.1.2': {}

  '@protobufjs/pool@1.1.0': {}

  '@protobufjs/utf8@1.1.0': {}

  '@radix-ui/colors@3.0.0': {}

  '@redis/bloom@1.2.0(@redis/client@1.6.0)':
    dependencies:
      '@redis/client': 1.6.0

  '@redis/client@1.6.0':
    dependencies:
      cluster-key-slot: 1.1.2
      generic-pool: 3.9.0
      yallist: 4.0.0

  '@redis/graph@1.1.1(@redis/client@1.6.0)':
    dependencies:
      '@redis/client': 1.6.0

  '@redis/json@1.0.7(@redis/client@1.6.0)':
    dependencies:
      '@redis/client': 1.6.0

  '@redis/search@1.2.0(@redis/client@1.6.0)':
    dependencies:
      '@redis/client': 1.6.0

  '@redis/time-series@1.1.0(@redis/client@1.6.0)':
    dependencies:
      '@redis/client': 1.6.0

  '@repeaterjs/repeater@3.0.6': {}

  '@rgbpp-sdk/btc@0.5.0(@ckb-lumos/lumos@0.23.0)':
    dependencies:
      '@bitcoinerlab/secp256k1': 1.1.1
      '@ckb-lumos/codec': 0.22.2
      '@nervosnetwork/ckb-types': 0.109.1
      '@rgbpp-sdk/ckb': 0.5.0(@ckb-lumos/lumos@0.23.0)(lodash@4.17.21)
      '@rgbpp-sdk/service': 0.5.0
      bip32: 4.0.0
      bitcoinjs-lib: 6.1.6
      ecpair: 2.1.0
      lodash: 4.17.21
      p-limit: 3.1.0
    transitivePeerDependencies:
      - '@ckb-lumos/lumos'
      - debug

  '@rgbpp-sdk/ckb@0.5.0(@ckb-lumos/lumos@0.23.0)(lodash@4.17.21)':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@exact-realty/multipart-parser': 1.0.14
      '@nervosnetwork/ckb-sdk-core': 0.109.1
      '@nervosnetwork/ckb-sdk-utils': 0.109.1
      '@nervosnetwork/ckb-types': 0.109.1
      '@rgbpp-sdk/service': 0.5.0
      '@spore-sdk/core': 0.2.1(@ckb-lumos/lumos@0.23.0)(lodash@4.17.21)
      axios: 1.7.2
      camelcase-keys: 7.0.2
      js-sha256: 0.11.0
    transitivePeerDependencies:
      - '@ckb-lumos/lumos'
      - debug
      - lodash

  '@rgbpp-sdk/service@0.5.0':
    dependencies:
      '@ckb-lumos/base': 0.22.2
      '@ckb-lumos/codec': 0.22.2
      '@nervosnetwork/ckb-types': 0.109.1
      lodash: 4.17.21

  '@rushstack/eslint-patch@1.10.4': {}

  '@scure/base@1.1.7': {}

  '@sentry/core@8.28.0':
    dependencies:
      '@sentry/types': 8.28.0
      '@sentry/utils': 8.28.0

  '@sentry/nestjs@8.28.0(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/core@10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1))':
    dependencies:
      '@nestjs/common': 10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@nestjs/core': 10.3.10(@nestjs/common@10.3.10(reflect-metadata@0.2.2)(rxjs@7.8.1))(@nestjs/platform-express@10.3.10)(reflect-metadata@0.2.2)(rxjs@7.8.1)
      '@sentry/core': 8.28.0
      '@sentry/node': 8.28.0
      '@sentry/types': 8.28.0
      '@sentry/utils': 8.28.0
    transitivePeerDependencies:
      - supports-color

  '@sentry/node@8.28.0':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/context-async-hooks': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-connect': 0.38.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-express': 0.41.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-fastify': 0.38.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-fs': 0.14.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-graphql': 0.42.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-hapi': 0.40.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-http': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-ioredis': 0.42.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-koa': 0.42.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-mongodb': 0.46.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-mongoose': 0.40.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-mysql': 0.40.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-mysql2': 0.40.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-nestjs-core': 0.39.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-pg': 0.43.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation-redis-4': 0.41.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/resources': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/sdk-trace-base': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
      '@prisma/instrumentation': 5.18.0
      '@sentry/core': 8.28.0
      '@sentry/opentelemetry': 8.28.0(@opentelemetry/api@1.9.0)(@opentelemetry/core@1.26.0(@opentelemetry/api@1.9.0))(@opentelemetry/instrumentation@0.52.1(@opentelemetry/api@1.9.0))(@opentelemetry/sdk-trace-base@1.26.0(@opentelemetry/api@1.9.0))(@opentelemetry/semantic-conventions@1.27.0)
      '@sentry/types': 8.28.0
      '@sentry/utils': 8.28.0
      import-in-the-middle: 1.11.0
    optionalDependencies:
      opentelemetry-instrumentation-fetch-node: 1.2.3(@opentelemetry/api@1.9.0)
    transitivePeerDependencies:
      - supports-color

  '@sentry/opentelemetry@8.28.0(@opentelemetry/api@1.9.0)(@opentelemetry/core@1.26.0(@opentelemetry/api@1.9.0))(@opentelemetry/instrumentation@0.52.1(@opentelemetry/api@1.9.0))(@opentelemetry/sdk-trace-base@1.26.0(@opentelemetry/api@1.9.0))(@opentelemetry/semantic-conventions@1.27.0)':
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/core': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/instrumentation': 0.52.1(@opentelemetry/api@1.9.0)
      '@opentelemetry/sdk-trace-base': 1.26.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
      '@sentry/core': 8.28.0
      '@sentry/types': 8.28.0
      '@sentry/utils': 8.28.0

  '@sentry/profiling-node@8.28.0':
    dependencies:
      '@sentry/core': 8.28.0
      '@sentry/node': 8.28.0
      '@sentry/types': 8.28.0
      '@sentry/utils': 8.28.0
      detect-libc: 2.0.3
      node-abi: 3.65.0
    transitivePeerDependencies:
      - supports-color

  '@sentry/types@8.28.0': {}

  '@sentry/utils@8.28.0':
    dependencies:
      '@sentry/types': 8.28.0

  '@sinclair/typebox@0.27.8': {}

  '@sinonjs/commons@3.0.1':
    dependencies:
      type-detect: 4.0.8

  '@sinonjs/fake-timers@10.3.0':
    dependencies:
      '@sinonjs/commons': 3.0.1

  '@spore-sdk/core@0.2.1(@ckb-lumos/lumos@0.23.0)(lodash@4.17.21)':
    dependencies:
      '@ckb-lumos/lumos': 0.23.0
      lodash: 4.17.21

  '@svgr/babel-plugin-add-jsx-attribute@8.0.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@svgr/babel-plugin-remove-jsx-attribute@8.0.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@svgr/babel-plugin-remove-jsx-empty-expression@8.0.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@svgr/babel-plugin-replace-jsx-attribute-value@8.0.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@svgr/babel-plugin-svg-dynamic-title@8.0.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@svgr/babel-plugin-svg-em-dimensions@8.0.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@svgr/babel-plugin-transform-react-native-svg@8.1.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@svgr/babel-plugin-transform-svg-component@8.0.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7

  '@svgr/babel-preset@8.1.0(@babel/core@7.24.7)':
    dependencies:
      '@babel/core': 7.24.7
      '@svgr/babel-plugin-add-jsx-attribute': 8.0.0(@babel/core@7.24.7)
      '@svgr/babel-plugin-remove-jsx-attribute': 8.0.0(@babel/core@7.24.7)
      '@svgr/babel-plugin-remove-jsx-empty-expression': 8.0.0(@babel/core@7.24.7)
      '@svgr/babel-plugin-replace-jsx-attribute-value': 8.0.0(@babel/core@7.24.7)
      '@svgr/babel-plugin-svg-dynamic-title': 8.0.0(@babel/core@7.24.7)
      '@svgr/babel-plugin-svg-em-dimensions': 8.0.0(@babel/core@7.24.7)
      '@svgr/babel-plugin-transform-react-native-svg': 8.1.0(@babel/core@7.24.7)
      '@svgr/babel-plugin-transform-svg-component': 8.0.0(@babel/core@7.24.7)

  '@svgr/core@8.1.0(typescript@5.5.3)':
    dependencies:
      '@babel/core': 7.24.7
      '@svgr/babel-preset': 8.1.0(@babel/core@7.24.7)
      camelcase: 6.3.0
      cosmiconfig: 8.3.6(typescript@5.5.3)
      snake-case: 3.0.4
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@svgr/hast-util-to-babel-ast@8.0.0':
    dependencies:
      '@babel/types': 7.24.9
      entities: 4.5.0

  '@svgr/plugin-jsx@8.1.0(@svgr/core@8.1.0(typescript@5.5.3))':
    dependencies:
      '@babel/core': 7.24.7
      '@svgr/babel-preset': 8.1.0(@babel/core@7.24.7)
      '@svgr/core': 8.1.0(typescript@5.5.3)
      '@svgr/hast-util-to-babel-ast': 8.0.0
      svg-parser: 2.0.4
    transitivePeerDependencies:
      - supports-color

  '@svgr/plugin-svgo@8.1.0(@svgr/core@8.1.0(typescript@5.5.3))(typescript@5.5.3)':
    dependencies:
      '@svgr/core': 8.1.0(typescript@5.5.3)
      cosmiconfig: 8.3.6(typescript@5.5.3)
      deepmerge: 4.3.1
      svgo: 3.3.2
    transitivePeerDependencies:
      - typescript

  '@svgr/webpack@8.1.0(typescript@5.5.3)':
    dependencies:
      '@babel/core': 7.24.7
      '@babel/plugin-transform-react-constant-elements': 7.25.1(@babel/core@7.24.7)
      '@babel/preset-env': 7.25.3(@babel/core@7.24.7)
      '@babel/preset-react': 7.24.7(@babel/core@7.24.7)
      '@babel/preset-typescript': 7.24.7(@babel/core@7.24.7)
      '@svgr/core': 8.1.0(typescript@5.5.3)
      '@svgr/plugin-jsx': 8.1.0(@svgr/core@8.1.0(typescript@5.5.3))
      '@svgr/plugin-svgo': 8.1.0(@svgr/core@8.1.0(typescript@5.5.3))(typescript@5.5.3)
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@swc/counter@0.1.3': {}

  '@swc/helpers@0.5.12':
    dependencies:
      tslib: 2.7.0

  '@swc/helpers@0.5.5':
    dependencies:
      '@swc/counter': 0.1.3
      tslib: 2.7.0

  '@tanstack/query-core@5.51.21': {}

  '@tanstack/react-query@5.51.21(react@18.3.1)':
    dependencies:
      '@tanstack/query-core': 5.51.21
      react: 18.3.1

  '@trysound/sax@0.2.0': {}

  '@ts-morph/common@0.22.0':
    dependencies:
      fast-glob: 3.3.2
      minimatch: 9.0.5
      mkdirp: 3.0.1
      path-browserify: 1.0.1

  '@tsconfig/node10@1.0.11': {}

  '@tsconfig/node12@1.0.11': {}

  '@tsconfig/node14@1.0.3': {}

  '@tsconfig/node16@1.0.4': {}

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.25.3
      '@babel/types': 7.25.2
      '@types/babel__generator': 7.6.8
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.6

  '@types/babel__generator@7.6.8':
    dependencies:
      '@babel/types': 7.25.2

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.25.3
      '@babel/types': 7.25.2

  '@types/babel__traverse@7.20.6':
    dependencies:
      '@babel/types': 7.25.2

  '@types/blake2b@2.1.3': {}

  '@types/body-parser@1.19.5':
    dependencies:
      '@types/connect': 3.4.38
      '@types/node': 20.14.10

  '@types/connect@3.4.36':
    dependencies:
      '@types/node': 20.14.10

  '@types/connect@3.4.38':
    dependencies:
      '@types/node': 20.14.10

  '@types/cookiejar@2.1.5': {}

  '@types/deep-freeze-strict@1.1.2': {}

  '@types/eslint-scope@3.7.7':
    dependencies:
      '@types/eslint': 9.6.0
      '@types/estree': 1.0.5

  '@types/eslint@9.6.0':
    dependencies:
      '@types/estree': 1.0.5
      '@types/json-schema': 7.0.15

  '@types/estree@1.0.5': {}

  '@types/express-serve-static-core@4.19.5':
    dependencies:
      '@types/node': 20.14.10
      '@types/qs': 6.9.15
      '@types/range-parser': 1.2.7
      '@types/send': 0.17.4

  '@types/express@4.17.21':
    dependencies:
      '@types/body-parser': 1.19.5
      '@types/express-serve-static-core': 4.19.5
      '@types/qs': 6.9.15
      '@types/serve-static': 1.15.7

  '@types/graceful-fs@4.1.9':
    dependencies:
      '@types/node': 20.14.10

  '@types/http-errors@2.0.4': {}

  '@types/istanbul-lib-coverage@2.0.6': {}

  '@types/istanbul-lib-report@3.0.3':
    dependencies:
      '@types/istanbul-lib-coverage': 2.0.6

  '@types/istanbul-reports@3.0.4':
    dependencies:
      '@types/istanbul-lib-report': 3.0.3

  '@types/jest@29.5.12':
    dependencies:
      expect: 29.7.0
      pretty-format: 29.7.0

  '@types/js-yaml@4.0.9': {}

  '@types/json-schema@7.0.15': {}

  '@types/json5@0.0.29': {}

  '@types/lodash-es@4.17.12':
    dependencies:
      '@types/lodash': 4.17.7

  '@types/lodash.isequal@4.5.8':
    dependencies:
      '@types/lodash': 4.17.7

  '@types/lodash@4.17.7': {}

  '@types/long@4.0.2': {}

  '@types/luxon@3.4.2': {}

  '@types/methods@1.1.4': {}

  '@types/mime@1.3.5': {}

  '@types/mysql@2.15.22':
    dependencies:
      '@types/node': 20.14.10

  '@types/negotiator@0.6.3': {}

  '@types/node-fetch@2.6.11':
    dependencies:
      '@types/node': 20.14.10
      form-data: 4.0.0

  '@types/node@10.17.60': {}

  '@types/node@17.0.45': {}

  '@types/node@20.14.10':
    dependencies:
      undici-types: 5.26.5

  '@types/normalize-package-data@2.4.4': {}

  '@types/parse-json@4.0.2': {}

  '@types/pg-pool@2.0.4':
    dependencies:
      '@types/pg': 8.6.1

  '@types/pg@8.6.1':
    dependencies:
      '@types/node': 20.14.10
      pg-protocol: 1.6.1
      pg-types: 2.2.0

  '@types/prop-types@15.7.12': {}

  '@types/qs@6.9.15': {}

  '@types/range-parser@1.2.7': {}

  '@types/react-dom@18.3.0':
    dependencies:
      '@types/react': 18.3.3

  '@types/react@18.3.3':
    dependencies:
      '@types/prop-types': 15.7.12
      csstype: 3.1.3

  '@types/semver@7.5.8': {}

  '@types/send@0.17.4':
    dependencies:
      '@types/mime': 1.3.5
      '@types/node': 20.14.10

  '@types/serialize-javascript@5.0.4': {}

  '@types/serve-static@1.15.7':
    dependencies:
      '@types/http-errors': 2.0.4
      '@types/node': 20.14.10
      '@types/send': 0.17.4

  '@types/shimmer@1.2.0': {}

  '@types/stack-utils@2.0.3': {}

  '@types/superagent@8.1.8':
    dependencies:
      '@types/cookiejar': 2.1.5
      '@types/methods': 1.1.4
      '@types/node': 20.14.10
      form-data: 4.0.0

  '@types/supertest@6.0.2':
    dependencies:
      '@types/methods': 1.1.4
      '@types/superagent': 8.1.8

  '@types/ws@8.5.11':
    dependencies:
      '@types/node': 20.14.10

  '@types/yargs-parser@21.0.3': {}

  '@types/yargs@17.0.32':
    dependencies:
      '@types/yargs-parser': 21.0.3

  '@typescript-eslint/eslint-plugin@6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@eslint-community/regexpp': 4.11.0
      '@typescript-eslint/parser': 6.21.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/type-utils': 6.21.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/utils': 6.21.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.3.6
      eslint: 8.57.0
      graphemer: 1.4.0
      ignore: 5.3.1
      natural-compare: 1.4.0
      semver: 7.6.2
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/eslint-plugin@7.18.0(@typescript-eslint/parser@7.18.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@eslint-community/regexpp': 4.11.0
      '@typescript-eslint/parser': 7.18.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/scope-manager': 7.18.0
      '@typescript-eslint/type-utils': 7.18.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/utils': 7.18.0(eslint@8.57.0)(typescript@5.5.3)
      '@typescript-eslint/visitor-keys': 7.18.0
      eslint: 8.57.0
      graphemer: 1.4.0
      ignore: 5.3.1
      natural-compare: 1.4.0
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.5.3)
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.3.6
      eslint: 8.57.0
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@7.18.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 7.18.0
      '@typescript-eslint/types': 7.18.0
      '@typescript-eslint/typescript-estree': 7.18.0(typescript@5.5.3)
      '@typescript-eslint/visitor-keys': 7.18.0
      debug: 4.3.6
      eslint: 8.57.0
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@6.21.0':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/visitor-keys': 6.21.0

  '@typescript-eslint/scope-manager@7.18.0':
    dependencies:
      '@typescript-eslint/types': 7.18.0
      '@typescript-eslint/visitor-keys': 7.18.0

  '@typescript-eslint/type-utils@6.21.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.5.3)
      '@typescript-eslint/utils': 6.21.0(eslint@8.57.0)(typescript@5.5.3)
      debug: 4.3.6
      eslint: 8.57.0
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/type-utils@7.18.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 7.18.0(typescript@5.5.3)
      '@typescript-eslint/utils': 7.18.0(eslint@8.57.0)(typescript@5.5.3)
      debug: 4.3.6
      eslint: 8.57.0
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@6.21.0': {}

  '@typescript-eslint/types@7.18.0': {}

  '@typescript-eslint/typescript-estree@6.21.0(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.3.6
      globby: 11.1.0
      is-glob: 4.0.3
      minimatch: 9.0.3
      semver: 7.6.3
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/typescript-estree@7.18.0(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/types': 7.18.0
      '@typescript-eslint/visitor-keys': 7.18.0
      debug: 4.3.6
      globby: 11.1.0
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.6.3
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@6.21.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.0)
      '@types/json-schema': 7.0.15
      '@types/semver': 7.5.8
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.5.3)
      eslint: 8.57.0
      semver: 7.6.3
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@typescript-eslint/utils@7.18.0(eslint@8.57.0)(typescript@5.5.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.0)
      '@typescript-eslint/scope-manager': 7.18.0
      '@typescript-eslint/types': 7.18.0
      '@typescript-eslint/typescript-estree': 7.18.0(typescript@5.5.3)
      eslint: 8.57.0
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@typescript-eslint/visitor-keys@6.21.0':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      eslint-visitor-keys: 3.4.3

  '@typescript-eslint/visitor-keys@7.18.0':
    dependencies:
      '@typescript-eslint/types': 7.18.0
      eslint-visitor-keys: 3.4.3

  '@ungap/structured-clone@1.2.0': {}

  '@vue/compiler-core@3.4.19':
    dependencies:
      '@babel/parser': 7.24.8
      '@vue/shared': 3.4.19
      entities: 4.5.0
      estree-walker: 2.0.2
      source-map-js: 1.2.0

  '@vue/compiler-dom@3.4.19':
    dependencies:
      '@vue/compiler-core': 3.4.19
      '@vue/shared': 3.4.19

  '@vue/compiler-sfc@3.4.19':
    dependencies:
      '@babel/parser': 7.24.8
      '@vue/compiler-core': 3.4.19
      '@vue/compiler-dom': 3.4.19
      '@vue/compiler-ssr': 3.4.19
      '@vue/shared': 3.4.19
      estree-walker: 2.0.2
      magic-string: 0.30.10
      postcss: 8.4.38
      source-map-js: 1.2.0

  '@vue/compiler-ssr@3.4.19':
    dependencies:
      '@vue/compiler-dom': 3.4.19
      '@vue/shared': 3.4.19

  '@vue/shared@3.4.19': {}

  '@webassemblyjs/ast@1.12.1':
    dependencies:
      '@webassemblyjs/helper-numbers': 1.11.6
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6

  '@webassemblyjs/floating-point-hex-parser@1.11.6': {}

  '@webassemblyjs/helper-api-error@1.11.6': {}

  '@webassemblyjs/helper-buffer@1.12.1': {}

  '@webassemblyjs/helper-numbers@1.11.6':
    dependencies:
      '@webassemblyjs/floating-point-hex-parser': 1.11.6
      '@webassemblyjs/helper-api-error': 1.11.6
      '@xtuc/long': 4.2.2

  '@webassemblyjs/helper-wasm-bytecode@1.11.6': {}

  '@webassemblyjs/helper-wasm-section@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-buffer': 1.12.1
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6
      '@webassemblyjs/wasm-gen': 1.12.1

  '@webassemblyjs/ieee754@1.11.6':
    dependencies:
      '@xtuc/ieee754': 1.2.0

  '@webassemblyjs/leb128@1.11.6':
    dependencies:
      '@xtuc/long': 4.2.2

  '@webassemblyjs/utf8@1.11.6': {}

  '@webassemblyjs/wasm-edit@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-buffer': 1.12.1
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6
      '@webassemblyjs/helper-wasm-section': 1.12.1
      '@webassemblyjs/wasm-gen': 1.12.1
      '@webassemblyjs/wasm-opt': 1.12.1
      '@webassemblyjs/wasm-parser': 1.12.1
      '@webassemblyjs/wast-printer': 1.12.1

  '@webassemblyjs/wasm-gen@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6
      '@webassemblyjs/ieee754': 1.11.6
      '@webassemblyjs/leb128': 1.11.6
      '@webassemblyjs/utf8': 1.11.6

  '@webassemblyjs/wasm-opt@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-buffer': 1.12.1
      '@webassemblyjs/wasm-gen': 1.12.1
      '@webassemblyjs/wasm-parser': 1.12.1

  '@webassemblyjs/wasm-parser@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-api-error': 1.11.6
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6
      '@webassemblyjs/ieee754': 1.11.6
      '@webassemblyjs/leb128': 1.11.6
      '@webassemblyjs/utf8': 1.11.6

  '@webassemblyjs/wast-printer@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@xtuc/long': 4.2.2

  '@whatwg-node/events@0.0.3': {}

  '@whatwg-node/fetch@0.8.8':
    dependencies:
      '@peculiar/webcrypto': 1.5.0
      '@whatwg-node/node-fetch': 0.3.6
      busboy: 1.6.0
      urlpattern-polyfill: 8.0.2
      web-streams-polyfill: 3.3.3

  '@whatwg-node/fetch@0.9.19':
    dependencies:
      '@whatwg-node/node-fetch': 0.5.20
      urlpattern-polyfill: 10.0.0

  '@whatwg-node/node-fetch@0.3.6':
    dependencies:
      '@whatwg-node/events': 0.0.3
      busboy: 1.6.0
      fast-querystring: 1.1.2
      fast-url-parser: 1.1.3
      tslib: 2.7.0

  '@whatwg-node/node-fetch@0.5.20':
    dependencies:
      '@kamilkisiela/fast-url-parser': 1.1.4
      busboy: 1.6.0
      fast-querystring: 1.1.2
      tslib: 2.7.0

  '@wry/caches@1.0.1':
    dependencies:
      tslib: 2.7.0

  '@wry/context@0.7.4':
    dependencies:
      tslib: 2.7.0

  '@wry/equality@0.5.7':
    dependencies:
      tslib: 2.7.0

  '@wry/trie@0.4.3':
    dependencies:
      tslib: 2.7.0

  '@wry/trie@0.5.0':
    dependencies:
      tslib: 2.7.0

  '@xtuc/ieee754@1.2.0': {}

  '@xtuc/long@4.2.2': {}

  '@zag-js/accordion@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/accordion@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/anatomy@0.58.2': {}

  '@zag-js/anatomy@0.68.1': {}

  '@zag-js/aria-hidden@0.58.2':
    dependencies:
      '@zag-js/dom-query': 0.58.2

  '@zag-js/aria-hidden@0.68.1':
    dependencies:
      aria-hidden: 1.2.4

  '@zag-js/auto-resize@0.58.2':
    dependencies:
      '@zag-js/dom-query': 0.58.2

  '@zag-js/auto-resize@0.68.1':
    dependencies:
      '@zag-js/dom-query': 0.68.1

  '@zag-js/avatar@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/avatar@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/carousel@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/carousel@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/checkbox@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/checkbox@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/clipboard@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/clipboard@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/collapsible@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/collapsible@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/collection@0.58.2':
    dependencies:
      '@zag-js/utils': 0.58.2

  '@zag-js/collection@0.68.1':
    dependencies:
      '@zag-js/utils': 0.68.1

  '@zag-js/color-picker@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/color-utils': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/popper': 0.58.2
      '@zag-js/text-selection': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/color-picker@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/color-utils': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/text-selection': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/color-utils@0.58.2':
    dependencies:
      '@zag-js/numeric-range': 0.58.2

  '@zag-js/color-utils@0.68.1':
    dependencies:
      '@zag-js/numeric-range': 0.68.1

  '@zag-js/combobox@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/aria-hidden': 0.58.2
      '@zag-js/collection': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/popper': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/combobox@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/aria-hidden': 0.68.1
      '@zag-js/collection': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/core@0.58.2':
    dependencies:
      '@zag-js/store': 0.58.2
      klona: 2.0.6

  '@zag-js/core@0.68.1':
    dependencies:
      '@zag-js/store': 0.68.1
      klona: 2.0.6

  '@zag-js/date-picker@0.58.2':
    dependencies:
      '@internationalized/date': 3.5.4
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/date-utils': 0.58.2(@internationalized/date@3.5.4)
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/live-region': 0.58.2
      '@zag-js/popper': 0.58.2
      '@zag-js/text-selection': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/date-picker@0.68.1':
    dependencies:
      '@internationalized/date': 3.5.5
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/date-utils': 0.68.1(@internationalized/date@3.5.5)
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/live-region': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/text-selection': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/date-utils@0.58.2(@internationalized/date@3.5.4)':
    dependencies:
      '@internationalized/date': 3.5.4

  '@zag-js/date-utils@0.58.2(@internationalized/date@3.5.5)':
    dependencies:
      '@internationalized/date': 3.5.5

  '@zag-js/date-utils@0.68.1(@internationalized/date@3.5.5)':
    dependencies:
      '@internationalized/date': 3.5.5

  '@zag-js/dialog@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/aria-hidden': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/remove-scroll': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2
      focus-trap: 7.5.4

  '@zag-js/dialog@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/aria-hidden': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/remove-scroll': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1
      focus-trap: 7.5.4

  '@zag-js/dismissable@0.58.2':
    dependencies:
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/interact-outside': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/dismissable@0.68.1':
    dependencies:
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/interact-outside': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/dom-event@0.58.2':
    dependencies:
      '@zag-js/dom-query': 0.58.2
      '@zag-js/text-selection': 0.58.2
      '@zag-js/types': 0.58.2

  '@zag-js/dom-event@0.68.1':
    dependencies:
      '@zag-js/dom-query': 0.68.1
      '@zag-js/text-selection': 0.68.1
      '@zag-js/types': 0.68.1

  '@zag-js/dom-query@0.58.2': {}

  '@zag-js/dom-query@0.68.1': {}

  '@zag-js/editable@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/interact-outside': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/editable@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/interact-outside': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/element-rect@0.58.2': {}

  '@zag-js/element-rect@0.68.1': {}

  '@zag-js/element-size@0.58.2': {}

  '@zag-js/element-size@0.68.1': {}

  '@zag-js/file-upload@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/file-utils': 0.58.2
      '@zag-js/i18n-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/file-upload@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/file-utils': 0.68.1
      '@zag-js/i18n-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/file-utils@0.58.2':
    dependencies:
      '@zag-js/i18n-utils': 0.58.2

  '@zag-js/file-utils@0.68.1':
    dependencies:
      '@zag-js/i18n-utils': 0.68.1

  '@zag-js/form-utils@0.58.2': {}

  '@zag-js/form-utils@0.68.1': {}

  '@zag-js/highlight-word@0.68.1': {}

  '@zag-js/hover-card@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/popper': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/hover-card@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/i18n-utils@0.58.2':
    dependencies:
      '@zag-js/dom-query': 0.58.2

  '@zag-js/i18n-utils@0.68.1':
    dependencies:
      '@zag-js/dom-query': 0.68.1

  '@zag-js/interact-outside@0.58.2':
    dependencies:
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/interact-outside@0.68.1':
    dependencies:
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/live-region@0.58.2': {}

  '@zag-js/live-region@0.68.1': {}

  '@zag-js/menu@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/popper': 0.58.2
      '@zag-js/rect-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/menu@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/rect-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/number-input@0.58.2':
    dependencies:
      '@internationalized/number': 3.5.3
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/number-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/number-input@0.68.1':
    dependencies:
      '@internationalized/number': 3.5.3
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/number-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/number-utils@0.58.2': {}

  '@zag-js/number-utils@0.68.1': {}

  '@zag-js/numeric-range@0.58.2': {}

  '@zag-js/numeric-range@0.68.1': {}

  '@zag-js/pagination@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/pagination@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/pin-input@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/pin-input@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/popover@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/aria-hidden': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/popper': 0.58.2
      '@zag-js/remove-scroll': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2
      focus-trap: 7.5.4

  '@zag-js/popover@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/aria-hidden': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/remove-scroll': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1
      focus-trap: 7.5.4

  '@zag-js/popper@0.58.2':
    dependencies:
      '@floating-ui/dom': 1.6.5
      '@zag-js/dom-query': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/popper@0.68.1':
    dependencies:
      '@floating-ui/dom': 1.6.10
      '@zag-js/dom-query': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/presence@0.58.2':
    dependencies:
      '@zag-js/core': 0.58.2
      '@zag-js/types': 0.58.2

  '@zag-js/presence@0.68.1':
    dependencies:
      '@zag-js/core': 0.68.1
      '@zag-js/types': 0.68.1

  '@zag-js/progress@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/progress@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/qr-code@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2
      proxy-memoize: 3.0.0
      uqr: 0.1.2

  '@zag-js/qr-code@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1
      proxy-memoize: 3.0.1
      uqr: 0.1.2

  '@zag-js/radio-group@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/element-rect': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/radio-group@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/element-rect': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/rating-group@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/rating-group@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/react@0.68.1(react-dom@18.3.1(react@18.3.1))(react@18.3.1)':
    dependencies:
      '@zag-js/core': 0.68.1
      '@zag-js/store': 0.68.1
      '@zag-js/types': 0.68.1
      proxy-compare: 3.0.0
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)

  '@zag-js/rect-utils@0.58.2': {}

  '@zag-js/rect-utils@0.68.1': {}

  '@zag-js/remove-scroll@0.58.2':
    dependencies:
      '@zag-js/dom-query': 0.58.2

  '@zag-js/remove-scroll@0.68.1':
    dependencies:
      '@zag-js/dom-query': 0.68.1

  '@zag-js/select@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/collection': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/popper': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/select@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/collection': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/signature-pad@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2
      perfect-freehand: 1.2.2

  '@zag-js/signature-pad@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1
      perfect-freehand: 1.2.2

  '@zag-js/slider@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/element-size': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/numeric-range': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/slider@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/element-size': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/numeric-range': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/splitter@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/number-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/splitter@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/number-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/steps@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/store@0.58.2':
    dependencies:
      proxy-compare: 3.0.0

  '@zag-js/store@0.68.1':
    dependencies:
      proxy-compare: 3.0.0

  '@zag-js/switch@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/switch@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/tabs@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/element-rect': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/tabs@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/element-rect': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/tags-input@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/auto-resize': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/form-utils': 0.58.2
      '@zag-js/interact-outside': 0.58.2
      '@zag-js/live-region': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/tags-input@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/auto-resize': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/form-utils': 0.68.1
      '@zag-js/interact-outside': 0.68.1
      '@zag-js/live-region': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/text-selection@0.58.2':
    dependencies:
      '@zag-js/dom-query': 0.58.2

  '@zag-js/text-selection@0.68.1':
    dependencies:
      '@zag-js/dom-query': 0.68.1

  '@zag-js/time-picker@0.68.1':
    dependencies:
      '@internationalized/date': 3.5.5
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/timer@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/toast@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dismissable': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/toast@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dismissable': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/toggle-group@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/toggle-group@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/tooltip@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/popper': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/tooltip@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/popper': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/tree-view@0.58.2':
    dependencies:
      '@zag-js/anatomy': 0.58.2
      '@zag-js/core': 0.58.2
      '@zag-js/dom-event': 0.58.2
      '@zag-js/dom-query': 0.58.2
      '@zag-js/types': 0.58.2
      '@zag-js/utils': 0.58.2

  '@zag-js/tree-view@0.68.1':
    dependencies:
      '@zag-js/anatomy': 0.68.1
      '@zag-js/core': 0.68.1
      '@zag-js/dom-event': 0.68.1
      '@zag-js/dom-query': 0.68.1
      '@zag-js/types': 0.68.1
      '@zag-js/utils': 0.68.1

  '@zag-js/types@0.58.2':
    dependencies:
      csstype: 3.1.3

  '@zag-js/types@0.68.1':
    dependencies:
      csstype: 3.1.3

  '@zag-js/utils@0.58.2': {}

  '@zag-js/utils@0.68.1': {}

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  abstract-logging@2.0.1: {}

  accepts@1.3.8:
    dependencies:
      mime-types: 2.1.35
      negotiator: 0.6.3

  acorn-import-assertions@1.9.0(acorn@8.12.1):
    dependencies:
      acorn: 8.12.1
    optional: true

  acorn-import-attributes@1.9.5(acorn@8.12.1):
    dependencies:
      acorn: 8.12.1

  acorn-jsx@5.3.2(acorn@8.12.1):
    dependencies:
      acorn: 8.12.1

  acorn-walk@8.3.3:
    dependencies:
      acorn: 8.12.1

  acorn@8.12.1: {}

  agent-base@7.1.1:
    dependencies:
      debug: 4.3.6
    transitivePeerDependencies:
      - supports-color

  aggregate-error@3.1.0:
    dependencies:
      clean-stack: 2.2.0
      indent-string: 4.0.0

  ajv-formats@2.1.1(ajv@8.12.0):
    optionalDependencies:
      ajv: 8.12.0

  ajv-formats@2.1.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-formats@3.0.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-keywords@3.5.2(ajv@6.12.6):
    dependencies:
      ajv: 6.12.6

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ajv@8.12.0:
    dependencies:
      fast-deep-equal: 3.1.3
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2
      uri-js: 4.4.1

  ajv@8.17.1:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-uri: 3.0.1
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2

  alge@0.8.1:
    dependencies:
      lodash.ismatch: 4.4.0
      remeda: 1.61.0
      ts-toolbelt: 9.6.0
      zod: 3.23.8

  ansi-align@3.0.1:
    dependencies:
      string-width: 4.2.3

  ansi-colors@4.1.3: {}

  ansi-escapes@4.3.2:
    dependencies:
      type-fest: 0.21.3

  ansi-escapes@7.0.0:
    dependencies:
      environment: 1.1.0

  ansi-regex@5.0.1: {}

  ansi-regex@6.0.1: {}

  ansi-styles@3.2.1:
    dependencies:
      color-convert: 1.9.3

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  apollo-reporting-protobuf@3.4.0:
    dependencies:
      '@apollo/protobufjs': 1.2.6

  apollo-server-env@4.2.1:
    dependencies:
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  apollo-server-plugin-base@3.7.2(graphql@16.9.0):
    dependencies:
      apollo-server-types: 3.8.0(graphql@16.9.0)
      graphql: 16.9.0
    transitivePeerDependencies:
      - encoding

  apollo-server-types@3.8.0(graphql@16.9.0):
    dependencies:
      '@apollo/utils.keyvaluecache': 1.0.2
      '@apollo/utils.logger': 1.0.1
      apollo-reporting-protobuf: 3.4.0
      apollo-server-env: 4.2.1
      graphql: 16.9.0
    transitivePeerDependencies:
      - encoding

  append-field@1.0.0:
    optional: true

  arg@4.1.3: {}

  argparse@1.0.10:
    dependencies:
      sprintf-js: 1.0.3

  argparse@2.0.1: {}

  aria-hidden@1.2.4:
    dependencies:
      tslib: 2.7.0

  aria-query@5.1.3:
    dependencies:
      deep-equal: 2.2.3

  array-buffer-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      is-array-buffer: 3.0.4

  array-flatten@1.1.1: {}

  array-includes@3.1.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0
      get-intrinsic: 1.2.4
      is-string: 1.0.7

  array-timsort@1.0.3: {}

  array-union@2.1.0: {}

  array.prototype.findlast@1.2.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-shim-unscopables: 1.0.2

  array.prototype.findlastindex@1.2.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-shim-unscopables: 1.0.2

  array.prototype.flat@1.3.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-shim-unscopables: 1.0.2

  array.prototype.flatmap@1.3.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-shim-unscopables: 1.0.2

  array.prototype.tosorted@1.1.4:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-shim-unscopables: 1.0.2

  arraybuffer.prototype.slice@1.0.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      is-array-buffer: 3.0.4
      is-shared-array-buffer: 1.0.3

  asap@2.0.6: {}

  asn1js@3.0.5:
    dependencies:
      pvtsutils: 1.3.5
      pvutils: 1.1.3
      tslib: 2.7.0

  ast-types-flow@0.0.8: {}

  astral-regex@2.0.0: {}

  async-retry@1.3.3:
    dependencies:
      retry: 0.13.1

  async@3.2.5: {}

  asynckit@0.4.0: {}

  atomic-sleep@1.0.0: {}

  auto-bind@4.0.0: {}

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.0.0

  avvio@8.3.2:
    dependencies:
      '@fastify/error': 3.4.1
      fastq: 1.17.1

  axe-core@4.10.0: {}

  axios@1.6.7:
    dependencies:
      follow-redirects: 1.15.6
      form-data: 4.0.0
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  axios@1.7.2:
    dependencies:
      follow-redirects: 1.15.6
      form-data: 4.0.0
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  axobject-query@3.1.1:
    dependencies:
      deep-equal: 2.2.3

  b4a@1.6.6: {}

  babel-jest@29.7.0(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      '@jest/transform': 29.7.0
      '@types/babel__core': 7.20.5
      babel-plugin-istanbul: 6.1.1
      babel-preset-jest: 29.6.3(@babel/core@7.24.7)
      chalk: 4.1.2
      graceful-fs: 4.2.11
      slash: 3.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-istanbul@6.1.1:
    dependencies:
      '@babel/helper-plugin-utils': 7.24.8
      '@istanbuljs/load-nyc-config': 1.1.0
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-instrument: 5.2.1
      test-exclude: 6.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-jest-hoist@29.6.3:
    dependencies:
      '@babel/template': 7.25.0
      '@babel/types': 7.25.2
      '@types/babel__core': 7.20.5
      '@types/babel__traverse': 7.20.6

  babel-plugin-macros@3.1.0:
    dependencies:
      '@babel/runtime': 7.25.0
      cosmiconfig: 7.1.0
      resolve: 1.22.8

  babel-plugin-polyfill-corejs2@0.4.11(@babel/core@7.24.7):
    dependencies:
      '@babel/compat-data': 7.25.2
      '@babel/core': 7.24.7
      '@babel/helper-define-polyfill-provider': 0.6.2(@babel/core@7.24.7)
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  babel-plugin-polyfill-corejs3@0.10.6(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-define-polyfill-provider': 0.6.2(@babel/core@7.24.7)
      core-js-compat: 3.38.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-polyfill-regenerator@0.6.2(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      '@babel/helper-define-polyfill-provider': 0.6.2(@babel/core@7.24.7)
    transitivePeerDependencies:
      - supports-color

  babel-plugin-syntax-trailing-function-commas@7.0.0-beta.0: {}

  babel-preset-current-node-syntax@1.0.1(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-bigint': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.24.7)
      '@babel/plugin-syntax-import-meta': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-json-strings': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-logical-assignment-operators': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-nullish-coalescing-operator': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-numeric-separator': 7.10.4(@babel/core@7.24.7)
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-optional-catch-binding': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-optional-chaining': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-syntax-top-level-await': 7.14.5(@babel/core@7.24.7)

  babel-preset-fbjs@3.4.0(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      '@babel/plugin-proposal-class-properties': 7.18.6(@babel/core@7.24.7)
      '@babel/plugin-proposal-object-rest-spread': 7.20.7(@babel/core@7.24.7)
      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.24.7)
      '@babel/plugin-syntax-flow': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-syntax-jsx': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.24.7)
      '@babel/plugin-transform-arrow-functions': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-block-scoped-functions': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-block-scoping': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-transform-classes': 7.25.0(@babel/core@7.24.7)
      '@babel/plugin-transform-computed-properties': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-destructuring': 7.24.8(@babel/core@7.24.7)
      '@babel/plugin-transform-flow-strip-types': 7.25.2(@babel/core@7.24.7)
      '@babel/plugin-transform-for-of': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-function-name': 7.25.1(@babel/core@7.24.7)
      '@babel/plugin-transform-literals': 7.25.2(@babel/core@7.24.7)
      '@babel/plugin-transform-member-expression-literals': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-modules-commonjs': 7.24.8(@babel/core@7.24.7)
      '@babel/plugin-transform-object-super': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-parameters': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-property-literals': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-react-display-name': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-react-jsx': 7.25.2(@babel/core@7.24.7)
      '@babel/plugin-transform-shorthand-properties': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-spread': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-transform-template-literals': 7.24.7(@babel/core@7.24.7)
      babel-plugin-syntax-trailing-function-commas: 7.0.0-beta.0
    transitivePeerDependencies:
      - supports-color

  babel-preset-jest@29.6.3(@babel/core@7.24.7):
    dependencies:
      '@babel/core': 7.24.7
      babel-plugin-jest-hoist: 29.6.3
      babel-preset-current-node-syntax: 1.0.1(@babel/core@7.24.7)

  backo2@1.0.2: {}

  balanced-match@1.0.2: {}

  base-x@3.0.10:
    dependencies:
      safe-buffer: 5.2.1

  base-x@4.0.0: {}

  base64-js@1.5.1: {}

  bech32@2.0.0: {}

  bignumber.js@9.1.2: {}

  binary-extensions@2.3.0: {}

  bip174@2.1.1: {}

  bip32@4.0.0:
    dependencies:
      '@noble/hashes': 1.4.0
      '@scure/base': 1.1.7
      typeforce: 1.18.0
      wif: 2.0.6

  bitcoinjs-lib@6.1.6:
    dependencies:
      '@noble/hashes': 1.4.0
      bech32: 2.0.0
      bip174: 2.1.1
      bs58check: 3.0.1
      typeforce: 1.18.0
      varuint-bitcoin: 1.1.2

  bl@4.1.0:
    dependencies:
      buffer: 5.7.1
      inherits: 2.0.4
      readable-stream: 3.6.2

  blake2b-wasm@2.4.0:
    dependencies:
      b4a: 1.6.6
      nanoassert: 2.0.0

  blake2b@2.1.4:
    dependencies:
      blake2b-wasm: 2.4.0
      nanoassert: 2.0.0

  bn.js@4.12.0: {}

  bn.js@5.2.1: {}

  body-parser@1.20.2:
    dependencies:
      bytes: 3.1.2
      content-type: 1.0.5
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      on-finished: 2.4.1
      qs: 6.11.0
      raw-body: 2.5.2
      type-is: 1.6.18
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  boolbase@1.0.0: {}

  boxen@5.1.2:
    dependencies:
      ansi-align: 3.0.1
      camelcase: 6.3.0
      chalk: 4.1.2
      cli-boxes: 2.2.1
      string-width: 4.2.3
      type-fest: 0.20.2
      widest-line: 3.1.0
      wrap-ansi: 7.0.0

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  brorand@1.1.0: {}

  browserslist@4.23.1:
    dependencies:
      caniuse-lite: 1.0.30001641
      electron-to-chromium: 1.4.825
      node-releases: 2.0.14
      update-browserslist-db: 1.1.0(browserslist@4.23.1)

  browserslist@4.23.2:
    dependencies:
      caniuse-lite: 1.0.30001641
      electron-to-chromium: 1.4.825
      node-releases: 2.0.14
      update-browserslist-db: 1.1.0(browserslist@4.23.2)

  browserslist@4.23.3:
    dependencies:
      caniuse-lite: 1.0.30001649
      electron-to-chromium: 1.5.4
      node-releases: 2.0.18
      update-browserslist-db: 1.1.0(browserslist@4.23.3)

  bs-logger@0.2.6:
    dependencies:
      fast-json-stable-stringify: 2.1.0

  bs58@4.0.1:
    dependencies:
      base-x: 3.0.10

  bs58@5.0.0:
    dependencies:
      base-x: 4.0.0

  bs58check@2.1.2:
    dependencies:
      bs58: 4.0.1
      create-hash: 1.2.0
      safe-buffer: 5.2.1

  bs58check@3.0.1:
    dependencies:
      '@noble/hashes': 1.4.0
      bs58: 5.0.0

  bser@2.1.1:
    dependencies:
      node-int64: 0.4.0

  buffer-from@1.1.2: {}

  buffer@5.7.1:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  buffer@6.0.3:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  bufferutil@4.0.8:
    dependencies:
      node-gyp-build: 4.8.1
    optional: true

  builtin-modules@3.3.0: {}

  bullmq@5.12.0:
    dependencies:
      cron-parser: 4.9.0
      ioredis: 5.4.1
      msgpackr: 1.11.0
      node-abort-controller: 3.1.1
      semver: 7.6.3
      tslib: 2.6.3
      uuid: 9.0.1
    transitivePeerDependencies:
      - supports-color

  bundle-n-require@1.1.1:
    dependencies:
      esbuild: 0.20.2
      node-eval: 2.0.0

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  bytes@3.1.2: {}

  cac@6.7.14: {}

  cache-manager-redis-yet@4.2.0:
    dependencies:
      '@redis/bloom': 1.2.0(@redis/client@1.6.0)
      '@redis/client': 1.6.0
      '@redis/graph': 1.1.1(@redis/client@1.6.0)
      '@redis/json': 1.0.7(@redis/client@1.6.0)
      '@redis/search': 1.2.0(@redis/client@1.6.0)
      '@redis/time-series': 1.1.0(@redis/client@1.6.0)
      cache-manager: 5.7.4
      redis: 4.7.0

  cache-manager@5.7.4:
    dependencies:
      eventemitter3: 5.0.1
      lodash.clonedeep: 4.5.0
      lru-cache: 10.4.3
      promise-coalesce: 1.1.2

  call-bind@1.0.7:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      set-function-length: 1.2.2

  callsites@3.1.0: {}

  camel-case@4.1.2:
    dependencies:
      pascal-case: 3.1.2
      tslib: 2.7.0

  camelcase-keys@7.0.2:
    dependencies:
      camelcase: 6.3.0
      map-obj: 4.3.0
      quick-lru: 5.1.1
      type-fest: 1.4.0

  camelcase@5.3.1: {}

  camelcase@6.3.0: {}

  caniuse-api@3.0.0:
    dependencies:
      browserslist: 4.23.3
      caniuse-lite: 1.0.30001641
      lodash.memoize: 4.1.2
      lodash.uniq: 4.5.0

  caniuse-lite@1.0.30001641: {}

  caniuse-lite@1.0.30001649: {}

  capital-case@1.0.4:
    dependencies:
      no-case: 3.0.4
      tslib: 2.7.0
      upper-case-first: 2.0.2

  chalk-template@1.1.0:
    dependencies:
      chalk: 5.3.0

  chalk@2.4.2:
    dependencies:
      ansi-styles: 3.2.1
      escape-string-regexp: 1.0.5
      supports-color: 5.5.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.3.0: {}

  change-case-all@1.0.15:
    dependencies:
      change-case: 4.1.2
      is-lower-case: 2.0.2
      is-upper-case: 2.0.2
      lower-case: 2.0.2
      lower-case-first: 2.0.2
      sponge-case: 1.0.1
      swap-case: 2.0.2
      title-case: 3.0.3
      upper-case: 2.0.2
      upper-case-first: 2.0.2

  change-case@4.1.2:
    dependencies:
      camel-case: 4.1.2
      capital-case: 1.0.4
      constant-case: 3.0.4
      dot-case: 3.0.4
      header-case: 2.0.4
      no-case: 3.0.4
      param-case: 3.0.4
      pascal-case: 3.1.2
      path-case: 3.0.4
      sentence-case: 3.0.4
      snake-case: 3.0.4
      tslib: 2.7.0

  char-regex@1.0.2: {}

  chardet@0.7.0: {}

  check-disk-space@3.4.0: {}

  chokidar@3.5.1:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.5.0
    optionalDependencies:
      fsevents: 2.3.3

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  chrome-trace-event@1.0.4: {}

  ci-info@3.9.0: {}

  cipher-base@1.0.4:
    dependencies:
      inherits: 2.0.4
      safe-buffer: 5.2.1

  cjs-module-lexer@1.3.1: {}

  clean-regexp@1.0.0:
    dependencies:
      escape-string-regexp: 1.0.5

  clean-stack@2.2.0: {}

  clear-module@4.1.2:
    dependencies:
      parent-module: 2.0.0
      resolve-from: 5.0.0

  cli-boxes@2.2.1: {}

  cli-cursor@3.1.0:
    dependencies:
      restore-cursor: 3.1.0

  cli-cursor@5.0.0:
    dependencies:
      restore-cursor: 5.1.0

  cli-spinners@2.9.2: {}

  cli-table3@0.6.5:
    dependencies:
      string-width: 4.2.3
    optionalDependencies:
      '@colors/colors': 1.5.0

  cli-table@0.3.6:
    dependencies:
      colors: 1.0.3

  cli-truncate@2.1.0:
    dependencies:
      slice-ansi: 3.0.0
      string-width: 4.2.3

  cli-truncate@4.0.0:
    dependencies:
      slice-ansi: 5.0.0
      string-width: 7.2.0

  cli-width@3.0.0: {}

  cli-width@4.1.0: {}

  client-only@0.0.1: {}

  cliui@6.0.0:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 6.2.0

  cliui@8.0.1:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  clone@1.0.4: {}

  cluster-key-slot@1.1.2: {}

  co@4.6.0: {}

  code-block-writer@12.0.0: {}

  collect-v8-coverage@1.0.2: {}

  color-convert@1.9.3:
    dependencies:
      color-name: 1.1.3

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.3: {}

  color-name@1.1.4: {}

  colorette@2.0.20: {}

  colors@1.0.3: {}

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@10.0.1: {}

  commander@12.1.0: {}

  commander@2.20.3: {}

  commander@4.1.1: {}

  commander@7.2.0: {}

  commander@9.5.0: {}

  comment-json@4.2.3:
    dependencies:
      array-timsort: 1.0.3
      core-util-is: 1.0.3
      esprima: 4.0.1
      has-own-prop: 2.0.0
      repeat-string: 1.6.1

  comment-json@4.2.4:
    dependencies:
      array-timsort: 1.0.3
      core-util-is: 1.0.3
      esprima: 4.0.1
      has-own-prop: 2.0.0
      repeat-string: 1.6.1

  common-tags@1.8.2: {}

  component-emitter@1.3.1: {}

  concat-map@0.0.1: {}

  concat-stream@1.6.2:
    dependencies:
      buffer-from: 1.1.2
      inherits: 2.0.4
      readable-stream: 2.3.8
      typedarray: 0.0.6
    optional: true

  confbox@0.1.7: {}

  consola@2.15.3: {}

  constant-case@3.0.4:
    dependencies:
      no-case: 3.0.4
      tslib: 2.7.0
      upper-case: 2.0.2

  content-disposition@0.5.4:
    dependencies:
      safe-buffer: 5.2.1

  content-type@1.0.5: {}

  convert-source-map@2.0.0: {}

  cookie-signature@1.0.6: {}

  cookie@0.6.0: {}

  cookiejar@2.1.4: {}

  core-js-compat@3.38.0:
    dependencies:
      browserslist: 4.23.3

  core-util-is@1.0.3: {}

  cors@2.8.5:
    dependencies:
      object-assign: 4.1.1
      vary: 1.1.2

  cosmiconfig@7.1.0:
    dependencies:
      '@types/parse-json': 4.0.2
      import-fresh: 3.3.0
      parse-json: 5.2.0
      path-type: 4.0.0
      yaml: 1.10.2

  cosmiconfig@8.3.6(typescript@5.3.3):
    dependencies:
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      parse-json: 5.2.0
      path-type: 4.0.0
    optionalDependencies:
      typescript: 5.3.3

  cosmiconfig@8.3.6(typescript@5.5.3):
    dependencies:
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      parse-json: 5.2.0
      path-type: 4.0.0
    optionalDependencies:
      typescript: 5.5.3

  create-hash@1.2.0:
    dependencies:
      cipher-base: 1.0.4
      inherits: 2.0.4
      md5.js: 1.3.5
      ripemd160: 2.0.2
      sha.js: 2.4.11

  create-jest@29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-config: 29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      jest-util: 29.7.0
      prompts: 2.4.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  create-require@1.1.1: {}

  cron-parser@4.9.0:
    dependencies:
      luxon: 3.5.0

  cron@3.1.7:
    dependencies:
      '@types/luxon': 3.4.2
      luxon: 3.4.4

  cross-fetch@3.1.8:
    dependencies:
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  cross-inspect@1.0.0:
    dependencies:
      tslib: 2.7.0

  cross-spawn@7.0.3:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  crosspath@2.0.0:
    dependencies:
      '@types/node': 17.0.45

  cspell-config-lib@8.13.1:
    dependencies:
      '@cspell/cspell-types': 8.13.1
      comment-json: 4.2.4
      yaml: 2.5.0

  cspell-dictionary@8.13.1:
    dependencies:
      '@cspell/cspell-pipe': 8.13.1
      '@cspell/cspell-types': 8.13.1
      cspell-trie-lib: 8.13.1
      fast-equals: 5.0.1

  cspell-gitignore@8.13.1:
    dependencies:
      '@cspell/url': 8.13.1
      cspell-glob: 8.13.1
      cspell-io: 8.13.1
      find-up-simple: 1.0.0

  cspell-glob@8.13.1:
    dependencies:
      '@cspell/url': 8.13.1
      micromatch: 4.0.7

  cspell-grammar@8.13.1:
    dependencies:
      '@cspell/cspell-pipe': 8.13.1
      '@cspell/cspell-types': 8.13.1

  cspell-io@8.13.1:
    dependencies:
      '@cspell/cspell-service-bus': 8.13.1
      '@cspell/url': 8.13.1

  cspell-lib@8.13.1:
    dependencies:
      '@cspell/cspell-bundled-dicts': 8.13.1
      '@cspell/cspell-pipe': 8.13.1
      '@cspell/cspell-resolver': 8.13.1
      '@cspell/cspell-types': 8.13.1
      '@cspell/dynamic-import': 8.13.1
      '@cspell/strong-weak-map': 8.13.1
      '@cspell/url': 8.13.1
      clear-module: 4.1.2
      comment-json: 4.2.4
      cspell-config-lib: 8.13.1
      cspell-dictionary: 8.13.1
      cspell-glob: 8.13.1
      cspell-grammar: 8.13.1
      cspell-io: 8.13.1
      cspell-trie-lib: 8.13.1
      env-paths: 3.0.0
      fast-equals: 5.0.1
      gensequence: 7.0.0
      import-fresh: 3.3.0
      resolve-from: 5.0.0
      vscode-languageserver-textdocument: 1.0.12
      vscode-uri: 3.0.8
      xdg-basedir: 5.1.0

  cspell-trie-lib@8.13.1:
    dependencies:
      '@cspell/cspell-pipe': 8.13.1
      '@cspell/cspell-types': 8.13.1
      gensequence: 7.0.0

  cspell@8.13.1:
    dependencies:
      '@cspell/cspell-json-reporter': 8.13.1
      '@cspell/cspell-pipe': 8.13.1
      '@cspell/cspell-types': 8.13.1
      '@cspell/dynamic-import': 8.13.1
      '@cspell/url': 8.13.1
      chalk: 5.3.0
      chalk-template: 1.1.0
      commander: 12.1.0
      cspell-dictionary: 8.13.1
      cspell-gitignore: 8.13.1
      cspell-glob: 8.13.1
      cspell-io: 8.13.1
      cspell-lib: 8.13.1
      fast-glob: 3.3.2
      fast-json-stable-stringify: 2.1.0
      file-entry-cache: 9.0.0
      get-stdin: 9.0.0
      semver: 7.6.3
      strip-ansi: 7.1.0

  css-select@5.1.0:
    dependencies:
      boolbase: 1.0.0
      css-what: 6.1.0
      domhandler: 5.0.3
      domutils: 3.1.0
      nth-check: 2.1.1

  css-tree@2.2.1:
    dependencies:
      mdn-data: 2.0.28
      source-map-js: 1.2.0

  css-tree@2.3.1:
    dependencies:
      mdn-data: 2.0.30
      source-map-js: 1.2.0

  css-what@6.1.0: {}

  cssesc@3.0.0: {}

  cssfilter@0.0.10: {}

  cssnano-utils@5.0.0(postcss@8.4.39):
    dependencies:
      postcss: 8.4.39

  csso@5.0.5:
    dependencies:
      css-tree: 2.2.1

  csstype@3.1.3: {}

  damerau-levenshtein@1.0.8: {}

  data-view-buffer@1.0.1:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  data-view-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  data-view-byte-offset@1.0.0:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  dataloader@2.2.2: {}

  date-fns@3.6.0: {}

  dayjs@1.11.12: {}

  debounce@1.2.1: {}

  debug@2.6.9:
    dependencies:
      ms: 2.0.0

  debug@3.2.7:
    dependencies:
      ms: 2.1.3

  debug@4.3.6:
    dependencies:
      ms: 2.1.2

  decamelize@1.2.0: {}

  dedent@1.5.3(babel-plugin-macros@3.1.0):
    optionalDependencies:
      babel-plugin-macros: 3.1.0

  deep-equal@2.2.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      call-bind: 1.0.7
      es-get-iterator: 1.1.3
      get-intrinsic: 1.2.4
      is-arguments: 1.1.1
      is-array-buffer: 3.0.4
      is-date-object: 1.0.5
      is-regex: 1.1.4
      is-shared-array-buffer: 1.0.3
      isarray: 2.0.5
      object-is: 1.1.6
      object-keys: 1.1.1
      object.assign: 4.1.5
      regexp.prototype.flags: 1.5.2
      side-channel: 1.0.6
      which-boxed-primitive: 1.0.2
      which-collection: 1.0.2
      which-typed-array: 1.1.15

  deep-freeze-strict@1.1.1: {}

  deep-is@0.1.4: {}

  deepmerge@4.3.1: {}

  defaults@1.0.4:
    dependencies:
      clone: 1.0.4

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      gopd: 1.0.1

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  delayed-stream@1.0.0: {}

  denque@2.1.0: {}

  depd@2.0.0: {}

  dependency-graph@0.11.0: {}

  destroy@1.2.0: {}

  detect-indent@6.1.0: {}

  detect-libc@1.0.3: {}

  detect-libc@2.0.3: {}

  detect-newline@3.1.0: {}

  dezalgo@1.0.4:
    dependencies:
      asap: 2.0.6
      wrappy: 1.0.2

  diff-sequences@29.6.3: {}

  diff@4.0.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  doctrine@3.0.0:
    dependencies:
      esutils: 2.0.3

  dom-serializer@2.0.0:
    dependencies:
      domelementtype: 2.3.0
      domhandler: 5.0.3
      entities: 4.5.0

  domelementtype@2.3.0: {}

  domhandler@5.0.3:
    dependencies:
      domelementtype: 2.3.0

  domutils@3.1.0:
    dependencies:
      dom-serializer: 2.0.0
      domelementtype: 2.3.0
      domhandler: 5.0.3

  dot-case@3.0.4:
    dependencies:
      no-case: 3.0.4
      tslib: 2.7.0

  dotenv-expand@10.0.0: {}

  dotenv@16.4.5: {}

  dset@3.1.3: {}

  eastasianwidth@0.2.0: {}

  ecpair@2.1.0:
    dependencies:
      randombytes: 2.1.0
      typeforce: 1.18.0
      wif: 2.0.6

  ee-first@1.1.1: {}

  ejs@3.1.10:
    dependencies:
      jake: 10.9.2

  electron-to-chromium@1.4.825: {}

  electron-to-chromium@1.5.4: {}

  elliptic@6.5.4:
    dependencies:
      bn.js: 4.12.0
      brorand: 1.1.0
      hash.js: 1.1.7
      hmac-drbg: 1.0.1
      inherits: 2.0.4
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  emittery@0.13.1: {}

  emoji-regex@10.3.0: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  encodeurl@1.0.2: {}

  enhanced-resolve@5.17.0:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.1

  entities@4.5.0: {}

  env-paths@3.0.0: {}

  environment@1.1.0: {}

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  es-abstract@1.23.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      arraybuffer.prototype.slice: 1.0.3
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      data-view-buffer: 1.0.1
      data-view-byte-length: 1.0.1
      data-view-byte-offset: 1.0.0
      es-define-property: 1.0.0
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-set-tostringtag: 2.0.3
      es-to-primitive: 1.2.1
      function.prototype.name: 1.1.6
      get-intrinsic: 1.2.4
      get-symbol-description: 1.0.2
      globalthis: 1.0.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2
      internal-slot: 1.0.7
      is-array-buffer: 3.0.4
      is-callable: 1.2.7
      is-data-view: 1.0.1
      is-negative-zero: 2.0.3
      is-regex: 1.1.4
      is-shared-array-buffer: 1.0.3
      is-string: 1.0.7
      is-typed-array: 1.1.13
      is-weakref: 1.0.2
      object-inspect: 1.13.2
      object-keys: 1.1.1
      object.assign: 4.1.5
      regexp.prototype.flags: 1.5.2
      safe-array-concat: 1.1.2
      safe-regex-test: 1.0.3
      string.prototype.trim: 1.2.9
      string.prototype.trimend: 1.0.8
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.2
      typed-array-byte-length: 1.0.1
      typed-array-byte-offset: 1.0.2
      typed-array-length: 1.0.6
      unbox-primitive: 1.0.2
      which-typed-array: 1.1.15

  es-define-property@1.0.0:
    dependencies:
      get-intrinsic: 1.2.4

  es-errors@1.3.0: {}

  es-get-iterator@1.1.3:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      is-arguments: 1.1.1
      is-map: 2.0.3
      is-set: 2.0.3
      is-string: 1.0.7
      isarray: 2.0.5
      stop-iteration-iterator: 1.0.0

  es-iterator-helpers@1.0.19:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-set-tostringtag: 2.0.3
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      globalthis: 1.0.4
      has-property-descriptors: 1.0.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      internal-slot: 1.0.7
      iterator.prototype: 1.1.2
      safe-array-concat: 1.1.2

  es-module-lexer@1.5.4: {}

  es-object-atoms@1.0.0:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.0.3:
    dependencies:
      get-intrinsic: 1.2.4
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.0.2:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.2.1:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.0.5
      is-symbol: 1.0.4

  esbuild@0.17.19:
    optionalDependencies:
      '@esbuild/android-arm': 0.17.19
      '@esbuild/android-arm64': 0.17.19
      '@esbuild/android-x64': 0.17.19
      '@esbuild/darwin-arm64': 0.17.19
      '@esbuild/darwin-x64': 0.17.19
      '@esbuild/freebsd-arm64': 0.17.19
      '@esbuild/freebsd-x64': 0.17.19
      '@esbuild/linux-arm': 0.17.19
      '@esbuild/linux-arm64': 0.17.19
      '@esbuild/linux-ia32': 0.17.19
      '@esbuild/linux-loong64': 0.17.19
      '@esbuild/linux-mips64el': 0.17.19
      '@esbuild/linux-ppc64': 0.17.19
      '@esbuild/linux-riscv64': 0.17.19
      '@esbuild/linux-s390x': 0.17.19
      '@esbuild/linux-x64': 0.17.19
      '@esbuild/netbsd-x64': 0.17.19
      '@esbuild/openbsd-x64': 0.17.19
      '@esbuild/sunos-x64': 0.17.19
      '@esbuild/win32-arm64': 0.17.19
      '@esbuild/win32-ia32': 0.17.19
      '@esbuild/win32-x64': 0.17.19

  esbuild@0.20.2:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.20.2
      '@esbuild/android-arm': 0.20.2
      '@esbuild/android-arm64': 0.20.2
      '@esbuild/android-x64': 0.20.2
      '@esbuild/darwin-arm64': 0.20.2
      '@esbuild/darwin-x64': 0.20.2
      '@esbuild/freebsd-arm64': 0.20.2
      '@esbuild/freebsd-x64': 0.20.2
      '@esbuild/linux-arm': 0.20.2
      '@esbuild/linux-arm64': 0.20.2
      '@esbuild/linux-ia32': 0.20.2
      '@esbuild/linux-loong64': 0.20.2
      '@esbuild/linux-mips64el': 0.20.2
      '@esbuild/linux-ppc64': 0.20.2
      '@esbuild/linux-riscv64': 0.20.2
      '@esbuild/linux-s390x': 0.20.2
      '@esbuild/linux-x64': 0.20.2
      '@esbuild/netbsd-x64': 0.20.2
      '@esbuild/openbsd-x64': 0.20.2
      '@esbuild/sunos-x64': 0.20.2
      '@esbuild/win32-arm64': 0.20.2
      '@esbuild/win32-ia32': 0.20.2
      '@esbuild/win32-x64': 0.20.2

  escalade@3.1.2: {}

  escape-html@1.0.3: {}

  escape-string-regexp@1.0.5: {}

  escape-string-regexp@2.0.0: {}

  escape-string-regexp@4.0.0: {}

  eslint-config-next@14.2.4(eslint@8.57.0)(typescript@5.5.3):
    dependencies:
      '@next/eslint-plugin-next': 14.2.4
      '@rushstack/eslint-patch': 1.10.4
      '@typescript-eslint/parser': 6.21.0(eslint@8.57.0)(typescript@5.5.3)
      eslint: 8.57.0
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0)
      eslint-plugin-import: 2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-typescript@3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0))(eslint@8.57.0)
      eslint-plugin-jsx-a11y: 6.9.0(eslint@8.57.0)
      eslint-plugin-react: 7.35.0(eslint@8.57.0)
      eslint-plugin-react-hooks: 4.6.2(eslint@8.57.0)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - eslint-import-resolver-webpack
      - supports-color

  eslint-config-prettier@9.1.0(eslint@8.57.0):
    dependencies:
      eslint: 8.57.0

  eslint-import-resolver-node@0.3.9:
    dependencies:
      debug: 3.2.7
      is-core-module: 2.14.0
      resolve: 1.22.8
    transitivePeerDependencies:
      - supports-color

  eslint-import-resolver-typescript@3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0):
    dependencies:
      debug: 4.3.6
      enhanced-resolve: 5.17.0
      eslint: 8.57.0
      eslint-module-utils: 2.8.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0))(eslint@8.57.0)
      eslint-plugin-import: 2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-typescript@3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0))(eslint@8.57.0)
      fast-glob: 3.3.2
      get-tsconfig: 4.7.6
      is-core-module: 2.14.0
      is-glob: 4.0.3
    transitivePeerDependencies:
      - '@typescript-eslint/parser'
      - eslint-import-resolver-node
      - eslint-import-resolver-webpack
      - supports-color

  eslint-module-utils@2.8.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0))(eslint@8.57.0):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 6.21.0(eslint@8.57.0)(typescript@5.5.3)
      eslint: 8.57.0
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0)
    transitivePeerDependencies:
      - supports-color

  eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-typescript@3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0))(eslint@8.57.0):
    dependencies:
      array-includes: 3.1.8
      array.prototype.findlastindex: 1.2.5
      array.prototype.flat: 1.3.2
      array.prototype.flatmap: 1.3.2
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 8.57.0
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.8.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.29.1(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0))(eslint@8.57.0))(eslint@8.57.0)
      hasown: 2.0.2
      is-core-module: 2.14.0
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.0
      semver: 6.3.1
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 6.21.0(eslint@8.57.0)(typescript@5.5.3)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-jsx-a11y@6.9.0(eslint@8.57.0):
    dependencies:
      aria-query: 5.1.3
      array-includes: 3.1.8
      array.prototype.flatmap: 1.3.2
      ast-types-flow: 0.0.8
      axe-core: 4.10.0
      axobject-query: 3.1.1
      damerau-levenshtein: 1.0.8
      emoji-regex: 9.2.2
      es-iterator-helpers: 1.0.19
      eslint: 8.57.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      language-tags: 1.0.9
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      safe-regex-test: 1.0.3
      string.prototype.includes: 2.0.0

  eslint-plugin-no-relative-import-paths@1.5.5: {}

  eslint-plugin-prettier@5.2.1(@types/eslint@9.6.0)(eslint-config-prettier@9.1.0(eslint@8.57.0))(eslint@8.57.0)(prettier@3.3.2):
    dependencies:
      eslint: 8.57.0
      prettier: 3.3.2
      prettier-linter-helpers: 1.0.0
      synckit: 0.9.1
    optionalDependencies:
      '@types/eslint': 9.6.0
      eslint-config-prettier: 9.1.0(eslint@8.57.0)

  eslint-plugin-react-hooks@4.6.2(eslint@8.57.0):
    dependencies:
      eslint: 8.57.0

  eslint-plugin-react@7.35.0(eslint@8.57.0):
    dependencies:
      array-includes: 3.1.8
      array.prototype.findlast: 1.2.5
      array.prototype.flatmap: 1.3.2
      array.prototype.tosorted: 1.1.4
      doctrine: 2.1.0
      es-iterator-helpers: 1.0.19
      eslint: 8.57.0
      estraverse: 5.3.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      minimatch: 3.1.2
      object.entries: 1.1.8
      object.fromentries: 2.0.8
      object.values: 1.2.0
      prop-types: 15.8.1
      resolve: 2.0.0-next.5
      semver: 6.3.1
      string.prototype.matchall: 4.0.11
      string.prototype.repeat: 1.0.0

  eslint-plugin-simple-import-sort@10.0.0(eslint@8.57.0):
    dependencies:
      eslint: 8.57.0

  eslint-plugin-unicorn@49.0.0(eslint@8.57.0):
    dependencies:
      '@babel/helper-validator-identifier': 7.24.7
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.0)
      ci-info: 3.9.0
      clean-regexp: 1.0.0
      eslint: 8.57.0
      esquery: 1.6.0
      indent-string: 4.0.0
      is-builtin-module: 3.2.1
      jsesc: 3.0.2
      pluralize: 8.0.0
      read-pkg-up: 7.0.1
      regexp-tree: 0.1.27
      regjsparser: 0.10.0
      semver: 7.6.2
      strip-indent: 3.0.0

  eslint-plugin-unused-imports@3.2.0(@typescript-eslint/eslint-plugin@6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0):
    dependencies:
      eslint: 8.57.0
      eslint-rule-composer: 0.3.0
    optionalDependencies:
      '@typescript-eslint/eslint-plugin': 6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.5.3))(eslint@8.57.0)(typescript@5.5.3)

  eslint-rule-composer@0.3.0: {}

  eslint-scope@5.1.1:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 4.3.0

  eslint-scope@7.2.2:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint@8.57.0:
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.0)
      '@eslint-community/regexpp': 4.11.0
      '@eslint/eslintrc': 2.1.4
      '@eslint/js': 8.57.0
      '@humanwhocodes/config-array': 0.11.14
      '@humanwhocodes/module-importer': 1.0.1
      '@nodelib/fs.walk': 1.2.8
      '@ungap/structured-clone': 1.2.0
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.3
      debug: 4.3.6
      doctrine: 3.0.0
      escape-string-regexp: 4.0.0
      eslint-scope: 7.2.2
      eslint-visitor-keys: 3.4.3
      espree: 9.6.1
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 6.0.1
      find-up: 5.0.0
      glob-parent: 6.0.2
      globals: 13.24.0
      graphemer: 1.4.0
      ignore: 5.3.1
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      is-path-inside: 3.0.3
      js-yaml: 4.1.0
      json-stable-stringify-without-jsonify: 1.0.1
      levn: 0.4.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
      strip-ansi: 6.0.1
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color

  espree@9.6.1:
    dependencies:
      acorn: 8.12.1
      acorn-jsx: 5.3.2(acorn@8.12.1)
      eslint-visitor-keys: 3.4.3

  esprima@4.0.1: {}

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@4.3.0: {}

  estraverse@5.3.0: {}

  estree-walker@2.0.2: {}

  esutils@2.0.3: {}

  etag@1.8.1: {}

  event-target-shim@5.0.1: {}

  eventemitter2@6.4.9: {}

  eventemitter3@3.1.2: {}

  eventemitter3@4.0.7: {}

  eventemitter3@5.0.1: {}

  events@3.3.0: {}

  execa@5.1.1:
    dependencies:
      cross-spawn: 7.0.3
      get-stream: 6.0.1
      human-signals: 2.1.0
      is-stream: 2.0.1
      merge-stream: 2.0.0
      npm-run-path: 4.0.1
      onetime: 5.1.2
      signal-exit: 3.0.7
      strip-final-newline: 2.0.0

  execa@8.0.1:
    dependencies:
      cross-spawn: 7.0.3
      get-stream: 8.0.1
      human-signals: 5.0.0
      is-stream: 3.0.0
      merge-stream: 2.0.0
      npm-run-path: 5.3.0
      onetime: 6.0.0
      signal-exit: 4.1.0
      strip-final-newline: 3.0.0

  exit@0.1.2: {}

  expect@29.7.0:
    dependencies:
      '@jest/expect-utils': 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0

  express@4.19.2:
    dependencies:
      accepts: 1.3.8
      array-flatten: 1.1.1
      body-parser: 1.20.2
      content-disposition: 0.5.4
      content-type: 1.0.5
      cookie: 0.6.0
      cookie-signature: 1.0.6
      debug: 2.6.9
      depd: 2.0.0
      encodeurl: 1.0.2
      escape-html: 1.0.3
      etag: 1.8.1
      finalhandler: 1.2.0
      fresh: 0.5.2
      http-errors: 2.0.0
      merge-descriptors: 1.0.1
      methods: 1.1.2
      on-finished: 2.4.1
      parseurl: 1.3.3
      path-to-regexp: 0.1.7
      proxy-addr: 2.0.7
      qs: 6.11.0
      range-parser: 1.2.1
      safe-buffer: 5.2.1
      send: 0.18.0
      serve-static: 1.15.0
      setprototypeof: 1.2.0
      statuses: 2.0.1
      type-is: 1.6.18
      utils-merge: 1.0.1
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  external-editor@3.1.0:
    dependencies:
      chardet: 0.7.0
      iconv-lite: 0.4.24
      tmp: 0.0.33

  extract-files@11.0.0: {}

  fast-content-type-parse@1.1.0: {}

  fast-decode-uri-component@1.0.1: {}

  fast-deep-equal@3.1.3: {}

  fast-diff@1.3.0: {}

  fast-equals@5.0.1: {}

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.7

  fast-json-stable-stringify@2.1.0: {}

  fast-json-stringify@5.16.1:
    dependencies:
      '@fastify/merge-json-schemas': 0.1.1
      ajv: 8.17.1
      ajv-formats: 3.0.1(ajv@8.17.1)
      fast-deep-equal: 3.1.3
      fast-uri: 2.4.0
      json-schema-ref-resolver: 1.0.1
      rfdc: 1.4.1

  fast-levenshtein@2.0.6: {}

  fast-querystring@1.1.2:
    dependencies:
      fast-decode-uri-component: 1.0.1

  fast-redact@3.5.0: {}

  fast-safe-stringify@2.1.1: {}

  fast-uri@2.4.0: {}

  fast-uri@3.0.1: {}

  fast-url-parser@1.1.3:
    dependencies:
      punycode: 1.4.1

  fastify-plugin@4.5.1: {}

  fastify@4.28.1:
    dependencies:
      '@fastify/ajv-compiler': 3.6.0
      '@fastify/error': 3.4.1
      '@fastify/fast-json-stringify-compiler': 4.3.0
      abstract-logging: 2.0.1
      avvio: 8.3.2
      fast-content-type-parse: 1.1.0
      fast-json-stringify: 5.16.1
      find-my-way: 8.2.0
      light-my-request: 5.13.0
      pino: 9.3.2
      process-warning: 3.0.0
      proxy-addr: 2.0.7
      rfdc: 1.4.1
      secure-json-parse: 2.7.0
      semver: 7.6.3
      toad-cache: 3.7.0

  fastq@1.17.1:
    dependencies:
      reusify: 1.0.4

  fb-watchman@2.0.2:
    dependencies:
      bser: 2.1.1

  fbjs-css-vars@1.0.2: {}

  fbjs@3.0.5:
    dependencies:
      cross-fetch: 3.1.8
      fbjs-css-vars: 1.0.2
      loose-envify: 1.4.0
      object-assign: 4.1.1
      promise: 7.3.1
      setimmediate: 1.0.5
      ua-parser-js: 1.0.38
    transitivePeerDependencies:
      - encoding

  figures@3.2.0:
    dependencies:
      escape-string-regexp: 1.0.5

  file-entry-cache@6.0.1:
    dependencies:
      flat-cache: 3.2.0

  file-entry-cache@9.0.0:
    dependencies:
      flat-cache: 5.0.0

  file-size@1.0.0: {}

  filelist@1.0.4:
    dependencies:
      minimatch: 5.1.6

  filesize@10.1.2: {}

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  finalhandler@1.2.0:
    dependencies:
      debug: 2.6.9
      encodeurl: 1.0.2
      escape-html: 1.0.3
      on-finished: 2.4.1
      parseurl: 1.3.3
      statuses: 2.0.1
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  find-my-way@8.2.0:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-querystring: 1.1.2
      safe-regex2: 3.1.0

  find-up-simple@1.0.0: {}

  find-up@3.0.0:
    dependencies:
      locate-path: 3.0.0

  find-up@4.1.0:
    dependencies:
      locate-path: 5.0.0
      path-exists: 4.0.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  find-yarn-workspace-root2@1.2.16:
    dependencies:
      micromatch: 4.0.7
      pkg-dir: 4.2.0

  flat-cache@3.2.0:
    dependencies:
      flatted: 3.3.1
      keyv: 4.5.4
      rimraf: 3.0.2

  flat-cache@5.0.0:
    dependencies:
      flatted: 3.3.1
      keyv: 4.5.4

  flatted@3.3.1: {}

  focus-trap@7.5.4:
    dependencies:
      tabbable: 6.2.0

  follow-redirects@1.15.6: {}

  for-each@0.3.3:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.2.1:
    dependencies:
      cross-spawn: 7.0.3
      signal-exit: 4.1.0

  fork-ts-checker-webpack-plugin@9.0.2(typescript@5.3.3)(webpack@5.92.1):
    dependencies:
      '@babel/code-frame': 7.24.7
      chalk: 4.1.2
      chokidar: 3.6.0
      cosmiconfig: 8.3.6(typescript@5.3.3)
      deepmerge: 4.3.1
      fs-extra: 10.1.0
      memfs: 3.5.3
      minimatch: 3.1.2
      node-abort-controller: 3.1.1
      schema-utils: 3.3.0
      semver: 7.6.3
      tapable: 2.2.1
      typescript: 5.3.3
      webpack: 5.92.1

  form-data@4.0.0:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  formidable@3.5.1:
    dependencies:
      dezalgo: 1.0.4
      hexoid: 1.0.0
      once: 1.4.0

  forwarded@0.2.0: {}

  fresh@0.5.2: {}

  fs-extra@10.1.0:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 6.1.0
      universalify: 2.0.1

  fs-extra@11.2.0:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 6.1.0
      universalify: 2.0.1

  fs-monkey@1.0.6: {}

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  function.prototype.name@1.1.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      functions-have-names: 1.2.3

  functions-have-names@1.2.3: {}

  generic-pool@3.9.0: {}

  gensequence@7.0.0: {}

  gensync@1.0.0-beta.2: {}

  get-caller-file@2.0.5: {}

  get-east-asian-width@1.2.0: {}

  get-intrinsic@1.2.4:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2

  get-package-type@0.1.0: {}

  get-stdin@9.0.0: {}

  get-stream@6.0.1: {}

  get-stream@8.0.1: {}

  get-symbol-description@1.0.2:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4

  get-tsconfig@4.7.6:
    dependencies:
      resolve-pkg-maps: 1.0.0

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob-to-regexp@0.4.1: {}

  glob@10.3.10:
    dependencies:
      foreground-child: 3.2.1
      jackspeak: 2.3.6
      minimatch: 9.0.5
      minipass: 7.1.2
      path-scurry: 1.11.1

  glob@10.4.2:
    dependencies:
      foreground-child: 3.2.1
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.0
      path-scurry: 1.11.1

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  global-directory@4.0.1:
    dependencies:
      ini: 4.1.1

  globals@11.12.0: {}

  globals@13.24.0:
    dependencies:
      type-fest: 0.20.2

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.0.1

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.2
      ignore: 5.3.1
      merge2: 1.4.1
      slash: 3.0.0

  gopd@1.0.1:
    dependencies:
      get-intrinsic: 1.2.4

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  graphql-config@5.1.0(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(typescript@5.5.3)(utf-8-validate@5.0.10):
    dependencies:
      '@graphql-tools/graphql-file-loader': 8.0.1(graphql@16.9.0)
      '@graphql-tools/json-file-loader': 8.0.1(graphql@16.9.0)
      '@graphql-tools/load': 8.0.2(graphql@16.9.0)
      '@graphql-tools/merge': 9.0.4(graphql@16.9.0)
      '@graphql-tools/url-loader': 8.0.2(@types/node@20.14.10)(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10)
      '@graphql-tools/utils': 10.3.2(graphql@16.9.0)
      cosmiconfig: 8.3.6(typescript@5.5.3)
      graphql: 16.9.0
      jiti: 1.21.6
      minimatch: 4.2.3
      string-env-interpolation: 1.0.1
      tslib: 2.7.0
    transitivePeerDependencies:
      - '@types/node'
      - bufferutil
      - encoding
      - typescript
      - utf-8-validate

  graphql-query-complexity@1.0.0(graphql@16.9.0):
    dependencies:
      graphql: 16.9.0
      lodash.get: 4.4.2

  graphql-request@6.1.0(graphql@16.9.0):
    dependencies:
      '@graphql-typed-document-node/core': 3.2.0(graphql@16.9.0)
      cross-fetch: 3.1.8
      graphql: 16.9.0
    transitivePeerDependencies:
      - encoding

  graphql-request@7.1.0(graphql@16.9.0):
    dependencies:
      '@graphql-typed-document-node/core': 3.2.0(graphql@16.9.0)
      '@molt/command': 0.9.0
      graphql: 16.9.0
      zod: 3.23.8

  graphql-tag@2.12.6(graphql@16.9.0):
    dependencies:
      graphql: 16.9.0
      tslib: 2.6.3

  graphql-ws@5.16.0(graphql@16.9.0):
    dependencies:
      graphql: 16.9.0

  graphql@16.9.0: {}

  has-bigints@1.0.2: {}

  has-flag@3.0.0: {}

  has-flag@4.0.0: {}

  has-own-prop@2.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.0

  has-proto@1.0.3: {}

  has-symbols@1.0.3: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.0.3

  hash-base@3.1.0:
    dependencies:
      inherits: 2.0.4
      readable-stream: 3.6.2
      safe-buffer: 5.2.1

  hash.js@1.1.7:
    dependencies:
      inherits: 2.0.4
      minimalistic-assert: 1.0.1

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  header-case@2.0.4:
    dependencies:
      capital-case: 1.0.4
      tslib: 2.7.0

  hexoid@1.0.0: {}

  hmac-drbg@1.0.1:
    dependencies:
      hash.js: 1.1.7
      minimalistic-assert: 1.0.1
      minimalistic-crypto-utils: 1.0.1

  hoist-non-react-statics@3.3.2:
    dependencies:
      react-is: 16.13.1

  hookable@5.5.3: {}

  hosted-git-info@2.8.9: {}

  html-escaper@2.0.2: {}

  http-errors@2.0.0:
    dependencies:
      depd: 2.0.0
      inherits: 2.0.4
      setprototypeof: 1.2.0
      statuses: 2.0.1
      toidentifier: 1.0.1

  http-proxy-agent@7.0.2:
    dependencies:
      agent-base: 7.1.1
      debug: 4.3.6
    transitivePeerDependencies:
      - supports-color

  https-proxy-agent@7.0.5:
    dependencies:
      agent-base: 7.1.1
      debug: 4.3.6
    transitivePeerDependencies:
      - supports-color

  human-signals@2.1.0: {}

  human-signals@5.0.0: {}

  husky@9.1.4: {}

  iconv-lite@0.4.24:
    dependencies:
      safer-buffer: 2.1.2

  ieee754@1.2.1: {}

  ignore@5.3.1: {}

  immutable@3.7.6: {}

  immutable@4.3.7: {}

  import-fresh@3.3.0:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  import-from@4.0.0: {}

  import-in-the-middle@1.11.0:
    dependencies:
      acorn: 8.12.1
      acorn-import-attributes: 1.9.5(acorn@8.12.1)
      cjs-module-lexer: 1.3.1
      module-details-from-path: 1.0.3

  import-in-the-middle@1.7.1:
    dependencies:
      acorn: 8.12.1
      acorn-import-assertions: 1.9.0(acorn@8.12.1)
      cjs-module-lexer: 1.3.1
      module-details-from-path: 1.0.3
    optional: true

  import-local@3.2.0:
    dependencies:
      pkg-dir: 4.2.0
      resolve-cwd: 3.0.0

  import-meta-resolve@4.1.0: {}

  imurmurhash@0.1.4: {}

  indent-string@4.0.0: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.4: {}

  ini@4.1.1: {}

  inquirer@7.3.3:
    dependencies:
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      cli-cursor: 3.1.0
      cli-width: 3.0.0
      external-editor: 3.1.0
      figures: 3.2.0
      lodash: 4.17.21
      mute-stream: 0.0.8
      run-async: 2.4.1
      rxjs: 6.6.7
      string-width: 4.2.3
      strip-ansi: 6.0.1
      through: 2.3.8

  inquirer@8.2.6:
    dependencies:
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      cli-cursor: 3.1.0
      cli-width: 3.0.0
      external-editor: 3.1.0
      figures: 3.2.0
      lodash: 4.17.21
      mute-stream: 0.0.8
      ora: 5.4.1
      run-async: 2.4.1
      rxjs: 7.8.1
      string-width: 4.2.3
      strip-ansi: 6.0.1
      through: 2.3.8
      wrap-ansi: 6.2.0

  inquirer@9.2.15:
    dependencies:
      '@ljharb/through': 2.3.13
      ansi-escapes: 4.3.2
      chalk: 5.3.0
      cli-cursor: 3.1.0
      cli-width: 4.1.0
      external-editor: 3.1.0
      figures: 3.2.0
      lodash: 4.17.21
      mute-stream: 1.0.0
      ora: 5.4.1
      run-async: 3.0.0
      rxjs: 7.8.1
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 6.2.0

  internal-slot@1.0.7:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.0.6

  invariant@2.2.4:
    dependencies:
      loose-envify: 1.4.0

  ioredis@5.4.1:
    dependencies:
      '@ioredis/commands': 1.2.0
      cluster-key-slot: 1.1.2
      debug: 4.3.6
      denque: 2.1.0
      lodash.defaults: 4.2.0
      lodash.isarguments: 3.1.0
      redis-errors: 1.2.0
      redis-parser: 3.0.0
      standard-as-callback: 2.1.0
    transitivePeerDependencies:
      - supports-color

  ipaddr.js@1.9.1: {}

  is-absolute@1.0.0:
    dependencies:
      is-relative: 1.0.0
      is-windows: 1.0.2

  is-arguments@1.1.1:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-array-buffer@3.0.4:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4

  is-arrayish@0.2.1: {}

  is-async-function@2.0.0:
    dependencies:
      has-tostringtag: 1.0.2

  is-bigint@1.0.4:
    dependencies:
      has-bigints: 1.0.2

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-boolean-object@1.1.2:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-builtin-module@3.2.1:
    dependencies:
      builtin-modules: 3.3.0

  is-callable@1.2.7: {}

  is-core-module@2.14.0:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.1:
    dependencies:
      is-typed-array: 1.1.13

  is-date-object@1.0.5:
    dependencies:
      has-tostringtag: 1.0.2

  is-extglob@2.1.1: {}

  is-finalizationregistry@1.0.2:
    dependencies:
      call-bind: 1.0.7

  is-fullwidth-code-point@3.0.0: {}

  is-fullwidth-code-point@4.0.0: {}

  is-fullwidth-code-point@5.0.0:
    dependencies:
      get-east-asian-width: 1.2.0

  is-generator-fn@2.1.0: {}

  is-generator-function@1.0.10:
    dependencies:
      has-tostringtag: 1.0.2

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-interactive@1.0.0: {}

  is-lower-case@2.0.2:
    dependencies:
      tslib: 2.7.0

  is-map@2.0.3: {}

  is-negative-zero@2.0.3: {}

  is-number-object@1.0.7:
    dependencies:
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-path-inside@3.0.3: {}

  is-regex@1.1.4:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-relative@1.0.0:
    dependencies:
      is-unc-path: 1.0.0

  is-set@2.0.3: {}

  is-shared-array-buffer@1.0.3:
    dependencies:
      call-bind: 1.0.7

  is-stream@2.0.1: {}

  is-stream@3.0.0: {}

  is-string@1.0.7:
    dependencies:
      has-tostringtag: 1.0.2

  is-symbol@1.0.4:
    dependencies:
      has-symbols: 1.0.3

  is-typed-array@1.1.13:
    dependencies:
      which-typed-array: 1.1.15

  is-unc-path@1.0.0:
    dependencies:
      unc-path-regex: 0.1.2

  is-unicode-supported@0.1.0: {}

  is-upper-case@2.0.2:
    dependencies:
      tslib: 2.7.0

  is-weakmap@2.0.2: {}

  is-weakref@1.0.2:
    dependencies:
      call-bind: 1.0.7

  is-weakset@2.0.3:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4

  is-what@4.1.16: {}

  is-windows@1.0.2: {}

  isarray@1.0.0:
    optional: true

  isarray@2.0.5: {}

  isexe@2.0.0: {}

  isomorphic-ws@5.0.0(ws@8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)):
    dependencies:
      ws: 8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)

  istanbul-lib-coverage@3.2.2: {}

  istanbul-lib-instrument@5.2.1:
    dependencies:
      '@babel/core': 7.24.7
      '@babel/parser': 7.25.3
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-instrument@6.0.3:
    dependencies:
      '@babel/core': 7.24.7
      '@babel/parser': 7.25.3
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 7.6.3
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-report@3.0.1:
    dependencies:
      istanbul-lib-coverage: 3.2.2
      make-dir: 4.0.0
      supports-color: 7.2.0

  istanbul-lib-source-maps@4.0.1:
    dependencies:
      debug: 4.3.6
      istanbul-lib-coverage: 3.2.2
      source-map: 0.6.1
    transitivePeerDependencies:
      - supports-color

  istanbul-reports@3.1.7:
    dependencies:
      html-escaper: 2.0.2
      istanbul-lib-report: 3.0.1

  iterall@1.3.0: {}

  iterare@1.2.1: {}

  iterator.prototype@1.1.2:
    dependencies:
      define-properties: 1.2.1
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      reflect.getprototypeof: 1.0.6
      set-function-name: 2.0.2

  jackspeak@2.3.6:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jake@10.9.2:
    dependencies:
      async: 3.2.5
      chalk: 4.1.2
      filelist: 1.0.4
      minimatch: 3.1.2

  javascript-stringify@2.1.0: {}

  jest-changed-files@29.7.0:
    dependencies:
      execa: 5.1.1
      jest-util: 29.7.0
      p-limit: 3.1.0

  jest-circus@29.7.0(babel-plugin-macros@3.1.0):
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      co: 4.6.0
      dedent: 1.5.3(babel-plugin-macros@3.1.0)
      is-generator-fn: 2.1.0
      jest-each: 29.7.0
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      p-limit: 3.1.0
      pretty-format: 29.7.0
      pure-rand: 6.1.0
      slash: 3.0.0
      stack-utils: 2.0.6
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-cli@29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      '@jest/core': 29.7.0(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      chalk: 4.1.2
      create-jest: 29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      exit: 0.1.2
      import-local: 3.2.0
      jest-config: 29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      jest-util: 29.7.0
      jest-validate: 29.7.0
      yargs: 17.7.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  jest-config@29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      '@babel/core': 7.24.7
      '@jest/test-sequencer': 29.7.0
      '@jest/types': 29.6.3
      babel-jest: 29.7.0(@babel/core@7.24.7)
      chalk: 4.1.2
      ci-info: 3.9.0
      deepmerge: 4.3.1
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-circus: 29.7.0(babel-plugin-macros@3.1.0)
      jest-environment-node: 29.7.0
      jest-get-type: 29.6.3
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-runner: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      micromatch: 4.0.7
      parse-json: 5.2.0
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-json-comments: 3.1.1
    optionalDependencies:
      '@types/node': 20.14.10
      ts-node: 10.9.2(@types/node@20.14.10)(typescript@5.5.3)
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-diff@29.7.0:
    dependencies:
      chalk: 4.1.2
      diff-sequences: 29.6.3
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-docblock@29.7.0:
    dependencies:
      detect-newline: 3.1.0

  jest-each@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      jest-get-type: 29.6.3
      jest-util: 29.7.0
      pretty-format: 29.7.0

  jest-environment-node@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-mock: 29.7.0
      jest-util: 29.7.0

  jest-get-type@29.6.3: {}

  jest-haste-map@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/graceful-fs': 4.1.9
      '@types/node': 20.14.10
      anymatch: 3.1.3
      fb-watchman: 2.0.2
      graceful-fs: 4.2.11
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      jest-worker: 29.7.0
      micromatch: 4.0.7
      walker: 1.0.8
    optionalDependencies:
      fsevents: 2.3.3

  jest-leak-detector@29.7.0:
    dependencies:
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-matcher-utils@29.7.0:
    dependencies:
      chalk: 4.1.2
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-message-util@29.7.0:
    dependencies:
      '@babel/code-frame': 7.24.7
      '@jest/types': 29.6.3
      '@types/stack-utils': 2.0.3
      chalk: 4.1.2
      graceful-fs: 4.2.11
      micromatch: 4.0.7
      pretty-format: 29.7.0
      slash: 3.0.0
      stack-utils: 2.0.6

  jest-mock@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-util: 29.7.0

  jest-pnp-resolver@1.2.3(jest-resolve@29.7.0):
    optionalDependencies:
      jest-resolve: 29.7.0

  jest-regex-util@29.6.3: {}

  jest-resolve-dependencies@29.7.0:
    dependencies:
      jest-regex-util: 29.6.3
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  jest-resolve@29.7.0:
    dependencies:
      chalk: 4.1.2
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-pnp-resolver: 1.2.3(jest-resolve@29.7.0)
      jest-util: 29.7.0
      jest-validate: 29.7.0
      resolve: 1.22.8
      resolve.exports: 2.0.2
      slash: 3.0.0

  jest-runner@29.7.0:
    dependencies:
      '@jest/console': 29.7.0
      '@jest/environment': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      emittery: 0.13.1
      graceful-fs: 4.2.11
      jest-docblock: 29.7.0
      jest-environment-node: 29.7.0
      jest-haste-map: 29.7.0
      jest-leak-detector: 29.7.0
      jest-message-util: 29.7.0
      jest-resolve: 29.7.0
      jest-runtime: 29.7.0
      jest-util: 29.7.0
      jest-watcher: 29.7.0
      jest-worker: 29.7.0
      p-limit: 3.1.0
      source-map-support: 0.5.13
    transitivePeerDependencies:
      - supports-color

  jest-runtime@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/globals': 29.7.0
      '@jest/source-map': 29.6.3
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      cjs-module-lexer: 1.3.1
      collect-v8-coverage: 1.0.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0
      strip-bom: 4.0.0
    transitivePeerDependencies:
      - supports-color

  jest-snapshot@29.7.0:
    dependencies:
      '@babel/core': 7.24.7
      '@babel/generator': 7.25.0
      '@babel/plugin-syntax-jsx': 7.24.7(@babel/core@7.24.7)
      '@babel/plugin-syntax-typescript': 7.24.7(@babel/core@7.24.7)
      '@babel/types': 7.25.2
      '@jest/expect-utils': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      babel-preset-current-node-syntax: 1.0.1(@babel/core@7.24.7)
      chalk: 4.1.2
      expect: 29.7.0
      graceful-fs: 4.2.11
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      natural-compare: 1.4.0
      pretty-format: 29.7.0
      semver: 7.6.3
    transitivePeerDependencies:
      - supports-color

  jest-util@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      ci-info: 3.9.0
      graceful-fs: 4.2.11
      picomatch: 2.3.1

  jest-validate@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      camelcase: 6.3.0
      chalk: 4.1.2
      jest-get-type: 29.6.3
      leven: 3.1.0
      pretty-format: 29.7.0

  jest-watcher@29.7.0:
    dependencies:
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      emittery: 0.13.1
      jest-util: 29.7.0
      string-length: 4.0.2

  jest-worker@27.5.1:
    dependencies:
      '@types/node': 20.14.10
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jest-worker@29.7.0:
    dependencies:
      '@types/node': 20.14.10
      jest-util: 29.7.0
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jest@29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)):
    dependencies:
      '@jest/core': 29.7.0(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      '@jest/types': 29.6.3
      import-local: 3.2.0
      jest-cli: 29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  jiti@1.21.6: {}

  jose@5.6.3: {}

  js-sha256@0.10.1: {}

  js-sha256@0.11.0: {}

  js-tokens@4.0.0: {}

  js-xxhash@1.0.4: {}

  js-yaml@3.14.1:
    dependencies:
      argparse: 1.0.10
      esprima: 4.0.1

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsbi@3.1.3: {}

  jsbi@4.3.0: {}

  jsesc@0.5.0: {}

  jsesc@2.5.2: {}

  jsesc@3.0.2: {}

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-schema-ref-resolver@1.0.1:
    dependencies:
      fast-deep-equal: 3.1.3

  json-schema-traverse@0.4.1: {}

  json-schema-traverse@1.0.0: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json-to-pretty-yaml@1.2.2:
    dependencies:
      remedial: 1.0.8
      remove-trailing-spaces: 1.0.8

  json5@1.0.2:
    dependencies:
      minimist: 1.2.8

  json5@2.2.3: {}

  jsonc-parser@3.2.1: {}

  jsonc-parser@3.3.1: {}

  jsonfile@6.1.0:
    dependencies:
      universalify: 2.0.1
    optionalDependencies:
      graceful-fs: 4.2.11

  jsx-ast-utils@3.3.5:
    dependencies:
      array-includes: 3.1.8
      array.prototype.flat: 1.3.2
      object.assign: 4.1.5
      object.values: 1.2.0

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kleur@3.0.3: {}

  kleur@4.1.5: {}

  klona@2.0.6: {}

  language-subtag-registry@0.3.23: {}

  language-tags@1.0.9:
    dependencies:
      language-subtag-registry: 0.3.23

  leven@3.1.0: {}

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  light-my-request@5.13.0:
    dependencies:
      cookie: 0.6.0
      process-warning: 3.0.0
      set-cookie-parser: 2.7.0

  light-my-request@6.0.0:
    dependencies:
      cookie: 0.6.0
      process-warning: 4.0.0
      set-cookie-parser: 2.7.0

  lightningcss-darwin-arm64@1.25.1:
    optional: true

  lightningcss-darwin-x64@1.25.1:
    optional: true

  lightningcss-freebsd-x64@1.25.1:
    optional: true

  lightningcss-linux-arm-gnueabihf@1.25.1:
    optional: true

  lightningcss-linux-arm64-gnu@1.25.1:
    optional: true

  lightningcss-linux-arm64-musl@1.25.1:
    optional: true

  lightningcss-linux-x64-gnu@1.25.1:
    optional: true

  lightningcss-linux-x64-musl@1.25.1:
    optional: true

  lightningcss-win32-x64-msvc@1.25.1:
    optional: true

  lightningcss@1.25.1:
    dependencies:
      detect-libc: 1.0.3
    optionalDependencies:
      lightningcss-darwin-arm64: 1.25.1
      lightningcss-darwin-x64: 1.25.1
      lightningcss-freebsd-x64: 1.25.1
      lightningcss-linux-arm-gnueabihf: 1.25.1
      lightningcss-linux-arm64-gnu: 1.25.1
      lightningcss-linux-arm64-musl: 1.25.1
      lightningcss-linux-x64-gnu: 1.25.1
      lightningcss-linux-x64-musl: 1.25.1
      lightningcss-win32-x64-msvc: 1.25.1

  lilconfig@3.1.2: {}

  lines-and-columns@1.2.4: {}

  lint-staged@15.2.8:
    dependencies:
      chalk: 5.3.0
      commander: 12.1.0
      debug: 4.3.6
      execa: 8.0.1
      lilconfig: 3.1.2
      listr2: 8.2.4
      micromatch: 4.0.7
      pidtree: 0.6.0
      string-argv: 0.3.2
      yaml: 2.5.0
    transitivePeerDependencies:
      - supports-color

  listr2@4.0.5:
    dependencies:
      cli-truncate: 2.1.0
      colorette: 2.0.20
      log-update: 4.0.0
      p-map: 4.0.0
      rfdc: 1.4.1
      rxjs: 7.8.1
      through: 2.3.8
      wrap-ansi: 7.0.0

  listr2@8.2.4:
    dependencies:
      cli-truncate: 4.0.0
      colorette: 2.0.20
      eventemitter3: 5.0.1
      log-update: 6.1.0
      rfdc: 1.4.1
      wrap-ansi: 9.0.0

  load-yaml-file@0.2.0:
    dependencies:
      graceful-fs: 4.2.11
      js-yaml: 3.14.1
      pify: 4.0.1
      strip-bom: 3.0.0

  loader-runner@4.3.0: {}

  locate-path@3.0.0:
    dependencies:
      p-locate: 3.0.0
      path-exists: 3.0.0

  locate-path@5.0.0:
    dependencies:
      p-locate: 4.1.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash-es@4.17.21: {}

  lodash.camelcase@4.3.0: {}

  lodash.clonedeep@4.5.0: {}

  lodash.debounce@4.0.8: {}

  lodash.defaults@4.2.0: {}

  lodash.get@4.4.2: {}

  lodash.isarguments@3.1.0: {}

  lodash.isequal@4.5.0: {}

  lodash.ismatch@4.4.0: {}

  lodash.memoize@4.1.2: {}

  lodash.merge@4.6.2: {}

  lodash.omit@4.5.0: {}

  lodash.snakecase@4.1.1: {}

  lodash.sortby@4.7.0: {}

  lodash.uniq@4.5.0: {}

  lodash@4.17.21: {}

  log-symbols@4.1.0:
    dependencies:
      chalk: 4.1.2
      is-unicode-supported: 0.1.0

  log-update@4.0.0:
    dependencies:
      ansi-escapes: 4.3.2
      cli-cursor: 3.1.0
      slice-ansi: 4.0.0
      wrap-ansi: 6.2.0

  log-update@6.1.0:
    dependencies:
      ansi-escapes: 7.0.0
      cli-cursor: 5.0.0
      slice-ansi: 7.1.0
      strip-ansi: 7.1.0
      wrap-ansi: 9.0.0

  loglevel@1.9.2: {}

  long@4.0.0: {}

  look-it-up@2.1.0: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  lower-case-first@2.0.2:
    dependencies:
      tslib: 2.7.0

  lower-case@2.0.2:
    dependencies:
      tslib: 2.7.0

  lru-cache@10.4.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lru-cache@7.13.1: {}

  lru-cache@7.18.3: {}

  luxon@3.4.4: {}

  luxon@3.5.0: {}

  magic-string@0.30.10:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0

  magic-string@0.30.8:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0

  make-dir@4.0.0:
    dependencies:
      semver: 7.6.3

  make-error@1.3.6: {}

  makeerror@1.0.12:
    dependencies:
      tmpl: 1.0.5

  map-cache@0.2.2: {}

  map-obj@4.3.0: {}

  md5.js@1.3.5:
    dependencies:
      hash-base: 3.1.0
      inherits: 2.0.4
      safe-buffer: 5.2.1

  mdn-data@2.0.28: {}

  mdn-data@2.0.30: {}

  media-typer@0.3.0: {}

  memfs@3.5.3:
    dependencies:
      fs-monkey: 1.0.6

  merge-anything@5.1.7:
    dependencies:
      is-what: 4.1.16

  merge-descriptors@1.0.1: {}

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  meros@1.3.0(@types/node@20.14.10):
    optionalDependencies:
      '@types/node': 20.14.10

  methods@1.1.2: {}

  microdiff@1.3.2: {}

  micromatch@4.0.2:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  micromatch@4.0.7:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mime@1.6.0: {}

  mime@2.6.0: {}

  mimic-fn@2.1.0: {}

  mimic-fn@4.0.0: {}

  mimic-function@5.0.1: {}

  min-indent@1.0.1: {}

  minimalistic-assert@1.0.1: {}

  minimalistic-crypto-utils@1.0.1: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@4.2.3:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@5.1.6:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@9.0.3:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  mkdirp@0.5.6:
    dependencies:
      minimist: 1.2.8
    optional: true

  mkdirp@3.0.1: {}

  mlly@1.7.1:
    dependencies:
      acorn: 8.12.1
      pathe: 1.1.2
      pkg-types: 1.1.3
      ufo: 1.5.4

  mnemonist@0.39.6:
    dependencies:
      obliterator: 2.0.4

  module-details-from-path@1.0.3: {}

  moo@0.5.2: {}

  ms@2.0.0: {}

  ms@2.1.2: {}

  ms@2.1.3: {}

  msgpackr-extract@3.0.3:
    dependencies:
      node-gyp-build-optional-packages: 5.2.2
    optionalDependencies:
      '@msgpackr-extract/msgpackr-extract-darwin-arm64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-darwin-x64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-arm': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-arm64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-x64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-win32-x64': 3.0.3
    optional: true

  msgpackr@1.11.0:
    optionalDependencies:
      msgpackr-extract: 3.0.3

  multer@1.4.4-lts.1:
    dependencies:
      append-field: 1.0.0
      busboy: 1.6.0
      concat-stream: 1.6.2
      mkdirp: 0.5.6
      object-assign: 4.1.1
      type-is: 1.6.18
      xtend: 4.0.2
    optional: true

  mute-stream@0.0.8: {}

  mute-stream@1.0.0: {}

  nanoassert@2.0.0: {}

  nanoid@3.3.7: {}

  natural-compare@1.4.0: {}

  negotiator@0.6.3: {}

  neo-async@2.6.2: {}

  next-nprogress-bar@2.3.13:
    dependencies:
      nprogress: 0.2.0

  next@14.2.4(@babel/core@7.24.7)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      '@next/env': 14.2.4
      '@swc/helpers': 0.5.5
      busboy: 1.6.0
      caniuse-lite: 1.0.30001641
      graceful-fs: 4.2.11
      postcss: 8.4.31
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      styled-jsx: 5.1.1(@babel/core@7.24.7)(babel-plugin-macros@3.1.0)(react@18.3.1)
    optionalDependencies:
      '@next/swc-darwin-arm64': 14.2.4
      '@next/swc-darwin-x64': 14.2.4
      '@next/swc-linux-arm64-gnu': 14.2.4
      '@next/swc-linux-arm64-musl': 14.2.4
      '@next/swc-linux-x64-gnu': 14.2.4
      '@next/swc-linux-x64-musl': 14.2.4
      '@next/swc-win32-arm64-msvc': 14.2.4
      '@next/swc-win32-ia32-msvc': 14.2.4
      '@next/swc-win32-x64-msvc': 14.2.4
      '@opentelemetry/api': 1.9.0
    transitivePeerDependencies:
      - '@babel/core'
      - babel-plugin-macros

  no-case@3.0.4:
    dependencies:
      lower-case: 2.0.2
      tslib: 2.7.0

  node-abi@3.65.0:
    dependencies:
      semver: 7.6.3

  node-abort-controller@3.1.1: {}

  node-addon-api@7.1.1: {}

  node-emoji@1.11.0:
    dependencies:
      lodash: 4.17.21

  node-eval@2.0.0:
    dependencies:
      path-is-absolute: 1.0.1

  node-fetch@2.7.0:
    dependencies:
      whatwg-url: 5.0.0

  node-gyp-build-optional-packages@5.2.2:
    dependencies:
      detect-libc: 2.0.3
    optional: true

  node-gyp-build@4.8.1:
    optional: true

  node-int64@0.4.0: {}

  node-releases@2.0.14: {}

  node-releases@2.0.18: {}

  normalize-package-data@2.5.0:
    dependencies:
      hosted-git-info: 2.8.9
      resolve: 1.22.8
      semver: 5.7.2
      validate-npm-package-license: 3.0.4

  normalize-path@2.1.1:
    dependencies:
      remove-trailing-separator: 1.1.0

  normalize-path@3.0.0: {}

  npm-run-path@4.0.1:
    dependencies:
      path-key: 3.1.1

  npm-run-path@5.3.0:
    dependencies:
      path-key: 4.0.0

  nprogress@0.2.0: {}

  nth-check@2.1.1:
    dependencies:
      boolbase: 1.0.0

  nullthrows@1.1.1: {}

  object-assign@4.1.1: {}

  object-inspect@1.13.2: {}

  object-is@1.1.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1

  object-keys@1.1.1: {}

  object-path@0.11.8: {}

  object.assign@4.1.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      has-symbols: 1.0.3
      object-keys: 1.1.1

  object.entries@1.1.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0

  object.groupby@1.0.3:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3

  object.values@1.2.0:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  obliterator@2.0.4: {}

  on-exit-leak-free@2.1.2: {}

  on-finished@2.4.1:
    dependencies:
      ee-first: 1.1.1

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  onetime@5.1.2:
    dependencies:
      mimic-fn: 2.1.0

  onetime@6.0.0:
    dependencies:
      mimic-fn: 4.0.0

  onetime@7.0.0:
    dependencies:
      mimic-function: 5.0.1

  opentelemetry-instrumentation-fetch-node@1.2.3(@opentelemetry/api@1.9.0):
    dependencies:
      '@opentelemetry/api': 1.9.0
      '@opentelemetry/instrumentation': 0.46.0(@opentelemetry/api@1.9.0)
      '@opentelemetry/semantic-conventions': 1.27.0
    transitivePeerDependencies:
      - supports-color
    optional: true

  optimism@0.18.0:
    dependencies:
      '@wry/caches': 1.0.1
      '@wry/context': 0.7.4
      '@wry/trie': 0.4.3
      tslib: 2.7.0

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  ora@5.4.1:
    dependencies:
      bl: 4.1.0
      chalk: 4.1.2
      cli-cursor: 3.1.0
      cli-spinners: 2.9.2
      is-interactive: 1.0.0
      is-unicode-supported: 0.1.0
      log-symbols: 4.1.0
      strip-ansi: 6.0.1
      wcwidth: 1.0.1

  os-tmpdir@1.0.2: {}

  outdent@0.8.0: {}

  p-limit@2.3.0:
    dependencies:
      p-try: 2.2.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@3.0.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@4.1.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-map@4.0.0:
    dependencies:
      aggregate-error: 3.1.0

  p-try@2.2.0: {}

  package-json-from-dist@1.0.0: {}

  param-case@3.0.4:
    dependencies:
      dot-case: 3.0.4
      tslib: 2.7.0

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parent-module@2.0.0:
    dependencies:
      callsites: 3.1.0

  parse-filepath@1.0.2:
    dependencies:
      is-absolute: 1.0.0
      map-cache: 0.2.2
      path-root: 0.1.1

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.24.7
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  parseurl@1.3.3: {}

  pascal-case@3.1.2:
    dependencies:
      no-case: 3.0.4
      tslib: 2.7.0

  path-browserify@1.0.1: {}

  path-case@3.0.4:
    dependencies:
      dot-case: 3.0.4
      tslib: 2.7.0

  path-exists@3.0.0: {}

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-key@4.0.0: {}

  path-parse@1.0.7: {}

  path-root-regex@0.1.2: {}

  path-root@0.1.1:
    dependencies:
      path-root-regex: 0.1.2

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-to-regexp@0.1.7: {}

  path-to-regexp@3.2.0: {}

  path-to-regexp@3.3.0: {}

  path-to-regexp@6.3.0: {}

  path-type@4.0.0: {}

  pathe@1.1.2: {}

  perfect-debounce@1.0.0: {}

  perfect-freehand@1.2.2: {}

  pg-int8@1.0.1: {}

  pg-protocol@1.6.1: {}

  pg-types@2.2.0:
    dependencies:
      pg-int8: 1.0.1
      postgres-array: 2.0.0
      postgres-bytea: 1.0.0
      postgres-date: 1.0.7
      postgres-interval: 1.2.0

  picocolors@1.0.1: {}

  picomatch@2.3.1: {}

  picomatch@4.0.1: {}

  pidtree@0.6.0: {}

  pify@4.0.1: {}

  pino-abstract-transport@1.2.0:
    dependencies:
      readable-stream: 4.5.2
      split2: 4.2.0

  pino-std-serializers@7.0.0: {}

  pino@9.3.2:
    dependencies:
      atomic-sleep: 1.0.0
      fast-redact: 3.5.0
      on-exit-leak-free: 2.1.2
      pino-abstract-transport: 1.2.0
      pino-std-serializers: 7.0.0
      process-warning: 4.0.0
      quick-format-unescaped: 4.0.4
      real-require: 0.2.0
      safe-stable-stringify: 2.4.3
      sonic-boom: 4.0.1
      thread-stream: 3.1.0

  pirates@4.0.6: {}

  pkg-dir@4.2.0:
    dependencies:
      find-up: 4.1.0

  pkg-types@1.0.3:
    dependencies:
      jsonc-parser: 3.3.1
      mlly: 1.7.1
      pathe: 1.1.2

  pkg-types@1.1.3:
    dependencies:
      confbox: 0.1.7
      mlly: 1.7.1
      pathe: 1.1.2

  pkg-up@3.1.0:
    dependencies:
      find-up: 3.0.0

  pluralize@8.0.0: {}

  pofile@1.1.4: {}

  possible-typed-array-names@1.0.0: {}

  postcss-discard-duplicates@7.0.0(postcss@8.4.39):
    dependencies:
      postcss: 8.4.39

  postcss-discard-empty@7.0.0(postcss@8.4.39):
    dependencies:
      postcss: 8.4.39

  postcss-merge-rules@7.0.2(postcss@8.4.39):
    dependencies:
      browserslist: 4.23.3
      caniuse-api: 3.0.0
      cssnano-utils: 5.0.0(postcss@8.4.39)
      postcss: 8.4.39
      postcss-selector-parser: 6.1.0

  postcss-minify-selectors@7.0.2(postcss@8.4.39):
    dependencies:
      cssesc: 3.0.0
      postcss: 8.4.39
      postcss-selector-parser: 6.1.0

  postcss-nested@6.0.1(postcss@8.4.39):
    dependencies:
      postcss: 8.4.39
      postcss-selector-parser: 6.1.0

  postcss-normalize-whitespace@7.0.0(postcss@8.4.39):
    dependencies:
      postcss: 8.4.39
      postcss-value-parser: 4.2.0

  postcss-selector-parser@6.1.0:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-value-parser@4.2.0: {}

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.0.1
      source-map-js: 1.2.0

  postcss@8.4.38:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.0.1
      source-map-js: 1.2.0

  postcss@8.4.39:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.0.1
      source-map-js: 1.2.0

  postgres-array@2.0.0: {}

  postgres-bytea@1.0.0: {}

  postgres-date@1.0.7: {}

  postgres-interval@1.2.0:
    dependencies:
      xtend: 4.0.2

  preferred-pm@3.1.2:
    dependencies:
      find-up: 5.0.0
      find-yarn-workspace-root2: 1.2.16
      path-exists: 4.0.0
      which-pm: 2.0.0

  prelude-ls@1.2.1: {}

  prettier-linter-helpers@1.0.0:
    dependencies:
      fast-diff: 1.3.0

  prettier@3.2.5: {}

  prettier@3.3.2: {}

  pretty-format@29.7.0:
    dependencies:
      '@jest/schemas': 29.6.3
      ansi-styles: 5.2.0
      react-is: 18.3.1

  prisma@5.17.0:
    dependencies:
      '@prisma/engines': 5.17.0

  process-nextick-args@2.0.1:
    optional: true

  process-warning@3.0.0: {}

  process-warning@4.0.0: {}

  process@0.11.10: {}

  promise-coalesce@1.1.2: {}

  promise@7.3.1:
    dependencies:
      asap: 2.0.6

  prompts@2.4.2:
    dependencies:
      kleur: 3.0.3
      sisteransi: 1.0.5

  prop-types@15.8.1:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1

  proxy-addr@2.0.7:
    dependencies:
      forwarded: 0.2.0
      ipaddr.js: 1.9.1

  proxy-compare@3.0.0: {}

  proxy-from-env@1.1.0: {}

  proxy-memoize@3.0.0:
    dependencies:
      proxy-compare: 3.0.0

  proxy-memoize@3.0.1:
    dependencies:
      proxy-compare: 3.0.0

  pseudolocale@2.1.0:
    dependencies:
      commander: 10.0.1

  punycode@1.4.1: {}

  punycode@2.3.1: {}

  pure-rand@6.1.0: {}

  pvtsutils@1.3.5:
    dependencies:
      tslib: 2.7.0

  pvutils@1.1.3: {}

  qs@6.11.0:
    dependencies:
      side-channel: 1.0.6

  queue-microtask@1.2.3: {}

  quick-format-unescaped@4.0.4: {}

  quick-lru@5.1.1: {}

  ramda@0.27.2: {}

  randombytes@2.1.0:
    dependencies:
      safe-buffer: 5.2.1

  range-parser@1.2.1: {}

  raw-body@2.5.2:
    dependencies:
      bytes: 3.1.2
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      unpipe: 1.0.0

  react-dom@18.3.1(react@18.3.1):
    dependencies:
      loose-envify: 1.4.0
      react: 18.3.1
      scheduler: 0.23.2

  react-intersection-observer@9.13.1(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      react: 18.3.1
    optionalDependencies:
      react-dom: 18.3.1(react@18.3.1)

  react-is@16.13.1: {}

  react-is@18.3.1: {}

  react@18.3.1:
    dependencies:
      loose-envify: 1.4.0

  read-pkg-up@7.0.1:
    dependencies:
      find-up: 4.1.0
      read-pkg: 5.2.0
      type-fest: 0.8.1

  read-pkg@5.2.0:
    dependencies:
      '@types/normalize-package-data': 2.4.4
      normalize-package-data: 2.5.0
      parse-json: 5.2.0
      type-fest: 0.6.0

  read@1.0.7:
    dependencies:
      mute-stream: 0.0.8

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2
    optional: true

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readable-stream@4.5.2:
    dependencies:
      abort-controller: 3.0.0
      buffer: 6.0.3
      events: 3.3.0
      process: 0.11.10
      string_decoder: 1.3.0

  readdirp@3.5.0:
    dependencies:
      picomatch: 2.3.1

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  readline-sync@1.4.10: {}

  real-require@0.2.0: {}

  redis-errors@1.2.0: {}

  redis-parser@3.0.0:
    dependencies:
      redis-errors: 1.2.0

  redis@4.7.0:
    dependencies:
      '@redis/bloom': 1.2.0(@redis/client@1.6.0)
      '@redis/client': 1.6.0
      '@redis/graph': 1.1.1(@redis/client@1.6.0)
      '@redis/json': 1.0.7(@redis/client@1.6.0)
      '@redis/search': 1.2.0(@redis/client@1.6.0)
      '@redis/time-series': 1.1.0(@redis/client@1.6.0)

  reflect-metadata@0.2.2: {}

  reflect.getprototypeof@1.0.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      globalthis: 1.0.4
      which-builtin-type: 1.1.4

  regenerate-unicode-properties@10.1.1:
    dependencies:
      regenerate: 1.4.2

  regenerate@1.4.2: {}

  regenerator-runtime@0.14.1: {}

  regenerator-transform@0.15.2:
    dependencies:
      '@babel/runtime': 7.25.0

  regexp-tree@0.1.27: {}

  regexp.prototype.flags@1.5.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-errors: 1.3.0
      set-function-name: 2.0.2

  regexpu-core@5.3.2:
    dependencies:
      '@babel/regjsgen': 0.8.0
      regenerate: 1.4.2
      regenerate-unicode-properties: 10.1.1
      regjsparser: 0.9.1
      unicode-match-property-ecmascript: 2.0.0
      unicode-match-property-value-ecmascript: 2.1.0

  regjsparser@0.10.0:
    dependencies:
      jsesc: 0.5.0

  regjsparser@0.9.1:
    dependencies:
      jsesc: 0.5.0

  rehackt@0.1.0(@types/react@18.3.3)(react@18.3.1):
    optionalDependencies:
      '@types/react': 18.3.3
      react: 18.3.1

  relay-runtime@12.0.0:
    dependencies:
      '@babel/runtime': 7.25.0
      fbjs: 3.0.5
      invariant: 2.2.4
    transitivePeerDependencies:
      - encoding

  remeda@1.61.0: {}

  remedial@1.0.8: {}

  remove-trailing-separator@1.1.0: {}

  remove-trailing-spaces@1.0.8: {}

  repeat-string@1.6.1: {}

  require-directory@2.1.1: {}

  require-from-string@2.0.2: {}

  require-in-the-middle@7.4.0:
    dependencies:
      debug: 4.3.6
      module-details-from-path: 1.0.3
      resolve: 1.22.8
    transitivePeerDependencies:
      - supports-color

  require-main-filename@2.0.0: {}

  resolve-cwd@3.0.0:
    dependencies:
      resolve-from: 5.0.0

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve.exports@2.0.2: {}

  resolve@1.22.8:
    dependencies:
      is-core-module: 2.14.0
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  resolve@2.0.0-next.5:
    dependencies:
      is-core-module: 2.14.0
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  response-iterator@0.2.6: {}

  restore-cursor@3.1.0:
    dependencies:
      onetime: 5.1.2
      signal-exit: 3.0.7

  restore-cursor@5.1.0:
    dependencies:
      onetime: 7.0.0
      signal-exit: 4.1.0

  ret@0.4.3: {}

  retry@0.13.1: {}

  reusify@1.0.4: {}

  rfdc@1.4.1: {}

  rimraf@3.0.2:
    dependencies:
      glob: 7.2.3

  ripemd160@2.0.2:
    dependencies:
      hash-base: 3.1.0
      inherits: 2.0.4

  rpc-websockets@7.11.2:
    dependencies:
      eventemitter3: 4.0.7
      uuid: 8.3.2
      ws: 8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)
    optionalDependencies:
      bufferutil: 4.0.8
      utf-8-validate: 5.0.10

  run-async@2.4.1: {}

  run-async@3.0.0: {}

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  rxjs@6.6.7:
    dependencies:
      tslib: 1.14.1

  rxjs@7.8.1:
    dependencies:
      tslib: 2.6.3

  safe-array-concat@1.1.2:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      isarray: 2.0.5

  safe-buffer@5.1.2:
    optional: true

  safe-buffer@5.2.1: {}

  safe-regex-test@1.0.3:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-regex: 1.1.4

  safe-regex2@3.1.0:
    dependencies:
      ret: 0.4.3

  safe-stable-stringify@2.4.3: {}

  safer-buffer@2.1.2: {}

  scheduler@0.23.2:
    dependencies:
      loose-envify: 1.4.0

  schema-utils@3.3.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      ajv-keywords: 3.5.2(ajv@6.12.6)

  scrypt-js@3.0.1: {}

  scuid@1.1.0: {}

  secure-json-parse@2.7.0: {}

  semver@5.7.2: {}

  semver@6.3.1: {}

  semver@7.6.2: {}

  semver@7.6.3: {}

  send@0.18.0:
    dependencies:
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      encodeurl: 1.0.2
      escape-html: 1.0.3
      etag: 1.8.1
      fresh: 0.5.2
      http-errors: 2.0.0
      mime: 1.6.0
      ms: 2.1.3
      on-finished: 2.4.1
      range-parser: 1.2.1
      statuses: 2.0.1
    transitivePeerDependencies:
      - supports-color

  sentence-case@3.0.4:
    dependencies:
      no-case: 3.0.4
      tslib: 2.7.0
      upper-case-first: 2.0.2

  serialize-javascript@6.0.2:
    dependencies:
      randombytes: 2.1.0

  serve-static@1.15.0:
    dependencies:
      encodeurl: 1.0.2
      escape-html: 1.0.3
      parseurl: 1.3.3
      send: 0.18.0
    transitivePeerDependencies:
      - supports-color

  set-blocking@2.0.0: {}

  set-cookie-parser@2.7.0: {}

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  setimmediate@1.0.5: {}

  setprototypeof@1.2.0: {}

  sha.js@2.4.11:
    dependencies:
      inherits: 2.0.4
      safe-buffer: 5.2.1

  sha3@2.1.4:
    dependencies:
      buffer: 6.0.3

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  shell-quote@1.8.1: {}

  shimmer@1.2.1: {}

  side-channel@1.0.6:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      object-inspect: 1.13.2

  signal-exit@3.0.7: {}

  signal-exit@4.1.0: {}

  signedsource@1.0.0: {}

  sisteransi@1.0.5: {}

  slash@3.0.0: {}

  slice-ansi@3.0.0:
    dependencies:
      ansi-styles: 4.3.0
      astral-regex: 2.0.0
      is-fullwidth-code-point: 3.0.0

  slice-ansi@4.0.0:
    dependencies:
      ansi-styles: 4.3.0
      astral-regex: 2.0.0
      is-fullwidth-code-point: 3.0.0

  slice-ansi@5.0.0:
    dependencies:
      ansi-styles: 6.2.1
      is-fullwidth-code-point: 4.0.0

  slice-ansi@7.1.0:
    dependencies:
      ansi-styles: 6.2.1
      is-fullwidth-code-point: 5.0.0

  snake-case@3.0.4:
    dependencies:
      dot-case: 3.0.4
      tslib: 2.7.0

  sonic-boom@4.0.1:
    dependencies:
      atomic-sleep: 1.0.0

  source-map-js@1.2.0: {}

  source-map-support@0.5.13:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map-support@0.5.21:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.6.1: {}

  source-map@0.7.4: {}

  source-map@0.8.0-beta.0:
    dependencies:
      whatwg-url: 7.1.0

  spdx-correct@3.2.0:
    dependencies:
      spdx-expression-parse: 3.0.1
      spdx-license-ids: 3.0.18

  spdx-exceptions@2.5.0: {}

  spdx-expression-parse@3.0.1:
    dependencies:
      spdx-exceptions: 2.5.0
      spdx-license-ids: 3.0.18

  spdx-license-ids@3.0.18: {}

  split2@4.2.0: {}

  sponge-case@1.0.1:
    dependencies:
      tslib: 2.7.0

  sprintf-js@1.0.3: {}

  stack-utils@2.0.6:
    dependencies:
      escape-string-regexp: 2.0.0

  standard-as-callback@2.1.0: {}

  statuses@2.0.1: {}

  stop-iteration-iterator@1.0.0:
    dependencies:
      internal-slot: 1.0.7

  streamsearch@1.1.0: {}

  string-argv@0.3.2: {}

  string-env-interpolation@1.0.1: {}

  string-length@4.0.2:
    dependencies:
      char-regex: 1.0.2
      strip-ansi: 6.0.1

  string-length@6.0.0:
    dependencies:
      strip-ansi: 7.1.0

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string-width@7.2.0:
    dependencies:
      emoji-regex: 10.3.0
      get-east-asian-width: 1.2.0
      strip-ansi: 7.1.0

  string.prototype.includes@2.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.23.3

  string.prototype.matchall@4.0.11:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      has-symbols: 1.0.3
      internal-slot: 1.0.7
      regexp.prototype.flags: 1.5.2
      set-function-name: 2.0.2
      side-channel: 1.0.6

  string.prototype.repeat@1.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.23.3

  string.prototype.trim@1.2.9:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.3
      es-object-atoms: 1.0.0

  string.prototype.trimend@1.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2
    optional: true

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.0.1

  strip-bom@3.0.0: {}

  strip-bom@4.0.0: {}

  strip-final-newline@2.0.0: {}

  strip-final-newline@3.0.0: {}

  strip-indent@3.0.0:
    dependencies:
      min-indent: 1.0.1

  strip-json-comments@3.1.1: {}

  styled-jsx@5.1.1(@babel/core@7.24.7)(babel-plugin-macros@3.1.0)(react@18.3.1):
    dependencies:
      client-only: 0.0.1
      react: 18.3.1
    optionalDependencies:
      '@babel/core': 7.24.7
      babel-plugin-macros: 3.1.0

  subscriptions-transport-ws@0.11.0(bufferutil@4.0.8)(graphql@16.9.0)(utf-8-validate@5.0.10):
    dependencies:
      backo2: 1.0.2
      eventemitter3: 3.1.2
      graphql: 16.9.0
      iterall: 1.3.0
      symbol-observable: 1.2.0
      ws: 7.5.10(bufferutil@4.0.8)(utf-8-validate@5.0.10)
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  superagent@9.0.2:
    dependencies:
      component-emitter: 1.3.1
      cookiejar: 2.1.4
      debug: 4.3.6
      fast-safe-stringify: 2.1.1
      form-data: 4.0.0
      formidable: 3.5.1
      methods: 1.1.2
      mime: 2.6.0
      qs: 6.11.0
    transitivePeerDependencies:
      - supports-color

  supertest@7.0.0:
    dependencies:
      methods: 1.1.2
      superagent: 9.0.2
    transitivePeerDependencies:
      - supports-color

  supports-color@5.5.0:
    dependencies:
      has-flag: 3.0.0

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  svg-parser@2.0.4: {}

  svgo@3.3.2:
    dependencies:
      '@trysound/sax': 0.2.0
      commander: 7.2.0
      css-select: 5.1.0
      css-tree: 2.3.1
      css-what: 6.1.0
      csso: 5.0.5
      picocolors: 1.0.1

  swap-case@2.0.2:
    dependencies:
      tslib: 2.7.0

  symbol-observable@1.2.0: {}

  symbol-observable@4.0.0: {}

  synckit@0.9.1:
    dependencies:
      '@pkgr/core': 0.1.1
      tslib: 2.6.3

  tabbable@6.2.0: {}

  tapable@2.2.1: {}

  terser-webpack-plugin@5.3.10(webpack@5.92.1):
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      jest-worker: 27.5.1
      schema-utils: 3.3.0
      serialize-javascript: 6.0.2
      terser: 5.31.3
      webpack: 5.92.1

  terser@5.31.3:
    dependencies:
      '@jridgewell/source-map': 0.3.6
      acorn: 8.12.1
      commander: 2.20.3
      source-map-support: 0.5.21

  test-exclude@6.0.0:
    dependencies:
      '@istanbuljs/schema': 0.1.3
      glob: 7.2.3
      minimatch: 3.1.2

  text-table@0.2.0: {}

  third-party-capital@1.0.20: {}

  thread-stream@3.1.0:
    dependencies:
      real-require: 0.2.0

  through@2.3.8: {}

  title-case@3.0.3:
    dependencies:
      tslib: 2.7.0

  tmp@0.0.33:
    dependencies:
      os-tmpdir: 1.0.2

  tmpl@1.0.5: {}

  to-fast-properties@2.0.0: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  toad-cache@3.7.0: {}

  toidentifier@1.0.1: {}

  tr46@0.0.3: {}

  tr46@1.0.1:
    dependencies:
      punycode: 2.3.1

  tree-kill@1.2.2: {}

  ts-api-utils@1.3.0(typescript@5.5.3):
    dependencies:
      typescript: 5.5.3

  ts-evaluator@1.2.0(typescript@5.5.3):
    dependencies:
      ansi-colors: 4.1.3
      crosspath: 2.0.0
      object-path: 0.11.8
      typescript: 5.5.3

  ts-invariant@0.10.3:
    dependencies:
      tslib: 2.7.0

  ts-jest@29.2.4(@babel/core@7.24.7)(@jest/transform@29.7.0)(@jest/types@29.6.3)(babel-jest@29.7.0(@babel/core@7.24.7))(jest@29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3)))(typescript@5.5.3):
    dependencies:
      bs-logger: 0.2.6
      ejs: 3.1.10
      fast-json-stable-stringify: 2.1.0
      jest: 29.7.0(@types/node@20.14.10)(babel-plugin-macros@3.1.0)(ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3))
      jest-util: 29.7.0
      json5: 2.2.3
      lodash.memoize: 4.1.2
      make-error: 1.3.6
      semver: 7.6.3
      typescript: 5.5.3
      yargs-parser: 21.1.1
    optionalDependencies:
      '@babel/core': 7.24.7
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      babel-jest: 29.7.0(@babel/core@7.24.7)

  ts-loader@9.5.1(typescript@5.5.3)(webpack@5.92.1):
    dependencies:
      chalk: 4.1.2
      enhanced-resolve: 5.17.0
      micromatch: 4.0.7
      semver: 7.6.3
      source-map: 0.7.4
      typescript: 5.5.3
      webpack: 5.92.1

  ts-log@2.2.5: {}

  ts-morph@21.0.1:
    dependencies:
      '@ts-morph/common': 0.22.0
      code-block-writer: 12.0.0

  ts-node@10.9.2(@types/node@20.14.10)(typescript@5.5.3):
    dependencies:
      '@cspotcode/source-map-support': 0.8.1
      '@tsconfig/node10': 1.0.11
      '@tsconfig/node12': 1.0.11
      '@tsconfig/node14': 1.0.3
      '@tsconfig/node16': 1.0.4
      '@types/node': 20.14.10
      acorn: 8.12.1
      acorn-walk: 8.3.3
      arg: 4.1.3
      create-require: 1.1.1
      diff: 4.0.2
      make-error: 1.3.6
      typescript: 5.5.3
      v8-compile-cache-lib: 3.0.1
      yn: 3.1.1

  ts-pattern@5.0.8: {}

  ts-pattern@5.1.2: {}

  ts-toolbelt@9.6.0: {}

  tsconfck@3.0.2(typescript@5.5.3):
    optionalDependencies:
      typescript: 5.5.3

  tsconfig-paths-webpack-plugin@4.1.0:
    dependencies:
      chalk: 4.1.2
      enhanced-resolve: 5.17.0
      tsconfig-paths: 4.2.0

  tsconfig-paths@3.15.0:
    dependencies:
      '@types/json5': 0.0.29
      json5: 1.0.2
      minimist: 1.2.8
      strip-bom: 3.0.0

  tsconfig-paths@4.2.0:
    dependencies:
      json5: 2.2.3
      minimist: 1.2.8
      strip-bom: 3.0.0

  tslib@1.14.1: {}

  tslib@2.3.1: {}

  tslib@2.6.3: {}

  tslib@2.7.0: {}

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-detect@4.0.8: {}

  type-fest@0.20.2: {}

  type-fest@0.21.3: {}

  type-fest@0.6.0: {}

  type-fest@0.8.1: {}

  type-fest@1.4.0: {}

  type-fest@4.23.0: {}

  type-is@1.6.18:
    dependencies:
      media-typer: 0.3.0
      mime-types: 2.1.35

  typed-array-buffer@1.0.2:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-typed-array: 1.1.13

  typed-array-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13

  typed-array-byte-offset@1.0.2:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13

  typed-array-length@1.0.6:
    dependencies:
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13
      possible-typed-array-names: 1.0.0

  typed.js@2.1.0: {}

  typedarray@0.0.6:
    optional: true

  typeforce@1.18.0: {}

  typescript@5.3.3: {}

  typescript@5.5.3: {}

  ua-parser-js@1.0.38: {}

  ufo@1.5.4: {}

  uid@2.0.2:
    dependencies:
      '@lukeed/csprng': 1.1.0

  unbox-primitive@1.0.2:
    dependencies:
      call-bind: 1.0.7
      has-bigints: 1.0.2
      has-symbols: 1.0.3
      which-boxed-primitive: 1.0.2

  unc-path-regex@0.1.2: {}

  undici-types@5.26.5: {}

  unicode-canonical-property-names-ecmascript@2.0.0: {}

  unicode-match-property-ecmascript@2.0.0:
    dependencies:
      unicode-canonical-property-names-ecmascript: 2.0.0
      unicode-property-aliases-ecmascript: 2.1.0

  unicode-match-property-value-ecmascript@2.1.0: {}

  unicode-property-aliases-ecmascript@2.1.0: {}

  universalify@2.0.1: {}

  unixify@1.0.0:
    dependencies:
      normalize-path: 2.1.1

  unpipe@1.0.0: {}

  unraw@3.0.0: {}

  update-browserslist-db@1.1.0(browserslist@4.23.1):
    dependencies:
      browserslist: 4.23.1
      escalade: 3.1.2
      picocolors: 1.0.1

  update-browserslist-db@1.1.0(browserslist@4.23.2):
    dependencies:
      browserslist: 4.23.2
      escalade: 3.1.2
      picocolors: 1.0.1

  update-browserslist-db@1.1.0(browserslist@4.23.3):
    dependencies:
      browserslist: 4.23.3
      escalade: 3.1.2
      picocolors: 1.0.1

  upper-case-first@2.0.2:
    dependencies:
      tslib: 2.7.0

  upper-case@2.0.2:
    dependencies:
      tslib: 2.7.0

  uqr@0.1.2: {}

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  urlpattern-polyfill@10.0.0: {}

  urlpattern-polyfill@8.0.2: {}

  usehooks-ts@3.1.0(react@18.3.1):
    dependencies:
      lodash.debounce: 4.0.8
      react: 18.3.1

  utf-8-validate@5.0.10:
    dependencies:
      node-gyp-build: 4.8.1
    optional: true

  util-deprecate@1.0.2: {}

  utils-merge@1.0.1: {}

  uuid@10.0.0: {}

  uuid@8.3.2: {}

  uuid@9.0.1: {}

  v8-compile-cache-lib@3.0.1: {}

  v8-to-istanbul@9.3.0:
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      '@types/istanbul-lib-coverage': 2.0.6
      convert-source-map: 2.0.0

  validate-npm-package-license@3.0.4:
    dependencies:
      spdx-correct: 3.2.0
      spdx-expression-parse: 3.0.1

  value-or-promise@1.0.12: {}

  varuint-bitcoin@1.1.2:
    dependencies:
      safe-buffer: 5.2.1

  vary@1.1.2: {}

  vscode-languageserver-textdocument@1.0.12: {}

  vscode-uri@3.0.8: {}

  walker@1.0.8:
    dependencies:
      makeerror: 1.0.12

  watchpack@2.4.1:
    dependencies:
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11

  wcwidth@1.0.1:
    dependencies:
      defaults: 1.0.4

  web-streams-polyfill@3.3.3: {}

  webcrypto-core@1.8.0:
    dependencies:
      '@peculiar/asn1-schema': 2.3.13
      '@peculiar/json-schema': 1.1.12
      asn1js: 3.0.5
      pvtsutils: 1.3.5
      tslib: 2.7.0

  webidl-conversions@3.0.1: {}

  webidl-conversions@4.0.2: {}

  webpack-node-externals@3.0.0: {}

  webpack-sources@3.2.3: {}

  webpack@5.92.1:
    dependencies:
      '@types/eslint-scope': 3.7.7
      '@types/estree': 1.0.5
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/wasm-edit': 1.12.1
      '@webassemblyjs/wasm-parser': 1.12.1
      acorn: 8.12.1
      acorn-import-attributes: 1.9.5(acorn@8.12.1)
      browserslist: 4.23.3
      chrome-trace-event: 1.0.4
      enhanced-resolve: 5.17.0
      es-module-lexer: 1.5.4
      eslint-scope: 5.1.1
      events: 3.3.0
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11
      json-parse-even-better-errors: 2.3.1
      loader-runner: 4.3.0
      mime-types: 2.1.35
      neo-async: 2.6.2
      schema-utils: 3.3.0
      tapable: 2.2.1
      terser-webpack-plugin: 5.3.10(webpack@5.92.1)
      watchpack: 2.4.1
      webpack-sources: 3.2.3
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - uglify-js

  whatwg-mimetype@3.0.0: {}

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  whatwg-url@7.1.0:
    dependencies:
      lodash.sortby: 4.7.0
      tr46: 1.0.1
      webidl-conversions: 4.0.2

  which-boxed-primitive@1.0.2:
    dependencies:
      is-bigint: 1.0.4
      is-boolean-object: 1.1.2
      is-number-object: 1.0.7
      is-string: 1.0.7
      is-symbol: 1.0.4

  which-builtin-type@1.1.4:
    dependencies:
      function.prototype.name: 1.1.6
      has-tostringtag: 1.0.2
      is-async-function: 2.0.0
      is-date-object: 1.0.5
      is-finalizationregistry: 1.0.2
      is-generator-function: 1.0.10
      is-regex: 1.1.4
      is-weakref: 1.0.2
      isarray: 2.0.5
      which-boxed-primitive: 1.0.2
      which-collection: 1.0.2
      which-typed-array: 1.1.15

  which-collection@1.0.2:
    dependencies:
      is-map: 2.0.3
      is-set: 2.0.3
      is-weakmap: 2.0.2
      is-weakset: 2.0.3

  which-module@2.0.1: {}

  which-pm@2.0.0:
    dependencies:
      load-yaml-file: 0.2.0
      path-exists: 4.0.0

  which-typed-array@1.1.15:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  widest-line@3.1.0:
    dependencies:
      string-width: 4.2.3

  wif@2.0.6:
    dependencies:
      bs58check: 2.1.2

  word-wrap@1.2.5: {}

  wrap-ansi@6.2.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrap-ansi@9.0.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 7.2.0
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  write-file-atomic@4.0.2:
    dependencies:
      imurmurhash: 0.1.4
      signal-exit: 3.0.7

  ws@7.5.10(bufferutil@4.0.8)(utf-8-validate@5.0.10):
    optionalDependencies:
      bufferutil: 4.0.8
      utf-8-validate: 5.0.10

  ws@8.17.1(bufferutil@4.0.8)(utf-8-validate@5.0.10):
    optionalDependencies:
      bufferutil: 4.0.8
      utf-8-validate: 5.0.10

  ws@8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10):
    optionalDependencies:
      bufferutil: 4.0.8
      utf-8-validate: 5.0.10

  ws@8.3.0(bufferutil@4.0.8)(utf-8-validate@5.0.10):
    optionalDependencies:
      bufferutil: 4.0.8
      utf-8-validate: 5.0.10

  wscat@5.2.1(bufferutil@4.0.8)(utf-8-validate@5.0.10):
    dependencies:
      commander: 9.5.0
      https-proxy-agent: 7.0.5
      read: 1.0.7
      ws: 8.18.0(bufferutil@4.0.8)(utf-8-validate@5.0.10)
    transitivePeerDependencies:
      - bufferutil
      - supports-color
      - utf-8-validate

  xdg-basedir@5.1.0: {}

  xss@1.0.15:
    dependencies:
      commander: 2.20.3
      cssfilter: 0.0.10

  xtend@4.0.2: {}

  y18n@4.0.3: {}

  y18n@5.0.8: {}

  yallist@3.1.1: {}

  yallist@4.0.0: {}

  yaml-ast-parser@0.0.43: {}

  yaml@1.10.2: {}

  yaml@2.5.0: {}

  yargs-parser@18.1.3:
    dependencies:
      camelcase: 5.3.1
      decamelize: 1.2.0

  yargs-parser@21.1.1: {}

  yargs@15.4.1:
    dependencies:
      cliui: 6.0.0
      decamelize: 1.2.0
      find-up: 4.1.0
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      require-main-filename: 2.0.0
      set-blocking: 2.0.0
      string-width: 4.2.3
      which-module: 2.0.1
      y18n: 4.0.3
      yargs-parser: 18.1.3

  yargs@17.7.2:
    dependencies:
      cliui: 8.0.1
      escalade: 3.1.2
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 21.1.1

  yn@3.1.1: {}

  yocto-queue@0.1.0: {}

  zen-observable-ts@1.2.5:
    dependencies:
      zen-observable: 0.8.15

  zen-observable@0.8.15: {}

  zod@3.23.8: {}


================================================
File: pnpm-workspace.yaml
================================================
packages:
  - 'backend'
  - 'frontend'


================================================
File: .dockerignore
================================================
.devbox
node_modules
backend/node_modules
frontend


================================================
File: backend/README.md
================================================
# RGB++ Explorer Backend

This is the backend service for the RGB++ Explorer, built with NestJS and GraphQL.

## Features

- GraphQL API with Apollo Server
- Integration with CKB and Bitcoin networks
- RGB++ specific functionality
- Background indexing job processing with BullMQ
- Sentry integration for error tracking and performance monitoring

## Prerequisites

- Node.js + pnpm (version specified in package.json)
- PostgreSQL
- Redis

## Get Started

### Install dependencies:

```bash
pnpm install
```

### Set up environment variables:

- Copy .env.example to .env and fill in the required environment variables.
- The application uses environment-specific configuration files. Refer to the following file for configuration options:

```typescript
import z from 'zod';
import { NetworkType } from './constants';

export const envSchema = z
  .object({
    // Application runtime environment
    NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
    // Network type: mainnet or testnet
    NETWORK: z.enum([NetworkType.mainnet, NetworkType.testnet]).default(NetworkType.testnet),
    // Logging level
    LOGGER_LEVEL: z.enum(['verbose', 'debug', 'log', 'warn', 'error']).default('log'),
    // Enable or disable GraphQL Playground
    ENABLED_GRAPHQL_PLAYGROUND: z
      .string()
      .default('true')
      .transform((value) => value === 'true'),

    // GraphQL complexity limit, default to 1000
    GRAPHQL_COMPLEXITY_LIMIT: z.coerce.number().default(1000),
    // Number of indexing cluster workers, default to 2
    CLUSTER_WORKERS_NUM: z.coerce.number().default(2),

    /**
     * CORS origin whitelist (split by comma)
     */
    CORS_WHITELIST: z
      .string()
      .default('')
      .transform((value) => {
        const origin = value.split(',');
        return origin.map((host) => host.trim());
      }),

    // Database connection URL
    DATABASE_URL: z.string(),
    // Redis cache connection URL
    REDIS_CACHE_URL: z.string(),
    // Redis queue connection URL
    REDIS_QUEUE_URL: z.string(),

    // Primary Bitcoin data provider
    BITCOIN_PRIMARY_DATA_PROVIDER: z.enum(['mempool', 'electrs']).default('mempool'),

    // CKB Explorer API URL
    CKB_EXPLORER_API_URL: z.string(),
    // CKB RPC WebSocket URL
    CKB_RPC_WEBSOCKET_URL: z.string(),

    // Sentry DSN for error tracking (optional)
    SENTRY_DSN: z.string().optional(),

    // Cache key prefix
    CACHE_KEY_PREFIX: z.string().default('rgbpp-explorer@v1'),

    // Rate limit window in milliseconds, default to 60 seconds
    RATE_LIMIT_WINDOW_MS: z.coerce.number().default(60_000),
    // Rate limit per minute, default to 100
    RATE_LIMIT_PER_MINUTE: z.coerce.number().default(100),

    // Git branch (optional)
    GIT_BRANCH: z.string().optional(),
  })
  .and(
    z.union([
      // Configuration for Mempool as primary data provider
      z.object({
        BITCOIN_PRIMARY_DATA_PROVIDER: z.literal('mempool'),
        BITCOIN_MEMPOOL_SPACE_API_URL: z.string(),
        BITCOIN_ELECTRS_API_URL: z.string().optional(),
      }),
      // Configuration for Electrs as primary data provider
      z.object({
        BITCOIN_PRIMARY_DATA_PROVIDER: z.literal('electrs').default('electrs'),
        BITCOIN_ELECTRS_API_URL: z.string(),
        BITCOIN_MEMPOOL_SPACE_API_URL: z.string().optional(),
      }),
    ]),
  );

export type Env = z.infer<typeof envSchema>;
```

### Running the Application

To start the application in development mode:

```bash
pnpm run start:dev
```

For production, use:

```bash
pnpm run build
pnpm run start:prod
```

## Development

- GraphQL schema is automatically generated. You can find it in src/schema.gql.
- Use Prisma for database operations. After making changes to the Prisma schema, run:

```bash
pnpm prisma generate
pnpm prisma migrate dev
```

## Deployment

The project includes a Docker configuration. You can build and run the Docker image for deployment.

## Project Structure

```
backend/
├── src/
│   ├── core/                      # Core modules
│   │   ├── bitcoin-api/           # Bitcoin API integration
│   │   ├── blockchain/            # CKB-like blockchain API integration
│   │   ├── ckb-explorer/          # CKB Explorer integration
│   │   ├── ckb-rpc/               # CKB RPC client (blockchain module wrapper)
│   │   ├── database/              # Database connection and ORM
│   │   ├── health/                # Health check endpoints
│   │   └── indexer/               # Blockchain indexing (indexing RGB++ data)
│   ├── modules/                   # Feature modules
│   │   ├── bitcoin/               # Bitcoin related graphql implementation
│   │   ├── ckb/                   # CKB related graphql implementation
│   │   ├── rgbpp/                 # RGB++ protocol related graphql implementation
│   │   └── search/
│   ├── common/                    # Shared utilities and types
│   ├── decorators/                # Custom decorators
│   ├── middlewares/               # GraphQL middlewares
│   ├── app.module.ts              # Main application module
│   ├── bootstrap.service.ts       # Application bootstrap (mainly for indexing)
│   ├── env.ts                     # Environment configuration
│   ├── instrument.ts              # Sentry setup
│   ├── main.ts                    # Application entry point
│   └── schema.gql                 # Generated GraphQL schema
├── prisma/                        # Prisma ORM configuration
│   ├── migrations/
│   ├── schema.prisma
│   └── seed.ts
├── test/
├── .eslintrc.js
├── .gitignore
├── .prettierrc
├── nest-cli.json
├── package.json
├── tsconfig.build.json
└── tsconfig.json
```


================================================
File: backend/nest-cli.json
================================================
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}


================================================
File: backend/package.json
================================================
{
  "name": "@utxo-stack-explorer/backend",
  "version": "0.2.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/src/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "postinstall": "npx prisma generate",
    "precommit": "lint-staged",
    "prepare": "husky"
  },
  "prisma": {
    "seed": "npx ts-node prisma/seed.ts"
  },
  "lint-staged": {
    "*.ts": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix"
  },
  "dependencies": {
    "@apollo/server": "^4.11.0",
    "@apollo/server-plugin-response-cache": "^4.1.3",
    "@as-integrations/fastify": "^2.1.1",
    "@cell-studio/mempool.js": "^2.5.3",
    "@ckb-lumos/bi": "^0.23.0",
    "@ckb-lumos/lumos": "^0.23.0",
    "@ckb-lumos/rpc": "^0.23.0",
    "@nest-lab/throttler-storage-redis": "^1.0.0",
    "@nestjs/apollo": "^12.2.0",
    "@nestjs/axios": "^3.0.2",
    "@nestjs/bullmq": "^10.2.0",
    "@nestjs/cache-manager": "^2.2.2",
    "@nestjs/common": "^10.0.0",
    "@nestjs/config": "^3.2.3",
    "@nestjs/core": "^10.0.0",
    "@nestjs/event-emitter": "^2.0.4",
    "@nestjs/graphql": "^12.2.0",
    "@nestjs/platform-fastify": "^10.4.3",
    "@nestjs/schedule": "^4.1.0",
    "@nestjs/terminus": "^10.2.3",
    "@nestjs/throttler": "^6.2.1",
    "@prisma/client": "^5.16.2",
    "@rgbpp-sdk/btc": "^0.5.0",
    "@rgbpp-sdk/ckb": "^0.5.0",
    "@sentry/nestjs": "^8.28.0",
    "@sentry/node": "^8.28.0",
    "@sentry/profiling-node": "^8.28.0",
    "@types/ws": "^8.5.11",
    "apollo-server-plugin-base": "^3.7.2",
    "axios": "^1.7.2",
    "bullmq": "^5.11.0",
    "cache-manager": "^5.2.3",
    "cache-manager-redis-yet": "^4.1.2",
    "cron": "^3.1.7",
    "dataloader": "^2.2.2",
    "fastify": "^4.28.1",
    "graphql": "^16.9.0",
    "graphql-query-complexity": "^1.0.0",
    "ioredis": "^5.4.1",
    "lodash": "^4.17.21",
    "p-limit": "^3.1.0",
    "prisma": "^5.16.2",
    "redis": "^4.6.7",
    "reflect-metadata": "^0.2.0",
    "rpc-websockets": "^7.11.2",
    "rxjs": "^7.8.1",
    "serialize-javascript": "^6.0.2",
    "ws": "^8.18.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.3.10",
    "@types/express": "^4.17.17",
    "@types/jest": "^29.5.2",
    "@types/lodash": "^4.17.7",
    "@types/node": "^20.14.10",
    "@types/serialize-javascript": "^5.0.4",
    "@types/supertest": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "eslint": "^8.42.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "husky": "^9.1.4",
    "jest": "^29.5.0",
    "lint-staged": "^15.2.7",
    "prettier": "^3.0.0",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.5.3",
    "wscat": "^5.2.1"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "modulePaths": [
      "."
    ],
    "testRegex": ".*\\.(spec|test)\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}


================================================
File: backend/redis-queue.conf
================================================
# Redis configuration
#
# Example: https://raw.githubusercontent.com/redis/redis/7.4/redis.conf

################################## NETWORK #####################################
bind 0.0.0.0

################################ SNAPSHOTTING  ################################

# Save the DB to disk.
#
# save <seconds> <changes> [<seconds> <changes> ...]
#
# Redis will save the DB if the given number of seconds elapsed and it
# surpassed the given number of write operations against the DB.
#
# Snapshotting can be completely disabled with a single empty string argument
# as in following example:
#
# save ""
#
# Unless specified otherwise, by default Redis will save the DB:
#   * After 3600 seconds (an hour) if at least 1 change was performed
#   * After 300 seconds (5 minutes) if at least 100 changes were performed
#   * After 60 seconds if at least 10000 changes were performed
#
# You can set these explicitly by uncommenting the following line.
#
save 3600 1 300 100 60 10000

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
#
# Please check https://redis.io/topics/persistence for more information.
appendonly yes

# Redis can create append-only base files in either RDB or AOF formats. Using
# the RDB format is always faster and more efficient, and disabling it is only
# supported for backward compatibility purposes.
aof-use-rdb-preamble yes

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
#
# This option is usually useful when using Redis as an LRU or LFU cache, or to
# set a hard memory limit for an instance (using the 'noeviction' policy).
#
# WARNING: If you have replicas attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the replicas are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of replicas is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
#
# In short... if you have replicas attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for replica
# output buffers (but this is not needed if the policy is 'noeviction').
maxmemory 2gb
maxmemory-policy noeviction


================================================
File: backend/redis.conf
================================================
# Redis configuration
#
# Example: https://raw.githubusercontent.com/redis/redis/7.4/redis.conf

################################## NETWORK #####################################
bind 0.0.0.0

################################ SNAPSHOTTING  ################################

# Save the DB to disk.
#
# save <seconds> <changes> [<seconds> <changes> ...]
#
# Redis will save the DB if the given number of seconds elapsed and it
# surpassed the given number of write operations against the DB.
#
# Snapshotting can be completely disabled with a single empty string argument
# as in following example:
#
# save ""
#
# Unless specified otherwise, by default Redis will save the DB:
#   * After 3600 seconds (an hour) if at least 1 change was performed
#   * After 300 seconds (5 minutes) if at least 100 changes were performed
#   * After 60 seconds if at least 10000 changes were performed
#
# You can set these explicitly by uncommenting the following line.
#
save 3600 1 300 100 60 10000

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
#
# Please check https://redis.io/topics/persistence for more information.
appendonly yes

# Redis can create append-only base files in either RDB or AOF formats. Using
# the RDB format is always faster and more efficient, and disabling it is only
# supported for backward compatibility purposes.
aof-use-rdb-preamble yes

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
#
# This option is usually useful when using Redis as an LRU or LFU cache, or to
# set a hard memory limit for an instance (using the 'noeviction' policy).
#
# WARNING: If you have replicas attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the replicas are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of replicas is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
#
# In short... if you have replicas attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for replica
# output buffers (but this is not needed if the policy is 'noeviction').
maxmemory 4gb
maxmemory-policy allkeys-lru


================================================
File: backend/tsconfig.build.json
================================================
{
  "extends": "./tsconfig.json",
  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"]
}


================================================
File: backend/tsconfig.json
================================================
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "resolveJsonModule": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false
  },
  "exclude": [
    "dist"
  ]
}


================================================
File: backend/.env.example
================================================
DATABASE_URL=
REDIS_CACHE_URL=
REDIS_QUEUE_URL=

CKB_EXPLORER_API_URL=
CKB_RPC_WEBSOCKET_URL=

BITCOIN_PRIMARY_DATA_PROVIDER=mempool
BITCOIN_MEMPOOL_SPACE_API_URL=
BITCOIN_ELECTRS_API_URL=


================================================
File: backend/.eslintrc.js
================================================
module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    tsconfigRootDir: __dirname,
    sourceType: 'module',
  },
  plugins: ['@typescript-eslint/eslint-plugin', 'import'],
  extends: ['plugin:@typescript-eslint/recommended', 'plugin:prettier/recommended'],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    'no-restricted-imports': [
      'error',
      {
        name: 'nestjs-cacheable',
        importNames: ['Cacheable'],
        message: "Please use 'src/decorators/cacheable.decorator' instead",
      },
    ],
  },
};


================================================
File: backend/.gitignore
================================================
# compiled output
/dist
/node_modules
/build

# Logs
logs
*.log
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS
.DS_Store

# Tests
/coverage
/.nyc_output

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# temp directory
.temp
.tmp

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json


================================================
File: backend/.prettierrc
================================================
{
  "singleQuote": true,
  "trailingComma": "all",
  "printWidth": 100
}


================================================
File: backend/prisma/schema.prisma
================================================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeapDirection {
  LeapIn
  LeapOut
  Within
}

model Chain {
  id         Int      @id @default(autoincrement())
  name       String
  ws         String
  startBlock Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Block       Block[]
  Transaction Transaction[]
}

model Block {
  id                Int      @id @default(autoincrement())
  chainId           Int
  hash              String
  number            Int
  timestamp         DateTime
  transactionsCount Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  transactions Transaction[]
  chain        Chain         @relation(fields: [chainId], references: [id])

  @@unique([chainId, hash])
  @@unique([chainId, number])
}

model Transaction {
  id            Int            @id @default(autoincrement())
  chainId       Int
  hash          String
  index         Int
  blockNumber   Int
  isCellbase    Boolean        @default(false)
  isRgbpp       Boolean        @default(false)
  btcTxid       String?
  leapDirection LeapDirection?
  inputCount    Int
  outputCount   Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  chain   Chain    @relation(fields: [chainId], references: [id])
  block   Block    @relation(fields: [chainId, blockNumber], references: [chainId, number])

  @@unique([chainId, hash])
}

model LockScript {
  id            Int      @id @default(autoincrement())
  chainId       Int
  codeHash      String   @db.Char(66)
  hashType      String
  args          String   @db.Text
  scriptHash    String   @unique @db.Char(66)
  isRgbppLock   Boolean  @default(false)
  isBtcTimeLock Boolean  @default(false)
  ownerAddress  String?
  createdTime   DateTime @default(now())
  updatedTime   DateTime @updatedAt

  @@unique([chainId, id])
  @@unique([chainId, scriptHash])
}

model TypeScript {
  id          Int      @id @default(autoincrement())
  chainId     Int
  codeHash    String   @db.Char(66)
  hashType    String
  args        String   @db.Text
  scriptHash  String   @unique @db.Char(66)
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  @@unique([chainId, id])
  @@unique([chainId, scriptHash])
}

model Asset {
  id             Int     @id @default(autoincrement())
  blockNumber    Int
  txHash         String
  index          String
  chainId        Int
  lockScriptHash String  @db.Char(66)
  typeScriptHash String  @db.Char(66)
  amount         Decimal  @default(0) @db.Decimal(65,0)
  assetTypeId    Int
  isLive         Boolean @default(true)

  AssetType AssetType @relation(fields: [chainId, assetTypeId], references: [chainId, id])

  @@unique([chainId, txHash, index])
}

model AssetType {
  id          Int      @id @default(autoincrement())
  chainId     Int
  codeHash    String   @db.Char(66)
  hashType    String
  fungible    Boolean  @default(false)
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt
  Asset       Asset[]

  @@unique([chainId, id])
  @@unique([chainId, codeHash, hashType])
}

view Holder {
  address        String
  isLayer1       Boolean
  assetCount     Int
  assetAmount    Decimal  @default(0) @db.Decimal(65,0)
  typeScriptHash String

  @@unique([address, typeScriptHash])
}


================================================
File: backend/prisma/seed.ts
================================================
import { PrismaClient } from '@prisma/client';
import { envSchema } from '../src/env';
import {
  CKB_CHAIN_ID,
  DOB_TYPESCRIPTS,
  MNFT_TYPESCRIPTS,
  SUDT_TYPESCRIPTS,
  XUDT_TYPESCRIPTS,
} from '../src/constants';

const env = envSchema.parse(process.env);
const network = env.NETWORK;

const prisma = new PrismaClient();

const NON_FUNGIBLE_ASSET_TYPE_SCRIPTS = [DOB_TYPESCRIPTS, MNFT_TYPESCRIPTS].flatMap(
  (scripts) => scripts[network],
);

const FUNGIBLE_ASSET_TYPE_SCRIPTS = [XUDT_TYPESCRIPTS, SUDT_TYPESCRIPTS].flatMap(
  (scripts) => scripts[network],
);

async function main() {
  await prisma.chain.upsert({
    where: { id: CKB_CHAIN_ID },
    update: {},
    create: {
      id: CKB_CHAIN_ID,
      name: 'CKB',
      ws: env.CKB_RPC_WEBSOCKET_URL,
      startBlock: 0,
    },
  });

  for (const script of [...NON_FUNGIBLE_ASSET_TYPE_SCRIPTS, ...FUNGIBLE_ASSET_TYPE_SCRIPTS]) {
    await prisma.assetType.create({
      data: {
        chainId: CKB_CHAIN_ID,
        codeHash: script.codeHash,
        hashType: script.hashType,
        fungible: FUNGIBLE_ASSET_TYPE_SCRIPTS.some((s) => s.codeHash === script.codeHash),
      },
    });
  }
}
main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });


================================================
File: backend/prisma/migrations/migration_lock.toml
================================================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"

================================================
File: backend/prisma/migrations/20240903102843_init/migration.sql
================================================
-- CreateEnum
CREATE TYPE "LeapDirection" AS ENUM ('LeapIn', 'LeapOut', 'Within');

-- CreateTable
CREATE TABLE "Chain" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,
    "ws" TEXT NOT NULL,
    "startBlock" INTEGER NOT NULL DEFAULT 0,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Chain_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Block" (
    "id" SERIAL NOT NULL,
    "chainId" INTEGER NOT NULL,
    "hash" TEXT NOT NULL,
    "number" INTEGER NOT NULL,
    "timestamp" TIMESTAMP(3) NOT NULL,
    "transactionsCount" INTEGER NOT NULL,
    "size" INTEGER NOT NULL,
    "totalFee" BIGINT NOT NULL,
    "minFee" BIGINT NOT NULL,
    "maxFee" BIGINT NOT NULL,
    "difficulty" BIGINT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Block_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Transaction" (
    "id" SERIAL NOT NULL,
    "chainId" INTEGER NOT NULL,
    "hash" TEXT NOT NULL,
    "index" TEXT NOT NULL,
    "blockNumber" INTEGER NOT NULL,
    "timestamp" TIMESTAMP(3) NOT NULL,
    "fee" BIGINT NOT NULL,
    "size" INTEGER NOT NULL,
    "isCellbase" BOOLEAN NOT NULL DEFAULT false,
    "isRgbpp" BOOLEAN NOT NULL DEFAULT false,
    "leapDirection" "LeapDirection",
    "inputCount" INTEGER NOT NULL,
    "outputCount" INTEGER NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Transaction_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Output" (
    "id" SERIAL NOT NULL,
    "chainId" INTEGER NOT NULL,
    "txHash" TEXT NOT NULL,
    "index" TEXT NOT NULL,
    "consumedByTxHash" TEXT,
    "consumedByIndex" TEXT,
    "capacity" BIGINT NOT NULL,
    "lockScriptHash" CHAR(66) NOT NULL,
    "typeScriptHash" CHAR(66),
    "isLive" BOOLEAN NOT NULL DEFAULT true,
    "rgbppBound" BOOLEAN NOT NULL DEFAULT false,
    "boundBtcTxId" TEXT,
    "boundBtcTxIndex" INTEGER,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Output_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "LockScript" (
    "id" SERIAL NOT NULL,
    "chainId" INTEGER NOT NULL,
    "codeHash" CHAR(66) NOT NULL,
    "hashType" TEXT NOT NULL,
    "args" TEXT NOT NULL,
    "scriptHash" CHAR(66) NOT NULL,
    "isRgbppLock" BOOLEAN NOT NULL DEFAULT false,
    "isBtcTimeLock" BOOLEAN NOT NULL DEFAULT false,
    "ownerAddress" TEXT,
    "createdTime" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedTime" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "LockScript_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "TypeScript" (
    "id" SERIAL NOT NULL,
    "chainId" INTEGER NOT NULL,
    "codeHash" CHAR(66) NOT NULL,
    "hashType" TEXT NOT NULL,
    "args" TEXT NOT NULL,
    "scriptHash" CHAR(66) NOT NULL,
    "createdTime" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedTime" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "TypeScript_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Asset" (
    "id" SERIAL NOT NULL,
    "blockNumber" INTEGER NOT NULL,
    "txHash" TEXT NOT NULL,
    "index" TEXT NOT NULL,
    "chainId" INTEGER NOT NULL,
    "lockScriptHash" CHAR(66) NOT NULL,
    "typeScriptHash" CHAR(66) NOT NULL,
    "amount" DECIMAL(65,0) NOT NULL DEFAULT 0,
    "assetTypeId" INTEGER NOT NULL,
    "isLive" BOOLEAN NOT NULL DEFAULT true,

    CONSTRAINT "Asset_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "AssetType" (
    "id" SERIAL NOT NULL,
    "chainId" INTEGER NOT NULL,
    "codeHash" CHAR(66) NOT NULL,
    "hashType" TEXT NOT NULL,
    "fungible" BOOLEAN NOT NULL DEFAULT false,
    "createdTime" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedTime" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "AssetType_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Block_chainId_hash_key" ON "Block"("chainId", "hash");

-- CreateIndex
CREATE UNIQUE INDEX "Block_chainId_number_key" ON "Block"("chainId", "number");

-- CreateIndex
CREATE UNIQUE INDEX "Transaction_chainId_hash_key" ON "Transaction"("chainId", "hash");

-- CreateIndex
CREATE UNIQUE INDEX "Output_chainId_txHash_index_key" ON "Output"("chainId", "txHash", "index");

-- CreateIndex
CREATE UNIQUE INDEX "LockScript_scriptHash_key" ON "LockScript"("scriptHash");

-- CreateIndex
CREATE UNIQUE INDEX "LockScript_chainId_id_key" ON "LockScript"("chainId", "id");

-- CreateIndex
CREATE UNIQUE INDEX "LockScript_chainId_scriptHash_key" ON "LockScript"("chainId", "scriptHash");

-- CreateIndex
CREATE UNIQUE INDEX "TypeScript_scriptHash_key" ON "TypeScript"("scriptHash");

-- CreateIndex
CREATE UNIQUE INDEX "TypeScript_chainId_id_key" ON "TypeScript"("chainId", "id");

-- CreateIndex
CREATE UNIQUE INDEX "TypeScript_chainId_scriptHash_key" ON "TypeScript"("chainId", "scriptHash");

-- CreateIndex
CREATE UNIQUE INDEX "Asset_chainId_txHash_index_key" ON "Asset"("chainId", "txHash", "index");

-- CreateIndex
CREATE UNIQUE INDEX "AssetType_chainId_id_key" ON "AssetType"("chainId", "id");

-- CreateIndex
CREATE UNIQUE INDEX "AssetType_chainId_codeHash_hashType_key" ON "AssetType"("chainId", "codeHash", "hashType");

-- AddForeignKey
ALTER TABLE "Block" ADD CONSTRAINT "Block_chainId_fkey" FOREIGN KEY ("chainId") REFERENCES "Chain"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Transaction" ADD CONSTRAINT "Transaction_chainId_fkey" FOREIGN KEY ("chainId") REFERENCES "Chain"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Transaction" ADD CONSTRAINT "Transaction_chainId_blockNumber_fkey" FOREIGN KEY ("chainId", "blockNumber") REFERENCES "Block"("chainId", "number") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Output" ADD CONSTRAINT "Output_chainId_txHash_fkey" FOREIGN KEY ("chainId", "txHash") REFERENCES "Transaction"("chainId", "hash") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Asset" ADD CONSTRAINT "Asset_chainId_assetTypeId_fkey" FOREIGN KEY ("chainId", "assetTypeId") REFERENCES "AssetType"("chainId", "id") ON DELETE RESTRICT ON UPDATE CASCADE;


================================================
File: backend/prisma/migrations/20240903102903_holders/migration.sql
================================================
CREATE VIEW "Holder" AS
SELECT
    ls."ownerAddress" AS "address",
    ls."isRgbppLock" AS "isLayer1",
    a."typeScriptHash" AS "typeScriptHash",
    COUNT(DISTINCT a.id) AS "assetCount",
    SUM(a.amount) AS "assetAmount"
FROM "LockScript" ls
JOIN "Asset" a ON ls."scriptHash" = a."lockScriptHash"
WHERE a."isLive" = true
  AND ls."ownerAddress" IS NOT NULL
GROUP BY ls."ownerAddress", ls."isRgbppLock", a."typeScriptHash";



================================================
File: backend/prisma/migrations/20240916084317_transaction/migration.sql
================================================
/*
  Warnings:

  - You are about to drop the column `difficulty` on the `Block` table. All the data in the column will be lost.
  - You are about to drop the column `maxFee` on the `Block` table. All the data in the column will be lost.
  - You are about to drop the column `minFee` on the `Block` table. All the data in the column will be lost.
  - You are about to drop the column `size` on the `Block` table. All the data in the column will be lost.
  - You are about to drop the column `totalFee` on the `Block` table. All the data in the column will be lost.
  - You are about to drop the column `fee` on the `Transaction` table. All the data in the column will be lost.
  - You are about to drop the column `size` on the `Transaction` table. All the data in the column will be lost.
  - You are about to drop the column `timestamp` on the `Transaction` table. All the data in the column will be lost.
  - You are about to drop the `Output` table. If the table is not empty, all the data it contains will be lost.
  - Changed the type of `index` on the `Transaction` table. No cast exists, the column would be dropped and recreated, which cannot be done if there is data, since the column is required.

*/
-- DropForeignKey
ALTER TABLE "Output" DROP CONSTRAINT "Output_chainId_txHash_fkey";

-- AlterTable
ALTER TABLE "Block" DROP COLUMN "difficulty",
DROP COLUMN "maxFee",
DROP COLUMN "minFee",
DROP COLUMN "size",
DROP COLUMN "totalFee";

-- AlterTable
ALTER TABLE "Transaction" DROP COLUMN "fee",
DROP COLUMN "size",
DROP COLUMN "timestamp",
ADD COLUMN     "btcTxid" TEXT,
DROP COLUMN "index",
ADD COLUMN     "index" INTEGER NOT NULL;

-- DropTable
DROP TABLE "Output";


================================================
File: backend/scripts/migrate-and-seed.sh
================================================
#!/bin/sh

set -e

cd /app/backend

if npx prisma migrate status | grep -q "Database schema is up to date"; then
    echo "No pending migrations. Skipping migration."
else
    echo "Pending migrations found. Running migration..."
    npx prisma migrate deploy
    npx prisma generate
    npx prisma db seed
fi



================================================
File: backend/src/app.controller.ts
================================================
import { Controller, Get } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Env } from './env';
import { version } from '../package.json';
import { SkipThrottle } from '@nestjs/throttler';

@SkipThrottle()
@Controller()
export class AppController {
  private gitCommitHash: string;

  constructor(
    private configService: ConfigService<Env>,
  ) {}

  /**
   * Try to get git commit hash
   */
  private get commitHash() {
    if (!this.gitCommitHash) {
      try {
        const { execSync } = require('child_process');
        this.gitCommitHash = execSync('git rev-parse --short HEAD').toString().trim();
      } catch (err) {
        console.error('Failed to get git commit hash', err);
        this.gitCommitHash = 'HEAD';
      }
    }

    return this.gitCommitHash;
  }

  @Get('version')
  version() {
    const sematicVer = version || '0.0.0';
    return `v${sematicVer} (${this.commitHash})`;
  }
}


================================================
File: backend/src/app.module.ts
================================================
import { CacheModule, CacheStore } from '@nestjs/cache-manager';
import { Logger, Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { SentryModule } from '@sentry/nestjs/setup';
import type { RedisClientOptions } from 'redis';
import { redisStore } from 'cache-manager-redis-yet';
import { Env } from './env';
import { CoreModule } from './core/core.module';
import { ApiModule } from './modules/api.module';
import { ScheduleModule } from '@nestjs/schedule';
import { BullModule } from '@nestjs/bullmq';
import configModule from './config';
import { AppController } from './app.controller';
import { BootstrapService } from './bootstrap.service';
import { EventEmitterModule } from '@nestjs/event-emitter';

const logger = new Logger('CacheStore');

async function createCacheStore(redisUrl: string) {
  const store = await redisStore({
    url: redisUrl,
    isCacheable: (value: unknown) => value !== undefined,
  });
  return {
    async set<T>(key: string, value: T, ttl?: number): Promise<void> {
      try {
        return store.set(key, value, ttl);
      } catch (e) {
        logger.error(`Failed to set cache key ${key}: ${e}`);
        return undefined;
      }
    },
    async get<T>(key: string): Promise<T | undefined> {
      try {
        return store.get(key);
      } catch (e) {
        logger.error(`Failed to get cache key ${key}: ${e}`);
        return undefined;
      }
    },
    async del(key: string): Promise<void> {
      return store.del(key);
    },
  } satisfies CacheStore;
}

@Module({
  imports: [
    configModule,
    SentryModule.forRoot(),
    CacheModule.registerAsync<RedisClientOptions>({
      isGlobal: true,
      imports: [ConfigModule],
      useFactory: async (configService: ConfigService<Env>) => {
        const store = await createCacheStore(configService.get('REDIS_CACHE_URL')!);
        return {
          store,
        };
      },
      inject: [ConfigService],
    }),
    BullModule.forRootAsync({
      imports: [ConfigModule],
      useFactory: async (configService: ConfigService<Env>) => {
        const url = new URL(configService.get('REDIS_QUEUE_URL')!);
        return {
          connection: {
            host: url.hostname,
            port: parseInt(url.port),
            username: url.username,
            password: url.password,
          },
        };
      },
      inject: [ConfigService],
    }),
    EventEmitterModule.forRoot(),
    ScheduleModule.forRoot(),
    CoreModule,
    ApiModule,
  ],
  providers: [AppController, BootstrapService],
  controllers: [AppController],
})
export class AppModule { }


================================================
File: backend/src/bootstrap.service.ts
================================================
import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from './core/database/prisma/prisma.service';
import { IndexerServiceFactory } from './core/indexer/indexer.factory';

@Injectable()
export class BootstrapService {
  private readonly logger = new Logger(BootstrapService.name);

  constructor(
    private prismaService: PrismaService,
    private IndexerServiceFactory: IndexerServiceFactory,
  ) { }

  public async bootstrap() {
    const chains = await this.prismaService.chain.findMany();
    for (const chain of chains) {
      this.logger.log(`start indexing for chain ${chain.name}`);
      const indexerService = await this.IndexerServiceFactory.getService(chain.id);
      await indexerService.start();
    }
  }
}


================================================
File: backend/src/cluster.service.ts
================================================
import { Injectable, Logger } from '@nestjs/common';
import cluster from 'node:cluster';
import * as process from 'node:process';
import * as os from 'node:os';
import { envSchema } from './env';

const numCPUs = os.cpus().length;
const env = envSchema.parse(process.env);

@Injectable()
export class ClusterService {
  private static logger = new Logger(ClusterService.name);

  public static clusterize(callback: Function): void {
    if (cluster.isPrimary) {
      this.logger.log(`PRIMIRY PROCESS (${process.pid}) IS RUNNING `);
      const workersNum = Math.min(env.CLUSTER_WORKERS_NUM, numCPUs);
      for (let i = 0; i < workersNum; i++) {
        cluster.fork();
      }
      cluster.on('exit', (worker) => {
        this.logger.log(`WORKER ${worker.process.pid} DIED, FORKING NEW ONE`);
        cluster.fork();
      });
    } else {
      this.logger.log(`WORKER PROCESS (${process.pid}) IS RUNNING`);
      callback();
    }
  }
}


================================================
File: backend/src/config.ts
================================================
import { ConfigModule } from '@nestjs/config';
import { envSchema } from './env';

const configModule = ConfigModule.forRoot({
  isGlobal: true,
  envFilePath:
    process.env.NODE_ENV === 'production'
      ? ['.env.production.local', '.env.production', '.env']
      : ['.env.development.local', '.env.development', '.env'],
  validate: envSchema.parse,
});

export default configModule;


================================================
File: backend/src/constants.ts
================================================
import * as RgbppBtc from '@rgbpp-sdk/btc';
import { BTCTestnetType, getClusterTypeScript, getSporeTypeScript } from '@rgbpp-sdk/ckb';

export enum NetworkType {
  mainnet = 'mainnet',
  testnet = 'testnet',
  signet = 'signet',
}

export const BtcNetworkTypeMap: Record<NetworkType, RgbppBtc.NetworkType> = {
  [NetworkType.mainnet]: RgbppBtc.NetworkType.MAINNET,
  [NetworkType.testnet]: RgbppBtc.NetworkType.TESTNET,
  [NetworkType.signet]: RgbppBtc.NetworkType.TESTNET,
};

export const BtcTestnetTypeMap: Record<NetworkType.testnet | NetworkType.signet, BTCTestnetType> = {
  [NetworkType.testnet]: 'Testnet3',
  [NetworkType.signet]: 'Signet',
};

export const CKB_MIN_SAFE_CONFIRMATIONS = 24;
export const CKB_ONE_DAY_BLOCKS = 8640;
export const CKB_CHAIN_ID = 1;

export const XUDT_TYPESCRIPTS = {
  [NetworkType.mainnet]: [
    // https://explorer.nervos.org/scripts#xUDT
    {
      codeHash: '0x50bd8d6680b8b9cf98b73f3c08faf8b2a21914311954118ad6609be6e78a1b95',
      hashType: 'data1',
      args: '0x',
    },
  ],
  [NetworkType.testnet]: [
    // https://pudge.explorer.nervos.org/scripts#xUDT(final_rls)
    {
      codeHash: '0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb',
      hashType: 'type',
      args: '0x',
    },
    // https://pudge.explorer.nervos.org/scripts#xUDT
    {
      codeHash: '0x50bd8d6680b8b9cf98b73f3c08faf8b2a21914311954118ad6609be6e78a1b95',
      hashType: 'data1',
      args: '0x',
    },
  ],
};

export const SUDT_TYPESCRIPTS = {
  [NetworkType.mainnet]: [
    // https://explorer.nervos.org/scripts#sudt
    {
      codeHash: '0x5e7a36a77e68eecc013dfa2fe6a23f3b6c344b04005808694ae6dd45eea4cfd5',
      hashType: 'type',
      args: '0x',
    },
  ],
  [NetworkType.testnet]: [
    // https://pudge.explorer.nervos.org/scripts#sudt
    {
      codeHash: '0xc5e5dcf215925f7ef4dfaf5f4b4f105bc321c02776d6e7d52a1db3fcd9d011a4',
      hashType: 'type',
      args: '0x',
    },
  ],
};

export const DOB_TYPESCRIPTS = {
  [NetworkType.mainnet]: [
    {
      ...getSporeTypeScript(true),
      args: '0x',
    },
    {
      ...getClusterTypeScript(true),
      args: '0x',
    },
  ],
  [NetworkType.testnet]: [
    {
      ...getSporeTypeScript(false),
      args: '0x',
    },
    {
      ...getClusterTypeScript(false),
      args: '0x',
    },
  ],
};

export const MNFT_TYPESCRIPTS = {
  [NetworkType.mainnet]: [
    {
      codeHash: '0x2b24f0d644ccbdd77bbf86b27c8cca02efa0ad051e447c212636d9ee7acaaec9',
      hashType: 'type',
      args: '0x',
    },
  ],
  [NetworkType.testnet]: [
    {
      codeHash: '0xb1837b5ad01a88558731953062d1f5cb547adf89ece01e8934a9f0aeed2d959f',
      hashType: 'type',
      args: '0x',
    },
  ],
};


================================================
File: backend/src/env.ts
================================================
import z from 'zod';
import { NetworkType } from './constants';

export const envSchema = z
  .object({
    // Application runtime environment
    NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
    // Network type: mainnet or testnet
    NETWORK: z.enum([NetworkType.mainnet, NetworkType.testnet]).default(NetworkType.testnet),
    // Logging level
    LOGGER_LEVEL: z.enum(['verbose', 'debug', 'log', 'warn', 'error']).default('log'),
    // Enable or disable GraphQL Playground
    ENABLED_GRAPHQL_PLAYGROUND: z
      .string()
      .default('true')
      .transform((value) => value === 'true'),

    // GraphQL complexity limit, default to 1000
    GRAPHQL_COMPLEXITY_LIMIT: z.coerce.number().default(1000),
    // Number of indexing cluster workers, default to 2
    CLUSTER_WORKERS_NUM: z.coerce.number().default(2),

    /**
     * CORS origin whitelist (split by comma)
     */
    CORS_WHITELIST: z
      .string()
      .default('')
      .transform((value) => {
        const origin = value.split(',');
        return origin.map((host) => host.trim());
      }),

    // Database connection URL
    DATABASE_URL: z.string(),
    // Redis cache connection URL   
    REDIS_CACHE_URL: z.string(),
    // Redis queue connection URL
    REDIS_QUEUE_URL: z.string(),

    // Primary Bitcoin data provider
    BITCOIN_PRIMARY_DATA_PROVIDER: z.enum(['mempool', 'electrs']).default('mempool'),

    // CKB Explorer API URL
    CKB_EXPLORER_API_URL: z.string(),
    // CKB RPC WebSocket URL
    CKB_RPC_WEBSOCKET_URL: z.string(),

    // Sentry DSN for error tracking (optional)
    SENTRY_DSN: z.string().optional(),

    // Cache key prefix
    CACHE_KEY_PREFIX: z.string().default('rgbpp-explorer@v1'),

    // Rate limit window in milliseconds, default to 60 seconds
    RATE_LIMIT_WINDOW_MS: z.coerce.number().default(60_000),
    // Rate limit per minute, default to 100
    RATE_LIMIT_PER_MINUTE: z.coerce.number().default(100),

    // Git branch (optional)
    GIT_BRANCH: z.string().optional(),
  })
  .and(
    z.union([
      // Configuration for Mempool as primary data provider
      z.object({
        BITCOIN_PRIMARY_DATA_PROVIDER: z.literal('mempool'),
        BITCOIN_MEMPOOL_SPACE_API_URL: z.string(),
        BITCOIN_ELECTRS_API_URL: z.string().optional(),
      }),
      // Configuration for Electrs as primary data provider
      z.object({
        BITCOIN_PRIMARY_DATA_PROVIDER: z.literal('electrs').default('electrs'),
        BITCOIN_ELECTRS_API_URL: z.string(),
        BITCOIN_MEMPOOL_SPACE_API_URL: z.string().optional(),
      }),
    ]),
  );

export type Env = z.infer<typeof envSchema>;

================================================
File: backend/src/instrument.ts
================================================
import * as Sentry from '@sentry/nestjs';
import { nodeProfilingIntegration } from '@sentry/profiling-node';

Sentry.init({
  dsn: process.env.SENTRY_DSN,
  environment: process.env.NODE_ENV,
  integrations: [
    // @ts-ignore
    nodeProfilingIntegration(),
  ],
  tracesSampleRate: 0.5,
  profilesSampleRate: 0.5,
});


================================================
File: backend/src/main.ts
================================================
import './instrument';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { FastifyAdapter, NestFastifyApplication } from '@nestjs/platform-fastify';
import { envSchema } from './env';
import { BootstrapService } from './bootstrap.service';
import { Logger, LogLevel } from '@nestjs/common';
import { ClusterService } from './cluster.service';
import Redis from 'ioredis';

const env = envSchema.parse(process.env);
const LOGGER_LEVELS: LogLevel[] = ['verbose', 'debug', 'log', 'warn', 'error'];

function getLoggerOptions() {
  const index = LOGGER_LEVELS.indexOf(env.LOGGER_LEVEL as LogLevel);
  if (index === -1) {
    return LOGGER_LEVELS;
  }
  return LOGGER_LEVELS.slice(index);
}

const logger = new Logger('Main');

async function bootstrap() {
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule,
    new FastifyAdapter({
      trustProxy: true,
    }),
    {
      logger: getLoggerOptions(),
    },
  );

  const redis = new Redis(env.REDIS_CACHE_URL);
  await new Promise((resolve, reject) => {
    redis.on('ready', () => {
      logger.log('Redis cache ready');
      resolve(undefined);
    });
    redis.on('error', (error) => {
      logger.error(`Redis cache error: ${error}`);
      reject(undefined);
    });
  });

  const bootstrapService = app.get(BootstrapService);
  await bootstrapService.bootstrap();

  if (env.CORS_WHITELIST.length > 0) {
    app.enableCors({
      origin: env.CORS_WHITELIST,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      credentials: true,
    });
  }

  await app.listen(3000, '0.0.0.0');
}
ClusterService.clusterize(bootstrap);


================================================
File: backend/src/schema.gql
================================================
# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @cacheControl(maxAge: Int, scope: CacheControlScope, inheritMaxAge: Boolean) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | QUERY

"""CKB Script"""
type CkbScript {
  codeHash: String!
  hashType: String!
  args: String!
}

"""CKB XUDT Info"""
type CkbXUDTInfo {
  symbol: String!
  amount: String!
  decimal: Int!
  typeHash: String!
}

"""CKB Cell Status"""
type CkbCellStatus {
  consumed: Boolean!
  txHash: String
  index: Float
}

"""CKB Cell"""
type CkbCell {
  txHash: String!
  index: Int!
  capacity: Float!
  type: CkbScript
  lock: CkbScript!
  xudtInfo: CkbXUDTInfo
  status: CkbCellStatus
  cellType: CellType
}

"""Cell type (XUDT, SUDT, Dobs, mNFT)"""
enum CellType {
  XUDT
  SUDT
  DOB
  MNFT
}

"""CKB Transaction"""
type CkbTransaction {
  isCellbase: Boolean!
  blockNumber: Float!
  hash: String!
  size: Float!
  outputs: [CkbCell!]!
  confirmed: Boolean!
  inputs: [CkbCell!]
  block: CkbBlock
  fee: Float
  feeRate: Float
  confirmations: Float!
}

"""CKB Address Balance"""
type CkbAddressBalance {
  total: String!
  available: String!
  occupied: String!
}

"""CKB Address"""
type CkbAddress {
  address: String!
  shannon: Float
  transactionsCount: Float
  transactions(page: Int, pageSize: Int): [CkbTransaction!]
  balance: CkbAddressBalance
}

"""CKB Block"""
type CkbBlock {
  version: Int!
  hash: String!
  number: Int!
  timestamp: Timestamp!
  transactionsCount: Int!
  totalFee: Float
  miner: CkbAddress
  reward: Float
  transactions: [CkbTransaction!]
  size: Float!
  confirmations: Float!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""CKB Fees"""
type CkbFees {
  fast: Float!
  slow: Float!
  average: Float!
}

"""CKB ChainInfo"""
type CkbChainInfo {
  tipBlockNumber: Float!
  transactionsCountIn24Hours: Float!
  fees: CkbFees!
}

"""RGB++ Transaction"""
type RgbppTransaction {
  ckbTxHash: String!
  btcTxid: String
  blockNumber: Int!
  blockTime: Timestamp
  timestamp: Timestamp!
  leapDirection: LeapDirection
  ckbTransaction: CkbTransaction
  btcTransaction: BitcoinTransaction
}

enum LeapDirection {
  LeapIn
  LeapOut
  Within
}

"""RGB++ latest transaction list"""
type RgbppLatestTransactionList {
  txs: [RgbppTransaction!]!
  total: Int!
  pageSize: Int!
}

"""RGB++ Coin"""
type RgbppCoin {
  name: String
  description: String
  symbol: String!
  decimal: Float!
  icon: String
  typeHash: String
  typeScript: CkbScript
  h24CkbTransactionsCount: Int!
  totalAmount: Float!
  issuer: String!
  deployedAt: Timestamp!
  transactions(page: Int, pageSize: Int): [RgbppTransaction!]
  transactionsCount: Float
  amount(layer: Layer): String!
  holders(layer: Layer, page: Int, pageSize: Int, order: OrderType): [RgbppHolder!]
  holdersCount(layer: Layer): Float
}

enum Layer {
  L1
  L2
}

enum OrderType {
  Desc
  Asc
}

"""RGB++ Coin List"""
type RgbppCoinList {
  coins: [RgbppCoin!]!
  total: Int!
  pageSize: Int!
}

"""RGB++ Statistic"""
type RgbppStatistic {
  holders(layer: Layer!, page: Int, pageSize: Int, order: OrderType): [RgbppHolder!]!
  holdersCount(layer: Layer!): Float!
  latest24HoursL1TransactionsCount(leapDirection: LeapDirection): Float
  latest24HoursL2TransactionsCount: Float
}

"""RGB++ Holder"""
type RgbppHolder {
  address: String!
  assetCount: Int!
  assetAmount: String
}

"""Bitcoin Address"""
type BitcoinAddress {
  address: String!
  satoshi: Float!
  pendingSatoshi: Float!
  transactionsCount: Float
  transactions(afterTxid: String): [BitcoinTransaction!]
  rgbppAddress: RgbppAddress!
}

"""Bitcoin Output Spend Status"""
type BitcoinOutputStatus {
  spent: Boolean!
  txid: String
  vin: Float
}

"""Bitcoin Output"""
type BitcoinOutput {
  txid: String!
  vout: Float!
  scriptpubkey: String!
  scriptpubkeyAsm: String!
  scriptpubkeyType: String!
  scriptpubkeyAddress: String
  value: Float!
  address: BitcoinAddress
  status: BitcoinOutputStatus
}

"""Bitcoin Input"""
type BitcoinInput {
  txid: String!
  vout: Float!
  prevout: BitcoinOutput
  scriptsig: String!
  scriptsigAsm: String!
  isCoinbase: Boolean!
  sequence: Float!
}

"""Bitcoin Transaction"""
type BitcoinTransaction {
  blockHeight: Float
  blockHash: String
  blockTime: Timestamp
  txid: String!
  version: Int!
  vin: [BitcoinInput!]
  vout: [BitcoinOutput!]!
  size: Float!
  locktime: Float!
  weight: Float!
  fee: Float!
  feeRate: Float!
  confirmed: Boolean!
  confirmations: Float!
  transactionTime: Timestamp
  block: BitcoinBlock
  rgbppTransaction: RgbppTransaction
}

"""Rgbpp Address"""
type RgbppAddress {
  address: String!
  utxosCount: Float!
  assets: [RgbppAsset!]!
  balances: [CkbXUDTInfo!]!
}

"""Rgbpp Asset"""
type RgbppAsset {
  owner: String!
  cell: CkbCell!
  utxo: BitcoinOutput
}

"""Fee Rate Range"""
type FeeRateRange {
  min: Float!
  max: Float!
}

"""Bitcoin Block"""
type BitcoinBlock {
  id: String!
  height: Float!
  version: Int!
  timestamp: Timestamp!
  size: Float!
  weight: Float!
  bits: Float!
  difficulty: Float!
  transactionsCount: Float!
  miner: BitcoinAddress
  reward: Float
  totalFee: Float
  feeRateRange: FeeRateRange
  transactions(
    """For pagination, must be a multiplication of 25"""
    startIndex: Float
  ): [BitcoinTransaction!]
  confirmations: Float
}

"""Bitcoin Fees"""
type BitcoinFees {
  fastest: Float!
  halfHour: Float!
  hour: Float!
  economy: Float!
  minimum: Float!
}

"""Bitcoin ChainInfo"""
type BitcoinChainInfo {
  tipBlockHeight: Float!
  tipBlockHash: String!
  difficulty: Float!
  transactionsCountIn24Hours: Float!
  fees: BitcoinFees!
}

"""Search Result (including address/tx/block)"""
type SearchResult {
  query: String!
  btcBlock: String
  btcTransaction: String
  btcAddress: String
  ckbBlock: String
  ckbTransaction: String
  ckbAddress: String
  rgbppCoin: String
}

type Query {
  ckbChainInfo: CkbChainInfo!
  ckbBlock(heightOrHash: String!): CkbBlock
  ckbTransactions(types: [CellType!], scriptKey: CkbSearchKeyInput, limit: Float, order: OrderType, after: String): [CkbTransaction!]!
  ckbTransaction(txHash: String!): CkbTransaction
  ckbAddress(address: String!): CkbAddress
  btcChainInfo: BitcoinChainInfo!
  btcBlock(hashOrHeight: String!): BitcoinBlock
  btcTransaction(txid: String!): BitcoinTransaction
  rgbppLatestTransactions(limit: Int): RgbppLatestTransactionList!
  rgbppLatestL1Transactions(limit: Int): RgbppLatestTransactionList!
  rgbppLatestL2Transactions(limit: Int): RgbppLatestTransactionList!
  rgbppTransaction(txidOrTxHash: String!): RgbppTransaction
  rgbppAddress(address: String!): RgbppAddress
  rgbppCoins(page: Int, pageSize: Int, sort: TransactionListSortType): RgbppCoinList!
  rgbppCoin(typeHash: String!): RgbppCoin
  rgbppStatistic: RgbppStatistic!
  btcAddress(address: String!): BitcoinAddress
  search(query: String!): SearchResult!
}

"""Search key for CKB transactions"""
input CkbSearchKeyInput {
  script: CkbScriptInput!
  scriptType: String!
}

"""CKB Script"""
input CkbScriptInput {
  codeHash: String!
  hashType: String!
  args: String!
}

enum TransactionListSortType {
  TransactionsAsc
  TransactionsDesc
  AddressCountAsc
  AddressCountDesc
  CreatedTimeAsc
  CreatedTimeDesc
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

================================================
File: backend/src/common/dataloader.ts
================================================
// https://github.com/Applifting/nestjs-dataloader/blob/5d05f7b027e49dfceb08ee2df264d64d924feaf3/index.ts

import {
  CallHandler,
  createParamDecorator,
  ExecutionContext,
  Injectable,
  InternalServerErrorException,
  NestInterceptor,
  Type,
} from '@nestjs/common';
import { APP_INTERCEPTOR, ModuleRef, ContextIdFactory } from '@nestjs/core';
import { GqlExecutionContext } from '@nestjs/graphql';
import DataLoader from 'dataloader';
import { Observable } from 'rxjs';

/**
 * This interface will be used to generate the initial data loader.
 * The concrete implementation should be added as a provider to your module.
 */
export interface BaseNestDataLoader<ID, Type> {
  /**
   * Should return a new instance of dataloader each time
   */
  getBatchFunction(): (keys: ID[]) => PromiseLike<Type[]>;
  /**
   * Should return options for dataloader
   */
  getOptions?(): DataLoader.Options<ID, Type, string>;
}

/**
 * Extended interface when ID is not string
 */
export interface NestDataLoaderWithOptions<ID, Type> extends BaseNestDataLoader<ID, Type> {
  /**
   * Should return options for dataloader
   */
  getOptions(): DataLoader.Options<ID, Type, string> &
    Required<Pick<DataLoader.Options<ID, Type, string>, 'cacheKeyFn'>>;
}

/**
 * Conditional type to determine which interface to use based on ID type
 */
export type NestDataLoader<ID, Type> = ID extends string
  ? BaseNestDataLoader<ID, Type>
  : NestDataLoaderWithOptions<ID, Type>;

/**
 * Context key where get loader function will be stored.
 * This class should be added to your module providers like so:
 * {
 *     provide: APP_INTERCEPTOR,
 *     useClass: DataLoaderInterceptor,
 * },
 */
export const NEST_LOADER_CONTEXT_KEY: string = 'NEST_LOADER_CONTEXT_KEY';

@Injectable()
export class DataLoaderInterceptor implements NestInterceptor {
  constructor(private readonly moduleRef: ModuleRef) {}
  /**
   * @inheritdoc
   */
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const graphqlExecutionContext = GqlExecutionContext.create(context);
    const ctx = graphqlExecutionContext.getContext();

    if (ctx[NEST_LOADER_CONTEXT_KEY] === undefined) {
      ctx[NEST_LOADER_CONTEXT_KEY] = {
        contextId: ContextIdFactory.create(),
        getLoader: (type: string): Promise<NestDataLoader<any, any>> => {
          if (ctx[type] === undefined) {
            try {
              ctx[type] = (async () => {
                const dataLoaderImplementation = await this.moduleRef.resolve<
                  NestDataLoader<any, any>
                >(type, ctx[NEST_LOADER_CONTEXT_KEY].contextId, {
                  strict: false,
                });
                return new DataLoader(
                  dataLoaderImplementation.getBatchFunction(),
                  dataLoaderImplementation.getOptions?.(),
                );
              })();
            } catch (e) {
              throw new InternalServerErrorException(`The loader ${type} is not provided` + e);
            }
          }
          return ctx[type];
        },
      };
    }
    return next.handle();
  }
}

/**
 * The decorator to be used within your graphql method.
 */
export const Loader = createParamDecorator(
  async (
    data: Type<NestDataLoader<any, any>>,
    context: ExecutionContext & { [key: string]: any },
  ) => {
    const ctx: any = GqlExecutionContext.create(context).getContext();
    if (ctx[NEST_LOADER_CONTEXT_KEY] === undefined) {
      throw new InternalServerErrorException(`
            You should provide interceptor ${DataLoaderInterceptor.name} globally with ${APP_INTERCEPTOR}
          `);
    }
    return await ctx[NEST_LOADER_CONTEXT_KEY].getLoader(data);
  },
);

export type DataLoaderResponse<T extends NestDataLoader<any, any>> =
  Awaited<ReturnType<ReturnType<T['getBatchFunction']>>> extends (infer E)[] ? E : never;


================================================
File: backend/src/common/date.ts
================================================
export const ONE_HOUR_MS = 60 * 60 * 1000;
export const TEN_MINUTES_MS = 10 * 60 * 1000;
export const ONE_DAY_MS = 24 * 60 * 60 * 1000;
export const ONE_MINUTE_MS = 60 * 1000;


================================================
File: backend/src/common/fee-rate.ts
================================================
import { TransactionFeeRate } from 'src/core/ckb-explorer/ckb-explorer.interface';

// https://github.com/nervosnetwork/ckb-explorer-frontend/blob/78ef8fba86c01e772c6b7edd8ceb5fe96cbd8b9b/src/pages/FeeRateTracker/FeeRateTrackerComp.tsx#L30
export const getWeightedMedian = (tfrs: TransactionFeeRate[]): number => {
  if (tfrs?.length === 0) {
    return 0;
  }
  return tfrs.length % 2 === 0
    ? (tfrs[tfrs.length / 2 - 1].confirmation_time + tfrs[tfrs.length / 2 - 1].confirmation_time) /
    2
    : tfrs[(tfrs.length - 1) / 2].confirmation_time;
};

// https://github.com/nervosnetwork/ckb-explorer-frontend/blob/78ef8fba86c01e772c6b7edd8ceb5fe96cbd8b9b/src/pages/FeeRateTracker/FeeRateTrackerComp.tsx#L39
export const calcFeeRate = (tfrs: TransactionFeeRate[]): number =>
  tfrs.length === 0
    ? 0
    : Math.round(tfrs.reduce((acc, cur) => acc + cur.fee_rate * 1000, 0) / tfrs.length);


================================================
File: backend/src/core/core.module.ts
================================================
import { Module } from '@nestjs/common';
// import { DatabaseModule } from './database/database.module';
import { CkbExplorerModule } from './ckb-explorer/ckb-explorer.module';
import { CkbExplorerService } from './ckb-explorer/ckb-explorer.service';
import { BitcoinApiModule } from './bitcoin-api/bitcoin-api.module';
import { CkbRpcModule } from './ckb-rpc/ckb-rpc.module';
import { CkbRpcWebsocketService } from './ckb-rpc/ckb-rpc-websocket.service';
import { BitcoinApiService } from './bitcoin-api/bitcoin-api.service';
import { HealthModule } from './health/health.module';
import { BlockchainModule } from './blockchain/blockchain.module';
import { IndexerModule } from './indexer/indexer.module';
import { DatabaseModule } from './database/database.module';
import { CoreService } from './core.service';

@Module({
  imports: [
    DatabaseModule,
    CkbExplorerModule,
    CkbRpcModule,
    BitcoinApiModule,
    HealthModule,
    BlockchainModule,
    IndexerModule,
  ],
  providers: [CkbExplorerService, CkbRpcWebsocketService, BitcoinApiService, CoreService],
  exports: [CkbExplorerService, CkbRpcWebsocketService, BitcoinApiService, CoreService],
})
export class CoreModule { }


================================================
File: backend/src/core/core.service.ts
================================================
import { BI, HashType, Script } from '@ckb-lumos/lumos';
import { bytes } from '@ckb-lumos/lumos/codec';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import {
  getBtcTimeLockScript,
  getRgbppLockScript,
  isScriptEqual,
  remove0x,
  RGBPPLock,
} from '@rgbpp-sdk/ckb';
import { BtcTestnetTypeMap, NetworkType } from 'src/constants';
import { Env } from 'src/env';
import { Transaction } from './blockchain/blockchain.interface';
import { BlockchainServiceFactory } from './blockchain/blockchain.factory';
import { LeapDirection } from '@prisma/client';
import { ONE_DAY_MS } from 'src/common/date';
import { Cacheable } from 'src/decorators/cacheable.decorator';

export const CELLBASE_TX_HASH =
  '0x0000000000000000000000000000000000000000000000000000000000000000';

@Injectable()
export class CoreService {
  constructor(
    private configService: ConfigService<Env>,
    private blockchainServiceFactory: BlockchainServiceFactory,
  ) {}

  public get rgbppLockScript() {
    const network = this.configService.get('NETWORK');
    const lockScript = getRgbppLockScript(
      network === NetworkType.mainnet,
      BtcTestnetTypeMap[network],
    );
    return lockScript;
  }

  public get btcTimeLockScript() {
    const network = this.configService.get('NETWORK');
    const lockScript = getBtcTimeLockScript(
      network === NetworkType.mainnet,
      BtcTestnetTypeMap[network],
    );
    return lockScript;
  }

  public parseRgbppLockArgs(args: string): { outIndex: number; btcTxid: string } {
    const unpack = RGBPPLock.unpack(args);
    const btcTxid = bytes.hexify(bytes.bytify(unpack.btcTxid).reverse());
    return {
      outIndex: unpack.outIndex,
      btcTxid: remove0x(btcTxid),
    };
  }

  public isRgbppLockScript(script: Script): boolean {
    return isScriptEqual(
      {
        ...script,
        args: '0x',
      },
      this.rgbppLockScript,
    );
  }

  public isBtcTimeLockScript(script: Script): boolean {
    return isScriptEqual(
      {
        ...script,
        args: '0x',
      },
      this.btcTimeLockScript,
    );
  }

  @Cacheable({
    namespace: 'CoreService',
    key: (chainId: number, ckbTx: Transaction) => {
      return `getLeapDirectionByCkbTx:${chainId}:${ckbTx.hash}`;
    },
    ttl: ONE_DAY_MS,
  })
  public async getLeapDirectionByCkbTx(chainId: number, ckbTx: Transaction) {
    const blockchainService = this.blockchainServiceFactory.getService(chainId);
    const inputCells = await Promise.all(
      ckbTx.inputs.map(async (input) => {
        const inputTx = await blockchainService.getTransaction(input.previous_output.tx_hash);
        const index = BI.from(input.previous_output.index).toNumber();
        return inputTx?.transaction.outputs?.[index] ?? null;
      }),
    );
    const hasRgbppLockInput = inputCells.some(
      (cell) =>
        cell?.lock &&
        this.isRgbppLockScript({
          codeHash: cell.lock.code_hash,
          hashType: cell.lock.hash_type as HashType,
          args: cell.lock.args,
        }),
    );
    const hasRgbppLockOuput = ckbTx.outputs.some(
      (output) =>
        output?.lock &&
        this.isRgbppLockScript({
          codeHash: output.lock.code_hash,
          hashType: output.lock.hash_type as HashType,
          args: output.lock.args,
        }),
    );
    const hasBtcTimeLockOutput = ckbTx.outputs.some(
      (output) =>
        output.lock &&
        this.isBtcTimeLockScript({
          codeHash: output.lock.code_hash,
          hashType: output.lock.hash_type as HashType,
          args: output.lock.args,
        }),
    );
    if (hasRgbppLockInput && hasBtcTimeLockOutput) {
      return LeapDirection.LeapOut;
    }
    if (hasRgbppLockInput && hasRgbppLockOuput) {
      return LeapDirection.Within;
    }
    if (!hasRgbppLockInput && hasRgbppLockOuput) {
      return LeapDirection.LeapIn;
    }
    return null;
  }
}


================================================
File: backend/src/core/bitcoin-api/bitcoin-api.health.ts
================================================
import { Injectable } from '@nestjs/common';
import { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';
import { BitcoinApiService } from './bitcoin-api.service';
import * as Sentry from '@sentry/nestjs';

@Injectable()
export class BitcoinApiHealthIndicator extends HealthIndicator {
  constructor(private bitcoinApiService: BitcoinApiService) {
    super();
  }

  public async isHealthy(): Promise<HealthIndicatorResult> {
    try {
      const now = performance.now();
      const info = await this.bitcoinApiService.getBlockchainInfo();
      const isHealthy = !!info.blocks;
      const result = this.getStatus('bitcoin-api', isHealthy, {
        info,
        latency: performance.now() - now,
      });
      if (isHealthy) {
        return result;
      }
      throw new HealthCheckError('BitcoinApiService failed', result);
    } catch (e) {
      Sentry.captureException(e);
      throw new HealthCheckError('BitcoinApiService failed', e);
    }
  }
}


================================================
File: backend/src/core/bitcoin-api/bitcoin-api.interface.ts
================================================
import { Address, Block, OutSpend, RecommendedFees, Transaction, UTXO } from './bitcoin-api.schema';

export { Address, Block, OutSpend, RecommendedFees, Transaction, UTXO };

export interface IBitcoinDataProvider {
  getFeesRecommended(): Promise<RecommendedFees>;
  getAddress(props: { address: string }): Promise<Address>;
  getAddressTxsUtxo(props: { address: string }): Promise<UTXO[]>;
  getAddressTxs(props: { address: string; afterTxid?: string }): Promise<Transaction[]>;
  getTx(props: { txid: string }): Promise<Transaction>;
  getTxHex(props: { txid: string }): Promise<string>;
  getTxOutSpend(props: { txid: string; vout: number }): Promise<OutSpend>;
  getTxOutSpends(props: { txid: string }): Promise<OutSpend[]>;
  getTransactionTimes({ txids }: { txids: string[] }): Promise<Array<number>>;
  getBlock(props: { hash: string }): Promise<Block>;
  getBlockTxs(props: { hash: string; startIndex?: number }): Promise<Transaction[]>;
  getBlockHeight(props: { height: number }): Promise<string>;
  getBlockHeader(props: { hash: string }): Promise<string>;
  getBlockTxids(props: { hash: string }): Promise<string[]>;
  getBlocksTipHash(): Promise<string>;
}


================================================
File: backend/src/core/bitcoin-api/bitcoin-api.module.ts
================================================
import { Global, Module } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { BitcoinApiService } from './bitcoin-api.service';
import { Env } from 'src/env';
import { BitcoinApiHealthIndicator } from './bitcoin-api.health';

@Global()
@Module({
  providers: [BitcoinApiService, BitcoinApiHealthIndicator],
  exports: [BitcoinApiService, BitcoinApiHealthIndicator],
})
export class BitcoinApiModule {
  constructor(
    private bitcoinAPIService: BitcoinApiService,
    private configService: ConfigService<Env>,
  ) {
    const network = this.configService.get('NETWORK');
    this.bitcoinAPIService.checkNetwork(network);
  }
}


================================================
File: backend/src/core/bitcoin-api/bitcoin-api.schema.ts
================================================
import { z } from 'zod';

export const ChainInfo = z.object({
  chain: z.string(),
  blocks: z.number(),
  bestblockhash: z.string(),
  difficulty: z.number(),
  mediantime: z.number(),
});
export type ChainInfo = z.infer<typeof ChainInfo>;

export const Block = z.object({
  id: z.string(),
  height: z.number(),
  version: z.number(),
  timestamp: z.number(),
  tx_count: z.number(),
  size: z.number(),
  weight: z.number(),
  merkle_root: z.string(),
  previousblockhash: z.string(),
  mediantime: z.number(),
  nonce: z.number(),
  bits: z.number(),
  difficulty: z.number(),
  extras: z
    .object({
      reward: z.number(),
      totalFees: z.number(),
      avgFee: z.number(),
      avgFeeRate: z.number(),
      feeRange: z.number().array(),
      coinbaseAddress: z.string(),
    })
    .optional(),
});
export type Block = z.infer<typeof Block>;

export const Status = z.object({
  confirmed: z.boolean(),
  block_height: z.number().optional(),
  block_hash: z.string().optional(),
  block_time: z.number().optional(),
});
export type Status = z.infer<typeof Status>;

export const Address = z.object({
  address: z.string(),
  chain_stats: z.object({
    funded_txo_count: z.number(),
    funded_txo_sum: z.number(),
    spent_txo_count: z.number(),
    spent_txo_sum: z.number(),
    tx_count: z.number(),
  }),
  mempool_stats: z.object({
    funded_txo_count: z.number(),
    funded_txo_sum: z.number(),
    spent_txo_count: z.number(),
    spent_txo_sum: z.number(),
    tx_count: z.number(),
  }),
});
export type Address = z.infer<typeof Address>;

export const Balance = z.object({
  address: z.string(),
  satoshi: z.number(),
  pending_satoshi: z.number(),
  dust_satoshi: z.number(),
  utxo_count: z.number(),
});
export type Balance = z.infer<typeof Balance>;

export const UTXO = z.object({
  txid: z.string(),
  vout: z.number(),
  value: z.number(),
  status: Status,
});
export type UTXO = z.infer<typeof UTXO>;

export const Output = z.object({
  scriptpubkey: z.string(),
  scriptpubkey_asm: z.string(),
  scriptpubkey_type: z.string(),
  scriptpubkey_address: z.string().optional(),
  value: z.number(),
});
export type Output = z.infer<typeof Output>;

export const Input = z.object({
  txid: z.string(),
  vout: z.number(),
  prevout: Output.or(z.null()),
  scriptsig: z.string(),
  scriptsig_asm: z.string(),
  witness: z.array(z.string()).optional(),
  is_coinbase: z.boolean(),
  sequence: z.coerce.number(),
});
export type Input = z.infer<typeof Input>;

export const Transaction = z.object({
  txid: z.string(),
  version: z.number(),
  locktime: z.number(),
  vin: z.array(Input),
  vout: z.array(Output),
  size: z.number(),
  weight: z.number(),
  fee: z.number(),
  status: Status,
});
export type Transaction = z.infer<typeof Transaction>;

export const OutSpend = z.discriminatedUnion('spent', [
  z.object({
    spent: z.literal(false),
  }),
  z.object({
    spent: z.literal(true),
    txid: z.string(),
    vin: z.number(),
    status: z.object({
      confirmed: z.boolean(),
      block_height: z.number().optional(),
      block_hash: z.string().optional(),
      block_time: z.number().optional(),
    }),
  }),
]);
export type OutSpend = z.infer<typeof OutSpend>;

export const RecommendedFees = z.object({
  fastestFee: z.number(),
  halfHourFee: z.number(),
  hourFee: z.number(),
  economyFee: z.number(),
  minimumFee: z.number(),
});
export type RecommendedFees = z.infer<typeof RecommendedFees>;


================================================
File: backend/src/core/bitcoin-api/bitcoin-api.service.ts
================================================
import { HttpStatusCode, isAxiosError } from 'axios';
import { ConfigService } from '@nestjs/config';
import { HttpException, Injectable, Logger } from '@nestjs/common';
import { NetworkType } from 'src/constants';
import { Env } from 'src/env';
import { IBitcoinDataProvider } from './bitcoin-api.interface';
import { ElectrsService } from './provider/electrs.service';
import { MempoolService } from './provider/mempool.service';
import { ChainInfo, Transaction } from './bitcoin-api.schema';
import { ONE_HOUR_MS, ONE_DAY_MS, TEN_MINUTES_MS } from 'src/common/date';
import { Cacheable } from 'src/decorators/cacheable.decorator';
import * as Sentry from '@sentry/nestjs';
import { PLimit } from 'src/decorators/plimit.decorator';

type MethodParameters<T, K extends keyof T> = T[K] extends (...args: infer P) => any ? P : never;
type MethodReturnType<T, K extends keyof T> = T[K] extends (...args: any[]) => infer R ? R : never;

// https://github.com/mempool/electrs/blob/d4f788fc3d7a2b4eca4c5629270e46baba7d0f19/src/errors.rs#L6
export enum BitcoinClientErrorMessage {
  Connection = 'Connection error',
  Interrupt = 'Interruption by external signal',
  TooManyUtxos = 'Too many unspent transaction outputs',
  TooManyTxs = 'Too many history transactions',
  ElectrumClient = 'Electrum client error',
}

export enum BitcoinClientErrorCode {
  Connection = 0x1000, // 4096
  Interrupt = 0x1001, // 4097
  TooManyUtxos = 0x1002, // 4098
  TooManyTxs = 0x1003, // 4099
  ElectrumClient = 0x1004, // 4100
}

const BitcoinClientErrorMap = {
  [BitcoinClientErrorMessage.Connection]: BitcoinClientErrorCode.Connection,
  [BitcoinClientErrorMessage.Interrupt]: BitcoinClientErrorCode.Interrupt,
  [BitcoinClientErrorMessage.TooManyUtxos]: BitcoinClientErrorCode.TooManyUtxos,
  [BitcoinClientErrorMessage.TooManyTxs]: BitcoinClientErrorCode.TooManyTxs,
  [BitcoinClientErrorMessage.ElectrumClient]: BitcoinClientErrorCode.ElectrumClient,
};

export class BitcoinServiceError extends Error {
  public statusCode = HttpStatusCode.ServiceUnavailable;
  public errorCode: BitcoinClientErrorCode;

  constructor(message: string) {
    super(message);
    this.name = this.constructor.name;

    const errorKey = Object.keys(BitcoinClientErrorMap).find((msg) => message.startsWith(msg));
    this.errorCode = BitcoinClientErrorMap[errorKey as BitcoinClientErrorMessage];
  }
}

@Injectable()
export class BitcoinApiService {
  private logger = new Logger(BitcoinApiService.name);

  private source: IBitcoinDataProvider;
  private fallback?: IBitcoinDataProvider;

  constructor(private configService: ConfigService<Env>) {
    const BITCOIN_DATA_PROVIDER = this.configService.get('BITCOIN_PRIMARY_DATA_PROVIDER');
    const BITCOIN_ELECTRS_API_URL = this.configService.get('BITCOIN_ELECTRS_API_URL');
    const BITCOIN_MEMPOOL_SPACE_API_URL = this.configService.get('BITCOIN_MEMPOOL_SPACE_API_URL');
    const network = this.configService.get('NETWORK');

    switch (BITCOIN_DATA_PROVIDER) {
      case 'mempool':
        this.logger.log('Using Mempool.space API as the bitcoin data provider');
        this.source = new MempoolService(BITCOIN_MEMPOOL_SPACE_API_URL, network);
        if (BITCOIN_ELECTRS_API_URL) {
          this.logger.log('Using Electrs API as the fallback bitcoin data provider');
          this.fallback = new ElectrsService(BITCOIN_ELECTRS_API_URL);
        }
        break;
      case 'electrs':
        this.logger.log('Using Electrs API as the bitcoin data provider');
        this.source = new ElectrsService(BITCOIN_ELECTRS_API_URL);
        if (BITCOIN_MEMPOOL_SPACE_API_URL) {
          this.logger.log('Using Mempool.space API as the fallback bitcoin data provider');
          this.fallback = new MempoolService(BITCOIN_MEMPOOL_SPACE_API_URL, network);
        }
        break;
      default:
        throw new Error('Invalid bitcoin data provider');
    }
  }

  @PLimit({ concurrency: 200 })
  private async call<K extends keyof IBitcoinDataProvider>(
    method: K,
    ...args: MethodParameters<IBitcoinDataProvider, K>
  ): Promise<MethodReturnType<IBitcoinDataProvider, K>> {
    try {
      this.logger.debug(`Calling ${method} with args: ${JSON.stringify(args)}`);
      // eslint-disable-next-line @typescript-eslint/ban-types
      const result = await (this.source[method] as Function).apply(this.source, args);
      return result as MethodReturnType<IBitcoinDataProvider, K>;
    } catch (err) {
      let calledError = err;
      this.logger.error(err);
      Sentry.captureException(err);
      if (this.fallback) {
        this.logger.warn(
          `Fallback to ${this.fallback.constructor.name} due to error: ${(err as Error).message}`,
        );
        try {
          // eslint-disable-next-line @typescript-eslint/ban-types
          const result = await (this.fallback[method] as Function).apply(this.fallback, args);
          return result as MethodReturnType<IBitcoinDataProvider, K>;
        } catch (fallbackError) {
          this.logger.error(fallbackError);
          Sentry.captureException(fallbackError);
          calledError = fallbackError;
        }
      }
      if (isAxiosError(calledError)) {
        const error = new BitcoinServiceError(calledError.response?.data ?? calledError.message);
        if (calledError.response?.status) {
          error.statusCode = calledError.response.status;
        }
        throw new HttpException(error, error.statusCode);
      }
      throw new HttpException(calledError, HttpStatusCode.ServiceUnavailable);
    }
  }

  public async checkNetwork(network: NetworkType) {
    const hash = await this.getBlockHeight({ height: 0 });
    switch (network) {
      case NetworkType.mainnet:
        // Bitcoin mainnet genesis block hash
        if (hash !== '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f') {
          throw new Error('Bitcoin client is not running on mainnet');
        }
        break;
      case NetworkType.testnet:
        // Bitcoin testnet genesis block hash
        if (hash !== '000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943') {
          throw new Error('Bitcoin client is not running on testnet');
        }
        break;
      case NetworkType.signet:
        // Bitcoin signet genesis block hash
        if (hash !== '00000008819873e925422c1ff0f99f7cc9bbb232af63a077a480a3633bee1ef6') {
          throw new Error('Bitcoin client is not running on signet');
        }
        break;
      default:
    }
  }

  public async getBlockchainInfo(): Promise<ChainInfo> {
    const hash = await this.getBlocksTipHash();
    const tip = await this.getBlock({ hash });

    const { difficulty, mediantime } = tip;
    const network = this.configService.get('NETWORK');
    return {
      chain: network === 'mainnet' ? 'main' : 'test',
      blocks: tip.height,
      bestblockhash: hash,
      difficulty,
      mediantime,
    };
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: 'getFeesRecommended',
    ttl: 10_000,
  })
  public async getFeesRecommended() {
    return this.call('getFeesRecommended');
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ address }) => `getAddress:${address}`,
    ttl: 10_000,
  })
  public async getAddress({ address }: { address: string }) {
    return this.call('getAddress', { address });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ address }) => `getAddressTxsUtxo:${address}`,
    ttl: 10_000,
  })
  public async getAddressTxsUtxo({ address }: { address: string }) {
    return this.call('getAddressTxsUtxo', { address });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ address, afterTxid }) => `getAddressTxs:${address}:${afterTxid}`,
    ttl: 10_000,
  })
  public async getAddressTxs({ address, afterTxid }: { address: string; afterTxid?: string }) {
    return this.call('getAddressTxs', { address, afterTxid });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ txid }) => `getTx:${txid}`,
    ttl: ONE_DAY_MS,
    shouldCache: (tx: Transaction) =>
      tx.status.confirmed &&
      !!tx.status.block_time &&
      Date.now() - tx.status.block_time > ONE_HOUR_MS,
  })
  public async getTx({ txid }: { txid: string }) {
    return this.call('getTx', { txid });
  }

  public async getTxOutSpend({ txid, vout }: { txid: string; vout: number }) {
    return this.call('getTxOutSpend', { txid, vout });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ txid }) => `getTxOutSpends:${txid}`,
    ttl: ONE_DAY_MS,
  })
  public async getTxOutSpends({ txid }: { txid: string }) {
    return this.call('getTxOutSpends', { txid });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ txids }) => `getTransactionTimes:${txids.join(',')}`,
    ttl: 10_000,
  })
  public async getTransactionTimes({ txids }: { txids: string[] }) {
    return this.call('getTransactionTimes', { txids });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ hash }) => `getBlock:${hash}`,
    ttl: ONE_DAY_MS,
  })
  public async getBlock({ hash }: { hash: string }) {
    return this.call('getBlock', { hash });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ hash, startIndex }) => `getBlockTxs:${hash}:${startIndex}`,
    ttl: ONE_DAY_MS,
  })
  public async getBlockTxs({ hash, startIndex }: { hash: string; startIndex?: number }) {
    return this.call('getBlockTxs', { hash, startIndex });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ height }) => `getBlockHeight:${height}`,
    ttl: TEN_MINUTES_MS,
  })
  public async getBlockHeight({ height }: { height: number }) {
    return this.call('getBlockHeight', { height });
  }

  @Cacheable({
    namespace: 'bitcoinApiService',
    key: ({ hash }) => `getBlockTxids:${hash}`,
    ttl: ONE_DAY_MS,
  })
  public async getBlockTxids({ hash }: { hash: string }) {
    return this.call('getBlockTxids', { hash });
  }

  public async getBlocksTipHash() {
    return this.call('getBlocksTipHash');
  }
}


================================================
File: backend/src/core/bitcoin-api/provider/electrs.service.ts
================================================
import axios, { AxiosInstance, CreateAxiosDefaults } from 'axios';
import { IBitcoinDataProvider } from '../bitcoin-api.interface';
import {
  Address,
  Block,
  OutSpend,
  RecommendedFees,
  Transaction,
  UTXO,
} from '../bitcoin-api.schema';
import { HttpException } from '@nestjs/common';
import * as https from 'node:https';
import * as http from 'node:http';

export class ElectrsService implements IBitcoinDataProvider {
  private request: AxiosInstance;

  constructor(baseURL: string) {
    const config: CreateAxiosDefaults = {
      baseURL,
    };
    const url = new URL(baseURL);
    if (url.protocol === 'https:') {
      config.httpsAgent = new https.Agent({ keepAlive: true });
    } else {
      config.httpAgent = new http.Agent({ keepAlive: true });
    }
    this.request = axios.create(config);
  }

  public async getFeesRecommended(): Promise<RecommendedFees> {
    throw new HttpException('Electrs: Recommended fees not available', 500);
  }

  public async getAddress({ address }: { address: string }) {
    const response = await this.request.get<Address>(`/address/${address}`);
    return response.data;
  }

  public async getAddressTxsUtxo({ address }: { address: string }) {
    const response = await this.request.get<UTXO[]>(`/address/${address}/utxo`);
    return response.data;
  }

  public async getAddressTxs({ address, afterTxid }: { address: string; afterTxid?: string }) {
    let url = `/address/${address}/txs`;
    if (afterTxid) {
      url += `?after_txid=${afterTxid}`;
    }
    const response = await this.request.get<Transaction[]>(url);
    return response.data.map((tx: unknown) => Transaction.parse(tx));
  }

  public async getTx({ txid }: { txid: string }) {
    const response = await this.request.get<Transaction>(`/tx/${txid}`);
    return Transaction.parse(response.data);
  }

  public async getTxHex({ txid }: { txid: string }) {
    const response = await this.request.get<string>(`/tx/${txid}/hex`);
    return response.data;
  }

  public async getTxOutSpend({ txid, vout }: { txid: string; vout: number }) {
    const response = await this.request.get<OutSpend>(`/tx/${txid}/outspend/${vout}`);
    return OutSpend.parse(response.data);
  }

  public async getTxOutSpends({ txid }: { txid: string }) {
    const response = await this.request.get<OutSpend[]>(`/tx/${txid}/outspends`);
    return response.data.map((outSpend) => OutSpend.parse(outSpend));
  }

  public async getTransactionTimes({ txids }: { txids: string[] }) {
    const response = await this.request.post<number[]>('/v1/transaction-times', { txId: txids });
    return response.data as number[];
  }

  public async getBlock({ hash }: { hash: string }) {
    const response = await this.request.get<Block>(`/block/${hash}`);
    return Block.parse(response.data);
  }

  public async getBlockTxs({ hash, startIndex }: { hash: string; startIndex?: number }) {
    let url = `/block/${hash}/txs`;
    if (startIndex) {
      url += `/${startIndex}`;
    }
    const response = await this.request.get<Transaction[]>(url);
    return response.data.map((tx: unknown) => Transaction.parse(tx));
  }

  public async getBlockHeight({ height }: { height: number }) {
    const response = await this.request.get<string>(`/block-height/${height}`);
    return response.data;
  }

  public async getBlockHeader({ hash }: { hash: string }) {
    const response = await this.request.get<string>(`/block/${hash}/header`);
    return response.data;
  }

  public async getBlockTxids({ hash }: { hash: string }) {
    const response = await this.request.get<string[]>(`/block/${hash}/txids`);
    return response.data;
  }

  public async getBlocksTipHash() {
    const response = await this.request.get<string>('/blocks/tip/hash');
    return response.data;
  }
}


================================================
File: backend/src/core/bitcoin-api/provider/mempool.service.ts
================================================
import mempoolJS from '@cell-studio/mempool.js';
import * as Sentry from '@sentry/node';
import { FeesMempoolBlocks } from '@cell-studio/mempool.js/lib/interfaces/bitcoin/fees';
import { Block, OutSpend, RecommendedFees, Transaction, UTXO } from '../bitcoin-api.schema';
import { IBitcoinDataProvider } from '../bitcoin-api.interface';
import * as https from 'node:https';

export class MempoolService implements IBitcoinDataProvider {
  private mempool: ReturnType<typeof mempoolJS>;
  private defaultFee = 1;

  constructor(
    private baseURL: string,
    network: string,
  ) {
    const url = new URL(baseURL);
    const httpsAgent = new https.Agent({ keepAlive: true });
    this.mempool = mempoolJS({
      hostname: url.hostname,
      network,
      config: {
        httpsAgent,
      },
    });
  }

  public async getBaseURL(): Promise<string> {
    return this.baseURL;
  }

  // https://github.com/mempool/mempool/blob/dbd4d152ce831859375753fb4ca32ac0e5b1aff8/backend/src/api/fee-api.ts#L77
  private roundUpToNearest(value: number, nearest: number): number {
    return Math.ceil(value / nearest) * nearest;
  }

  // https://github.com/mempool/mempool/blob/dbd4d152ce831859375753fb4ca32ac0e5b1aff8/backend/src/api/fee-api.ts#L65
  private optimizeMedianFee(
    pBlock: FeesMempoolBlocks,
    nextBlock: FeesMempoolBlocks | undefined,
    previousFee?: number,
  ): number {
    const useFee = previousFee ? (pBlock.medianFee + previousFee) / 2 : pBlock.medianFee;
    if (pBlock.blockVSize <= 500000) {
      return this.defaultFee;
    }
    if (pBlock.blockVSize <= 950000 && !nextBlock) {
      const multiplier = (pBlock.blockVSize - 500000) / 500000;
      return Math.max(Math.round(useFee * multiplier), this.defaultFee);
    }
    return this.roundUpToNearest(useFee, this.defaultFee);
  }

  // https://github.com/mempool/mempool/blob/dbd4d152ce831859375753fb4ca32ac0e5b1aff8/backend/src/api/fee-api.ts#L22
  private async calculateRecommendedFee(): Promise<RecommendedFees> {
    const pBlocks = await this.mempool.bitcoin.fees.getFeesMempoolBlocks();
    const minimumFee = this.defaultFee;
    const defaultMinFee = this.defaultFee;

    if (!pBlocks.length) {
      return {
        fastestFee: defaultMinFee,
        halfHourFee: defaultMinFee,
        hourFee: defaultMinFee,
        economyFee: minimumFee,
        minimumFee: minimumFee,
      };
    }

    const firstMedianFee = this.optimizeMedianFee(pBlocks[0], pBlocks[1]);
    const secondMedianFee = pBlocks[1]
      ? this.optimizeMedianFee(pBlocks[1], pBlocks[2], firstMedianFee)
      : this.defaultFee;
    const thirdMedianFee = pBlocks[2]
      ? this.optimizeMedianFee(pBlocks[2], pBlocks[3], secondMedianFee)
      : this.defaultFee;

    let fastestFee = Math.max(minimumFee, firstMedianFee);
    let halfHourFee = Math.max(minimumFee, secondMedianFee);
    let hourFee = Math.max(minimumFee, thirdMedianFee);
    const economyFee = Math.max(minimumFee, Math.min(2 * minimumFee, thirdMedianFee));

    fastestFee = Math.max(fastestFee, halfHourFee, hourFee, economyFee);
    halfHourFee = Math.max(halfHourFee, hourFee, economyFee);
    hourFee = Math.max(hourFee, economyFee);

    return {
      fastestFee: fastestFee,
      halfHourFee: halfHourFee,
      hourFee: hourFee,
      economyFee: economyFee,
      minimumFee: minimumFee,
    };
  }

  public async getFeesRecommended() {
    try {
      const response = await this.mempool.bitcoin.fees.getFeesRecommended();
      return RecommendedFees.parse(response);
    } catch (e) {
      Sentry.withScope((scope) => {
        scope.captureException(e);
      });
      const fees = await this.calculateRecommendedFee();
      return RecommendedFees.parse(fees);
    }
  }

  public async getAddress({ address }: { address: string }) {
    const response = await this.mempool.bitcoin.addresses.getAddress({ address });
    return response;
  }

  public async getAddressTxsUtxo({ address }: { address: string }) {
    const response = await this.mempool.bitcoin.addresses.getAddressTxsUtxo({ address });
    return response.map((utxo) => UTXO.parse(utxo));
  }

  public async getAddressTxs({ address, afterTxid }: { address: string; afterTxid?: string }) {
    const response = await this.mempool.bitcoin.addresses.getAddressTxs({
      address,
      after_txid: afterTxid,
    });
    return response.map((tx) => Transaction.parse(tx));
  }

  public async getTx({ txid }: { txid: string }) {
    const response = await this.mempool.bitcoin.transactions.getTx({ txid });
    return Transaction.parse(response);
  }

  public async getTxHex({ txid }: { txid: string }) {
    const response = await this.mempool.bitcoin.transactions.getTxHex({ txid });
    return response;
  }

  public async getTxOutSpend({ txid, vout }: { txid: string; vout: number }) {
    const response = await this.mempool.bitcoin.transactions.getTxOutspend({ txid, vout });
    return OutSpend.parse(response);
  }

  public async getTxOutSpends({ txid }: { txid: string }) {
    const response = await this.mempool.bitcoin.transactions.getTxOutspends({ txid });
    return response.map((outSpend) => OutSpend.parse(outSpend));
  }

  public async getTransactionTimes({ txids }: { txids: string[] }) {
    const response = await this.mempool.bitcoin.transactions.getTransactionTimes({ txId: txids });
    return response;
  }

  public async getBlock({ hash }: { hash: string }) {
    const response = await this.mempool.bitcoin.blocks.getBlock({ hash });
    return Block.parse(response);
  }

  public async getBlockTxs({ hash, startIndex }: { hash: string; startIndex?: number }) {
    const response = await this.mempool.bitcoin.blocks.getBlockTxs({
      hash,
      start_index: startIndex,
    });
    // XXX: This is a workaround to fix the type issue, need to fix the type in the mempool.js
    return (response as unknown as Transaction[]).map((tx) => Transaction.parse(tx));
  }

  public async getBlockHeight({ height }: { height: number }) {
    const response = await this.mempool.bitcoin.blocks.getBlockHeight({ height });
    return response;
  }

  public async getBlockHeader({ hash }: { hash: string }) {
    const response = await this.mempool.bitcoin.blocks.getBlockHeader({ hash });
    return response;
  }

  public async getBlockTxids({ hash }: { hash: string }) {
    const response = await this.mempool.bitcoin.blocks.getBlockTxids({ hash });
    return response;
  }

  public async getBlocksTipHash() {
    const response = await this.mempool.bitcoin.blocks.getBlocksTipHash();
    return response;
  }
}


================================================
File: backend/src/core/blockchain/blockchain.factory.ts
================================================
import { Injectable, OnModuleDestroy } from '@nestjs/common';
import { BlockchainService } from './blockchain.service';
import { PrismaService } from '../database/prisma/prisma.service';

export class ChainServiceFactoryError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'BlockchainServiceFactoryError';
  }
}

@Injectable()
export class BlockchainServiceFactory implements OnModuleDestroy {
  private services: Map<number, BlockchainService> = new Map();

  constructor(private prismaService: PrismaService) { }

  public getService(chainId: number): BlockchainService {
    const chainPromise = this.prismaService.chain.findUnique({
      where: { id: chainId },
    });
    if (!this.services.has(chainId)) {
      this.services.set(chainId, new BlockchainService(chainId, chainPromise));
    }
    return this.services.get(chainId)!;
  }

  async onModuleDestroy() {
    for (const service of this.services.values()) {
      await service.close();
    }
  }
}


================================================
File: backend/src/core/blockchain/blockchain.interface.ts
================================================
export interface CellDep {
  dep_type: string;
  out_point: {
    index: string;
    tx_hash: string;
  };
}

export interface Input {
  previous_output: {
    index: string;
    tx_hash: string;
  };
  since: string;
}

export interface Script {
  args: string;
  code_hash: string;
  hash_type: string;
}

export interface Output {
  capacity: string;
  lock: Script;
  type: Script | null;
}

export interface Transaction {
  cell_deps: CellDep[];
  hash: string;
  header_deps: string[];
  inputs: Input[];
  outputs: Output[];
  outputs_data: string[];
  version: string;
  witnesses: string[];
}

export interface TransactionWithStatusResponse {
  cycles: string;
  fee: string | null;
  min_replace_fee: string | null;
  time_added_to_pool: string | null;
  transaction: Transaction;
  tx_status: {
    block_hash: string | null;
    block_number: string | null;
    reason: string | null;
    status: string;
  };
}

export interface Block {
  header: {
    compact_target: string;
    dao: string;
    epoch: string;
    extra_hash: string;
    hash: string;
    nonce: string;
    number: string;
    parent_hash: string;
    proposals_hash: string;
    timestamp: string;
    transactions_root: string;
    version: string;
  };
  proposals: string[];
  transactions: Transaction[];
  uncles: string[];
}

export interface BlockEconomicState {
  finalized_at: string;
  issuance: {
    primary: string;
    secondary: string;
  };
  miner_reward: {
    committed: string;
    primary: string;
    proposal: string;
    secondary: string;
  };
  txs_fee: string;
}

export interface SearchKey {
  script: {
    code_hash: string;
    hash_type: 'data' | 'type' | 'data1' | 'data2';
    args: string;
  };
  script_type: 'lock' | 'type';
}

export interface IndexerCell {
  block_number: string;
  io_index: string;
  io_type: string;
  tx_hash: string;
  tx_index: string;
}

export interface GetTransactionsResult {
  last_cursor: string;
  objects: IndexerCell[];
}

export interface Cell {
  block_number: string;
  out_point: {
    index: string;
    tx_hash: string;
  };
  output: Output;
  output_data: string;
  tx_index: string;
}

export interface GetCellsResult {
  last_cursor: string;
  objects: Cell[];
}


================================================
File: backend/src/core/blockchain/blockchain.module.ts
================================================
import { Global, Module } from '@nestjs/common';
import { BlockchainServiceFactory } from './blockchain.factory';

@Global()
@Module({
  providers: [BlockchainServiceFactory],
  exports: [BlockchainServiceFactory],
})
export class BlockchainModule { }


================================================
File: backend/src/core/blockchain/blockchain.service.ts
================================================
import { Logger } from '@nestjs/common';
import { Client as RpcWebsocketsClient } from 'rpc-websockets';
import { BI } from '@ckb-lumos/bi';
import {
  Block,
  BlockEconomicState,
  GetCellsResult,
  GetTransactionsResult,
  SearchKey,
  TransactionWithStatusResponse,
} from './blockchain.interface';
import { Cacheable } from 'src/decorators/cacheable.decorator';
import { ONE_DAY_MS } from 'src/common/date';
import { CKB_MIN_SAFE_CONFIRMATIONS } from 'src/constants';
import * as Sentry from '@sentry/nestjs';
import { Chain } from '@prisma/client';
import { PLimit } from 'src/decorators/plimit.decorator';

class WebsocketError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'WebsocketError';
  }
}

export class BlockchainService {
  private logger = new Logger(BlockchainService.name);

  private websocket: RpcWebsocketsClient;
  private websocketReady: Promise<void>;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectInterval = 5000;

  constructor(
    public chainId: number,
    private chainPromise: Promise<Chain | null>,
  ) {
    this.createConnection();

    process.on('exit', () => {
      this.close();
    });
  }

  private createConnection() {
    this.websocketReady = new Promise(async (resolve, reject) => {
      const chain = await this.chainPromise;
      if (!chain) {
        reject(new Error(`Chain with id ${this.chainId} not found`));
        return;
      }

      this.websocket = new RpcWebsocketsClient(chain.ws);
      this.websocket.on('open', () => {
        this.logger.log(`WebSocket connection established for chain ${this.chainId}`);
        this.reconnectAttempts = 0;
        resolve();
      });

      this.websocket.on('error', (error) => {
        this.logger.error(error.message);
        const webSocketError = new WebsocketError(error.message);
        webSocketError.stack = error.stack;
        this.websocketReady = Promise.reject(webSocketError);
        Sentry.captureException(webSocketError);
      });

      this.websocket.on('close', () => {
        const error = new WebsocketError('WebSocket connection closed');
        this.logger.warn(error.message);
        this.websocketReady = Promise.reject(error);
        this.handleReconnection();
      });
    });
  }

  @PLimit({ concurrency: 200 })
  private async call(method: string, params: any[]): Promise<any> {
    await this.websocketReady;
    return this.websocket.call(method, params);
  }

  private handleReconnection() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      this.logger.log(
        `Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`,
      );
      setTimeout(() => this.createConnection(), this.reconnectInterval);
    } else {
      const error = new WebsocketError('Max reconnection attempts reached');
      this.logger.error(error.message);
      Sentry.captureException(error);
    }
  }

  public async close(): Promise<void> {
    if (this.websocket) {
      this.websocket.close();
    }
  }

  private async isSafeConfirmations(blockNumber: string): Promise<boolean> {
    const tipBlockNumber = await this.getTipBlockNumber();
    return BI.from(blockNumber).lt(BI.from(tipBlockNumber).sub(CKB_MIN_SAFE_CONFIRMATIONS));
  }

  @Cacheable({
    namespace: 'BlockchainService',
    key: (txHash: string, withData: boolean, withWitness: boolean) => {
      let key = `getTransaction:${txHash}`;
      if (withData) {
        key += ':withData';
      }
      if (withWitness) {
        key += ':withWitness';
      }
      return key;
    },
    ttl: ONE_DAY_MS,
    shouldCache: async (tx: TransactionWithStatusResponse, that: BlockchainService) => {
      if (tx.tx_status.status !== 'committed' || !tx.tx_status.block_number) {
        return false;
      }
      return that.isSafeConfirmations(tx.tx_status.block_number);
    },
  })
  public async getTransaction(
    txHash: string,
    withData: boolean = false,
    withWitness: boolean = false,
  ): Promise<TransactionWithStatusResponse> {
    await this.websocketReady;
    this.logger.debug(`get_transaction - txHash: ${txHash}`);
    const response = await this.call('get_transaction', [txHash]);
    const tx = response as TransactionWithStatusResponse;
    // XXX: we don't need these fields by default, remove them to save cache/memory space
    if (!withData) {
      tx.transaction.outputs_data = [];
    }
    if (!withWitness) {
      tx.transaction.witnesses = [];
    }
    return tx;
  }

  @Cacheable({
    namespace: 'BlockchainService',
    key: (blockHash: string, withTxData: boolean, withTxWitness: boolean) => {
      let key = `getBlock:${blockHash}`;
      if (withTxData) {
        key += ':withTxData';
      }
      if (withTxWitness) {
        key += ':withTxWitness';
      }
      return key;
    },
    ttl: ONE_DAY_MS,
    shouldCache: async (block: Block, that: BlockchainService) => {
      if (!block?.header) {
        return false;
      }
      const { number } = block.header;
      return that.isSafeConfirmations(number);
    },
  })
  public async getBlock(
    blockHash: string,
    withTxData: boolean = false,
    withTxWitness: boolean = false,
  ): Promise<Block> {
    await this.websocketReady;
    this.logger.debug(`get_block - blockHash: ${blockHash}`);
    const response = await this.call('get_block', [blockHash]);
    const block = response as Block;
    if (!withTxData) {
      block.transactions = block.transactions.map((tx) => {
        tx.outputs_data = [];
        return tx;
      });
    }
    if (!withTxWitness) {
      block.transactions = block.transactions.map((tx) => {
        tx.witnesses = [];
        return tx;
      });
    }
    return block;
  }

  @Cacheable({
    namespace: 'BlockchainService',
    key: (blockNumber: string, withTxData: boolean, withTxWitness: boolean) => {
      let key = `getBlockByNumber:${blockNumber}`;
      if (withTxData) {
        key += ':withTxData';
      }
      if (withTxWitness) {
        key += ':withTxWitness';
      }
      return key;
    },
    ttl: ONE_DAY_MS,
    shouldCache: async (block: Block, that: BlockchainService) => {
      const { number } = block.header;
      return that.isSafeConfirmations(number);
    },
  })
  public async getBlockByNumber(
    blockNumber: string,
    withTxData: boolean = false,
    withTxWitness: boolean = false,
  ): Promise<Block> {
    await this.websocketReady;
    this.logger.debug(`get_block_by_number - blockNumber: ${blockNumber}`);
    const response = await this.call('get_block_by_number', [BI.from(blockNumber).toHexString()]);
    const block = response as Block;
    if (!withTxData) {
      block.transactions = block.transactions.map((tx) => {
        tx.outputs_data = [];
        return tx;
      });
    }
    if (!withTxWitness) {
      block.transactions = block.transactions.map((tx) => {
        tx.witnesses = [];
        return tx;
      });
    }
    return block;
  }

  @Cacheable({
    namespace: 'BlockchainService',
    key: (blockHash: string) => `getBlockEconomicState:${blockHash}`,
    ttl: ONE_DAY_MS,
  })
  public async getBlockEconomicState(blockHash: string): Promise<BlockEconomicState> {
    await this.websocketReady;
    this.logger.debug(`get_block_economic_state - blockHash: ${blockHash}`);
    const blockEconomicState = await this.call('get_block_economic_state', [blockHash]);
    return blockEconomicState as BlockEconomicState;
  }

  @Cacheable({
    namespace: 'BlockchainService',
    key: 'getTipBlockNumber',
    // just cache for 1 second to avoid too many requests
    ttl: 1000,
  })
  public async getTipBlockNumber(): Promise<number> {
    await this.websocketReady;
    this.logger.debug('get_tip_block_number');
    const tipBlockNumber = await this.call('get_tip_block_number', []);
    return BI.from(tipBlockNumber).toNumber();
  }

  @Cacheable({
    namespace: 'BlockchainService',
    key: (searchKey: SearchKey, order: 'asc' | 'desc', limit: string, after?: string) =>
      `getTransactions:${JSON.stringify(searchKey)}:${order}:${limit}:${after}`,
    ttl: 10_000,
  })
  public async getTransactions(
    searchKey: SearchKey,
    order: 'asc' | 'desc',
    limit: string,
    after?: string,
  ): Promise<GetTransactionsResult> {
    await this.websocketReady;
    this.logger.debug(
      `get_transactions - searchKey: ${JSON.stringify(searchKey)}, order: ${order}, limit: ${limit}, after: ${after}`,
    );
    const result = await this.call('get_transactions', [searchKey, order, limit, after]);
    const transactions = result as GetTransactionsResult;
    return transactions;
  }

  @Cacheable({
    namespace: 'BlockchainService',
    key: (searchKey: SearchKey, order: 'asc' | 'desc', limit: string, after?: string) =>
      `getCells:${JSON.stringify(searchKey)}:${order}:${limit}:${after}`,
    ttl: 10_000,
  })
  public async getCells(
    searchKey: SearchKey,
    order: 'asc' | 'desc',
    limit: string,
    after?: string,
    withData: boolean = false,
  ): Promise<GetCellsResult> {
    await this.websocketReady;
    this.logger.debug(
      `get_cells - searchKey: ${JSON.stringify(searchKey)}, order: ${order}, limit: ${limit}, after: ${after}`,
    );
    const result = await this.call('get_cells', [searchKey, order, limit, after]);
    const cells = result as GetCellsResult;
    cells.objects = cells.objects.map((cell) => {
      if (!withData) {
        cell.output_data = '';
      }
      return cell;
    });
    return cells;
  }
}


================================================
File: backend/src/core/ckb-explorer/ckb-explorer.health.ts
================================================
import { Injectable } from '@nestjs/common';
import { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';
import { CkbExplorerService } from './ckb-explorer.service';
import * as Sentry from '@sentry/nestjs';

@Injectable()
export class CkbExplorerHealthIndicator extends HealthIndicator {
  constructor(private ckbExplorerService: CkbExplorerService) {
    super();
  }

  public async isHealthy(): Promise<HealthIndicatorResult> {
    try {
      const now = performance.now();
      const stats = await this.ckbExplorerService.getStatistics();
      const isHealthy = !!stats.data.attributes.tip_block_number;
      const result = this.getStatus('ckb-explorer', isHealthy, {
        stats: stats.data.attributes,
        latency: performance.now() - now,
      });
      if (isHealthy) {
        return result;
      }
      throw new HealthCheckError('CkbExplorerService failed', result);
    } catch (e) {
      Sentry.captureException(e);
      throw new HealthCheckError('CkbExplorerService failed', e);
    }
  }
}


================================================
File: backend/src/core/ckb-explorer/ckb-explorer.interface.ts
================================================
import { CellDep, Script } from '../ckb-rpc/ckb-rpc.interface';

export enum BlockSortType {
  HeightAsc = 'height.asc',
  HeightDesc = 'height.desc',
  TransactionsAsc = 'transactions.asc',
  TransactionsDesc = 'transactions.desc',
  RewardAsc = 'reward.asc',
  RewardDesc = 'reward.desc',
}

export enum TransactionSortType {
  NumberAsc = 'number.asc',
  NumberDesc = 'number.desc',
  TimeAsc = 'time.asc',
  TimeDesc = 'time.desc',
}

export enum AddressTransactionSortType {
  TimeAsc = 'time.asc',
  TimeDesc = 'time.desc',
}

export enum TransactionListSortType {
  TransactionsAsc = 'transactions.asc',
  TransactionsDesc = 'transactions.desc',
  AddressCountAsc = 'address_count.asc',
  AddressCountDesc = 'address_count.desc',
  CreatedTimeAsc = 'created_time.asc',
  CreatedTimeDesc = 'created_time.desc',
}

// https://github.com/nervosnetwork/ckb-explorer/blob/f2b9823e1a1ece1b74901ca3090565d62b251dcd/app/workers/bitcoin_transaction_detect_worker.rb#L123C4-L137C8
export enum LeapDirection {
  In = 'in',
  LeapOutBtc = 'leapoutBTC',
  WithinBtc = 'withinBTC',
}

export enum TransferStep {
  Isomorphic = 'isomorphic',
  Unlock = 'unlock',
}

export interface PaginationMeta {
  total: number;
  page_size: number;
}

export interface CkbExplorerResponse<T, IsPaginated extends boolean = false> {
  data: T;
  meta: IsPaginated extends true ? PaginationMeta : never;
}

export type NonPaginatedResponse<T extends object> = CkbExplorerResponse<
  {
    id: string;
    type: string;
    attributes: T;
  },
  false
>;

export type PaginatedResponse<T extends object> = CkbExplorerResponse<
  {
    id: string;
    type: string;
    attributes: T;
  }[],
  true
>;

export interface BlockList {
  miner_hash: string;
  number: string;
  timestamp: string;
  reward: string;
  transactions_count: string;
  live_cell_changes: string;
}

export interface Block {
  block_hash: string;
  uncle_block_hashes: string;
  miner_hash: string;
  transactions_root: string;
  reward_status: string;
  received_tx_fee_status: string;
  miner_message: string;
  number: string;
  start_number: string;
  length: string;
  version: string;
  proposals_count: string;
  uncles_count: string;
  timestamp: string;
  reward: string;
  cell_consumed: string;
  total_transaction_fee: string;
  transactions_count: string;
  total_cell_capacity: string;
  received_tx_fee: string;
  epoch: string;
  block_index_in_epoch: string;
  nonce: string;
  difficulty: string;
  miner_reward: string;
  size: number;
  largest_block_in_epoch: number;
  largest_block: number;
  cycles: number;
  max_cycles_in_epoch: number;
  max_cycles: number;
}

export interface DisplayInput {
  id: string;
  from_cellbase: boolean;
  capacity: string;
  occupied_capacity: string;
  address_hash: string;
  generated_tx_hash: string;
  target_block_number?: string;

  // XUDT
  cell_type: string;
  xudt_info: {
    symbol: string;
    amount: string;
    decimal: string;
    type_hash: string;
    published: boolean;
  };
}

export interface DisplayOutput {
  id: string;
  capacity: string;
  occupied_capacity: string;
  address_hash: string;
  target_block_number: string;
  base_reward: string;
  commit_reward: string;
  proposal_reward: string;
  secondary_reward: string;
  status: 'live' | 'dead';
  consumed_tx_hash: string;
  generated_tx_hash: string;
  cell_index: string;

  // XUDT
  cell_type: string;
  xudt_info: {
    symbol: string;
    amount: string;
    decimal: string;
    type_hash: string;
    published: boolean;
  };
  omiga_inscription_info: {
    symbol: string;
    name: string;
    decimal: string;
    amount: string;
  };
}

export interface Transaction {
  is_cellbase: boolean;
  transaction_hash: string;
  block_number: string;
  block_timestamp: string;
  display_inputs_count: number;
  display_outputs_count: number;
  display_inputs: DisplayInput[];
  display_outputs: DisplayOutput[];
  income: string;
  is_rgb_transaction: boolean;
  is_btc_time_lock: boolean;
  rgb_txid: string;
  rgb_transfer_step: null;
  created_at: string;
  create_timestamp: string;
}

export interface DetailTransaction extends Transaction {
  version: string;
  cell_deps: CellDep[];
  witnesses: string[];
  transaction_fee: string;
  bytes: number;
  largest_tx_in_epoch: number;
  largest_tx: number;
  cycles: number;
  max_cycles_in_epoch: number;
  max_cycles: number;
  // TODO: replace with actual literal status, e.g. "committed"
  tx_status: string;
}

export interface RgbppTransaction {
  id: number;
  tx_hash: string;
  block_id: number;
  block_number: number;
  block_timestamp: number;
  leap_direction: LeapDirection;
  transfer_step: TransferStep;
  rgb_cell_changes: number;
  rgb_txid: string;
}

export interface TransactionListItem {
  transaction_hash: string;
  block_number: string;
  block_timestamp: string;
  capacity_involved: string;
  live_cell_changes: string;
}

export enum XUDTTag {
  RgbppCompatible = 'rgbpp-compatible',
  Layer1Asset = 'layer-1-asset',
  Layer2Asset = 'layer-2-asset',
  SupplyLimited = 'supply-limited',
  SupplyUnlimited = 'supply-unlimited',
  Suspicious = 'suspicious',
  Invalid = 'invalid',
}

export interface XUDT {
  symbol: string;
  full_name: string;
  icon_file: string | null;
  published: boolean;
  description: string | null;
  type_hash: string;
  type_script: {
    args: string;
    code_hash: string;
    hash_type: string;
  };
  issuer_address: string;
  udt_type: string;
  operator_website: string | null;
  email: string | null;
  total_amount: string;
  addresses_count: string;
  decimal: string;
  h24_ckb_transactions_count: string;
  created_at: string;
  xudt_tags: XUDTTag[];
}

// https://github.com/nervosnetwork/ckb-explorer-frontend/blob/develop/src/models/Address/index.ts
export interface LockInfo {
  status: 'locked' | 'unlocked';
  epoch_number: string;
  epoch_index: string;
  estimated_unlock_time: string;
}
export enum AddressType {
  Address = 'Address',
  LockHash = 'LockHash',
  Unknown = 'Unknown',
}
export interface AddressInfo {
  addressHash: string;
  bitcoin_address_hash?: string;
  lockHash: string;
  balance: string;
  balance_occupied: string;
  transactions_count: string;
  lock_script: Script;
  pending_reward_blocks_count: string;
  type: AddressType;
  dao_deposit: string;
  interest: string;
  dao_compensation: string;
  lock_info: LockInfo;
  live_cells_count: string;
  mined_blocks_count: string;
  is_special: boolean;
  special_address: string;
  // TODO: describe this type
  udt_accounts?: unknown[];
}

// https://github.com/nervosnetwork/ckb-explorer-frontend/blob/develop/src/services/ExplorerService/types.ts#L331-L337
export interface RgbppDigest {
  txid: string;
  commitment: string;
  confirmations: number;
  leap_direction: LeapDirection | null;
  transfer_step: TransferStep | null;
  // TODO: describe this type
  transfers: unknown[];
}

// https://github.com/nervosnetwork/ckb-explorer-frontend/blob/develop/src/services/ExplorerService/fetcher.ts#L524-L539
export interface RgbppCells {
  [outputAsArrayInString: string]: NonPaginatedResponse<LiveCell[]>;
}
export interface LiveCell {
  cell_id: string;
  cell_type: string;
  tx_hash: string;
  cell_index: number;
  type_hash: string;
  data: string;
  capacity: string;
  occupied_capacity: string;
  block_timestamp: string;
  block_number: string;
  type_script: Script;
  lock_script: Script;
  extra_info: {
    type: 'ckb' | 'udt' | 'nrc_721' | 'm_nft';
    collection: {
      type_hash: string;
    };
    symbol: string;
    amount: string;
    decimal: string;
    type_hash: string;
    published: boolean;
    className: string;
    token_id: string;
  };
}

// https://github.com/nervosnetwork/ckb-explorer-frontend/blob/develop/src/services/ExplorerService/fetcher.ts#L376-L390
export interface Statistics {
  tip_block_number: string;
  average_block_time: string;
  current_epoch_difficulty: string;
  hash_rate: string;
  epoch_info: {
    epoch_number: string;
    epoch_length: string;
    index: string;
  };
  estimated_epoch_time: string;
  transactions_last_24hrs: string;
  transactions_count_per_minute: string;
  reorg_started_at: string | null;
}

// https://github.com/nervosnetwork/ckb-explorer-frontend/blob/develop/src/services/ExplorerService/fetcher.ts#L1178-L1199
export interface TransactionFeesStatistic {
  transaction_fee_rates: TransactionFeeRate[];
  pending_transaction_fee_rates: PendingTransactionFeeRate[];
  last_n_days_transaction_fee_rates: LastNDaysTransactionFeeRate[];
}
export interface TransactionFeeRate {
  id: number;
  timestamp: number;
  fee_rate: number;
  confirmation_time: number;
}
export interface PendingTransactionFeeRate {
  id: number;
  fee_rate: number;
}
export interface LastNDaysTransactionFeeRate {
  date: string;
  feeRate: string;
}


================================================
File: backend/src/core/ckb-explorer/ckb-explorer.module.ts
================================================
import { forwardRef, Global, Module } from '@nestjs/common';
import { CkbExplorerService } from './ckb-explorer.service';
import { CkbRpcModule } from '../ckb-rpc/ckb-rpc.module';
import { CkbExplorerHealthIndicator } from './ckb-explorer.health';

@Global()
@Module({
  imports: [forwardRef(() => CkbRpcModule)],
  providers: [CkbExplorerService, CkbExplorerHealthIndicator],
  exports: [CkbExplorerService, CkbExplorerHealthIndicator],
})
export class CkbExplorerModule {}


================================================
File: backend/src/core/ckb-explorer/ckb-explorer.service.ts
================================================
import { Inject, Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios, { Axios } from 'axios';
import { Env } from 'src/env';
import {
  AddressInfo,
  AddressTransactionSortType,
  Block,
  CkbExplorerResponse,
  DetailTransaction,
  NonPaginatedResponse,
  PaginatedResponse,
  RgbppTransaction,
  Transaction,
  TransactionSortType,
  XUDT,
  XUDTTag,
  Statistics,
  TransactionFeesStatistic,
  TransactionListSortType,
} from './ckb-explorer.interface';
import { ONE_DAY_MS } from 'src/common/date';
import { CACHE_MANAGER, Cache } from '@nestjs/cache-manager';
import { Cacheable } from 'src/decorators/cacheable.decorator';
import { CkbRpcWebsocketService } from '../ckb-rpc/ckb-rpc-websocket.service';
import { BI } from '@ckb-lumos/bi';
import { CKB_MIN_SAFE_CONFIRMATIONS } from 'src/constants';

type BasePaginationParams = {
  page?: number;
  pageSize?: number;
};

export type GetAddressParams = BasePaginationParams & {
  address: string;
};

export type GetAddressTransactionsParams = BasePaginationParams & {
  address: string;
  sort?: AddressTransactionSortType;
};

type GetRgbppTransactionsParams = BasePaginationParams & {
  sort?: TransactionSortType;
  leapDirection?: 'in' | 'out';
};

type GetXUDTListParams = BasePaginationParams & {
  symbol?: string;
  sort?: TransactionListSortType;
  tags?: XUDTTag[];
};

type GetXUDTTransactionsParams = BasePaginationParams & {
  txHash?: string;
  addressHash?: string;
};

@Injectable()
export class CkbExplorerService {
  private logger = new Logger(CkbExplorerService.name);
  private request: Axios;

  constructor(
    private configService: ConfigService<Env>,
    private ckbRpcService: CkbRpcWebsocketService,
    @Inject(CACHE_MANAGER) protected cacheManager: Cache,
  ) {
    this.request = axios.create({
      baseURL: this.configService.get('CKB_EXPLORER_API_URL'),
      headers: {
        'Content-Type': 'application/vnd.api+json',
        Accept: 'application/vnd.api+json',
      },
    });
    this.request.interceptors.request.use((request) => {
      this.logger.debug(`${request.method?.toUpperCase()} ${request.url}`);
      return request;
    });
  }

  private async isSafeConfirmations(blockNumber: string): Promise<boolean> {
    try {
      const tipBlockNumber = await this.ckbRpcService.getTipBlockNumber();
      return BI.from(blockNumber).lt(BI.from(tipBlockNumber).sub(CKB_MIN_SAFE_CONFIRMATIONS));
    } catch {
      return false;
    }
  }

  @Cacheable({
    namespace: 'CkbExplorerService',
    key: (address: string, page = 1, pageSize = 10) => `getAddress:${address},${page},${pageSize}`,
    ttl: 10_000,
  })
  public async getAddress({
    address,
    page = 1,
    pageSize = 10,
  }: GetAddressParams): Promise<PaginatedResponse<AddressInfo>> {
    const response = await this.request.get(`/v1/addresses/${address}`, {
      params: {
        page,
        pageSize,
      },
    });
    return response.data;
  }

  @Cacheable({
    namespace: 'CkbExplorerService',
    key: (address: string, sort, page = 1, pageSize = 10) =>
      `getAddressTransactions:${address},${sort},${page},${pageSize}`,
    ttl: 10_000,
  })
  public async getAddressTransactions({
    address,
    sort,
    page = 1,
    pageSize = 10,
  }: GetAddressTransactionsParams): Promise<PaginatedResponse<Transaction>> {
    const response = await this.request.get(`/v1/address_transactions/${address}`, {
      params: {
        sort,
        page,
        pageSize,
      },
    });
    return response.data;
  }

  @Cacheable({
    namespace: 'CkbExplorerService',
    key: (heightOrHash: string) => `getBlock:${heightOrHash}`,
    ttl: ONE_DAY_MS,
    shouldCache: async (block: NonPaginatedResponse<Block>, that: CkbExplorerService) => {
      const { number } = block.data.attributes;
      return that.isSafeConfirmations(number);
    },
  })
  public async getBlock(heightOrHash: string): Promise<NonPaginatedResponse<Block>> {
    const response = await this.request.get(`/v1/blocks/${heightOrHash}`);
    return response.data;
  }

  @Cacheable({
    namespace: 'CkbExplorerService',
    key: (address: string, leapDirection, page = 1, pageSize = 10) =>
      `getRgbppTransactions:${address},${page},${pageSize},${leapDirection}`,
    ttl: 10_000,
  })
  public async getRgbppTransactions({
    sort = TransactionSortType.NumberDesc,
    page = 1,
    pageSize = 10,
    leapDirection,
  }: GetRgbppTransactionsParams = {}): Promise<
    CkbExplorerResponse<
      {
        ckb_transactions: RgbppTransaction[];
      },
      true
    >
  > {
    const params = new URLSearchParams();
    params.append('page', page.toString());
    params.append('page_size', pageSize.toString());
    params.append('sort', sort);
    if (leapDirection) {
      params.append('leap_direction', leapDirection);
    }
    const response = await this.request.get(`/v2/rgb_transactions?${params.toString()}`);
    return response.data;
  }

  public async getAddressRgbppCells({
    address,
    sort,
    page = 1,
    pageSize = 10,
  }: GetAddressTransactionsParams): Promise<PaginatedResponse<AddressInfo>> {
    const response = await this.request.get(`/v2/bitcoin_addresses/${address}/rgb_cells`, {
      params: {
        sort,
        page,
        pageSize,
      },
    });
    return response.data;
  }

  @Cacheable({
    namespace: 'CkbExplorerService',
    key: (txHash: string) => `getTransaction:${txHash}`,
    ttl: ONE_DAY_MS,
    shouldCache: async (tx: NonPaginatedResponse<DetailTransaction>, that: CkbExplorerService) => {
      const { tx_status, block_number } = tx.data.attributes;
      const isSafeConfirmations = await that.isSafeConfirmations(block_number);
      return tx_status === 'committed' && isSafeConfirmations;
    },
  })
  public async getTransaction(txHash: string): Promise<NonPaginatedResponse<DetailTransaction>> {
    const response = await this.request.get(`/v1/transactions/${txHash}`);
    return response.data;
  }

  @Cacheable({
    namespace: 'CkbExplorerService',
    key: (address: string, tags = [], sort, page = 1, pageSize = 10) =>
      `getXUDTList:${address},${tags.join('|')},${sort},${page},${pageSize}`,
    ttl: 10_000,
  })
  public async getXUDTList({
    symbol,
    tags,
    sort,
    page = 1,
    pageSize = 10,
  }: GetXUDTListParams): Promise<PaginatedResponse<XUDT>> {
    const params = new URLSearchParams();
    params.append('page', page.toString());
    params.append('page_size', pageSize.toString());
    if (symbol) {
      params.append('symbol', symbol);
    }
    if (tags) {
      params.append('tags', tags.join(','));
    }
    if (sort) {
      params.append('sort', sort);
    }
    const response = await this.request.get(`/v1/xudts?${params.toString()}`);
    return response.data;
  }

  public async getXUDT(typeHash: string): Promise<NonPaginatedResponse<XUDT>> {
    const response = await this.request.get(`/v1/xudts/${typeHash}`);
    return response.data;
  }

  @Cacheable({
    namespace: 'CkbExplorerService',
    key: (typeHash: string, { page = 1, pageSize = 10, txHash, addressHash }) =>
      `getXUDTTransactions:${typeHash},${page},${pageSize},${txHash},${addressHash}`,
    ttl: 10_000,
  })
  public async getXUDTTransactions(
    typeHash: string,
    { page = 1, pageSize = 10, txHash, addressHash }: GetXUDTTransactionsParams = {},
  ): Promise<PaginatedResponse<Transaction>> {
    const params = new URLSearchParams();
    params.append('page', page.toString());
    params.append('page_size', pageSize.toString());
    if (txHash) {
      params.append('tx_hash', txHash);
    }
    if (addressHash) {
      params.append('address_hash', addressHash);
    }
    const response = await this.request.get(
      `/v1/udt_transactions/${typeHash}?${params.toString()}`,
    );
    return response.data;
  }

  @Cacheable({
    namespace: 'CkbExplorerService',
    key: 'getStatistics',
    // Same as the ckb explorer frontend
    // https://github.com/nervosnetwork/ckb-explorer-frontend/blob/develop/src/constants/common.ts#L3
    ttl: 4_000,
  })
  public async getStatistics(): Promise<NonPaginatedResponse<Statistics>> {
    const response = await this.request.get('/v1/statistics');
    return response.data;
  }

  public async getTransactionFeesStatistic(): Promise<TransactionFeesStatistic> {
    const response = await this.request.get('/v2/statistics/transaction_fees');
    return response.data;
  }
}


================================================
File: backend/src/core/ckb-rpc/ckb-rpc-websocket.service.ts
================================================
import { Injectable } from '@nestjs/common';
import { BlockchainServiceFactory } from '../blockchain/blockchain.factory';
import { CKB_CHAIN_ID } from 'src/constants';
import { BlockchainService } from '../blockchain/blockchain.service';
import {
  Block,
  BlockEconomicState,
  GetCellsResult,
  GetTransactionsResult,
  SearchKey,
  TransactionWithStatusResponse,
} from './ckb-rpc.interface';

@Injectable()
export class CkbRpcWebsocketService {
  private service: BlockchainService;

  constructor(private blockchainServiceFactory: BlockchainServiceFactory) {
    this.service = this.blockchainServiceFactory.getService(CKB_CHAIN_ID);
  }

  public async getTransaction(txHash: string): Promise<TransactionWithStatusResponse> {
    return this.service.getTransaction(txHash);
  }

  public async getBlock(blockHash: string): Promise<Block> {
    return this.service.getBlock(blockHash);
  }

  public async getBlockByNumber(blockNumber: string): Promise<Block> {
    return this.service.getBlockByNumber(blockNumber);
  }

  public async getBlockEconomicState(blockHash: string): Promise<BlockEconomicState> {
    return this.service.getBlockEconomicState(blockHash);
  }

  public async getTipBlockNumber(): Promise<number> {
    return this.service.getTipBlockNumber();
  }

  public async getTransactions(
    searchKey: SearchKey,
    order: 'asc' | 'desc',
    limit: string,
    after?: string,
  ): Promise<GetTransactionsResult> {
    return this.service.getTransactions(searchKey, order, limit, after);
  }

  public async getCells(
    searchKey: SearchKey,
    order: 'asc' | 'desc',
    limit: string,
    after?: string,
  ): Promise<GetCellsResult> {
    return this.service.getCells(searchKey, order, limit, after);
  }
}


================================================
File: backend/src/core/ckb-rpc/ckb-rpc.health.ts
================================================
import { Injectable } from '@nestjs/common';
import { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';
import { CkbRpcWebsocketService } from './ckb-rpc-websocket.service';
import * as Sentry from '@sentry/nestjs';

export enum CkbRpcHealthIndicatorKey {
  Websocket = 'ckb-rpc-websocket',
}

@Injectable()
export class CkbRpcHealthIndicator extends HealthIndicator {
  constructor(private ckbRpcWebsocketService: CkbRpcWebsocketService) {
    super();
  }

  public async isHealthy(key: CkbRpcHealthIndicatorKey): Promise<HealthIndicatorResult> {
    try {
      let isHealthy = false;
      let result: HealthIndicatorResult = {};

      switch (key) {
        case CkbRpcHealthIndicatorKey.Websocket:
          const { isHealthy: websocketIsHealthy, result: websocketResult } =
            await this.isWebsocketHealthy();
          isHealthy = websocketIsHealthy;
          result = websocketResult;
          break;
        default:
          throw new HealthCheckError(`Unknown health indicator key`, key);
      }

      if (isHealthy) {
        return result;
      }
      throw new HealthCheckError('CkbRpcWebsocketService failed', result);
    } catch (e) {
      Sentry.captureException(e);
      throw new HealthCheckError('CkbRpcWebsocketService failed', e);
    }
  }

  private async isWebsocketHealthy(): Promise<{
    isHealthy: boolean;
    result: HealthIndicatorResult;
  }> {
    const now = performance.now();
    const tipBlockNumber = await this.ckbRpcWebsocketService.getTipBlockNumber();
    const isHealthy = !!tipBlockNumber;
    const result = this.getStatus('ckb-rpc.websocket', isHealthy, {
      tipBlockNumber,
      latency: performance.now() - now,
    });
    return {
      isHealthy,
      result,
    };
  }
}


================================================
File: backend/src/core/ckb-rpc/ckb-rpc.interface.ts
================================================
export interface CellDep {
  dep_type: string;
  out_point: {
    index: string;
    tx_hash: string;
  };
}

export interface Input {
  previous_output: {
    index: string;
    tx_hash: string;
  };
  since: string;
}

export interface Script {
  args: string;
  code_hash: string;
  hash_type: string;
}

export interface Output {
  capacity: string;
  lock: Script;
  type: Script | null;
}

export interface Transaction {
  cell_deps: CellDep[];
  hash: string;
  header_deps: string[];
  inputs: Input[];
  outputs: Output[];
  outputs_data: string[];
  version: string;
  witnesses: string[];
}

export interface TransactionWithStatusResponse {
  cycles: string;
  fee: string | null;
  min_replace_fee: string | null;
  time_added_to_pool: string | null;
  transaction: Transaction;
  tx_status: {
    block_hash: string | null;
    block_number: string | null;
    reason: string | null;
    status: string;
  };
}

export interface Block {
  header: {
    compact_target: string;
    dao: string;
    epoch: string;
    extra_hash: string;
    hash: string;
    nonce: string;
    number: string;
    parent_hash: string;
    proposals_hash: string;
    timestamp: string;
    transactions_root: string;
    version: string;
  };
  proposals: string[];
  transactions: Transaction[];
  uncles: string[];
}

export interface BlockEconomicState {
  finalized_at: string;
  issuance: {
    primary: string;
    secondary: string;
  };
  miner_reward: {
    committed: string;
    primary: string;
    proposal: string;
    secondary: string;
  };
  txs_fee: string;
}

export interface SearchKey {
  script: {
    code_hash: string;
    hash_type: 'data' | 'type' | 'data1' | 'data2';
    args: string;
  };
  script_type: 'lock' | 'type';
}

export interface IndexerCell {
  block_number: string;
  io_index: string;
  io_type: string;
  tx_hash: string;
  tx_index: string;
}

export interface GetTransactionsResult {
  last_cursor: string;
  objects: IndexerCell[];
}

export interface Cell {
  block_number: string;
  out_point: {
    index: string;
    tx_hash: string;
  };
  output: Output;
  output_data: string;
  tx_index: string;
}

export interface GetCellsResult {
  last_cursor: string;
  objects: Cell[];
}


================================================
File: backend/src/core/ckb-rpc/ckb-rpc.module.ts
================================================
import { Global, Module } from '@nestjs/common';
import { CkbRpcHealthIndicator } from './ckb-rpc.health';
import { CkbRpcWebsocketService } from './ckb-rpc-websocket.service';

@Global()
@Module({
  providers: [CkbRpcWebsocketService, CkbRpcHealthIndicator],
  exports: [CkbRpcWebsocketService, CkbRpcHealthIndicator],
})
export class CkbRpcModule {}


================================================
File: backend/src/core/database/database.health.ts
================================================
import { Injectable } from '@nestjs/common';
import { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';
import * as Sentry from '@sentry/nestjs';
import { PrismaService } from './prisma/prisma.service';

@Injectable()
export class DatabaseHealthIndicator extends HealthIndicator {
  constructor(private prismaService: PrismaService) {
    super();
  }

  public async isHealthy(): Promise<HealthIndicatorResult> {
    try {
      const now = performance.now();
      await this.prismaService.$queryRaw`SELECT 1`;
      return this.getStatus('database.prisma', true, {
        latency: performance.now() - now,
      });
    } catch (e) {
      Sentry.captureException(e);
      throw new HealthCheckError('BitcoinApiService failed', e);
    }
  }
}


================================================
File: backend/src/core/database/database.module.ts
================================================
import { Global, Module } from '@nestjs/common';
import { PrismaModule } from './prisma/prisma.module';
import { DatabaseHealthIndicator } from './database.health';

@Global()
@Module({
  imports: [PrismaModule],
  providers: [DatabaseHealthIndicator],
  exports: [DatabaseHealthIndicator],
})
export class DatabaseModule {}


================================================
File: backend/src/core/database/prisma/prisma.module.ts
================================================
import { Global, Module } from '@nestjs/common';
import { PrismaService } from './prisma.service';

@Global()
@Module({
  providers: [PrismaService],
  exports: [PrismaService],
})
export class PrismaModule {}


================================================
File: backend/src/core/database/prisma/prisma.service.ts
================================================
import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }
}


================================================
File: backend/src/core/health/health.controller.ts
================================================
import { Controller, Get } from '@nestjs/common';
import { HealthCheckService, HealthCheck, HttpHealthIndicator } from '@nestjs/terminus';
import { CkbRpcHealthIndicator, CkbRpcHealthIndicatorKey } from '../ckb-rpc/ckb-rpc.health';
import { BitcoinApiHealthIndicator } from '../bitcoin-api/bitcoin-api.health';
import { CkbExplorerHealthIndicator } from '../ckb-explorer/ckb-explorer.health';
import { IndexerHealthIndicator, IndexerHealthIndicatorKey } from '../indexer/indexer.health';
import { DatabaseHealthIndicator } from '../database/database.health';
import { SkipThrottle } from '@nestjs/throttler';

@SkipThrottle()
@Controller('health')
export class HealthController {
  constructor(
    private health: HealthCheckService,
    private http: HttpHealthIndicator,
    private bitcoinApiHealthIndicator: BitcoinApiHealthIndicator,
    private ckbRpcHealthIndicator: CkbRpcHealthIndicator,
    private ckbExplorerHealthIndicator: CkbExplorerHealthIndicator,
    private indexerHealthIndicator: IndexerHealthIndicator,
    private databaseHealthIndicator: DatabaseHealthIndicator,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () =>
        this.http.pingCheck('graphql', 'http://localhost:3000/graphql?query=%7B__typename%7D', {
          headers: { 'apollo-require-preflight': true },
        }),
      () => this.databaseHealthIndicator.isHealthy(),
      () => this.indexerHealthIndicator.isHealthy(IndexerHealthIndicatorKey.Asset),
      () => this.indexerHealthIndicator.isHealthy(IndexerHealthIndicatorKey.Transaction),
      () => this.bitcoinApiHealthIndicator.isHealthy(),
      () => this.ckbRpcHealthIndicator.isHealthy(CkbRpcHealthIndicatorKey.Websocket),
      () => this.ckbExplorerHealthIndicator.isHealthy(),
    ]);
  }
}


================================================
File: backend/src/core/health/health.module.ts
================================================
import { Module } from '@nestjs/common';
import { TerminusModule } from '@nestjs/terminus';
import { HealthController } from './health.controller';
import { CkbRpcModule } from '../ckb-rpc/ckb-rpc.module';
import { CkbExplorerModule } from '../ckb-explorer/ckb-explorer.module';
import { BitcoinApiModule } from '../bitcoin-api/bitcoin-api.module';
import { HttpModule } from '@nestjs/axios';
import { IndexerModule } from '../indexer/indexer.module';
import { DatabaseModule } from '../database/database.module';

@Module({
  imports: [
    TerminusModule,
    HttpModule,
    BitcoinApiModule,
    CkbRpcModule,
    CkbExplorerModule,
    IndexerModule,
    DatabaseModule,
  ],
  providers: [HealthController],
  controllers: [HealthController],
})
export class HealthModule {}


================================================
File: backend/src/core/indexer/indexer.factory.ts
================================================
import { Injectable, OnModuleDestroy } from '@nestjs/common';
import { PrismaService } from '../database/prisma/prisma.service';
import { IndexerService } from './indexer.service';
import { BlockchainServiceFactory } from '../blockchain/blockchain.factory';
import { IndexerQueueService } from './indexer.queue';
import { ModuleRef } from '@nestjs/core';
import { SchedulerRegistry } from '@nestjs/schedule';
import { EventEmitter2 } from '@nestjs/event-emitter';

export class IndexerServiceFactoryError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'IndexerServiceFactoryError';
  }
}

@Injectable()
export class IndexerServiceFactory implements OnModuleDestroy {
  private services: Map<number, IndexerService> = new Map();

  constructor(
    private blockchainServiceFactory: BlockchainServiceFactory,
    private prismaService: PrismaService,
    private schedulerRegistry: SchedulerRegistry,
    private eventEmitter: EventEmitter2,
    private moduleRef: ModuleRef,
  ) {}

  public async onModuleDestroy() {
    for (const service of this.services.values()) {
      await service.close();
    }
  }

  public async getService(chainId: number): Promise<IndexerService> {
    const chain = await this.prismaService.chain.findUnique({
      where: { id: chainId },
    });
    if (!chain) {
      throw new IndexerServiceFactoryError(`Chain with ID ${chainId} not found`);
    }
    if (!this.services.has(chain.id)) {
      const indexerQueueService = this.moduleRef.get(IndexerQueueService);
      const blockchainService = this.blockchainServiceFactory.getService(chain.id);
      const service = new IndexerService(
        chain,
        indexerQueueService,
        blockchainService,
        this.prismaService,
        this.schedulerRegistry,
        this.eventEmitter,
      );
      this.services.set(chain.id, service);
    }
    return this.services.get(chain.id)!;
  }
}


================================================
File: backend/src/core/indexer/indexer.health.ts
================================================
import { Injectable } from '@nestjs/common';
import { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';
import * as Sentry from '@sentry/nestjs';
import { PrismaService } from '../database/prisma/prisma.service';
import { BlockchainServiceFactory } from '../blockchain/blockchain.factory';
import { CKB_CHAIN_ID, CKB_MIN_SAFE_CONFIRMATIONS } from 'src/constants';
import { IndexerQueueService } from './indexer.queue';

export enum IndexerHealthIndicatorKey {
  Transaction = 'indexer.transaction',
  Asset = 'indexer.asset',
}

const INDEEXR_HEALTH_THRESHOLD = 6;

@Injectable()
export class IndexerHealthIndicator extends HealthIndicator {
  constructor(
    private prismaService: PrismaService,
    private blockchainServiceFactory: BlockchainServiceFactory,
    private indexerQueueService: IndexerQueueService,
  ) {
    super();
  }

  public async isHealthy(key: IndexerHealthIndicatorKey): Promise<HealthIndicatorResult> {
    try {
      let isHealthy = false;
      let result: HealthIndicatorResult = {};

      switch (key) {
        case IndexerHealthIndicatorKey.Asset:
          const assetHealthy = await this.isAssetIndexerHealthy();
          isHealthy = assetHealthy.isHealthy;
          result = assetHealthy.result;
          break;
        case IndexerHealthIndicatorKey.Transaction:
          const healthy = await this.isTransactionIndexerHealthy();
          isHealthy = healthy.isHealthy;
          result = healthy.result;
          break;
        default:
          throw new HealthCheckError(`Unknown health indicator key`, key);
      }

      if (isHealthy) {
        return result;
      }
      throw new HealthCheckError('IndexerService failed', result);
    } catch (e) {
      Sentry.captureException(e);
      throw new HealthCheckError('IndexerService failed', e);
    }
  }

  private async isAssetIndexerHealthy(): Promise<{
    isHealthy: boolean;
    result: HealthIndicatorResult;
  }> {
    const blockchainService = this.blockchainServiceFactory.getService(CKB_CHAIN_ID);
    const tipBlockNumber = await blockchainService.getTipBlockNumber();
    const targetBlockNumber = tipBlockNumber - CKB_MIN_SAFE_CONFIRMATIONS;

    const latestIndexedAssetsBlock =
      await this.indexerQueueService.getLatestIndexedAssetsBlock(CKB_CHAIN_ID);
    const latestAsset = await this.prismaService.asset.findFirst({
      select: { blockNumber: true },
      where: { chainId: CKB_CHAIN_ID },
      orderBy: { blockNumber: 'desc' },
    });
    const currentBlockNumber = Math.max(
      latestIndexedAssetsBlock ?? -1,
      latestAsset?.blockNumber ?? -1,
    );

    const isHealthy =
      !!currentBlockNumber && currentBlockNumber >= targetBlockNumber - INDEEXR_HEALTH_THRESHOLD;
    const result = this.getStatus('indexer.asset', isHealthy, {
      targetBlockNumber,
      currentBlockNumber,
    });
    return {
      isHealthy,
      result,
    };
  }

  private async isTransactionIndexerHealthy(): Promise<{
    isHealthy: boolean;
    result: HealthIndicatorResult;
  }> {
    const blockchainService = this.blockchainServiceFactory.getService(CKB_CHAIN_ID);
    const tipBlockNumber = await blockchainService.getTipBlockNumber();
    const targetBlockNumber = tipBlockNumber - CKB_MIN_SAFE_CONFIRMATIONS;

    const block = await this.prismaService.block.findFirst({
      where: {
        chainId: CKB_CHAIN_ID,
      },
      orderBy: {
        number: 'desc',
      },
    });

    const isHealthy = !!block && block.number >= targetBlockNumber - INDEEXR_HEALTH_THRESHOLD;
    const result = this.getStatus('indexer.transaction', isHealthy, {
      targetBlockNumber,
      currentBlockNumber: block?.number,
    });
    return {
      isHealthy,
      result,
    };
  }
}


================================================
File: backend/src/core/indexer/indexer.module.ts
================================================
import { forwardRef, Global, Module } from '@nestjs/common';
import { IndexerServiceFactory } from './indexer.factory';
import { BullModule } from '@nestjs/bullmq';
import { INDEXER_ASSETS_QUEUE, IndexerAssetsProcessor } from './processor/assets.processor';
import { IndexerQueueService } from './indexer.queue';
import {
  INDEXER_BLOCK_ASSETS_QUEUE,
  IndexerBlockAssetsProcessor,
} from './processor/block-assets.processor';
import { IndexerAssetsService } from './service/assets.service';
import { CoreModule } from '../core.module';
import { INDEXER_TYPE_QUEUE, IndexerTypeProcessor } from './processor/type.processor';
import { INDEXER_LOCK_QUEUE, IndexerLockProcessor } from './processor/lock.processor';
import { DefaultJobOptions } from 'bullmq';
import { INDEXER_BLOCK_QUEUE, IndexerBlockProcessor } from './processor/block.processor';
import {
  INDEXER_TRANSACTION_QUEUE,
  IndexerTransactionProcessor,
} from './processor/transaction.processor';
import { IndexerHealthIndicator } from './indexer.health';

const defaultJobOptions: DefaultJobOptions = {
  attempts: 10,
  backoff: {
    type: 'exponential',
    delay: 1000,
  },
  removeOnComplete: true,
  removeOnFail: true,
};

@Global()
@Module({
  imports: [
    BullModule.registerQueue({
      name: INDEXER_ASSETS_QUEUE,
      defaultJobOptions,
    }),
    BullModule.registerQueue({
      name: INDEXER_BLOCK_ASSETS_QUEUE,
      defaultJobOptions,
    }),
    BullModule.registerQueue({
      name: INDEXER_BLOCK_QUEUE,
      defaultJobOptions,
    }),
    BullModule.registerQueue({
      name: INDEXER_TRANSACTION_QUEUE,
      defaultJobOptions,
    }),
    BullModule.registerQueue({
      name: INDEXER_LOCK_QUEUE,
      defaultJobOptions,
    }),
    BullModule.registerQueue({
      name: INDEXER_TYPE_QUEUE,
      defaultJobOptions,
    }),
    forwardRef(() => CoreModule),
  ],
  providers: [
    IndexerServiceFactory,
    IndexerAssetsService,
    IndexerQueueService,
    IndexerAssetsProcessor,
    IndexerBlockAssetsProcessor,
    IndexerLockProcessor,
    IndexerTypeProcessor,
    IndexerBlockProcessor,
    IndexerTransactionProcessor,
    IndexerHealthIndicator,
  ],
  exports: [IndexerServiceFactory, IndexerQueueService, IndexerHealthIndicator],
})
export class IndexerModule {}


================================================
File: backend/src/core/indexer/indexer.queue.ts
================================================
import { InjectQueue } from '@nestjs/bullmq';
import { Inject, Injectable, Logger } from '@nestjs/common';
import { INDEXER_ASSETS_QUEUE, IndexerAssetsJobData } from './processor/assets.processor';
import { Queue } from 'bullmq';
import { HashType, Script } from '@ckb-lumos/lumos';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';
import { CACHE_MANAGER, Cache } from '@nestjs/cache-manager';
import { AssetType } from '@prisma/client';
import {
  INDEXER_BLOCK_ASSETS_QUEUE,
  IndexerBlockAssetsJobData,
} from './processor/block-assets.processor';
import { INDEXER_LOCK_QUEUE, IndexerLockJobData } from './processor/lock.processor';
import { INDEXER_TYPE_QUEUE, IndexerTypeJobData } from './processor/type.processor';
import { INDEXER_BLOCK_QUEUE, IndexerBlockJobData } from './processor/block.processor';
import {
  INDEXER_TRANSACTION_QUEUE,
  IndexerTransactionJobData,
} from './processor/transaction.processor';
import * as Sentry from '@sentry/nestjs';

@Injectable()
export class IndexerQueueService {
  private readonly logger = new Logger(IndexerQueueService.name);

  constructor(
    @InjectQueue(INDEXER_ASSETS_QUEUE) public assetsQueue: Queue,
    @InjectQueue(INDEXER_BLOCK_ASSETS_QUEUE) public blockAssetsQueue: Queue,
    @InjectQueue(INDEXER_LOCK_QUEUE) public lockQueue: Queue,
    @InjectQueue(INDEXER_TYPE_QUEUE) public typeQueue: Queue,
    @InjectQueue(INDEXER_BLOCK_QUEUE) public blockQueue: Queue,
    @InjectQueue(INDEXER_TRANSACTION_QUEUE) public transactionQueue: Queue,
    @Inject(CACHE_MANAGER) private cacheManager: Cache,
  ) { }

  public async moveActiveJobToDelay() {
    await Promise.all([
      this.assetsQueue.getJobs(['active']),
      this.blockAssetsQueue.getJobs(['active']),
      this.lockQueue.getJobs(['active']),
      this.typeQueue.getJobs(['active']),
      this.blockQueue.getJobs(['active']),
      this.transactionQueue.getJobs(['active']),
    ]).then(async (jobs) => {
      await Promise.all(jobs.flat().map((job) => job.moveToDelayed(Date.now() + 1000)));
    });
  }

  public async getLatestAssetJobCursor(assetType: AssetType) {
    try {
      const script: Script = {
        codeHash: assetType.codeHash,
        hashType: assetType.hashType as HashType,
        args: '0x',
      };
      const typeHash = computeScriptHash(script);
      const key = `${INDEXER_ASSETS_QUEUE}:${typeHash}`;
      const cursor = await this.cacheManager.get<string>(key);
      return cursor;
    } catch (e) {
      this.logger.error(e);
      Sentry.captureException(e);
      return undefined;
    }
  }

  public async addAssetJob(data: IndexerAssetsJobData) {
    const { chainId, assetType, cursor } = data;
    const script: Script = {
      codeHash: assetType.codeHash,
      hashType: assetType.hashType as HashType,
      args: '0x',
    };
    const typeHash = computeScriptHash(script);
    const params = new URLSearchParams();
    params.append('jobType', 'index-asset');
    params.append('chainId', chainId.toString());
    params.append('typeHash', typeHash);
    params.append('cursor', cursor || '');
    const jobId = params.toString();

    this.logger.debug(`Added asset job ${jobId} for chain ${chainId} with cursor ${cursor}`);
    await this.cacheManager.set(`${INDEXER_ASSETS_QUEUE}:${typeHash}`, cursor || '');
    await this.assetsQueue.add(jobId, data, { jobId });
  }

  public async getLatestIndexedAssetsBlock(chainId: number) {
    const blockNumber = await this.cacheManager.get<number>(
      `${INDEXER_BLOCK_ASSETS_QUEUE}:${chainId}`,
    );
    return blockNumber;
  }

  public async setLatestIndexedAssetsBlock(chainId: number, blockNumber: number) {
    await this.cacheManager.set(`${INDEXER_BLOCK_ASSETS_QUEUE}:${chainId}`, blockNumber);
  }

  public async addBlockAssetsJob(data: IndexerBlockAssetsJobData) {
    const { chainId, blockNumber } = data;
    const params = new URLSearchParams();
    params.append('jobType', 'index-block-assets');
    params.append('chainId', chainId.toString());
    params.append('blockNumber', blockNumber.toString());
    const jobId = params.toString();

    this.logger.debug(
      `Added block assets job ${jobId} for chain ${chainId} with block number ${blockNumber}`,
    );
    await this.blockAssetsQueue.add(jobId, data, { jobId });
    await this.setLatestIndexedAssetsBlock(chainId, blockNumber);
  }

  public async addLockJob(data: IndexerLockJobData) {
    const { chainId, script } = data;
    const params = new URLSearchParams();
    params.append('jobType', 'index-lock');
    params.append('chainId', chainId.toString());
    params.append('script', computeScriptHash(script));
    const jobId = params.toString();

    this.logger.debug(
      `Added lock job ${jobId} for chain ${chainId} with script hash ${computeScriptHash(script)}`,
    );
    await this.lockQueue.add(jobId, data, { jobId });
  }

  public async addTypeJob(data: IndexerTypeJobData) {
    const { chainId, script } = data;
    const params = new URLSearchParams();
    params.append('jobType', 'index-type');
    params.append('chainId', chainId.toString());
    params.append('script', computeScriptHash(script));
    const jobId = params.toString();

    this.logger.debug(
      `Added type job ${jobId} for chain ${chainId} with script hash ${computeScriptHash(script)}`,
    );
    await this.typeQueue.add(jobId, data, { jobId });
  }

  public async addBlockJob(data: IndexerBlockJobData) {
    const { chainId, blockNumber } = data;
    const params = new URLSearchParams();
    params.append('jobType', 'index-block');
    params.append('chainId', chainId.toString());
    params.append('blockNumber', blockNumber.toString());
    const jobId = params.toString();

    this.logger.debug(
      `Added block job ${jobId} for chain ${chainId} with block number ${blockNumber}`,
    );
    await this.blockQueue.add(jobId, data, { jobId });
  }

  public async addTransactionJob(data: IndexerTransactionJobData) {
    const { chainId, transaction } = data;
    const params = new URLSearchParams();
    params.append('jobType', 'index-transaction');
    params.append('chainId', chainId.toString());
    params.append('txHash', transaction.hash);
    const jobId = params.toString();
    this.logger.debug(
      `Added transaction job ${jobId} for chain ${chainId} with tx hash ${transaction.hash}`,
    );
    await this.transactionQueue.add(jobId, data, { jobId });
  }
}


================================================
File: backend/src/core/indexer/indexer.service.ts
================================================
import { Chain } from '@prisma/client';
import { IndexerAssetsFlow } from './flow/assets.flow';
import { BlockchainService } from '../blockchain/blockchain.service';
import { PrismaService } from '../database/prisma/prisma.service';
import { IndexerQueueService } from './indexer.queue';
import { IndexerTransactionsFlow } from './flow/transactions.flow';
import { SchedulerRegistry } from '@nestjs/schedule';
import { EventEmitter2 } from '@nestjs/event-emitter';

export class IndexerService {
  public assetsFlow: IndexerAssetsFlow;
  public transactionsFlow: IndexerTransactionsFlow;

  constructor(
    private chain: Chain,
    private indexerQueueService: IndexerQueueService,
    private blockchainService: BlockchainService,
    private prismaService: PrismaService,
    private schedulerRegistry: SchedulerRegistry,
    private eventEmitter: EventEmitter2,
  ) {
    this.assetsFlow = new IndexerAssetsFlow(
      this.chain,
      this.indexerQueueService,
      this.blockchainService,
      this.prismaService,
      this.schedulerRegistry,
      this.eventEmitter,
    );
    this.transactionsFlow = new IndexerTransactionsFlow(
      this.chain,
      this.indexerQueueService,
      this.blockchainService,
      this.prismaService,
      this.schedulerRegistry,
      this.eventEmitter,
    );
  }

  public async start() {
    await this.indexerQueueService.moveActiveJobToDelay();
    await Promise.all([this.assetsFlow.start(), this.transactionsFlow.start()]);
  }

  public async close() {
    this.blockchainService.close();
  }
}


================================================
File: backend/src/core/indexer/flow/assets.flow.ts
================================================
import { Logger } from '@nestjs/common';
import { AssetType, Chain } from '@prisma/client';
import { CKB_MIN_SAFE_CONFIRMATIONS } from 'src/constants';
import { CronExpression, SchedulerRegistry } from '@nestjs/schedule';
import { CronJob } from 'cron';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { IndexerQueueService } from '../indexer.queue';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { BlockchainService } from 'src/core/blockchain/blockchain.service';

export class IndexerAssetsFlow {
  private readonly logger = new Logger(IndexerAssetsFlow.name);

  public static readonly Event = {
    AssetIndexed: 'asset-indexed',
  };

  constructor(
    private chain: Chain,
    private indexerQueueService: IndexerQueueService,
    private blockchainService: BlockchainService,
    private prismaService: PrismaService,
    private schedulerRegistry: SchedulerRegistry,
    public eventEmitter: EventEmitter2,
  ) { }

  private async getLatestAssetBlockNumber() {
    const latestAsset = await this.prismaService.asset.findFirst({
      select: { blockNumber: true },
      where: { chainId: this.chain.id },
      orderBy: { blockNumber: 'desc' },
    });
    return latestAsset?.blockNumber ?? -1;
  }

  public async start() {
    const assetTypeScripts = await this.prismaService.assetType.findMany({
      where: { chainId: this.chain.id },
    });
    this.logger.log(`Indexing ${assetTypeScripts.length} asset type scripts`);
    this.setupAssetIndexedListener(assetTypeScripts.length);
    assetTypeScripts.map((assetType) => this.startAssetsIndexing(assetType));
  }

  private async startAssetsIndexing(assetType: AssetType) {
    const cursor = await this.indexerQueueService.getLatestAssetJobCursor(assetType);
    if (cursor === '0x') {
      this.eventEmitter.emit(IndexerAssetsFlow.Event.AssetIndexed, assetType);
      return;
    }
    await this.indexerQueueService.addAssetJob({
      chainId: this.chain.id,
      assetType,
      cursor,
    });
  }

  private setupAssetIndexedListener(totalAssetTypes: number) {
    let completed = 0;
    const onAssetIndexed = async (assetType: AssetType) => {
      completed += 1;
      this.logger.log(`Asset type ${assetType.codeHash} indexed`);
      if (completed === totalAssetTypes) {
        this.eventEmitter.off(IndexerAssetsFlow.Event.AssetIndexed, onAssetIndexed);
        this.startBlockAssetsIndexing();
      }
    };
    this.eventEmitter.on(IndexerAssetsFlow.Event.AssetIndexed, onAssetIndexed);
  }

  private async startBlockAssetsIndexing() {
    const tipBlockNumber = await this.blockchainService.getTipBlockNumber();

    let latestIndexedBlockNumber = await this.indexerQueueService.getLatestIndexedAssetsBlock(
      this.chain.id,
    );
    if (!latestIndexedBlockNumber) {
      latestIndexedBlockNumber = await this.getLatestAssetBlockNumber();
    }
    const targetBlockNumber = tipBlockNumber - CKB_MIN_SAFE_CONFIRMATIONS;
    if (targetBlockNumber <= latestIndexedBlockNumber) {
      this.logger.log(`Block assets are up to date: ${latestIndexedBlockNumber}`);
    } else {
      await this.indexerQueueService.addBlockAssetsJob({
        chainId: this.chain.id,
        blockNumber: latestIndexedBlockNumber + 1,
        targetBlockNumber,
      });
    }
    this.setupBlockAssetsCronJob();
  }

  private setupBlockAssetsCronJob() {
    const cronJobName = `indexer-block-assets-${this.chain.id}-${process.pid}`;
    if (this.schedulerRegistry.doesExist('cron', cronJobName)) {
      return;
    }

    this.logger.log(`Scheduling block assets indexing cron job`);
    const job = new CronJob(CronExpression.EVERY_10_SECONDS, () => {
      this.startBlockAssetsIndexing();
    });
    this.schedulerRegistry.addCronJob(cronJobName, job);
    job.start();
  }
}


================================================
File: backend/src/core/indexer/flow/transactions.flow.ts
================================================
import { Logger } from '@nestjs/common';
import { Chain } from '@prisma/client';
import { EventEmitter } from 'node:events';
import { CKB_MIN_SAFE_CONFIRMATIONS } from 'src/constants';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { IndexerQueueService } from '../indexer.queue';
import { ONE_DAY_MS } from 'src/common/date';
import { CronExpression, SchedulerRegistry } from '@nestjs/schedule';
import { CronJob } from 'cron';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { BlockchainService } from 'src/core/blockchain/blockchain.service';

const CKB_24_HOURS_BLOCK_NUMBER = ONE_DAY_MS / 10000;

export class IndexerTransactionsFlow extends EventEmitter {
  private readonly logger = new Logger(IndexerTransactionsFlow.name);

  constructor(
    private chain: Chain,
    private indexerQueueService: IndexerQueueService,
    private blockchainService: BlockchainService,
    private prismaService: PrismaService,
    private schedulerRegistry: SchedulerRegistry,
    public eventEmitter: EventEmitter2,
  ) {
    super();
  }

  public async start() {
    this.startBlockIndexing();
  }

  public async startBlockIndexing() {
    const tipBlockNumber = await this.blockchainService.getTipBlockNumber();
    let startBlockNumber = tipBlockNumber - CKB_24_HOURS_BLOCK_NUMBER;
    const targetBlockNumber = tipBlockNumber - CKB_MIN_SAFE_CONFIRMATIONS;

    const block = await this.prismaService.block.findFirst({
      where: { chainId: this.chain.id },
      orderBy: { number: 'desc' },
    });
    if (block) {
      startBlockNumber = Math.max(startBlockNumber, block.number + 1);
    }

    if (startBlockNumber < targetBlockNumber) {
      this.logger.log(`Indexing blocks from ${startBlockNumber} to ${targetBlockNumber}`);
      this.indexerQueueService.addBlockJob({
        chainId: this.chain.id,
        blockNumber: startBlockNumber,
        targetBlockNumber,
      });
    }
    this.setupBlockIndexCronJob();
  }

  private setupBlockIndexCronJob() {
    const cronJobName = `indexer-transactions-${this.chain.id}-${process.pid}`;
    if (this.schedulerRegistry.doesExist('cron', cronJobName)) {
      return;
    }

    this.logger.log(`Scheduling block transactions indexing cron job`);
    const job = new CronJob(CronExpression.EVERY_10_SECONDS, () => {
      this.startBlockIndexing();
    });
    this.schedulerRegistry.addCronJob(cronJobName, job);
    job.start();
  }
}


================================================
File: backend/src/core/indexer/processor/assets.processor.ts
================================================
import { BI, HashType } from '@ckb-lumos/lumos';
import { OnWorkerEvent, Processor, WorkerHost } from '@nestjs/bullmq';
import { Logger } from '@nestjs/common';
import { AssetType } from '@prisma/client';
import { Job } from 'bullmq';
import { BlockchainServiceFactory } from 'src/core/blockchain/blockchain.factory';
import { SearchKey } from 'src/core/blockchain/blockchain.interface';
import { IndexerQueueService } from '../indexer.queue';
import { ModuleRef } from '@nestjs/core';
import { IndexerServiceFactory } from '../indexer.factory';
import { IndexerAssetsService } from '../service/assets.service';
import * as Sentry from '@sentry/node';
import { IndexerAssetsFlow } from '../flow/assets.flow';

export const INDEXER_ASSETS_QUEUE = 'indexer-assets-queue';

export interface IndexerAssetsJobData {
  chainId: number;
  assetType: AssetType;
  cursor?: string;
}

const BATCH_SIZE = BI.from(400).toHexString();

@Processor(INDEXER_ASSETS_QUEUE, {
  stalledInterval: 60_000,
})
export class IndexerAssetsProcessor extends WorkerHost {
  private logger = new Logger(IndexerAssetsProcessor.name);

  constructor(
    private blockchainServiceFactory: BlockchainServiceFactory,
    private moduleRef: ModuleRef,
  ) {
    super();
  }

  @OnWorkerEvent('active')
  public onActive(job: Job<IndexerAssetsJobData>) {
    const { chainId, assetType, cursor } = job.data;
    this.logger.debug(
      `Indexing assets (code hash: ${assetType.codeHash}, cursor: ${cursor}) for chain ${chainId}`,
    );
  }

  @OnWorkerEvent('completed')
  public onCompleted(job: Job<IndexerAssetsJobData>) {
    const { chainId, assetType, cursor } = job.data;
    this.logger.log(
      `Indexing assets (code hash: ${assetType.codeHash}, cursor: ${cursor}) for chain ${chainId} completed`,
    );
  }

  @OnWorkerEvent('failed')
  public onFailed(job: Job<IndexerAssetsJobData>, error: Error) {
    const { chainId, assetType, cursor } = job.data;
    this.logger.error(
      `Indexing assets (code hash: ${assetType.codeHash}, cursor: ${cursor}) for chain ${chainId} failed`,
    );
    this.logger.error(error.stack);
    Sentry.captureException(error);
  }

  public async process(job: Job<IndexerAssetsJobData>): Promise<any> {
    const { chainId, assetType, cursor } = job.data;
    if (cursor === '0x') {
      const indexerServiceFactory = this.moduleRef.get(IndexerServiceFactory);
      const indexerService = await indexerServiceFactory.getService(chainId);
      indexerService.assetsFlow.eventEmitter.emit(IndexerAssetsFlow.Event.AssetIndexed, assetType);
      return;
    }

    const cells = await this.getLiveCells(job);

    if (cells.last_cursor) {
      const indexerQueueService = this.moduleRef.get(IndexerQueueService);
      await indexerQueueService.addAssetJob({
        chainId,
        assetType,
        cursor: cells.last_cursor,
      });
    }

    const indexerAssetsService = this.moduleRef.get(IndexerAssetsService);
    const assets = await Promise.all(
      cells.objects.map(async (cell) => {
        return indexerAssetsService.processAssetCell(chainId, cell, assetType);
      }),
    );

    return assets;
  }

  private async getLiveCells(job: Job<IndexerAssetsJobData>) {
    const { chainId, assetType, cursor } = job.data;
    const blockchainService = this.blockchainServiceFactory.getService(chainId);
    const searchKey: SearchKey = {
      script: {
        code_hash: assetType.codeHash,
        hash_type: assetType.hashType as HashType,
        args: '0x',
      },
      script_type: 'type',
    };
    const cells = await blockchainService.getCells(searchKey, 'desc', BATCH_SIZE, cursor);
    return cells;
  }
}


================================================
File: backend/src/core/indexer/processor/block-assets.processor.ts
================================================
import { BI } from '@ckb-lumos/bi';
import { OnWorkerEvent, Processor, WorkerHost } from '@nestjs/bullmq';
import { Logger } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import { Job } from 'bullmq';
import { BlockchainServiceFactory } from 'src/core/blockchain/blockchain.factory';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { IndexerQueueService } from '../indexer.queue';
import { IndexerAssetsService } from '../service/assets.service';
import { Cell, Transaction } from 'src/core/blockchain/blockchain.interface';
import * as Sentry from '@sentry/node';

export const INDEXER_BLOCK_ASSETS_QUEUE = 'indexer-block-assets-queue';

export interface IndexerBlockAssetsJobData {
  chainId: number;
  blockNumber: number;
  targetBlockNumber: number;
}

@Processor(INDEXER_BLOCK_ASSETS_QUEUE, {
  stalledInterval: 60_000,
})
export class IndexerBlockAssetsProcessor extends WorkerHost {
  private logger = new Logger(IndexerBlockAssetsProcessor.name);

  constructor(
    private blockchainServiceFactory: BlockchainServiceFactory,
    private prismaService: PrismaService,
    private moduleRef: ModuleRef,
  ) {
    super();
  }

  @OnWorkerEvent('active')
  public onActive(job: Job<IndexerBlockAssetsJobData>) {
    const { chainId, blockNumber } = job.data;
    this.logger.debug(`Indexing block ${blockNumber} assets for chain ${chainId}`);
  }

  @OnWorkerEvent('completed')
  public onCompleted(job: Job<IndexerBlockAssetsJobData>) {
    const { chainId, blockNumber } = job.data;
    this.logger.log(`Indexing block ${blockNumber} assets for chain ${chainId} completed`);
  }

  @OnWorkerEvent('failed')
  public onFailed(job: Job<IndexerBlockAssetsJobData>, error: Error) {
    const { chainId, blockNumber } = job.data;
    this.logger.error(`Indexing block ${blockNumber} assets for chain ${chainId} failed`);
    this.logger.error(error.stack);
    Sentry.captureException(error);
  }

  public async process(job: Job<IndexerBlockAssetsJobData>): Promise<any> {
    const { chainId, blockNumber, targetBlockNumber } = job.data;
    const block = await this.getBlock(job);

    const assetTypeScripts = await this.prismaService.assetType.findMany({ where: { chainId } });
    await Promise.all(
      block.transactions.map(async (tx, txIndex) => {
        await job.updateProgress((txIndex / block.transactions.length) * 100);
        await this.updateInputAssetCellStatus(chainId, tx);

        for (let index = 0; index < tx.outputs.length; index += 1) {
          const output = tx.outputs[index];
          if (!output.type) {
            continue;
          }

          const assetType = assetTypeScripts.find((assetType) => {
            return (
              assetType.codeHash === output.type!.code_hash &&
              assetType.hashType === output.type!.hash_type
            );
          });
          if (!assetType) {
            continue;
          }

          const indexerAssetsService = this.moduleRef.get(IndexerAssetsService);
          const cell: Cell = {
            block_number: block.header.number,
            out_point: {
              index: BI.from(index).toHexString(),
              tx_hash: tx.hash,
            },
            output,
            output_data: tx.outputs_data[index],
            tx_index: BI.from(txIndex).toHexString(),
          };
          await indexerAssetsService.processAssetCell(chainId, cell, assetType);
        }
      }),
    );

    if (blockNumber < targetBlockNumber) {
      const indexerQueueService = this.moduleRef.get(IndexerQueueService);
      await indexerQueueService.addBlockAssetsJob({
        chainId,
        blockNumber: blockNumber + 1,
        targetBlockNumber,
      });
    }
  }

  private async updateInputAssetCellStatus(chainId: number, tx: Transaction) {
    for (const input of tx.inputs) {
      const existingAsset = await this.prismaService.asset.findUnique({
        where: {
          chainId_txHash_index: {
            chainId: chainId,
            txHash: input.previous_output.tx_hash,
            index: input.previous_output.index,
          },
        },
      });
      if (!existingAsset) {
        continue;
      }

      await this.prismaService.asset.update({
        where: {
          chainId_txHash_index: {
            chainId: chainId,
            txHash: input.previous_output.tx_hash,
            index: input.previous_output.index,
          },
        },
        data: {
          isLive: false,
        },
      });
    }
  }

  private async getBlock(job: Job<IndexerBlockAssetsJobData>) {
    const { chainId, blockNumber } = job.data;
    const blockchainService = this.blockchainServiceFactory.getService(chainId);
    const block = await blockchainService.getBlockByNumber(BI.from(blockNumber).toHexString());
    return block;
  }
}


================================================
File: backend/src/core/indexer/processor/block.processor.ts
================================================
import { BI } from '@ckb-lumos/bi';
import { OnWorkerEvent, Processor, WorkerHost } from '@nestjs/bullmq';
import { Logger } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import { Job } from 'bullmq';
import { BlockchainServiceFactory } from 'src/core/blockchain/blockchain.factory';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import * as Sentry from '@sentry/node';
import { toNumber } from 'lodash';
import { IndexerQueueService } from '../indexer.queue';

export const INDEXER_BLOCK_QUEUE = 'indexer-block-queue';

export interface IndexerBlockJobData {
  chainId: number;
  blockNumber: number;
  targetBlockNumber: number;
}

@Processor(INDEXER_BLOCK_QUEUE, {
  stalledInterval: 60_000,
})
export class IndexerBlockProcessor extends WorkerHost {
  private logger = new Logger(IndexerBlockProcessor.name);

  constructor(
    private blockchainServiceFactory: BlockchainServiceFactory,
    private prismaService: PrismaService,
    private moduleRef: ModuleRef,
  ) {
    super();
  }

  @OnWorkerEvent('active')
  public onActive(job: Job<IndexerBlockJobData>) {
    const { chainId, blockNumber } = job.data;
    this.logger.debug(`Indexing block ${blockNumber} for chain ${chainId}`);
  }

  @OnWorkerEvent('completed')
  public onCompleted(job: Job<IndexerBlockJobData>) {
    const { chainId, blockNumber } = job.data;
    this.logger.log(`Indexing block ${blockNumber} for chain ${chainId} completed`);
  }

  @OnWorkerEvent('failed')
  public onFailed(job: Job<IndexerBlockJobData>, error: Error) {
    const { chainId, blockNumber } = job.data;
    this.logger.error(`Indexing block ${blockNumber} for chain ${chainId} failed`);
    this.logger.error(error.stack);
    Sentry.captureException(error);
  }

  public async process(job: Job<IndexerBlockJobData>): Promise<any> {
    const { chainId, blockNumber, targetBlockNumber } = job.data;
    const block = await this.getBlock(job);
    const indexerQueueService = this.moduleRef.get(IndexerQueueService);

    block.transactions.forEach((transaction, index) => {
      indexerQueueService.addTransactionJob({
        chainId,
        blockNumber,
        index,
        transaction,
      });
    });
    await this.prismaService.block.upsert({
      where: {
        chainId_number: {
          chainId: job.data.chainId,
          number: job.data.blockNumber,
        },
      },
      update: {},
      create: {
        chainId,
        hash: block.header.hash,
        number: BI.from(block.header.number).toNumber(),
        timestamp: new Date(toNumber(block.header.timestamp)),
        transactionsCount: block.transactions.length,
      },
    });

    if (blockNumber < targetBlockNumber) {
      await indexerQueueService.addBlockJob({
        chainId,
        blockNumber: blockNumber + 1,
        targetBlockNumber,
      });
    }
  }

  private async getBlock(job: Job<IndexerBlockJobData>) {
    const { chainId, blockNumber } = job.data;
    const blockchainService = this.blockchainServiceFactory.getService(chainId);
    const block = await blockchainService.getBlockByNumber(BI.from(blockNumber).toHexString());
    return block;
  }
}


================================================
File: backend/src/core/indexer/processor/lock.processor.ts
================================================
import { config, helpers, Script } from '@ckb-lumos/lumos';
import { OnWorkerEvent, Processor, WorkerHost } from '@nestjs/bullmq';
import { Logger } from '@nestjs/common';
import { Job } from 'bullmq';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';
import { CoreService } from 'src/core/core.service';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { Env } from 'src/env';
import { ConfigService } from '@nestjs/config';
import { NetworkType } from 'src/constants';
import * as Sentry from '@sentry/node';

export const INDEXER_LOCK_QUEUE = 'indexer-lock-queue';

export interface IndexerLockJobData {
  chainId: number;
  script: Script;
}

class IndexerLockError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'IndexerLockError';
  }
}

@Processor(INDEXER_LOCK_QUEUE, {
  stalledInterval: 60_000,
})
export class IndexerLockProcessor extends WorkerHost {
  private logger = new Logger(IndexerLockProcessor.name);

  constructor(
    private prismaService: PrismaService,
    private bitcoinApiService: BitcoinApiService,
    private coreService: CoreService,
    private configService: ConfigService<Env>,
  ) {
    super();
  }

  @OnWorkerEvent('active')
  public onActive(job: Job<IndexerLockJobData>) {
    const { chainId, script } = job.data;
    this.logger.debug(
      `Indexing lock script for chain ${chainId} with script hash ${computeScriptHash(script)}`,
    );
  }

  @OnWorkerEvent('completed')
  public onCompleted(job: Job<IndexerLockJobData>) {
    const { chainId, script } = job.data;
    this.logger.log(
      `Indexing lock script for chain ${chainId} with script hash ${computeScriptHash(script)} completed`,
    );
  }

  @OnWorkerEvent('failed')
  public onFailed(job: Job<IndexerLockJobData>, error: Error) {
    const { chainId, script } = job.data;
    this.logger.error(
      `Indexing lock script for chain ${chainId} with script hash ${computeScriptHash(script)} failed`,
    );
    this.logger.error(error.stack);
    Sentry.captureException(error);
  }

  public async process(job: Job<IndexerLockJobData>): Promise<any> {
    const { chainId, script } = job.data;
    const scriptHash = computeScriptHash(script);
    const isRgbppLock = this.coreService.isRgbppLockScript(script);
    const isBtcTimeLock = this.coreService.isBtcTimeLockScript(script);

    let address: string | null = null;
    if (isRgbppLock) {
      try {
        const { btcTxid, outIndex } = this.coreService.parseRgbppLockArgs(script.args);
        const btcTx = await this.bitcoinApiService.getTx({ txid: btcTxid });
        const output = btcTx.vout[outIndex];

        if (!output) {
          throw new IndexerLockError(`No output found for index ${outIndex} of tx ${btcTxid}`);
        }

        if (!output.scriptpubkey_address) {
          throw new IndexerLockError(`No address found for output ${outIndex} of tx ${btcTxid}`);
        }
        address = output.scriptpubkey_address;
      } catch (err) {
        this.logger.error(err.message);
        if (err instanceof IndexerLockError) {
          Sentry.captureException(err);
        }
        const error = new IndexerLockError(err.message);
        Sentry.captureException(error);
        return;
      }
    } else {
      const ckbAddress = helpers.encodeToAddress(script, {
        config:
          this.configService.get('NETWORK') === NetworkType.mainnet
            ? config.predefined.LINA
            : config.predefined.AGGRON4,
      });
      address = ckbAddress;
    }

    await this.prismaService.lockScript.upsert({
      where: {
        chainId_scriptHash: {
          chainId,
          scriptHash,
        },
      },
      update: {},
      create: {
        chainId,
        scriptHash,
        isRgbppLock,
        isBtcTimeLock,
        ownerAddress: address,
        ...script,
      },
    });
  }
}


================================================
File: backend/src/core/indexer/processor/transaction.processor.ts
================================================
import { OnWorkerEvent, Processor, WorkerHost } from '@nestjs/bullmq';
import { Logger } from '@nestjs/common';
import { Job } from 'bullmq';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { CoreService } from 'src/core/core.service';
import { Transaction } from 'src/core/blockchain/blockchain.interface';
import { Script, HashType } from '@ckb-lumos/lumos';
import * as Sentry from '@sentry/node';

export const INDEXER_TRANSACTION_QUEUE = 'indexer-transaction-queue';

export interface IndexerTransactionJobData {
  chainId: number;
  blockNumber: number;
  index: number;
  transaction: Transaction;
}

@Processor(INDEXER_TRANSACTION_QUEUE, {
  stalledInterval: 60_000,
})
export class IndexerTransactionProcessor extends WorkerHost {
  private logger = new Logger(IndexerTransactionProcessor.name);

  constructor(
    private prismaService: PrismaService,
    private coreService: CoreService,
  ) {
    super();
  }

  @OnWorkerEvent('active')
  public onActive(job: Job<IndexerTransactionJobData>) {
    const { chainId, transaction } = job.data;
    this.logger.debug(`Indexing transaction ${transaction.hash} for chain ${chainId}`);
  }

  @OnWorkerEvent('completed')
  public onCompleted(job: Job<IndexerTransactionJobData>) {
    const { chainId, transaction } = job.data;
    this.logger.log(`Indexing transaction ${transaction.hash} for chain ${chainId} completed`);
  }

  @OnWorkerEvent('failed')
  public onFailed(job: Job<IndexerTransactionJobData>, error: Error) {
    const { chainId, transaction } = job.data;
    this.logger.error(`Indexing transaction ${transaction.hash} for chain ${chainId} failed`);
    this.logger.error(error.stack);
    Sentry.captureException(error);
  }

  public async process(job: Job<IndexerTransactionJobData>): Promise<any> {
    const { chainId, blockNumber, index, transaction } = job.data;
    const assetTypeScripts = await this.prismaService.assetType.findMany({
      where: { chainId },
    });

    const hasRgbppAssets = transaction.outputs.some((output) => {
      if (!output.type) return false;
      const typeScript: Script = {
        codeHash: output.type.code_hash,
        hashType: output.type.hash_type as HashType,
        args: output.type.args,
      };
      return assetTypeScripts.some((assetType) => {
        return (
          assetType.codeHash === typeScript.codeHash && assetType.hashType === typeScript.hashType
        );
      });
    });
    if (!hasRgbppAssets) {
      this.logger.debug(`Transaction ${transaction.hash} does not contain any RGB++ assets`);
      return;
    }

    const { isRgbpp, btcTxid, leapDirection } = await this.parseTransaction(chainId, transaction);
    await this.prismaService.transaction.upsert({
      where: {
        chainId_hash: {
          chainId,
          hash: transaction.hash,
        },
      },
      update: {},
      create: {
        chainId,
        hash: transaction.hash,
        index,
        blockNumber,
        isCellbase: index === 0,
        isRgbpp,
        btcTxid,
        leapDirection,
        inputCount: transaction.inputs.length,
        outputCount: transaction.outputs.length,
      },
    });
  }

  private async parseTransaction(chainId: number, transaction: Transaction) {
    const rgbppCell = transaction.outputs.find((output) => {
      const lock: Script = {
        codeHash: output.lock.code_hash,
        hashType: output.lock.hash_type as HashType,
        args: output.lock.args,
      };
      return this.coreService.isRgbppLockScript(lock) || this.coreService.isBtcTimeLockScript(lock);
    });

    if (rgbppCell) {
      let btcTxid: string | null = null;
      try {
        const args = this.coreService.parseRgbppLockArgs(rgbppCell.lock.args);
        btcTxid = args.btcTxid;
      } catch (err) {
        this.logger.error(err);
      }

      const leapDirection = await this.coreService.getLeapDirectionByCkbTx(chainId, transaction);
      return {
        isRgbpp: true,
        btcTxid,
        leapDirection,
      };
    }
    return {
      isRgbpp: false,
      btcTxid: null,
      leapDirection: null,
    };
  }
}


================================================
File: backend/src/core/indexer/processor/type.processor.ts
================================================
import { Script } from '@ckb-lumos/lumos';
import { OnWorkerEvent, Processor, WorkerHost } from '@nestjs/bullmq';
import { Logger } from '@nestjs/common';
import { Job } from 'bullmq';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';
import * as Sentry from '@sentry/node';

export const INDEXER_TYPE_QUEUE = 'indexer-type-queue';

export interface IndexerTypeJobData {
  chainId: number;
  script: Script;
}

@Processor(INDEXER_TYPE_QUEUE, {
  stalledInterval: 60_000,
})
export class IndexerTypeProcessor extends WorkerHost {
  private logger = new Logger(IndexerTypeProcessor.name);

  constructor(private prismaService: PrismaService) {
    super();
  }

  @OnWorkerEvent('active')
  public onActive(job: Job<IndexerTypeJobData>) {
    const { chainId, script } = job.data;
    this.logger.debug(
      `Indexing lock script for chain ${chainId} with script hash ${computeScriptHash(script)}`,
    );
  }

  @OnWorkerEvent('completed')
  public onCompleted(job: Job<IndexerTypeJobData>) {
    const { chainId, script } = job.data;
    this.logger.log(
      `Indexing lock script for chain ${chainId} with script hash ${computeScriptHash(script)} completed`,
    );
  }

  @OnWorkerEvent('failed')
  public onFailed(job: Job<IndexerTypeJobData>, error: Error) {
    const { chainId, script } = job.data;
    this.logger.error(
      `Indexing lock script for chain ${chainId} with script hash ${computeScriptHash(script)} failed`,
    );
    this.logger.error(error.stack);
    Sentry.captureException(error);
  }

  public async process(job: Job<IndexerTypeJobData>): Promise<any> {
    const { chainId, script } = job.data;
    const scriptHash = computeScriptHash(script);

    await this.prismaService.typeScript.upsert({
      where: {
        chainId_scriptHash: {
          chainId,
          scriptHash,
        },
      },
      update: {},
      create: {
        chainId,
        scriptHash,
        ...script,
      },
    });
  }
}


================================================
File: backend/src/core/indexer/service/assets.service.ts
================================================
import { BI, HashType, Script } from '@ckb-lumos/lumos';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';
import { Injectable } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import { AssetType, PrismaClient } from '@prisma/client';
import { ITXClientDenyList } from '@prisma/client/runtime/library';
import { Cell } from 'src/core/blockchain/blockchain.interface';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { IndexerQueueService } from '../indexer.queue';
import { leToU128, remove0x } from '@rgbpp-sdk/ckb';

@Injectable()
export class IndexerAssetsService {
  constructor(
    private prismaService: PrismaService,
    private moduleRef: ModuleRef,
  ) {}

  public async processAssetCell(
    chainId: number,
    cell: Cell,
    assetType: AssetType,
    tx: PrismaService | Omit<PrismaClient, ITXClientDenyList> = this.prismaService,
  ) {
    const { out_point, output, block_number } = cell;
    const indexerQueueService = this.moduleRef.get(IndexerQueueService);
    const lockScript: Script = {
      codeHash: output.lock.code_hash,
      hashType: output.lock.hash_type as HashType,
      args: output.lock.args,
    };
    await indexerQueueService.addLockJob({
      chainId,
      script: lockScript,
    });

    const typeScript: Script = {
      codeHash: output.type!.code_hash,
      hashType: output.type!.hash_type as HashType,
      args: output.type!.args,
    };
    await indexerQueueService.addTypeJob({
      chainId,
      script: typeScript,
    });

    let amount = '0';
    if (cell.output_data && cell.output_data !== '0x') {
      amount = assetType.fungible
        ? BI.from(leToU128(remove0x(cell.output_data).slice(0, 32))).toString()
        : '1';
    }

    const data = {
      chainId,
      blockNumber: BI.from(block_number).toNumber(),
      amount,
      txHash: out_point.tx_hash,
      index: out_point.index,
      lockScriptHash: computeScriptHash(lockScript),
      typeScriptHash: computeScriptHash(typeScript),
      assetTypeId: assetType.id,
    };

    return tx.asset.upsert({
      where: {
        chainId_txHash_index: {
          chainId,
          txHash: out_point.tx_hash,
          index: out_point.index,
        },
      },
      create: data,
      update: {},
    });
  }
}


================================================
File: backend/src/decorators/cache-control.decorator.ts
================================================
import { Directive } from '@nestjs/graphql';

interface CacheControlOptions {
  maxAge?: number;
  scope?: 'PRIVATE' | 'PUBLIC';
  inheritMaxAge?: boolean;
}

export const CacheControl = ({ maxAge, scope = 'PUBLIC', inheritMaxAge }: CacheControlOptions) => {
  const args = [
    `scope: ${scope}`,
    maxAge !== undefined ? `maxAge: ${maxAge}` : null,
    inheritMaxAge ? `inheritMaxAge: ${inheritMaxAge}` : null,
  ]
    .filter(Boolean)
    .join(', ');

  return Directive(`@cacheControl(${args})`);
};


================================================
File: backend/src/decorators/cacheable.decorator.ts
================================================
import { Cache, CACHE_MANAGER } from '@nestjs/cache-manager';
import { Inject, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Env } from 'src/env';
import serialize from 'serialize-javascript';
import { createHash } from 'crypto';

const logger = new Logger('Cacheable');

type KeyBuilder = string | ((...args: any[]) => string | string[]);

interface CacheOptions {
  key?: KeyBuilder;
  namespace?: KeyBuilder;
  ttl?: number;
  shouldCache?: (result: any, target: any) => boolean | Promise<boolean>;
}

function extractKeys(keyBuilder: KeyBuilder, args: any[]): string[] {
  const keys = typeof keyBuilder === 'function' ? keyBuilder(...args) : keyBuilder;
  return Array.isArray(keys) ? keys : [keys];
}

function generateCacheKey(options: {
  key?: KeyBuilder;
  namespace?: KeyBuilder;
  methodName: string;
  args: any[];
}): string {
  let keys: string[];
  if (options.key) {
    keys = extractKeys(options.key, options.args);
  } else {
    const hash = createHash('md5').update(serialize(options.args)).digest('hex');
    keys = [`${options.methodName}@${hash}`];
  }

  const namespace = options.namespace && extractKeys(options.namespace, options.args);
  const composedKey = keys.map((key) => (namespace ? `${namespace[0]}:${key}` : key))[0];

  return composedKey;
}

export function Cacheable(options: CacheOptions = {}): MethodDecorator {
  return function(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;

    Inject(CACHE_MANAGER)(target, '__cacheManager');
    Inject(ConfigService)(target, '__configService');

    descriptor.value = async function(...args: any[]) {
      const cacheManager = this.__cacheManager as Cache;
      if (!cacheManager) return originalMethod.apply(this, args);

      const configService = this.__configService as ConfigService<Env>;
      const branch = configService.get('GIT_BRANCH') || 'unknown';
      const prefix = configService.get('CACHE_KEY_PREFIX');

      const baseKey = generateCacheKey({
        methodName: String(propertyKey),
        key: options.key,
        namespace: options.namespace,
        args,
      });
      const fullCacheKey = `${prefix}-${branch}/${baseKey}`;

      const cachedValue = await cacheManager.get(fullCacheKey);
      if (cachedValue) {
        logger.debug(`Cache hit for key: ${baseKey}`);
        return cachedValue;
      }

      const result = await originalMethod.apply(this, args);
      const shouldCache = options.shouldCache ? await options.shouldCache(result, this) : true;

      if (shouldCache) {
        await cacheManager.set(fullCacheKey, result, options.ttl);
      }

      return result;
    };
    return descriptor;
  };
}


================================================
File: backend/src/decorators/parent-field.decorator.ts
================================================
import { createParamDecorator, ExecutionContext } from '@nestjs/common';
import { GqlExecutionContext } from '@nestjs/graphql';

export const ParentField = createParamDecorator((param: string, ctx: ExecutionContext) => {
  const root = GqlExecutionContext.create(ctx).getRoot();
  const value = root[param];
  return value;
});


================================================
File: backend/src/decorators/plimit.decorator.ts
================================================
import pLimit from 'p-limit';

export interface PLimitOptions {
  concurrency: number;
}

export function PLimit(options: PLimitOptions): MethodDecorator {
  const limit = pLimit(options.concurrency);

  return function (target, propertyKey, descriptor) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    const originalMethod = descriptor.value as unknown as Function;

    return {
      ...descriptor,
      value: function (...args: any[]) {
        return limit(() => originalMethod.apply(this, args));
      },
    } as any;
  };
}


================================================
File: backend/src/filters/all-exceptions.filter.ts
================================================
import { Catch, ArgumentsHost, HttpException } from '@nestjs/common';
import { HttpAdapterHost } from '@nestjs/core';
import { SentryGlobalGraphQLFilter } from '@sentry/nestjs/setup';

const SKIP_REQUEST_URLS = ['/health', '/version'];

@Catch()
export class AllExceptionsFilter extends SentryGlobalGraphQLFilter {
  constructor(private readonly httpAdapterHost: HttpAdapterHost) {
    super();
  }

  catch(exception: unknown, host: ArgumentsHost) {
    const type = host.getType();
    if (type === 'http') {
      const ctx = host.switchToHttp();
      const request = ctx.getRequest();
      if (SKIP_REQUEST_URLS.includes(request.url)) {
        const response = (exception as HttpException)?.getResponse();
        if (response) {
          this.httpAdapterHost.httpAdapter.reply(ctx.getResponse(), response, 200);
          return;
        }
        this.httpAdapterHost.httpAdapter.reply(ctx.getResponse(), exception, 500);
        return;
      }
    }

    super.catch(exception, host);
  }
}


================================================
File: backend/src/middlewares/field-performance.middleware.ts
================================================
import { FieldMiddleware, MiddlewareContext, NextFn } from '@nestjs/graphql';
import * as Sentry from '@sentry/nestjs';

export const fieldPerformanceMiddleware: FieldMiddleware = async (
  ctx: MiddlewareContext,
  next: NextFn,
) => {
  const now = performance.now();
  const value = await next();
  const executionTime = performance.now() - now;
  Sentry.setTag('graphql.field', `${ctx.info.parentType.name}.${ctx.info.fieldName}`);
  Sentry.setMeasurement('graphql.executionTime', executionTime, 'millisecond');
  return value;
};


================================================
File: backend/src/modules/api.model.ts
================================================
import { registerEnumType } from '@nestjs/graphql';

export enum OrderType {
  Desc = 'desc',
  Asc = 'asc',
}

registerEnumType(OrderType, {
  name: 'OrderType',
});


================================================
File: backend/src/modules/api.module.ts
================================================
import { join } from 'node:path';
import { ExecutionContext, Injectable, Module } from '@nestjs/common';
import { APP_FILTER, APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';
import { ConfigService } from '@nestjs/config';
import { GqlExecutionContext, GraphQLModule, Int } from '@nestjs/graphql';
import { DataLoaderInterceptor } from 'src/common/dataloader';
import { Env } from 'src/env';
import { CkbModule } from './ckb/ckb.module';
import { RgbppModule } from './rgbpp/rgbpp.module';
import { BitcoinModule } from './bitcoin/bitcoin.module';
import { SearchModule } from './search/search.module';
import { fieldPerformanceMiddleware } from 'src/middlewares/field-performance.middleware';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import { ComplexityPlugin } from './complexity.plugin';
import * as Sentry from '@sentry/nestjs';
import { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';
import { FastifyReply, FastifyRequest } from 'fastify';
import { ApolloServerPluginCacheControl } from '@apollo/server/plugin/cacheControl';
import responseCachePlugin from '@apollo/server-plugin-response-cache';
import { AllExceptionsFilter } from 'src/filters/all-exceptions.filter';
import { DirectiveLocation, GraphQLBoolean, GraphQLDirective, GraphQLEnumType } from 'graphql';
import { LoggingPlugin } from './logging.plugin';
import { CACHE_MANAGER, Cache } from '@nestjs/cache-manager';
import { ThrottlerStorageRedisService } from '@nest-lab/throttler-storage-redis';

@Injectable()
export class GqlThrottlerGuard extends ThrottlerGuard {
  getRequestResponse(context: ExecutionContext) {
    const gqlCtx = GqlExecutionContext.create(context);
    const ctx = gqlCtx.getContext();
    return { req: ctx.request, res: ctx.reply };
  }
}

@Module({
  imports: [
    ThrottlerModule.forRootAsync({
      inject: [ConfigService],
      useFactory: async (configService: ConfigService<Env>) => ({
        getTracker: (req: Record<string, any>) => {
          return req.ips.length ? req.ips[0] : req.ip;
        },
        throttlers: [
          {
            ttl: configService.get('RATE_LIMIT_WINDOW_MS')!,
            limit: configService.get('RATE_LIMIT_PER_MINUTE')!,
          },
        ],
        storage: new ThrottlerStorageRedisService(configService.get('REDIS_CACHE_URL')),
      }),
    }),
    GraphQLModule.forRootAsync<ApolloDriverConfig>({
      driver: ApolloDriver,
      inject: [ConfigService, CACHE_MANAGER],
      useFactory: async (configService: ConfigService<Env>, cacheManager: Cache) => ({
        playground: configService.get('ENABLED_GRAPHQL_PLAYGROUND'),
        installSubscriptionHandlers: true,
        introspection: true,
        graphiql: true,
        autoSchemaFile: join(process.cwd(), 'src/schema.gql'),
        plugins: [
          ApolloServerPluginCacheControl({
            defaultMaxAge: 10,
            calculateHttpHeaders: true,
          }),
          responseCachePlugin(),
        ],
        cache: {
          async get(key: string) {
            const val = await cacheManager.get(key);
            return val as string | undefined;
          },
          async set(key: string, value: string, options?: { ttl: number | null }) {
            const { ttl } = options || { ttl: null };
            await cacheManager.set(key, value, ttl ? ttl * 1000 : undefined);
          },
          async delete(key: string) {
            await cacheManager.del(key);
          },
        },
        buildSchemaOptions: {
          dateScalarMode: 'timestamp',
          fieldMiddleware: [fieldPerformanceMiddleware],
          directives: [
            new GraphQLDirective({
              name: 'cacheControl',
              args: {
                maxAge: { type: Int },
                scope: {
                  type: new GraphQLEnumType({
                    name: 'CacheControlScope',
                    values: {
                      PUBLIC: {},
                      PRIVATE: {},
                    },
                  }),
                },
                inheritMaxAge: { type: GraphQLBoolean },
              },
              locations: [
                DirectiveLocation.FIELD_DEFINITION,
                DirectiveLocation.OBJECT,
                DirectiveLocation.INTERFACE,
                DirectiveLocation.UNION,
                DirectiveLocation.QUERY,
              ],
            }),
          ],
        },
        context: (request: FastifyRequest, reply: FastifyReply) => {
          return {
            request,
            reply,
            span: Sentry.startInactiveSpan({
              op: 'gql',
              name: 'GraphQLTransaction',
            }),
          };
        },
      }),
    }),
    CkbModule,
    BitcoinModule,
    RgbppModule,
    SearchModule,
  ],
  providers: [
    {
      provide: APP_GUARD,
      useClass: GqlThrottlerGuard,
    },
    {
      provide: APP_INTERCEPTOR,
      useClass: DataLoaderInterceptor,
    },
    {
      provide: APP_FILTER,
      useClass: AllExceptionsFilter,
    },
    ComplexityPlugin,
    LoggingPlugin,
  ],
})
export class ApiModule {}


================================================
File: backend/src/modules/complexity.plugin.ts
================================================
import { GraphQLSchemaHost } from '@nestjs/graphql';
import { Plugin } from '@nestjs/apollo';
import { ApolloServerPlugin, GraphQLRequestListener } from 'apollo-server-plugin-base';
import { GraphQLError } from 'graphql';
import { fieldExtensionsEstimator, getComplexity, simpleEstimator } from 'graphql-query-complexity';
import * as Sentry from '@sentry/nestjs';
import { ConfigService } from '@nestjs/config';
import { Env } from 'src/env';
import { Logger } from '@nestjs/common';

export enum ComplexityType {
  RequestField = 3,
  ListField = 10,
}

@Plugin()
export class ComplexityPlugin implements ApolloServerPlugin {
  private logger = new Logger(ComplexityPlugin.name);

  constructor(
    private gqlSchemaHost: GraphQLSchemaHost,
    private configSErvice: ConfigService<Env>,
  ) { }

  async requestDidStart(): Promise<GraphQLRequestListener> {
    const maxComplexity = this.configSErvice.get('GRAPHQL_COMPLEXITY_LIMIT');
    const { schema } = this.gqlSchemaHost;

    return {
      didResolveOperation: async ({ request, document }) => {
        const complexity = getComplexity({
          schema,
          operationName: request.operationName,
          query: document,
          variables: request.variables,
          estimators: [fieldExtensionsEstimator(), simpleEstimator({ defaultComplexity: 1 })],
        });
        // Skip introspection query
        const operation = document.definitions.find((def) => def.kind === 'OperationDefinition');
        if (operation?.name?.value === 'IntrospectionQuery') {
          return;
        }

        Sentry.setMeasurement('graphql.complexity', complexity, 'none');
        this.logger.debug(`Query complexity: ${request.operationName} ${complexity}`);
        if (complexity > maxComplexity) {
          Sentry.setContext('graphql', {
            query: request.query,
            variables: request.variables,
            complexity,
          });
          const error = new GraphQLError(
            `Query is too complex: ${complexity}. Maximum allowed complexity: ${maxComplexity}`,
          );
          Sentry.captureException(error);
          throw error;
        }
      },
    };
  }
}


================================================
File: backend/src/modules/logging.plugin.ts
================================================
import { ApolloServerPlugin, GraphQLRequestContext, GraphQLRequestListener } from '@apollo/server';
import { Plugin } from '@nestjs/apollo';
import { Logger } from '@nestjs/common';
import { FastifyRequest } from 'fastify';

interface Context {
  request: FastifyRequest;
}

@Plugin()
export class LoggingPlugin implements ApolloServerPlugin {
  private readonly logger = new Logger(LoggingPlugin.name);

  async requestDidStart(requestContext: GraphQLRequestContext<Context>): Promise<GraphQLRequestListener<any>> {
    const { request } = requestContext.contextValue;
    if (request.url !== '/graphql') {
      return {};
    }

    const body = request.body as { operationName: string; variables: Record<string, any>, query: string };
    this.logger.log(`Request [${request.ip}] ${body.operationName} ${JSON.stringify(body.variables)}`);

    const start = performance.now();
    return {
      willSendResponse: async () => {
        const end = performance.now();
        this.logger.log(`Response [${request.ip}] ${body.operationName} ${end - start}ms`);
      },
    };
  }
}


================================================
File: backend/src/modules/bitcoin/bitcoin.model.ts
================================================
import { Field, Float, ObjectType } from '@nestjs/graphql';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';

@ObjectType({ description: 'Bitcoin Fees' })
export class BitcoinFees {
  @Field(() => Float)
  fastest: number;

  @Field(() => Float)
  halfHour: number;

  @Field(() => Float)
  hour: number;

  @Field(() => Float)
  economy: number;

  @Field(() => Float)
  minimum: number;

  public static from(fees: BitcoinApi.RecommendedFees) {
    return {
      fastest: fees.fastestFee,
      halfHour: fees.halfHourFee,
      hour: fees.hourFee,
      economy: fees.economyFee,
      minimum: fees.minimumFee,
    };
  }
}

export type BitcoinBaseChainInfo = Omit<BitcoinChainInfo, 'transactionsCountIn24Hours' | 'fees'>;

@ObjectType({ description: 'Bitcoin ChainInfo' })
export class BitcoinChainInfo {
  @Field(() => Float)
  tipBlockHeight: number;

  @Field(() => String)
  tipBlockHash: string;

  @Field(() => Float)
  difficulty: number;

  @Field(() => Float)
  transactionsCountIn24Hours: number;

  @Field(() => BitcoinFees)
  fees: BitcoinFees;

  public static from(info: BitcoinApi.ChainInfo): BitcoinBaseChainInfo {
    return {
      tipBlockHeight: info.blocks,
      tipBlockHash: info.bestblockhash,
      difficulty: info.difficulty,
    };
  }
}


================================================
File: backend/src/modules/bitcoin/bitcoin.module.ts
================================================
import { Module } from '@nestjs/common';
import { BitcoinApiModule } from 'src/core/bitcoin-api/bitcoin-api.module';
import { BitcoinTransactionModule } from './transaction/transaction.module';
import { BitcoinResolver } from './bitcoin.resolver';
import { BitcoinBlockModule } from './block/block.module';
import { BitcoinAddressModule } from './address/address.module';
import { BitcoinInputModule } from './input/input.module';
import { BitcoinOutputModule } from './output/output.module';

@Module({
  imports: [
    BitcoinApiModule,
    BitcoinBlockModule,
    BitcoinTransactionModule,
    BitcoinAddressModule,
    BitcoinInputModule,
    BitcoinOutputModule,
  ],
  providers: [BitcoinResolver],
})
export class BitcoinModule {}


================================================
File: backend/src/modules/bitcoin/bitcoin.resolver.ts
================================================
import { Float, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { BitcoinBaseChainInfo, BitcoinChainInfo, BitcoinFees } from './bitcoin.model';
import { Loader } from 'src/common/dataloader';
import {
  BitcoinBlockTxidsLoader,
  BitcoinBlockTxidsLoaderType,
} from './block/dataloader/block-txids.dataloader';
import { ComplexityType } from '../complexity.plugin';

// 60 * 24 = 1440 minutes
const BLOCK_NUMBER_OF_24_HOURS = 144;

@Resolver(() => BitcoinChainInfo)
export class BitcoinResolver {
  constructor(private bitcoinApiService: BitcoinApiService) { }

  @Query(() => BitcoinChainInfo, { name: 'btcChainInfo', complexity: ComplexityType.RequestField })
  public async chainInfo(): Promise<BitcoinBaseChainInfo> {
    const info = await this.bitcoinApiService.getBlockchainInfo();
    return BitcoinChainInfo.from(info);
  }

  @ResolveField(() => Float, { complexity: ComplexityType.RequestField })
  public async transactionsCountIn24Hours(
    @Parent() chainInfo: BitcoinBaseChainInfo,
    @Loader(BitcoinBlockTxidsLoader) blockTxidsLoader: BitcoinBlockTxidsLoaderType,
  ): Promise<number> {
    const blockNumbers = Array.from(
      { length: BLOCK_NUMBER_OF_24_HOURS },
      (_, i) => chainInfo.tipBlockHeight - i,
    );
    const txidsCollection = await blockTxidsLoader.loadMany(
      blockNumbers.map((blockNumber) => ({ height: blockNumber })),
    );
    // XXX: what if some of the blocks are not fetched? (due to network issue or else)
    const count = txidsCollection
      .map((txs) => (txs instanceof Array ? txs : []))
      .reduce((acc, txs) => acc + txs?.length ?? 0, 0);
    return count;
  }

  @ResolveField(() => BitcoinFees, { complexity: ComplexityType.RequestField })
  public async fees(): Promise<BitcoinFees> {
    const fees = await this.bitcoinApiService.getFeesRecommended();
    return BitcoinFees.from(fees);
  }
}


================================================
File: backend/src/modules/bitcoin/address/address.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Injectable, Logger } from '@nestjs/common';
import { DataLoaderResponse } from 'src/common/dataloader';
import { Address } from 'src/core/bitcoin-api/bitcoin-api.schema';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { BitcoinTransaction } from '../transaction/transaction.model';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

@Injectable()
export class BitcoinAddressLoader implements NestDataLoader<string, Address | null> {
  private logger = new Logger(BitcoinAddressLoader.name);

  constructor(private bitcoinApiService: BitcoinApiService) {}

  public getBatchFunction() {
    return async (addresses: string[]) => {
      this.logger.debug(`Loading bitcoin addresses stats: ${addresses.join(', ')}`);
      const results = await Promise.allSettled(
        addresses.map((address) => this.bitcoinApiService.getAddress({ address })),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${addresses[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type BitcoinAddressLoaderType = DataLoader<string, Address | null>;
export type BitcoinAddressLoaderResponse = DataLoaderResponse<BitcoinAddressLoader>;

export interface GetAddressTxsParams {
  address: string;
  afterTxid?: string;
}

@Injectable()
export class BitcoinAddressTransactionsLoader
  implements NestDataLoader<GetAddressTxsParams, BitcoinTransaction[] | null>
{
  private logger = new Logger(BitcoinAddressTransactionsLoader.name);

  constructor(private bitcoinApiService: BitcoinApiService) {}

  public getOptions() {
    return {
      cacheKeyFn: (key: GetAddressTxsParams) => {
        const afterTxid = key.afterTxid ? `-${key.afterTxid}` : '';
        return `${key.address}${afterTxid}`;
      },
    };
  }

  public getBatchFunction() {
    return async (batchParams: GetAddressTxsParams[]) => {
      this.logger.debug(`Loading bitcoin addresses txs: ${JSON.stringify(batchParams)}`);
      const results = await Promise.allSettled(
        batchParams.map(async ({ address, afterTxid }) => {
          const txs = await this.bitcoinApiService.getAddressTxs({
            address,
            afterTxid,
          });
          return txs.map((tx) => BitcoinTransaction.from(tx));
        }),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(
          `Requesting: ${JSON.stringify(batchParams[index])}, occurred error: ${result.reason}`,
        );
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type BitcoinAddressTransactionsLoaderType = DataLoader<
  GetAddressTxsParams,
  BitcoinTransaction[] | null
>;
export type BitcoinAddressTransactionsLoaderResponse =
  DataLoaderResponse<BitcoinAddressTransactionsLoader>;


================================================
File: backend/src/modules/bitcoin/address/address.model.ts
================================================
import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType({ description: 'Bitcoin Address' })
export class BitcoinAddress {
  @Field(() => String)
  address: string;

  public static from(address: string): BitcoinAddress {
    return {
      address,
    };
  }
}


================================================
File: backend/src/modules/bitcoin/address/address.module.ts
================================================
import { Module } from '@nestjs/common';
import { BitcoinApiModule } from 'src/core/bitcoin-api/bitcoin-api.module';
import { BitcoinAddressResolver } from './address.resolver';
import { BitcoinAddressLoader, BitcoinAddressTransactionsLoader } from './address.dataloader';

@Module({
  imports: [BitcoinApiModule],
  providers: [BitcoinAddressResolver, BitcoinAddressLoader, BitcoinAddressTransactionsLoader],
  exports: [BitcoinAddressLoader, BitcoinAddressTransactionsLoader],
})
export class BitcoinAddressModule {}


================================================
File: backend/src/modules/bitcoin/address/address.resolver.ts
================================================
import { Loader } from 'src/common/dataloader';
import { Args, Float, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { RgbppAddress } from 'src/modules/rgbpp/address/address.model';
import { BitcoinTransaction } from '../transaction/transaction.model';
import { BitcoinAddress } from './address.model';
import {
  BitcoinAddressLoader,
  BitcoinAddressLoaderType,
  BitcoinAddressTransactionsLoader,
  BitcoinAddressTransactionsLoaderType,
} from './address.dataloader';
import { ValidateBtcAddressPipe } from 'src/pipes/validate-address.pipe';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => BitcoinAddress)
export class BitcoinAddressResolver {
  @Query(() => BitcoinAddress, { name: 'btcAddress', nullable: true })
  public async getBtcAddress(
    @Args('address', ValidateBtcAddressPipe) address: string,
  ): Promise<BitcoinAddress | null> {
    return BitcoinAddress.from(address);
  }

  @ResolveField(() => Float, { complexity: ComplexityType.RequestField })
  public async satoshi(
    @Parent() address: BitcoinAddress,
    @Loader(BitcoinAddressLoader) addressLoader: BitcoinAddressLoaderType,
  ): Promise<number | null> {
    const addressStats = await addressLoader.load(address.address);
    if (!addressStats) {
      return null;
    }
    return addressStats.chain_stats.funded_txo_sum - addressStats.chain_stats.spent_txo_sum;
  }

  @ResolveField(() => Float, { complexity: ComplexityType.RequestField })
  public async pendingSatoshi(
    @Parent() address: BitcoinAddress,
    @Loader(BitcoinAddressLoader) addressLoader: BitcoinAddressLoaderType,
  ): Promise<number | null> {
    const addressStats = await addressLoader.load(address.address);
    if (!addressStats) {
      return null;
    }
    return addressStats.mempool_stats.funded_txo_sum - addressStats.mempool_stats.spent_txo_sum;
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async transactionsCount(
    @Parent() address: BitcoinAddress,
    @Loader(BitcoinAddressLoader) addressLoader: BitcoinAddressLoaderType,
  ): Promise<number | null> {
    // TODO: addressInfo.mempool_stats.tx_count is not included in the response, not sure if it should be included
    const stats = await addressLoader.load(address.address);
    if (!stats) {
      return null;
    }
    return stats.chain_stats.tx_count;
  }

  @ResolveField(() => [BitcoinTransaction], {
    nullable: true,
    complexity: ({ childComplexity }) => ComplexityType.ListField * childComplexity,
  })
  public async transactions(
    @Parent() address: BitcoinAddress,
    @Loader(BitcoinAddressTransactionsLoader)
    addressTxsLoader: BitcoinAddressTransactionsLoaderType,
    @Args('afterTxid', { nullable: true }) afterTxid?: string,
  ): Promise<BitcoinTransaction[] | null> {
    const list = await addressTxsLoader.load({
      address: address.address,
      afterTxid,
    });
    return list || null;
  }

  @ResolveField(() => RgbppAddress)
  public async rgbppAddress(@Parent() address: BitcoinAddress): Promise<RgbppAddress> {
    return RgbppAddress.from(address.address);
  }
}


================================================
File: backend/src/modules/bitcoin/block/block.model.ts
================================================
import { Field, Float, Int, ObjectType } from '@nestjs/graphql';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';

@ObjectType({ description: 'Fee Rate Range' })
export class FeeRateRange {
  @Field(() => Float)
  min: number;

  @Field(() => Float)
  max: number;
}

@ObjectType({ description: 'Bitcoin Block' })
export class BitcoinBlock {
  @Field(() => String)
  id: string;

  @Field(() => Float)
  height: number;

  @Field(() => Int)
  version: number;

  @Field(() => Date)
  timestamp: Date;

  @Field(() => Float)
  size: number;

  @Field(() => Float)
  weight: number;

  @Field(() => Float)
  bits: number;

  @Field(() => Float)
  difficulty: number;

  @Field(() => Float)
  transactionsCount: number;

  public static from(block: BitcoinApi.Block): BitcoinBlock {
    return {
      id: block.id,
      height: block.height,
      version: block.version,
      timestamp: new Date(block.timestamp),
      transactionsCount: block.tx_count,
      size: block.size,
      weight: block.weight,
      bits: block.bits,
      difficulty: block.difficulty,
    };
  }
}


================================================
File: backend/src/modules/bitcoin/block/block.module.ts
================================================
import { Module } from '@nestjs/common';
import { BitcoinApiModule } from 'src/core/bitcoin-api/bitcoin-api.module';
import { BitcoinBlockResolver } from './block.resolver';
import { BitcoinBlockLoader } from './dataloader/block.dataloader';
import { BitcoinBlockTransactionsLoader } from './dataloader/block-transactions.dataloader';
import { BitcoinBlockTxidsLoader } from './dataloader/block-txids.dataloader';

@Module({
  imports: [BitcoinApiModule],
  providers: [
    BitcoinBlockResolver,
    BitcoinBlockLoader,
    BitcoinBlockTransactionsLoader,
    BitcoinBlockTxidsLoader,
  ],
  exports: [BitcoinBlockLoader, BitcoinBlockTransactionsLoader, BitcoinBlockTxidsLoader],
})
export class BitcoinBlockModule {}


================================================
File: backend/src/modules/bitcoin/block/block.resolver.ts
================================================
import { Loader } from 'src/common/dataloader';
import { Args, Float, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { BitcoinTransaction } from '../transaction/transaction.model';
import { BitcoinAddress } from '../address/address.model';
import { BitcoinBlock, FeeRateRange } from './block.model';
import { BitcoinBlockLoader, BitcoinBlockLoaderType } from './dataloader/block.dataloader';
import {
  BitcoinBlockTransactionsLoader,
  BitcoinBlockTransactionsLoaderType,
} from './dataloader/block-transactions.dataloader';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => BitcoinBlock)
export class BitcoinBlockResolver {
  constructor(private bitcoinApiService: BitcoinApiService) { }

  @Query(() => BitcoinBlock, {
    name: 'btcBlock',
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async getBlock(
    @Args('hashOrHeight', { type: () => String }) hashOrHeight: string,
    @Loader(BitcoinBlockLoader) blockLoader: BitcoinBlockLoaderType,
  ): Promise<BitcoinBlock | null> {
    const block = await blockLoader.load(hashOrHeight);
    if (!block) {
      return null;
    }
    return BitcoinBlock.from(block);
  }

  @ResolveField(() => BitcoinAddress, {
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async miner(
    @Parent() block: BitcoinBlock,
    @Loader(BitcoinBlockLoader) blockLoader: BitcoinBlockLoaderType,
  ): Promise<BitcoinAddress | null> {
    // XXX: only the "mempool" mode returns the "extra" field
    const detail = await blockLoader.load(block.id);
    if (!detail || !detail.extras?.coinbaseAddress) {
      return null;
    }
    return {
      address: detail.extras.coinbaseAddress,
    };
  }

  @ResolveField(() => Float, {
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async reward(
    @Parent() block: BitcoinBlock,
    @Loader(BitcoinBlockLoader) blockLoader: BitcoinBlockLoaderType,
  ): Promise<number | null> {
    // XXX: only the "mempool" mode returns the "extra" field
    const detail = await blockLoader.load(block.id);
    if (!detail || !detail.extras?.reward) {
      return null;
    }
    return detail.extras.reward;
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async totalFee(
    @Parent() block: BitcoinBlock,
    @Loader(BitcoinBlockLoader) blockLoader: BitcoinBlockLoaderType,
  ): Promise<number | null> {
    // XXX: only the "mempool" mode returns the "extra" field
    const detail = await blockLoader.load(block.id);
    if (!detail || !detail.extras?.totalFees) {
      return null;
    }
    return detail.extras.totalFees;
  }

  @ResolveField(() => FeeRateRange, {
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async feeRateRange(
    @Parent() block: BitcoinBlock,
    @Loader(BitcoinBlockLoader) blockLoader: BitcoinBlockLoaderType,
  ): Promise<FeeRateRange | null> {
    // XXX: only the "mempool" mode returns the "extra" field
    const detail = await blockLoader.load(block.id);
    if (!detail || !detail.extras?.feeRange) {
      return null;
    }
    return {
      min: detail.extras.feeRange[0],
      max: detail.extras.feeRange[detail.extras.feeRange.length - 1],
    };
  }

  @ResolveField(() => [BitcoinTransaction], {
    nullable: true,
    complexity: ({ childComplexity }) => ComplexityType.ListField * childComplexity,
  })
  public async transactions(
    @Parent() block: BitcoinBlock,
    @Loader(BitcoinBlockTransactionsLoader) blockTxsLoader: BitcoinBlockTransactionsLoaderType,
    @Args('startIndex', {
      nullable: true,
      description: 'For pagination, must be a multiplication of 25',
    })
    startIndex?: number,
  ): Promise<BitcoinTransaction[] | null> {
    const txs = await blockTxsLoader.load({
      hash: block.id,
      startIndex,
    });
    if (!txs) {
      return null;
    }
    return txs.map((tx) => BitcoinTransaction.from(tx));
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async confirmations(@Parent() block: BitcoinBlock): Promise<number | null> {
    const info = await this.bitcoinApiService.getBlockchainInfo();
    return info.blocks - block.height;
  }
}


================================================
File: backend/src/modules/bitcoin/block/dataloader/base.ts
================================================
import { Logger } from '@nestjs/common';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';
import { Cache } from '@nestjs/cache-manager';

export abstract class BitcoinBaseLoader {
  protected logger = new Logger(BitcoinBaseLoader.name);
  abstract bitcoinApiService: BitcoinApiService;
  abstract cacheManager: Cache;

  protected async getBlock(hashOrHeight: string): Promise<BitcoinApi.Block> {
    if (hashOrHeight.startsWith('0')) {
      const block = await this.bitcoinApiService.getBlock({ hash: hashOrHeight });
      return block;
    }
    const height = parseInt(hashOrHeight, 10);
    const hash = await this.bitcoinApiService.getBlockHeight({ height });
    const block = await this.bitcoinApiService.getBlock({ hash });
    return block;
  }

  protected async getBlockTxs(
    hashOrHeight: string,
    startIndex: number = 0,
  ): Promise<BitcoinApi.Transaction[]> {
    if (hashOrHeight.startsWith('0')) {
      return this.bitcoinApiService.getBlockTxs({ hash: hashOrHeight, startIndex });
    }
    const height = parseInt(hashOrHeight, 10);
    const hash = await this.bitcoinApiService.getBlockHeight({ height });
    const txs = await this.bitcoinApiService.getBlockTxs({ hash, startIndex });
    return txs;
  }

  protected async getBlockTxids(hashOrHeight: string): Promise<string[]> {
    if (hashOrHeight.startsWith('0')) {
      const txs = await this.bitcoinApiService.getBlockTxids({ hash: hashOrHeight });
      return txs;
    }
    const height = parseInt(hashOrHeight, 10);
    const hash = await this.bitcoinApiService.getBlockHeight({ height });
    const txids = await this.bitcoinApiService.getBlockTxids({ hash });
    return txids;
  }
}


================================================
File: backend/src/modules/bitcoin/block/dataloader/block-transactions.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Inject, Injectable, Logger } from '@nestjs/common';
import { DataLoaderResponse } from 'src/common/dataloader';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';
import { CACHE_MANAGER, Cache } from '@nestjs/cache-manager';
import { BitcoinBaseLoader } from './base';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

export interface BitcoinBlockTransactionsLoaderParams {
  hash?: string;
  height?: number;
  startIndex?: number;
}

@Injectable()
export class BitcoinBlockTransactionsLoader
  extends BitcoinBaseLoader
  implements NestDataLoader<BitcoinBlockTransactionsLoaderParams, BitcoinApi.Transaction[] | null>
{
  protected logger = new Logger(BitcoinBlockTransactionsLoader.name);

  constructor(
    public bitcoinApiService: BitcoinApiService,
    @Inject(CACHE_MANAGER) public cacheManager: Cache,
  ) {
    super();
  }

  public getOptions() {
    return {
      cacheKeyFn: (key: BitcoinBlockTransactionsLoaderParams) => {
        const { hash, height, startIndex } = key;
        return `${hash || height}-${startIndex}`;
      },
    };
  }

  public getBatchFunction() {
    return async (batchProps: BitcoinBlockTransactionsLoaderParams[]) => {
      this.logger.debug(`Loading bitcoin block transactions`);
      const results = await Promise.allSettled(
        batchProps.map(async ({ hash, height, startIndex }) => {
          if (!hash && !height) {
            return null;
          }
          return this.getBlockTxs(hash || height!.toString(), startIndex);
        }),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${batchProps[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type BitcoinBlockTransactionsLoaderType = DataLoader<
  BitcoinBlockTransactionsLoaderParams,
  BitcoinApi.Transaction[] | null
>;
export type BitcoinBlockTransactionsLoaderResponse =
  DataLoaderResponse<BitcoinBlockTransactionsLoader>;


================================================
File: backend/src/modules/bitcoin/block/dataloader/block-txids.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Inject, Injectable, Logger } from '@nestjs/common';
import { DataLoaderResponse } from 'src/common/dataloader';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { CACHE_MANAGER, Cache } from '@nestjs/cache-manager';
import { BitcoinBaseLoader } from './base';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

export interface BitcoinBlockTxidsLoaderParams {
  hash?: string;
  height?: number;
}

@Injectable()
export class BitcoinBlockTxidsLoader
  extends BitcoinBaseLoader
  implements NestDataLoader<BitcoinBlockTxidsLoaderParams, string[] | null>
{
  protected logger = new Logger(BitcoinBlockTxidsLoader.name);

  constructor(
    public bitcoinApiService: BitcoinApiService,
    @Inject(CACHE_MANAGER) public cacheManager: Cache,
  ) {
    super();
  }

  public getOptions() {
    return {
      cacheKeyFn: (key: BitcoinBlockTxidsLoaderParams) => {
        const { hash, height } = key;
        return `${hash || height}`;
      },
    };
  }

  public getBatchFunction() {
    return async (keys: BitcoinBlockTxidsLoaderParams[]) => {
      this.logger.debug(`Loading bitcoin block transactions`);
      const results = await Promise.allSettled(
        keys.map(async ({ hash, height }) => {
          if (!hash && !height) {
            return null;
          }
          return this.getBlockTxids(hash || height!.toString());
        }),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${keys[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type BitcoinBlockTxidsLoaderType = DataLoader<
  BitcoinBlockTxidsLoaderParams,
  string[] | null
>;
export type BitcoinBlockTxidsLoaderResponse = DataLoaderResponse<BitcoinBlockTxidsLoader>;


================================================
File: backend/src/modules/bitcoin/block/dataloader/block.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Inject, Injectable, Logger } from '@nestjs/common';
import { DataLoaderResponse } from 'src/common/dataloader';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';
import { CACHE_MANAGER, Cache } from '@nestjs/cache-manager';
import { BitcoinBaseLoader } from './base';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

@Injectable()
export class BitcoinBlockLoader
  extends BitcoinBaseLoader
  implements NestDataLoader<string, BitcoinApi.Block | null>
{
  protected logger = new Logger(BitcoinBlockLoader.name);

  constructor(
    public bitcoinApiService: BitcoinApiService,
    @Inject(CACHE_MANAGER) public cacheManager: Cache,
  ) {
    super();
  }

  public getBatchFunction() {
    return async (keys: string[]) => {
      this.logger.debug(`Loading bitcoin blocks: ${keys.join(', ')}`);
      const results = await Promise.allSettled(keys.map(async (key) => this.getBlock(key)));
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${keys[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type BitcoinBlockLoaderType = DataLoader<string, BitcoinApi.Block | null>;
export type BitcoinBlockLoaderResponse = DataLoaderResponse<BitcoinBlockLoader>;


================================================
File: backend/src/modules/bitcoin/input/input.model.ts
================================================
import { Field, Float, ObjectType } from '@nestjs/graphql';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';
import { BitcoinOutput } from '../output/output.model';

@ObjectType({ description: 'Bitcoin Input' })
export class BitcoinInput {
  @Field(() => String)
  txid: string;

  @Field(() => Float)
  vout: number;

  @Field(() => BitcoinOutput, { nullable: true })
  prevout: BitcoinOutput | null;

  @Field(() => String)
  scriptsig: string;

  @Field(() => String)
  scriptsigAsm: string;

  @Field(() => Boolean)
  isCoinbase: boolean;

  @Field(() => Float)
  sequence: number;

  public static from(input: BitcoinApi.Input) {
    return {
      txid: input.txid,
      vout: input.vout,
      prevout: input.prevout
        ? BitcoinOutput.from({
            ...input.prevout,
            txid: input.txid,
            vout: input.vout,
          })
        : null,
      scriptsig: input.scriptsig,
      scriptsigAsm: input.scriptsig_asm,
      isCoinbase: input.is_coinbase,
      sequence: input.sequence,
    };
  }
}


================================================
File: backend/src/modules/bitcoin/input/input.module.ts
================================================
import { Module } from '@nestjs/common';
import { BitcoinInputResolver } from './input.resolver';

@Module({
  providers: [BitcoinInputResolver],
})
export class BitcoinInputModule {}


================================================
File: backend/src/modules/bitcoin/input/input.resolver.ts
================================================
import { Resolver } from '@nestjs/graphql';
import { BitcoinInput } from './input.model';

@Resolver(() => BitcoinInput)
export class BitcoinInputResolver {}


================================================
File: backend/src/modules/bitcoin/output/output.model.ts
================================================
import { Field, Float, ObjectType } from '@nestjs/graphql';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';
import { BitcoinAddress } from '../address/address.model';

export interface BitcoinOutputWithSource extends BitcoinApi.Output {
  txid: string;
  vout: number;
}

@ObjectType({ description: 'Bitcoin Output Spend Status' })
export class BitcoinOutputStatus {
  @Field(() => Boolean)
  spent: boolean;

  @Field(() => String, { nullable: true })
  txid: string | null;

  @Field(() => Float, { nullable: true })
  vin: number | null;

  public static from(outSpend: BitcoinApi.OutSpend): BitcoinOutputStatus {
    return {
      spent: outSpend.spent,
      txid: outSpend.spent ? outSpend.txid : null,
      vin: outSpend.spent ? outSpend.vin : null,
    };
  }
}

@ObjectType({ description: 'Bitcoin Output' })
export class BitcoinOutput {
  @Field(() => String)
  txid: string;

  @Field(() => Float)
  vout: number;

  @Field(() => String)
  scriptpubkey: string;

  @Field(() => String)
  scriptpubkeyAsm: string;

  @Field(() => String)
  scriptpubkeyType: string;

  @Field(() => String, { nullable: true })
  scriptpubkeyAddress: string | null;

  @Field(() => Float)
  value: number;

  @Field(() => BitcoinAddress, { nullable: true })
  address: BitcoinAddress | null;

  public static from(output: BitcoinOutputWithSource): BitcoinOutput {
    return {
      txid: output.txid,
      vout: output.vout,
      scriptpubkey: output.scriptpubkey,
      scriptpubkeyAsm: output.scriptpubkey_asm,
      scriptpubkeyType: output.scriptpubkey_type,
      scriptpubkeyAddress: output.scriptpubkey_address ?? null,
      value: output.value,
      address: output.scriptpubkey_address
        ? BitcoinAddress.from(output.scriptpubkey_address)
        : null,
    };
  }
}


================================================
File: backend/src/modules/bitcoin/output/output.module.ts
================================================
import { Module } from '@nestjs/common';
import { BitcoinApiModule } from 'src/core/bitcoin-api/bitcoin-api.module';
import { BitcoinTransactionOutSpendsLoader } from '../transaction/transaction.dataloader';
import { BitcoinOutputResolver } from './output.resolver';

@Module({
  imports: [BitcoinApiModule],
  providers: [BitcoinOutputResolver, BitcoinTransactionOutSpendsLoader],
})
export class BitcoinOutputModule {}


================================================
File: backend/src/modules/bitcoin/output/output.resolver.ts
================================================
import { Loader } from 'src/common/dataloader';
import { Parent, ResolveField, Resolver } from '@nestjs/graphql';
import { BitcoinAddress } from '../address/address.model';
import { BitcoinOutput, BitcoinOutputStatus } from './output.model';
import {
  BitcoinTransactionOutSpendsLoader,
  BitcoinTransactionOutSpendsLoaderType,
} from '../transaction/transaction.dataloader';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => BitcoinOutput)
export class BitcoinOutputResolver {
  @ResolveField(() => BitcoinAddress, { nullable: true })
  public async address(@Parent() output: BitcoinOutput): Promise<BitcoinAddress | null> {
    // XXX: OP_RETURN outputs don't have address
    if (!output.scriptpubkeyAddress) {
      return null;
    }
    return {
      address: output.scriptpubkeyAddress,
    };
  }

  @ResolveField(() => BitcoinOutputStatus, {
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async status(
    @Parent() output: BitcoinOutput,
    @Loader(BitcoinTransactionOutSpendsLoader)
    outSpendsLoader: BitcoinTransactionOutSpendsLoaderType,
  ): Promise<BitcoinOutputStatus | null> {
    const outSpends = await outSpendsLoader.load(output.txid);
    if (!outSpends || !outSpends[output.vout]) {
      return null;
    }
    const outSpend = outSpends[output.vout];
    return BitcoinOutputStatus.from(outSpend);
  }
}


================================================
File: backend/src/modules/bitcoin/transaction/transaction.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Injectable, Logger } from '@nestjs/common';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { DataLoaderResponse } from 'src/common/dataloader';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

@Injectable()
export class BitcoinTransactionLoader
  implements NestDataLoader<string, BitcoinApi.Transaction | null>
{
  private logger = new Logger(BitcoinTransactionLoader.name);

  constructor(private bitcoinApiService: BitcoinApiService) {}

  public getBatchFunction() {
    return async (ids: string[]) => {
      this.logger.debug(`Loading bitcoin transactions: ${ids.join(', ')}`);
      const results = await Promise.allSettled(
        ids.map((key) => this.bitcoinApiService.getTx({ txid: key })),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${ids[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type BitcoinTransactionLoaderType = DataLoader<string, BitcoinApi.Transaction | null>;
export type BitcoinTransactionLoaderResponse = DataLoaderResponse<BitcoinTransactionLoader>;

@Injectable()
export class BitcoinTransactionOutSpendsLoader
  implements NestDataLoader<string, BitcoinApi.OutSpend[] | null>
{
  private logger = new Logger(BitcoinTransactionLoader.name);

  constructor(private bitcoinApiService: BitcoinApiService) {}

  public getBatchFunction() {
    return async (txids: string[]) => {
      this.logger.debug(`Loading bitcoin transactions: ${txids.join(', ')}`);
      const results = await Promise.allSettled(
        txids.map(async (txid) => this.bitcoinApiService.getTxOutSpends({ txid: txid })),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${txids[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type BitcoinTransactionOutSpendsLoaderType = DataLoader<
  string,
  BitcoinApi.OutSpend[] | null
>;
export type BitcoinTransactionOutSpendsLoaderResponse =
  DataLoaderResponse<BitcoinTransactionOutSpendsLoader>;


================================================
File: backend/src/modules/bitcoin/transaction/transaction.model.ts
================================================
import { Field, Float, Int, ObjectType } from '@nestjs/graphql';
import * as BitcoinApi from 'src/core/bitcoin-api/bitcoin-api.schema';
import { BitcoinOutput } from '../output/output.model';
import { BitcoinInput } from '../input/input.model';
import { ComplexityType } from 'src/modules/complexity.plugin';

@ObjectType({ description: 'Bitcoin Transaction' })
export class BitcoinTransaction {
  @Field(() => Float, { nullable: true })
  blockHeight: number | null;

  @Field(() => String, { nullable: true })
  blockHash: string | null;

  @Field(() => Date, { nullable: true })
  blockTime: Date | null;

  @Field(() => String)
  txid: string;

  @Field(() => Int)
  version: number;

  @Field(() => [BitcoinInput], { nullable: true, complexity: ComplexityType.ListField })
  vin: BitcoinInput[];

  @Field(() => [BitcoinOutput], { complexity: ComplexityType.ListField })
  vout: BitcoinOutput[];

  @Field(() => Float)
  size: number;

  @Field(() => Float)
  locktime: number;

  @Field(() => Float)
  weight: number;

  @Field(() => Float)
  fee: number;

  @Field(() => Float)
  feeRate: number;

  @Field(() => Boolean)
  confirmed: boolean;

  public static from(tx: BitcoinApi.Transaction): BitcoinTransaction {
    const vSize = Math.ceil(tx.weight / 4);

    return {
      blockHeight: tx.status.block_height ?? null,
      blockHash: tx.status.block_hash ?? null,
      blockTime: tx.status.block_time ? new Date(tx.status.block_time * 1000) : null,
      txid: tx.txid,
      version: tx.version,
      vin: tx.vin.map(BitcoinInput.from),
      vout: tx.vout.map((output, index) =>
        BitcoinOutput.from({
          txid: tx.txid,
          vout: index,
          ...output,
        }),
      ),
      size: tx.size,
      locktime: tx.locktime,
      weight: tx.weight,
      fee: tx.fee,
      feeRate: tx.fee / vSize,
      confirmed: tx.status.confirmed,
    };
  }
}


================================================
File: backend/src/modules/bitcoin/transaction/transaction.module.ts
================================================
import { Module } from '@nestjs/common';
import { BitcoinApiModule } from 'src/core/bitcoin-api/bitcoin-api.module';
import { BitcoinTransactionResolver } from './transaction.resolver';
import {
  BitcoinTransactionLoader,
  BitcoinTransactionOutSpendsLoader,
} from './transaction.dataloader';
import { RgbppTransactionModule } from 'src/modules/rgbpp/transaction/transaction.module';

@Module({
  imports: [BitcoinApiModule, RgbppTransactionModule],
  providers: [
    BitcoinTransactionResolver,
    BitcoinTransactionLoader,
    BitcoinTransactionOutSpendsLoader,
  ],
  exports: [BitcoinTransactionLoader, BitcoinTransactionOutSpendsLoader],
})
export class BitcoinTransactionModule {}


================================================
File: backend/src/modules/bitcoin/transaction/transaction.resolver.ts
================================================
import { Loader } from 'src/common/dataloader';
import { Args, Float, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { BitcoinTransaction } from './transaction.model';
import { BitcoinTransactionLoader, BitcoinTransactionLoaderType } from './transaction.dataloader';
import { RgbppTransaction } from 'src/modules/rgbpp/transaction/transaction.model';
import {
  RgbppTransactionLoader,
  RgbppTransactionLoaderType,
} from 'src/modules/rgbpp/transaction/transaction.dataloader';
import { BitcoinBlock } from '../block/block.model';
import { BitcoinBlockLoader, BitcoinBlockLoaderType } from '../block/dataloader/block.dataloader';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => BitcoinTransaction)
export class BitcoinTransactionResolver {
  constructor(private bitcoinApiService: BitcoinApiService) { }

  @Query(() => BitcoinTransaction, {
    name: 'btcTransaction',
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async getTransaction(
    @Args('txid') txid: string,
    @Loader(BitcoinTransactionLoader) txLoader: BitcoinTransactionLoaderType,
  ): Promise<BitcoinTransaction | null> {
    const transaction = await txLoader.load(txid);
    if (!transaction) {
      return null;
    }
    return BitcoinTransaction.from(transaction);
  }

  @ResolveField(() => Float, {
    complexity: ComplexityType.RequestField,
  })
  public async confirmations(@Parent() tx: BitcoinTransaction): Promise<number> {
    if (!tx.confirmed) {
      return 0;
    }
    const info = await this.bitcoinApiService.getBlockchainInfo();
    return info.blocks - tx.blockHeight! + 1;
  }

  @ResolveField(() => Date, { nullable: true, complexity: ComplexityType.RequestField })
  public async transactionTime(@Parent() tx: BitcoinTransaction): Promise<Date | null> {
    const [txTime] = await this.bitcoinApiService.getTransactionTimes({ txids: [tx.txid] });
    if (!txTime) {
      return tx.blockTime!;
    }
    return new Date(txTime * 1000);
  }

  @ResolveField(() => BitcoinBlock, { nullable: true, complexity: ComplexityType.RequestField })
  public async block(
    @Parent() tx: BitcoinTransaction,
    @Loader(BitcoinBlockLoader) blockLoader: BitcoinBlockLoaderType,
  ): Promise<BitcoinBlock | null> {
    if (!tx.blockHash) {
      return null;
    }
    const block = await blockLoader.load(tx.blockHash);
    if (!block) {
      return null;
    }
    return BitcoinBlock.from(block);
  }

  @ResolveField(() => RgbppTransaction, { nullable: true, complexity: ComplexityType.RequestField })
  public async rgbppTransaction(
    @Parent() tx: BitcoinTransaction,
    @Loader(RgbppTransactionLoader) txLoader: RgbppTransactionLoaderType,
  ): Promise<RgbppTransaction | null> {
    const result = await txLoader.load(tx.txid);
    return result || null;
  }
}


================================================
File: backend/src/modules/ckb/ckb.model.ts
================================================
import { Field, Float, ObjectType } from '@nestjs/graphql';

@ObjectType({ description: 'CKB Fees' })
export class CkbFees {
  @Field(() => Float)
  fast: number;

  @Field(() => Float)
  slow: number;

  @Field(() => Float)
  average: number;
}

@ObjectType({ description: 'CKB ChainInfo' })
export class CkbChainInfo {
  @Field(() => Float)
  tipBlockNumber: number;
}


================================================
File: backend/src/modules/ckb/ckb.module.ts
================================================
import { Module } from '@nestjs/common';
import { CkbRpcModule } from 'src/core/ckb-rpc/ckb-rpc.module';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { CkbBlockModule } from './block/block.module';
import { CkbCellModule } from './cell/cell.module';
import { CkbTransactionModule } from './transaction/transaction.module';
import { CkbScriptModule } from './script/script.module';
import { CkbResolver } from './ckb.resolver';
import { CkbAddressModule } from './address/address.module';
import { CkbService } from './ckb.service';

@Module({
  imports: [
    CkbRpcModule,
    CkbExplorerModule,
    CkbBlockModule,
    CkbTransactionModule,
    CkbAddressModule,
    CkbCellModule,
    CkbScriptModule,
  ],
  providers: [CkbResolver, CkbService],
})
export class CkbModule {}


================================================
File: backend/src/modules/ckb/ckb.resolver.ts
================================================
import { toNumber } from 'lodash';
import { Float, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import { CkbChainInfo, CkbFees } from './ckb.model';
import { CkbService } from './ckb.service';
import { calcFeeRate, getWeightedMedian } from 'src/common/fee-rate';

@Resolver(() => CkbChainInfo)
export class CkbResolver {
  constructor(
    private ckbService: CkbService,
    private ckbRpcService: CkbRpcWebsocketService,
    private ckbExplorerService: CkbExplorerService,
  ) {}

  @Query(() => CkbChainInfo, { name: 'ckbChainInfo' })
  public async chainInfo(): Promise<CkbChainInfo> {
    const tipBlockNumber = await this.ckbRpcService.getTipBlockNumber();
    return {
      tipBlockNumber,
    };
  }

  @ResolveField(() => Float)
  public async transactionsCountIn24Hours(): Promise<number> {
    const ckbStatsRes = await this.ckbExplorerService.getStatistics();
    return toNumber(ckbStatsRes.data.attributes.transactions_last_24hrs);
  }

  @ResolveField(() => CkbFees)
  public async fees(): Promise<CkbFees> {
    const stats = await this.ckbExplorerService.getStatistics();
    const feesStats = await this.ckbExplorerService.getTransactionFeesStatistic();
    // https://github.com/nervosnetwork/ckb-explorer-frontend/blob/e5c1e75c270f9dbb5ffdf88888df80315dc3f4cd/src/pages/FeeRateTracker/index.tsx#L64
    const transactionFeeRates = this.ckbService.getFeeRateSamples(
      feesStats.transaction_fee_rates,
      toNumber(stats.data.attributes.transactions_count_per_minute),
      toNumber(stats.data.attributes.average_block_time) / 1000,
    );

    // https://github.com/nervosnetwork/ckb-explorer-frontend/blob/78ef8fba86c01e772c6b7edd8ceb5fe96cbd8b9b/src/pages/FeeRateTracker/FeeRateTrackerComp.tsx#L46
    const allFrs = transactionFeeRates.sort((a, b) => a.confirmation_time - b.confirmation_time);
    const avgConfirmationTime = getWeightedMedian(allFrs);
    const lowFrs = allFrs.filter((r) => r.confirmation_time >= avgConfirmationTime);
    const highFrs = allFrs.filter((r) => r.confirmation_time <= avgConfirmationTime);
    const [low, medium, high] = [lowFrs, allFrs, highFrs].map(calcFeeRate).sort((a, b) => a - b);

    return {
      fast: high,
      slow: low,
      average: medium,
    };
  }
}


================================================
File: backend/src/modules/ckb/ckb.service.ts
================================================
import { Injectable } from '@nestjs/common';
import { TransactionFeeRate } from 'src/core/ckb-explorer/ckb-explorer.interface';

@Injectable()
export class CkbService {
  // https://github.com/nervosnetwork/ckb-explorer-frontend/blob/78ef8fba86c01e772c6b7edd8ceb5fe96cbd8b9b/src/utils/chart.ts#L109
  public getFeeRateSamples(feeRates: TransactionFeeRate[], TPM: number, avgBlockTime = 12) {
    if (feeRates.length === 0) return feeRates;

    const SAMPLES_MIN_COUNT = 100;

    const sampleCount = Math.max(SAMPLES_MIN_COUNT, Number.isNaN(TPM) ? 0 : Math.floor(TPM) * 10);
    const validSamples = feeRates
      .filter((i) => i.confirmation_time)
      .sort((a, b) => a.fee_rate - b.fee_rate);

    // check if lowest fee rate has ideal confirmation time
    const lowests = validSamples.slice(0, SAMPLES_MIN_COUNT);
    const avgOfLowests =
      lowests.reduce((acc, cur) => acc + cur.confirmation_time, 0) / validSamples.length;

    const ACCEPTABLE_CONFIRMATION_TIME = 2 * avgBlockTime;

    if (avgOfLowests <= ACCEPTABLE_CONFIRMATION_TIME) {
      return lowests;
    }

    // if lowest fee rate doesn't hit acceptable confirmation time, sample by iqrs

    // Calculate the first and third quartiles (Q1 and Q3)
    const q1Index = Math.floor(validSamples.length * 0.25);
    const q3Index = Math.floor(validSamples.length * 0.75);
    const q1 = validSamples[q1Index].fee_rate;
    const q3 = validSamples[q3Index].fee_rate;

    // Calculate the Interquartile Range (IQR)
    const iqr = q3 - q1;
    // // Define the lower and upper bounds for outliers
    const lowerBound = q1 - 1.5 * iqr;
    const upperBound = q3 + 1.5 * iqr;

    // Filter out the outliers
    const filteredData = validSamples.filter(
      (item) => item.fee_rate >= lowerBound && item.fee_rate <= upperBound,
    );

    const samples = filteredData
      .sort((a, b) => a.confirmation_time - b.confirmation_time)
      .reduce<TransactionFeeRate[]>((acc, cur) => {
        const last = acc[acc.length - 1];
        if (!last || last.fee_rate + 1.5 * iqr >= cur.fee_rate) {
          return [...acc, cur];
        }
        return acc;
      }, [])
      .sort((a, b) => b.timestamp - a.timestamp)
      .slice(0, sampleCount);

    return samples;
  }
}


================================================
File: backend/src/modules/ckb/address/address.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Injectable, Logger } from '@nestjs/common';
import { DataLoaderResponse } from 'src/common/dataloader';
import * as CkbExplorer from 'src/core/ckb-explorer/ckb-explorer.interface';
import {
  CkbExplorerService,
  GetAddressParams,
  GetAddressTransactionsParams,
} from 'src/core/ckb-explorer/ckb-explorer.service';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

@Injectable()
export class CkbAddressLoader
  implements NestDataLoader<string, CkbExplorer.AddressInfo[] | null>
{
  private logger = new Logger(CkbAddressLoader.name);

  constructor(private ckbExplorerService: CkbExplorerService) {}

  public getBatchFunction() {
    return async (addresses: string[]) => {
      this.logger.debug(`Loading CKB addresses info: ${addresses}`);
      const results = await Promise.allSettled(
        addresses.map(async (address) => {
          const response = await this.ckbExplorerService.getAddress({ address });
          return response.data.map((data) => data.attributes);
        }),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${addresses[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type CkbAddressLoaderType = DataLoader<string, CkbExplorer.AddressInfo[] | null>;
export type CkbAddressLoaderResponse = DataLoaderResponse<CkbAddressLoader>;

export interface CkbAddressTransactionLoaderResult {
  txs: CkbExplorer.Transaction[];
  total: number;
}

@Injectable()
export class CkbAddressTransactionsLoader
  implements NestDataLoader<GetAddressTransactionsParams, CkbAddressTransactionLoaderResult | null>
{
  private logger = new Logger(CkbAddressTransactionsLoader.name);

  constructor(private ckbExplorerService: CkbExplorerService) {}

  public getOptions() {
    return {
      cacheKeyFn: (key: GetAddressTransactionsParams) => {
        const { address, sort } = key;
        return `${address}-${sort}`;
      },
    };
  }

  public getBatchFunction() {
    return async (batchParams: GetAddressParams[]) => {
      this.logger.debug(`Loading CKB address transactions: ${batchParams}`);
      const results = await Promise.allSettled(
        batchParams.map(async (params) => {
          const response = await this.ckbExplorerService.getAddressTransactions(params);
          return {
            txs: response.data.map((data) => data.attributes),
            total: response.meta.total,
          };
        }),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${batchParams[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type CkbAddressTransactionsLoaderType = DataLoader<
  GetAddressTransactionsParams,
  CkbAddressTransactionLoaderResult | null
>;
export type CkbAddressTransactionsLoaderResponse = DataLoaderResponse<CkbAddressTransactionsLoader>;


================================================
File: backend/src/modules/ckb/address/address.model.ts
================================================
import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType({ description: 'CKB Address Balance' })
export class CkbAddressBalance {
  @Field(() => String)
  total: string;

  @Field(() => String)
  available: string;

  @Field(() => String)
  occupied: string;
}

@ObjectType({ description: 'CKB Address' })
export class CkbAddress {
  @Field(() => String)
  address: string;

  public static from(address: string): CkbAddress {
    return {
      address,
    };
  }
}


================================================
File: backend/src/modules/ckb/address/address.module.ts
================================================
import { Module } from '@nestjs/common';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { CkbTransactionModule } from '../transaction/transaction.module';
import { CkbAddressResolver } from './address.resolver';
import { CkbAddressLoader, CkbAddressTransactionsLoader } from './address.dataloader';

@Module({
  imports: [CkbExplorerModule, CkbTransactionModule],
  providers: [CkbAddressResolver, CkbAddressLoader, CkbAddressTransactionsLoader],
  exports: [CkbAddressLoader, CkbAddressTransactionsLoader],
})
export class CkbAddressModule {}


================================================
File: backend/src/modules/ckb/address/address.resolver.ts
================================================
import { Loader } from 'src/common/dataloader';
import { Args, Float, Int, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { CkbTransaction } from '../transaction/transaction.model';
import { CkbAddressBalance, CkbAddress } from './address.model';
import {
  CkbAddressLoader,
  CkbAddressLoaderType,
  CkbAddressTransactionsLoader,
  CkbAddressTransactionsLoaderType,
} from './address.dataloader';
import {
  CkbRpcTransactionLoader,
  CkbRpcTransactionLoaderType,
} from '../transaction/transaction.dataloader';
import { ValidateCkbAddressPipe } from 'src/pipes/validate-address.pipe';
import { BI } from '@ckb-lumos/bi';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => CkbAddress)
export class CkbAddressResolver {
  @Query(() => CkbAddress, { name: 'ckbAddress', nullable: true })
  public async getCkbAddress(
    @Args('address', ValidateCkbAddressPipe) address: string,
  ): Promise<CkbAddress> {
    return {
      address,
    };
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async shannon(
    @Parent() address: CkbAddress,
    @Loader(CkbAddressLoader) addressLoader: CkbAddressLoaderType,
  ): Promise<number | null> {
    const addressInfo = await addressLoader.load(address.address);
    if (!addressInfo) {
      return null;
    }
    return Number(addressInfo[0].balance);
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async transactionsCount(
    @Parent() address: CkbAddress,
    @Loader(CkbAddressLoader) addressLoader: CkbAddressLoaderType,
  ): Promise<number | null> {
    const addressInfo = await addressLoader.load(address.address);
    if (!addressInfo) {
      return null;
    }
    return Number(addressInfo[0].transactions_count);
  }

  @ResolveField(() => [CkbTransaction], {
    nullable: true,
    complexity: ({ args, childComplexity }) => (args.pageSize ?? 10) * childComplexity,
  })
  public async transactions(
    @Parent() address: CkbAddress,
    @Loader(CkbAddressTransactionsLoader) addressTxsLoader: CkbAddressTransactionsLoaderType,
    @Loader(CkbRpcTransactionLoader) rpcTxLoader: CkbRpcTransactionLoaderType,
    @Args('page', { type: () => Int, nullable: true }) page?: number,
    @Args('pageSize', { type: () => Int, nullable: true }) pageSize?: number,
  ): Promise<(CkbTransaction | null)[] | null> {
    const res = await addressTxsLoader.load({
      address: address.address,
      pageSize,
      page,
    });
    if (!res) {
      return null;
    }
    return Promise.all(
      res.txs.map(async (tx) => {
        const rpcTx = await rpcTxLoader.load(tx.transaction_hash);
        if (!rpcTx) {
          return null;
        }
        return CkbTransaction.from(rpcTx);
      }),
    );
  }

  @ResolveField(() => CkbAddressBalance, { nullable: true, complexity: ComplexityType.RequestField })
  public async balance(
    @Parent() address: CkbAddress,
    @Loader(CkbAddressLoader) addressLoader: CkbAddressLoaderType,
  ): Promise<CkbAddressBalance | null> {
    const addressInfo = await addressLoader.load(address.address);
    if (!addressInfo) {
      return null;
    }
    const { balance, balance_occupied } = addressInfo[0];
    const total = BI.from(balance).toHexString();
    const occupied = BI.from(balance_occupied).toHexString();
    const available = BI.from(balance).sub(balance_occupied).toHexString();
    return {
      total,
      available,
      occupied,
    };
  }
}


================================================
File: backend/src/modules/ckb/block/block.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Injectable, Logger } from '@nestjs/common';
import { DataLoaderResponse } from 'src/common/dataloader';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';
import * as CkbExplorer from 'src/core/ckb-explorer/ckb-explorer.interface';
import { CkbBlockService } from './block.service';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

@Injectable()
export class CkbRpcBlockLoader implements NestDataLoader<string, CkbRpc.Block | null> {
  private logger = new Logger(CkbRpcBlockLoader.name);

  constructor(private blockService: CkbBlockService) {}

  public getBatchFunction() {
    return async (heightOrHashList: string[]) => {
      this.logger.debug(`Loading blocks from CkbRpc: ${heightOrHashList.join(', ')}`);
      const results = await Promise.allSettled(
        heightOrHashList.map((heightOrHash) => this.blockService.getBlockFromRpc(heightOrHash)),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(
          `Requesting: ${heightOrHashList[index]}, occurred error: ${result.reason}`,
        );
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type CkbRpcBlockLoaderType = DataLoader<string, CkbRpc.Block | null>;
export type CkbRpcBlockLoaderResponse = DataLoaderResponse<CkbRpcBlockLoader>;

@Injectable()
export class CkbExplorerBlockLoader implements NestDataLoader<string, CkbExplorer.Block | null> {
  private logger = new Logger(CkbRpcBlockLoader.name);

  constructor(private blockService: CkbBlockService) {}

  public getBatchFunction() {
    return async (heightOrHashList: string[]) => {
      this.logger.debug(`Loading blocks from CkbExplorer: ${heightOrHashList.join(', ')}`);
      const results = await Promise.allSettled(
        heightOrHashList.map((heightOrHash) =>
          this.blockService.getBlockFromExplorer(heightOrHash),
        ),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(
          `Requesting: ${heightOrHashList[index]}, occurred error: ${result.reason}`,
        );
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type CkbExplorerBlockLoaderType = DataLoader<string, CkbExplorer.Block | null>;
export type CkbExplorerBlockLoaderResponse = DataLoaderResponse<CkbExplorerBlockLoader>;

@Injectable()
export class CkbBlockEconomicStateLoader
  implements NestDataLoader<string, CkbRpc.BlockEconomicState | null>
{
  private logger = new Logger(CkbBlockEconomicStateLoader.name);

  constructor(private blockService: CkbBlockService) {}

  public getBatchFunction() {
    return async (hashes: string[]) => {
      this.logger.debug(`Loading economic state for blocks: ${hashes.join(', ')}`);
      const results = await Promise.allSettled(
        hashes.map((key) => this.blockService.getBlockEconomicState(key)),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${hashes[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type CkbBlockEconomicStateLoaderType = DataLoader<string, CkbRpc.BlockEconomicState | null>;
export type CkbBlockEconomicStateLoaderResponse = DataLoaderResponse<CkbBlockEconomicStateLoader>;


================================================
File: backend/src/modules/ckb/block/block.model.ts
================================================
import { toNumber } from 'lodash';
import { Field, Int, ObjectType } from '@nestjs/graphql';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';

@ObjectType({ description: 'CKB Block' })
export class CkbBlock {
  @Field(() => Int)
  version: number;

  @Field(() => String)
  hash: string;

  @Field(() => Int)
  number: number;

  @Field(() => Date)
  timestamp: Date;

  @Field(() => Int)
  transactionsCount: number;

  public static from(block: CkbRpc.Block): CkbBlock {
    return {
      version: toNumber(block.header.version),
      hash: block.header.hash,
      number: toNumber(block.header.number),
      timestamp: new Date(toNumber(block.header.timestamp)),
      transactionsCount: block.transactions.length,
    };
  }
}


================================================
File: backend/src/modules/ckb/block/block.module.ts
================================================
import { Module } from '@nestjs/common';
import { CkbRpcModule } from 'src/core/ckb-rpc/ckb-rpc.module';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { CkbBlockResolver } from './block.resolver';
import { CkbBlockService } from './block.service';
import {
  CkbBlockEconomicStateLoader,
  CkbExplorerBlockLoader,
  CkbRpcBlockLoader,
} from './block.dataloader';

@Module({
  imports: [CkbExplorerModule, CkbRpcModule],
  providers: [
    CkbBlockResolver,
    CkbBlockService,
    CkbRpcBlockLoader,
    CkbExplorerBlockLoader,
    CkbBlockEconomicStateLoader,
  ],
  exports: [
    CkbBlockService,
    CkbRpcBlockLoader,
    CkbExplorerBlockLoader,
    CkbBlockEconomicStateLoader,
  ],
})
export class CkbBlockModule {}


================================================
File: backend/src/modules/ckb/block/block.resolver.ts
================================================
import { BI } from '@ckb-lumos/bi';
import { toNumber } from 'lodash';
import { Loader } from 'src/common/dataloader';
import { Args, Float, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { CkbTransaction } from '../transaction/transaction.model';
import { CkbAddress } from '../address/address.model';
import { CkbBlock } from './block.model';
import {
  CkbBlockEconomicStateLoader,
  CkbBlockEconomicStateLoaderType,
  CkbExplorerBlockLoader,
  CkbExplorerBlockLoaderType,
  CkbRpcBlockLoader,
  CkbRpcBlockLoaderType,
} from './block.dataloader';
import {
  CkbRpcTransactionLoader,
  CkbRpcTransactionLoaderType,
} from '../transaction/transaction.dataloader';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => CkbBlock)
export class CkbBlockResolver {
  constructor(private ckbRpcService: CkbRpcWebsocketService) { }

  @Query(() => CkbBlock, {
    name: 'ckbBlock',
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async getBlock(
    @Args('heightOrHash', { type: () => String }) heightOrHash: string,
    @Loader(CkbRpcBlockLoader) rpcBlockLoader: CkbRpcBlockLoaderType,
  ): Promise<CkbBlock | null> {
    const block = await rpcBlockLoader.load(heightOrHash);
    if (!block) {
      return null;
    }
    return CkbBlock.from(block);
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async totalFee(
    @Parent() block: CkbBlock,
    @Loader(CkbBlockEconomicStateLoader) blockEconomicLoader: CkbBlockEconomicStateLoaderType,
  ): Promise<number | null> {
    const blockEconomicState = await blockEconomicLoader.load(block.hash);
    if (!blockEconomicState) {
      return null;
    }
    return BI.from(blockEconomicState.txs_fee).toNumber();
  }

  @ResolveField(() => CkbAddress, { nullable: true, complexity: ComplexityType.RequestField })
  public async miner(
    @Parent() block: CkbBlock,
    @Loader(CkbExplorerBlockLoader) explorerBlockLoader: CkbExplorerBlockLoaderType,
  ): Promise<CkbAddress | null> {
    const explorerBlock = await explorerBlockLoader.load(block.hash);
    if (!explorerBlock) {
      return null;
    }
    return CkbAddress.from(explorerBlock.miner_hash);
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async reward(
    @Parent() block: CkbBlock,
    @Loader(CkbExplorerBlockLoader) explorerBlockLoader: CkbExplorerBlockLoaderType,
  ): Promise<number | null> {
    const explorerBlock = await explorerBlockLoader.load(block.hash);
    if (!explorerBlock) {
      return null;
    }
    return toNumber(explorerBlock.miner_reward);
  }

  @ResolveField(() => [CkbTransaction], {
    nullable: true,
    complexity: ({ childComplexity }) => ComplexityType.ListField * childComplexity,
  })
  public async transactions(
    @Parent() { hash }: CkbBlock,
    @Loader(CkbRpcBlockLoader) rpcBlockLoader: CkbRpcBlockLoaderType,
    @Loader(CkbRpcTransactionLoader) rpcTxLoader: CkbRpcTransactionLoaderType,
  ): Promise<(CkbTransaction | null)[] | null> {
    const block = await rpcBlockLoader.load(hash);
    if (!block) {
      return null;
    }
    return Promise.all(
      block.transactions.map(async (tx) => {
        const transaction = await rpcTxLoader.load(tx.hash);
        if (!transaction) {
          return null;
        }
        return CkbTransaction.from(transaction);
      }),
    );
  }

  @ResolveField(() => Float, { complexity: ComplexityType.RequestField })
  public async size(
    @Parent() block: CkbBlock,
    @Loader(CkbExplorerBlockLoader) explorerBlockLoader: CkbExplorerBlockLoaderType,
  ): Promise<number | null> {
    const explorerBlock = await explorerBlockLoader.load(block.hash);
    if (!explorerBlock) {
      return null;
    }
    return explorerBlock.size;
  }

  @ResolveField(() => Float, { complexity: ComplexityType.RequestField })
  public async confirmations(
    @Parent() block: CkbBlock,
    @Loader(CkbExplorerBlockLoader) explorerBlockLoader: CkbExplorerBlockLoaderType,
  ): Promise<number | null> {
    const tipBlockNumber = await this.ckbRpcService.getTipBlockNumber();
    const explorerBlock = await explorerBlockLoader.load(block.hash);
    if (!explorerBlock) {
      return null;
    }
    return tipBlockNumber - toNumber(explorerBlock.number);
  }
}


================================================
File: backend/src/modules/ckb/block/block.service.ts
================================================
import { Injectable } from '@nestjs/common';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import * as CkbExplorer from 'src/core/ckb-explorer/ckb-explorer.interface';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';

@Injectable()
export class CkbBlockService {
  constructor(
    private ckbExplorerService: CkbExplorerService,
    private ckbRpcService: CkbRpcWebsocketService,
  ) {}

  public async getBlockFromRpc(heightOrHash: string): Promise<CkbRpc.Block> {
    if (heightOrHash.startsWith('0x')) {
      return await this.ckbRpcService.getBlock(heightOrHash);
    }
    return await this.ckbRpcService.getBlockByNumber(heightOrHash);
  }

  public async getBlockFromExplorer(heightOrHash: string): Promise<CkbExplorer.Block> {
    const res = await this.ckbExplorerService.getBlock(heightOrHash);
    return res.data.attributes;
  }

  public async getBlockEconomicState(blockHash: string): Promise<CkbRpc.BlockEconomicState> {
    return await this.ckbRpcService.getBlockEconomicState(blockHash);
  }
}


================================================
File: backend/src/modules/ckb/cell/cell.model.ts
================================================
import { toNumber } from 'lodash';
import { Field, Float, Int, ObjectType } from '@nestjs/graphql';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';
import { CkbScript } from '../script/script.model';

@ObjectType({ description: 'CKB XUDT Info' })
export class CkbXUDTInfo {
  @Field(() => String)
  symbol: string;

  @Field(() => String)
  amount: string;

  @Field(() => Int)
  decimal: number;

  @Field(() => String)
  typeHash: string;
}

@ObjectType({ description: 'CKB Cell Status' })
export class CkbCellStatus {
  @Field(() => Boolean)
  consumed: boolean;

  @Field(() => String, { nullable: true })
  txHash: string | null;

  @Field(() => Float, { nullable: true })
  index: number | null;
}

@ObjectType({ description: 'CKB Cell' })
export class CkbCell {
  @Field(() => String)
  txHash: string;

  @Field(() => Int)
  index: number;

  @Field(() => Float)
  capacity: number;

  @Field(() => CkbScript, { nullable: true })
  type: CkbScript | null;

  @Field(() => CkbScript)
  lock: CkbScript;

  public static fromTransaction(tx: CkbRpc.Transaction, index: number): CkbCell {
    const output = tx.outputs[index];
    return {
      txHash: tx.hash,
      index,
      capacity: toNumber(output.capacity),
      type: output.type ? CkbScript.from(output.type) : null,
      lock: CkbScript.from(output.lock)!,
    };
  }

  public static fromCell(cell: CkbRpc.Cell): CkbCell {
    return {
      txHash: cell.out_point.tx_hash,
      index: toNumber(cell.out_point.index),
      capacity: toNumber(cell.output.capacity),
      type: cell.output.type ? CkbScript.from(cell.output.type) : null,
      lock: CkbScript.from(cell.output.lock)!,
    };
  }
}


================================================
File: backend/src/modules/ckb/cell/cell.module.ts
================================================
import { Module } from '@nestjs/common';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { CkbTransactionModule } from '../transaction/transaction.module';
import { CkbCellService } from './cell.service';
import { CkbCellResolver } from './cell.resolver';
import { CkbScriptModule } from '../script/script.module';

@Module({
  imports: [CkbTransactionModule, CkbExplorerModule, CkbScriptModule],
  providers: [CkbCellResolver, CkbCellService],
})
export class CkbCellModule {}


================================================
File: backend/src/modules/ckb/cell/cell.resolver.ts
================================================
import { BI } from '@ckb-lumos/bi';
import { Loader } from 'src/common/dataloader';
import { Parent, ResolveField, Resolver } from '@nestjs/graphql';
import {
  CkbExplorerTransactionLoader,
  CkbExplorerTransactionLoaderType,
  CkbRpcTransactionLoader,
  CkbRpcTransactionLoaderType,
} from '../transaction/transaction.dataloader';
import { CkbCell, CkbXUDTInfo, CkbCellStatus } from './cell.model';
import { CkbCellService } from './cell.service';
import { CellType } from '../script/script.model';
import { CkbScriptService } from '../script/script.service';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => CkbCell)
export class CkbCellResolver {
  constructor(
    private ckbCellService: CkbCellService,
    private ckbScriptService: CkbScriptService,
  ) { }

  @ResolveField(() => CkbXUDTInfo, { nullable: true, complexity: ComplexityType.RequestField })
  public async xudtInfo(
    @Parent() cell: CkbCell,
    @Loader(CkbExplorerTransactionLoader) explorerTxLoader: CkbExplorerTransactionLoaderType,
  ): Promise<CkbXUDTInfo | null> {
    const tx = await explorerTxLoader.load(cell.txHash);
    if (!tx || !tx.display_outputs[cell.index]) {
      return null;
    }
    const output = tx.display_outputs[cell.index];
    return this.ckbCellService.getXUDTInfoFromOutput(cell, output);
  }

  @ResolveField(() => CkbCellStatus, { nullable: true, complexity: ComplexityType.RequestField })
  public async status(
    @Parent() cell: CkbCell,
    @Loader(CkbRpcTransactionLoader) rpcTxLoader: CkbRpcTransactionLoaderType,
    @Loader(CkbExplorerTransactionLoader) explorerTxLoader: CkbExplorerTransactionLoaderType,
  ): Promise<CkbCellStatus | CkbCellStatus | null> {
    const tx = await explorerTxLoader.load(cell.txHash);
    if (!tx || !tx.display_outputs[cell.index]) {
      return null;
    }
    const output = tx.display_outputs[cell.index];
    const consumed = output.status === 'dead';
    if (consumed) {
      const consumedTx = await rpcTxLoader.load(output.consumed_tx_hash);
      if (!consumedTx) {
        return null;
      }
      const index = consumedTx.transaction.inputs.findIndex(
        (input) =>
          input.previous_output.tx_hash === cell.txHash &&
          BI.from(input.previous_output.index).toNumber() === cell.index,
      );
      return {
        consumed,
        txHash: output.consumed_tx_hash,
        index,
      };
    } else {
      return {
        consumed,
        txHash: null,
        index: null,
      };
    }
  }

  @ResolveField(() => CellType, { nullable: true })
  public cellType(@Parent() cell: CkbCell) {
    if (!cell.type) {
      return null;
    }
    try {
      const cellType = this.ckbScriptService.getCellTypeByScript(cell.type);
      return cellType;
    } catch {
      return null;
    }
  }
}


================================================
File: backend/src/modules/ckb/cell/cell.service.ts
================================================
import { Injectable } from '@nestjs/common';
import * as CkbExplorer from 'src/core/ckb-explorer/ckb-explorer.interface';
import { CkbCell, CkbXUDTInfo } from './cell.model';
import { BI, Script } from '@ckb-lumos/lumos';
import { computeScriptHash } from '@ckb-lumos/lumos/utils';

@Injectable()
export class CkbCellService {
  public getXUDTInfoFromOutput(
    cell: CkbCell,
    output: CkbExplorer.DisplayOutput,
  ): CkbXUDTInfo | null {
    const info = output.xudt_info || output.omiga_inscription_info;
    if (!info) {
      return null;
    }
    const xudtInfo: CkbXUDTInfo = {
      symbol: info.symbol,
      amount: BI.from(info.amount || '0').toHexString(),
      decimal: BI.from(info.decimal || '8').toNumber(),
      typeHash: computeScriptHash(cell.type as Script),
    };
    return xudtInfo;
  }
}


================================================
File: backend/src/modules/ckb/script/dob.service.ts
================================================
import { Script } from '@ckb-lumos/lumos';
import { Injectable, Logger } from '@nestjs/common';
import { DOB_TYPESCRIPTS } from 'src/constants';
import { BaseScriptService } from './base/base-script.service';
import { CellType } from './script.model';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import { Env } from 'src/env';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class DigitalObjectService extends BaseScriptService {
  protected logger = new Logger(DigitalObjectService.name);
  public type: CellType = CellType.DOB;

  constructor(configService: ConfigService<Env>, ckbRpcService: CkbRpcWebsocketService) {
    super(configService, ckbRpcService);
  }

  public getScripts(): Script[] {
    const networkType = this.configService.get('NETWORK');
    return DOB_TYPESCRIPTS[networkType];
  }
}


================================================
File: backend/src/modules/ckb/script/mnft.service.ts
================================================
import { Script } from '@ckb-lumos/lumos';
import { Injectable, Logger } from '@nestjs/common';
import { MNFT_TYPESCRIPTS } from 'src/constants';
import { BaseScriptService } from './base/base-script.service';
import { CellType } from './script.model';
import { ConfigService } from '@nestjs/config';
import { Env } from 'src/env';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';

@Injectable()
export class MNFTService extends BaseScriptService {
  protected logger = new Logger(MNFTService.name);
  public type: CellType = CellType.MNFT;

  constructor(configService: ConfigService<Env>, ckbRpcService: CkbRpcWebsocketService) {
    super(configService, ckbRpcService);
  }

  public getScripts(): Script[] {
    const networkType = this.configService.get('NETWORK');
    return MNFT_TYPESCRIPTS[networkType];
  }
}


================================================
File: backend/src/modules/ckb/script/script.model.ts
================================================
import { HashType } from '@ckb-lumos/lumos';
import { Field, InputType, ObjectType, registerEnumType } from '@nestjs/graphql';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';

export enum CellType {
  XUDT = 'XUDT',
  SUDT = 'SUDT',
  DOB = 'DOB',
  MNFT = 'mNFT',
}

registerEnumType(CellType, {
  name: 'CellType',
  description: 'Cell type (XUDT, SUDT, Dobs, mNFT)',
});

@InputType({ description: 'CKB Script' })
export class CkbScriptInput {
  @Field(() => String)
  codeHash: string;

  @Field(() => String)
  hashType: HashType;

  @Field(() => String)
  args: string;
}

@ObjectType({ description: 'CKB Script' })
export class CkbScript {
  @Field(() => String)
  codeHash: string;

  @Field(() => String)
  hashType: HashType;

  @Field(() => String)
  args: string;

  public static from(script: CkbRpc.Script): CkbScript | null {
    if (!script) {
      return null;
    }
    return {
      codeHash: script.code_hash,
      hashType: script.hash_type as HashType,
      args: script.args,
    };
  }
}


================================================
File: backend/src/modules/ckb/script/script.module.ts
================================================
import { Module } from '@nestjs/common';
import { CkbScriptResolver } from './script.resolver';
import { ExtensibleUDTService } from './xudt.service';
import { SimpleUDTService } from './sudt.service';
import { DigitalObjectService } from './dob.service';
import { MNFTService } from './mnft.service';
import { CkbScriptService } from './script.service';
import { CkbRpcModule } from 'src/core/ckb-rpc/ckb-rpc.module';

@Module({
  imports: [CkbRpcModule],
  providers: [
    CkbScriptResolver,
    CkbScriptService,
    ExtensibleUDTService,
    SimpleUDTService,
    DigitalObjectService,
    MNFTService,
  ],
  exports: [CkbScriptService],
})
export class CkbScriptModule {}


================================================
File: backend/src/modules/ckb/script/script.resolver.ts
================================================
import { Resolver } from '@nestjs/graphql';
import { CkbScript } from './script.model';

@Resolver(() => CkbScript)
export class CkbScriptResolver {}


================================================
File: backend/src/modules/ckb/script/script.service.ts
================================================
import { BadRequestException, Injectable } from '@nestjs/common';
import { ExtensibleUDTService } from './xudt.service';
import { SimpleUDTService } from './sudt.service';
import { DigitalObjectService } from './dob.service';
import { MNFTService } from './mnft.service';
import { CellType } from './script.model';
import { Script } from '@ckb-lumos/lumos';
import { BaseScriptService } from './base/base-script.service';

@Injectable()
export class CkbScriptService {
  private scriptServices: BaseScriptService[];

  constructor(
    private extensibleUDTService: ExtensibleUDTService,
    private simpleUDTService: SimpleUDTService,
    private digitalObjectService: DigitalObjectService,
    private mNFTService: MNFTService,
  ) {
    this.scriptServices = [
      extensibleUDTService,
      simpleUDTService,
      digitalObjectService,
      mNFTService,
    ];
  }

  public getServiceByCellType(cellType: CellType) {
    switch (cellType) {
      case CellType.XUDT:
        return this.extensibleUDTService;
      case CellType.SUDT:
        return this.simpleUDTService;
      case CellType.DOB:
        return this.digitalObjectService;
      case CellType.MNFT:
        return this.mNFTService;
      default:
        throw new BadRequestException(`Unsupported cell type: ${cellType}`);
    }
  }

  public getCellTypeByScript(script: Script): CellType {
    for (const service of this.scriptServices) {
      if (service.matchScript(script)) {
        return service.type;
      }
    }
    throw new BadRequestException(`Unsupported script: ${JSON.stringify(script)}`);
  }

  public matchScript(script: Script) {
    return this.scriptServices.some((service) => service.matchScript(script));
  }
}


================================================
File: backend/src/modules/ckb/script/sudt.service.ts
================================================
import { Script } from '@ckb-lumos/lumos';
import { Injectable, Logger } from '@nestjs/common';
import { SUDT_TYPESCRIPTS } from 'src/constants';
import { BaseScriptService } from './base/base-script.service';
import { CellType } from './script.model';
import { ConfigService } from '@nestjs/config';
import { Env } from 'src/env';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';

@Injectable()
export class SimpleUDTService extends BaseScriptService {
  protected logger = new Logger(SimpleUDTService.name);
  public type: CellType = CellType.SUDT;

  constructor(configService: ConfigService<Env>, ckbRpcService: CkbRpcWebsocketService) {
    super(configService, ckbRpcService);
  }

  public getScripts(): Script[] {
    const networkType = this.configService.get('NETWORK');
    return SUDT_TYPESCRIPTS[networkType];
  }
}


================================================
File: backend/src/modules/ckb/script/xudt.service.ts
================================================
import { Script } from '@ckb-lumos/lumos';
import { Injectable, Logger } from '@nestjs/common';
import { XUDT_TYPESCRIPTS } from 'src/constants';
import { BaseScriptService } from './base/base-script.service';
import { CellType } from './script.model';
import { ConfigService } from '@nestjs/config';
import { Env } from 'src/env';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';

@Injectable()
export class ExtensibleUDTService extends BaseScriptService {
  protected logger = new Logger(ExtensibleUDTService.name);
  public type: CellType = CellType.XUDT;

  constructor(configService: ConfigService<Env>, ckbRpcService: CkbRpcWebsocketService) {
    super(configService, ckbRpcService);
  }

  public getScripts(): Script[] {
    const networkType = this.configService.get('NETWORK');
    return XUDT_TYPESCRIPTS[networkType]
  }
}


================================================
File: backend/src/modules/ckb/script/base/base-script.service.ts
================================================
import { BI, Script } from '@ckb-lumos/lumos';
import { Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { isScriptEqual } from '@rgbpp-sdk/ckb';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import { SearchKey } from 'src/core/ckb-rpc/ckb-rpc.interface';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';
import { Env } from 'src/env';
import { CellType } from '../script.model';
import { OrderType } from 'src/modules/api.model';
import * as Sentry from '@sentry/nestjs';
import { Cacheable } from 'src/decorators/cacheable.decorator';

export abstract class BaseScriptService {
  protected logger = new Logger(BaseScriptService.name);
  abstract type: CellType;

  constructor(
    protected configService: ConfigService<Env>,
    protected ckbRpcService: CkbRpcWebsocketService,
  ) { }

  public static sortTransactionCmp(a: CkbRpc.IndexerCell, b: CkbRpc.IndexerCell, order: OrderType) {
    const blockNumberCmp = BI.from(b.block_number).sub(BI.from(a.block_number)).toNumber();
    if (blockNumberCmp !== 0) {
      return order === OrderType.Desc ? blockNumberCmp : -blockNumberCmp;
    }
    const txIndexCmp = BI.from(b.tx_index).sub(BI.from(a.tx_index)).toNumber();
    return order === OrderType.Desc ? txIndexCmp : -txIndexCmp;
  }

  public abstract getScripts(): Script[];

  public matchScript(script: Script) {
    const scripts = this.getScripts();
    return scripts.some((s) => isScriptEqual(s, { ...script, args: '0x' }));
  }

  @Cacheable({
    namespace: 'BaseScriptService',
    key: (limit: number, order: OrderType, after?: string) =>
      `getTransactions:${limit}:${order}:${after}`,
    ttl: 10_000,
  })
  public async getTransactions(
    limit: number = 10,
    order: OrderType = OrderType.Desc,
    after?: string,
  ) {
    const scripts = this.getScripts();
    const result = await Promise.allSettled(
      scripts.map(async (script) => {
        const searchKey: SearchKey = {
          script: {
            code_hash: script.codeHash,
            hash_type: script.hashType,
            args: '0x',
          },
          script_type: 'type',
        };
        const txs = await this.ckbRpcService.getTransactions(
          searchKey,
          order,
          BI.from(limit).toHexString(),
          after,
        );
        return txs;
      }),
    );
    const transactions: CkbRpc.GetTransactionsResult[] = [];
    result.forEach((r) => {
      if (r.status === 'fulfilled') {
        transactions.push(r.value);
      } else {
        this.logger.error(r.reason);
        Sentry.captureException(r.reason);
      }
    });
    return transactions
      .map((tx) => tx.objects)
      .flat()
      .sort((a, b) => BaseScriptService.sortTransactionCmp(a, b, order))
      .slice(0, limit);
  }
}


================================================
File: backend/src/modules/ckb/transaction/transaction.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Injectable, Logger } from '@nestjs/common';
import { DataLoaderResponse } from 'src/common/dataloader';
import * as CkbRpcInterface from 'src/core/ckb-rpc/ckb-rpc.interface';
import * as CkbExplorerInterface from 'src/core/ckb-explorer/ckb-explorer.interface';
import { CkbTransactionService } from './transaction.service';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

@Injectable()
export class CkbRpcTransactionLoader
  implements NestDataLoader<string, CkbRpcInterface.TransactionWithStatusResponse | null>
{
  private logger = new Logger(CkbRpcTransactionLoader.name);

  constructor(private transactionService: CkbTransactionService) {}

  public getBatchFunction() {
    return async (hashes: string[]) => {
      this.logger.debug(`Loading CKB transactions from CkbRpcService: ${hashes.join(', ')}`);
      const results = await Promise.allSettled(
        hashes.map((key) => this.transactionService.getTransactionFromRpc(key)),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${hashes[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type CkbRpcTransactionLoaderType = DataLoader<
  string,
  CkbRpcInterface.TransactionWithStatusResponse | null
>;
export type CkbRpcTransactionLoaderResponse = DataLoaderResponse<CkbRpcTransactionLoader>;

@Injectable()
export class CkbExplorerTransactionLoader
  implements NestDataLoader<string, CkbExplorerInterface.DetailTransaction | null>
{
  private logger = new Logger(CkbExplorerTransactionLoader.name);

  constructor(private transactionService: CkbTransactionService) {}

  public getBatchFunction() {
    return async (hashes: string[]) => {
      this.logger.debug(`Loading CKB transactions from CkbExplorerService: ${hashes.join(', ')}`);
      const results = await Promise.allSettled(
        hashes.map((key) => this.transactionService.getTransactionFromExplorer(key)),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${hashes[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type CkbExplorerTransactionLoaderType = DataLoader<
  string,
  CkbExplorerInterface.DetailTransaction | null
>;
export type CkbExplorerTransactionLoaderResponse = DataLoaderResponse<CkbExplorerTransactionLoader>;


================================================
File: backend/src/modules/ckb/transaction/transaction.model.ts
================================================
import { toNumber } from 'lodash';
import { Field, Float, InputType, ObjectType } from '@nestjs/graphql';
import { ResultFormatter, RPCTypes } from '@ckb-lumos/lumos/rpc';
import { blockchain } from '@ckb-lumos/lumos/codec';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';
import { CkbCell } from '../cell/cell.model';
import { CkbScriptInput } from '../script/script.model';

@InputType({ description: 'Search key for CKB transactions' })
export class CkbSearchKeyInput {
  @Field(() => CkbScriptInput)
  script: CkbScriptInput;

  @Field(() => String)
  scriptType: 'lock' | 'type';
}

@ObjectType({ description: 'CKB Transaction' })
export class CkbTransaction {
  @Field(() => Boolean)
  isCellbase: boolean;

  @Field(() => Float)
  blockNumber: number;

  @Field(() => String)
  hash: string;

  @Field(() => Float)
  size: number;

  @Field(() => [CkbCell])
  outputs: CkbCell[];

  @Field(() => Boolean)
  confirmed: boolean;

  public static from(
    transactionWithStatus: CkbRpc.TransactionWithStatusResponse,
  ): CkbTransaction | null {
    const { transaction, tx_status } = transactionWithStatus;
    if (!transaction || tx_status?.status === 'unknown') {
      return null;
    }

    const isCellbase = transaction.inputs[0].previous_output.tx_hash.endsWith('0'.repeat(64));

    const resultTx = ResultFormatter.toTransaction(transaction as RPCTypes.Transaction);
    const binaryTx = blockchain.Transaction.pack(resultTx);
    const txBytes = binaryTx.byteLength;

    return {
      isCellbase,
      hash: transaction.hash,
      confirmed: tx_status.status === 'committed',
      blockNumber: toNumber(tx_status.block_number),
      outputs: transaction.outputs.map((_, index) => CkbCell.fromTransaction(transaction, index)),
      size: txBytes,
    };
  }
}


================================================
File: backend/src/modules/ckb/transaction/transaction.module.ts
================================================
import { Module } from '@nestjs/common';
import { CkbRpcModule } from 'src/core/ckb-rpc/ckb-rpc.module';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { CkbTransactionResolver } from './transaction.resolver';
import { CkbTransactionService } from './transaction.service';
import { CkbExplorerTransactionLoader, CkbRpcTransactionLoader } from './transaction.dataloader';
import { CkbScriptModule } from '../script/script.module';

@Module({
  imports: [CkbRpcModule, CkbExplorerModule, CkbScriptModule],
  providers: [
    CkbTransactionResolver,
    CkbTransactionService,
    CkbRpcTransactionLoader,
    CkbExplorerTransactionLoader,
  ],
  exports: [CkbTransactionService, CkbRpcTransactionLoader, CkbExplorerTransactionLoader],
})
export class CkbTransactionModule {}


================================================
File: backend/src/modules/ckb/transaction/transaction.resolver.ts
================================================
import { BI } from '@ckb-lumos/bi';
import { toNumber } from 'lodash';
import { Loader } from 'src/common/dataloader';
import { Args, Float, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { CkbRpcBlockLoader, CkbRpcBlockLoaderType } from '../block/block.dataloader';
import { CkbBlock } from '../block/block.model';
import { CkbCell } from '../cell/cell.model';
import { CkbTransactionService } from './transaction.service';
import { CkbTransaction, CkbSearchKeyInput } from './transaction.model';
import {
  CkbRpcTransactionLoader,
  CkbRpcTransactionLoaderType,
  CkbExplorerTransactionLoader,
  CkbExplorerTransactionLoaderType,
} from './transaction.dataloader';
import { BadRequestException, Logger } from '@nestjs/common';
import { CellType } from '../script/script.model';
import { CkbScriptService } from '../script/script.service';
import { OrderType } from 'src/modules/api.model';
import { BaseScriptService } from '../script/base/base-script.service';
import * as Sentry from '@sentry/nestjs';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => CkbTransaction)
export class CkbTransactionResolver {
  private logger = new Logger(CkbTransactionResolver.name);

  constructor(
    private ckbTransactionService: CkbTransactionService,
    private ckbScriptService: CkbScriptService,
  ) { }

  @Query(() => [CkbTransaction], {
    name: 'ckbTransactions',
    complexity: ({ args, childComplexity }) => (args.limit ?? 10) * childComplexity,
  })
  public async getTransactions(
    @Args('types', { type: () => [CellType], nullable: true }) types: CellType[] | null,
    @Args('scriptKey', { type: () => CkbSearchKeyInput, nullable: true })
    scriptKey: CkbSearchKeyInput | null,
    @Args('limit', { type: () => Float, nullable: true }) limit: number = 10,
    @Args('order', { type: () => OrderType, nullable: true }) order: OrderType = OrderType.Desc,
    @Args('after', { type: () => String, nullable: true }) after: string | null,
  ): Promise<CkbTransaction[]> {
    if (types && scriptKey) {
      throw new BadRequestException('Only one of types and scriptKey can be provided');
    }

    if (types) {
      const txs = await Promise.allSettled(
        types.map(async (cellType) => {
          const service = this.ckbScriptService.getServiceByCellType(cellType);
          const txs = await service.getTransactions(limit, order, after || undefined);
          return txs;
        }),
      );
      txs.forEach((tx) => {
        if (tx.status === 'rejected') {
          this.logger.error(tx.reason);
          Sentry.captureException(tx.reason);
        }
      });

      const orderedTxHashes = txs
        .map((tx) => (tx.status === 'fulfilled' ? tx.value.map((t) => t) : []))
        .flat()
        .sort((a, b) => BaseScriptService.sortTransactionCmp(a, b, order))
        .slice(0, limit)
        .map((tx) => tx.tx_hash);

      const orderedTxs = await Promise.all(
        orderedTxHashes.map(async (txHash) => {
          const tx = await this.ckbTransactionService.getTransactionFromRpc(txHash);
          return CkbTransaction.from(tx);
        }),
      );
      return orderedTxs.filter((tx) => !!tx);
    }

    if (scriptKey) {
      const result = await this.ckbTransactionService.getTransactions(
        scriptKey,
        order,
        limit,
        after || undefined,
      );
      const txs = await Promise.all(
        result.objects.map(async (tx) => {
          const txWithStatus = await this.ckbTransactionService.getTransactionFromRpc(tx.tx_hash);
          return CkbTransaction.from(txWithStatus);
        }),
      );
      return txs.filter((tx) => !!tx);
    }

    throw new BadRequestException('One of types and scriptKey must be provided');
  }

  @Query(() => CkbTransaction, {
    name: 'ckbTransaction',
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async getTransaction(
    @Args('txHash') txHash: string,
    @Loader(CkbRpcTransactionLoader) rpcTxLoader: CkbRpcTransactionLoaderType,
  ): Promise<CkbTransaction | null> {
    const tx = await rpcTxLoader.load(txHash);
    if (!tx) {
      return null;
    }
    return CkbTransaction.from(tx);
  }

  @ResolveField(() => [CkbCell], {
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async inputs(
    @Parent() tx: CkbTransaction,
    @Loader(CkbRpcTransactionLoader) rpcTxLoader: CkbRpcTransactionLoaderType,
  ): Promise<(CkbCell | null)[] | null> {
    const rpcTx = await rpcTxLoader.load(tx.hash);
    if (!rpcTx) {
      return null;
    }
    return Promise.all(
      rpcTx.transaction.inputs
        // Filter out cellbase transaction
        .filter((input) => !input.previous_output.tx_hash.endsWith('0'.repeat(64)))
        .map(async (_, i) => {
          const input = rpcTx.transaction.inputs[i];
          const previousTx = await rpcTxLoader.load(input.previous_output.tx_hash);
          if (!previousTx) {
            return null;
          }
          const index = BI.from(input.previous_output.index).toNumber();
          return CkbCell.fromTransaction(previousTx.transaction, index);
        }),
    );
  }

  @ResolveField(() => CkbBlock, { nullable: true, complexity: ComplexityType.RequestField })
  public async block(
    @Parent() tx: CkbTransaction,
    @Loader(CkbRpcBlockLoader) rpcBlockLoader: CkbRpcBlockLoaderType,
  ): Promise<CkbBlock | null> {
    const block = await rpcBlockLoader.load(tx.blockNumber.toString());
    if (!block) {
      return null;
    }
    return CkbBlock.from(block);
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async fee(
    @Parent() tx: CkbTransaction,
    @Loader(CkbExplorerTransactionLoader) explorerTxLoader: CkbExplorerTransactionLoaderType,
  ): Promise<number | null> {
    const explorerTx = await explorerTxLoader.load(tx.hash);
    if (!explorerTx) {
      return null;
    }
    return toNumber(explorerTx.transaction_fee);
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async feeRate(
    @Parent() tx: CkbTransaction,
    @Loader(CkbExplorerTransactionLoader) explorerTxLoader: CkbExplorerTransactionLoaderType,
  ): Promise<number | null> {
    const explorerTx = await explorerTxLoader.load(tx.hash);
    if (!explorerTx) {
      return null;
    }
    const fee = BI.from(explorerTx.transaction_fee);
    const size = BI.from(tx.size);
    const ratio = BI.from(1000);
    return fee.mul(ratio).div(size).toNumber();
  }

  @ResolveField(() => Float, { complexity: ComplexityType.RequestField })
  public async confirmations(@Parent() tx: CkbTransaction): Promise<number> {
    if (!tx.confirmed) {
      return 0;
    }
    const tipBlockNumber = await this.ckbTransactionService.getTipBlockNumber();
    const blockNumber = tx.blockNumber;
    return tipBlockNumber - blockNumber + 1;
  }
}


================================================
File: backend/src/modules/ckb/transaction/transaction.service.ts
================================================
import { Injectable } from '@nestjs/common';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';
import * as CkbExplorer from 'src/core/ckb-explorer/ckb-explorer.interface';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import { CkbSearchKeyInput } from './transaction.model';
import { BI } from '@ckb-lumos/bi';
import { OrderType } from 'src/modules/api.model';
import { Cacheable } from 'src/decorators/cacheable.decorator';

@Injectable()
export class CkbTransactionService {
  constructor(
    private ckbRpcService: CkbRpcWebsocketService,
    private ckbExplorerService: CkbExplorerService,
  ) {}

  public async getTransactionFromRpc(
    txHash: string,
  ): Promise<CkbRpc.TransactionWithStatusResponse> {
    return this.ckbRpcService.getTransaction(txHash);
  }

  public async getTransactionFromExplorer(txHash: string): Promise<CkbExplorer.DetailTransaction> {
    const res = await this.ckbExplorerService.getTransaction(txHash);
    return res.data.attributes;
  }

  public async getTipBlockNumber(): Promise<number> {
    return this.ckbRpcService.getTipBlockNumber();
  }

  @Cacheable({
    namespace: 'CkbTransactionService',
    key: (searchKey: CkbSearchKeyInput, order: OrderType, limit: number, after?: string) =>
      `getTransactions:${JSON.stringify(searchKey)}:${order}:${limit}:${after}`,
    ttl: 10_000,
  })
  public async getTransactions(
    searchKey: CkbSearchKeyInput,
    order: OrderType = OrderType.Desc,
    limit: number,
    after?: string,
  ): Promise<CkbRpc.GetTransactionsResult> {
    return this.ckbRpcService.getTransactions(
      {
        script: {
          code_hash: searchKey.script.codeHash,
          hash_type: searchKey.script.hashType,
          args: searchKey.script.args,
        },
        script_type: searchKey.scriptType,
      },
      order,
      BI.from(limit).toHexString(),
      after,
    );
  }
}


================================================
File: backend/src/modules/rgbpp/rgbpp.module.ts
================================================
import { Module } from '@nestjs/common';
import { RgbppCoinModule } from './coin/coin.module';
import { RgbppStatisticModule } from './statistic/statistic.module';
import { RgbppTransactionModule } from './transaction/transaction.module';
import { RgbppAddressModule } from './address/address.module';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { CkbRpcModule } from 'src/core/ckb-rpc/ckb-rpc.module';
import { RgbppService } from './rgbpp.service';
import { RgbppAssetModule } from './asset/asset.module';

@Module({
  imports: [
    CkbExplorerModule,
    CkbRpcModule,
    RgbppAddressModule,
    RgbppTransactionModule,
    RgbppCoinModule,
    RgbppStatisticModule,
    RgbppAssetModule,
  ],
  providers: [RgbppService],
  exports: [RgbppService],
})
export class RgbppModule {}


================================================
File: backend/src/modules/rgbpp/rgbpp.service.ts
================================================
import { BI } from '@ckb-lumos/bi';
import { Script } from '@ckb-lumos/lumos';
import { bytes } from '@ckb-lumos/lumos/codec';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import {
  getBtcTimeLockScript,
  getRgbppLockScript,
  isScriptEqual,
  remove0x,
  RGBPPLock,
} from '@rgbpp-sdk/ckb';
import { ONE_MINUTE_MS } from 'src/common/date';
import { BtcTestnetTypeMap, NetworkType } from 'src/constants';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';
import { Cacheable } from 'src/decorators/cacheable.decorator';
import { Env } from 'src/env';

@Injectable()
export class RgbppService {
  constructor(
    private configService: ConfigService<Env>,
    private ckbExplorerService: CkbExplorerService,
    private ckbRpcService: CkbRpcWebsocketService,
  ) {}

  private get rgbppLockScript() {
    const network = this.configService.get('NETWORK');
    const lockScript = getRgbppLockScript(
      network === NetworkType.mainnet,
      BtcTestnetTypeMap[network],
    );
    return lockScript;
  }

  private get btcTimeLockScript() {
    const network = this.configService.get('NETWORK');
    const lockScript = getBtcTimeLockScript(
      network === NetworkType.mainnet,
      BtcTestnetTypeMap[network],
    );
    return lockScript;
  }

  @Cacheable({
    key: 'RgbppService:getAllRgbppLockCells',
    ttl: ONE_MINUTE_MS,
  })
  public async getAllRgbppLockCells(): Promise<CkbRpc.Cell[]> {
    const rgbppTxs = await this.ckbExplorerService.getRgbppTransactions();
    const cells = await this.ckbRpcService.getCells(
      {
        script: {
          code_hash: this.rgbppLockScript.codeHash,
          hash_type: this.rgbppLockScript.hashType,
          args: '0x',
        },
        script_type: 'lock',
      },
      'desc',
      // rgbppTxs.meta.total * 10 is a rough estimation of the number of cells
      BI.from(rgbppTxs.meta.total * 10).toHexString(),
    );
    return cells.objects;
  }

  public parseRgbppLockArgs(args: string): { outIndex: number; btcTxid: string } {
    const unpack = RGBPPLock.unpack(args);
    const btcTxid = bytes.hexify(bytes.bytify(unpack.btcTxid).reverse());
    return {
      outIndex: unpack.outIndex,
      btcTxid: remove0x(btcTxid),
    };
  }

  public isRgbppLockScript(script: Script): boolean {
    return isScriptEqual(
      {
        ...script,
        args: '0x',
      },
      this.rgbppLockScript,
    );
  }

  public isBtcTimeLockScript(script: Script): boolean {
    return isScriptEqual(
      {
        ...script,
        args: '0x',
      },
      this.btcTimeLockScript,
    );
  }
}


================================================
File: backend/src/modules/rgbpp/address/address.model.ts
================================================
import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType({ description: 'Rgbpp Address' })
export class RgbppAddress {
  @Field(() => String)
  address: string;

  public static from(address: string): RgbppAddress {
    return {
      address,
    };
  }
}


================================================
File: backend/src/modules/rgbpp/address/address.module.ts
================================================
import { forwardRef, Module } from '@nestjs/common';
import { RgbppAddressResolver } from './address.resolver';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { BitcoinApiModule } from 'src/core/bitcoin-api/bitcoin-api.module';
import { CkbRpcModule } from 'src/core/ckb-rpc/ckb-rpc.module';
import { RgbppModule } from '../rgbpp.module';
import { CkbTransactionModule } from 'src/modules/ckb/transaction/transaction.module';
import { BullModule } from '@nestjs/bullmq';
import { RgbppAddressService } from './address.service';

@Module({
  imports: [
    CkbExplorerModule,
    BitcoinApiModule,
    CkbRpcModule,
    CkbTransactionModule,
    forwardRef(() => RgbppModule),
    BullModule.registerQueue({
      name: 'rgbpp-address',
      defaultJobOptions: {
        removeOnComplete: true,
        removeOnFail: true,
      },
    }),
  ],
  providers: [RgbppAddressResolver, RgbppAddressService],
})
export class RgbppAddressModule {}


================================================
File: backend/src/modules/rgbpp/address/address.resolver.ts
================================================
import { Args, Float, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import { RgbppAddress } from './address.model';
import { ParentField } from 'src/decorators/parent-field.decorator';
import { RgbppAsset } from '../asset/asset.model';
import { CkbXUDTInfo } from 'src/modules/ckb/cell/cell.model';
import { RgbppAddressService } from './address.service';

@Resolver(() => RgbppAddress)
export class RgbppAddressResolver {
  constructor(
    private ckbExplorerService: CkbExplorerService,
    private rgbppAddressService: RgbppAddressService,
  ) {}

  @Query(() => RgbppAddress, { name: 'rgbppAddress', nullable: true })
  public async getBtcAddress(@Args('address') address: string): Promise<RgbppAddress> {
    return RgbppAddress.from(address);
  }

  @ResolveField(() => Float)
  public async utxosCount(@ParentField('address') address: string): Promise<number> {
    const cells = await this.ckbExplorerService.getAddressRgbppCells({
      address,
    });
    return cells.meta.total;
  }

  @ResolveField(() => [RgbppAsset])
  public async assets(@ParentField('address') address: string): Promise<RgbppAsset[]> {
    const assets = await this.rgbppAddressService.getAddressAssets(address);
    return assets;
  }

  @ResolveField(() => [CkbXUDTInfo])
  public async balances(@ParentField('address') address: string): Promise<(CkbXUDTInfo | null)[]> {
    const balances = await this.rgbppAddressService.getAddressBalances(address);
    return balances;
  }
}


================================================
File: backend/src/modules/rgbpp/address/address.service.ts
================================================
import { BI } from '@ckb-lumos/bi';
import { Injectable } from '@nestjs/common';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { CkbXUDTInfo } from 'src/modules/ckb/cell/cell.model';
import { RgbppAsset } from '../asset/asset.model';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import { CKB_CHAIN_ID } from 'src/constants';
import { Cacheable } from 'src/decorators/cacheable.decorator';

@Injectable()
export class RgbppAddressService {
  constructor(
    private prismaService: PrismaService,
    private ckbExplorerService: CkbExplorerService,
    private ckbRpcService: CkbRpcWebsocketService,
  ) { }

  @Cacheable({
    namespace: 'RgbppAddressService',
    key: (address: string) => `getAddressAssets:${address}`,
    ttl: 10_000,
  })
  public async getAddressAssets(address: string) {
    const lockScript = await this.prismaService.lockScript.findMany({
      where: {
        ownerAddress: address,
        chainId: CKB_CHAIN_ID,
      },
    });
    if (lockScript.length === 0) {
      return [];
    }
    const results = await this.prismaService.asset.findMany({
      where: {
        lockScriptHash: {
          in: lockScript.map((script) => script.scriptHash),
        },
        isLive: true,
      },
    });
    if (results.length === 0) {
      return [];
    }
    const outputMap = results.reduce(
      (map, { txHash, index }) => {
        if (map[txHash] === undefined) {
          map[txHash] = [];
        }
        map[txHash].push(index);
        return map;
      },
      {} as Record<string, string[]>,
    );
    const assets = await Promise.all(
      Object.keys(outputMap).map(async (txHash) => {
        const tx = await this.ckbRpcService.getTransaction(txHash);
        return outputMap[txHash].map((index) =>
          RgbppAsset.fromTransaction(address, tx.transaction, BI.from(index).toNumber()),
        );
      }),
    );
    return assets.flat();
  }

  public async getAddressBalances(address: string): Promise<CkbXUDTInfo[]> {
    const result = await this.prismaService.holder.findMany({
      where: {
        address,
      },
      orderBy: {
        assetAmount: 'desc',
      },
    });
    const balances = await Promise.all(
      result.map(async ({ typeScriptHash, assetAmount }) => {
        const info = await this.ckbExplorerService.getXUDT(typeScriptHash);
        const xudtInfo: CkbXUDTInfo = {
          symbol: info.data.attributes.symbol,
          decimal: BI.from(info.data.attributes.decimal).toNumber(),
          typeHash: typeScriptHash,
          amount: assetAmount.toHex(),
        };
        return xudtInfo;
      }),
    );
    return balances;
  }
}


================================================
File: backend/src/modules/rgbpp/asset/asset.model.ts
================================================
import { Field, ObjectType } from '@nestjs/graphql';
import { CkbCell } from 'src/modules/ckb/cell/cell.model';
import * as CkbRpc from 'src/core/ckb-rpc/ckb-rpc.interface';

@ObjectType({ description: 'Rgbpp Asset' })
export class RgbppAsset {
  @Field(() => String)
  owner: string;

  @Field(() => CkbCell)
  cell: CkbCell;

  public static fromCell(address: string, cell: CkbRpc.Cell): RgbppAsset {
    return {
      owner: address,
      cell: CkbCell.fromCell(cell),
    };
  }

  public static fromTransaction(
    address: string,
    tx: CkbRpc.Transaction,
    index: number,
  ): RgbppAsset {
    return {
      owner: address,
      cell: CkbCell.fromTransaction(tx, index),
    };
  }
}


================================================
File: backend/src/modules/rgbpp/asset/asset.module.ts
================================================
import { forwardRef, Module } from '@nestjs/common';
import { RgbppAssetResolver } from './asset.resolver';
import { RgbppModule } from '../rgbpp.module';

@Module({
  imports: [forwardRef(() => RgbppModule)],
  providers: [RgbppAssetResolver],
})
export class RgbppAssetModule {}


================================================
File: backend/src/modules/rgbpp/asset/asset.resolver.ts
================================================
import { Parent, ResolveField, Resolver } from '@nestjs/graphql';
import { BitcoinOutput } from 'src/modules/bitcoin/output/output.model';
import { RgbppAsset } from './asset.model';
import {
  BitcoinTransactionLoader,
  BitcoinTransactionLoaderType,
} from 'src/modules/bitcoin/transaction/transaction.dataloader';
import { RgbppService } from '../rgbpp.service';
import { Loader } from 'src/common/dataloader';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => RgbppAsset)
export class RgbppAssetResolver {
  constructor(private rgbppService: RgbppService) { }

  @ResolveField(() => BitcoinOutput, { nullable: true, complexity: ComplexityType.RequestField })
  public async utxo(
    @Parent() asset: RgbppAsset,
    @Loader(BitcoinTransactionLoader) txLoader: BitcoinTransactionLoaderType,
  ): Promise<BitcoinOutput | null> {
    try {
      const { args } = asset.cell.lock;
      const { btcTxid, outIndex } = this.rgbppService.parseRgbppLockArgs(args);
      const tx = await txLoader.load(btcTxid);
      if (!tx) {
        return null;
      }
      const output = tx.vout[outIndex];
      return BitcoinOutput.from({
        txid: btcTxid,
        vout: outIndex,
        ...output,
      });
    } catch {
      return null;
    }
  }
}


================================================
File: backend/src/modules/rgbpp/coin/coin.dataloader.ts
================================================
import { Injectable, Logger } from '@nestjs/common';
import DataLoader from 'dataloader';
import { DataLoaderResponse } from 'src/common/dataloader';
import * as CkbExplorerInterface from 'src/core/ckb-explorer/ckb-explorer.interface';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

export interface CkbExplorerXUDTTransactionsLoaderKey {
  typeHash: string;
  page: number;
  pageSize: number;
  txHash?: string;
  addressHash?: string;
}

@Injectable()
export class CkbExplorerXUDTTransactionsLoader
  implements
    NestDataLoader<
      CkbExplorerXUDTTransactionsLoaderKey,
      CkbExplorerInterface.PaginatedResponse<CkbExplorerInterface.Transaction> | null
    >
{
  private logger = new Logger(CkbExplorerXUDTTransactionsLoader.name);

  constructor(private ckbExplorerService: CkbExplorerService) {}

  public getOptions() {
    return {
      cacheKeyFn: (key: CkbExplorerXUDTTransactionsLoaderKey) => {
        return `${key.typeHash}-${key.page}-${key.pageSize}-${key.txHash}-${key.addressHash}`;
      },
    };
  }

  public getBatchFunction() {
    return async (keys: CkbExplorerXUDTTransactionsLoaderKey[]) => {
      this.logger.debug(`Loading XUDT transactions from CkbExplorerService: ${keys.join(', ')}`);
      const results = await Promise.allSettled(
        keys.map(async (params) => {
          const { typeHash, page, pageSize, txHash, addressHash } = params;
          const txs = await this.ckbExplorerService.getXUDTTransactions(typeHash, {
            page,
            pageSize,
            txHash,
            addressHash,
          });
          return txs;
        }),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(
          `Requesting: ${JSON.stringify(keys[index])}, occurred error: ${result.reason}`,
        );
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type CkbExplorerXUDTTransactionsLoaderType = DataLoader<
  CkbExplorerXUDTTransactionsLoaderKey,
  CkbExplorerInterface.PaginatedResponse<CkbExplorerInterface.Transaction> | null
>;
export type CkbExplorerXUDTTransactionsLoaderResponse =
  DataLoaderResponse<CkbExplorerXUDTTransactionsLoader>;


================================================
File: backend/src/modules/rgbpp/coin/coin.model.ts
================================================
import { toNumber } from 'lodash';
import { Field, Float, Int, ObjectType, registerEnumType } from '@nestjs/graphql';
import { CkbScript } from 'src/modules/ckb/script/script.model';
import * as CkbExplorer from 'src/core/ckb-explorer/ckb-explorer.interface';

registerEnumType(CkbExplorer.TransactionListSortType, {
  name: 'TransactionListSortType',
});

@ObjectType({ description: 'RGB++ Coin' })
export class RgbppCoin {
  @Field(() => String, { nullable: true })
  name: string | null;

  @Field(() => String, { nullable: true })
  description: string | null;

  @Field(() => String)
  symbol: string;

  @Field(() => Float)
  decimal: number;

  @Field(() => String, { nullable: true })
  icon: string | null;

  @Field(() => String, { nullable: true })
  typeHash: string | null;

  @Field(() => CkbScript, { nullable: true })
  typeScript: CkbScript | null;

  @Field(() => Int)
  h24CkbTransactionsCount: number;

  @Field(() => Float)
  totalAmount: number;

  @Field(() => String)
  issuer: string;

  @Field(() => Date)
  deployedAt: Date;

  public static from(xudt: CkbExplorer.XUDT): RgbppCoin | null {
    if (!xudt) {
      return null;
    }
    return {
      name: xudt.full_name,
      description: xudt.description,
      symbol: xudt.symbol ?? xudt.type_hash.slice(0, 6),
      decimal: toNumber(xudt.decimal),
      icon: xudt.icon_file,
      typeHash: xudt.type_hash,
      typeScript: CkbScript.from(xudt.type_script),
      h24CkbTransactionsCount: toNumber(xudt.h24_ckb_transactions_count),
      totalAmount: toNumber(xudt.total_amount),
      issuer: xudt.issuer_address,
      deployedAt: new Date(toNumber(xudt.created_at)),
    };
  }
}

@ObjectType({ description: 'RGB++ Coin List' })
export class RgbppCoinList {
  @Field(() => [RgbppCoin])
  coins: RgbppCoin[];

  @Field(() => Int)
  total: number;

  @Field(() => Int)
  pageSize: number;
}


================================================
File: backend/src/modules/rgbpp/coin/coin.module.ts
================================================
import { Module } from '@nestjs/common';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { RgbppCoinResolver } from './coin.resolver';
import { CkbExplorerXUDTTransactionsLoader } from './coin.dataloader';
import { RgbppCoinService } from './coin.service';

@Module({
  imports: [CkbExplorerModule],
  providers: [RgbppCoinResolver, RgbppCoinService, CkbExplorerXUDTTransactionsLoader],
})
export class RgbppCoinModule { }


================================================
File: backend/src/modules/rgbpp/coin/coin.resolver.ts
================================================
import { Args, Float, Int, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import { TransactionListSortType, XUDTTag } from 'src/core/ckb-explorer/ckb-explorer.interface';
import { RgbppTransaction } from '../transaction/transaction.model';
import { RgbppCoin, RgbppCoinList } from './coin.model';
import { Loader } from 'src/common/dataloader';
import {
  CkbExplorerXUDTTransactionsLoader,
  CkbExplorerXUDTTransactionsLoaderType,
} from './coin.dataloader';
import { Layer, RgbppHolder } from '../statistic/statistic.model';
import { OrderType } from 'src/modules/api.model';
import { RgbppCoinService } from './coin.service';
import { ComplexityType } from 'src/modules/complexity.plugin';

@Resolver(() => RgbppCoin)
export class RgbppCoinResolver {
  constructor(
    private ckbExplorerService: CkbExplorerService,
    private rgbppCoinService: RgbppCoinService,
  ) { }

  @Query(() => RgbppCoinList, {
    name: 'rgbppCoins',
    complexity: ({ args, childComplexity }) => (args.pageSize ?? 10) * childComplexity,
  })
  public async coins(
    @Args('page', { type: () => Int, nullable: true }) page: number = 1,
    @Args('pageSize', { type: () => Int, nullable: true }) pageSize: number = 10,
    @Args('sort', { type: () => TransactionListSortType, nullable: true })
    sort = TransactionListSortType.TransactionsDesc,
  ): Promise<RgbppCoinList> {
    const response = await this.ckbExplorerService.getXUDTList({
      page,
      pageSize,
      sort,
      tags: [XUDTTag.RgbppCompatible],
    });
    const coins = response.data
      .map((coin) => RgbppCoin.from(coin.attributes))
      .filter((coin) => coin !== null);
    return {
      coins,
      total: response.meta.total,
      pageSize: response.meta.page_size,
    };
  }

  @Query(() => RgbppCoin, { name: 'rgbppCoin', nullable: true })
  public async coin(
    @Args('typeHash', { type: () => String }) typeHash: string,
  ): Promise<RgbppCoin | null> {
    const response = await this.ckbExplorerService.getXUDT(typeHash);
    return RgbppCoin.from(response.data.attributes);
  }

  @ResolveField(() => [RgbppTransaction], {
    nullable: true,
    complexity: ({ args, childComplexity }) => (args.pageSize ?? 10) * childComplexity,
  })
  public async transactions(
    @Parent() coin: RgbppCoin,
    @Args('page', { type: () => Int, nullable: true }) page: number = 1,
    @Args('pageSize', { type: () => Int, nullable: true }) pageSize: number = 10,
    @Loader(CkbExplorerXUDTTransactionsLoader) txsLoader: CkbExplorerXUDTTransactionsLoaderType,
  ): Promise<RgbppTransaction[] | null> {
    if (!coin.typeHash) {
      return null;
    }
    const transactions = await txsLoader.load({
      typeHash: coin.typeHash,
      page,
      pageSize,
    });
    if (!transactions) {
      return null;
    }
    return transactions.data.map((tx) => RgbppTransaction.fromCkbTransaction(tx.attributes));
  }

  @ResolveField(() => Float, { nullable: true, complexity: ComplexityType.RequestField })
  public async transactionsCount(
    @Parent() coin: RgbppCoin,
    @Loader(CkbExplorerXUDTTransactionsLoader) txsLoader: CkbExplorerXUDTTransactionsLoaderType,
  ): Promise<number | null> {
    if (!coin.typeHash) {
      return null;
    }
    const transactions = await txsLoader.load({
      typeHash: coin.typeHash,
      page: 1,
      pageSize: 1,
    });
    if (!transactions) {
      return null;
    }
    return transactions.meta.total;
  }

  @ResolveField(() => String)
  public async amount(
    @Parent() coin: RgbppCoin,
    @Args('layer', { type: () => Layer, nullable: true }) layer?: Layer,
  ): Promise<String> {
    if (!coin.typeHash) {
      return '0x0';
    }
    const amount = await this.rgbppCoinService.getCoinAmount(
      coin.typeHash,
      layer ? layer === Layer.L1 : undefined,
    );
    return amount;
  }

  @ResolveField(() => [RgbppHolder], { nullable: true })
  public async holders(
    @Parent() coin: RgbppCoin,
    @Args('layer', { type: () => Layer, nullable: true }) layer?: Layer,
    @Args('page', { type: () => Int, nullable: true }) page?: number,
    @Args('pageSize', { type: () => Int, nullable: true }) pageSize?: number,
    @Args('order', { type: () => OrderType, nullable: true }) order?: OrderType,
  ) {
    if (!coin.typeHash) {
      return null;
    }
    const holders = await this.rgbppCoinService.getCoinHolders(coin.typeHash, {
      page: page ?? 1,
      pageSize: pageSize ?? 10,
      order,
      isLayer1: layer ? layer === Layer.L1 : undefined,
    });
    return holders;
  }

  @ResolveField(() => Float, { nullable: true })
  public async holdersCount(
    @Parent() coin: RgbppCoin,
    @Args('layer', { type: () => Layer, nullable: true }) layer?: Layer,
  ) {
    if (!coin.typeHash) {
      return null;
    }
    const count = await this.rgbppCoinService.getCoinHoldersCount(
      coin.typeHash,
      layer ? layer === Layer.L1 : undefined,
    );
    return count;
  }
}


================================================
File: backend/src/modules/rgbpp/coin/coin.service.ts
================================================
import { Inject, Injectable } from '@nestjs/common';
import { CACHE_MANAGER, Cache } from '@nestjs/cache-manager';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { Holder } from '@prisma/client';
import { BI } from '@ckb-lumos/bi';

export interface GetCoinHoldersParams {
  page: number;
  pageSize?: number;
  order?: 'asc' | 'desc';
  isLayer1?: boolean;
}

@Injectable()
export class RgbppCoinService {
  constructor(
    private prismaService: PrismaService,
    @Inject(CACHE_MANAGER) protected cacheManager: Cache,
  ) { }

  public async getCoinHoldersCount(scriptHash: string, isLayer1?: boolean): Promise<number> {
    const results = await this.prismaService.holder.groupBy({
      by: ['address'],
      where: {
        typeScriptHash: scriptHash,
        ...(isLayer1 !== undefined && { isLayer1 }),
      },
    });
    return results.length;
  }

  public async getCoinHolders(
    scriptHash: string,
    { page = 1, pageSize = 10, order, isLayer1 }: GetCoinHoldersParams,
  ): Promise<Pick<Holder, 'address' | 'assetCount'>[]> {
    const results = await this.prismaService.holder.groupBy({
      by: ['address'],
      where: {
        typeScriptHash: scriptHash,
        ...(isLayer1 !== undefined && { isLayer1 }),
      },
      _sum: {
        assetCount: true,
        assetAmount: true,
      },
      orderBy: {
        _sum: {
          assetAmount: order ?? 'desc',
        },
      },
      take: pageSize,
      skip: (page - 1) * pageSize,
    });
    const holders = results.map((result) => ({
      address: result.address,
      assetCount: result._sum.assetCount || 0,
      assetAmount: result._sum.assetAmount?.toHex() ?? '0x0',
    }));
    return holders;
  }

  public async getCoinAmount(scriptHash: string, isLayer1?: boolean): Promise<string> {
    const result = await this.prismaService.holder.aggregate({
      _sum: {
        assetAmount: true,
      },
      where: {
        typeScriptHash: scriptHash,
        ...(isLayer1 !== undefined && { isLayer1 }),
      },
    });
    return result._sum.assetAmount?.toHex() ?? '0x0';
  }
}


================================================
File: backend/src/modules/rgbpp/statistic/statistic.model.ts
================================================
import { Field, Int, ObjectType, registerEnumType } from '@nestjs/graphql';

export enum Layer {
  L1 = 'L1',
  L2 = 'L2',
}

registerEnumType(Layer, {
  name: 'Layer',
});

@ObjectType({ description: 'RGB++ Statistic' })
export class RgbppStatistic { }

@ObjectType({ description: 'RGB++ Holder' })
export class RgbppHolder {
  @Field(() => String)
  address: string;

  @Field(() => Int)
  assetCount: number;

  @Field(() => String, { nullable: true })
  assetAmount: string;
}


================================================
File: backend/src/modules/rgbpp/statistic/statistic.module.ts
================================================
import { forwardRef, Module } from '@nestjs/common';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { RgbppStatisticResolver } from './statistic.resolver';
import { RgbppStatisticService } from './statistic.service';
import { CkbRpcModule } from 'src/core/ckb-rpc/ckb-rpc.module';
import { BitcoinApiModule } from 'src/core/bitcoin-api/bitcoin-api.module';
import { RgbppModule } from '../rgbpp.module';
import { CkbScriptModule } from 'src/modules/ckb/script/script.module';
import { RgbppTransactionModule } from '../transaction/transaction.module';

@Module({
  imports: [
    CkbRpcModule,
    CkbExplorerModule,
    CkbRpcModule,
    BitcoinApiModule,
    CkbScriptModule,
    RgbppTransactionModule,
    forwardRef(() => RgbppModule),
  ],
  providers: [RgbppStatisticResolver, RgbppStatisticService],
  exports: [RgbppStatisticService],
})
export class RgbppStatisticModule {}


================================================
File: backend/src/modules/rgbpp/statistic/statistic.resolver.ts
================================================
import { Args, Float, Int, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { Layer, RgbppHolder, RgbppStatistic } from './statistic.model';
import { RgbppStatisticService } from './statistic.service';
import { OrderType } from 'src/modules/api.model';
import { Holder, LeapDirection } from '@prisma/client';

@Resolver(() => RgbppStatistic)
export class RgbppStatisticResolver {
  constructor(private rgbppStatisticService: RgbppStatisticService) { }

  @Query(() => RgbppStatistic, { name: 'rgbppStatistic' })
  public async getRgbppStatistic(): Promise<RgbppStatistic> {
    return {};
  }

  @ResolveField(() => [RgbppHolder])
  public async holders(
    @Args('layer', { type: () => Layer }) layer: Layer,
    @Args('page', { type: () => Int, nullable: true }) page?: number,
    @Args('pageSize', { type: () => Int, nullable: true }) pageSize?: number,
    @Args('order', { type: () => OrderType, nullable: true }) order?: OrderType,
  ): Promise<Pick<Holder, 'address' | 'assetCount'>[]> {
    const holders = await this.rgbppStatisticService.getRgbppAssetsHolders({
      page: page ?? 1,
      pageSize: pageSize ?? 10,
      order: order ?? 'desc',
      isLayer1: layer === Layer.L1,
    });
    return holders;
  }

  @ResolveField(() => Float)
  public async holdersCount(@Args('layer', { type: () => Layer }) layer: Layer): Promise<number> {
    const count = await this.rgbppStatisticService.getRgbppAssetsHoldersCount(layer === Layer.L1);
    return count;
  }

  @ResolveField(() => Float, { nullable: true })
  public async latest24HoursL1TransactionsCount(
    @Args('leapDirection', { type: () => LeapDirection, nullable: true })
    leapDirection?: LeapDirection,
  ): Promise<number | null> {
    const transactions = await this.rgbppStatisticService.getLatest24L1Transactions(leapDirection);
    return transactions?.length ?? null;
  }

  @ResolveField(() => Float, { nullable: true })
  public async latest24HoursL2TransactionsCount(): Promise<number | null> {
    const transactions = await this.rgbppStatisticService.getLatest24L2Transactions();
    return transactions.length ?? null;
  }
}


================================================
File: backend/src/modules/rgbpp/statistic/statistic.service.ts
================================================
import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { Holder, LeapDirection } from '@prisma/client';
import { CKB_CHAIN_ID } from 'src/constants';

export interface GetRgbppAssetsHoldersParams {
  page: number;
  pageSize?: number;
  order?: 'asc' | 'desc';
  isLayer1?: boolean;
}

@Injectable()
export class RgbppStatisticService {
  constructor(private prismaService: PrismaService) { }

  public async getLatest24L1Transactions(leapDirection?: LeapDirection) {
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const transactions = await this.prismaService.transaction.findMany({
      where: {
        chainId: CKB_CHAIN_ID,
        isRgbpp: true,
        block: {
          timestamp: {
            gte: twentyFourHoursAgo,
          },
        },
        ...(leapDirection ? { leapDirection } : {}),
      },
    });
    return transactions;
  }

  public async getLatest24L2Transactions() {
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const transactions = await this.prismaService.transaction.findMany({
      where: {
        isRgbpp: false,
        block: {
          timestamp: {
            gte: twentyFourHoursAgo,
          },
        },
      },
    });
    return transactions;
  }

  public async getRgbppAssetsHoldersCount(isLayer1: boolean): Promise<number> {
    const results = await this.prismaService.holder.groupBy({
      by: ['address'],
      where: {
        isLayer1,
      },
    });
    return results.length;
  }

  public async getRgbppAssetsHolders({
    page,
    pageSize = 10,
    order,
    isLayer1,
  }: GetRgbppAssetsHoldersParams): Promise<Pick<Holder, 'address' | 'assetCount'>[]> {
    const results = await this.prismaService.holder.groupBy({
      by: ['address'],
      where: {
        isLayer1,
      },
      _sum: {
        assetCount: true,
      },
      orderBy: {
        _sum: {
          assetCount: order ?? 'desc',
        },
      },
      take: pageSize,
      skip: (page - 1) * pageSize,
    });
    const holders = results.map((result) => ({
      address: result.address,
      assetCount: result._sum.assetCount || 0,
    }));
    return holders;
  }
}


================================================
File: backend/src/modules/rgbpp/transaction/transaction.dataloader.ts
================================================
import DataLoader from 'dataloader';
import { Injectable, Logger } from '@nestjs/common';
import { DataLoaderResponse } from 'src/common/dataloader';
import { RgbppTransactionService } from './transaction.service';
import { RgbppTransaction } from './transaction.model';
import * as Sentry from '@sentry/nestjs';
import { NestDataLoader } from 'src/common/dataloader';

@Injectable()
export class RgbppTransactionLoader implements NestDataLoader<string, RgbppTransaction | null> {
  private logger = new Logger(RgbppTransactionLoader.name);

  constructor(private transactionService: RgbppTransactionService) {}

  public getBatchFunction() {
    return async (ids: string[]) => {
      this.logger.debug(`Loading rgbpp transactions: ${ids.join(', ')}`);
      const results = await Promise.allSettled(
        ids.map((txidOrTxHash) => this.transactionService.getTransaction(txidOrTxHash)),
      );
      return results.map((result, index) => {
        if (result.status === 'fulfilled') {
          return result.value;
        }
        this.logger.error(`Requesting: ${ids[index]}, occurred error: ${result.reason}`);
        Sentry.captureException(result.reason);
        return null;
      });
    };
  }
}
export type RgbppTransactionLoaderType = DataLoader<string, RgbppTransaction | null>;
export type RgbppTransactionLoaderResponse = DataLoaderResponse<RgbppTransactionLoader>;


================================================
File: backend/src/modules/rgbpp/transaction/transaction.model.ts
================================================
import { Field, Int, ObjectType, registerEnumType } from '@nestjs/graphql';
import { Block, LeapDirection, Transaction } from '@prisma/client';
import { toNumber } from 'lodash';
import * as CkbExplorer from 'src/core/ckb-explorer/ckb-explorer.interface';

registerEnumType(LeapDirection, {
  name: 'LeapDirection',
});

@ObjectType({ description: 'RGB++ Transaction' })
export class RgbppTransaction {
  @Field(() => String)
  ckbTxHash: string;

  @Field(() => String, { nullable: true })
  btcTxid: string | null;

  @Field(() => Int)
  blockNumber: number;

  @Field(() => Date, { nullable: true })
  blockTime: Date | null;

  public static fromRgbppTransaction(tx: CkbExplorer.RgbppTransaction) {
    return {
      ckbTxHash: tx.tx_hash,
      btcTxid: tx.rgb_txid,
      blockNumber: tx.block_number,
      blockTime: tx.block_timestamp ? new Date(tx.block_timestamp) : null,
    };
  }

  public static fromCkbTransaction(tx: CkbExplorer.Transaction) {
    return {
      ckbTxHash: tx.transaction_hash,
      btcTxid: tx.is_rgb_transaction ? tx.rgb_txid : null,
      blockNumber: toNumber(tx.block_number),
      blockTime: tx.block_timestamp ? new Date(toNumber(tx.block_timestamp)) : null,
    };
  }

  public static from(tx: Transaction & { block: Block }) {
    return {
      ckbTxHash: tx.hash,
      btcTxid: tx.btcTxid,
      blockNumber: tx.blockNumber,
      blockTime: tx.block.timestamp ? new Date(tx.block.timestamp) : null,
    };
  }
}

@ObjectType({ description: 'RGB++ latest transaction list' })
export class RgbppLatestTransactionList {
  @Field(() => [RgbppTransaction])
  txs: RgbppTransaction[];

  @Field(() => Int)
  total: number;

  @Field(() => Int)
  pageSize: number;
}


================================================
File: backend/src/modules/rgbpp/transaction/transaction.module.ts
================================================
import { forwardRef, Module } from '@nestjs/common';
import { BitcoinApiModule } from 'src/core/bitcoin-api/bitcoin-api.module';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';
import { CkbTransactionModule } from 'src/modules/ckb/transaction/transaction.module';
import { RgbppTransactionResolver } from './transaction.resolver';
import { RgbppTransactionService } from './transaction.service';
import { RgbppTransactionLoader } from './transaction.dataloader';
import { CkbRpcModule } from 'src/core/ckb-rpc/ckb-rpc.module';
import { RgbppModule } from '../rgbpp.module';
import { CkbScriptModule } from 'src/modules/ckb/script/script.module';

@Module({
  imports: [
    CkbExplorerModule,
    CkbRpcModule,
    CkbTransactionModule,
    CkbScriptModule,
    BitcoinApiModule,
    forwardRef(() => RgbppModule),
  ],
  providers: [RgbppTransactionResolver, RgbppTransactionService, RgbppTransactionLoader],
  exports: [RgbppTransactionLoader, RgbppTransactionService],
})
export class RgbppTransactionModule {}


================================================
File: backend/src/modules/rgbpp/transaction/transaction.resolver.ts
================================================
import { Loader } from 'src/common/dataloader';
import { Args, Int, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { CkbTransaction } from 'src/modules/ckb/transaction/transaction.model';
import {
  CkbRpcTransactionLoader,
  CkbRpcTransactionLoaderType,
} from 'src/modules/ckb/transaction/transaction.dataloader';
import { BitcoinTransaction } from 'src/modules/bitcoin/transaction/transaction.model';
import { RgbppTransactionService } from './transaction.service';
import {
  BitcoinTransactionLoader,
  BitcoinTransactionLoaderType,
} from 'src/modules/bitcoin/transaction/transaction.dataloader';
import { RgbppTransaction, RgbppLatestTransactionList } from './transaction.model';
import { RgbppTransactionLoader, RgbppTransactionLoaderType } from './transaction.dataloader';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { BI } from '@ckb-lumos/bi';
import { LeapDirection } from '@prisma/client';
import { ComplexityType } from 'src/modules/complexity.plugin';
import { isDate } from 'lodash';

@Resolver(() => RgbppTransaction)
export class RgbppTransactionResolver {
  constructor(
    private rgbppTransactionService: RgbppTransactionService,
    private bitcoinApiService: BitcoinApiService,
  ) { }

  @Query(() => RgbppLatestTransactionList, {
    name: 'rgbppLatestTransactions',
    complexity: ({ args, childComplexity }) => (args.limit ?? 10) * childComplexity,
  })
  public async getRecentTransactions(
    @Args('limit', { type: () => Int, nullable: true }) limit: number = 10,
  ): Promise<RgbppLatestTransactionList> {
    const transactions = await this.rgbppTransactionService.getLatestTransactions(limit);

    return {
      txs: transactions,
      total: transactions.length,
      pageSize: 1,
    };
  }

  @Query(() => RgbppLatestTransactionList, {
    name: 'rgbppLatestL1Transactions',
    complexity: ({ args, childComplexity }) => (args.limit ?? 10) * childComplexity,
  })
  public async getLatestL1Transactions(
    @Args('limit', { type: () => Int, nullable: true }) limit: number = 10,
  ): Promise<RgbppLatestTransactionList> {
    const transactions = await this.rgbppTransactionService.getLatestL1Transactions(limit);
    return {
      txs: transactions,
      total: transactions.length,
      pageSize: 1,
    };
  }

  @Query(() => RgbppLatestTransactionList, {
    name: 'rgbppLatestL2Transactions',
    complexity: ({ args, childComplexity }) => (args.limit ?? 10) * childComplexity,
  })
  public async getLatestL2Transactions(
    @Args('limit', { type: () => Int, nullable: true }) limit: number = 10,
  ): Promise<RgbppLatestTransactionList> {
    const transactions = await this.rgbppTransactionService.getLatestL2Transactions(limit);
    return {
      txs: transactions,
      total: transactions.length,
      pageSize: 1,
    };
  }

  @Query(() => RgbppTransaction, {
    name: 'rgbppTransaction',
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async getTransaction(
    @Args('txidOrTxHash') txidOrTxHash: string,
    @Loader(RgbppTransactionLoader) txLoader: RgbppTransactionLoaderType,
  ): Promise<RgbppTransaction | null> {
    const tx = await txLoader.load(txidOrTxHash);
    return tx || null;
  }

  @ResolveField(() => Date, { complexity: ComplexityType.RequestField })
  public async timestamp(
    @Parent() tx: RgbppTransaction,
    @Loader(BitcoinTransactionLoader) btcTxLoader: BitcoinTransactionLoaderType,
    @Loader(CkbRpcTransactionLoader) ckbTxLoader: CkbRpcTransactionLoaderType,
  ): Promise<Date | null> {
    const { btcTxid } = tx;
    if (btcTxid) {
      const [txTime] = await this.bitcoinApiService.getTransactionTimes({ txids: [btcTxid] });
      // get bitcoin transaction created time when pending
      if (txTime) {
        return new Date(txTime * 1000);
      }

      // get bitcoin transaction confirmed time when ckb transaction is pending
      if (!tx.blockTime) {
        const btcTx = await btcTxLoader.load(btcTxid);
        const btcBlockTime = btcTx!.status.block_time;
        if (btcBlockTime) {
          return new Date(btcBlockTime * 1000);
        }
      }
    }
    // get ckb transaction created time when pending
    if (!tx.blockTime) {
      const ckbTx = await ckbTxLoader.load(tx.ckbTxHash);
      return new Date(BI.from(ckbTx?.time_added_to_pool).toNumber());
    }
    return isDate(tx.blockTime) ? tx.blockTime : new Date(tx.blockTime);
  }

  @ResolveField(() => LeapDirection, { nullable: true, complexity: ComplexityType.RequestField })
  public async leapDirection(
    @Parent() tx: RgbppTransaction,
    @Loader(CkbRpcTransactionLoader) ckbRpcTxLoader: CkbRpcTransactionLoaderType,
  ): Promise<LeapDirection | null> {
    const ckbTx = await ckbRpcTxLoader.load(tx.ckbTxHash);
    if (!ckbTx) {
      return null;
    }
    return this.rgbppTransactionService.getLeapDirectionByCkbTx(ckbTx.transaction);
  }

  @ResolveField(() => CkbTransaction, { nullable: true, complexity: ComplexityType.RequestField })
  public async ckbTransaction(
    @Parent() tx: RgbppTransaction,
    @Loader(CkbRpcTransactionLoader) ckbRpcTxLoader: CkbRpcTransactionLoaderType,
  ): Promise<CkbTransaction | null> {
    const ckbTx = await ckbRpcTxLoader.load(tx.ckbTxHash);
    if (!ckbTx) {
      return null;
    }
    return CkbTransaction.from(ckbTx);
  }

  @ResolveField(() => BitcoinTransaction, {
    nullable: true,
    complexity: ComplexityType.RequestField,
  })
  public async btcTransaction(
    @Parent() tx: RgbppTransaction,
    @Loader(BitcoinTransactionLoader) txLoader: BitcoinTransactionLoaderType,
  ): Promise<BitcoinTransaction | null> {
    if (!tx.btcTxid) {
      return null;
    }
    const btcTx = await txLoader.load(tx.btcTxid);
    if (!btcTx) {
      return null;
    }
    return BitcoinTransaction.from(btcTx);
  }
}


================================================
File: backend/src/modules/rgbpp/transaction/transaction.service.ts
================================================
import { Injectable, Logger } from '@nestjs/common';
import { BitcoinApiService } from 'src/core/bitcoin-api/bitcoin-api.service';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import { RgbppTransaction } from './transaction.model';
import { ConfigService } from '@nestjs/config';
import { Env } from 'src/env';
import { CkbRpcWebsocketService } from 'src/core/ckb-rpc/ckb-rpc-websocket.service';
import { buildRgbppLockArgs, genRgbppLockScript } from '@rgbpp-sdk/ckb/lib/utils/rgbpp';
import * as BitcoinApiInterface from 'src/core/bitcoin-api/bitcoin-api.schema';
import * as CkbRpcInterface from 'src/core/ckb-rpc/ckb-rpc.interface';
import { RgbppService } from '../rgbpp.service';
import { BI, HashType } from '@ckb-lumos/lumos';
import { Cacheable } from 'src/decorators/cacheable.decorator';
import { ONE_DAY_MS } from 'src/common/date';
import { LeapDirection } from '@prisma/client';
import { PrismaService } from 'src/core/database/prisma/prisma.service';
import { CKB_CHAIN_ID } from 'src/constants';

@Injectable()
export class RgbppTransactionService {
  private logger = new Logger(RgbppTransactionService.name);

  constructor(
    private ckbExplorerService: CkbExplorerService,
    private ckbRpcService: CkbRpcWebsocketService,
    private prismaService: PrismaService,
    private rgbppService: RgbppService,
    private bitcoinApiService: BitcoinApiService,
    private configService: ConfigService<Env>,
  ) { }

  public async getLatestTransactions(limit: number) {
    const transactions = await this.prismaService.transaction.findMany({
      where: {
        chainId: CKB_CHAIN_ID,
      },
      orderBy: {
        blockNumber: 'desc',
      },
      include: {
        block: true,
      },
      take: limit,
    });
    return transactions.map(RgbppTransaction.from);
  }

  public async getLatestL1Transactions(limit: number) {
    const response = await this.ckbExplorerService.getRgbppTransactions({
      page: 1,
      pageSize: limit,
    });
    return response.data.ckb_transactions.map((tx) => RgbppTransaction.fromRgbppTransaction(tx));
  }

  public async getLatestL2Transactions(limit: number) {
    const transactions = await this.prismaService.transaction.findMany({
      where: {
        chainId: CKB_CHAIN_ID,
        isRgbpp: false,
      },
      orderBy: {
        blockNumber: 'desc',
      },
      include: {
        block: true,
      },
      take: limit,
    });
    return transactions.map(RgbppTransaction.from);
  }

  public async getTransactionByCkbTxHash(txHash: string): Promise<RgbppTransaction | null> {
    const response = await this.ckbExplorerService.getTransaction(txHash);
    if (!response.data.attributes.is_rgb_transaction) {
      return null;
    }
    return RgbppTransaction.fromCkbTransaction(response.data.attributes);
  }

  public async getTransactionByBtcTxid(txid: string): Promise<RgbppTransaction | null> {
    const btcTx = await this.bitcoinApiService.getTx({ txid });
    const tx = (await this.queryRgbppLockTx(btcTx)) ?? (await this.queryRgbppBtcTimeLockTx(btcTx));
    if (tx) {
      return tx;
    }
    return null;
  }

  public async getTransaction(txidOrTxHash: string): Promise<RgbppTransaction | null> {
    let tx: RgbppTransaction | null = null;
    try {
      tx = await this.getTransactionByCkbTxHash(txidOrTxHash);
    } catch (err) {
      this.logger.error(err);
    }
    try {
      tx = await this.getTransactionByBtcTxid(txidOrTxHash);
    } catch (err) {
      this.logger.error(err);
    }
    return tx;
  }

  @Cacheable({
    namespace: 'RgbppTransactionService',
    key: (tx: CkbRpcInterface.Transaction) => `getLeapDirectionByCkbTx:${tx.hash}`,
    ttl: ONE_DAY_MS,
  })
  public async getLeapDirectionByCkbTx(ckbTx: CkbRpcInterface.Transaction) {
    const inputCells = await Promise.all(
      ckbTx.inputs.map(async (input) => {
        const inputTx = await this.ckbRpcService.getTransaction(input.previous_output.tx_hash);
        const index = BI.from(input.previous_output.index).toNumber();
        return inputTx?.transaction.outputs?.[index] ?? null;
      }),
    );
    const hasRgbppLockInput = inputCells.some(
      (cell) =>
        cell?.lock &&
        this.rgbppService.isRgbppLockScript({
          codeHash: cell.lock.code_hash,
          hashType: cell.lock.hash_type as HashType,
          args: cell.lock.args,
        }),
    );
    const hasRgbppLockOuput = ckbTx.outputs.some(
      (output) =>
        output?.lock &&
        this.rgbppService.isRgbppLockScript({
          codeHash: output.lock.code_hash,
          hashType: output.lock.hash_type as HashType,
          args: output.lock.args,
        }),
    );
    const hasBtcTimeLockOutput = ckbTx.outputs.some(
      (output) =>
        output.lock &&
        this.rgbppService.isBtcTimeLockScript({
          codeHash: output.lock.code_hash,
          hashType: output.lock.hash_type as HashType,
          args: output.lock.args,
        }),
    );
    if (hasRgbppLockInput && hasBtcTimeLockOutput) {
      return LeapDirection.LeapOut;
    }
    if (hasRgbppLockInput && hasRgbppLockOuput) {
      return LeapDirection.Within;
    }
    if (!hasRgbppLockInput && hasRgbppLockOuput) {
      return LeapDirection.LeapIn;
    }
    return null;
  }

  @Cacheable({
    namespace: 'RgbppTransactionService',
    key: (btcTx: BitcoinApiInterface.Transaction) => `queryRgbppLockTx:${btcTx.txid}`,
    ttl: ONE_DAY_MS,
  })
  public async queryRgbppLockTx(btcTx: BitcoinApiInterface.Transaction) {
    const ckbTxs = await Promise.all(
      btcTx.vout.map(async (_, index) => {
        const args = buildRgbppLockArgs(index, btcTx.txid);
        const lock = genRgbppLockScript(args, this.configService.get('NETWORK') === 'mainnet');
        return this.ckbRpcService.getTransactions(
          {
            script: {
              code_hash: lock.codeHash,
              hash_type: lock.hashType,
              args: lock.args,
            },
            script_type: 'lock',
          },
          'asc',
          '0x64',
        );
      }),
    );
    for (const ckbTx of ckbTxs) {
      if (ckbTx.objects.length === 0) {
        continue;
      }

      for (const tx of ckbTx.objects) {
        const response = await this.ckbExplorerService.getTransaction(tx.tx_hash);
        if (response.data.attributes.is_rgb_transaction) {
          const rgbppTx = RgbppTransaction.fromCkbTransaction(response.data.attributes);
          if (rgbppTx.btcTxid === btcTx.txid) {
            return rgbppTx;
          }
        }
      }
    }
    return null;
  }

  @Cacheable({
    namespace: 'RgbppTransactionService',
    key: (btcTx: BitcoinApiInterface.Transaction) => `queryRgbppBtcTimeLockTx:${btcTx.txid}`,
    ttl: ONE_DAY_MS,
  })
  public async queryRgbppBtcTimeLockTx(btcTx: BitcoinApiInterface.Transaction) {
    const ckbTxs = (
      await Promise.all(
        btcTx.vin.map(async ({ txid, vout }) => {
          const args = buildRgbppLockArgs(vout, txid);
          const lock = genRgbppLockScript(args, this.configService.get('NETWORK') === 'mainnet');
          return this.ckbRpcService.getTransactions(
            {
              script: {
                code_hash: lock.codeHash,
                hash_type: lock.hashType,
                args: lock.args,
              },
              script_type: 'lock',
            },
            'asc',
            '0x64',
          );
        }),
      )
    )
      .map(({ objects }) => objects)
      .flat();

    for (const ckbTx of ckbTxs) {
      const response = await this.ckbExplorerService.getTransaction(ckbTx.tx_hash);
      if (response.data.attributes.is_btc_time_lock) {
        return RgbppTransaction.fromCkbTransaction(response.data.attributes);
      }
    }
    return null;
  }
}


================================================
File: backend/src/modules/search/search.model.ts
================================================
import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType({ description: 'Search Result (including address/tx/block)' })
export class SearchResult {
  @Field(() => String)
  query: string;

  @Field(() => String, { nullable: true })
  btcBlock: string | null;

  @Field(() => String, { nullable: true })
  btcTransaction: string | null;

  @Field(() => String, { nullable: true })
  btcAddress: string | null;

  @Field(() => String, { nullable: true })
  ckbBlock: string | null;

  @Field(() => String, { nullable: true })
  ckbTransaction: string | null;

  @Field(() => String, { nullable: true })
  ckbAddress: string | null;

  @Field(() => String, { nullable: true })
  rgbppCoin: string | null;
}


================================================
File: backend/src/modules/search/search.module.ts
================================================
import { Module } from '@nestjs/common';
import { SearchResolver } from './search.resolver';
import { CkbExplorerModule } from 'src/core/ckb-explorer/ckb-explorer.module';

@Module({
  imports: [CkbExplorerModule],
  providers: [SearchResolver],
  exports: [],
})
export class SearchModule {}


================================================
File: backend/src/modules/search/search.resolver.ts
================================================
import { Args, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { SearchResult } from './search.model';
import { Loader } from 'src/common/dataloader';
import {
  BitcoinBlockLoader,
  BitcoinBlockLoaderType,
} from '../bitcoin/block/dataloader/block.dataloader';
import {
  BitcoinTransactionLoader,
  BitcoinTransactionLoaderType,
} from '../bitcoin/transaction/transaction.dataloader';
import { CkbRpcBlockLoader, CkbRpcBlockLoaderType } from '../ckb/block/block.dataloader';
import {
  CkbRpcTransactionLoader,
  CkbRpcTransactionLoaderType,
} from '../ckb/transaction/transaction.dataloader';
import { CkbExplorerService } from 'src/core/ckb-explorer/ckb-explorer.service';
import {
  TryValidateBtcAddressPipe,
  TryValidateCkbAddressPipe,
} from 'src/pipes/validate-address.pipe';
import { ParentField } from 'src/decorators/parent-field.decorator';

@Resolver(() => SearchResult)
export class SearchResolver {
  constructor(private ckbExplorerService: CkbExplorerService) {}

  @Query(() => SearchResult)
  public async search(@Args('query') query: string) {
    return {
      query,
    };
  }

  @ResolveField(() => String, { nullable: true })
  public async btcBlock(
    @Parent() { query }: SearchResult,
    @Loader(BitcoinBlockLoader) blockLoader: BitcoinBlockLoaderType,
  ): Promise<string | null> {
    // TODO: check if query is a block hash or block height
    const block = await blockLoader.load(query);
    return block ? block.id : null;
  }

  @ResolveField(() => String, { nullable: true })
  public async btcTransaction(
    @Parent() { query }: SearchResult,
    @Loader(BitcoinTransactionLoader) txLoader: BitcoinTransactionLoaderType,
  ): Promise<string | null> {
    const transaction = await txLoader.load(query);
    return transaction ? transaction.txid : null;
  }

  @ResolveField(() => String, { nullable: true })
  public async btcAddress(
    @ParentField('query', TryValidateBtcAddressPipe) address: string | null,
  ): Promise<string | null> {
    return address;
  }

  @ResolveField(() => String, { nullable: true })
  public async ckbBlock(
    @Parent() { query }: SearchResult,
    @Loader(CkbRpcBlockLoader) rpcBlockLoader: CkbRpcBlockLoaderType,
  ): Promise<string | null> {
    const block = await rpcBlockLoader.load(query);
    if (!block) {
      return null;
    }
    return block.header?.hash;
  }

  @ResolveField(() => String, { nullable: true })
  public async ckbTransaction(
    @Parent() { query }: SearchResult,
    @Loader(CkbRpcTransactionLoader) rpcTxLoader: CkbRpcTransactionLoaderType,
  ): Promise<string | null> {
    const tx = await rpcTxLoader.load(query);
    if (!tx) {
      return null;
    }
    return tx.transaction?.hash;
  }

  @ResolveField(() => String, { nullable: true })
  public async ckbAddress(
    @ParentField('query', TryValidateCkbAddressPipe) address: string | null,
  ): Promise<string | null> {
    return address;
  }

  @ResolveField(() => String, { nullable: true })
  public async rgbppCoin(@Parent() { query }: SearchResult): Promise<string | null> {
    try {
      const response = await this.ckbExplorerService.getXUDT(query);
      return response.data?.attributes?.type_hash;
    } catch {
      return null;
    }
  }
}


================================================
File: backend/src/pipes/validate-address.pipe.ts
================================================
import { config, helpers } from '@ckb-lumos/lumos';
import { PipeTransform, Injectable, BadRequestException, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { isValidAddress } from '@rgbpp-sdk/btc';
import { BtcNetworkTypeMap, NetworkType } from 'src/constants';
import { Env } from 'src/env';

abstract class BaseValidateAddressPipe implements PipeTransform {
  protected logger = new Logger(this.constructor.name);
  protected abstract validateAddress(value: string): boolean;
  protected abstract getErrorMessage(): string;

  transform(value: string): string | null {
    if (!this.validateAddress(value)) {
      this.logger.error(`Invalid address: ${value}`);
      throw new BadRequestException(this.getErrorMessage());
    }
    return value;
  }
}

@Injectable()
export class ValidateCkbAddressPipe extends BaseValidateAddressPipe {
  constructor(protected configService: ConfigService<Env>) {
    super();
  }

  protected validateAddress(value: string): boolean {
    try {
      const network = this.configService.get('NETWORK', { infer: true });
      const lumosConfig = network === NetworkType.mainnet ? config.MAINNET : config.TESTNET;
      helpers.parseAddress(value, { config: lumosConfig });
      return true;
    } catch {
      return false;
    }
  }

  protected getErrorMessage(): string {
    return 'Invalid CKB address';
  }
}

@Injectable()
export class ValidateBtcAddressPipe extends BaseValidateAddressPipe {
  constructor(protected configService: ConfigService<Env>) {
    super();
  }

  protected validateAddress(value: string): boolean {
    const network = this.configService.get('NETWORK', { infer: true });
    const isValid = isValidAddress(value, BtcNetworkTypeMap[network ?? NetworkType.testnet]);
    return isValid;
  }

  protected getErrorMessage(): string {
    return 'Invalid bitcoin address';
  }
}

export class TryValidateCkbAddressPipe extends ValidateCkbAddressPipe {
  public transform(value: string) {
    try {
      return super.transform(value);
    } catch {
      return null;
    }
  }
}

export class TryValidateBtcAddressPipe extends ValidateBtcAddressPipe {
  public transform(value: string) {
    try {
      return super.transform(value);
    } catch {
      return null;
    }
  }
}


================================================
File: backend/test/pipes/validate-address.pipe.test.ts
================================================
import { ConfigService } from '@nestjs/config';
import { Test } from '@nestjs/testing';
import configModule from 'src/config';
import {
  TryValidateBtcAddressPipe,
  TryValidateCkbAddressPipe,
  ValidateBtcAddressPipe,
  ValidateCkbAddressPipe,
} from 'src/pipes/validate-address.pipe';

const validCkbAddress =
  'ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqtyy4lspd4k86v8vz06n03dpjrdx5gzp7cxulwv8';
const validBtcAddress = 'tb1q766jw0se6wmp5jttql67hw98cletne8vd5yq2y';

describe('ValidateAddressPipe', () => {
  let configService: ConfigService;

  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
      imports: [configModule],
      controllers: [],
      providers: [],
    }).compile();

    configService = moduleRef.get<ConfigService>(ConfigService);
  });

  describe('ValidateCkbAddressPipe', () => {
    it('should return an valid address', async () => {
      const pipe = new ValidateCkbAddressPipe(configService);
      const address = pipe.transform(validCkbAddress);
      expect(address).toBe(validCkbAddress);
    });

    it('should throw an error for an invalid address', async () => {
      const pipe = new ValidateCkbAddressPipe(configService);
      expect(() => pipe.transform('invalid-ckb-address')).toThrowError();
    });
  });

  describe('TryValidateCkbAddressPipe', () => {
    it('should return an valid address', async () => {
      const pipe = new TryValidateCkbAddressPipe(configService);
      const address = pipe.transform(validCkbAddress);
      expect(address).toBe(validCkbAddress);
    });

    it('should return null for an invalid address', async () => {
      const pipe = new TryValidateCkbAddressPipe(configService);
      const address = pipe.transform('invalid-ckb-address');
      expect(address).toBeNull();
    });
  });

  describe('ValidateBtcAddressPipe', () => {
    it('should return an valid address', async () => {
      const pipe = new ValidateBtcAddressPipe(configService);
      const address = pipe.transform(validBtcAddress);
      expect(address).toBe(validBtcAddress);
    });

    it('should throw an error for an invalid address', async () => {
      const pipe = new ValidateBtcAddressPipe(configService);
      expect(() => pipe.transform('invalid-btc-address')).toThrowError();
    });
  });

  describe('TryValidateBtcAddressPipe', () => {
    it('should return an valid address', async () => {
      const pipe = new TryValidateBtcAddressPipe(configService);
      const address = pipe.transform(validBtcAddress);
      expect(address).toBe(validBtcAddress);
    });

    it('should return null for an invalid address', async () => {
      const pipe = new TryValidateBtcAddressPipe(configService);
      const address = pipe.transform('invalid-btc-address');
      expect(address).toBeNull();
    });
  });
});


================================================
File: backend/.husky/pre-commit
================================================
npm

================================================
File: frontend/README.md
================================================
# RGB++ Explorer Frontend

## Component Library

This project uses **Park UI** and **Pandacss** as the component library, providing a set of reusable UI components that enhance the overall user experience.

## Multilingual Solution

For handling multilingual support, we use **Lingui**. This library allows for efficient extraction, compilation, and management of translations in the application.

## Minimum Version Requirements

To run this project, ensure you have the following minimum versions installed:

- **Node.js**: 20.x or higher
- **pnpm**: v9.4 or higher

### Package Manager

This project uses `pnpm` as the package manager. Ensure you have `pnpm` installed. If not, you can install it globally with:

```bash
npm install -g pnpm
```

### Installation
```bash
pnpm install
```

### Startup Instructions
To start the development server, run:
```bash
pnpm dev
```
This command will start the Next.js application in development mode. You can access the application at [`http://localhost:3000`](http://localhost:3000).

### Build
To create a production build, run:
```bash
pnpm build
```

After building, you can start the production server with:

```bash
pnpm start
```
### Linting and Code Formatting
To lint your code, use:
```bash
pnpm lint
```

To check for spelling errors, run:
```bash
pnpm cspell
```

To extract and compile translations, use:
```bash
pnpm lingui
```

## Contributing
Contributions are welcome! Please open an issue or submit a pull request.

================================================
File: frontend/codegen.ts
================================================
import { CodegenConfig } from '@graphql-codegen/cli'

const config: CodegenConfig = {
  schema: '../backend/src/schema.gql',
  require: ['ts-node/register'],
  documents: ['src/**/*.ts', 'src/**/*.tsx'],
  ignoreNoDocuments: true,
  generates: {
    './src/gql/': {
      preset: 'client',
    },
  },
}

export default config


================================================
File: frontend/cspell.json
================================================
{
  "version": "0.1",
  "language": "en",
  "words": ["utxo", "rgbpp", "nervos", "nums", "xudt", "bignumber", "pageable", "locktime", "utxostack"],
  "ignoreWords": [
    "lingui",
    "pandacss",
    "outdir",
    "txns",
    "svgr",
    "deepmerge",
    "usehooks",
    "hstack",
    "cellbase",
    "scriptpubkey",
    "satoshi",
    "vout",
    "vin",
    "scriptsig",
    "prevout",
    "nervosnetwork",
    "bitcoinjs",
    "wpkh",
    "shannons",
    "utxos",
    "SUDT",
    "XUDT",
    "MNFT",
    "bitcoinerlab",
    "secp",
    "bech",
    "lumos",
    "hexify",
    "bytify",
    "nprogress"
  ],
  "ignorePaths": [
    "pnpm-lock.yaml",
    "package.json",
    "cspell.json",
    "tsconfig.tsbuildinfo",
    "node_modules/**",
    "dist/**",
    "build/**",
    ".next/**",
    "public/**",
    "src/locales/**",
    "styled-system",
    "src/assets/**",
    "codegen.ts",
    "src/gql/**"
  ]
}


================================================
File: frontend/lingui.config.mjs
================================================
/** @type {import('@lingui/conf').LinguiConfig} */
const linguiConfig = {
  locales: ['en'],
  sourceLocale: 'en',
  catalogs: [
    {
      path: '<rootDir>/src/locales/{locale}/messages',
      include: ['src'],
    },
  ],
  format: 'po',
  compileNamespace: 'ts',
}

export default linguiConfig


================================================
File: frontend/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  experimental: {
    swcPlugins: [['@lingui/swc-plugin', {}]],
    esmExternals: true,
    gzipSize: true,
  },
  webpack(config) {
    const fileLoaderRule = config.module.rules.find((rule) => rule.test?.test?.('.svg'))
    config.module.rules.push(
      {
        ...fileLoaderRule,
        test: /\.svg$/i,
        resourceQuery: /url/,
      },
      {
        test: /\.svg$/i,
        issuer: fileLoaderRule.issuer,
        resourceQuery: { not: [...fileLoaderRule.resourceQuery.not, /url/] }, // exclude if *.svg?url
        use: [
          {
            loader: '@svgr/webpack',
            options: {
              dimensions: false,
              template(variables, { tpl }) {
                return tpl`
                ${variables.imports};
                import { styled } from 'styled-system/jsx';
                
                ${variables.interfaces};
                
                const ${variables.componentName} = styled((${variables.props}) => (
                  ${variables.jsx}
                ));
                
                ${variables.exports};`
              },
            },
          },
        ],
      },
    )
    fileLoaderRule.exclude = /\.svg$/i
    return config
  },
}

export default nextConfig


================================================
File: frontend/package.json
================================================
{
  "name": "utxo-stack-explorer-frontend",
  "version": "0.1.0",
  "private": true,
  "packageManager": "pnpm@9.4.0+sha512.f549b8a52c9d2b8536762f99c0722205efc5af913e77835dbccc3b0b0b2ca9e7dc8022b78062c17291c48e88749c70ce88eb5a74f1fa8c4bf5e18bb46c8bd83a",
  "scripts": {
    "prepare": "panda codegen && graphql-codegen",
    "dev": "next dev",
    "build": "npm run lingui && next build",
    "start": "next start",
    "lint": "next lint",
    "lingui:extract": "lingui extract",
    "lingui:compile": "lingui compile",
    "lingui": "npm run lingui:extract && npm run lingui:compile",
    "cspell": "cspell \"**/*\""
  },
  "dependencies": {
    "@apollo/client": "^3.11.2",
    "@ark-ui/react": "^3.12.1",
    "@bitcoinerlab/secp256k1": "^1.1.1",
    "@ckb-lumos/lumos": "^0.23.0",
    "@graphql-typed-document-node/core": "^3.2.0",
    "@lingui/core": "^4.11.2",
    "@lingui/macro": "^4.11.2",
    "@lingui/react": "^4.11.2",
    "@nervosnetwork/ckb-sdk-utils": "^0.109.2",
    "@next/third-parties": "^14.2.13",
    "@rgbpp-sdk/ckb": "^0.5.0",
    "@tanstack/react-query": "^5.51.11",
    "axios": "^1.7.2",
    "bignumber.js": "^9.1.2",
    "bitcoinjs-lib": "^6.1.6",
    "dayjs": "^1.11.12",
    "graphql": "^16.9.0",
    "graphql-request": "^7.1.0",
    "lodash-es": "^4.17.21",
    "negotiator": "^0.6.3",
    "next": "14.2.4",
    "next-nprogress-bar": "^2.3.13",
    "react": "^18",
    "react-dom": "^18",
    "react-intersection-observer": "^9.13.1",
    "typed.js": "^2.1.0",
    "usehooks-ts": "^3.1.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@0no-co/graphqlsp": "^1.12.12",
    "@graphql-codegen/cli": "^5.0.2",
    "@graphql-codegen/schema-ast": "^4.1.0",
    "@lingui/cli": "^4.11.2",
    "@lingui/conf": "^4.11.2",
    "@lingui/swc-plugin": "^4.0.8",
    "@pandacss/dev": "^0.42.0",
    "@parcel/watcher": "^2.4.1",
    "@park-ui/panda-preset": "^0.38.1",
    "@svgr/core": "^8.1.0",
    "@svgr/webpack": "^8.1.0",
    "@types/lodash-es": "^4.17.12",
    "@types/negotiator": "^0.6.3",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@typescript-eslint/eslint-plugin": "^6.10.0",
    "@typescript-eslint/parser": "^6.5.0",
    "cspell": "^8.10.4",
    "eslint": "^8",
    "eslint-config-next": "14.2.4",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-no-relative-import-paths": "^1.5.3",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-simple-import-sort": "^10.0.0",
    "eslint-plugin-unicorn": "^49.0.0",
    "eslint-plugin-unused-imports": "^3.0.0",
    "prettier": "^3.1.0",
    "typescript": "^5"
  }
}


================================================
File: frontend/panda.config.ts
================================================
import { defineConfig, defineGlobalStyles } from '@pandacss/dev'
import { createPreset } from '@park-ui/panda-preset'

import { button } from '@/configs/ui-preset/button'
import { hoverCard } from '@/configs/ui-preset/hover-card'
import { iconButton } from '@/configs/ui-preset/icon-button'
import { numberInput } from '@/configs/ui-preset/number-input'
import { pagination } from '@/configs/ui-preset/pagination'
import { popover } from '@/configs/ui-preset/popover'
import { skeleton } from '@/configs/ui-preset/skeleton'
import { table } from '@/configs/ui-preset/table'
import { tabs } from '@/configs/ui-preset/tabs'
import { tooltip } from '@/configs/ui-preset/tooltip'

const globalCss = defineGlobalStyles({
  body: {
    color: 'text.primary',
    background: 'bg.default',
    '--colors-bg-default': 'var(--colors-bg-primary)',
    minW: '360px',
    fontFamily: 'var(--font-montserrat)',
    fontWeight: 'medium',
    minH: '100svh',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
})

export default defineConfig({
  jsxFramework: 'react',
  preflight: true,
  presets: [
    '@pandacss/preset-base',
    createPreset({
      accentColor: 'blue',
      grayColor: 'slate',
      borderRadius: 'sm',
    }),
  ],
  include: ['./src/**/*.{js,jsx,ts,tsx}', './app/**/*.{js,jsx,ts,tsx}'],
  exclude: [],
  theme: {
    extend: {
      keyframes: {
        'steps-x': {
          '0%': {
            transform: 'translateX(0)',
          },
          '100%': {
            transform: 'translateX(var(--steps-offset-x))',
          },
        },
      },
      recipes: {
        button,
        iconButton,
        skeleton,
      },
      slotRecipes: {
        table,
        tooltip,
        pagination,
        tabs,
        hoverCard,
        popover,
        numberInput,
      },
      tokens: {
        sizes: {
          content: {
            value: '1280px',
          },
        },
        colors: {
          brand: {
            value: '#3483FF',
            a10: {
              value: 'rgba(52,131,255,0.1)',
            },
          },
          danger: {
            value: '#FF4144',
            a10: {
              value: 'rgba(255,65,68,0.1)',
            },
          },
          warning: {
            value: '#FF8744',
            a10: {
              value: 'rgba(255,135,68,0.1)',
            },
          },
          success: {
            value: '#0FF082',
            a10: {
              value: 'rgba(15,240,130,0.1)',
            },
            unspent: {
              value: '#14E17D',
            },
          },
          border: {
            primary: {
              value: '#272A42',
            },
            light: {
              value: '#4C546D',
            },
          },
          text: {
            primary: {
              value: '#fff',
            },
            secondary: {
              value: '#cecece',
            },
            third: {
              value: '#9A9CA6',
            },
            disabled: {
              value: 'rgba(255, 255, 255, 0.6)',
            },
            link: {
              value: '#319CFF',
            },
          },
          bg: {
            primary: {
              value: '#11131F',
            },
            card: {
              value: '#1D1F31',
              hover: {
                value: '#181A29',
              },
            },
            input: {
              value: '#292C44',
            },
          },
        },
      },
    },
  },
  outdir: 'styled-system',
  globalCss,
})


================================================
File: frontend/park-ui.json
================================================
{
  "$schema": "https://park-ui.com/registry/latest/schema.json",
  "importAlias": "@/*",
  "jsFramework": "react",
  "outputPaths": {
    "componentsDir": "@/components/ui",
    "libDir": "@/lib"
  }
}


================================================
File: frontend/postcss.config.cjs
================================================
module.exports = {
  plugins: {
    '@pandacss/dev/postcss': {},
  },
}


================================================
File: frontend/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "esnext",
    "baseUrl": ".",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "src/types/**.d.ts",
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "src",
    "styled-system"
  ],
  "exclude": ["node_modules"]
}


================================================
File: frontend/.eslintrc.json
================================================
{
  "extends": "next/core-web-vitals",
  "plugins": [
    "no-relative-import-paths",
    "eslint-plugin-simple-import-sort",
    "@typescript-eslint/eslint-plugin",
    "eslint-plugin-unicorn",
    "eslint-plugin-import",
    "eslint-plugin-react",
    "eslint-plugin-react-hooks",
    "unused-imports"
  ],
  "rules": {
    "no-control-regex": "error",
    "no-debugger": "warn",
    "no-div-regex": "error",
    "no-duplicate-case": "error",
    "no-empty-character-class": "error",
    "no-empty-pattern": "warn",
    "no-ex-assign": "warn",
    "no-extra-bind": "warn",
    "no-extra-boolean-cast": "warn",
    "no-extra-label": "warn",
    "no-global-assign": "error",
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "warn",
    "no-label-var": "error",
    "no-misleading-character-class": "error",
    "no-new-wrappers": "error",
    "default-case-last": "error",
    "eqeqeq": "error",
    "import/no-empty-named-blocks": "warn",
    "import/no-named-default": "warn",
    "import/no-useless-path-segments": "warn",
    "import/no-webpack-loader-syntax": "error",
    "no-bitwise": "error",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "error",
    "no-constant-binary-expression": "error",
    "no-constant-condition": "warn",
    "no-constructor-return": "error",
    "no-plusplus": "error",
    "no-regex-spaces": "error",
    "no-restricted-globals": ["error", "event", "name", "length", "closed"],
    "no-script-url": "error",
    "no-self-assign": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": "warn",
    "no-unreachable-loop": "error",
    "no-unsafe-finally": "error",
    "no-unused-labels": "warn",
    "no-unused-vars": "off",
    "no-useless-backreference": "error",
    "no-useless-call": "warn",
    "no-useless-catch": "warn",
    "no-useless-concat": "warn",
    "no-useless-escape": "warn",
    "object-shorthand": "warn",
    "prefer-const": "warn",
    "prefer-numeric-literals": "warn",
    "prefer-object-has-own": "warn",
    "prefer-regex-literals": "warn",
    "radix": "warn",
    "spaced-comment": [
      "warn",
      "always",
      {
        "line": {
          "markers": ["/"]
        }
      }
    ],
    "unused-imports/no-unused-imports": "error",
    "valid-typeof": "error",
    "yoda": "warn",
    "react/jsx-no-comment-textnodes": "warn",
    "react/jsx-no-leaked-render": "error",
    "react/jsx-no-script-url": "error",
    "react/no-danger": "error",
    "react/no-danger-with-children": "error",
    "react/no-namespace": "error",
    "react/no-unstable-nested-components": "error",
    "react/void-dom-elements-no-children": "error",
    "react/no-invalid-html-attribute": "warn",
    "react/jsx-key": [
      "warn",
      {
        "checkFragmentShorthand": true,
        "checkKeyMustBeforeSpread": true,
        "warnOnDuplicates": true
      }
    ],
    "react/jsx-no-constructed-context-values": "warn",
    "react/no-deprecated": "error",
    "react/no-find-dom-node": "error",
    "react/function-component-definition": [
      "warn",
      {
        "namedComponents": "function-declaration",
        "unnamedComponents": ["function-expression", "arrow-function"]
      }
    ],
    "react/jsx-boolean-value": ["error", "never"],
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": true
      }
    ],
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "{}": false,
          "FC": {
            "message": "To declare a component, you don't have to use FC to annotate it. To type something that accepts/is a React Component, use ComponentType<T>.",
            "fixWith": "ComponentType"
          },
          "React.FC": {
            "message": "To declare a component, you don't have to use React.FC to annotate it. To type something that accepts/is a React Component, use React.ComponentType<T>.",
            "fixWith": "React.ComponentType"
          }
        },
        "extendDefaults": true
      }
    ],
    "@typescript-eslint/array-type": [
      "warn",
      {
        "default": "array-simple"
      }
    ],
    "@typescript-eslint/await-thenable": "warn",
    "@typescript-eslint/consistent-type-assertions": [
      "warn",
      {
        "assertionStyle": "as"
      }
    ],
    "@typescript-eslint/dot-notation": "warn",
    "@typescript-eslint/no-array-constructor": "warn",
    "@typescript-eslint/no-base-to-string": "error",
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "@typescript-eslint/no-duplicate-enum-values": "error",
    "@typescript-eslint/no-extra-non-null-assertion": "warn",
    "@typescript-eslint/no-for-in-array": "warn",
    "@typescript-eslint/no-implied-eval": "error",
    "@typescript-eslint/no-loop-func": "warn",
    "@typescript-eslint/no-loss-of-precision": "error",
    "@typescript-eslint/no-meaningless-void-operator": "warn",
    "@typescript-eslint/no-mixed-enums": "error",
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "warn",
    "@typescript-eslint/no-this-alias": "warn",
    "@typescript-eslint/no-unnecessary-qualifier": "warn",
    "@typescript-eslint/no-unnecessary-type-arguments": "warn",
    "@typescript-eslint/no-unnecessary-type-constraint": "warn",
    "@typescript-eslint/no-unsafe-declaration-merging": "error",
    "@typescript-eslint/prefer-as-const": "warn",
    "@typescript-eslint/prefer-enum-initializers": "warn",
    "@typescript-eslint/prefer-for-of": "warn",
    "@typescript-eslint/prefer-includes": "warn",
    "@typescript-eslint/prefer-literal-enum-member": "error",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/prefer-reduce-type-parameter": "warn",
    "@typescript-eslint/prefer-return-this-type": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "warn",
    "@typescript-eslint/require-array-sort-compare": "error",
    "@typescript-eslint/no-misused-new": "error",
    "simple-import-sort/imports": "error",
    "simple-import-sort/exports": "error",
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "no-relative-import-paths/no-relative-import-paths": [
      "warn",
      {
        "prefix": "@",
        "rootDir": "src"
      }
    ]
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "project": "./tsconfig.json",
    "warnOnUnsupportedTypeScriptVersion": false,
    "allowAutomaticSingleRunInference": true
  }
}


================================================
File: frontend/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

## Panda
styled-system
styled-system-studio

## Lingui
src/locales/*/*.ts
src/locales/*/*.js


================================================
File: frontend/.prettierrc
================================================
{
  "printWidth": 120,
  "tabWidth": 2,
  "useTabs": false,
  "semi": false,
  "singleQuote": true,
  "trailingComma": "all",
  "bracketSpacing": true,
  "arrowParens": "always",
  "insertPragma": false,
  "requirePragma": false,
  "proseWrap": "preserve",
  "endOfLine": "auto"
}


================================================
File: frontend/public/robots.txt
================================================
User-agent: *
Disallow: /

================================================
File: frontend/src/index.ts
================================================
import { graphql } from '@/gql'

graphql(`
  query BtcAndCkbChainInfo {
    ckbChainInfo {
      tipBlockNumber
    }
    btcChainInfo {
      tipBlockHeight
      transactionsCountIn24Hours
    }
  }
`)


================================================
File: frontend/src/middleware.ts
================================================
import linguiConfig from 'lingui.config.mjs'
import Negotiator from 'negotiator'
import { type NextRequest, NextResponse } from 'next/server'

const { locales } = linguiConfig

export const config = {
  matcher: ['/((?!_next/static|_next/image|api|favicon.ico|robots|.*\\.(?:svg|png|jpg|jpeg|gif|webp|txt)$).*)'],
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  if (pathname.startsWith('/api')) return NextResponse.next()
  const pathnameHasLocale = locales.find((locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`)
  const headers = new Headers(request.headers)
  headers.set('x-url', request.url)
  if (request.ip) headers.set('x-ip', request.ip)
  headers.set('x-pathname', request.nextUrl.pathname)
  if (pathnameHasLocale) {
    headers.set('locale', pathnameHasLocale)
    return NextResponse.next({
      request: {
        headers,
      },
    })
  }

  const locale = getRequestLocale(request.headers)
  request.nextUrl.pathname = `/${locale}${pathname}`

  headers.set('x-url', request.nextUrl.toString())
  headers.set('locale', locale)
  return NextResponse.redirect(request.nextUrl, {
    headers,
  })
}

function getRequestLocale(requestHeaders: Headers): string {
  const langHeader = requestHeaders.get('accept-language') || undefined
  const languages = new Negotiator({
    headers: { 'accept-language': langHeader },
  }).languages(locales.slice())

  return languages[0] || locales[0] || linguiConfig.sourceLocale!
}


================================================
File: frontend/src/app/error.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { useEffect } from 'react'
import { Center } from 'styled-system/jsx'

import ErrorPageSVG from '@/assets/error-page.svg'
import { Button, Text } from '@/components/ui'

export default function Error({ error, reset }: { error: Error & { digest?: string }; reset: () => void }) {
  useEffect(() => {
    console.error(error)
  }, [error])

  return (
    <Center flexDir="column" flex={1} bg="bg.card" maxW="content" w="100%" my="30px" p="30px">
      <ErrorPageSVG w="200px" h="200px" />
      <Text
        fontSize="14px"
        fontWeight="medium"
        color="text.third"
        mb="24px"
        maxH="200px"
        overflowY="auto"
        overflowX="hidden"
        maxW="100%"
        textAlign="center"
      >
        <Trans>Something wrong. Error code: {error.digest}</Trans>
      </Text>
      <Button size="sm" onClick={reset}>
        <Trans>Try again</Trans>
      </Button>
    </Center>
  )
}


================================================
File: frontend/src/app/layout.tsx
================================================
import '@/styles/globals.css'

import { GoogleAnalytics } from '@next/third-parties/google'
import type { Metadata } from 'next'
import { Montserrat } from 'next/font/google'
import type { PropsWithChildren } from 'react'

import { Footer } from '@/components/footer'
import { Navbar } from '@/components/navbar'
import { Providers } from '@/components/providers'
import { env } from '@/constants/env'
import { getLocaleFromHeaders } from '@/lib/get-locale-from-headers'

const montserrat = Montserrat({
  weight: ['400', '500', '600', '700'],
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-montserrat',
  fallback: ['Arial', 'sans-serif'],
})

export const metadata: Metadata = {
  title: 'RGB++ Explorer',
  icons: '/logo.svg',
}

export default function RootLayout({ children }: PropsWithChildren) {
  const locale = getLocaleFromHeaders()
  return (
    <html lang={locale}>
      <body className={`${montserrat.variable}`}>
        {env.share.GA_ID ? <GoogleAnalytics gaId={env.share.GA_ID} /> : null}
        <Providers lang={locale}>
          <Navbar />
          {children}
          <Footer lang={locale} />
        </Providers>
      </body>
    </html>
  )
}


================================================
File: frontend/src/app/not-found.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { Center } from 'styled-system/jsx'

import NotFoundSVG from '@/assets/not-found.svg'
import { Button, Text } from '@/components/ui'
import Link from '@/components/ui/link'

export default function NotFound() {
  return (
    <Center flexDir="column" flex={1} bg="bg.card" maxW="content" w="100%" my="30px" p="30px">
      <NotFoundSVG w="200px" h="200px" />
      <Text fontSize="14px" fontWeight="medium" color="text.third" mb="24px">
        <Trans>Sorry, the page you visited does not exist</Trans>
      </Text>
      <Link href="/">
        <Button size="sm">
          <Trans>Back to Home</Trans>
        </Button>
      </Link>
    </Center>
  )
}


================================================
File: frontend/src/app/[lang]/LinguiClientProvider.tsx
================================================
'use client'

import { type Messages, setupI18n } from '@lingui/core'
import { I18nProvider } from '@lingui/react'
import { type PropsWithChildren, useState } from 'react'

interface Props extends PropsWithChildren {
  initialLocale: string
  initialMessages: Messages
}

export function LinguiClientProvider({ children, initialLocale, initialMessages }: Props) {
  const [i18n] = useState(() => {
    return setupI18n({
      locale: initialLocale,
      messages: { [initialLocale]: initialMessages },
    })
  })
  return <I18nProvider i18n={i18n}>{children}</I18nProvider>
}


================================================
File: frontend/src/app/[lang]/appRouterI18n.ts
================================================
import 'server-only'

import { I18n, Messages, setupI18n } from '@lingui/core'
import linguiConfig from 'lingui.config.mjs'

const { locales } = linguiConfig
type SupportedLocales = string

async function loadCatalog(locale: SupportedLocales): Promise<{
  [k: string]: Messages
}> {
  const { messages } = await import(`../../locales/${locale}/messages.ts`)
  return {
    [locale]: messages,
  }
}
const catalogs: Array<{ [locale: string]: Messages }> = await Promise.all(locales.map(loadCatalog))

export const allMessages = catalogs.reduce((acc, oneCatalog) => {
  return { ...acc, ...oneCatalog }
}, {})

type AllI18nInstances = { [K in SupportedLocales]: I18n }

export const allI18nInstances: AllI18nInstances = locales.reduce((acc, locale) => {
  const messages = allMessages[locale] ?? {}
  const i18n = setupI18n({
    locale,
    messages: { [locale]: messages },
  })
  return { ...acc, [locale]: i18n }
}, {})

export function getI18nInstance(locale: string) {
  return allI18nInstances[locale] ?? allI18nInstances[linguiConfig.sourceLocale!]
}


================================================
File: frontend/src/app/[lang]/loading.tsx
================================================
import { Center } from 'styled-system/jsx'

import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return (
    <Center h="400px">
      <Loading />
    </Center>
  )
}


================================================
File: frontend/src/app/[lang]/page.tsx
================================================
import { t } from '@lingui/macro'
import linguiConfig from 'lingui.config.mjs'
import { LastRgbppTxnsTable } from 'src/components/latest-tx-list'
import { Box, Center, Flex } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import HomeBgSVG from '@/assets/home-bg.svg'
// import { HomeQuickInfo } from '@/components/home-quick-info'
import { HomeTitle } from '@/components/home-title'
import { NetworkCards } from '@/components/network-cards'
import { SearchBar } from '@/components/search-bar'
import { Heading } from '@/components/ui'

export const dynamic = 'force-static'
export const revalidate = 3600

export async function generateStaticParams() {
  return linguiConfig.locales.map((locale) => ({ lang: locale }))
}

export default function Home({ params: { lang } }: { params: { lang: string } }) {
  const i18n = getI18nInstance(lang)
  return (
    <>
      <Center flexDir="column" w="100%" position="relative" px={{ base: '20px', xl: '30px' }}>
        <HomeBgSVG w="100%" pos="absolute" top="50px" left="0" />
        <Flex
          w="100%"
          direction="column"
          pos="relative"
          aspectRatio={{ base: 1440 / 1100, lg: 1440 / 900, xl: 1440 / 800, '2xl': 1440 / 680 }}
        >
          <Flex w="100%" direction="column" textAlign="center" align="center" justify="start" gap="54px" pb="40px">
            <HomeTitle />
            {/* <HomeQuickInfo />*/}
            <SearchBar />
          </Flex>
        </Flex>
      </Center>
      <Center w="100%" position="relative" mb="54px" px={{ base: '20px', xl: '30px' }}>
        <Flex maxW="content" direction="column" alignItems="center" justify="start" w="100%">
          <Heading
            fontSize={{ base: '22px', sm: '32px', xl: '40px' }}
            mb={{ base: '50px', xl: '60px' }}
            fontWeight="semibold"
          >{t(i18n)`RGB++ Networks`}</Heading>
          <NetworkCards />
          <Heading
            fontSize={{ base: '22px', sm: '32px', xl: '40px' }}
            fontWeight="semibold"
            mb={{ base: '50px', xl: '60px' }}
            mt={{ base: '80px', xl: '100px' }}
          >{t(i18n)`Latest RGB++ Txns`}</Heading>
          <Box w="100%" bg="bg.card" pt={{ base: '10px', md: '30px' }} pb={{ base: '10px', md: '20px' }} rounded="8px">
            <LastRgbppTxnsTable />
          </Box>
        </Flex>
      </Center>
    </>
  )
}


================================================
File: frontend/src/app/[lang]/address/[address]/layout.tsx
================================================
import { t } from '@lingui/macro'
import { notFound } from 'next/navigation'
import type { PropsWithChildren, ReactNode } from 'react'
import { Flex, HStack, VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { BtcAddressOverview } from '@/components/btc/btc-address-overview'
import { BtcAddressType } from '@/components/btc/btc-address-type'
import { CkbAddressOverview } from '@/components/ckb/ckb-address-overview'
import { Copier } from '@/components/copier'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { LinkTabs } from '@/components/link-tabs'
import { Heading, Text } from '@/components/ui'
import { graphql } from '@/gql'
import { isValidBTCAddress } from '@/lib/btc/is-valid-btc-address'
import { isValidCkbAddress } from '@/lib/ckb/is-valid-ckb-address'
import { graphQLClient } from '@/lib/graphql'

const btcAddressQuery = graphql(`
  query BtcAddressBase($address: String!) {
    btcAddress(address: $address) {
      address
      satoshi
      pendingSatoshi
      transactionsCount
    }
  }
`)

const ckbAddressQuery = graphql(`
  query CkbAddressBase($address: String!) {
    ckbAddress(address: $address) {
      address
      shannon
      balance {
        total
        available
        occupied
      }
      transactionsCount
    }
  }
`)

export default async function Layout({
  children,
  params: { address, lang },
}: PropsWithChildren<{
  params: { address: string; lang: string }
}>) {
  const i18n = getI18nInstance(lang)
  const isBtcAddress = isValidBTCAddress(address)
  const isCkbAddress = isValidCkbAddress(address)

  if (!isBtcAddress && !isCkbAddress) notFound()

  let overflow: ReactNode = null
  if (isBtcAddress) {
    const data = await graphQLClient.request(btcAddressQuery, { address })
    if (data?.btcAddress) {
      overflow = <BtcAddressOverview lang={lang} btcAddress={data?.btcAddress} />
    }
  } else if (isCkbAddress) {
    const data = await graphQLClient.request(ckbAddressQuery, { address })
    if (data?.ckbAddress) {
      overflow = <CkbAddressOverview ckbAddress={data?.ckbAddress} lang={lang} />
    }
  }

  if (!overflow) notFound()

  return (
    <VStack w="100%" maxW="content" p={{ base: '20px', xl: '30px' }} gap={{ base: '20px', xl: '30px' }}>
      <Flex
        flexDirection={{ base: 'column', lg: 'row' }}
        w="100%"
        gap={{ base: '8px', lg: '24px' }}
        p="30px"
        bg="bg.card"
        rounded="8px"
      >
        <Heading display="flex" alignItems="center" gap="16px" fontSize="20px" lineHeight="24px" fontWeight="semibold">
          {t(i18n)`Address`}
          <IfBreakpoint breakpoint="lg" fallback={<BtcAddressType address={address} />} />
        </Heading>
        <Copier value={address}>
          <HStack maxW="calc(1160px - 100px - 24px)" truncate>
            <Text as="span" wordBreak="break-all" whiteSpace="wrap" textAlign="left">
              {address}
            </Text>
            <IfBreakpoint breakpoint="lg">
              <BtcAddressType address={address} />
            </IfBreakpoint>
          </HStack>
        </Copier>
      </Flex>
      {overflow}
      <LinkTabs
        w="100%"
        links={[
          {
            href: `/address/${address}/transactions`,
            label: t(i18n)`Transactions`,
          },
          {
            href: `/address/${address}/assets`,
            label: t(i18n)`RGB++ Assets`,
          },
        ]}
      />
      {children}
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/address/[address]/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading />
}


================================================
File: frontend/src/app/[lang]/address/[address]/route.ts
================================================
import { redirect } from 'next/navigation'
import { NextRequest } from 'next/server'

export function GET(request: NextRequest, { params: { address } }: { params: { address: string } }) {
  return redirect(`/address/${address}/transactions`)
}


================================================
File: frontend/src/app/[lang]/address/[address]/assets/page.tsx
================================================
import { ComingSoon } from '@/components/coming-soon'

export default function Page() {
  return <ComingSoon />
}


================================================
File: frontend/src/app/[lang]/address/[address]/transactions/btc-tx-list.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { useInfiniteQuery } from '@tanstack/react-query'
import { compact } from 'lodash-es'
import { Center } from 'styled-system/jsx'

import { BtcTransactionCardWithQueryInAddress } from '@/components/btc/btc-transaction-card-with-query-in-address'
import { InfiniteListBottom } from '@/components/infinite-list-bottom'
import { Loading } from '@/components/loading'
import { NoData } from '@/components/no-data'
import { QueryKey } from '@/constants/query-key'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'

const btcAddressTxsQuery = graphql(`
  query BtcTransactionByAddress($address: String!, $afterTxid: String) {
    btcAddress(address: $address) {
      transactions(afterTxid: $afterTxid) {
        txid
      }
    }
  }
`)

export function BtcTxList({ address }: { address: string }) {
  const { data, isLoading, ...query } = useInfiniteQuery({
    queryKey: [QueryKey.BtcTransactionCardInAddressList, address],
    async queryFn({ pageParam }) {
      const { btcAddress } = await graphQLClient.request(btcAddressTxsQuery, {
        address,
        afterTxid: pageParam ? pageParam : undefined,
      })
      return btcAddress
    },
    select(data) {
      return compact(data.pages.flatMap((page) => page?.transactions))
    },
    getNextPageParam(lastPage) {
      if (!lastPage?.transactions?.length) return
      return lastPage?.transactions?.[lastPage?.transactions?.length - 1].txid
    },
    initialData: undefined,
    initialPageParam: '',
  })

  if (isLoading) {
    return <Loading my="80px" />
  }

  if (!query.hasNextPage && !data?.length) {
    return (
      <Center w="100%" bg="bg.card" pt="80px" pb="120px" rounded="8px">
        <NoData>
          <Trans>No Transaction</Trans>
        </NoData>
      </Center>
    )
  }

  return (
    <>
      {data?.map(({ txid }) => <BtcTransactionCardWithQueryInAddress address={address} txid={txid} key={txid} />)}
      <InfiniteListBottom {...query} />
    </>
  )
}


================================================
File: frontend/src/app/[lang]/address/[address]/transactions/ckb-tx-list.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { useInfiniteQuery } from '@tanstack/react-query'
import { compact } from 'lodash-es'
import { Center } from 'styled-system/jsx'

import { CkbTransactionCardWithQueryInAddress } from '@/components/ckb/ckb-transaction-card-with-query-in-address'
import { InfiniteListBottom } from '@/components/infinite-list-bottom'
import { Loading } from '@/components/loading'
import { NoData } from '@/components/no-data'
import { QueryKey } from '@/constants/query-key'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'

const ckbAddressTxsQuery = graphql(`
  query CkbTransactionByAddress($address: String!, $page: Int!, $pageSize: Int!) {
    ckbAddress(address: $address) {
      transactionsCount
      transactions(page: $page, pageSize: $pageSize) {
        hash
      }
    }
  }
`)

export function CKBTxList({ address }: { address: string }) {
  const { data, isLoading, ...query } = useInfiniteQuery({
    queryKey: [QueryKey.CkbTransactionCardInAddressList, address],
    async queryFn({ pageParam }) {
      const { ckbAddress } = await graphQLClient.request(ckbAddressTxsQuery, {
        address,
        page: pageParam,
        pageSize: 10,
      })
      return ckbAddress
    },
    select(data) {
      return compact(data.pages.flatMap((page) => page?.transactions))
    },
    getNextPageParam(lastPage, _, pageParam) {
      if (lastPage?.transactionsCount && pageParam * 10 >= lastPage?.transactionsCount) return
      return pageParam + 1
    },
    initialData: undefined,
    initialPageParam: 1,
  })

  if (isLoading) {
    return <Loading my="80px" />
  }

  if (!query.hasNextPage && !data?.length) {
    return (
      <Center w="100%" bg="bg.card" pt="80px" pb="120px" rounded="8px">
        <NoData>
          <Trans>No Transaction</Trans>
        </NoData>
      </Center>
    )
  }

  return (
    <>
      {data?.map(({ hash }) => <CkbTransactionCardWithQueryInAddress address={address} hash={hash} key={hash} />)}
      <InfiniteListBottom {...query} />
    </>
  )
}


================================================
File: frontend/src/app/[lang]/address/[address]/transactions/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading my="80px" />
}


================================================
File: frontend/src/app/[lang]/address/[address]/transactions/not-found.ts
================================================
'use client'

import { FailedFallback } from '@/components/failed-fallback'

const Error = FailedFallback
export default Error


================================================
File: frontend/src/app/[lang]/address/[address]/transactions/page.tsx
================================================
import { notFound } from 'next/navigation'

import { BtcTxList } from '@/app/[lang]/address/[address]/transactions/btc-tx-list'
import { CKBTxList } from '@/app/[lang]/address/[address]/transactions/ckb-tx-list'
import { isValidBTCAddress } from '@/lib/btc/is-valid-btc-address'
import { isValidCkbAddress } from '@/lib/ckb/is-valid-ckb-address'

export const maxDuration = 30

export default async function Page({ params: { address } }: { params: { address: string; lang: string } }) {
  if (isValidBTCAddress(address)) {
    return <BtcTxList address={address} />
  }

  if (isValidCkbAddress(address)) {
    return <CKBTxList address={address} />
  }
  return notFound()
}


================================================
File: frontend/src/app/[lang]/assets/layout.tsx
================================================
import { t } from '@lingui/macro'
import { PropsWithChildren } from 'react'
import { VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { LinkTabs } from '@/components/link-tabs'

export default function Layout({
  params,
  children,
}: PropsWithChildren<{
  params: { lang: string }
}>) {
  const i18n = getI18nInstance(params.lang)
  return (
    <VStack gap="30px" w="100%" px={{ base: '20px', xl: '40px' }} pt="30px" pb="56px" flex={1}>
      <LinkTabs
        links={[
          {
            href: '/assets/coins',
            label: t(i18n)`Coins`,
          },
          {
            href: '/assets/dobs',
            label: t(i18n)`DOBs`,
          },
        ]}
        maxW="content"
        w="100%"
        justify="start"
      />
      {children}
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/assets/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading />
}


================================================
File: frontend/src/app/[lang]/assets/route.ts
================================================
import { redirect } from 'next/navigation'

import { getLocaleFromHeaders } from '@/lib/get-locale-from-headers'

export function GET() {
  const locale = getLocaleFromHeaders()
  return redirect(`/${locale}/assets/coins`)
}


================================================
File: frontend/src/app/[lang]/assets/coins/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading />
}


================================================
File: frontend/src/app/[lang]/assets/coins/page.tsx
================================================
import { t } from '@lingui/macro'
import { Box, HStack, VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { CoinList } from '@/components/coin-list'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { PaginationSearchParams } from '@/components/pagination-searchparams'
import { Text } from '@/components/ui'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'
import { resolvePage } from '@/lib/resolve-page'
import { formatNumber } from '@/lib/string/format-number'

const query = graphql(`
  query RgbppCoins($page: Int!, $pageSize: Int!) {
    rgbppCoins(page: $page, pageSize: $pageSize) {
      total
      pageSize
      coins {
        icon
        name
        symbol
        l1HoldersCount: holdersCount(layer: L1)
        l2HoldersCount: holdersCount(layer: L2)
        h24CkbTransactionsCount
        totalAmount
        deployedAt
        decimal
        typeHash
      }
    }
  }
`)

export default async function Page({
  params,
  searchParams,
}: {
  params: { lang: string }
  searchParams: { page?: string }
}) {
  const i18n = getI18nInstance(params.lang)
  const page = resolvePage(searchParams.page)
  const pageSize = 10
  const response = await graphQLClient.request(query, { page, pageSize })

  return (
    <VStack w="100%" maxW="content" flex={1} gap="32px">
      <Box bg="bg.card" w="100%" rounded="8px" pt={{ base: '10px', lg: '30px' }} pb="10px">
        <CoinList coins={response.rgbppCoins.coins} />
      </Box>
      <HStack gap="16px">
        <IfBreakpoint breakpoint="md">
          <Text fontSize="14px">{t(i18n)`Total ${formatNumber(response.rgbppCoins.total)} Items`}</Text>
        </IfBreakpoint>
        <PaginationSearchParams count={response.rgbppCoins.total} pageSize={pageSize} />
      </HStack>
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/assets/coins/[typeHash]/layout.tsx
================================================
import { t } from '@lingui/macro'
import { notFound } from 'next/navigation'
import { PropsWithChildren } from 'react'
import { Box, Flex, Grid, styled } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import BtcIcon from '@/assets/chains/btc.svg'
import { Copier } from '@/components/copier'
import { LinkTabs } from '@/components/link-tabs'
import { Text } from '@/components/ui'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'

const query = graphql(`
  query RgbppCoin($typeHash: String!) {
    rgbppCoin(typeHash: $typeHash) {
      name
      symbol
      icon
    }
  }
`)

export default async function AssetDetail({
  children,
  params: { typeHash, lang },
}: PropsWithChildren<{ params: { typeHash: string; lang: string } }>) {
  const i18n = getI18nInstance(lang)
  const response = await graphQLClient.request(query, { typeHash })
  if (!response.rgbppCoin) notFound()
  return (
    <>
      <Grid
        gridTemplateColumns="56px 1fr"
        columnGap="16px"
        rowGap={{ base: '16px', md: 0 }}
        w="100%"
        maxW="content"
        py="20px"
        px={{ base: '20px', xl: '30px' }}
        bg="bg.card"
        rounded="8px"
        alignItems="center"
      >
        <Box w="56px" h="56px" gridRow={{ base: '1/2', md: '1/3' }}>
          {response.rgbppCoin.icon ? (
            <styled.img w="100%" h="100%" src={response.rgbppCoin.icon} rounded="100%" />
          ) : (
            <BtcIcon w="100%" h="100%" />
          )}
        </Box>
        <Flex gap="12px" flexDirection={{ base: 'column', md: 'row' }}>
          <Text fontSize="20px" lineHeight="24px">
            {response.rgbppCoin.symbol}
          </Text>
          <Text as="span" fontSize="14px" color="text.third" lineHeight="18px">
            {response.rgbppCoin.name}
          </Text>
        </Flex>
        <Box gridColumn={{ base: '1/3', md: '2/3' }}>
          <Copier value={typeHash}>
            <Text fontSize="14px" color="text.secondary" lineHeight="24px" wordBreak="break-all" textAlign="left">
              {typeHash}
            </Text>
          </Copier>
        </Box>
      </Grid>
      <LinkTabs
        links={[
          {
            href: `/assets/coins/${typeHash}/holders`,
            label: t(i18n)`Holders`,
          },
          {
            href: `/assets/coins/${typeHash}/transactions`,
            label: t(i18n)`Transactions`,
          },
        ]}
        maxW="content"
        w="100%"
        justify="start"
      />
      {children}
    </>
  )
}


================================================
File: frontend/src/app/[lang]/assets/coins/[typeHash]/loading.tsx
================================================
import { Box } from 'styled-system/jsx'

import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return (
    <Box w="100%" flex={1} textAlign="center">
      <Loading />
    </Box>
  )
}


================================================
File: frontend/src/app/[lang]/assets/coins/[typeHash]/route.ts
================================================
import { redirect } from 'next/navigation'
import { NextRequest } from 'next/server'

import { getLocaleFromHeaders } from '@/lib/get-locale-from-headers'

export function GET(request: NextRequest, { params: { typeHash } }: { params: { typeHash: string } }) {
  const locale = getLocaleFromHeaders()
  return redirect(`/${locale}/assets/coins/${typeHash}/transactions`)
}


================================================
File: frontend/src/app/[lang]/assets/coins/[typeHash]/holders/page.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { VStack } from 'styled-system/jsx'

import ComingSoonSVG from '@/assets/coming-soon.svg'
import { Text } from '@/components/ui'

export default function Page() {
  return (
    <VStack gap="10px" w="100%" bg="bg.card" maxW="content" p="30px" rounded="8px" pt="74px" pb="260px">
      <ComingSoonSVG w="200px" h="200px" />
      <Text color="text.third" fontSize="14px">
        <Trans>Coming soon, please stay tuned</Trans>
      </Text>
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/assets/coins/[typeHash]/transactions/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading my="80px" />
}


================================================
File: frontend/src/app/[lang]/assets/coins/[typeHash]/transactions/page.tsx
================================================
import { t } from '@lingui/macro'
import { notFound } from 'next/navigation'
import { Box, HStack, VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { LatestTxnListUI } from '@/components/latest-tx-list/ui'
import { PaginationSearchParams } from '@/components/pagination-searchparams'
import { Text } from '@/components/ui'
import { graphql } from '@/gql'
import { RgbppTransaction } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'
import { resolvePage } from '@/lib/resolve-page'
import { formatNumber } from '@/lib/string/format-number'

const query = graphql(`
  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {
    rgbppCoin(typeHash: $typeHash) {
      transactionsCount
      transactions(page: $page, pageSize: $pageSize) {
        ckbTxHash
        btcTxid
        leapDirection
        blockNumber
        timestamp
        ckbTransaction {
          inputs {
            txHash
            index
            capacity
            status {
              consumed
              txHash
              index
            }
            type {
              codeHash
              hashType
              args
            }
            lock {
              codeHash
              hashType
              args
            }
            xudtInfo {
              symbol
              amount
              decimal
              typeHash
            }
          }
          outputs {
            txHash
            index
            capacity
            status {
              consumed
              txHash
              index
            }
            type {
              codeHash
              hashType
              args
            }
            lock {
              codeHash
              hashType
              args
            }
            xudtInfo {
              symbol
              amount
              decimal
              typeHash
            }
          }
        }
      }
    }
  }
`)

export default async function Page({
  params: { typeHash, lang },
  searchParams,
}: {
  params: { typeHash: string; lang: string }
  searchParams: { page?: string }
}) {
  const i18n = getI18nInstance(lang)
  const page = resolvePage(searchParams.page)
  const pageSize = 10
  const response = await graphQLClient.request(query, { typeHash, page, pageSize })
  if (!response.rgbppCoin) notFound()

  return (
    <VStack w="100%" maxW="content" gap="32px">
      <Box w="100%" bg="bg.card" rounded="8px" pt={{ base: '10px', md: '30px' }} pb="10px">
        <LatestTxnListUI txs={(response.rgbppCoin.transactions as RgbppTransaction[]) ?? []} />
      </Box>

      <HStack gap="16px" mt="auto" p="30px">
        <IfBreakpoint breakpoint="md">
          <Text fontSize="14px">{t(
            i18n,
          )`Total ${formatNumber(response.rgbppCoin.transactionsCount ?? undefined)} Items`}</Text>
        </IfBreakpoint>
        <PaginationSearchParams count={response.rgbppCoin.transactionsCount ?? 0} pageSize={pageSize} />
      </HStack>
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/assets/dobs/page.tsx
================================================
import { ComingSoon } from '@/components/coming-soon'

export default function Page() {
  return <ComingSoon />
}


================================================
File: frontend/src/app/[lang]/block/btc/[hashOrHeight]/layout.tsx
================================================
import { t } from '@lingui/macro'
import { notFound } from 'next/navigation'
import { PropsWithChildren } from 'react'
import { VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { BlockHeader } from '@/components/block-header'
import { BtcBlockOverview } from '@/components/btc/btc-block-overview'
import { LinkTabs } from '@/components/link-tabs'
import { graphql } from '@/gql'
import { BitcoinBlock } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'

export const dynamic = 'force-static'
export const revalidate = 10

const query = graphql(`
  query BtcBlock($hashOrHeight: String!) {
    btcBlock(hashOrHeight: $hashOrHeight) {
      id
      height
      version
      timestamp
      transactionsCount
      confirmations
      size
      weight
      bits
      difficulty
      totalFee
      miner {
        address
        satoshi
        pendingSatoshi
        transactionsCount
      }
      feeRateRange {
        min
        max
      }
    }
  }
`)

export default async function Layout({
  params: { hashOrHeight, lang },
  children,
}: PropsWithChildren<{ params: { hashOrHeight: string; lang: string } }>) {
  const data = await graphQLClient.request(query, { hashOrHeight })
  if (!data?.btcBlock) notFound()
  const i18n = getI18nInstance(lang)

  return (
    <VStack w="100%" maxW="content" p={{ base: '20px', lg: '30px' }} gap={{ base: '20px', lg: '30px' }}>
      <BlockHeader
        i18n={i18n}
        id={data.btcBlock.id}
        height={data.btcBlock.height}
        confirmations={data.btcBlock.confirmations}
      />
      <BtcBlockOverview i18n={i18n} block={data.btcBlock as BitcoinBlock} />
      <LinkTabs
        w="100%"
        links={[
          {
            href: `/block/btc/${hashOrHeight}/transactions`,
            label: t(i18n)`Transactions`,
          },
        ]}
      />
      {children}
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/block/btc/[hashOrHeight]/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading my="80px" />
}


================================================
File: frontend/src/app/[lang]/block/btc/[hashOrHeight]/route.ts
================================================
import { redirect } from 'next/navigation'
import { NextRequest } from 'next/server'

import { getLocaleFromHeaders } from '@/lib/get-locale-from-headers'

export function GET(request: NextRequest, { params: { hashOrHeight } }: { params: { hashOrHeight: string } }) {
  const locale = getLocaleFromHeaders()
  return redirect(`/${locale}/block/btc/${hashOrHeight}/transactions`)
}


================================================
File: frontend/src/app/[lang]/block/btc/[hashOrHeight]/transactions/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading my="80px" />
}


================================================
File: frontend/src/app/[lang]/block/btc/[hashOrHeight]/transactions/page.tsx
================================================
import { notFound } from 'next/navigation'
import { VStack } from 'styled-system/jsx'

import { BtcTransactionCardWithQueryInBlock } from '@/components/btc/btc-transaction-card-with-query-in-block'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'

export const dynamic = 'force-static'
export const revalidate = 10

const query = graphql(`
  query BtcBlockTransaction($hashOrHeight: String!) {
    btcBlock(hashOrHeight: $hashOrHeight) {
      timestamp
      transactions {
        txid
      }
    }
  }
`)

export default async function Page({
  params: { hashOrHeight, lang },
}: {
  params: { hashOrHeight: string; lang: string }
}) {
  const data = await graphQLClient.request(query, { hashOrHeight })
  if (!data?.btcBlock) notFound()
  return (
    <VStack w="100%" gap="30px">
      {data.btcBlock?.transactions?.map((tx) => {
        return <BtcTransactionCardWithQueryInBlock txid={tx.txid} key={tx.txid} />
      })}
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/block/ckb/[hashOrHeight]/layout.tsx
================================================
import { t } from '@lingui/macro'
import { notFound } from 'next/navigation'
import { PropsWithChildren } from 'react'
import { VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { BlockHeader } from '@/components/block-header'
import { CkbBlockOverview } from '@/components/ckb/ckb-block-overview'
import { LinkTabs } from '@/components/link-tabs'
import { graphql } from '@/gql'
import { CkbBlock } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'

const query = graphql(`
  query CkbBlock($hashOrHeight: String!) {
    ckbBlock(heightOrHash: $hashOrHeight) {
      version
      hash
      number
      timestamp
      transactionsCount
      totalFee
      miner {
        address
        shannon
        transactionsCount
      }
      reward
      size
      confirmations
    }
  }
`)

export default async function Layout({
  params: { hashOrHeight, lang },
  children,
}: PropsWithChildren<{
  params: { hashOrHeight: string; lang: string }
}>) {
  const data = await graphQLClient.request(query, { hashOrHeight })
  if (!data?.ckbBlock) notFound()
  const i18n = getI18nInstance(lang)

  return (
    <VStack w="100%" maxW="content" p={{ base: '20px', lg: '30px' }} gap={{ base: '20px', lg: '30px' }}>
      <BlockHeader
        i18n={i18n}
        id={data.ckbBlock.hash}
        height={data.ckbBlock.number}
        confirmations={data.ckbBlock.confirmations}
      />
      <CkbBlockOverview i18n={i18n} block={data.ckbBlock as CkbBlock} />
      <LinkTabs
        w="100%"
        links={[
          {
            href: `/block/ckb/${hashOrHeight}/transactions`,
            label: t(i18n)`Transactions`,
          },
        ]}
      />
      {children}
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/block/ckb/[hashOrHeight]/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading my="80px" />
}


================================================
File: frontend/src/app/[lang]/block/ckb/[hashOrHeight]/route.ts
================================================
import { redirect } from 'next/navigation'
import { NextRequest } from 'next/server'

import { getLocaleFromHeaders } from '@/lib/get-locale-from-headers'

export function GET(request: NextRequest, { params: { hashOrHeight } }: { params: { hashOrHeight: string } }) {
  const locale = getLocaleFromHeaders()
  return redirect(`/${locale}/block/ckb/${hashOrHeight}/transactions`)
}


================================================
File: frontend/src/app/[lang]/block/ckb/[hashOrHeight]/transactions/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading my="80px" />
}


================================================
File: frontend/src/app/[lang]/block/ckb/[hashOrHeight]/transactions/page.tsx
================================================
import { notFound } from 'next/navigation'
import { VStack } from 'styled-system/jsx'

import { CkbTransactionCardWithQueryInBlock } from '@/components/ckb/ckb-transaction-card-with-query-in-block'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'

const query = graphql(`
  query CkbBlockTransactions($hashOrHeight: String!) {
    ckbBlock(heightOrHash: $hashOrHeight) {
      timestamp
      transactions {
        hash
      }
    }
  }
`)

export default async function Page({ params: { hashOrHeight } }: { params: { hashOrHeight: string; lang: string } }) {
  const data = await graphQLClient.request(query, { hashOrHeight })
  if (!data?.ckbBlock) notFound()
  return (
    <VStack w="100%" gap="30px">
      {data.ckbBlock.transactions?.map((tx) => {
        return <CkbTransactionCardWithQueryInBlock key={tx.hash} hash={tx.hash} timestamp={data.ckbBlock?.timestamp} />
      })}
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/explorer/layout.tsx
================================================
import { PropsWithChildren } from 'react'
import { Center } from 'styled-system/jsx'

export default function Layout({ children }: PropsWithChildren) {
  return <Center w="100%">{children}</Center>
}


================================================
File: frontend/src/app/[lang]/explorer/loading.tsx
================================================
import { Center } from 'styled-system/jsx'

import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return (
    <Center h="300px">
      <Loading />
    </Center>
  )
}


================================================
File: frontend/src/app/[lang]/explorer/route.ts
================================================
import { redirect } from 'next/navigation'

import { getLocaleFromHeaders } from '@/lib/get-locale-from-headers'

export function GET() {
  const locale = getLocaleFromHeaders()
  return redirect(`/${locale}/explorer/btc`)
}


================================================
File: frontend/src/app/[lang]/explorer/btc/info.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import { Grid, HStack, VStack } from 'styled-system/jsx'

import BtcIcon from '@/assets/chains/btc.svg'
import SpeedDropIcon from '@/assets/speed/drop.svg'
import SpeedHighIcon from '@/assets/speed/high.svg'
import SpeedLowIcon from '@/assets/speed/low.svg'
import SpeedMediumIcon from '@/assets/speed/medium.svg'
import {
  OverviewInfo,
  OverviewInfoGrid,
  OverviewInfoItem,
  OverviewInfoTagLabel,
  splitLineBefore,
} from '@/components/overview-info'
import { Heading } from '@/components/ui'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'

export async function Info({ i18n }: { i18n: I18n }) {
  const { btcChainInfo, rgbppStatistic } = await graphQLClient.request(
    graphql(`
      query BtcChainInfo {
        btcChainInfo {
          tipBlockHeight
          tipBlockHash
          difficulty
          transactionsCountIn24Hours
          fees {
            fastest
            halfHour
            hour
            economy
            minimum
          }
        }
        rgbppStatistic {
          latest24HoursL1TransactionsCount
          holdersCount(layer: L1)
        }
      }
    `),
  )

  return (
    <VStack gridColumn="1/3" gap="20px" bg="bg.card" p={{ base: '20px', md: '30px' }} alignItems="start" rounded="8px">
      <HStack gap="16px">
        <BtcIcon w="48px" h="48px" />
        <Heading fontSize="20px" fontWeight="bold">{t(i18n)`Bitcoin`}</Heading>
      </HStack>
      <Grid w="100%" gridTemplateColumns={{ base: '1fr', xl: 'repeat(2, 1fr)' }} gap={{ base: '20px', md: '30px' }}>
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Block Height`} formatNumber>
            {btcChainInfo.tipBlockHeight}
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`L1 RGB++ Txns(24H)`} formatNumber>
            {rgbppStatistic.latest24HoursL1TransactionsCount}
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`RGB++ Assets Holders`} formatNumber>
            {rgbppStatistic.holdersCount}
          </OverviewInfoItem>
        </OverviewInfo>
        <OverviewInfoGrid
          gridTemplateColumns={{ base: 'repeat(2, 1fr)', md: 'repeat(4, 1fr)' }}
          rowGap="35px"
          css={{
            '& > div:not(:last-child)': {
              pos: 'relative',
              _before: { ...splitLineBefore, content: '" "' },
            },
            '& > div:nth-child(even):not(:last-child)': {
              pos: 'relative',
              _before: {
                ...splitLineBefore,
                content: { base: 'unset', md: '" "' },
              },
            },
          }}
        >
          <OverviewInfoItem
            formatNumber
            unit={t(i18n)`sats/kB`}
            direction="column"
            label={
              <OverviewInfoTagLabel bg="danger.a10" color="danger" icon={<SpeedHighIcon />} mx="auto">
                {t(i18n)`High`}
              </OverviewInfoTagLabel>
            }
          >
            {btcChainInfo.fees.fastest}
          </OverviewInfoItem>
          <OverviewInfoItem
            formatNumber
            direction="column"
            unit={t(i18n)`sats/kB`}
            label={
              <OverviewInfoTagLabel bg="warning.a10" color="warning" icon={<SpeedMediumIcon />} mx="auto">
                {t(i18n)`Medium`}
              </OverviewInfoTagLabel>
            }
          >
            {btcChainInfo.fees.halfHour}
          </OverviewInfoItem>
          <OverviewInfoItem
            formatNumber
            unit={t(i18n)`sats/kB`}
            direction="column"
            label={
              <OverviewInfoTagLabel bg="success.a10" color="success" icon={<SpeedLowIcon />} mx="auto">
                {t(i18n)`Low`}
              </OverviewInfoTagLabel>
            }
          >
            {btcChainInfo.fees.economy}
          </OverviewInfoItem>
          <OverviewInfoItem
            formatNumber
            unit={t(i18n)`sats/kB`}
            direction="column"
            label={
              <OverviewInfoTagLabel bg="brand.a10" color="brand" icon={<SpeedDropIcon />} mx="auto">
                {t(i18n)`Drop`}
              </OverviewInfoTagLabel>
            }
          >
            {btcChainInfo.fees.minimum}
          </OverviewInfoItem>
        </OverviewInfoGrid>
      </Grid>
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/explorer/btc/loading.tsx
================================================
import { Center } from 'styled-system/jsx'

import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return (
    <Center h="300px">
      <Loading />
    </Center>
  )
}


================================================
File: frontend/src/app/[lang]/explorer/btc/page.tsx
================================================
import { t } from '@lingui/macro'
import { Box, Grid } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { Info } from '@/app/[lang]/explorer/btc/info'
import { ExplorerTxList } from '@/components/explorer-tx-list'
import { Heading } from '@/components/ui'
import { graphql } from '@/gql'
import { RgbppTransaction } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'

export const revalidate = 10
export const dynamic = 'force-static'

const query = graphql(`
  query RgbppLatestL1Transactions($limit: Int!) {
    rgbppLatestL1Transactions(limit: $limit) {
      txs {
        ckbTxHash
        btcTxid
        leapDirection
        blockNumber
        timestamp
        ckbTransaction {
          outputs {
            txHash
            index
            capacity
            cellType
            lock {
              codeHash
              hashType
              args
            }
            xudtInfo {
              symbol
              amount
              decimal
            }
            status {
              consumed
              txHash
              index
            }
          }
        }
      }
      total
      pageSize
    }
  }
`)

export default async function Page({ params: { lang } }: { params: { lang: string } }) {
  const i18n = getI18nInstance(lang)
  const { rgbppLatestL1Transactions } = await graphQLClient.request(query, { limit: 10 })

  return (
    <Grid gridTemplateColumns="repeat(2, 1fr)" w="100%" maxW="content" p={{ base: '20px', xl: '30px' }} gap="30px">
      <Info i18n={i18n} />
      <Box bg="bg.card" rounded="8px" whiteSpace="nowrap" pb="12px" gridColumn="1/3">
        <Heading fontSize="20px" fontWeight="semibold" p="30px">{t(i18n)`Latest L1 RGB++ transaction`}</Heading>
        <ExplorerTxList<RgbppTransaction>
          txs={rgbppLatestL1Transactions.txs as RgbppTransaction[]}
          txid={(tx) => tx.btcTxid ?? ''}
        />
      </Box>
    </Grid>
  )
}


================================================
File: frontend/src/app/[lang]/explorer/ckb/info.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import { Grid, HStack, VStack } from 'styled-system/jsx'

import CkbIcon from '@/assets/chains/ckb.svg'
import SpeedHighIcon from '@/assets/speed/high.svg'
import SpeedLowIcon from '@/assets/speed/low.svg'
import SpeedMediumIcon from '@/assets/speed/medium.svg'
import { OverviewInfo, OverviewInfoItem, OverviewInfoTagLabel } from '@/components/overview-info'
import { Heading } from '@/components/ui'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'

export async function Info({ i18n }: { i18n: I18n }) {
  const { ckbChainInfo, rgbppStatistic } = await graphQLClient.request(
    graphql(`
      query CkbChainInfo {
        ckbChainInfo {
          tipBlockNumber
          fees {
            fast
            slow
            average
          }
        }
        rgbppStatistic {
          latest24HoursL2TransactionsCount
          holdersCount(layer: L2)
        }
      }
    `),
  )

  return (
    <VStack gridColumn="1/3" gap="20px" bg="bg.card" p={{ base: '20px', md: '30px' }} alignItems="start" rounded="8px">
      <HStack gap="16px">
        <CkbIcon w="48px" h="48px" />
        <Heading fontSize="20px" fontWeight="bold">{t(i18n)`CKB`}</Heading>
      </HStack>
      <Grid w="100%" gridTemplateColumns={{ base: '1fr', xl: 'repeat(2, 1fr)' }} gap={{ base: '20px', md: '30px' }}>
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Block Height`} formatNumber>
            {ckbChainInfo.tipBlockNumber}
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`L2 RGB++ Txns(24H)`} formatNumber>
            {rgbppStatistic.latest24HoursL2TransactionsCount}
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`RGB++ Assets Holders`} formatNumber>
            {rgbppStatistic.holdersCount}
          </OverviewInfoItem>
        </OverviewInfo>
        <OverviewInfo>
          <OverviewInfoItem
            formatNumber
            unit={t(i18n)`shannons/kB`}
            label={
              <OverviewInfoTagLabel bg="danger.a10" color="danger" icon={<SpeedHighIcon />}>
                {t(i18n)`High`}
              </OverviewInfoTagLabel>
            }
          >
            {ckbChainInfo.fees.fast}
          </OverviewInfoItem>
          <OverviewInfoItem
            formatNumber
            unit={t(i18n)`shannons/kB`}
            label={
              <OverviewInfoTagLabel bg="warning.a10" color="warning" icon={<SpeedMediumIcon />}>
                {t(i18n)`Medium`}
              </OverviewInfoTagLabel>
            }
          >
            {ckbChainInfo.fees.average}
          </OverviewInfoItem>
          <OverviewInfoItem
            formatNumber
            unit={t(i18n)`shannons/kB`}
            label={
              <OverviewInfoTagLabel bg="success.a10" color="success" icon={<SpeedLowIcon />}>
                {t(i18n)`Low`}
              </OverviewInfoTagLabel>
            }
          >
            {ckbChainInfo.fees.slow}
          </OverviewInfoItem>
        </OverviewInfo>
      </Grid>
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/explorer/ckb/loading.tsx
================================================
import { Center } from 'styled-system/jsx'

import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return (
    <Center h="300px">
      <Loading />
    </Center>
  )
}


================================================
File: frontend/src/app/[lang]/explorer/ckb/page.tsx
================================================
import { t } from '@lingui/macro'
import { Box, Grid } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { Info } from '@/app/[lang]/explorer/ckb/info'
import { ExplorerTxList } from '@/components/explorer-tx-list'
import { Heading } from '@/components/ui'
import { graphql } from '@/gql'
import { RgbppTransaction } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'

export const revalidate = 10
export const dynamic = 'force-static'

const query = graphql(`
  query RgbppLatestL2Transactions($limit: Int!) {
    rgbppLatestL2Transactions(limit: $limit) {
      txs {
        ckbTxHash
        leapDirection
        timestamp
        ckbTransaction {
          outputs {
            txHash
            index
            capacity
            cellType
            lock {
              codeHash
              hashType
              args
            }
            xudtInfo {
              symbol
              amount
              decimal
            }
            status {
              consumed
              txHash
              index
            }
          }
        }
      }
      total
      pageSize
    }
  }
`)

export default async function Page({ params: { lang } }: { params: { lang: string } }) {
  const i18n = getI18nInstance(lang)
  const { rgbppLatestL2Transactions } = await graphQLClient.request(query, { limit: 10 })

  return (
    <Grid gridTemplateColumns="repeat(2, 1fr)" w="100%" maxW="content" p={{ base: '20px', xl: '30px' }} gap="30px">
      <Info i18n={i18n} />
      <Box bg="bg.card" rounded="8px" whiteSpace="nowrap" pb="12px" gridColumn="1/3">
        <Heading fontSize="20px" fontWeight="semibold" p="30px">{t(i18n)`Latest L2 RGB++ transaction`}</Heading>
        <ExplorerTxList<RgbppTransaction>
          txs={rgbppLatestL2Transactions.txs as RgbppTransaction[]}
          txid={(tx) => tx.ckbTxHash ?? ''}
        />
      </Box>
    </Grid>
  )
}


================================================
File: frontend/src/app/[lang]/transaction/[tx]/btc.tsx
================================================
import type { I18n } from '@lingui/core'
import { VStack } from 'styled-system/jsx'

import { BtcTransactionOverview } from '@/components/btc/btc-transaction-overview'
import { BtcUtxos } from '@/components/btc/btc-utxos'
import { CkbCells } from '@/components/ckb/ckb-cells'
import { TransactionHeader } from '@/components/transaction-header'
import { BitcoinTransaction, CkbTransaction, LeapDirection } from '@/gql/graphql'
import { resolveLayerTypeFromRGBppTransaction } from '@/lib/resolve-layer-type-from-rgbpp-transaction'

export function BTCTransactionPage({
  btcTransaction,
  ckbTransaction,
  leapDirection,
  i18n,
}: {
  btcTransaction: BitcoinTransaction
  ckbTransaction?: CkbTransaction | null
  leapDirection?: LeapDirection | null
  i18n: I18n
}) {
  return (
    <VStack w="100%" maxW="content" p={{ base: '20px', xl: '30px' }} gap={{ base: '20px', xl: '30px' }}>
      <TransactionHeader
        type={resolveLayerTypeFromRGBppTransaction({ ckbTransaction, leapDirection, btcTransaction })}
        txid={btcTransaction.txid}
        confirmations={btcTransaction.confirmations}
        i18n={i18n}
      />
      <BtcTransactionOverview i18n={i18n} btcTransaction={btcTransaction} />
      <BtcUtxos
        txid={btcTransaction.txid}
        vin={btcTransaction.vin}
        vout={btcTransaction.vout}
        ckbCell={ckbTransaction ?? undefined}
        i18n={i18n}
      />
      {ckbTransaction ? <CkbCells i18n={i18n} ckbTransaction={ckbTransaction} isBinding /> : null}
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/transaction/[tx]/ckb.tsx
================================================
import type { I18n } from '@lingui/core'
import { VStack } from 'styled-system/jsx'

import { BtcUtxos } from '@/components/btc/btc-utxos'
import { CkbCells } from '@/components/ckb/ckb-cells'
import { CkbTransactionOverview } from '@/components/ckb/ckb-transaction-overview'
import { TransactionHeader } from '@/components/transaction-header'
import { BitcoinTransaction, CkbTransaction, LeapDirection } from '@/gql/graphql'
import { resolveLayerTypeFromRGBppTransaction } from '@/lib/resolve-layer-type-from-rgbpp-transaction'

export function CKBTransactionPage({
  ckbTransaction,
  btcTransaction,
  leapDirection,
  i18n,
}: {
  ckbTransaction: CkbTransaction
  btcTransaction?: BitcoinTransaction | null
  leapDirection?: LeapDirection | null
  i18n: I18n
}) {
  return (
    <VStack w="100%" maxW="content" p={{ base: '20px', xl: '30px' }} gap={{ base: '20px', xl: '30px' }}>
      <TransactionHeader
        type={resolveLayerTypeFromRGBppTransaction({ ckbTransaction, leapDirection, btcTransaction })}
        txid={ckbTransaction.hash}
        confirmations={ckbTransaction.confirmations}
        i18n={i18n}
      />
      <CkbTransactionOverview ckbTransaction={ckbTransaction} i18n={i18n} />
      <CkbCells ckbTransaction={ckbTransaction} i18n={i18n} />
      {btcTransaction ? (
        <BtcUtxos
          txid={btcTransaction.txid}
          vin={btcTransaction.vin}
          vout={btcTransaction.vout}
          isBinding
          ckbCell={ckbTransaction}
          i18n={i18n}
        />
      ) : null}
    </VStack>
  )
}


================================================
File: frontend/src/app/[lang]/transaction/[tx]/loading.tsx
================================================
import { Loading } from '@/components/loading'

export default function LoadingPage() {
  return <Loading my="80px" />
}


================================================
File: frontend/src/app/[lang]/transaction/[tx]/page.tsx
================================================
import { notFound } from 'next/navigation'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { BTCTransactionPage } from '@/app/[lang]/transaction/[tx]/btc'
import { CKBTransactionPage } from '@/app/[lang]/transaction/[tx]/ckb'
import { graphql } from '@/gql'
import { BitcoinTransaction, CkbTransaction } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'

export const revalidate = 60
export const dynamic = 'force-static'

const rgbppTxQuery = graphql(`
  query RgbppTransaction($txidOrTxHash: String!) {
    rgbppTransaction(txidOrTxHash: $txidOrTxHash) {
      ckbTxHash
      btcTxid
      leapDirection
    }
  }
`)

const btcTxQuery = graphql(`
  query BtcTx($txid: String!) {
    btcTransaction(txid: $txid) {
      txid
      blockHeight
      blockHash
      size
      fee
      feeRate
      confirmed
      confirmations
      vin {
        txid
        vout
        isCoinbase
        prevout {
          txid
          vout
          value
          address {
            address
          }
          status {
            spent
            txid
            vin
          }
        }
      }
      vout {
        txid
        vout
        value
        address {
          address
        }
        status {
          spent
          txid
          vin
        }
      }
    }
  }
`)
const ckbTxQuery = graphql(`
  query CkbTx($hash: String!) {
    ckbTransaction(txHash: $hash) {
      isCellbase
      blockNumber
      hash
      fee
      feeRate
      outputs {
        txHash
        index
        capacity
        cellType
        type {
          codeHash
          hashType
          args
        }
        lock {
          codeHash
          hashType
          args
        }
        status {
          consumed
          txHash
          index
        }
        xudtInfo {
          symbol
          amount
          decimal
          typeHash
        }
      }
      inputs {
        txHash
        index
        capacity
        cellType
        type {
          codeHash
          hashType
          args
        }
        lock {
          codeHash
          hashType
          args
        }
        xudtInfo {
          symbol
          amount
          decimal
          typeHash
        }
        status {
          consumed
          txHash
          index
        }
      }
      block {
        timestamp
        hash
      }
    }
  }
`)

export default async function Page({ params: { tx, lang } }: { params: { tx: string; lang: string } }) {
  const i18n = getI18nInstance(lang)
  const { rgbppTransaction } = await graphQLClient.request(rgbppTxQuery, { txidOrTxHash: tx })

  if (rgbppTransaction) {
    const [btcTxRes, ckbTxRes] = await Promise.all([
      rgbppTransaction?.btcTxid ? graphQLClient.request(btcTxQuery, { txid: rgbppTransaction.btcTxid }) : undefined,
      rgbppTransaction?.ckbTxHash ? graphQLClient.request(ckbTxQuery, { hash: rgbppTransaction.ckbTxHash }) : undefined,
    ])
    const btcTransaction = btcTxRes?.btcTransaction
    const ckbTransaction = ckbTxRes?.ckbTransaction
    if (btcTransaction && !tx.startsWith('0x')) {
      return (
        <BTCTransactionPage
          btcTransaction={btcTransaction as BitcoinTransaction}
          ckbTransaction={ckbTransaction as CkbTransaction}
          leapDirection={rgbppTransaction?.leapDirection}
          i18n={i18n}
        />
      )
    }

    if (ckbTransaction && tx.startsWith('0x')) {
      return (
        <CKBTransactionPage
          ckbTransaction={ckbTransaction as CkbTransaction}
          btcTransaction={btcTransaction as BitcoinTransaction}
          leapDirection={rgbppTransaction?.leapDirection}
          i18n={i18n}
        />
      )
    }
  }

  const btcTxRes = await graphQLClient.request(btcTxQuery, { txid: tx })

  if (btcTxRes.btcTransaction) {
    return <BTCTransactionPage i18n={i18n} btcTransaction={btcTxRes.btcTransaction as BitcoinTransaction} />
  }

  const ckbTxRes = await graphQLClient.request(ckbTxQuery, { hash: tx })
  if (ckbTxRes.ckbTransaction) {
    return <CKBTransactionPage i18n={i18n} ckbTransaction={ckbTxRes.ckbTransaction as CkbTransaction} />
  }

  notFound()
}


================================================
File: frontend/src/components/ago-time-formatter.tsx
================================================
'use client'

import { t } from '@lingui/macro'
import { useLingui } from '@lingui/react'
import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'
import { memo, useMemo, useState } from 'react'
import { useInterval } from 'usehooks-ts'

import { Tooltip } from '@/components/ui'
import { TIME_TEMPLATE } from '@/constants'

dayjs.extend(relativeTime)

export const AgoTimeFormatter = memo<{ time: string | number; tooltip?: boolean }>(function Time({
  time: rawTime,
  tooltip = false,
}) {
  const time = useMemo(() => dayjs(rawTime), [rawTime])
  const { i18n } = useLingui()
  const timeAgo = () => {
    const now = dayjs()
    const secondsDiff = now.diff(time, 'second')
    const minutesDiff = now.diff(time, 'minute')
    if (minutesDiff < 1) {
      return t(i18n)`${secondsDiff}s ago`
    } else if (minutesDiff < 60) {
      const remainingSeconds = secondsDiff - minutesDiff * 60
      if (remainingSeconds > 0) {
        return t(i18n)`${minutesDiff}m ${remainingSeconds}s ago`
      }
      return t(i18n)`${minutesDiff}m ago`
    } else if (minutesDiff < 1440) {
      const hoursDiff = Math.floor(minutesDiff / 60)
      const remainingMinutes = minutesDiff - hoursDiff * 60
      if (remainingMinutes > 0) {
        return t(i18n)`${hoursDiff}h ${remainingMinutes}m ago`
      }
      return t(i18n)`${hoursDiff}h ago`
    }
    return time.from(now)
  }
  const [text, setText] = useState(timeAgo())
  useInterval(() => setText(timeAgo()), 1000)

  if (!tooltip) {
    return <>{text}</>
  }

  return (
    <Tooltip.Root openDelay={0} closeDelay={0}>
      <Tooltip.Trigger>{text}</Tooltip.Trigger>
      <Tooltip.Positioner>
        <Tooltip.Arrow>
          <Tooltip.ArrowTip />
        </Tooltip.Arrow>
        <Tooltip.Content>{time.format(TIME_TEMPLATE)}</Tooltip.Content>
      </Tooltip.Positioner>
    </Tooltip.Root>
  )
})


================================================
File: frontend/src/components/block-header.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'

import BlockIcon from '@/assets/block.svg'
import { Copier } from '@/components/copier'
import { Heading, Text } from '@/components/ui'
import { Icon } from '@/components/ui/primitives/icon'
import { formatNumber } from '@/lib/string/format-number'

import { Box, Grid } from '../../styled-system/jsx'

export function BlockHeader({
  id,
  height,
  confirmations,
  i18n,
}: {
  id: string
  height: number
  confirmations?: number | null
  i18n: I18n
}) {
  return (
    <Grid
      gridTemplateColumns={{ base: 'auto 1fr', lg: '56px auto 1fr' }}
      w="100%"
      columnGap="16px"
      rowGap="4px"
      bg="bg.card"
      rounded="8px"
      p={{ base: '20px', xl: '30px' }}
      justifyContent="start"
      alignItems="center"
    >
      <Icon display={{ base: 'none', lg: 'block' }} w="56px" h="56px" gridRow="1/3">
        <BlockIcon />
      </Icon>

      <Heading fontSize="20px" fontWeight="semibold" gridRow="1/2">
        {t(i18n)`Block ${formatNumber(height)}`}
      </Heading>

      <Box gridRow="2/3" gridColumn={{ base: '1/3', lg: '2/3' }}>
        <Copier value={id} wordBreak="break-all" textAlign="left">
          {id}
        </Copier>
      </Box>

      {confirmations ? (
        <Box
          color="brand"
          fontWeight="semibold"
          fontSize={{ base: '16px', md: '20px' }}
          mt={{ base: 0, md: 'auto' }}
          mb={{ base: 'auto', md: 'auto' }}
          lineHeight={{ base: '22px', md: '24px' }}
          py={{ base: 0, md: '4px' }}
          px="12px"
          rounded="4px"
          bg="brand.a10"
          border="1px solid currentColor"
          w="fit-content"
          ml="auto"
          gridRow="1/3"
          gridColumn={{ base: '2/3', lg: '3/4' }}
        >
          {formatNumber(confirmations)}{' '}
          <Text as="span" fontSize="14px" fontWeight="medium" display={{ base: 'none', xl: 'inline' }}>
            {t(i18n)`Confirmations`}
          </Text>
        </Box>
      ) : null}
    </Grid>
  )
}


================================================
File: frontend/src/components/client-only.tsx
================================================
import dynamic from 'next/dynamic'
import { PropsWithChildren } from 'react'

const ClientOnly = (props: PropsWithChildren) => {
  const { children } = props
  return children
}

export default dynamic(() => Promise.resolve(ClientOnly), {
  ssr: false,
})


================================================
File: frontend/src/components/coin-list.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import dayjs from 'dayjs'
import { sum } from 'lodash-es'
import { Box, HStack, styled, VStack } from 'styled-system/jsx'

import BtcIcon from '@/assets/chains/btc.svg'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { TextOverflowTooltip } from '@/components/text-overflow-tooltip'
import { Table, Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { DATE_TEMPLATE } from '@/constants'
import { RgbppCoinsQuery } from '@/gql/graphql'
import { formatNumber } from '@/lib/string/format-number'

type PickedCoin = Pick<
  RgbppCoinsQuery['rgbppCoins']['coins'][number],
  | 'typeHash'
  | 'icon'
  | 'symbol'
  | 'l1HoldersCount'
  | 'l2HoldersCount'
  | 'h24CkbTransactionsCount'
  | 'totalAmount'
  | 'decimal'
  | 'deployedAt'
>

export function CoinList<T extends PickedCoin>({ coins }: { coins: T[] }) {
  return (
    <IfBreakpoint breakpoint="lg" fallback={<CoinListGrid coins={coins} />}>
      <Table.Root w="100%" tableLayout="fixed">
        <Table.Head>
          <Table.Row>
            <Table.Header>
              <Trans>Coin</Trans>
            </Table.Header>
            <Table.Header>
              <Trans>L1 and L2 Holders</Trans>
            </Table.Header>
            <Table.Header>
              <Trans>Txns(24H)</Trans>
            </Table.Header>
            <Table.Header>
              <Trans>Supply</Trans>
            </Table.Header>
            <Table.Header>
              <Trans>Deploy Time</Trans>
            </Table.Header>
          </Table.Row>
        </Table.Head>
        <Table.Body>
          {coins.map((coin) => {
            return (
              <Table.Row key={coin.typeHash}>
                <Table.Cell>
                  <Link
                    href={`/assets/coins/${coin.typeHash}`}
                    display="flex"
                    alignItems="center"
                    gap={3}
                    color="text.link"
                    cursor="pointer"
                  >
                    {coin.icon ? (
                      <styled.img w="32px" h="32px" src={coin.icon} rounded="100%" />
                    ) : (
                      <BtcIcon w="32px" h="32px" />
                    )}
                    <TextOverflowTooltip label={coin.symbol}>
                      <Text maxW="200px" truncate cursor="pointer">
                        {coin.symbol}
                      </Text>
                    </TextOverflowTooltip>
                  </Link>
                </Table.Cell>
                <Table.Cell>{formatNumber(sum([coin.l1HoldersCount, coin.l2HoldersCount]))}</Table.Cell>
                <Table.Cell>{formatNumber(coin.h24CkbTransactionsCount)}</Table.Cell>
                <Table.Cell>{formatNumber(coin.totalAmount, coin.decimal)}</Table.Cell>
                <Table.Cell>{coin.deployedAt ? dayjs(coin.deployedAt).format(DATE_TEMPLATE) : '-'}</Table.Cell>
              </Table.Row>
            )
          })}
        </Table.Body>
      </Table.Root>
    </IfBreakpoint>
  )
}

export function CoinListGrid<T extends PickedCoin>({ coins }: { coins: T[] }) {
  return (
    <VStack gap={0} w="100%">
      {coins.map((coin) => {
        return (
          <Link
            href={`/assets/coins/${coin.typeHash}`}
            display="grid"
            w="100%"
            gap="16px"
            gridTemplateColumns="repeat(2, 1fr)"
            key={coin.typeHash}
            p="20px"
            borderBottom="1px solid"
            borderBottomColor="border.primary"
            _hover={{
              bg: 'bg.card.hover',
            }}
          >
            <HStack w="100%" gridColumn="1/3" color="brand">
              {coin.icon ? (
                <styled.img w="32px" h="32px" src={coin.icon} rounded="100%" />
              ) : (
                <BtcIcon w="32px" h="32px" />
              )}
              <TextOverflowTooltip label={coin.symbol}>
                <Text maxW="200px" truncate cursor="pointer">
                  {coin.symbol}
                </Text>
              </TextOverflowTooltip>
            </HStack>
            {[
              {
                label: <Trans>L1 and L2 Holders</Trans>,
                value: formatNumber(sum([coin.l1HoldersCount, coin.l2HoldersCount])),
              },
              {
                label: <Trans>Txns(24H)</Trans>,
                value: formatNumber(coin.h24CkbTransactionsCount),
              },
              {
                label: <Trans>Supply</Trans>,
                value: formatNumber(coin.totalAmount, coin.decimal),
              },
              {
                label: <Trans>Deploy Time</Trans>,
                value: coin.deployedAt ? dayjs(coin.deployedAt).format(DATE_TEMPLATE) : '-',
              },
            ].map((x, i) => {
              return (
                <VStack fontSize="14px" w="100%" alignItems="start" fontWeight="medium" key={i} gap="4px">
                  <Box color="text.third">{x.label}</Box>
                  <Box>{x.value}</Box>
                </VStack>
              )
            })}
          </Link>
        )
      })}
    </VStack>
  )
}


================================================
File: frontend/src/components/coming-soon-text.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'

export function ComingSoonText() {
  return <Trans>Coming Soon</Trans>
}


================================================
File: frontend/src/components/coming-soon.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { VStack } from 'styled-system/jsx'

import ComingSoonSVG from '@/assets/coming-soon.svg'
import { Text } from '@/components/ui'

export function ComingSoon() {
  return (
    <VStack gap="10px" w="100%" bg="bg.card" maxW="content" p="30px" rounded="8px" pt="74px" pb="260px">
      <ComingSoonSVG w="200px" h="200px" />
      <Text color="text.third" fontSize="14px">
        <Trans>Coming soon, please stay tuned</Trans>
      </Text>
    </VStack>
  )
}


================================================
File: frontend/src/components/copier.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { useMutation } from '@tanstack/react-query'
import { Box, type BoxProps, HStack } from 'styled-system/jsx'
import { useCopyToClipboard } from 'usehooks-ts'

import CopyIcon from '@/assets/copy.svg'
import { HoverCard, Text } from '@/components/ui'
import { delay } from '@/lib/delay'

export interface CopierProps extends BoxProps {
  value?: string
  onlyIcon?: boolean
}

export function Copier({ value = '', children, onlyIcon = false, ...props }: CopierProps) {
  const [, copyFn] = useCopyToClipboard()
  const {
    mutateAsync: onCopy,
    isPending,
    reset,
  } = useMutation({
    async mutationFn() {
      await copyFn(value)
      await delay(3000)
    },
  })

  if (onlyIcon) {
    return (
      <HStack gap="12px" fontSize="14px" lineHeight="16px" color="text.third" onClick={() => onCopy()} {...props}>
        <Text>{children ?? value}</Text>
        <HoverCard.Root
          openDelay={0}
          closeDelay={0}
          positioning={{ placement: 'top' }}
          onOpenChange={async (details) => {
            if (!details.open) {
              await delay(300)
              reset()
            }
          }}
        >
          <HoverCard.Trigger>
            <CopyIcon cursor="pointer" w="16px" h="16px" />
          </HoverCard.Trigger>
          <HoverCard.Positioner>
            <HoverCard.Content py="8px" color="text.primary">
              <HoverCard.Arrow>
                <HoverCard.ArrowTip />
              </HoverCard.Arrow>
              {isPending ? <Trans>Copied</Trans> : <Trans>Copy</Trans>}
            </HoverCard.Content>
          </HoverCard.Positioner>
        </HoverCard.Root>
      </HStack>
    )
  }

  return (
    <HoverCard.Root
      openDelay={0}
      closeDelay={0}
      positioning={{ placement: 'top' }}
      onOpenChange={async (details) => {
        if (!details.open) {
          await delay(300)
          reset()
        }
      }}
    >
      <HoverCard.Trigger>
        <HStack
          gap="12px"
          fontSize="14px"
          lineHeight="16px"
          color="text.third"
          onClick={() => onCopy()}
          cursor="pointer"
          {...props}
        >
          <Box>{children ?? value}</Box>
          <CopyIcon w="16px" h="16px" flexShrink={0} />
        </HStack>
      </HoverCard.Trigger>
      <HoverCard.Positioner>
        <HoverCard.Content py="8px" color="text.primary" pointerEvents="none">
          <HoverCard.Arrow>
            <HoverCard.ArrowTip />
          </HoverCard.Arrow>
          {isPending ? <Trans>Copied</Trans> : <Trans>Copy</Trans>}
        </HoverCard.Content>
      </HoverCard.Positioner>
    </HoverCard.Root>
  )
}


================================================
File: frontend/src/components/failed-fallback.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { VStack } from 'styled-system/jsx'

import FailedSVG from '@/assets/failed.svg'
import { Text } from '@/components/ui'

export function FailedFallback() {
  return (
    <VStack gap={0} textAlign="center">
      <FailedSVG w="200px" h="200px" />
      <Text fontSize="14px" fontWeight="semibold" color="text.third">
        <Trans>Load failed, Please wait a moment</Trans>
      </Text>
    </VStack>
  )
}


================================================
File: frontend/src/components/footer.tsx
================================================
import { t } from '@lingui/macro'
import { Center, Flex, Grid, HStack, VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import LogoSVG from '@/assets/logo.svg'
import GithubSVG from '@/assets/social-medias/github.svg'
import MediumIcon from '@/assets/social-medias/medium.svg'
import TwitterSVG from '@/assets/social-medias/x.svg'
import { Heading, Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { env } from '@/constants/env'

export function Footer({ lang }: { lang: string }) {
  const i18n = getI18nInstance(lang)
  const socialMedias = [
    {
      href: env.public.UTXO_STACK_TWITTER_URL,
      icon: <TwitterSVG w={{ base: '24px', lg: '32px' }} h={{ base: '24px', lg: '32px' }} />,
    },
    {
      href: env.public.CKB_CELL_GITHUB_URL,
      icon: <GithubSVG w={{ base: '24px', lg: '32px' }} h={{ base: '24px', lg: '32px' }} />,
    },
    {
      href: env.public.UTXO_STACK_MEDIUM_URL,
      icon: <MediumIcon w={{ base: '24px', lg: '32px' }} h={{ base: '24px', lg: '32px' }} />,
    },
  ]

  return (
    <Center w="100%" bg="bg.card" mt="auto">
      <Flex
        flexDirection={{ base: 'column', lg: 'row' }}
        gap={{ base: 10, lg: 0 }}
        maxW="content"
        justifyContent="space-between"
        w="100%"
        px={{ base: '20px', lg: '30px' }}
        py={{ base: '30px', lg: '40px' }}
      >
        <Grid
          gridTemplateColumns={{ base: '32px 1fr auto', lg: '56px 1fr' }}
          gridTemplateRows={{ base: '32px', lg: '56px 48px' }}
          gridColumnGap={{ base: '8px', lg: '12px' }}
          gridRowGap="24px"
        >
          <Link href="/">
            <LogoSVG w={{ base: '32px', lg: '56px' }} h={{ base: '32px', lg: '56px' }} />
          </Link>
          <Text
            fontWeight="semibold"
            fontSize={{ base: '16px', lg: '24px' }}
            lineHeight={{ base: '32px', lg: '56px' }}
          >{t(i18n)`RGB++ Explorer`}</Text>
          <HStack gridColumn={{ base: 'auto', lg: '2/3' }} gap={{ base: '10px', lg: '28px' }}>
            {socialMedias.map(({ href, icon }) => (
              <Link
                key={href}
                rounded="100%"
                border="1px solid"
                borderColor="border.light"
                w={{ base: '32px', lg: '48px' }}
                h={{ base: '32px', lg: '48px' }}
                display="flex"
                justifyContent="center"
                alignItems="center"
                href={href}
                target="_blank"
                transition="200ms"
                _hover={{
                  color: 'brand',
                  borderColor: 'brand',
                }}
              >
                {icon}
              </Link>
            ))}
          </HStack>
        </Grid>
        <HStack
          gap={{ base: 'auto', lg: '134px' }}
          whiteSpace="nowrap"
          alignItems="start"
          justifyContent={{ base: 'space-between', lg: 'start' }}
          fontSize={{ base: '14px', lg: '16px' }}
        >
          <VStack w={{ base: 'auto', lg: '100%' }} gap="30px" alignItems="start">
            <Heading fontSize={{ base: '16px', lg: '18px' }}>{t(i18n)`Explorer`}</Heading>
            <VStack w="100%" gap="16px" color="text.third" alignItems="start">
              <Link href={env.public.MEMPOOL_URL} _hover={{ textDecoration: 'underline' }}>
                {t(i18n)`Bitcoin`}
              </Link>
              <Link href={env.public.CKB_EXPLORER_URL} _hover={{ textDecoration: 'underline' }}>
                {t(i18n)`CKB`}
              </Link>
            </VStack>
          </VStack>
          <VStack w={{ base: 'auto', lg: '100%' }} gap="30px" alignItems="start">
            <Heading fontSize={{ base: '16px', lg: '18px' }}>{t(i18n)`RGB++`}</Heading>
            <VStack w="100%" gap="16px" color="text.third" alignItems="start">
              <Link href={env.public.RGBPP_WHITE_PAPER_URL} _hover={{ textDecoration: 'underline' }}>
                {t(i18n)`Whitepaper`}
              </Link>
              <Link href={env.public.RGBPP_SCRIPT_URL} _hover={{ textDecoration: 'underline' }}>
                {t(i18n)`Script`}
              </Link>
              <Link href={env.public.RGBPP_SDK_URL} _hover={{ textDecoration: 'underline' }}>
                {t(i18n)`SDK`}
              </Link>
            </VStack>
          </VStack>
          <VStack w={{ base: 'auto', lg: '100%' }} gap="30px" alignItems="start">
            <Heading fontSize={{ base: '16px', lg: '18px' }}>{t(i18n)`More Info`}</Heading>
            <VStack w="100%" gap="16px" color="text.third" alignItems="start">
              <Link href={env.public.CKB_URL} _hover={{ textDecoration: 'underline' }}>
                {t(i18n)`Nervos CKB`}
              </Link>
              <Link href={env.public.UTXO_STACK_URL} _hover={{ textDecoration: 'underline' }}>
                {t(i18n)`UTXO Stack`}
              </Link>
            </VStack>
          </VStack>
        </HStack>
      </Flex>
    </Center>
  )
}


================================================
File: frontend/src/components/home-quick-info.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import { sum } from 'lodash-es'
import { Box, Grid, VStack } from 'styled-system/jsx'

import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'
import { formatNumber } from '@/lib/string/format-number'

export async function HomeQuickInfo({ i18n }: { i18n: I18n }) {
  const { rgbppStatistic } = await graphQLClient
    .request(
      graphql(`
        query RgbppStatistic {
          rgbppStatistic {
            l1HoldersCount: holdersCount(layer: L1)
            l2HoldersCount: holdersCount(layer: L2)
            latest24HoursL2TransactionsCount
            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)
            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)
            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)
          }
        }
      `),
    )
    .catch(() => ({ rgbppStatistic: null }))
  const transactionsCount = formatNumber(
    rgbppStatistic
      ? sum([
          rgbppStatistic.latest24HoursL1TransactionsCountLeapIn,
          rgbppStatistic.latest24HoursL1TransactionsCountLeapOutput,
          rgbppStatistic.latest24HoursL1TransactionsCountLeapWithin,
        ])
      : undefined,
  )

  const holdersCount = formatNumber(
    rgbppStatistic ? sum([rgbppStatistic.l1HoldersCount, rgbppStatistic.l2HoldersCount]) : undefined,
  )

  return (
    <Grid
      rounded="200px"
      border="1px solid rgba(255, 255, 255, 0.6)"
      gridTemplateColumns="1fr 1fr"
      px="20px"
      py={{ base: '8px', md: '16px', xl: '20px' }}
      backdropFilter="blur(16.5px)"
      bg="rgba(0, 0, 0, 0.4)"
      w={{ base: '275px', md: '400px', xl: '580px' }}
      fontSize={{ base: '20px', md: '30px', xl: '36px' }}
      lineHeight={{ base: '30px', md: '38px', xl: '100%' }}
      fontWeight="bold"
    >
      <VStack gap="2px" borderRight="2px solid" borderColor="rgba(255, 255, 255, 0.1)">
        <Box>{transactionsCount}</Box>
        <Box
          fontSize={{ base: '12px', md: '14px' }}
          lineHeight={{ base: '16px', md: '20px' }}
          color="text.third"
          fontWeight={{ base: 'medium', xl: 'semibold' }}
        >
          {t(i18n)`RGB++ Txns`}
        </Box>
      </VStack>
      <VStack gap="2px">
        <Box>{holdersCount}</Box>
        <Box
          fontSize={{ base: '12px', md: '14px' }}
          lineHeight={{ base: '16px', md: '20px' }}
          color="text.third"
          fontWeight={{ base: 'medium', xl: 'semibold' }}
        >
          {t(i18n)`RGB++ Holders`}
        </Box>
      </VStack>
    </Grid>
  )
}


================================================
File: frontend/src/components/home-title.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { useEffect, useRef } from 'react'
import { Box, Flex } from 'styled-system/jsx'
import Typed from 'typed.js'

import { Heading, Text } from '@/components/ui'

export function HomeTitle() {
  const el = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const typed = new Typed(el.current, {
      strings: [
        '<span style="color: #F7931A">BTC</span>',
        'RGB++',
        '<span style="color: var(--colors-brand)">UTXO</span>',
      ],
      typeSpeed: 80,
      backSpeed: 100,
      loop: true,
    })

    return () => {
      typed.destroy()
    }
  }, [])

  return (
    <Heading
      mt="10%"
      fontSize={{ base: '30px', sm: '54px', xl: '62px' }}
      fontWeight="semibold"
      lineHeight={{ base: '32px', sm: '62px', xl: '100px' }}
      display="flex"
      alignItems="center"
      flexWrap="wrap"
      textAlign="center"
      justifyContent="center"
      whiteSpace="nowrap"
    >
      <Trans>
        <Flex alignItems="center">
          Explore the
          <Flex
            display="flex"
            alignItems="center"
            w={{ base: '100px', sm: '200px', xl: '240px' }}
            mx="20px"
            h={{ base: '32px', sm: '62px', xl: '100px' }}
            justify="center"
          >
            <Box ref={el} display="inline-block" h={{ base: '32px', sm: '62px', xl: '100px' }} />
          </Flex>
        </Flex>
        <Text as="span" display="block" w={{ base: '100%', md: 'auto' }}>
          Ecosystem
        </Text>
      </Trans>
    </Heading>
  )
}


================================================
File: frontend/src/components/if-breakpoint.tsx
================================================
'use client'

import type { PropsWithChildren, ReactNode } from 'react'

import { type Breakpoint, useBreakpoints } from '@/hooks/useBreakpoints'

export function IfBreakpoint({
  breakpoint,
  fallback,
  children,
}: PropsWithChildren<{ breakpoint: Breakpoint; fallback?: ReactNode }>) {
  const isMatch = useBreakpoints(breakpoint)
  if (isMatch) return children
  return fallback
}


================================================
File: frontend/src/components/if-pathname.tsx
================================================
'use client'

import { useLingui } from '@lingui/react'
import { usePathname } from 'next/navigation'
import type { ReactNode } from 'react'

import { isRoutePathname } from '@/lib/if-route-pathname'

interface IfPathname {
  exact?: boolean
  isOneOf?: string[]
  isNotOneOf?: string[]
  children: ReactNode
}

export function IfPathname({ exact = false, isOneOf, isNotOneOf, children }: IfPathname) {
  const pathname = usePathname()
  const {
    i18n: { locale },
  } = useLingui()
  if (isOneOf && isOneOf.some((includedPath) => isRoutePathname(pathname, `/${locale}${includedPath}`, exact))) {
    return <>{children}</>
  }
  if (isNotOneOf && !isNotOneOf.some((excludedPath) => isRoutePathname(pathname, `/${locale}${excludedPath}`, exact))) {
    return <>{children}</>
  }
  return null
}


================================================
File: frontend/src/components/infinite-list-bottom.tsx
================================================
import { Trans } from '@lingui/macro'

import { IntersectionObserver } from '@/components/intersection-observer'
import { Loading } from '@/components/loading'

export interface InfiniteListBottomProps {
  fetchNextPage: () => Promise<unknown>
  hasNextPage?: boolean
  isFetchingNextPage?: boolean
}

export function InfiniteListBottom({ fetchNextPage, hasNextPage, isFetchingNextPage }: InfiniteListBottomProps) {
  return (
    <IntersectionObserver
      w="100%"
      h="100px"
      lineHeight="100px"
      display="flex"
      justifyContent="center"
      alignItems="center"
      color="text.secondary"
      onChange={(isIntersecting) => {
        if (isIntersecting && hasNextPage) {
          fetchNextPage()
        }
      }}
    >
      {isFetchingNextPage ? <Loading mt="20px" /> : null}
      {!isFetchingNextPage && !hasNextPage ? <Trans>No More</Trans> : null}
    </IntersectionObserver>
  )
}


================================================
File: frontend/src/components/intersection-observer.tsx
================================================
'use client'

import { Box, BoxProps } from 'styled-system/jsx'
import { useIntersectionObserver } from 'usehooks-ts'

export interface IntersectionObserverProps extends Omit<BoxProps, 'onChange'> {
  onChange?: (isIntersecting: boolean, entry: IntersectionObserverEntry) => void
  threshold?: number
}

export function IntersectionObserver({ threshold = 0.5, children, onChange, ...props }: IntersectionObserverProps) {
  const { ref } = useIntersectionObserver({
    threshold,
    onChange,
  })

  return (
    <Box ref={ref} {...props}>
      {children}
    </Box>
  )
}


================================================
File: frontend/src/components/layer-type.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { Box, BoxProps, HStack } from 'styled-system/jsx'

import ArrowIcon from '@/assets/arrow-2.svg'
import BtcIcon from '@/assets/chains/btc.svg'
import CkbIcon from '@/assets/chains/ckb.svg'
import { iife } from '@/lib/iife'

export interface LayerTypeProps extends BoxProps {
  type?: 'l1' | 'l2' | 'l1-l2' | 'l2-l1'
}

export function LayerType({ type, ...props }: LayerTypeProps) {
  if (!type) return null
  return (
    <HStack gap="6px" fontSize="14px" {...props}>
      {iife(() => {
        switch (type) {
          case 'l1':
            return (
              <>
                <BtcIcon w="20px" h="20px" />
                <Box>
                  <Trans>L1</Trans>
                </Box>
              </>
            )
          case 'l2':
            return (
              <>
                <CkbIcon w="20px" h="20px" />
                <Box>
                  <Trans>L2</Trans>
                </Box>
              </>
            )
          case 'l1-l2':
            return (
              <>
                <BtcIcon w="20px" h="20px" />
                <Box>
                  <Trans>L1</Trans>
                </Box>
                <ArrowIcon w="12px" />
                <CkbIcon w="20px" h="20px" />
                <Box>
                  <Trans>L2</Trans>
                </Box>
              </>
            )
          case 'l2-l1':
            return (
              <>
                <CkbIcon w="20px" h="20px" />
                <Box>
                  <Trans>L2</Trans>
                </Box>
                <ArrowIcon w="12px" />
                <BtcIcon w="20px" h="20px" />
                <Box>
                  <Trans>L1</Trans>
                </Box>
              </>
            )
          default:
            return null
        }
      })}
    </HStack>
  )
}


================================================
File: frontend/src/components/link-tabs.tsx
================================================
'use client'

import { useLingui } from '@lingui/react'
import { usePathname } from 'next/navigation'
import type { ReactNode } from 'react'
import { HStack, HstackProps } from 'styled-system/jsx'

import Link from '@/components/ui/link'

export interface LinkTabsProps extends HstackProps {
  links: Array<{
    href: string
    label: ReactNode
  }>
}

export function LinkTabs({ links, ...props }: LinkTabsProps) {
  const pathname = usePathname()
  const {
    i18n: { locale },
  } = useLingui()

  const hasActive = links.some((link) => pathname === `/${locale}${link.href}`)
  if (!hasActive) {
    return null
  }

  return (
    <HStack gap="20px" {...props}>
      {links.map((link) => {
        const isActive = pathname === `/${locale}${link.href}`
        return (
          <Link
            href={link.href}
            key={link.href}
            rounded="4px"
            py="8px"
            px="16px"
            bg={isActive ? 'brand' : 'bg.card'}
            color={isActive ? 'text.primary' : 'text.third'}
            fontWeight="semibold"
            transitionDuration="normal"
            transitionProperty="color, background, border-color"
            transitionTimingFunction="default"
            _hover={{
              color: 'text.primary',
            }}
          >
            {link.label}
          </Link>
        )
      })}
    </HStack>
  )
}


================================================
File: frontend/src/components/loading.tsx
================================================
import { Box, Center, CenterProps } from 'styled-system/jsx'

import LoadingSpritePng from '@/assets/loading-sprite.png'
import { Image } from '@/components/ui/image'

export function Loading(props: CenterProps) {
  return (
    <Center {...props}>
      <Box pos="relative" w="80px" h="80px" overflow="hidden">
        <Image
          minW="1752px"
          h="100%"
          pos="absolute"
          top="0"
          left="0"
          animation="steps-x 800ms steps(21) infinite"
          style={
            {
              '--steps-offset-x': '-1752px',
            } as any
          }
          alt="loading"
          src={LoadingSpritePng.src}
          width={LoadingSpritePng.width}
          height={LoadingSpritePng.height}
        />
      </Box>
    </Center>
  )
}


================================================
File: frontend/src/components/network-cards.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { useQuery } from '@tanstack/react-query'
import { ReactNode } from 'react'
import { Box, Grid, HStack, VStack } from 'styled-system/jsx'

import ArrowIcon from '@/assets/arrow.svg'
import BchIcon from '@/assets/chains/bch.svg'
import BsvIcon from '@/assets/chains/bsv.svg'
import BtcIcon from '@/assets/chains/btc.svg'
import CkbIcon from '@/assets/chains/ckb.svg'
import UtxoStackIcon from '@/assets/chains/utxo-stack.svg'
import Link from '@/components/ui/link'
import { Text } from '@/components/ui/primitives/text'
import { QueryKey } from '@/constants/query-key'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'
import { formatNumber } from '@/lib/string/format-number'

function FieldGroup({ fields }: { fields: Array<{ label: ReactNode; value: ReactNode }> }) {
  return (
    <VStack gap="16px" fontSize="14px" lineHeight="18px" w="100%">
      {fields.map((field, i) => (
        <HStack key={i} justify="space-between" w="100%">
          <Box color="text.third">{field.label}</Box>
          <Box>{field.value}</Box>
        </HStack>
      ))}
    </VStack>
  )
}

export function NetworkCards() {
  const { data } = useQuery({
    queryKey: [QueryKey.BlockHeightAndTxns24H],
    async queryFn() {
      return graphQLClient.request(
        graphql(`
          query CkbAndBtcChainInfo {
            ckbChainInfo {
              tipBlockNumber
              transactionsCountIn24Hours
            }
            btcChainInfo {
              tipBlockHeight
              transactionsCountIn24Hours
            }
          }
        `),
      )
    },
    refetchInterval: 10000,
  })

  return (
    <Grid w="100%" gridTemplateColumns={{ base: '100%', sm: 'repeat(2, 1fr)', lg: 'repeat(3, 1fr)' }}>
      <Link
        href="/explorer/btc"
        display="flex"
        alignItems="start"
        flexDir="column"
        justifyContent="space-between"
        gap="36px"
        bg="bg.card"
        _hover={{ bg: 'bg.card.hover' }}
        transition="200ms"
        rounded="8px"
        p={{ base: '20px', xl: '30px' }}
      >
        <HStack gap="16px" w="100%">
          <BtcIcon w="48px" />
          <Text fontSize="22px" fontWeight="bold">
            <Trans>Bitcoin</Trans>
          </Text>
          <ArrowIcon ml="auto" w="28px" />
        </HStack>
        <FieldGroup
          fields={[
            {
              label: <Trans>Block Height</Trans>,
              value: formatNumber(data?.btcChainInfo?.tipBlockHeight),
            },
            {
              label: <Trans>Txns(24H)</Trans>,
              value: formatNumber(data?.btcChainInfo?.transactionsCountIn24Hours),
            },
          ]}
        />
      </Link>
      <Link
        href="/explorer/ckb"
        display="flex"
        flexDir="column"
        justifyContent="space-between"
        alignItems="start"
        gap="36px"
        bg="bg.card"
        _hover={{ bg: 'bg.card.hover' }}
        transition="200ms"
        rounded="8px"
        p={{ base: '20px', xl: '30px' }}
      >
        <HStack gap="16px" w="100%">
          <CkbIcon w="48px" />
          <Text fontSize="22px" fontWeight="bold">
            <Trans>CKB</Trans>
          </Text>
          <ArrowIcon ml="auto" w="28px" />
        </HStack>
        <FieldGroup
          fields={[
            {
              label: <Trans>Block Height</Trans>,
              value: formatNumber(data?.ckbChainInfo?.tipBlockNumber),
            },
            {
              label: <Trans>Txns(24H)</Trans>,
              value: formatNumber(data?.ckbChainInfo?.transactionsCountIn24Hours),
            },
          ]}
        />
      </Link>
      <VStack
        gap="40px"
        bg="bg.card"
        rounded="8px"
        p="30px"
        opacity={0.5}
        fontSize="14px"
        gridColumn={{ base: 'auto', sm: '1/3', lg: 'auto' }}
      >
        <HStack gap="24px" fontWeight="semibold" w="100%" justify="center">
          <HStack>
            <BsvIcon w="32px" h="32px" />
            <Text>BSV</Text>
          </HStack>
          <HStack>
            <BchIcon w="32px" h="32px" />
            <Text>BCH</Text>
          </HStack>
          <HStack whiteSpace="nowrap">
            <UtxoStackIcon w="32px" h="32px" />
            <Text>UTXO Stack</Text>
          </HStack>
        </HStack>
        <Box fontWeight="semibold" py="10px" px="40px" rounded="100px" bg="bg.input" mx="auto">
          <Trans>Coming</Trans>
        </Box>
      </VStack>
    </Grid>
  )
}


================================================
File: frontend/src/components/network-switcher.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { memo } from 'react'
import { Box, styled, VStack } from 'styled-system/jsx'

import ArrowDownIcon from '@/assets/arrow-down.svg'
import MainnetSVG from '@/assets/mainnet.svg'
import TestnetSVG from '@/assets/testnet.svg'
import { HoverCard, Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { env } from '@/constants/env'

const TESTNET_SYMBOL = 'testnet.'

function resolveDomain(fallback: string, domain?: string, isMainnet = false) {
  if (!domain) return fallback
  if (isMainnet) {
    return domain.startsWith(TESTNET_SYMBOL)
      ? `https://${domain.substring(TESTNET_SYMBOL.length)}`
      : `https://${domain}`
  }
  return domain.startsWith(TESTNET_SYMBOL) ? `https://${domain}` : `https://${TESTNET_SYMBOL}${domain}`
}

export const NetworkSwitcher = memo(function NetworkSwitcher() {
  const domain = env.public.RGBPP_DOMAINS.split(',').find(
    (x) => x === (typeof window !== 'undefined' ? window.location : undefined)?.host,
  )

  const networks = [
    {
      icon: <MainnetSVG w="24px" h="24px" />,
      label: <Trans>Mainnet</Trans>,
      href: resolveDomain(env.public.RGBPP_EXPLORER_MAINNET_URL, domain, true),
    },
    {
      icon: <TestnetSVG w="24px" h="24px" />,
      label: <Trans>Testnet</Trans>,
      href: resolveDomain(env.public.RGBPP_EXPLORER_TESTNET_URL, domain, false),
    },
  ]

  const network = env.public.IS_MAINNET ? networks[0] : networks[1]

  return (
    <HoverCard.Root unmountOnExit openDelay={0} closeDelay={200}>
      <HoverCard.Trigger asChild>
        <styled.button display="flex" alignItems="center" color="brand" cursor="default">
          <Text as="span" mr="8px">
            {network.icon}
          </Text>
          {network.label}
          <ArrowDownIcon w="16px" h="16px" ml="12px" />
        </styled.button>
      </HoverCard.Trigger>

      <HoverCard.Positioner>
        <HoverCard.Content w="200px">
          <HoverCard.Arrow>
            <HoverCard.ArrowTip />
          </HoverCard.Arrow>
          <VStack gap="16px" w="100%">
            {networks.map((x, i) => {
              return (
                <Link
                  href={x.href}
                  p="6px"
                  key={i}
                  gap="8px"
                  display="flex"
                  alignItems="center"
                  rounded="100px"
                  w="100%"
                  border="1px solid"
                  borderColor="transparent"
                  transition="100ms"
                  _hover={{
                    bg: 'bg.input',
                    borderColor: 'border.light',
                  }}
                  css={{
                    '&:hover .arrow': {
                      opacity: 1,
                    },
                  }}
                >
                  <Text as="span" color={network === x ? 'brand' : 'text.primary'}>
                    {x.icon}
                  </Text>
                  {x.label}
                  {network === x ? (
                    <Box w="8px" h="8px" my="auto" mr="6px" ml="auto" bg="#2FE000" rounded="100%" />
                  ) : null}
                </Link>
              )
            })}
          </VStack>
        </HoverCard.Content>
      </HoverCard.Positioner>
    </HoverCard.Root>
  )
})


================================================
File: frontend/src/components/no-data.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { VStack } from 'styled-system/jsx'

import NoDataSVG from '@/assets/no-data.svg'
import { Text } from '@/components/ui'

export function NoData({ children }: { children?: React.ReactNode }) {
  return (
    <VStack gap={0} textAlign="center">
      <NoDataSVG w="200px" h="200px" />
      <Text fontSize="14px" fontWeight="semibold" color="text.third">
        {children ?? <Trans>No Data</Trans>}
      </Text>
    </VStack>
  )
}


================================================
File: frontend/src/components/overflow-amount.tsx
================================================
import { ReactNode } from 'react'

import { Text } from '@/components/ui'

export function OverflowAmount({ amount, symbol }: { amount: string; symbol: ReactNode }) {
  const [int, float] = amount.split('.')
  return (
    <>
      {int}
      <Text as="span" fontSize="14px" whiteSpace="nowrap">
        {float ? `.${float}` : null}
        <Text as="span" fontSize="14px" ml="4px">
          {symbol}
        </Text>
      </Text>
    </>
  )
}


================================================
File: frontend/src/components/overview-info.tsx
================================================
import { ReactNode } from 'react'
import { Box, BoxProps, Flex, FlexProps, Grid, GridProps, HStack, Stack, StackProps } from 'styled-system/jsx'

import { ComingSoonText } from '@/components/coming-soon-text'
import { Text } from '@/components/ui'
import { Icon } from '@/components/ui/primitives/icon'
import { formatNumber as formatNumberFn } from '@/lib/string/format-number'

export const splitLineBefore = {
  content: { base: 'none', md: '" "' },
  pos: 'absolute',
  top: '50%',
  right: '0',
  w: '1px',
  h: '40px',
  bg: 'border.primary',
  transform: 'translateY(-50%)',
}

export function OverviewInfo({ children, ...props }: FlexProps) {
  return (
    <Flex
      flexDirection={{ base: 'column', md: 'row' }}
      gap={{ base: '16px', md: 0 }}
      py={{ base: '20px', md: '25px' }}
      bg="bg.card.hover"
      rounded="8px"
      fontSize="20px"
      lineHeight="100%"
      alignItems="center"
      {...props}
    >
      {children}
    </Flex>
  )
}

export function OverviewInfoGrid({ children, ...props }: GridProps) {
  return (
    <Grid py="25px" bg="bg.card.hover" rounded="8px" fontSize="20px" lineHeight="100%" alignItems="center" {...props}>
      {children}
    </Grid>
  )
}

export function OverviewInfoItem({
  label,
  children,
  unsupported,
  formatNumber,
  unit,
  valueProps,
  ...props
}: StackProps & {
  label: ReactNode
  unsupported?: boolean
  formatNumber?: boolean
  unit?: ReactNode
  valueProps?: BoxProps
}) {
  return (
    <Stack
      px="20px"
      w="100%"
      justify="space-between"
      alignItems="center"
      direction={{ base: 'row', md: 'column' }}
      gap="15px"
      flex={1}
      textAlign="center"
      fontSize={{ base: '14px', md: '20px' }}
      pos="relative"
      _before={splitLineBefore}
      _last={{
        _before: {
          content: 'none',
        },
      }}
      {...props}
    >
      {typeof label === 'string' || typeof label === 'number' ? (
        <Text color="text.third" fontSize="14px" lineHeight="24px" whiteSpace="nowrap">
          {label}
        </Text>
      ) : (
        label
      )}
      <Box flex={1} textAlign={{ base: 'right', md: 'center' }} {...valueProps}>
        {unsupported ? (
          <Text as="span" color="text.third">
            <ComingSoonText />
          </Text>
        ) : (
          <>
            {formatNumber && (typeof children === 'number' || typeof children === 'string')
              ? formatNumberFn(children)
              : children ?? '-'}
            {unit ? (
              <Text as="span" color="text.third" fontSize="12px" ml="4px">
                {unit}
              </Text>
            ) : null}
          </>
        )}
      </Box>
    </Stack>
  )
}

export function OverviewInfoTagLabel({ icon, children, ...props }: BoxProps & { icon?: ReactNode }) {
  return (
    <HStack
      bg="black.a10"
      color="text.primary"
      px="10px"
      rounded="4px"
      gap="4px"
      lineHeight="24px"
      w="fit-content"
      {...props}
    >
      <Icon w="20px" h="20px">
        {icon}
      </Icon>
      <Text fontSize="14px" fontWeight="semibold">
        {children}
      </Text>
    </HStack>
  )
}


================================================
File: frontend/src/components/pagination-searchparams.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { redirect, usePathname, useSearchParams } from 'next/navigation'
import { useState } from 'react'

import { Button } from '@/components/ui'
import Link from '@/components/ui/link'
import { NumberInput } from '@/components/ui/number-input'

export function PaginationSearchParams(props: { count: number; pageSize: number }) {
  const { count, pageSize } = props
  const searchParams = useSearchParams()
  const initialPage = Number(searchParams.get('page') ?? '1')
  const pathname = usePathname()

  if (isNaN(initialPage)) {
    const params = new URLSearchParams(searchParams.toString())
    params.delete('page')
    redirect(`${pathname}?${params.toString()}`)
  }

  const [page, setPage] = useState(initialPage)

  return (
    <>
      <NumberInput
        value={`${page}`}
        onValueChange={(e) => setPage(e.valueAsNumber)}
        min={1}
        max={Math.ceil(count / pageSize)}
        w="150px"
      />
      <Link
        href={{
          pathname,
          query: {
            page,
          },
        }}
      >
        <Button>
          <Trans>Go</Trans>
        </Button>
      </Link>
    </>
  )
}


================================================
File: frontend/src/components/providers.tsx
================================================
import { setI18n } from '@lingui/react/server'
import { QueryClientProvider } from '@tanstack/react-query'
import type { PropsWithChildren } from 'react'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import { LinguiClientProvider } from '@/app/[lang]/LinguiClientProvider'
import { queryClient } from '@/configs/query-client'

export function Providers({ lang, children }: { lang: string } & PropsWithChildren) {
  const i18n = getI18nInstance(lang)
  setI18n(i18n)
  return (
    <LinguiClientProvider initialLocale={lang} initialMessages={i18n.messages}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </LinguiClientProvider>
  )
}


================================================
File: frontend/src/components/search-bar.tsx
================================================
'use client'

import { t, Trans } from '@lingui/macro'
import { useLingui } from '@lingui/react'
import { useMutation } from '@tanstack/react-query'
import { useRouter } from 'next/navigation'
import { ReactNode, useState } from 'react'
import { Center, Flex, type FlexProps, styled, VStack } from 'styled-system/jsx'
import { useDebounceCallback } from 'usehooks-ts'

import SearchIcon from '@/assets/search.svg'
import SearchFailedSVG from '@/assets/search-failed.svg'
import { Loading } from '@/components/loading'
import { HoverCard, Text } from '@/components/ui'
import { graphql } from '@/gql'
import { graphQLClient } from '@/lib/graphql'

import { SystemProperties } from '../../styled-system/types'

function SearchResult({
  children,
  open,
  error,
  isLoading,
  maxW = '812px',
}: {
  open: boolean
  isLoading: boolean
  error: boolean
  children: ReactNode
  maxW?: SystemProperties['maxW']
}) {
  return (
    <HoverCard.Root open={open ? error || isLoading : false} positioning={{ placement: 'bottom', sameWidth: true }}>
      <HoverCard.Trigger asChild>{children}</HoverCard.Trigger>
      <HoverCard.Positioner>
        <HoverCard.Content w="100vw" maxW={maxW} py="50px" zIndex={10}>
          <HoverCard.Arrow>
            <HoverCard.ArrowTip />
          </HoverCard.Arrow>
          {isLoading ? (
            <Center w="100%" h="220px">
              <Loading />
            </Center>
          ) : (
            <VStack>
              <SearchFailedSVG w="200px" />
              <Text fontSize="14px" h="20px" fontWeight="medium" color="text.third">
                <Trans>Oops! Your search did not match any record.</Trans>
              </Text>
            </VStack>
          )}
        </HoverCard.Content>
      </HoverCard.Positioner>
    </HoverCard.Root>
  )
}

function useSearch() {
  const router = useRouter()
  return useMutation({
    async mutationFn(keyword: string) {
      const { search } = await graphQLClient.request(
        graphql(`
          query Search($keyword: String!) {
            search(query: $keyword) {
              query
              btcBlock
              btcTransaction
              btcAddress
              ckbBlock
              ckbTransaction
              ckbAddress
              rgbppCoin
            }
          }
        `),
        {
          keyword,
        },
      )
      if (search.rgbppCoin) {
        return router.push(`/assets/coins/${search.rgbppCoin}`)
      }
      if (search.ckbTransaction) {
        return router.push(`/transaction/${search.ckbTransaction}`)
      }
      if (search.btcTransaction) {
        return router.push(`/transaction/${search.btcTransaction}`)
      }
      if (search.btcAddress) {
        return router.push(`/address/${search.btcAddress}`)
      }
      if (search.ckbAddress) {
        return router.push(`/address/${search.ckbAddress}`)
      }
      if (search.ckbBlock) {
        return router.push(`/block/ckb/${search.ckbBlock}`)
      }
      if (search.btcBlock) {
        return router.push(`/block/btc/${search.btcBlock}`)
      }
      throw new Error('Not found')
    },
  })
}

export function SearchBar(props: FlexProps) {
  const { i18n } = useLingui()
  const { mutate, isPending, error } = useSearch()
  const [value, setValue] = useState<string>('')
  const onInput = useDebounceCallback((keyword: string) => mutate(keyword), 300)
  const [isFocus, setFocus] = useState(false)

  return (
    <SearchResult isLoading={isPending} error={!!error} open={isFocus ? !!value : false}>
      <Flex
        w="100%"
        maxW={{ base: '400px', md: '600px', lg: '812px' }}
        h={{ base: '40px', md: '56px', lg: '64px' }}
        p={{ base: '4px', lg: '6px' }}
        bg="rgba(255, 255, 255, 0.9)"
        rounded="100px"
        {...props}
      >
        <styled.input
          flex={1}
          placeholder={t(i18n)`Search by Address/Tx Hash/Block Hash/AssetID`}
          pl="20px"
          color="bg.primary"
          fontWeight="medium"
          fontSize={{ base: '12px', md: '14px', lg: '16px' }}
          _placeholder={{
            color: 'text.third',
          }}
          _focus={{ boxShadow: 'none', outline: 'none' }}
          onChange={(e) => {
            onInput(e.target.value)
            setValue(e.target.value)
          }}
          onFocus={() => setFocus(true)}
          onBlur={() => setFocus(false)}
        />
        <styled.button
          bg="bg.card"
          w={{ base: '50px', md: '78px', lg: '88px' }}
          h="100%"
          rounded="full"
          cursor="pointer"
          display="flex"
          justifyContent="center"
          alignItems="center"
        >
          <SearchIcon w={{ base: '24px', md: '32px', lg: '38px' }} h={{ base: '24px', md: '32px', lg: '38px' }} />
        </styled.button>
      </Flex>
    </SearchResult>
  )
}

export function SearchBarInNav(props: FlexProps) {
  const { i18n } = useLingui()
  const { mutate, isPending, error } = useSearch()
  const [value, setValue] = useState<string>('')
  const onInput = useDebounceCallback((keyword: string) => mutate(keyword), 300)
  const [isFocus, setFocus] = useState(false)

  return (
    <SearchResult maxW="450px" isLoading={isPending} error={!!error} open={isFocus ? !!value : false}>
      <Flex bg="bg.input" h={{ base: '32px', sm: '40px', md: '40px', lg: '44px' }} rounded="100px" w="450px" {...props}>
        <styled.input
          flex={1}
          placeholder={t(i18n)`Search by Address/Tx Hash/Block Hash/AssetID`}
          fontSize={{ base: '12px', sm: '14px' }}
          pl={{ base: '16px', lg: '20px' }}
          color="text.primary"
          fontWeight="medium"
          _placeholder={{
            color: 'text.third',
          }}
          _focus={{ boxShadow: 'none', outline: 'none' }}
          onChange={(e) => {
            onInput(e.target.value)
            setValue(e.target.value)
          }}
          onFocus={() => setFocus(true)}
          onBlur={() => setFocus(false)}
        />
        <styled.button
          bg={{ base: 'transparent', sm: 'brand' }}
          color={{ base: 'brand', sm: 'text.primary' }}
          px={{ base: '8px', sm: '16px', lg: '20px' }}
          h="calc(100% - 8px)"
          rounded="full"
          cursor="pointer"
          m="4px"
        >
          <SearchIcon w="24px" h="24px" />
        </styled.button>
      </Flex>
    </SearchResult>
  )
}


================================================
File: frontend/src/components/text-overflow-tooltip.tsx
================================================
'use client'

import type { Assign, Tooltip as ArkTooltip, TooltipRootProps } from '@ark-ui/react'
import { cloneElement, ReactElement, ReactNode } from 'react'
import type { HTMLStyledProps } from 'styled-system/types'

import { Tooltip } from '@/components/ui'
import { useDetectOverflow } from '@/hooks/useDetectOverflow'

export interface TextOverflowTooltipProps extends TooltipRootProps {
  children: ReactElement
  label: ReactNode
  contentProps?: Assign<HTMLStyledProps<'div'>, ArkTooltip.ContentBaseProps>
}

export function TextOverflowTooltip({ children, label, contentProps, ...props }: TextOverflowTooltipProps) {
  const [isOverflow, ref] = useDetectOverflow()

  return (
    <Tooltip.Root openDelay={0} closeDelay={0} disabled={!isOverflow} {...props}>
      <Tooltip.Trigger asChild>{cloneElement(children, { ...children.props, ref })}</Tooltip.Trigger>
      <Tooltip.Positioner>
        <Tooltip.Arrow>
          <Tooltip.ArrowTip />
        </Tooltip.Arrow>
        <Tooltip.Content {...contentProps}>{label}</Tooltip.Content>
      </Tooltip.Positioner>
    </Tooltip.Root>
  )
}


================================================
File: frontend/src/components/time-formatter.tsx
================================================
import dayjs from 'dayjs'
import { BoxProps, HStack } from 'styled-system/jsx'

import { AgoTimeFormatter } from '@/components/ago-time-formatter'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { Text } from '@/components/ui'
import { TIME_TEMPLATE } from '@/constants'

export function TimeFormatter({
  timestamp,
  alwaysShowAgo = false,
  ...props
}: { timestamp: number; alwaysShowAgo?: boolean } & BoxProps) {
  const ago = (
    <Text color="text.third">
      (<AgoTimeFormatter time={timestamp} />)
    </Text>
  )
  return (
    <HStack fontSize="14px" fontWeight="medium" {...props}>
      {dayjs(timestamp).format(TIME_TEMPLATE)}
      {alwaysShowAgo ? ago : <IfBreakpoint breakpoint="sm">{ago}</IfBreakpoint>}
    </HStack>
  )
}


================================================
File: frontend/src/components/transaction-header-in-address.tsx
================================================
import { Flex } from 'styled-system/jsx'

import { Copier } from '@/components/copier'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { TimeFormatter } from '@/components/time-formatter'
import Link from '@/components/ui/link'
import { resolveBtcTime } from '@/lib/btc/resolve-btc-time'
import { truncateMiddle } from '@/lib/string/truncate-middle'

export function TransactionHeaderInAddress({
  txid,
  time,
  btcTime,
}: {
  txid: string
  time?: number
  btcTime?: boolean
}) {
  return (
    <Flex
      direction={{ base: 'column', sm: 'row' }}
      gap={{ base: '10px', sm: 0 }}
      w="100%"
      bg="bg.input"
      justifyContent="space-between"
      py="20px"
      px={{ base: '20px', xl: '30px' }}
      roundedTop="8px"
    >
      <Copier value={txid} onlyIcon>
        <Link color="brand" href={`/transaction/${txid}`}>
          <IfBreakpoint breakpoint="lg" fallback={truncateMiddle(txid, 10, 10)}>
            {txid}
          </IfBreakpoint>
        </Link>
      </Copier>
      {time ? <TimeFormatter alwaysShowAgo timestamp={btcTime ? resolveBtcTime(time) : time} /> : null}
    </Flex>
  )
}


================================================
File: frontend/src/components/transaction-header.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import BigNumber from 'bignumber.js'

import { Copier } from '@/components/copier'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { LayerType, LayerTypeProps } from '@/components/layer-type'
import { Heading, Text } from '@/components/ui'
import { formatNumber } from '@/lib/string/format-number'

import { Box, Grid } from '../../styled-system/jsx'

export function TransactionHeader({
  type,
  txid,
  confirmations,
  i18n,
}: {
  type: LayerTypeProps['type']
  txid: string
  confirmations?: BigNumber.Value
  i18n: I18n
}) {
  const layerType = type ? <LayerType display="inline-flex" type={type} /> : null
  return (
    <Grid
      gridTemplateColumns={{ base: 'repeat(2, 1fr)', lg: 'repeat(3, auto) 1fr' }}
      w="100%"
      gap={{ base: '16px', xl: '24px' }}
      bg="bg.card"
      rounded="8px"
      p={{ base: '20px', xl: '30px' }}
      justifyContent="start"
      alignItems="center"
    >
      <Heading
        flexDirection={{ base: 'column', sm: 'row' }}
        display="flex"
        alignItems={{ base: 'start', sm: 'center' }}
        gap={{ base: '16px', sm: '20px' }}
        fontSize="20px"
        lineHeight="24px"
        fontWeight="semibold"
      >
        {t(i18n)`Transactions`}
        <IfBreakpoint breakpoint="lg" fallback={layerType} />
      </Heading>
      <Box gridRow={{ base: '2/3', lg: 'auto' }} gridColumn={{ base: '1/3', lg: 'auto' }}>
        <Copier value={txid} textAlign="left">
          <Text wordBreak="break-all">{txid}</Text>
        </Copier>
      </Box>
      <IfBreakpoint breakpoint="lg">{layerType}</IfBreakpoint>
      {confirmations ? (
        <Box
          color="brand"
          fontWeight="semibold"
          fontSize={{ base: '16px', md: '20px' }}
          mt={{ base: 0, md: 'auto' }}
          mb={{ base: 'auto', md: 'auto' }}
          lineHeight={{ base: '22px', md: '24px' }}
          py={{ base: 0, md: '4px' }}
          px="12px"
          rounded="4px"
          bg="brand.a10"
          border="1px solid currentColor"
          w="fit-content"
          ml="auto"
        >
          {formatNumber(confirmations)}{' '}
          <Text as="span" fontSize="14px" fontWeight="medium" display={{ base: 'none', xl: 'inline' }}>
            {t(i18n)`Confirmations`}
          </Text>
        </Box>
      ) : null}
    </Grid>
  )
}


================================================
File: frontend/src/components/utxo-or-cell-footer.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { isNumber } from 'lodash-es'
import { ReactNode } from 'react'
import { Box, Flex, HStack } from 'styled-system/jsx'

import { BtcDiffTags } from '@/components/btc/btc-diff-tags'
import { CkbDiffTags } from '@/components/ckb/ckb-diff-tags'
import { Text } from '@/components/ui'
import { BitcoinInput, BitcoinOutput, CkbTransaction } from '@/gql/graphql'
import { formatNumber } from '@/lib/string/format-number'

export function UtxoOrCellFooter({
  fee,
  feeRate,
  confirmations,
  ckbCell,
  btcUtxo,
  feeUnit,
  address,
  children,
  txid,
}: {
  address?: string
  fee?: number | null
  feeRate?: number | null
  confirmations?: number
  ckbCell?: Pick<CkbTransaction, 'inputs' | 'outputs'>
  btcUtxo?: {
    vin?: BitcoinInput[]
    vout?: BitcoinOutput[]
  }
  feeUnit?: ReactNode
  children?: ReactNode
  txid?: string
}) {
  return (
    <Flex
      minH="72px"
      py="20px"
      px={{ base: '20px', xl: '30px' }}
      gap={{ base: '20px', lg: '10px' }}
      w="100%"
      flexDirection={{ base: 'column', lg: 'row' }}
      alignItems={{ base: 'start', lg: 'center' }}
      justifyContent={{ base: 'center', lg: 'space-between' }}
      borderTop="1px solid"
      borderTopColor="border.primary"
    >
      <Flex gap={{ base: '16px', lg: '32px' }} flexWrap="wrap" justify="start">
        {isNumber(fee) ? (
          <Text as="span" fontSize="14px" color="text.third">
            <Trans>
              Txn fee:
              <Text as="span" color="text.primary" fontWeight="semibold" mx="4px">
                {formatNumber(fee)}{' '}
              </Text>
              {feeUnit}
            </Trans>
          </Text>
        ) : null}
        {isNumber(feeRate) ? (
          <Text as="span" fontSize="14px" color="text.third">
            <Trans>
              Fee rate:
              <Text as="span" color="text.primary" fontWeight="semibold" mx="4px">
                {formatNumber(feeRate)}
              </Text>
              {feeUnit}/vB
            </Trans>
          </Text>
        ) : null}
      </Flex>
      {isNumber(confirmations) || btcUtxo || ckbCell || address ? (
        <HStack gap="16px" flexWrap="wrap" justify={{ base: 'start', lg: 'end' }}>
          {isNumber(confirmations) ? (
            <Box bg="brand" py="8px" fontSize="14px" lineHeight="16px" px="16px" rounded="4px">
              <Trans>{formatNumber(confirmations)} confirmed</Trans>
            </Box>
          ) : null}
          {ckbCell && address ? <CkbDiffTags {...ckbCell} address={address} /> : null}
          {btcUtxo && address ? <BtcDiffTags {...btcUtxo} txid={txid} ckbCell={ckbCell} address={address} /> : null}
        </HStack>
      ) : null}
      {children}
    </Flex>
  )
}


================================================
File: frontend/src/components/view-ckb-explorer.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'

import CkbIcon from '@/assets/chains/ckb.svg'
import { Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { resolveCkbExplorerUrl } from '@/lib/ckb/resolve-ckb-explorer-url'

export function ViewCkbExplorer({ txHash }: { txHash: string }) {
  return (
    <Link
      href={resolveCkbExplorerUrl(txHash, 'transaction')}
      target="_blank"
      display="flex"
      alignItems="center"
      justifyContent="start"
      gap="8px"
      py="8px"
      px="16px"
      rounded="4px"
      bg="bg.primary"
      w="fit-content"
    >
      <CkbIcon h="18px" w="18px" />
      <Text fontSize="14px" fontWeight="semibold">
        <Trans>View Details in CKB</Trans>
      </Text>
    </Link>
  )
}


================================================
File: frontend/src/components/view-mempool.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'

import MemPoolIcon from '@/assets/mempool.svg'
import { Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { resolveMempool } from '@/lib/btc/resolve-mempool'

export function ViewMemPool({ txid }: { txid: string }) {
  return (
    <Link
      href={resolveMempool(txid, 'tx')}
      target="_blank"
      display="flex"
      alignItems="center"
      justifyContent="start"
      gap="8px"
      py="8px"
      px="16px"
      rounded="4px"
      bg="bg.primary"
      w="fit-content"
    >
      <MemPoolIcon h="18px" w="18px" />
      <Text fontSize="14px" fontWeight="semibold">
        <Trans>View Details in Mempool</Trans>
      </Text>
    </Link>
  )
}


================================================
File: frontend/src/components/btc/btc-address-overview.tsx
================================================
import { t } from '@lingui/macro'
import { Grid, HStack, VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import OverviewSVG from '@/assets/overview.svg'
import { OverflowAmount } from '@/components/overflow-amount'
import { OverviewInfo, OverviewInfoItem } from '@/components/overview-info'
import { Heading } from '@/components/ui'
import { BtcAddressBaseQuery } from '@/gql/graphql'
import { satsToBtc } from '@/lib/btc/sats-to-btc'
import { formatNumber } from '@/lib/string/format-number'

export function BtcAddressOverview({
  btcAddress,
  lang,
}: {
  lang: string
  btcAddress: BtcAddressBaseQuery['btcAddress']
}) {
  if (!btcAddress) return null
  const i18n = getI18nInstance(lang)
  return (
    <VStack gap={0} w="100%" bg="bg.card" rounded="8px">
      <HStack w="100%" px="30px" py="16px" gap="12px" borderBottom="1px solid" borderBottomColor="border.primary">
        <OverviewSVG w="24px" />
        <Heading fontSize="16px" fontWeight="semibold">{t(i18n)`Overview`}</Heading>
      </HStack>
      <Grid
        w="100%"
        gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}
        gap={{ base: '20px', xl: '30px' }}
        pt="20px"
        pb={{ base: '20px', xl: '30px' }}
        px={{ base: '20px', xl: '30px' }}
        textAlign="center"
      >
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`BTC Balance`}>
            <OverflowAmount amount={formatNumber(satsToBtc(btcAddress.satoshi))} symbol={t(i18n)`BTC`} />
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Confirmed`}>
            <OverflowAmount
              amount={formatNumber(satsToBtc(btcAddress.satoshi).minus(btcAddress.pendingSatoshi))}
              symbol={t(i18n)`BTC`}
            />
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Unconfirmed`}>
            <OverflowAmount amount={formatNumber(satsToBtc(btcAddress.pendingSatoshi))} symbol={t(i18n)`BTC`} />
          </OverviewInfoItem>
        </OverviewInfo>
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Txns`} formatNumber>
            {btcAddress.transactionsCount}
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`L1 RGB++ Assets`} unsupported />
        </OverviewInfo>
      </Grid>
    </VStack>
  )
}


================================================
File: frontend/src/components/btc/btc-address-type.tsx
================================================
import { Box } from 'styled-system/jsx'

import { getAddressType } from '@/lib/btc/get-btc-address-type'

export function BtcAddressType({ address }: { address: string }) {
  const type = getAddressType(address)
  return type ? (
    <Box bg="bg.input" fontSize="12px" rounded="4px" py="2px" px="4px" color="text.primary">
      {type}
    </Box>
  ) : null
}


================================================
File: frontend/src/components/btc/btc-block-overview.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import BigNumber from 'bignumber.js'
import { Box, Grid, HStack, VStack } from 'styled-system/jsx'

import OverviewSVG from '@/assets/overview.svg'
import { OverflowAmount } from '@/components/overflow-amount'
import { OverviewInfo, OverviewInfoItem } from '@/components/overview-info'
import { TextOverflowTooltip } from '@/components/text-overflow-tooltip'
import { TimeFormatter } from '@/components/time-formatter'
import { Heading, Text, Tooltip } from '@/components/ui'
import Link from '@/components/ui/link'
import { BitcoinBlock } from '@/gql/graphql'
import { resolveBtcTime } from '@/lib/btc/resolve-btc-time'
import { formatNumber } from '@/lib/string/format-number'
import { truncateMiddle } from '@/lib/string/truncate-middle'

export function BtcBlockOverview({
  block,
  i18n,
}: {
  block: Pick<
    BitcoinBlock,
    'timestamp' | 'size' | 'transactionsCount' | 'feeRateRange' | 'totalFee' | 'miner' | 'height'
  >
  i18n: I18n
}) {
  if (!block) return null
  return (
    <VStack gap={0} w="100%" bg="bg.card" rounded="8px">
      <HStack
        w="100%"
        px={{ base: '20px', xl: '30px' }}
        py="16px"
        gap="12px"
        borderBottom="1px solid"
        borderBottomColor="border.primary"
      >
        <OverviewSVG w="24px" />
        <Heading fontSize="16px" fontWeight="semibold">{t(i18n)`Overview`}</Heading>
        {block.timestamp ? <TimeFormatter timestamp={resolveBtcTime(block.timestamp)} ml="auto" /> : null}
      </HStack>
      <Grid
        w="100%"
        gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}
        gap={{ base: '20px', md: '30px' }}
        pt="20px"
        pb={{ base: '20px', md: '30px' }}
        px={{ base: '20px', xl: '30px' }}
        textAlign="center"
      >
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Block size`}>
            <OverflowAmount amount={formatNumber(block.size)} symbol={t(i18n)`bytes`} />
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Transaction`} formatNumber>
            {block.transactionsCount}
          </OverviewInfoItem>
        </OverviewInfo>
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Fee rate span`}>
            <TextOverflowTooltip
              label={
                <Text whiteSpace="nowrap">
                  {t(
                    i18n,
                  )`${formatNumber(block.feeRateRange?.min ?? 0)} sats/VB ~ ${formatNumber(BigNumber(block.feeRateRange?.max ?? 0))} sats/VB`}
                </Text>
              }
              contentProps={{ maxW: 'unset' }}
              positioning={{ placement: 'top' }}
            >
              <Box
                whiteSpace="nowrap"
                minW="0"
                maxW={{ base: '130px', sm: 'unset', md: '250px' }}
                textAlign={{ base: 'right', md: 'center' }}
                truncate
                flex={1}
                ml="auto"
              >
                {formatNumber(block.feeRateRange?.min ?? 0)}
                <Text as="span" fontSize="14px" ml="4px">
                  {t(i18n)`sats/VB`}
                </Text>
                {' ~ '}
                {formatNumber(BigNumber(block.feeRateRange?.max ?? 0))}{' '}
                <Text as="span" fontSize="14px">
                  {t(i18n)`sats/VB`}
                </Text>
              </Box>
            </TextOverflowTooltip>
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Miner`} formatNumber>
            {block.miner ? (
              <Tooltip.Root openDelay={0} closeDelay={0}>
                <Tooltip.Trigger asChild>
                  <Link
                    href={`/address/${block.miner.address}`}
                    color="brand"
                    textAlign={{ base: 'right', md: 'center' }}
                    _hover={{
                      textDecoration: 'underline',
                    }}
                  >
                    {truncateMiddle(block.miner.address, 5, 5)}
                  </Link>
                </Tooltip.Trigger>
                <Tooltip.Positioner>
                  <Tooltip.Arrow>
                    <Tooltip.ArrowTip />
                  </Tooltip.Arrow>
                  <Tooltip.Content whiteSpace="nowrap" maxW="unset">
                    {block.miner.address}
                  </Tooltip.Content>
                </Tooltip.Positioner>
              </Tooltip.Root>
            ) : (
              <Text color="text.third">-</Text>
            )}
          </OverviewInfoItem>
        </OverviewInfo>
      </Grid>
    </VStack>
  )
}


================================================
File: frontend/src/components/btc/btc-diff-tags.tsx
================================================
import { Trans } from '@lingui/macro'
import BigNumber from 'bignumber.js'
import { compact, sum, uniqBy } from 'lodash-es'
import { Flex } from 'styled-system/jsx'

import MoneyIcon from '@/assets/money.svg'
import { parseRgbppLockArgs } from '@/components/ckb/parse-rgbpp-lock-args'
import { BitcoinInput, BitcoinOutput, CellType, CkbTransaction } from '@/gql/graphql'
import { satsToBtc } from '@/lib/btc/sats-to-btc'
import { isRgbppLockCell } from '@/lib/ckb/is-rgbpp-lock-cell'
import { formatNumber } from '@/lib/string/format-number'

export function BtcDiffTags({
  vin = [],
  vout = [],
  ckbCell,
  address,
  txid,
}: {
  vin?: BitcoinInput[]
  vout?: BitcoinOutput[]
  address: string
  ckbCell?: Pick<CkbTransaction, 'inputs' | 'outputs'>
  txid?: string
}) {
  const inputBalance = sum(
    compact(vin.filter((x) => address === x.prevout?.address?.address).map((x) => x.prevout?.value)),
  )
  const outputBalance = sum(compact(vout.filter((x) => address === x.address?.address).map((x) => x.value)))
  const diff = satsToBtc(BigNumber(outputBalance).minus(BigNumber(inputBalance)))

  const inputs = vin
    .map((input) => {
      const cell = ckbCell?.inputs?.find((cell) => {
        if (!isRgbppLockCell(cell)) return false
        const { btcTxid, outIndex } = parseRgbppLockArgs(cell.lock.args)
        return !(btcTxid !== input.txid || input.vout !== outIndex)
      })
      return { cell, input }
    })
    .filter((x) => x.cell)
  const outputs = vout
    .map((output, i) => {
      const cell = ckbCell?.outputs?.find((cell) => {
        if (!isRgbppLockCell(cell)) return false
        const { btcTxid, outIndex } = parseRgbppLockArgs(cell.lock.args)
        return !(outIndex !== i || !vout[outIndex]) && btcTxid === txid
      })
      return { cell, output }
    })
    .filter((x) => x.cell)

  const allXudt = uniqBy(compact(inputs.map((x) => x.cell?.xudtInfo)), (x) => x?.symbol)
  const xudtTags = allXudt.map((xudt) => {
    const balance = inputs
      .filter((x) => x.input.prevout?.address?.address === address && x.cell?.xudtInfo?.symbol === xudt?.symbol)
      .reduce((acc, x) => acc.plus(x.cell?.xudtInfo?.amount || 0), BigNumber(0))
    const xudtBalanceWithoutThisAddress = outputs
      .filter((x) => x.output?.address?.address === address && x.cell?.xudtInfo?.symbol === xudt?.symbol)
      .reduce((acc, x) => acc.plus(x.cell?.xudtInfo?.amount || 0), BigNumber(0))
    const diff = BigNumber(xudtBalanceWithoutThisAddress).minus(BigNumber(balance))
    return !diff.isZero() ? (
      <Flex
        align="center"
        py="8px"
        fontSize="14px"
        lineHeight="16px"
        px="16px"
        rounded="4px"
        bg={diff.isGreaterThan(0) ? 'success' : 'danger'}
      >
        <Trans>
          {diff.isGreaterThan(0) ? '+' : ''}
          {formatNumber(diff, xudt?.decimal)} {xudt?.symbol}
        </Trans>
        <MoneyIcon w="16px" h="16px" ml="6px" />
      </Flex>
    ) : null
  })

  // dob
  const inputDobs = inputs.filter(
    (x) =>
      (x.cell?.cellType === CellType.Dob || x.cell?.cellType === CellType.Mnft) &&
      x.input.prevout?.address?.address === address,
  )
  const outputDobs = outputs.filter(
    (x) =>
      (x.cell?.cellType === CellType.Dob || x.cell?.cellType === CellType.Mnft) &&
      x.output?.address?.address === address,
  )
  const dobDiff = BigNumber(outputDobs.length).minus(inputDobs.length)

  return (
    <>
      {!diff.isZero() ? (
        <Flex
          align="center"
          py="8px"
          fontSize="14px"
          lineHeight="16px"
          px="16px"
          rounded="4px"
          bg={diff.isGreaterThan(0) ? 'success' : 'danger'}
        >
          <Trans>{formatNumber(diff)} BTC</Trans>
          <MoneyIcon w="16px" h="16px" ml="6px" />
        </Flex>
      ) : null}
      {xudtTags}
      {!dobDiff.isZero() ? (
        <Flex
          align="center"
          py="8px"
          fontSize="14px"
          lineHeight="16px"
          px="16px"
          rounded="4px"
          bg={dobDiff.isGreaterThan(0) ? 'success' : 'danger'}
        >
          <Trans>{formatNumber(dobDiff)} DOB</Trans>
          <MoneyIcon w="16px" h="16px" ml="6px" />
        </Flex>
      ) : null}
    </>
  )
}


================================================
File: frontend/src/components/btc/btc-outputs-sum.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import BigNumber from 'bignumber.js'
import { sum } from 'lodash-es'
import { Flex } from 'styled-system/jsx'

import MoneyIcon from '@/assets/money.svg'
import { BitcoinOutput } from '@/gql/graphql'
import { satsToBtc } from '@/lib/btc/sats-to-btc'
import { formatNumber } from '@/lib/string/format-number'

export function BtcOutputsSum({ vout = [] }: { vout?: BitcoinOutput[] }) {
  const balance = sum(vout.map((x) => x.value))
  const diff = satsToBtc(BigNumber(balance))

  return !diff.isZero() ? (
    <Flex align="center" bg="brand" py="8px" fontSize="14px" lineHeight="16px" px="16px" rounded="4px">
      <Trans>{formatNumber(diff)} BTC</Trans>
      <MoneyIcon w="16px" h="16px" ml="6px" />
    </Flex>
  ) : null
}


================================================
File: frontend/src/components/btc/btc-transaction-card-in-address.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { forwardRef } from 'react'
import { VStack } from 'styled-system/jsx'

import { BtcUtxoTables } from '@/components/btc/btc-utxo-tables'
import { TransactionHeaderInAddress } from '@/components/transaction-header-in-address'
import { UtxoOrCellFooter } from '@/components/utxo-or-cell-footer'
import { BitcoinInput, BitcoinOutput, BitcoinTransaction, CkbTransaction } from '@/gql/graphql'

export const BtcTransactionCardInAddress = forwardRef<
  HTMLDivElement,
  {
    tx: Pick<BitcoinTransaction, 'transactionTime' | 'txid' | 'vin' | 'vout' | 'fee' | 'feeRate' | 'confirmations'>
    ckbCell?: Pick<CkbTransaction, 'inputs' | 'outputs'>
    address: string
  }
>(function BtcTransactionCardInAddress({ tx, address, ckbCell }, ref) {
  return (
    <VStack key={tx.txid} w="100%" gap={0} bg="bg.card" rounded="8px" ref={ref}>
      <TransactionHeaderInAddress time={tx.transactionTime} txid={tx.txid} btcTime />
      <BtcUtxoTables
        txid={tx.txid}
        vin={tx.vin as BitcoinInput[]}
        vout={tx.vout as BitcoinOutput[]}
        ckbCell={ckbCell}
        currentAddress={address}
      />
      <UtxoOrCellFooter
        txid={tx.txid}
        fee={tx.fee}
        confirmations={tx.confirmations}
        feeRate={tx.feeRate}
        feeUnit={<Trans>sats</Trans>}
        address={address}
        btcUtxo={{ vin: tx.vin as BitcoinInput[], vout: tx.vout as BitcoinOutput[] }}
        ckbCell={ckbCell}
      />
    </VStack>
  )
})


================================================
File: frontend/src/components/btc/btc-transaction-card-with-query-in-address.tsx
================================================
'use client'

import { BtcTransactionCardInAddress } from '@/components/btc/btc-transaction-card-in-address'
import { BtcTransactionInViewQuery } from '@/components/btc/btc-transaction-in-view-query'
import { BitcoinTransaction, CkbTransaction } from '@/gql/graphql'

interface Props {
  txid: string
  ckbTxHash?: string
  address: string
}

export function BtcTransactionCardWithQueryInAddress({ txid, address }: Props) {
  return (
    <BtcTransactionInViewQuery txid={txid}>
      {(data, ckbTx) => (
        <BtcTransactionCardInAddress
          tx={data as BitcoinTransaction}
          address={address}
          ckbCell={ckbTx as Pick<CkbTransaction, 'inputs' | 'outputs'>}
        />
      )}
    </BtcTransactionInViewQuery>
  )
}


================================================
File: frontend/src/components/btc/btc-transaction-card-with-query-in-block.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { HStack, VStack } from 'styled-system/jsx'

import { BtcOutputsSum } from '@/components/btc/btc-outputs-sum'
import { BtcTransactionInViewQuery } from '@/components/btc/btc-transaction-in-view-query'
import { BtcUtxoTables } from '@/components/btc/btc-utxo-tables'
import { TransactionHeaderInAddress } from '@/components/transaction-header-in-address'
import { UtxoOrCellFooter } from '@/components/utxo-or-cell-footer'
import { BitcoinInput, BitcoinOutput } from '@/gql/graphql'

export function BtcTransactionCardWithQueryInBlock({ txid }: { txid: string }) {
  return (
    <BtcTransactionInViewQuery txid={txid}>
      {(tx) => (
        <VStack w="100%" gap={0} bg="bg.card" rounded="8px" key={tx.txid}>
          <TransactionHeaderInAddress time={tx.transactionTime} txid={tx.txid} btcTime />
          <BtcUtxoTables txid={tx.txid} vin={tx.vin as BitcoinInput[]} vout={tx.vout as BitcoinOutput[]} />
          <UtxoOrCellFooter fee={tx.fee} feeRate={tx.feeRate} feeUnit={<Trans>sats</Trans>}>
            <HStack gap="16px" flexWrap="wrap" justify={{ base: 'start', lg: 'end' }}>
              <BtcOutputsSum vout={tx.vout as BitcoinOutput[]} />
            </HStack>
          </UtxoOrCellFooter>
        </VStack>
      )}
    </BtcTransactionInViewQuery>
  )
}


================================================
File: frontend/src/components/btc/btc-transaction-in-view-query.tsx
================================================
'use client'

import { useQuery } from '@tanstack/react-query'
import { ReactNode, useState } from 'react'
import { useInView } from 'react-intersection-observer'

import { Skeleton, SkeletonProps } from '@/components/ui/primitives/skeleton'
import { QueryKey } from '@/constants/query-key'
import { graphql } from '@/gql'
import { BitcoinTransaction, CkbTransaction } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'

const btcTransactionQuery = graphql(`
  query BtcTransactionByTxId($txid: String!) {
    btcTransaction(txid: $txid) {
      txid
      fee
      feeRate
      confirmations
      transactionTime
      vin {
        txid
        vout
        isCoinbase
        prevout {
          txid
          vout
          value
          address {
            address
          }
          status {
            spent
            txid
            vin
          }
        }
      }
      vout {
        txid
        vout
        value
        address {
          address
        }
        status {
          spent
          txid
          vin
        }
      }
    }
  }
`)

const btcRgbppTransactionQuery = graphql(`
  query BtcRgbppTransactionByTxId($txid: String!) {
    btcTransaction(txid: $txid) {
      rgbppTransaction {
        ckbTransaction {
          outputs {
            txHash
            index
            capacity
            cellType
            type {
              codeHash
              hashType
              args
            }
            lock {
              codeHash
              hashType
              args
            }
            status {
              consumed
              txHash
              index
            }
            xudtInfo {
              symbol
              amount
              decimal
              typeHash
            }
          }
          inputs {
            txHash
            index
            capacity
            cellType
            type {
              codeHash
              hashType
              args
            }
            lock {
              codeHash
              hashType
              args
            }
            xudtInfo {
              symbol
              amount
              decimal
              typeHash
            }
            status {
              consumed
              txHash
              index
            }
          }
        }
      }
    }
  }
`)

interface Props extends Omit<SkeletonProps, 'children'> {
  txid: string
  children: (
    btcTransaction: BitcoinTransaction,
    ckbTransaction?: Pick<CkbTransaction, 'inputs' | 'outputs'>,
  ) => ReactNode
  fallback?: ReactNode
}

export function BtcTransactionInViewQuery({ txid, children, fallback }: Props) {
  const [enabled, setEnabled] = useState(false)
  const [ref] = useInView({
    threshold: 0,
    onChange(view) {
      if (view) setEnabled(true)
    },
  })
  const { data, isLoading, error } = useQuery({
    queryKey: [QueryKey.BtcTransactionCardWithQueryInAddress, txid],
    async queryFn() {
      const { btcTransaction } = await graphQLClient.request(btcTransactionQuery, {
        txid,
      })
      return btcTransaction
    },
    enabled,
    refetchOnReconnect: false,
    refetchOnWindowFocus: false,
    retryOnMount: false,
  })

  const { data: ckbTx } = useQuery({
    queryKey: [QueryKey.BtcTransactionCardWithQueryInAddress, txid, 'rgbpp'],
    async queryFn() {
      const { btcTransaction } = await graphQLClient.request(btcRgbppTransactionQuery, {
        txid,
      })
      return btcTransaction?.rgbppTransaction?.ckbTransaction
    },
  })

  if (error) return fallback

  return (
    <Skeleton ref={ref} isLoaded={!isLoading} minH={!data ? '480px' : 'auto'} w="100%">
      {data ? children(data as BitcoinTransaction, ckbTx as Pick<CkbTransaction, 'inputs' | 'outputs'>) : null}
    </Skeleton>
  )
}


================================================
File: frontend/src/components/btc/btc-transaction-overview.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import { Grid, HStack, VStack } from 'styled-system/jsx'

import OverviewSVG from '@/assets/overview.svg'
import { OverflowAmount } from '@/components/overflow-amount'
import { OverviewInfo, OverviewInfoItem } from '@/components/overview-info'
import { TimeFormatter } from '@/components/time-formatter'
import { Heading } from '@/components/ui'
import Link from '@/components/ui/link'
import { BitcoinTransaction } from '@/gql/graphql'
import { resolveBtcTime } from '@/lib/btc/resolve-btc-time'
import { formatNumber } from '@/lib/string/format-number'

export function BtcTransactionOverview({ btcTransaction, i18n }: { btcTransaction: BitcoinTransaction; i18n: I18n }) {
  return (
    <VStack gap={0} w="100%" bg="bg.card" rounded="8px">
      <HStack
        w="100%"
        px={{ base: '20px', xl: '30px' }}
        py="16px"
        gap="12px"
        borderBottom="1px solid"
        borderBottomColor="border.primary"
      >
        <OverviewSVG w="24px" />
        <Heading fontSize="16px" fontWeight="semibold">{t(i18n)`Overview`}</Heading>
        {btcTransaction.transactionTime ? (
          <TimeFormatter timestamp={resolveBtcTime(btcTransaction.transactionTime)} />
        ) : null}
      </HStack>
      <Grid
        w="100%"
        gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}
        gap={{ base: '20px', md: '30px' }}
        pt="20px"
        pb={{ base: '20px', md: '30px' }}
        px={{ base: '20px', md: '30px' }}
        textAlign="center"
      >
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Block Height`}>
            <Link
              href={`/block/btc/${btcTransaction.blockHash}`}
              color="brand"
              _hover={{ textDecoration: 'underline' }}
            >
              {formatNumber(btcTransaction?.blockHeight)}
            </Link>
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Size`}>
            <OverflowAmount amount={formatNumber(btcTransaction.size)} symbol={t(i18n)`bytes`} />
          </OverviewInfoItem>
        </OverviewInfo>
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Fee`}>
            <OverflowAmount amount={formatNumber(btcTransaction.fee)} symbol={t(i18n)`sats`} />
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Fee rate`}>
            <OverflowAmount amount={formatNumber(btcTransaction.feeRate)} symbol={t(i18n)`sat/VB`} />
          </OverviewInfoItem>
        </OverviewInfo>
      </Grid>
    </VStack>
  )
}


================================================
File: frontend/src/components/btc/btc-utxo-tables.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { useMemo } from 'react'
import { Box, Flex, Grid, HStack, VStack } from 'styled-system/jsx'

import SubTractIcon from '@/assets/subtract.svg'
import { parseRgbppLockArgs } from '@/components/ckb/parse-rgbpp-lock-args'
import { Copier } from '@/components/copier'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { Heading, Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { BitcoinInput, BitcoinOutput, CellType, CkbCell, CkbTransaction } from '@/gql/graphql'
import { satsToBtc } from '@/lib/btc/sats-to-btc'
import { isRgbppLockCell } from '@/lib/ckb/is-rgbpp-lock-cell'
import { formatNumber } from '@/lib/string/format-number'
import { truncateMiddle } from '@/lib/string/truncate-middle'
import { ScriptpubkeyType } from '@/types/graphql'

export interface BtcUtxoTablesProps {
  vin?: BitcoinInput[]
  vout?: BitcoinOutput[]
  currentAddress?: string
  ckbCell?: Pick<CkbTransaction, 'inputs' | 'outputs'>
  txid?: string
}

export function BtcUtxoTables({ txid, vin = [], vout = [], currentAddress, ckbCell }: BtcUtxoTablesProps) {
  return (
    <Grid
      w="100%"
      gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}
      gap={{ base: '20px', lg: '38px' }}
      pt="10px"
      pb="20px"
      px={{ base: '20px', xl: '30px' }}
    >
      <VStack gap={0} w="100%">
        <Heading
          fontSize="14px"
          fontWeight="semibold"
          borderBottom="1px solid"
          borderBottomColor="border.primary"
          w="100%"
          h="60px"
          lineHeight="60px"
        >
          <Trans>Inputs ({vin.length})</Trans>
        </Heading>
        {vin.map((input, i) => {
          const bindingCkbCell = ckbCell?.inputs?.find((cell) => {
            if (!isRgbppLockCell(cell)) return false
            const { btcTxid, outIndex } = parseRgbppLockArgs(cell.lock.args)
            return !(btcTxid !== input.txid || input.vout !== outIndex)
          })
          return <UtxoInput vin={input} key={i} currentAddress={currentAddress} ckbCell={bindingCkbCell} />
        })}
      </VStack>
      <VStack gap={0}>
        <Heading
          fontSize="14px"
          fontWeight="semibold"
          borderBottom="1px solid"
          borderBottomColor="border.primary"
          w="100%"
          h="60px"
          lineHeight="60px"
        >
          <Trans>Outputs ({vout.length})</Trans>
        </Heading>
        {vout.map((output, i) => {
          const bindingCkbCell = ckbCell?.outputs?.find((cell) => {
            if (!isRgbppLockCell(cell)) return false
            const { btcTxid, outIndex } = parseRgbppLockArgs(cell.lock.args)
            return !(btcTxid !== txid || outIndex !== i || !vout[outIndex])
          })
          return (
            <UtxoOutput
              ckbCell={bindingCkbCell}
              vout={output}
              key={i}
              currentAddress={currentAddress}
              ckbOutputs={ckbCell?.outputs}
            />
          )
        })}
      </VStack>
    </Grid>
  )
}

function UtxoInput({
  vin,
  currentAddress,
  ckbCell: cell,
}: {
  vin: BitcoinInput
  currentAddress?: string
  ckbCell?: CkbCell
}) {
  const text = useMemo(() => {
    if (vin.isCoinbase)
      return (
        <Text fontSize="14px" fontWeight="semibold">
          <Trans>Coinbase</Trans>
        </Text>
      )
    if (!vin.prevout) return null
    const formattedAddress = (
      <IfBreakpoint breakpoint="sm" fallback={truncateMiddle(vin.prevout.address?.address ?? '', 6, 6)}>
        {truncateMiddle(vin.prevout.address?.address ?? '', 10, 10)}
      </IfBreakpoint>
    )
    return (
      <Copier onlyIcon value={vin.prevout.address?.address}>
        {currentAddress === vin.prevout.address?.address ? (
          <Text as="span" color="text.primary">
            {formattedAddress}
          </Text>
        ) : (
          <Link href={`/address/${vin.prevout.address?.address}`} color="brand" fontSize="14px">
            {formattedAddress}
          </Link>
        )}
      </Copier>
    )
  }, [vin, currentAddress])

  return (
    <Flex
      justifyContent="space-between"
      w="100%"
      h="60px"
      alignItems="center"
      borderBottom="1px solid"
      borderBottomColor="border.primary"
    >
      <HStack gap="8px">
        <SubTractIcon
          color={vin.isCoinbase || vin.prevout?.status?.spent ? 'text.third' : 'success.unspent'}
          w="16px"
          h="16px"
        />
        {text}
      </HStack>
      <VStack gap={0} textAlign="right" alignItems="right">
        <Box>
          {formatNumber(satsToBtc(vin.prevout?.value ?? '0'))}{' '}
          <Text as="span" fontSize="12px" color="text.third">
            <Trans>BTC</Trans>
          </Text>
        </Box>
        {cell ? (
          <>
            {cell.xudtInfo ? (
              <Box>
                {formatNumber(cell.xudtInfo.amount, cell.xudtInfo.decimal)}{' '}
                <Text as="span" fontSize="12px" color="text.third">
                  {cell.xudtInfo.symbol}
                </Text>
              </Box>
            ) : null}
            {cell.cellType === CellType.Dob || cell.cellType === CellType.Mnft ? (
              <Box>
                1
                <Text as="span" fontSize="12px" color="text.third" ml="4px">
                  <Trans>DOB</Trans>
                </Text>
              </Box>
            ) : null}
          </>
        ) : null}
      </VStack>
    </Flex>
  )
}

function UtxoOutput({
  vout,
  currentAddress,
  ckbCell: cell,
}: {
  vout: BitcoinOutput
  ckbCell?: CkbCell
  currentAddress?: string
  ckbOutputs?: CkbTransaction['outputs']
}) {
  const formattedAddress = (
    <IfBreakpoint breakpoint="sm" fallback={truncateMiddle(vout.address?.address ?? '', 6, 6)}>
      {truncateMiddle(vout.address?.address ?? '', 10, 10)}
    </IfBreakpoint>
  )
  return (
    <Flex
      justifyContent="space-between"
      w="100%"
      h="60px"
      alignItems="center"
      borderBottom="1px solid"
      borderBottomColor="border.primary"
    >
      <HStack gap="8px">
        <SubTractIcon
          color={
            vout.status?.spent || vout.scriptpubkeyType === ScriptpubkeyType.OpReturn ? 'text.third' : 'success.unspent'
          }
          w="16px"
          h="16px"
        />
        {vout.scriptpubkeyType === ScriptpubkeyType.OpReturn ? (
          <Trans>OP_RETURN</Trans>
        ) : (
          <Copier onlyIcon value={vout.address?.address}>
            {currentAddress === vout.address?.address ? (
              <Text as="span" color="text.primary">
                {formattedAddress}
              </Text>
            ) : (
              <Link href={`/address/${vout.address?.address}`} color="brand" fontSize="14px">
                {formattedAddress}
              </Link>
            )}
          </Copier>
        )}
      </HStack>
      <VStack gap={0} alignItems="right" textAlign="right">
        <Box>
          {formatNumber(satsToBtc(vout.value))}{' '}
          <Text as="span" fontSize="12px" color="text.third">
            <Trans>BTC</Trans>
          </Text>
        </Box>
        {cell ? (
          <>
            {cell.xudtInfo ? (
              <Box>
                {formatNumber(cell.xudtInfo.amount, cell.xudtInfo.decimal)}{' '}
                <Text as="span" fontSize="12px" color="text.third">
                  {cell.xudtInfo.symbol}
                </Text>
              </Box>
            ) : null}
            {cell.cellType === CellType.Dob || cell.cellType === CellType.Mnft ? (
              <Box>
                1
                <Text as="span" fontSize="12px" color="text.third" ml="4px">
                  <Trans>DOB</Trans>
                </Text>
              </Box>
            ) : null}
          </>
        ) : null}
      </VStack>
    </Flex>
  )
}


================================================
File: frontend/src/components/btc/btc-utxos.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import { Flex, HStack, VStack } from 'styled-system/jsx'

import BtcIcon from '@/assets/chains/btc.svg'
import { BtcUtxoTables } from '@/components/btc/btc-utxo-tables'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { ViewMemPool } from '@/components/view-mempool'
import { BitcoinInput, BitcoinOutput, BitcoinTransaction, CkbTransaction } from '@/gql/graphql'
import { truncateMiddle } from '@/lib/string/truncate-middle'

export interface BtcUtxosProps extends Pick<BitcoinTransaction, 'txid' | 'vin' | 'vout'> {
  isBinding?: boolean
  ckbCell?: Pick<CkbTransaction, 'inputs' | 'outputs'>
  i18n: I18n
}

export function BtcUtxos({ txid, vin, vout, isBinding, ckbCell, i18n }: BtcUtxosProps) {
  return (
    <VStack w="100%" gap={0} bg="bg.card" rounded="8px">
      <Flex
        gap="20px"
        flexDir={{ base: 'column', md: 'row' }}
        w="100%"
        bg="bg.input"
        justifyContent="space-between"
        py="20px"
        px={{ base: '20px', lg: '30px' }}
        roundedTop="8px"
      >
        <HStack gap="16px">
          <BtcIcon h="40px" w="40px" />
          {isBinding ? (
            <VStack alignItems="start" gap={0}>
              <Text fontSize="16px" fontWeight="semibold">{t(i18n)`RGB++ Binding Txn on BTC`}</Text>
              <Link
                href={`/transaction/${txid}`}
                color="brand"
                fontSize="14px"
                _hover={{
                  textDecoration: 'underline',
                }}
              >
                <IfBreakpoint breakpoint="lg" fallback={truncateMiddle(txid, 10, 10)}>
                  {txid}
                </IfBreakpoint>
              </Link>
            </VStack>
          ) : (
            <Text fontSize="16px" fontWeight="semibold">{t(i18n)`BTC Txn`}</Text>
          )}
        </HStack>
        <ViewMemPool txid={txid} />
      </Flex>
      <BtcUtxoTables txid={txid} vin={vin as BitcoinInput[]} vout={vout as BitcoinOutput[]} ckbCell={ckbCell} />
    </VStack>
  )
}


================================================
File: frontend/src/components/ckb/ckb-address-overview.tsx
================================================
import { t } from '@lingui/macro'
import { Grid, HStack, VStack } from 'styled-system/jsx'

import { getI18nInstance } from '@/app/[lang]/appRouterI18n'
import OverviewSVG from '@/assets/overview.svg'
import { OverflowAmount } from '@/components/overflow-amount'
import { OverviewInfo, OverviewInfoItem } from '@/components/overview-info'
import { Heading } from '@/components/ui'
import { CkbAddressBaseQuery } from '@/gql/graphql'
import { shannonToCKB } from '@/lib/ckb/shannon-to-ckb'
import { formatNumber } from '@/lib/string/format-number'

export function CkbAddressOverview({
  ckbAddress,
  lang,
}: {
  lang: string
  ckbAddress: CkbAddressBaseQuery['ckbAddress']
}) {
  if (!ckbAddress) return null
  const i18n = getI18nInstance(lang)
  return (
    <VStack gap={0} w="100%" bg="bg.card" rounded="8px">
      <HStack w="100%" px="30px" py="16px" gap="12px" borderBottom="1px solid" borderBottomColor="border.primary">
        <OverviewSVG w="24px" />
        <Heading fontSize="16px" fontWeight="semibold">{t(i18n)`Overview`}</Heading>
      </HStack>
      <Grid
        w="100%"
        gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}
        gap={{ base: '20px', xl: '30px' }}
        pt="20px"
        pb={{ base: '20px', xl: '30px' }}
        px={{ base: '20px', xl: '30px' }}
        textAlign="center"
      >
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`CKB Balance`}>
            <OverflowAmount amount={formatNumber(shannonToCKB(ckbAddress.balance?.total))} symbol={t(i18n)`CKB`} />
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Available`}>
            <OverflowAmount amount={formatNumber(shannonToCKB(ckbAddress.balance?.available))} symbol={t(i18n)`CKB`} />
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Occupied`}>
            <OverflowAmount amount={formatNumber(shannonToCKB(ckbAddress.balance?.occupied))} symbol={t(i18n)`CKB`} />
          </OverviewInfoItem>
        </OverviewInfo>
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Txns`} formatNumber>
            {ckbAddress.transactionsCount}
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`L2 RGB++ Assets`} unsupported />
        </OverviewInfo>
      </Grid>
    </VStack>
  )
}


================================================
File: frontend/src/components/ckb/ckb-block-overview.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import { Grid, HStack, VStack } from 'styled-system/jsx'

import OverflowSVG from '@/assets/overview.svg'
import { OverflowAmount } from '@/components/overflow-amount'
import { OverviewInfo, OverviewInfoItem } from '@/components/overview-info'
import { TimeFormatter } from '@/components/time-formatter'
import { Heading, Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { CkbBlock } from '@/gql/graphql'
import { formatCkbAddress } from '@/lib/address/format-ckb-address'
import { formatNumber } from '@/lib/string/format-number'

export function CkbBlockOverview({
  block,
  i18n,
}: {
  block: Pick<CkbBlock, 'timestamp' | 'transactionsCount' | 'miner' | 'reward' | 'size' | 'confirmations'>
  i18n: I18n
}) {
  if (!block) return null
  return (
    <VStack gap={0} w="100%" bg="bg.card" rounded="8px">
      <HStack w="100%" px="30px" py="16px" gap="12px" borderBottom="1px solid" borderBottomColor="border.primary">
        <OverflowSVG w="24px" />
        <Heading fontSize="16px" fontWeight="semibold">{t(i18n)`Overview`}</Heading>
        {block.timestamp ? <TimeFormatter timestamp={block.timestamp} /> : null}
      </HStack>
      <Grid
        w="100%"
        gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}
        gap={{ base: '20px', md: '30px' }}
        pt="20px"
        pb={{ base: '20px', md: '30px' }}
        px={{ base: '20px', xl: '30px' }}
        textAlign="center"
      >
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Block size`}>
            <OverflowAmount amount={formatNumber(block.size)} symbol={t(i18n)`bytes`} />
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Transaction`} formatNumber>
            {block.transactionsCount}
          </OverviewInfoItem>
        </OverviewInfo>
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Miner`}>
            {block.miner ? (
              <Link
                href={`/address/${block.miner.address}`}
                whiteSpace="nowrap"
                maxW="250px"
                truncate
                color="brand"
                _hover={{ textDecoration: 'underline' }}
                cursor="pointer"
              >
                {formatCkbAddress(block.miner.address)}
              </Link>
            ) : (
              <Text color="text.third">-</Text>
            )}
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Miner Reward`} formatNumber>
            <OverflowAmount amount={formatNumber(block.reward)} symbol={t(i18n)`CKB`} />
          </OverviewInfoItem>
        </OverviewInfo>
      </Grid>
    </VStack>
  )
}


================================================
File: frontend/src/components/ckb/ckb-cell-tables.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { Box, Flex, Grid, HStack, VStack } from 'styled-system/jsx'

import SubTractIcon from '@/assets/subtract.svg'
import { Copier } from '@/components/copier'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { Heading, Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { CellType, CkbCell } from '@/gql/graphql'
import { scriptToAddress } from '@/lib/ckb/script-to-address'
import { shannonToCKB } from '@/lib/ckb/shannon-to-ckb'
import { formatNumber } from '@/lib/string/format-number'
import { truncateMiddle } from '@/lib/string/truncate-middle'

export interface CellTablesProps {
  inputs?: CkbCell[] | null
  outputs?: CkbCell[] | null
  isCellbase?: boolean
  address?: string
}

export function CkbCellTables({ inputs = [], outputs = [], isCellbase, address }: CellTablesProps) {
  if (!inputs) inputs = []
  if (!outputs) outputs = []

  return (
    <Grid
      w="100%"
      gridTemplateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }}
      gap={{ base: '20px', lg: '38px' }}
      pt="10px"
      pb="20px"
      px={{ base: '20px', md: '30px' }}
    >
      <VStack gap={0} w="100%">
        <Heading
          fontSize="14px"
          fontWeight="semibold"
          borderBottom="1px solid"
          borderBottomColor="border.primary"
          w="100%"
          h="60px"
          lineHeight="60px"
        >
          <Trans>Inputs ({inputs.length})</Trans>
        </Heading>
        {isCellbase ? (
          <Flex
            align="center"
            w="100%"
            h="60px"
            alignItems="center"
            borderBottom="1px solid"
            borderBottomColor="border.primary"
          >
            <HStack gap="8px">
              <SubTractIcon w="16px" h="16px" color="text.third" />
              <Text fontSize="14px" fontWeight="semibold">
                <Trans>Coinbase</Trans>
              </Text>
            </HStack>
          </Flex>
        ) : null}
        {inputs.map((input, i) => (
          <Cell cell={input} key={i} address={address} />
        ))}
      </VStack>
      <VStack gap={0}>
        <Heading
          fontSize="14px"
          fontWeight="semibold"
          borderBottom="1px solid"
          borderBottomColor="border.primary"
          w="100%"
          h="60px"
          lineHeight="60px"
        >
          <Trans>Outputs ({outputs.length})</Trans>
        </Heading>
        {outputs.map((output, i) => (
          <Cell cell={output} key={i} address={address} />
        ))}
      </VStack>
    </Grid>
  )
}

function Cell({ cell, address: currentAddress }: { cell: CkbCell; address?: string }) {
  const address = scriptToAddress(cell.lock)
  const formattedAddress = (
    <IfBreakpoint breakpoint="sm" fallback={truncateMiddle(address, 6, 6)}>
      {truncateMiddle(address, 10, 10)}
    </IfBreakpoint>
  )
  return (
    <Flex
      justifyContent="space-between"
      w="100%"
      minH="60px"
      py="8px"
      alignItems="center"
      borderBottom="1px solid"
      borderBottomColor="border.primary"
    >
      <HStack gap="8px">
        <SubTractIcon w="16px" h="16px" color={cell.status?.consumed ? 'text.third' : 'success.unspent'} />
        <Copier onlyIcon value={address}>
          {currentAddress !== address ? (
            <Link
              href={`/address/${address}`}
              color="brand"
              fontSize="14px"
              cursor="pointer"
              _hover={{ textDecoration: 'underline' }}
            >
              {formattedAddress}
            </Link>
          ) : (
            <Text fontSize="14px" color="text.primary">
              {formattedAddress}
            </Text>
          )}
        </Copier>
      </HStack>
      <VStack gap={0} alignItems="flex-end" fontSize={{ base: '14px', md: '16px' }} textAlign="right">
        <Box>
          {formatNumber(shannonToCKB(cell.capacity))}{' '}
          <Text as="span" fontSize="12px" color="text.third">
            <Trans>CKB</Trans>
          </Text>
        </Box>
        {cell.xudtInfo ? (
          <Box>
            {formatNumber(cell.xudtInfo.amount, cell.xudtInfo.decimal)}{' '}
            <Text as="span" fontSize="12px" color="text.third">
              {cell.xudtInfo.symbol}
            </Text>
          </Box>
        ) : null}
        {cell.cellType === CellType.Dob || cell.cellType === CellType.Mnft ? (
          <Box>
            1
            <Text as="span" fontSize="12px" color="text.third" ml="4px">
              <Trans>DOB</Trans>
            </Text>
          </Box>
        ) : null}
      </VStack>
    </Flex>
  )
}


================================================
File: frontend/src/components/ckb/ckb-cells.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import { Flex, HStack, VStack } from 'styled-system/jsx'

import CkbIcon from '@/assets/chains/ckb.svg'
import { CkbCellTables } from '@/components/ckb/ckb-cell-tables'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { Text } from '@/components/ui'
import Link from '@/components/ui/link'
import { ViewCkbExplorer } from '@/components/view-ckb-explorer'
import { CkbTransaction } from '@/gql/graphql'
import { truncateMiddle } from '@/lib/string/truncate-middle'

export function CkbCells({
  ckbTransaction,
  isBinding,
  i18n,
}: {
  ckbTransaction: Pick<CkbTransaction, 'hash' | 'outputs' | 'inputs'>
  isBinding?: boolean
  i18n: I18n
}) {
  return (
    <VStack w="100%" gap={0} bg="bg.card" rounded="8px">
      <Flex
        gap="20px"
        flexDir={{ base: 'column', md: 'row' }}
        w="100%"
        bg="bg.input"
        justifyContent="space-between"
        py="20px"
        px={{ base: '20px', lg: '30px' }}
        roundedTop="8px"
      >
        <HStack gap="16px">
          <CkbIcon h="40px" w="40px" />
          {isBinding ? (
            <VStack alignItems="start" gap={0}>
              <Text fontSize="16px" fontWeight="semibold">{t(i18n)`RGB++ Binding Txn on CKB`}</Text>
              <Link
                href={`/transaction/${ckbTransaction.hash}`}
                color="brand"
                fontSize="14px"
                wordBreak="break-all"
                _hover={{
                  textDecoration: 'underline',
                }}
              >
                <IfBreakpoint breakpoint="lg" fallback={truncateMiddle(ckbTransaction.hash, 10, 10)}>
                  {ckbTransaction.hash}
                </IfBreakpoint>
              </Link>
            </VStack>
          ) : (
            <Text fontSize="16px" fontWeight="semibold">{t(i18n)`CKB Txn`}</Text>
          )}
        </HStack>
        <ViewCkbExplorer txHash={ckbTransaction.hash} />
      </Flex>
      <CkbCellTables outputs={ckbTransaction.outputs} inputs={ckbTransaction.inputs} />
    </VStack>
  )
}


================================================
File: frontend/src/components/ckb/ckb-diff-tags.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import BigNumber from 'bignumber.js'
import { compact, sum, uniqBy } from 'lodash-es'
import { Fragment, memo } from 'react'
import { Flex } from 'styled-system/jsx'

import MoneyIcon from '@/assets/money.svg'
import { CellType, CkbCell } from '@/gql/graphql'
import { scriptToAddress } from '@/lib/ckb/script-to-address'
import { shannonToCKB } from '@/lib/ckb/shannon-to-ckb'
import { formatNumber } from '@/lib/string/format-number'

export const CkbDiffTags = memo(function CkbDiffTags({
  inputs = [],
  outputs = [],
  address,
}: {
  inputs?: CkbCell[] | null
  outputs?: CkbCell[] | null
  address: string
}) {
  if (!inputs) inputs = []
  if (!outputs) outputs = []

  // ckb
  const inputBalance = sum(inputs.filter((x) => scriptToAddress(x.lock) === address).map((x) => x.capacity))
  const outputBalanceWithoutThisAddress = sum(
    outputs.filter((x) => scriptToAddress(x.lock) === address).map((x) => x.capacity),
  )
  const ckbDiff = shannonToCKB(BigNumber(outputBalanceWithoutThisAddress).minus(BigNumber(inputBalance)))

  // xudt
  const allXudt = uniqBy(compact(inputs.map((x) => x.xudtInfo)), (x) => x?.symbol)
  const xudtTags = allXudt.map((xudt, i) => {
    const balance = inputs
      .filter((x) => scriptToAddress(x.lock) === address && x.xudtInfo?.symbol === xudt?.symbol)
      .reduce((acc, x) => acc.plus(x.xudtInfo?.amount || 0), BigNumber(0))
    const xudtBalanceWithoutThisAddress = outputs
      .filter((x) => scriptToAddress(x.lock) === address && x.xudtInfo?.symbol === xudt?.symbol)
      .reduce((acc, x) => acc.plus(x.xudtInfo?.amount || 0), BigNumber(0))
    const diff = BigNumber(xudtBalanceWithoutThisAddress).minus(BigNumber(balance))
    return (
      <Fragment key={i}>
        {!diff.isZero() ? (
          <Flex
            align="center"
            py="8px"
            fontSize="14px"
            lineHeight="16px"
            px="16px"
            rounded="4px"
            bg={diff.isGreaterThan(0) ? 'success' : 'danger'}
            key={i}
          >
            <Trans>
              {diff.isGreaterThan(0) ? '+' : ''}
              {formatNumber(diff, xudt?.decimal)} {xudt?.symbol}
            </Trans>
            <MoneyIcon w="16px" h="16px" ml="6px" />
          </Flex>
        ) : null}
      </Fragment>
    )
  })

  // dob
  const inputDobs = inputs.filter(
    (x) => (x.cellType === CellType.Dob || x.cellType === CellType.Mnft) && scriptToAddress(x.lock) === address,
  )
  const outputDobs = outputs.filter(
    (x) => (x.cellType === CellType.Dob || x.cellType === CellType.Mnft) && scriptToAddress(x.lock) === address,
  )
  const dobDiff = BigNumber(outputDobs.length).minus(inputDobs.length)

  return (
    <>
      {!ckbDiff.isZero() ? (
        <Flex
          align="center"
          py="8px"
          fontSize="14px"
          lineHeight="16px"
          px="16px"
          rounded="4px"
          bg={ckbDiff.isGreaterThan(0) ? 'success' : 'danger'}
        >
          <Trans>
            {ckbDiff.isGreaterThan(0) ? '+' : ''}
            {formatNumber(ckbDiff)} CKB
          </Trans>
          <MoneyIcon w="16px" h="16px" ml="6px" />
        </Flex>
      ) : null}
      {xudtTags}
      {!dobDiff.isZero() ? (
        <Flex
          align="center"
          bg={dobDiff.isGreaterThan(0) ? 'success' : 'danger'}
          py="8px"
          fontSize="14px"
          lineHeight="16px"
          px="16px"
          rounded="4px"
        >
          <Trans>{formatNumber(dobDiff)} DOB</Trans>
          <MoneyIcon w="16px" h="16px" ml="6px" />
        </Flex>
      ) : null}
    </>
  )
})


================================================
File: frontend/src/components/ckb/ckb-outputs-sum.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import BigNumber from 'bignumber.js'
import { compact, sum, uniqBy } from 'lodash-es'
import { memo } from 'react'
import { Flex } from 'styled-system/jsx'

import MoneyIcon from '@/assets/money.svg'
import { CellType, CkbCell } from '@/gql/graphql'
import { shannonToCKB } from '@/lib/ckb/shannon-to-ckb'
import { formatNumber } from '@/lib/string/format-number'

export const CkbOutputsSum = memo(function CkbDiffTags({ outputs = [] }: { outputs?: CkbCell[] }) {
  const outputBalanceWithoutThisAddress = sum(outputs.map((x) => x.capacity))
  const ckbDiff = shannonToCKB(BigNumber(outputBalanceWithoutThisAddress))

  // xudt
  const allXudt = uniqBy(compact(outputs.map((x) => x.xudtInfo)), (x) => x?.symbol)
  const xudtTags = allXudt.map((xudt) => {
    const balance = outputs
      .filter((x) => x.xudtInfo?.symbol === xudt?.symbol)
      .reduce((acc, x) => acc.plus(x.xudtInfo?.amount || 0), BigNumber(0))

    return !balance.isZero() ? (
      <Flex align="center" py="8px" fontSize="14px" lineHeight="16px" px="16px" rounded="4px" bg="brand">
        <Trans>
          {formatNumber(balance, xudt?.decimal)} {xudt?.symbol}
        </Trans>
        <MoneyIcon w="16px" h="16px" ml="6px" />
      </Flex>
    ) : null
  })

  // dob
  const outputDobs = outputs.filter((x) => x.cellType === CellType.Dob || x.cellType === CellType.Mnft)
  const dobDiff = BigNumber(outputDobs.length)

  return (
    <>
      {!ckbDiff.isZero() ? (
        <Flex align="center" py="8px" fontSize="14px" lineHeight="16px" px="16px" rounded="4px" bg="brand">
          <Trans>{formatNumber(ckbDiff)} CKB</Trans>
          <MoneyIcon w="16px" h="16px" ml="6px" />
        </Flex>
      ) : null}
      {xudtTags}
      {!dobDiff.isZero() ? (
        <Flex align="center" py="8px" fontSize="14px" lineHeight="16px" px="16px" rounded="4px" bg="brand">
          <Trans>{formatNumber(dobDiff)} DOB</Trans>
          <MoneyIcon w="16px" h="16px" ml="6px" />
        </Flex>
      ) : null}
    </>
  )
})


================================================
File: frontend/src/components/ckb/ckb-transaction-card-with-query-in-address.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { VStack } from 'styled-system/jsx'

import { CkbCellTables } from '@/components/ckb/ckb-cell-tables'
import { CkbTransactionInViewQuery } from '@/components/ckb/ckb-transaction-in-view-query'
import { TransactionHeaderInAddress } from '@/components/transaction-header-in-address'
import { UtxoOrCellFooter } from '@/components/utxo-or-cell-footer'

export function CkbTransactionCardWithQueryInAddress({ hash, address }: { address: string; hash: string }) {
  return (
    <CkbTransactionInViewQuery hash={hash}>
      {(data) => {
        return (
          <VStack w="100%" gap={0} bg="bg.card" rounded="8px">
            <TransactionHeaderInAddress time={data.block?.timestamp} txid={data.hash} />
            <CkbCellTables inputs={data.inputs} outputs={data.outputs} isCellbase={data.isCellbase} address={address} />
            <UtxoOrCellFooter
              fee={data.fee}
              confirmations={data.confirmations}
              feeRate={data.feeRate}
              ckbCell={data}
              feeUnit={<Trans>shannons</Trans>}
              address={address}
            />
          </VStack>
        )
      }}
    </CkbTransactionInViewQuery>
  )
}


================================================
File: frontend/src/components/ckb/ckb-transaction-card-with-query-in-block.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { HStack, VStack } from 'styled-system/jsx'

import { CkbCellTables } from '@/components/ckb/ckb-cell-tables'
import { CkbOutputsSum } from '@/components/ckb/ckb-outputs-sum'
import { CkbTransactionInViewQuery } from '@/components/ckb/ckb-transaction-in-view-query'
import { TransactionHeaderInAddress } from '@/components/transaction-header-in-address'
import { UtxoOrCellFooter } from '@/components/utxo-or-cell-footer'

export function CkbTransactionCardWithQueryInBlock({ hash, timestamp }: { hash: string; timestamp: number }) {
  return (
    <CkbTransactionInViewQuery hash={hash}>
      {(tx) => {
        return (
          <VStack w="100%" gap={0} bg="bg.card" rounded="8px" key={tx.hash}>
            <TransactionHeaderInAddress time={timestamp} txid={tx.hash} />
            <CkbCellTables inputs={tx.inputs} outputs={tx.outputs} isCellbase={tx.isCellbase} />
            <UtxoOrCellFooter fee={tx.fee} feeRate={tx.feeRate} feeUnit={<Trans>sats</Trans>}>
              <HStack gap="16px" flexWrap="wrap" justify={{ base: 'start', lg: 'end' }}>
                <CkbOutputsSum outputs={tx.outputs} />
              </HStack>
            </UtxoOrCellFooter>
          </VStack>
        )
      }}
    </CkbTransactionInViewQuery>
  )
}


================================================
File: frontend/src/components/ckb/ckb-transaction-in-view-query.tsx
================================================
'use client'

import { useQuery } from '@tanstack/react-query'
import { ReactNode, useState } from 'react'
import { useInView } from 'react-intersection-observer'

import { Skeleton, SkeletonProps } from '@/components/ui/primitives/skeleton'
import { QueryKey } from '@/constants/query-key'
import { graphql } from '@/gql'
import { CkbTransaction } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'

const query = graphql(`
  query CkbTransactionByHash($hash: String!) {
    ckbTransaction(txHash: $hash) {
      hash
      isCellbase
      blockNumber
      fee
      size
      feeRate
      confirmations
      inputs {
        cellType
        status {
          consumed
          txHash
          index
        }
        txHash
        index
        capacity
        type {
          codeHash
          hashType
          args
        }
        lock {
          codeHash
          hashType
          args
        }
        xudtInfo {
          symbol
          amount
          decimal
          typeHash
        }
      }
      outputs {
        txHash
        cellType
        index
        capacity
        type {
          codeHash
          hashType
          args
        }
        lock {
          codeHash
          hashType
          args
        }
        xudtInfo {
          symbol
          amount
          decimal
          typeHash
        }
        status {
          consumed
          txHash
          index
        }
      }
      block {
        timestamp
      }
    }
  }
`)

export function CkbTransactionInViewQuery({
  children,
  hash,
  fallback,
  ...props
}: Omit<SkeletonProps, 'children'> & {
  children: (ckbTransaction: CkbTransaction) => ReactNode
  hash: string
  fallback?: ReactNode
}) {
  const [enabled, setEnabled] = useState(false)
  const [ref] = useInView({
    threshold: 0,
    onChange(view) {
      if (view) setEnabled(true)
    },
  })
  const { data, isLoading, error } = useQuery({
    queryKey: [QueryKey.CkbTransactionCardInAddressList, hash],
    async queryFn() {
      const { ckbTransaction } = await graphQLClient.request(query, {
        hash,
      })
      return ckbTransaction
    },
    enabled,
    refetchOnReconnect: false,
    refetchOnWindowFocus: false,
    retryOnMount: false,
  })

  if (error) return fallback

  return (
    <Skeleton ref={ref} isLoaded={!isLoading} minH={!data ? '480px' : 'auto'} w="100%" {...props}>
      {data ? children(data as CkbTransaction) : null}
    </Skeleton>
  )
}


================================================
File: frontend/src/components/ckb/ckb-transaction-overview.tsx
================================================
import type { I18n } from '@lingui/core'
import { t } from '@lingui/macro'
import { Grid, HStack, VStack } from 'styled-system/jsx'

import OverflowSVG from '@/assets/overview.svg'
import { OverflowAmount } from '@/components/overflow-amount'
import { OverviewInfo, OverviewInfoItem } from '@/components/overview-info'
import { TimeFormatter } from '@/components/time-formatter'
import { Heading } from '@/components/ui'
import Link from '@/components/ui/link'
import { CkbTransaction } from '@/gql/graphql'
import { shannonToCKB } from '@/lib/ckb/shannon-to-ckb'
import { formatNumber } from '@/lib/string/format-number'

export function CkbTransactionOverview({ ckbTransaction, i18n }: { i18n: I18n; ckbTransaction: CkbTransaction }) {
  return (
    <VStack gap={0} w="100%" bg="bg.card" rounded="8px">
      <HStack
        w="100%"
        px={{ base: '20px', xl: '30px' }}
        py="16px"
        gap="12px"
        borderBottom="1px solid"
        borderBottomColor="border.primary"
      >
        <OverflowSVG w="24px" />
        <Heading fontSize="16px" fontWeight="semibold">{t(i18n)`Overview`}</Heading>
        {ckbTransaction.block?.timestamp ? <TimeFormatter timestamp={ckbTransaction.block.timestamp} /> : null}
      </HStack>
      <Grid
        w="100%"
        gridTemplateColumns={{ base: '1fr', md: 'repeat(2, 1fr)' }}
        gap={{ base: '20px', md: '30px' }}
        pt="20px"
        pb={{ base: '20px', md: '30px' }}
        px={{ base: '20px', md: '30px' }}
        textAlign="center"
      >
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Block Height`}>
            <Link
              href={`/block/ckb/${ckbTransaction.block?.hash || ckbTransaction.blockNumber}`}
              color="brand"
              _hover={{ textDecoration: 'underline' }}
            >
              {formatNumber(ckbTransaction.blockNumber)}
            </Link>
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Size`} formatNumber unit={t(i18n)`bytes`}>
            {ckbTransaction.size}
          </OverviewInfoItem>
        </OverviewInfo>
        <OverviewInfo>
          <OverviewInfoItem label={t(i18n)`Fee`}>
            <OverflowAmount amount={formatNumber(shannonToCKB(ckbTransaction.fee))} symbol={t(i18n)`CKB`} />
          </OverviewInfoItem>
          <OverviewInfoItem label={t(i18n)`Size`}>
            <OverflowAmount amount={formatNumber(ckbTransaction.feeRate)} symbol={t(i18n)`shannons/kB`} />
          </OverviewInfoItem>
        </OverviewInfo>
      </Grid>
    </VStack>
  )
}


================================================
File: frontend/src/components/ckb/parse-rgbpp-lock-args.ts
================================================
import { bytes } from '@ckb-lumos/lumos/codec'
import { remove0x, RGBPPLock } from '@rgbpp-sdk/ckb'

export function parseRgbppLockArgs(args: string): { outIndex: number; btcTxid: string } {
  const unpack = RGBPPLock.unpack(args)
  const btcTxid = bytes.hexify(bytes.bytify(unpack.btcTxid).reverse())
  return {
    outIndex: unpack.outIndex,
    btcTxid: remove0x(btcTxid),
  }
}


================================================
File: frontend/src/components/explorer-tx-list/index.tsx
================================================
import { ExplorerTxListUI } from '@/components/explorer-tx-list/ui'
import { RgbppTransaction } from '@/gql/graphql'

export function ExplorerTxList<
  T extends Pick<RgbppTransaction, 'ckbTransaction' | 'timestamp' | 'btcTransaction' | 'leapDirection'>,
>({ txs, txid }: { txs: T[]; txid: (tx: T) => string }) {
  return <ExplorerTxListUI txs={txs.map((tx) => ({ ...tx, txid: txid(tx) ?? '' }))} />
}


================================================
File: frontend/src/components/explorer-tx-list/ui.tsx
================================================
'use client'

import { Box, Flex, VStack } from 'styled-system/jsx'

import { AgoTimeFormatter } from '@/components/ago-time-formatter'
import { Amount } from '@/components/latest-tx-list/amount'
import { LayerType } from '@/components/layer-type'
import { TextOverflowTooltip } from '@/components/text-overflow-tooltip'
import { Table } from '@/components/ui'
import Link from '@/components/ui/link'
import { CkbTransaction, RgbppTransaction } from '@/gql/graphql'
import { useBreakpoints } from '@/hooks/useBreakpoints'
import { resolveLayerTypeFromRGBppTransaction } from '@/lib/resolve-layer-type-from-rgbpp-transaction'
import { truncateMiddle } from '@/lib/string/truncate-middle'

export function ExplorerTxListUI<
  T extends Pick<RgbppTransaction, 'ckbTransaction' | 'timestamp' | 'btcTransaction' | 'leapDirection'> & {
    txid: string
  },
>({ txs }: { txs: T[] }) {
  const isMd = useBreakpoints('md')

  if (!isMd) {
    return txs.map(({ txid, ...tx }) => {
      const amount = <Amount ckbTransaction={tx.ckbTransaction as CkbTransaction} />
      return (
        <Link
          href={`/transaction/${txid}`}
          display="grid"
          gridTemplateColumns="repeat(2, calc(50% - 4px))"
          gap="8px"
          key={txid}
          w="100%"
          justifyContent="space-between"
          py="16px"
          px="20px"
          borderBottom="1px solid"
          borderBottomColor="border.primary"
          transition="100ms"
          _hover={{
            bg: 'bg.card.hover',
          }}
        >
          <VStack fontSize="14px" alignItems="start" gap="4px">
            <Box color="text.link">{truncateMiddle(txid ?? '', 6, 6)}</Box>
            <Box fontWeight="medium" color="text.secondary">
              <AgoTimeFormatter time={tx.timestamp} tooltip />
            </Box>
          </VStack>
          <Flex flexDir="column" alignItems="end" justifyContent="center">
            <TextOverflowTooltip label={amount}>
              <Box truncate w="100%" textAlign="right">
                {amount}
              </Box>
            </TextOverflowTooltip>
          </Flex>
        </Link>
      )
    })
  }

  return (
    <Table.Root tableLayout="fixed">
      <Table.Body>
        {txs.map(({ txid, ...tx }) => {
          return (
            <Table.Row key={txid} lineHeight="36px">
              <Table.Cell w="235px">
                <Link href={`/transaction/${txid}`} display="flex" alignItems="center" gap={3} color="text.link">
                  {truncateMiddle(txid ?? '', 10, 8)}
                </Link>
              </Table.Cell>
              <Table.Cell w="140px" display={{ base: 'none', lg: 'table-cell' }}>
                <LayerType type={resolveLayerTypeFromRGBppTransaction(tx)} />
              </Table.Cell>
              <Table.Cell w="140px">
                <AgoTimeFormatter time={tx.timestamp} tooltip />
              </Table.Cell>
              <Table.Cell textAlign="right" w="160px">
                <Amount ckbTransaction={tx.ckbTransaction as CkbTransaction} />
              </Table.Cell>
            </Table.Row>
          )
        })}
      </Table.Body>
    </Table.Root>
  )
}


================================================
File: frontend/src/components/latest-tx-list/amount.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'

import { Text } from '@/components/ui'
import { CellType, CkbTransaction } from '@/gql/graphql'
import { formatNumber } from '@/lib/string/format-number'

export function Amount({ ckbTransaction }: { ckbTransaction?: Pick<CkbTransaction, 'outputs'> | null }) {
  if (!ckbTransaction) return <Trans>-</Trans>

  const dobOutputCount = ckbTransaction?.outputs.filter(
    (output) => output.cellType === CellType.Dob || output.cellType === CellType.Mnft,
  )
  if (dobOutputCount?.length) {
    return (
      <Trans>
        <b>{dobOutputCount.length}</b>
        <Text as="span" color="text.third" fontSize="14px" fontWeight="medium" ml="4px">
          DOB
        </Text>
      </Trans>
    )
  }

  const cellDiff = ckbTransaction.outputs.find((x) => x.xudtInfo)

  if (!cellDiff) {
    return <Trans>-</Trans>
  }

  return (
    <>
      <b>{formatNumber(cellDiff.xudtInfo?.amount, cellDiff.xudtInfo?.decimal)}</b>
      <Text as="span" color="text.third" fontSize="14px" fontWeight="medium" ml="4px">
        {cellDiff.xudtInfo?.symbol}
      </Text>
    </>
  )
}


================================================
File: frontend/src/components/latest-tx-list/index.tsx
================================================
'use client'

import { useQuery } from '@tanstack/react-query'
import { Center } from 'styled-system/jsx'

import { FailedFallback } from '@/components/failed-fallback'
import { LatestTxnListUI } from '@/components/latest-tx-list/ui'
import { Loading } from '@/components/loading'
import { QueryKey } from '@/constants/query-key'
import { graphql } from '@/gql'
import { RgbppTransaction } from '@/gql/graphql'
import { graphQLClient } from '@/lib/graphql'

const query = graphql(`
  query RgbppLatestTransactions($limit: Int!) {
    rgbppLatestTransactions(limit: $limit) {
      txs {
        ckbTxHash
        btcTxid
        leapDirection
        blockNumber
        timestamp
        ckbTransaction {
          outputs {
            txHash
            index
            capacity
            cellType
            lock {
              codeHash
              hashType
              args
            }
            xudtInfo {
              symbol
              amount
              decimal
            }
            status {
              consumed
              txHash
              index
            }
          }
        }
      }
      total
      pageSize
    }
  }
`)

export function LastRgbppTxnsTable() {
  const { isLoading, data, error } = useQuery({
    queryKey: [QueryKey.LastRgbppTxns],
    async queryFn() {
      return graphQLClient.request(query, {
        limit: 10,
      })
    },
    refetchInterval: 10000,
  })

  if (isLoading) {
    return (
      <Center h="823px">
        <Loading />
      </Center>
    )
  }

  if (error || !data) {
    return (
      <Center h="823px">
        <FailedFallback />
      </Center>
    )
  }

  return <LatestTxnListUI txs={data.rgbppLatestTransactions.txs as RgbppTransaction[]} />
}


================================================
File: frontend/src/components/latest-tx-list/ui.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'

import LinkOutlineIcon from '@/assets/link-outline.svg'
import { AgoTimeFormatter } from '@/components/ago-time-formatter'
import { IfBreakpoint } from '@/components/if-breakpoint'
import { Amount } from '@/components/latest-tx-list/amount'
import { LayerType } from '@/components/layer-type'
import { Table } from '@/components/ui'
import Link from '@/components/ui/link'
import type { CkbTransaction, RgbppTransaction } from '@/gql/graphql'
import { useBreakpoints } from '@/hooks/useBreakpoints'
import { resolveLayerTypeFromRGBppTransaction } from '@/lib/resolve-layer-type-from-rgbpp-transaction'
import { resolveRGBppTxHash } from '@/lib/resolve-rgbpp-tx-hash'
import { truncateMiddle } from '@/lib/string/truncate-middle'

import { Box, HStack, VStack } from '../../../styled-system/jsx'

export function LatestTxnListUI<
  T extends Pick<RgbppTransaction, 'ckbTransaction' | 'timestamp' | 'leapDirection' | 'btcTxid' | 'ckbTxHash'>,
>({ txs }: { txs: T[] }) {
  const isMd = useBreakpoints('md')

  if (!isMd) {
    return txs.map((tx) => {
      const txHash = resolveRGBppTxHash(tx)
      return (
        <Link
          href={`/transaction/${txHash}`}
          display="flex"
          alignItems="center"
          gap={5}
          fontSize="14px"
          fontWeight="semibold"
          p="20px"
          key={tx.ckbTxHash}
          w="100%"
          flexDirection="column"
          borderBottom="1px solid"
          borderBottomColor="border.primary"
          transition="100ms"
          _hover={{
            bg: 'bg.card.hover',
          }}
          _last={{
            borderBottom: 'none',
          }}
        >
          <HStack gap={3} alignItems="center" w="100%" color="text.link">
            <LinkOutlineIcon w="36px" h="36px" color="text.third" />
            <VStack gap={0} alignItems="start">
              <Box lineHeight="20px">{truncateMiddle(txHash, 10, 8)}</Box>
              <Box color="text.third" fontSize="14px" fontWeight="medium" lineHeight="16px">
                <AgoTimeFormatter time={tx.timestamp} tooltip />
              </Box>
            </VStack>
          </HStack>
          <HStack justifyContent="space-between" w="100%">
            <LayerType type={resolveLayerTypeFromRGBppTransaction(tx)} />
            <Box>
              <Amount ckbTransaction={tx.ckbTransaction as CkbTransaction} />
            </Box>
          </HStack>
        </Link>
      )
    })
  }

  return (
    <Table.Root tableLayout="fixed">
      <Table.Head>
        <Table.Row>
          <Table.Header w={{ base: '200px', lg: '254px' }}>
            <Trans>Tx hash</Trans>
          </Table.Header>
          <Table.Header w="160px">
            <Trans>Type</Trans>
          </Table.Header>
          <Table.Header w="200px">
            <Trans>Amount</Trans>
          </Table.Header>
          <Table.Header w="140px">
            <Trans>Time</Trans>
          </Table.Header>
        </Table.Row>
      </Table.Head>
      <Table.Body>
        {txs.map((tx) => {
          const txHash = resolveRGBppTxHash(tx)
          return (
            <Table.Row key={txHash}>
              <Table.Cell>
                <Link href={`/transaction/${txHash}`} display="flex" alignItems="center" gap={3} color="text.link">
                  <LinkOutlineIcon w="36px" h="36px" />
                  <IfBreakpoint breakpoint="lg" fallback={truncateMiddle(txHash, 6, 4)}>
                    {truncateMiddle(txHash, 10, 10)}
                  </IfBreakpoint>
                </Link>
              </Table.Cell>
              <Table.Cell>
                <LayerType type={resolveLayerTypeFromRGBppTransaction(tx)} />
              </Table.Cell>
              <Table.Cell>
                <Amount ckbTransaction={tx.ckbTransaction as CkbTransaction} />
              </Table.Cell>
              <Table.Cell w="165px">
                <AgoTimeFormatter time={tx.timestamp} tooltip />
              </Table.Cell>
            </Table.Row>
          )
        })}
      </Table.Body>
    </Table.Root>
  )
}


================================================
File: frontend/src/components/navbar/index.tsx
================================================
'use client'

import { Trans } from '@lingui/macro'
import { useLingui } from '@lingui/react'
import { usePathname } from 'next/navigation'
import { AppProgressBar as ProgressBar } from 'next-nprogress-bar'
import { useState } from 'react'
import { Box, Center, Flex, HStack, styled, VStack } from 'styled-system/jsx'

import ArrowIcon from '@/assets/arrow.svg'
import ArrowDownIcon from '@/assets/arrow-down.svg'
import BtcIcon from '@/assets/chains/btc.svg'
import CkbIcon from '@/assets/chains/ckb.svg'
import LogoSVG from '@/assets/logo.svg'
import MenuIcon from '@/assets/menu.svg'
import ClientOnly from '@/components/client-only'
import { IfPathname } from '@/components/if-pathname'
import { NetworkSwitcher } from '@/components/network-switcher'
import { SearchBarInNav } from '@/components/search-bar'
import { Heading, HoverCard, Popover, Text } from '@/components/ui'
import { Link } from '@/components/ui/link'
import { useBreakpoints } from '@/hooks/useBreakpoints'

export function Navbar() {
  const pathname = usePathname()
  const {
    i18n: { locale },
  } = useLingui()
  const isMd = useBreakpoints('md')
  const isLg = useBreakpoints('lg')
  const [isOpen, setIsOpen] = useState(false)
  const explorers = [
    {
      label: <Trans>Bitcoin</Trans>,
      icon: <BtcIcon minW="24px" w="24px" h="24px" />,
      href: '/explorer/btc',
    },
    {
      label: <Trans>CKB</Trans>,
      icon: <CkbIcon minW="24px" w="24px" h="24px" />,
      href: '/explorer/ckb',
    },
  ]
  const explorerLinks = explorers.map((x, i) => {
    return (
      <Link
        href={x.href}
        p={{ base: '12px', md: '6px' }}
        key={i}
        gap="8px"
        display="flex"
        alignItems="center"
        rounded="100px"
        w="100%"
        border="1px solid"
        borderColor="transparent"
        transition="100ms"
        _hover={{
          bg: 'bg.input',
          borderColor: 'border.light',
        }}
        css={{
          '&:hover .arrow': {
            opacity: 1,
          },
        }}
        onClick={() => setIsOpen(false)}
      >
        {x.icon}
        {x.label}
        <ArrowIcon ml="auto" mr="6px" w="12px" minW="12px" className="arrow" opacity={0} transition="100ms" />
      </Link>
    )
  })

  return (
    <Center
      flexDir="column"
      bg="bg.card"
      w="100%"
      px={{ base: '20px', lg: '30px' }}
      pos="sticky"
      top={pathname === `/${locale}` ? 0 : { base: '-48px', lg: 0 }}
      zIndex="50"
      shadow="lg"
      minH={{ base: '64px', lg: '80px' }}
    >
      <ProgressBar height="4px" color="var(--colors-brand)" options={{ showSpinner: false }} shallowRouting />
      <Flex maxW="1280px" w="100%" h={{ base: '64px', lg: '80px' }} alignItems="center" justifyContent="space-between">
        <HStack fontWeight="medium" gap={{ base: '40px', xl: '80px' }} flex={1} pr={{ base: 0, lg: '24px' }}>
          <Link display="flex" href="/" gap="8px" alignItems="center">
            <LogoSVG w="40px" h="40px" />
            <Text fontWeight="semibold" fontSize={{ base: '16px', lg: '20px' }} whiteSpace="nowrap">
              <Trans>RGB++ Explorer</Trans>
            </Text>
          </Link>
          <HStack
            gap={{ base: '24px', lg: '48px' }}
            fontSize={{ base: '14px', lg: '16px' }}
            display={{ base: 'none', md: 'flex' }}
            ml={{ base: 'auto', lg: 0 }}
          >
            <HoverCard.Root unmountOnExit openDelay={0} closeDelay={200}>
              <HoverCard.Trigger asChild>
                <styled.button
                  display="flex"
                  alignItems="center"
                  gap="12px"
                  cursor="default"
                  color={pathname.startsWith(`/${locale}/explorer`) ? 'brand' : 'text.primary'}
                  whiteSpace="nowrap"
                >
                  <Trans>Explorer</Trans>
                  <ArrowDownIcon w="16px" h="16px" />
                </styled.button>
              </HoverCard.Trigger>

              <HoverCard.Positioner>
                <HoverCard.Content w="200px">
                  <HoverCard.Arrow>
                    <HoverCard.ArrowTip />
                  </HoverCard.Arrow>
                  <VStack gap="16px" w="100%">
                    {explorerLinks}
                  </VStack>
                </HoverCard.Content>
              </HoverCard.Positioner>
            </HoverCard.Root>

            <Link
              href="/assets"
              _hover={{ textDecoration: 'underline' }}
              color={pathname.startsWith(`/${locale}/assets`) ? 'brand' : 'text.primary'}
              whiteSpace="nowrap"
            >
              <Trans>RGB++ Assets</Trans>
            </Link>
          </HStack>
        </HStack>
        <HStack gap="20px">
          <ClientOnly>
            <IfPathname isNotOneOf={['/']} exact>
              {isLg ? <SearchBarInNav ml="auto" /> : null}
            </IfPathname>
            <IfPathname isOneOf={['/']} exact>
              <Box pl="24px">
                <NetworkSwitcher />
              </Box>
            </IfPathname>
            {!isMd ? (
              <Popover.Root
                open={isOpen}
                onOpenChange={(e) => setIsOpen(e.open)}
                unmountOnExit
                positioning={{ offset: { mainAxis: 24 } }}
              >
                <Popover.Trigger asChild>
                  <styled.button cursor="pointer" rounded="100%" h="100%" onClick={() => setIsOpen((x) => !x)}>
                    <MenuIcon w="16px" h="16px" color="text.primary" />
                  </styled.button>
                </Popover.Trigger>
                <Popover.Positioner w="100%" transform="translate3d(0, var(--y), 0) !important">
                  <Popover.Content
                    w="100%"
                    maxW="unset"
                    borderX="none"
                    borderBottom="none"
                    bg="bg.card"
                    rounded="0"
                    borderTop="1px solid"
                    borderTopColor="white.a2"
                  >
                    <Heading
                      h="48px"
                      lineHeight="48px"
                      fontSize="14px"
                      fontWeight="medium"
                      px="16px"
                      color={pathname.startsWith(`/${locale}/explorer`) ? 'brand' : 'text.primary'}
                    >
                      Explorer
                    </Heading>
                    <VStack gap="4px" w="100%" pl="24px">
                      {explorerLinks}
                    </VStack>
                    <Link
                      href="/assets"
                      h="48px"
                      lineHeight="48px"
                      fontSize="14px"
                      fontWeight="medium"
                      px="16px"
                      onClick={() => setIsOpen(false)}
                      color={pathname.startsWith(`/${locale}/assets`) ? 'brand' : 'text.primary'}
                    >
                      <Trans>RGB++ Assets</Trans>
                    </Link>
                  </Popover.Content>
                </Popover.Positioner>
              </Popover.Root>
            ) : null}
          </ClientOnly>
        </HStack>
      </Flex>
      <IfPathname isNotOneOf={['/']} exact>
        <Flex
          w="100%"
          maxW="1280px"
          display={{ base: 'flex', lg: 'none' }}
          h={{ base: '32px', sm: '40px', md: '40px', lg: '44px' }}
          mb={{ base: '16px', sm: '20px' }}
        >
          <ClientOnly>{!isLg ? <SearchBarInNav w="100%" /> : null}</ClientOnly>
        </Flex>
      </IfPathname>
    </Center>
  )
}


================================================
File: frontend/src/components/ui/image.tsx
================================================
'use client'

import NextImage from 'next/image'
import { styled } from 'styled-system/jsx'

const forwardPropSet = new Set(['width', 'height', 'blurDataURL', 'blurWidth', 'blurHeight'])

export const Image = styled(
  NextImage,
  {},
  {
    shouldForwardProp(prop: string): boolean {
      return forwardPropSet.has(prop)
    },
  },
)


================================================
File: frontend/src/components/ui/index.ts
================================================
export { Pagination, type PaginationProps } from './pagination'
export * from './primitives'


================================================
File: frontend/src/components/ui/link.tsx
================================================
'use client'

import type { Assign } from '@ark-ui/react'
import type { HTMLArkProps } from '@ark-ui/react/factory'
import { useLingui } from '@lingui/react'
import NextLink, { LinkProps as NextLinkProps } from 'next/link'
import { forwardRef, PropsWithChildren } from 'react'
import { styled } from 'styled-system/jsx'
import type { JsxStyleProps } from 'styled-system/types'

export interface LinkProps
  extends Assign<JsxStyleProps, Omit<HTMLArkProps<'a'>, 'href'>>,
    NextLinkProps,
    PropsWithChildren {}
const StyledLink = styled(NextLink)

export const Link = forwardRef<HTMLAnchorElement, LinkProps>(function Link({ children, ...props }, ref) {
  const { i18n } = useLingui()
  const locale = props.locale ?? i18n.locale

  if (typeof props.href === 'string' && (props.href.startsWith('https://') || props.href.startsWith('http://'))) {
    return (
      <StyledLink ref={ref} {...props} href={props.href} prefetch={false}>
        {children}
      </StyledLink>
    )
  }

  if (
    typeof props.href === 'object' &&
    (props.href.pathname?.startsWith('https://') || props.href.pathname?.startsWith('http://'))
  ) {
    return (
      <StyledLink ref={ref} {...props} href={props.href} prefetch={false}>
        {children}
      </StyledLink>
    )
  }

  const href =
    typeof props.href === 'string'
      ? props.href.startsWith(`/${locale}`)
        ? props.href
        : `/${locale}${props.href}`
      : {
          ...props.href,
          pathname: props.href.pathname?.startsWith(`/${locale}`)
            ? props.href.pathname
            : `/${locale}${props.href.pathname}`,
        }
  return (
    <StyledLink ref={ref} {...props} href={href} prefetch={false}>
      {children}
    </StyledLink>
  )
})

export default Link


================================================
File: frontend/src/components/ui/number-input.tsx
================================================
import { forwardRef } from 'react'

import * as StyledNumberInput from '@/components/ui/primitives/number-input'

export interface NumberInputProps extends StyledNumberInput.RootProps {}

export const NumberInput = forwardRef<HTMLDivElement, NumberInputProps>((props, ref) => {
  const { children, ...rootProps } = props
  return (
    <StyledNumberInput.Root ref={ref} {...rootProps}>
      {children ? <StyledNumberInput.Label>{children}</StyledNumberInput.Label> : null}
      <StyledNumberInput.Control>
        <StyledNumberInput.Input />
        <StyledNumberInput.IncrementTrigger>
          <ChevronUpIcon />
        </StyledNumberInput.IncrementTrigger>
        <StyledNumberInput.DecrementTrigger>
          <ChevronDownIcon />
        </StyledNumberInput.DecrementTrigger>
      </StyledNumberInput.Control>
    </StyledNumberInput.Root>
  )
})

NumberInput.displayName = 'NumberInput'

function ChevronUpIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <title>Chevron Up Icon</title>
      <path
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="m18 15l-6-6l-6 6"
      />
    </svg>
  )
}

function ChevronDownIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <title>Chevron Down Icon</title>
      <path
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="m6 9l6 6l6-6"
      />
    </svg>
  )
}


================================================
File: frontend/src/components/ui/pagination.tsx
================================================
'use client'

import { forwardRef } from 'react'

import ChevronLeftIcon from '@/assets/chevron-left.svg'
import ChevronRightIcon from '@/assets/chevron-right.svg'
import { Button, IconButton, Pagination as ArkPagination } from '@/components/ui/primitives'

export interface PaginationProps extends ArkPagination.RootProps {}

export const Pagination = forwardRef<HTMLElement, PaginationProps>(function Pagination(props, ref) {
  return (
    <ArkPagination.Root ref={ref} {...props}>
      <ArkPagination.PrevTrigger asChild>
        <IconButton variant="ghost" aria-label="Next Page" w="32px" h="32px" minW="unset">
          <ChevronLeftIcon />
        </IconButton>
      </ArkPagination.PrevTrigger>
      <ArkPagination.Context>
        {(pagination) =>
          pagination.pages.map((page, index) =>
            page.type === 'page' ? (
              <ArkPagination.Item key={index} {...page} asChild>
                <Button
                  variant={pagination.page === page.value ? 'solid' : 'ghost'}
                  w="32px"
                  h="32px"
                  fontSize="14px"
                  minW="unset"
                >
                  {page.value}
                </Button>
              </ArkPagination.Item>
            ) : (
              <ArkPagination.Ellipsis key={index} index={index} fontSize="14px">
                &#8230;
              </ArkPagination.Ellipsis>
            ),
          )
        }
      </ArkPagination.Context>
      <ArkPagination.NextTrigger asChild>
        <IconButton variant="ghost" aria-label="Next Page" w="32px" h="32px" minW="unset">
          <ChevronRightIcon />
        </IconButton>
      </ArkPagination.NextTrigger>
    </ArkPagination.Root>
  )
})


================================================
File: frontend/src/components/ui/primitives/button.tsx
================================================
import { ark } from '@ark-ui/react/factory'
import { styled } from 'styled-system/jsx'
import { button } from 'styled-system/recipes'
import type { ComponentProps } from 'styled-system/types'

export type ButtonProps = ComponentProps<typeof Button>
export const Button = styled(ark.button, button)


================================================
File: frontend/src/components/ui/primitives/heading.tsx
================================================
import { styled } from 'styled-system/jsx'
import { text, type TextVariantProps } from 'styled-system/recipes'
import type { ComponentProps, StyledComponent } from 'styled-system/types'

type TextProps = TextVariantProps & { as?: React.ElementType }

export type HeadingProps = ComponentProps<typeof Heading>
export const Heading = styled('h2', text, {
  defaultProps: { variant: 'heading' },
}) as StyledComponent<'h2', TextProps>


================================================
File: frontend/src/components/ui/primitives/hover-card.tsx
================================================
'use client'
import type { Assign } from '@ark-ui/react'
import { HoverCard } from '@ark-ui/react/hover-card'
import { hoverCard, type HoverCardVariantProps } from 'styled-system/recipes'
import type { ComponentProps, HTMLStyledProps } from 'styled-system/types'

import { createStyleContext } from '@/lib/create-style-context'

const { withRootProvider, withContext } = createStyleContext(hoverCard)

export type RootProviderProps = ComponentProps<typeof RootProvider>
export const RootProvider = withRootProvider<Assign<HoverCard.RootProviderProps, HoverCardVariantProps>>(
  HoverCard.RootProvider,
)

export type RootProps = ComponentProps<typeof Root>
export const Root = withRootProvider<Assign<HoverCard.RootProps, HoverCardVariantProps>>(HoverCard.Root)

export const Arrow = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, HoverCard.ArrowBaseProps>>(
  HoverCard.Arrow,
  'arrow',
)

export const ArrowTip = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, HoverCard.ArrowTipBaseProps>>(
  HoverCard.ArrowTip,
  'arrowTip',
)

export const Content = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, HoverCard.ContentBaseProps>>(
  HoverCard.Content,
  'content',
)

export const Positioner = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, HoverCard.PositionerBaseProps>>(
  HoverCard.Positioner,
  'positioner',
)

export const Trigger = withContext<HTMLButtonElement, Assign<HTMLStyledProps<'button'>, HoverCard.TriggerBaseProps>>(
  HoverCard.Trigger,
  'trigger',
)

export { HoverCardContext as Context } from '@ark-ui/react/hover-card'


================================================
File: frontend/src/components/ui/primitives/icon-button.tsx
================================================
import { ark } from '@ark-ui/react/factory'
import { styled } from 'styled-system/jsx'
import { iconButton } from 'styled-system/recipes'
import type { ComponentProps } from 'styled-system/types'

export type IconButtonProps = ComponentProps<typeof IconButton>
export const IconButton = styled(ark.button, iconButton)


================================================
File: frontend/src/components/ui/primitives/icon.tsx
================================================
import { ark } from '@ark-ui/react/factory'
import { styled } from 'styled-system/jsx'
import { icon } from 'styled-system/recipes'
import type { ComponentProps } from 'styled-system/types'

export type IconProps = ComponentProps<typeof Icon>
export const Icon = styled(ark.svg, icon, {
  defaultProps: { asChild: true },
})


================================================
File: frontend/src/components/ui/primitives/index.ts
================================================
export { Button, type ButtonProps } from './button'
export { Heading, type HeadingProps } from './heading'
export * as HoverCard from './hover-card'
export { IconButton, type IconButtonProps } from './icon-button'
export * as Pagination from './pagination'
export * as Popover from './popover'
export * as Table from './table'
export * as Tabs from './tabs'
export { Text, type TextProps } from './text'
export * as Tooltip from './tooltip'


================================================
File: frontend/src/components/ui/primitives/number-input.tsx
================================================
'use client'

import type { Assign } from '@ark-ui/react'
import { NumberInput } from '@ark-ui/react/number-input'
import { numberInput, type NumberInputVariantProps } from 'styled-system/recipes'
import type { ComponentProps, HTMLStyledProps } from 'styled-system/types'

import { createStyleContext } from '@/lib/create-style-context'

const { withProvider, withContext } = createStyleContext(numberInput)

export type RootProviderProps = ComponentProps<typeof RootProvider>
export const RootProvider = withProvider<
  HTMLDivElement,
  Assign<Assign<HTMLStyledProps<'div'>, NumberInput.RootProviderBaseProps>, NumberInputVariantProps>
>(NumberInput.RootProvider, 'root')

export type RootProps = ComponentProps<typeof Root>
export const Root = withProvider<
  HTMLDivElement,
  Assign<Assign<HTMLStyledProps<'div'>, NumberInput.RootBaseProps>, NumberInputVariantProps>
>(NumberInput.Root, 'root')

export const Control = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, NumberInput.ControlBaseProps>>(
  NumberInput.Control,
  'control',
)

export const DecrementTrigger = withContext<
  HTMLButtonElement,
  Assign<HTMLStyledProps<'button'>, NumberInput.DecrementTriggerBaseProps>
>(NumberInput.DecrementTrigger, 'decrementTrigger')

export const IncrementTrigger = withContext<
  HTMLButtonElement,
  Assign<HTMLStyledProps<'button'>, NumberInput.IncrementTriggerBaseProps>
>(NumberInput.IncrementTrigger, 'incrementTrigger')

export const Input = withContext<HTMLInputElement, Assign<HTMLStyledProps<'input'>, NumberInput.InputBaseProps>>(
  NumberInput.Input,
  'input',
)

export const Label = withContext<HTMLLabelElement, Assign<HTMLStyledProps<'label'>, NumberInput.LabelBaseProps>>(
  NumberInput.Label,
  'label',
)

export const Scrubber = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, NumberInput.ScrubberBaseProps>>(
  NumberInput.Scrubber,
  'scrubber',
)

export { NumberInputContext as Context } from '@ark-ui/react/number-input'


================================================
File: frontend/src/components/ui/primitives/pagination.tsx
================================================
'use client'

import type { Assign } from '@ark-ui/react'
import { Pagination } from '@ark-ui/react/pagination'
import { pagination, type PaginationVariantProps } from 'styled-system/recipes'
import type { ComponentProps, HTMLStyledProps } from 'styled-system/types'

import { createStyleContext } from '@/lib/create-style-context'

const { withProvider, withContext } = createStyleContext(pagination)

export type RootProviderProps = ComponentProps<typeof RootProvider>
export const RootProvider = withProvider<
  HTMLElement,
  Assign<Assign<HTMLStyledProps<'nav'>, Pagination.RootProviderBaseProps>, PaginationVariantProps>
>(Pagination.RootProvider, 'root')

export type RootProps = ComponentProps<typeof Root>
export const Root = withProvider<
  HTMLElement,
  Assign<Assign<HTMLStyledProps<'nav'>, Pagination.RootBaseProps>, PaginationVariantProps>
>(Pagination.Root, 'root')

export const Ellipsis = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Pagination.EllipsisBaseProps>>(
  Pagination.Ellipsis,
  'ellipsis',
)

export const Item = withContext<HTMLButtonElement, Assign<HTMLStyledProps<'button'>, Pagination.ItemBaseProps>>(
  Pagination.Item,
  'item',
)

export const NextTrigger = withContext<
  HTMLButtonElement,
  Assign<HTMLStyledProps<'button'>, Pagination.NextTriggerBaseProps>
>(Pagination.NextTrigger, 'nextTrigger')

export const PrevTrigger = withContext<
  HTMLButtonElement,
  Assign<HTMLStyledProps<'button'>, Pagination.PrevTriggerBaseProps>
>(Pagination.PrevTrigger, 'prevTrigger')

export { PaginationContext as Context } from '@ark-ui/react/pagination'


================================================
File: frontend/src/components/ui/primitives/popover.tsx
================================================
'use client'
import type { Assign } from '@ark-ui/react'
import { Popover } from '@ark-ui/react/popover'
import { popover, type PopoverVariantProps } from 'styled-system/recipes'
import type { ComponentProps, HTMLStyledProps } from 'styled-system/types'

import { createStyleContext } from '@/lib/create-style-context'

const { withRootProvider, withContext } = createStyleContext(popover)

export type RootProviderProps = ComponentProps<typeof RootProvider>
export const RootProvider = withRootProvider<Assign<Popover.RootProviderProps, PopoverVariantProps>>(
  Popover.RootProvider,
)

export type RootProps = ComponentProps<typeof Root>
export const Root = withRootProvider<Assign<Popover.RootProps, PopoverVariantProps>>(Popover.Root)

export const Anchor = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Popover.AnchorBaseProps>>(
  Popover.Anchor,
  'anchor',
)

export const Arrow = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Popover.ArrowBaseProps>>(
  Popover.Arrow,
  'arrow',
)

export const ArrowTip = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Popover.ArrowTipBaseProps>>(
  Popover.ArrowTip,
  'arrowTip',
)

export const CloseTrigger = withContext<
  HTMLButtonElement,
  Assign<HTMLStyledProps<'button'>, Popover.CloseTriggerBaseProps>
>(Popover.CloseTrigger, 'closeTrigger')

export const Content = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Popover.ContentBaseProps>>(
  Popover.Content,
  'content',
)

export const Description = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Popover.DescriptionBaseProps>>(
  Popover.Description,
  'description',
)

export const Indicator = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Popover.IndicatorBaseProps>>(
  Popover.Indicator,
  'indicator',
)

export const Positioner = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Popover.PositionerBaseProps>>(
  Popover.Positioner,
  'positioner',
)

export const Title = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Popover.TitleBaseProps>>(
  Popover.Title,
  'title',
)

export const Trigger = withContext<HTMLButtonElement, Assign<HTMLStyledProps<'button'>, Popover.TriggerBaseProps>>(
  Popover.Trigger,
  'trigger',
)

export { PopoverContext as Context } from '@ark-ui/react/popover'


================================================
File: frontend/src/components/ui/primitives/skeleton.tsx
================================================
'use client'
import type { Assign, HTMLArkProps } from '@ark-ui/react'
import { ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { styled } from 'styled-system/jsx'
import { skeleton, type SkeletonVariantProps } from 'styled-system/recipes'
import type { JsxStyleProps } from 'styled-system/types'

const StyledSkeleton = styled(ark.div, skeleton)

export interface SkeletonProps extends Assign<JsxStyleProps, HTMLArkProps<'div'>>, SkeletonVariantProps {
  /**
   *
   * @default false
   */
  isLoaded?: boolean
}

export const Skeleton = forwardRef<HTMLDivElement, SkeletonProps>((props, ref) => {
  const { isLoaded, ...otherProps } = props

  if (isLoaded) {
    return <styled.div animation="fade-in" ref={ref} {...otherProps} />
  }
  return <StyledSkeleton ref={ref} {...otherProps} />
})

Skeleton.displayName = 'Skeleton'


================================================
File: frontend/src/components/ui/primitives/table.tsx
================================================
'use client'

import type { Assign, PolymorphicProps } from '@ark-ui/react'
import { ark } from '@ark-ui/react/factory'
import { table, type TableVariantProps } from 'styled-system/recipes'
import type { HTMLStyledProps } from 'styled-system/types'

import { createStyleContext } from '@/lib/create-style-context'

const { withProvider, withContext } = createStyleContext(table)

export interface RootProps extends Assign<HTMLStyledProps<'table'>, PolymorphicProps>, TableVariantProps {}
export const Root = withProvider<HTMLTableElement, RootProps>(ark.table, 'root')

export const Body = withContext<HTMLTableSectionElement, Assign<HTMLStyledProps<'tbody'>, PolymorphicProps>>(
  ark.tbody,
  'body',
)

export const Caption = withContext<HTMLTableCaptionElement, Assign<HTMLStyledProps<'caption'>, PolymorphicProps>>(
  ark.caption,
  'caption',
)

export const Cell = withContext<HTMLTableCellElement, Assign<HTMLStyledProps<'td'>, PolymorphicProps>>(ark.td, 'cell')

export const Foot = withContext<HTMLTableSectionElement, Assign<HTMLStyledProps<'tfoot'>, PolymorphicProps>>(
  ark.tfoot,
  'footer',
)

export const Head = withContext<HTMLTableSectionElement, Assign<HTMLStyledProps<'head'>, PolymorphicProps>>(
  ark.thead,
  'head',
)

export const Header = withContext<HTMLTableCellElement, Assign<HTMLStyledProps<'th'>, PolymorphicProps>>(
  ark.th,
  'header',
)

export const Row = withContext<HTMLTableRowElement, Assign<HTMLStyledProps<'tr'>, PolymorphicProps>>(ark.tr, 'row')


================================================
File: frontend/src/components/ui/primitives/tabs.tsx
================================================
'use client'

import type { Assign } from '@ark-ui/react'
import { Tabs } from '@ark-ui/react/tabs'
import { tabs, type TabsVariantProps } from 'styled-system/recipes'
import type { ComponentProps, HTMLStyledProps } from 'styled-system/types'

import { createStyleContext } from '@/lib/create-style-context'

const { withProvider, withContext } = createStyleContext(tabs)

export type RootProviderProps = ComponentProps<typeof RootProvider>
export const RootProvider = withProvider<
  HTMLDivElement,
  Assign<Assign<HTMLStyledProps<'div'>, Tabs.RootProviderBaseProps>, TabsVariantProps>
>(Tabs.RootProvider, 'root')

export type RootProps = ComponentProps<typeof Root>
export const Root = withProvider<
  HTMLDivElement,
  Assign<Assign<HTMLStyledProps<'div'>, Tabs.RootBaseProps>, TabsVariantProps>
>(Tabs.Root, 'root')

export const Content = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Tabs.ContentBaseProps>>(
  Tabs.Content,
  'content',
)

export const Indicator = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Tabs.IndicatorBaseProps>>(
  Tabs.Indicator,
  'indicator',
)

export const List = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Tabs.ListBaseProps>>(Tabs.List, 'list')

export const Trigger = withContext<HTMLButtonElement, Assign<HTMLStyledProps<'button'>, Tabs.TriggerBaseProps>>(
  Tabs.Trigger,
  'trigger',
)

export { TabsContext as Context } from '@ark-ui/react/tabs'


================================================
File: frontend/src/components/ui/primitives/text.tsx
================================================
import { styled } from 'styled-system/jsx'
import { text, type TextVariantProps } from 'styled-system/recipes'
import type { ComponentProps, StyledComponent } from 'styled-system/types'

type ParagraphProps = TextVariantProps & { as?: React.ElementType }

export type TextProps = ComponentProps<typeof Text>
export const Text = styled('p', text) as StyledComponent<'p', ParagraphProps>


================================================
File: frontend/src/components/ui/primitives/tooltip.tsx
================================================
'use client'

import type { Assign } from '@ark-ui/react'
import { Tooltip } from '@ark-ui/react/tooltip'
import { tooltip, type TooltipVariantProps } from 'styled-system/recipes'
import type { ComponentProps, HTMLStyledProps } from 'styled-system/types'

import { createStyleContext } from '@/lib/create-style-context'

const { withRootProvider, withContext } = createStyleContext(tooltip)

export type RootProviderProps = ComponentProps<typeof RootProvider>
export const RootProvider = withRootProvider<Assign<Tooltip.RootProviderProps, TooltipVariantProps>>(
  Tooltip.RootProvider,
)

export type RootProps = ComponentProps<typeof Root>
export const Root = withRootProvider<Assign<Tooltip.RootProps, TooltipVariantProps>>(Tooltip.Root)

export const Arrow = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Tooltip.ArrowBaseProps>>(
  Tooltip.Arrow,
  'arrow',
)

export const ArrowTip = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Tooltip.ArrowTipBaseProps>>(
  Tooltip.ArrowTip,
  'arrowTip',
)

export const Content = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Tooltip.ContentBaseProps>>(
  Tooltip.Content,
  'content',
)

export const Positioner = withContext<HTMLDivElement, Assign<HTMLStyledProps<'div'>, Tooltip.PositionerBaseProps>>(
  Tooltip.Positioner,
  'positioner',
)

export const Trigger = withContext<HTMLButtonElement, Assign<HTMLStyledProps<'button'>, Tooltip.TriggerBaseProps>>(
  Tooltip.Trigger,
  'trigger',
)

export { TooltipContext as Context } from '@ark-ui/react/tooltip'


================================================
File: frontend/src/configs/query-client.ts
================================================
'use client'

import { QueryClient } from '@tanstack/react-query'

export const queryClient = new QueryClient()


================================================
File: frontend/src/configs/ui-preset/button.ts
================================================
import { defineRecipe } from '@pandacss/dev'

export const button = defineRecipe({
  className: 'button',
  base: {
    alignItems: 'center',
    appearance: 'none',
    borderRadius: 'l2',
    cursor: 'pointer',
    display: 'inline-flex',
    fontWeight: 'semibold',
    minWidth: '0',
    justifyContent: 'center',
    outline: 'none',
    transitionDuration: 'normal',
    transitionProperty: 'background, border-color, color, box-shadow',
    transitionTimingFunction: 'default',
    userSelect: 'none',
    verticalAlign: 'middle',
    whiteSpace: 'nowrap',
    _hidden: {
      display: 'none',
    },
  },
  defaultVariants: {
    variant: 'solid',
    size: 'md',
  },
  variants: {
    variant: {
      solid: {
        background: 'brand',
        color: 'text.primary',
        colorPalette: 'accent',
        _hover: {
          background: 'colorPalette.emphasized',
        },
        _focusVisible: {
          outline: '2px solid',
          outlineColor: 'colorPalette.default',
          outlineOffset: '2px',
        },
        _disabled: {
          color: 'text.disabled',
          background: 'bg.disabled',
          cursor: 'not-allowed',
          _hover: {
            color: 'fg.disabled',
            background: 'bg.disabled',
          },
        },
      },
      outline: {
        borderWidth: '1px',
        borderColor: 'white.a7',
        color: 'text.primary',
        colorPalette: 'gray',
        _hover: {
          background: 'colorPalette.a2',
        },
        _disabled: {
          borderColor: 'border.disabled',
          color: 'fg.disabled',
          cursor: 'not-allowed',
          _hover: {
            background: 'transparent',
            borderColor: 'border.disabled',
            color: 'fg.disabled',
          },
        },
        _focusVisible: {
          outline: '2px solid',
          outlineColor: 'colorPalette.default',
          outlineOffset: '2px',
        },
        _selected: {
          background: 'accent.default',
          borderColor: 'accent.default',
          color: 'accent.fg',
          _hover: {
            background: 'accent.emphasized',
            borderColor: 'accent.emphasized',
          },
        },
      },
      ghost: {
        color: 'text.primary',
        colorPalette: 'gray',
        _hover: {
          background: 'colorPalette.a3',
        },
        _selected: {
          background: 'colorPalette.a3',
        },
        _disabled: {
          color: 'text.disabled',
          cursor: 'not-allowed',
          _hover: {
            background: 'transparent',
            color: 'text.disabled',
          },
        },
        _focusVisible: {
          outline: '2px solid',
          outlineColor: 'colorPalette.default',
          outlineOffset: '2px',
        },
      },
      link: {
        verticalAlign: 'baseline',
        _disabled: {
          color: 'border.disabled',
          cursor: 'not-allowed',
          _hover: {
            color: 'border.disabled',
          },
        },
        height: 'auto!',
        px: '0!',
        minW: '0!',
      },
      subtle: {
        background: 'colorPalette.a3',
        color: 'colorPalette.text',
        colorPalette: 'gray',
        _hover: {
          background: 'colorPalette.a4',
        },
        _focusVisible: {
          outline: '2px solid',
          outlineColor: 'colorPalette.default',
          outlineOffset: '2px',
        },
        _disabled: {
          background: 'bg.disabled',
          color: 'fg.disabled',
          cursor: 'not-allowed',
          _hover: {
            background: 'bg.disabled',
            color: 'fg.disabled',
          },
        },
      },
    },
    size: {
      xs: {
        h: '8',
        minW: '8',
        textStyle: 'xs',
        px: '3',
        gap: '2',
        '& svg': {
          fontSize: 'md',
          width: '4',
          height: '4',
        },
      },
      sm: {
        h: '9',
        minW: '9',
        textStyle: 'sm',
        px: '3.5',
        gap: '2',
        '& svg': {
          width: '4',
          height: '4',
        },
      },
      md: {
        h: '10',
        minW: '10',
        textStyle: 'sm',
        px: '4',
        gap: '2',
        '& svg': {
          width: '5',
          height: '5',
        },
      },
      lg: {
        h: '11',
        minW: '11',
        textStyle: 'md',
        px: '4.5',
        gap: '2',
        '& svg': {
          width: '5',
          height: '5',
        },
      },
      xl: {
        h: '12',
        minW: '12',
        textStyle: 'md',
        px: '5',
        gap: '2.5',
        '& svg': {
          width: '5',
          height: '5',
        },
      },
      '2xl': {
        h: '16',
        minW: '16',
        textStyle: 'lg',
        px: '7',
        gap: '3',
        '& svg': {
          width: '6',
          height: '6',
        },
      },
    },
  },
})


================================================
File: frontend/src/configs/ui-preset/hover-card.ts
================================================
import { hoverCardAnatomy } from '@ark-ui/react'
import { defineSlotRecipe } from '@pandacss/dev'

export const hoverCard = defineSlotRecipe({
  className: 'hoverCard',
  slots: hoverCardAnatomy.keys(),
  base: {
    content: {
      '--hover-card-background': 'var(--colors-bg-card-hover)',
      background: 'bg.card.hover',
      borderRadius: 'l3',
      border: '1px solid',
      borderColor: 'white.a2',
      boxShadow: 'lg',
      maxW: '80',
      p: '4',
      position: 'relative',
      zIndex: 51,
      _open: {
        animation: 'fadeIn 0.25s ease-out',
      },
      _closed: {
        animation: 'fadeOut 0.2s ease-out',
      },
    },
    arrow: {
      '--arrow-size': '12px',
      '--arrow-background': 'var(--colors-bg-card-hover)',
    },
    arrowTip: {
      borderColor: 'white.a2',
      borderTopWidth: '1px',
      borderLeftWidth: '1px',
    },
  },
})


================================================
File: frontend/src/configs/ui-preset/icon-button.ts
================================================
import { defineRecipe, type RecipeConfig } from '@pandacss/dev'

import { button } from '@/configs/ui-preset/button'
import { deepmerge } from '@/lib/deepmerge'

export const iconButton: RecipeConfig = deepmerge(
  button,
  defineRecipe({
    className: 'iconButton',
    variants: {
      size: {
        xs: {
          px: '0',
        },
        sm: {
          px: '0',
        },
        md: {
          px: '0',
        },
        lg: {
          px: '0',
        },
        xl: {
          px: '0',
        },
        '2xl': {
          px: '0',
        },
      },
    },
  }),
)


================================================
File: frontend/src/configs/ui-preset/number-input.ts
================================================
import { numberInputAnatomy } from '@ark-ui/react'
import { defineSlotRecipe } from '@pandacss/dev'

const trigger = {
  alignItems: 'center',
  borderColor: 'border.light',
  color: 'text.secondary',
  cursor: 'pointer',
  display: 'inline-flex',
  justifyContent: 'center',
  transitionDuration: 'normal',
  transitionProperty: 'background, border-color, color, box-shadow',
  transitionTimingFunction: 'default',
  '& :where(svg)': {
    width: '4',
    height: '4',
  },
  _hover: {
    background: 'white.a2',
    color: 'text.primary',
  },
  _disabled: {
    color: 'fg.disabled',
    cursor: 'not-allowed',
    _hover: {
      background: 'transparent',
      color: 'fg.disabled',
    },
  },
}

export const numberInput = defineSlotRecipe({
  className: 'numberInput',
  slots: numberInputAnatomy.keys(),
  base: {
    root: {
      colorPalette: 'accent',
      display: 'flex',
      flexDirection: 'column',
      gap: '1.5',
    },
    control: {
      borderColor: 'border.light',
      borderRadius: 'l2',
      borderWidth: '1px',

      display: 'grid',
      divideX: '1px',
      gridTemplateColumns: '1fr 32px',
      gridTemplateRows: '1fr 1fr',
      overflow: 'hidden',
      transitionDuration: 'normal',
      transitionProperty: 'border-color, box-shadow',
      transitionTimingFunction: 'default',
      _focusWithin: {
        borderColor: 'border.light',
        boxShadow: '0 0 0 1px var(--colors-color-palette-default)',
      },
      _disabled: {
        opacity: 0.4,
        cursor: 'not-allowed',
      },
    },
    input: {
      background: 'transparent',
      border: 'none',
      gridRow: '2',
      outline: 'none',
      width: 'full',
      _disabled: {
        cursor: 'not-allowed',
      },
    },
    label: {
      color: 'fg.default',
      fontWeight: 'medium',
    },
    decrementTrigger: { ...trigger, borderTopWidth: '1px' },
    incrementTrigger: trigger,
  },
  defaultVariants: {
    size: 'md',
  },
  variants: {
    size: {
      md: {
        control: {
          ps: '3',
          h: '10',
          minW: '10',
          fontSize: 'md',
        },
        label: {
          textStyle: 'sm',
        },
      },
      lg: {
        control: {
          ps: '3.5',
          h: '11',
          minW: '11',
          fontSize: 'md',
        },
        label: {
          textStyle: 'sm',
        },
      },
      xl: {
        control: {
          ps: '4',
          h: '12',
          minW: '12',
          fontSize: 'lg',
        },
        label: {
          textStyle: 'md',
        },
      },
    },
  },
})


================================================
File: frontend/src/configs/ui-preset/pagination.ts
================================================
import { paginationAnatomy } from '@ark-ui/react'
import { defineSlotRecipe } from '@pandacss/dev'

export const pagination = defineSlotRecipe({
  className: 'pagination',
  slots: paginationAnatomy.keys(),
  base: {
    root: {
      display: 'flex',
      gap: '8px',
    },
    item: {
      fontVariantNumeric: 'tabular-nums',
    },
    ellipsis: {
      alignItems: 'center',
      color: 'text.third',
      display: 'inline-flex',
      fontWeight: 'semibold',
      px: '2',
    },
  },
})


================================================
File: frontend/src/configs/ui-preset/popover.ts
================================================
import { popoverAnatomy } from '@ark-ui/react'
import { defineSlotRecipe } from '@pandacss/dev'

export const popover = defineSlotRecipe({
  className: 'popover',
  slots: popoverAnatomy.keys(),
  base: {
    positioner: {
      position: 'relative',
    },
    content: {
      '--hover-card-background': 'var(--colors-bg-card-hover)',
      background: 'bg.card.hover',
      borderRadius: 'l3',
      border: '1px solid',
      borderColor: 'white.a2',
      boxShadow: 'lg',
      maxW: '80',
      p: '4',
      position: 'relative',
      display: 'flex',
      flexDirection: 'column',
      zIndex: 51,
      _open: {
        animation: 'fadeIn 0.25s ease-out',
      },
      _closed: {
        animation: 'fadeOut 0.2s ease-out',
      },
      _hidden: {
        display: 'none',
      },
    },
    title: {
      fontWeight: 'medium',
      textStyle: 'sm',
    },
    description: {
      color: 'fg.muted',
      textStyle: 'sm',
    },
    closeTrigger: {
      color: 'fg.muted',
    },
    arrow: {
      '--arrow-size': 'var(--sizes-3)',
      '--arrow-background': 'var(--colors-bg-card-hover)',
    },
    arrowTip: {
      borderColor: 'white.a2',
      borderTopWidth: '1px',
      borderLeftWidth: '1px',
    },
  },
})


================================================
File: frontend/src/configs/ui-preset/skeleton.ts
================================================
import { defineRecipe } from '@pandacss/dev'

export const skeleton = defineRecipe({
  className: 'skeleton',
  base: {
    animation: 'skeleton-pulse',
    backgroundClip: 'padding-box',
    backgroundColor: 'white.a2',
    borderRadius: 'l3',
    color: 'transparent',
    cursor: 'default',
    pointerEvents: 'none',
    userSelect: 'none',
    '&::before, &::after, *': {
      visibility: 'hidden',
    },
  },
})


================================================
File: frontend/src/configs/ui-preset/table.ts
================================================
import { defineSlotRecipe } from '@pandacss/dev'

export const table = defineSlotRecipe({
  className: 'table',
  slots: ['root', 'body', 'cell', 'footer', 'head', 'header', 'row', 'caption'],
  base: {
    root: {
      captionSide: 'bottom',
      width: 'full',
    },
    body: {
      '& tr:last-child': {
        borderBottomWidth: '0',
      },
    },
    caption: {
      color: 'fg.subtle',
    },
    cell: {
      verticalAlign: 'middle',
    },
    footer: {
      fontWeight: 'medium',
      borderTopWidth: '1px',
      '& tr:last-child': {
        borderBottomWidth: '0',
      },
    },
    header: {
      color: 'text.third',
      textAlign: 'left',
      verticalAlign: 'middle',
    },
    row: {
      transitionDuration: 'normal',
      transitionProperty: 'background, color',
      transitionTimingFunction: 'default',
      position: 'relative',
      borderBottom: '1px solid',
      borderBottomColor: 'border.primary',
    },
  },
  defaultVariants: {
    size: 'md',
    variant: 'plain',
  },
  variants: {
    variant: {
      outline: {
        root: {
          borderWidth: '1px',
        },
        head: {
          bg: 'bg.subtle',
        },
      },
      plain: {
        row: {
          _hover: {
            bg: 'bg.card.hover',
          },
          _selected: {
            bg: 'bg.muted',
          },
        },
      },
    },
    size: {
      md: {
        root: {
          textStyle: 'sm',
        },
        caption: {
          mt: '4',
        },
        cell: {
          px: '4',
          py: '18px',
          _first: {
            pl: '30px',
          },
          _last: {
            pr: '30px',
          },
        },
        header: {
          height: '11',
          px: '4',
          _first: {
            pl: '30px',
          },
          _last: {
            pr: '30px',
          },
        },
      },
    },
  },
})


================================================
File: frontend/src/configs/ui-preset/tabs.ts
================================================
import { tabsAnatomy } from '@ark-ui/react'
import { defineSlotRecipe } from '@pandacss/dev'

export const tabs = defineSlotRecipe({
  className: 'tabs',
  slots: tabsAnatomy.keys(),
  base: {
    root: {
      colorPalette: 'accent',
      display: 'flex',
      width: 'full',
      _horizontal: {
        flexDirection: 'column',
      },
      _vertical: {
        flexDirection: 'row',
      },
    },
    list: {
      display: 'flex',
      flexShrink: '0',
      _horizontal: {
        flexDirection: 'row',
      },
      _vertical: {
        flexDirection: 'column',
      },
      overflow: 'auto',
      position: 'relative',
      scrollbarWidth: 'none',
      '&::-webkit-scrollbar': {
        display: 'none',
      },
    },
    trigger: {
      alignItems: 'center',
      color: 'text.third',
      cursor: 'pointer',
      display: 'inline-flex',
      flexShrink: '0',
      fontWeight: 'semibold',
      gap: '2',
      justifyContent: 'center',
      transitionDuration: 'normal',
      transitionProperty: 'color, background, border-color',
      transitionTimingFunction: 'default',
      whiteSpace: 'nowrap',
      zIndex: '1',
      _disabled: {
        color: 'text.disabled',
        cursor: 'not-allowed',
        _hover: {
          color: 'text.disabled',
        },
      },
      _hover: {
        color: 'text.primary',
      },
      _selected: {
        color: 'text.primary',
        _hover: {
          color: 'text.primary',
        },
      },
      _vertical: {
        justifyContent: 'flex-start',
      },
    },
  },
  defaultVariants: {
    size: 'md',
    variant: 'solid',
  },
  variants: {
    variant: {
      enclosed: {
        list: {
          borderRadius: 'l3',
          borderWidth: '1px',
          px: '1',
          backgroundColor: {
            _light: 'gray.a2',
            _dark: 'bg.canvas',
          },
          _horizontal: {
            alignItems: 'center',
          },
          _vertical: {
            height: 'fit-content!',
            py: '1',
          },
        },
        indicator: {
          backgroundColor: {
            _light: 'bg.default',
            _dark: 'bg.subtle',
          },

          boxShadow: 'xs',
          borderRadius: 'l2',
          '--transition-duration': '200ms!',
          height: 'var(--height)',
          width: 'var(--width)',
        },
      },
      line: {
        list: {
          _horizontal: {
            boxShadow: '0 -1px 0 0 inset var(--colors-border-default)',
            gap: '4',
          },
          _vertical: {
            boxShadow: '1px 0 0 0 inset var(--colors-border-default)',
            gap: '1',
          },
        },
        indicator: {
          background: 'colorPalette.default',
          _horizontal: {
            bottom: '0',
            height: '2px',
            width: 'var(--width)',
          },
          _vertical: {
            height: 'var(--height)',
            left: '0',
            width: '2px',
          },
        },
        content: {
          pt: '4',
        },
        trigger: {
          _horizontal: {
            pb: '2.5',
          },
        },
      },
      outline: {
        list: {
          _horizontal: {
            mb: '-1px',
          },
          _vertical: {
            mr: '-1px',
          },
        },
        trigger: {
          borderColor: 'transparent',
          borderWidth: '1px',
          _horizontal: {
            borderTopRadius: 'l2',
          },
          _vertical: {
            borderTopLeftRadius: 'l2',
            borderBottomLeftRadius: 'l2',
          },
          _selected: {
            background: 'bg.default',
            borderColor: 'border.subtle',
            _horizontal: {
              borderBottomColor: 'transparent',
            },
            _vertical: {
              borderRightColor: 'transparent',
            },
          },
        },
        content: {
          borderWidth: '1px',
          borderColor: 'border.subtle',
          background: 'bg.default',
          width: 'full',
        },
      },
      solid: {
        list: {
          gap: '20px',
          _horizontal: {
            alignItems: 'center',
          },
          _vertical: {
            height: 'fit-content!',
          },
        },
        indicator: {
          boxShadow: 'xs',
          '--transition-duration': '200ms!',
          height: 'var(--height)',
          width: 'var(--width)',
        },
        trigger: {
          bgColor: 'bg.card',
          borderRadius: '4px',
          _selected: {
            bgColor: 'brand',
          },
        },
      },
    },
    size: {
      sm: {
        trigger: {
          '& svg': {
            width: '4',
            height: '4',
          },
        },
      },
      md: {
        trigger: {
          '& svg': {
            width: '5',
            height: '5',
          },
        },
      },
      lg: {
        trigger: {
          '& svg': {
            width: '5',
            height: '5',
          },
        },
      },
    },
  },
  compoundVariants: [
    {
      size: 'sm',
      variant: 'enclosed',
      css: {
        list: {
          height: '10',
        },
        trigger: {
          h: '8',
          minW: '8',
          textStyle: 'sm',
          px: '3',
        },
        content: {
          p: '3.5',
        },
      },
    },
    {
      size: 'md',
      variant: 'enclosed',
      css: {
        list: {
          height: '11',
        },
        trigger: {
          h: '9',
          minW: '9',
          textStyle: 'sm',
          px: '3.5',
        },
        content: {
          p: '4',
        },
      },
    },
    {
      size: 'lg',
      variant: 'enclosed',
      css: {
        list: {
          height: '12',
        },
        trigger: {
          h: '10',
          minW: '10',
          textStyle: 'sm',
          px: '4',
        },
        content: {
          p: '4.5',
        },
      },
    },

    {
      size: 'sm',
      variant: 'outline',
      css: {
        trigger: {
          h: '9',
          minW: '9',
          textStyle: 'sm',
          px: '3.5',
        },
        content: {
          p: '3.5',
        },
      },
    },
    {
      size: 'md',
      variant: 'outline',
      css: {
        trigger: {
          h: '10',
          minW: '10',
          textStyle: 'sm',
          px: '4',
        },
        content: {
          p: '4',
        },
      },
    },
    {
      size: 'lg',
      variant: 'outline',
      css: {
        trigger: {
          h: '11',
          minW: '11',
          textStyle: 'md',
          px: '4.5',
        },
        content: {
          p: '4.5',
        },
      },
    },

    {
      size: 'sm',
      variant: 'line',
      css: {
        trigger: {
          fontSize: 'sm',
          h: '9',
          minW: '9',
          px: '2.5',
        },
        content: {
          pt: '3',
        },
      },
    },
    {
      size: 'md',
      variant: 'line',
      css: {
        trigger: {
          fontSize: 'md',
          h: '10',
          minW: '10',
          px: '3',
        },
        content: {
          pt: '4',
        },
      },
    },
    {
      size: 'lg',
      variant: 'line',
      css: {
        trigger: {
          px: '3.5',
          h: '11',
          minW: '11',
          fontSize: 'md',
        },
        content: {
          pt: '5',
        },
      },
    },

    {
      size: 'sm',
      variant: 'solid',
      css: {
        list: {
          height: '10',
        },
        trigger: {
          h: '8',
          minW: '8',
          textStyle: 'sm',
          px: '3',
        },
        content: {
          p: '3.5',
        },
      },
    },
    {
      size: 'md',
      variant: 'solid',
      css: {
        list: {
          height: '11',
        },
        trigger: {
          h: '9',
          minW: '9',
          textStyle: 'sm',
          px: '3.5',
        },
        content: {
          p: '4',
        },
      },
    },
    {
      size: 'lg',
      variant: 'solid',
      css: {
        list: {
          height: '12',
        },
        trigger: {
          h: '10',
          minW: '10',
          textStyle: 'sm',
          px: '4',
        },
        content: {
          p: '4.5',
        },
      },
    },
  ],
})


================================================
File: frontend/src/configs/ui-preset/tooltip.ts
================================================
import { tooltipAnatomy } from '@ark-ui/react'
import { defineSlotRecipe } from '@pandacss/dev'

export const tooltip = defineSlotRecipe({
  className: 'tooltip',
  slots: tooltipAnatomy.keys(),
  base: {
    content: {
      background: 'black.a8',
      borderRadius: 'l2',
      boxShadow: 'sm',
      color: 'text.primary',
      fontWeight: 'semibold',
      px: '3',
      py: '2',
      textStyle: 'xs',
      maxWidth: '2xs',
      _open: {
        animation: 'fadeIn 0.25s ease-out',
      },
      _closed: {
        animation: 'fadeOut 0.2s ease-out',
      },
    },
  },
})


================================================
File: frontend/src/constants/env.ts
================================================
import { z } from 'zod'

const internalEnvSchema = z.object({})

const zodStringBoolean = z
  .string()
  .toLowerCase()
  .transform((x) => x === 'true')
  .pipe(z.boolean())

const publicEnvSchema = z.object({
  CKB_EXPLORER_URL: z.string().default('https://explorer.nervos.org'),
  MEMPOOL_URL: z.string().default('https://mempool.space'),
  IS_MAINNET: zodStringBoolean.default('true'),
  CKB_URL: z.string().default('https://nervos.org'),
  UTXO_STACK_URL: z.string().default('https://utxostack.network'),
  RGBPP_WHITE_PAPER_URL: z.string().default('https://github.com/ckb-cell/RGBPlusPlus-design'),
  RGBPP_SCRIPT_URL: z
    .string()
    .default('https://github.com/ckb-cell/RGBPlusPlus-design/blob/main/docs/lockscript-design-prd-en.md'),
  RGBPP_SDK_URL: z.string().default('https://github.com/ckb-cell/rgbpp-sdk'),
  UTXO_STACK_TWITTER_URL: z.string().default('https://x.com/utxostack'),
  CKB_CELL_GITHUB_URL: z.string().default('https://github.com/utxostack'),
  UTXO_STACK_MEDIUM_URL: z.string().default('https://medium.com/@utxostack'),
  RGBPP_EXPLORER_TESTNET_URL: z.string().default('https://testnet.explorer.utxostack.network'),
  RGBPP_EXPLORER_MAINNET_URL: z.string().default('https://explorer.utxostack.network'),
  RGBPP_DOMAINS: z
    .string()
    .default(
      'explorer.utxostack.network,testnet.explorer.utxostack.network,explorer.rgbpp.io,testnet.explorer.rgbpp.io',
    ),
})

const sharedEnvSchema = z.object({
  RGBPP_EXPLORER_API_URL: z.string().default('https://testnet-api.explorer.rgbpp.io/graphql'),
  GA_ID: z.string().optional(),
})

export const env = {
  share: sharedEnvSchema.parse({
    RGBPP_EXPLORER_API_URL: process.env.NEXT_PUBLIC_RGBPP_EXPLORER_API_URL,
    GA_ID: process.env.NEXT_PUBLIC_GA_ID,
  }),
  internal: (typeof window === 'undefined' ? internalEnvSchema.parse(process.env) : {}) as z.infer<
    typeof internalEnvSchema
  >,
  public: publicEnvSchema.parse({
    CKB_EXPLORER_URL: process.env.NEXT_PUBLIC_CKB_EXPLORER_URL,
    MEMPOOL_URL: process.env.NEXT_PUBLIC_MEMPOOL_URL,
    IS_MAINNET: process.env.NEXT_PUBLIC_IS_MAINNET,
    CKB_URL: process.env.NEXT_PUBLIC_CKB_URL,
    UTXO_STACK_URL: process.env.NEXT_PUBLIC_UTXO_STACK_URL,
    RGBPP_WHITE_PAPER_URL: process.env.NEXT_PUBLIC_RGBPP_WHITE_PAPER_URL,
    RGBPP_SCRIPT_URL: process.env.NEXT_PUBLIC_RGBPP_SCRIPT_URL,
    RGBPP_SDK_URL: process.env.NEXT_PUBLIC_RGBPP_SDK_URL,
    RGBPP_DOMAINS: process.env.NEXT_PUBLIC_RGBPP_DOMAINS,
    CKB_CELL_GITHUB_URL: process.env.NEXT_PUBLIC_CKB_CELL_GITHUB_URL,
  }),
}


================================================
File: frontend/src/constants/index.ts
================================================
export const DATE_TEMPLATE = 'YYYY-MM-DD'
export const TIME_TEMPLATE = `${DATE_TEMPLATE} HH:mm:ss`


================================================
File: frontend/src/constants/query-key.ts
================================================
export enum QueryKey {
  LastRgbppTxns = 'LastRgbppTxns',
  BlockHeightAndTxns24H = 'BlockHeightAndTxns24H',
  BtcTransactionCardInAddressList = 'BtcTransactionCardInAddressList',
  CkbTransactionCardInAddressList = 'CkbTransactionCardInAddressList',
  BtcTransactionCardWithQueryInAddress = 'BtcTransactionCardWithQueryInAddress',
}


================================================
File: frontend/src/gql/fragment-masking.ts
================================================
/* eslint-disable */
import { ResultOf, DocumentTypeDecoration, TypedDocumentNode } from '@graphql-typed-document-node/core';
import { FragmentDefinitionNode } from 'graphql';
import { Incremental } from './graphql';


export type FragmentType<TDocumentType extends DocumentTypeDecoration<any, any>> = TDocumentType extends DocumentTypeDecoration<
  infer TType,
  any
>
  ? [TType] extends [{ ' $fragmentName'?: infer TKey }]
    ? TKey extends string
      ? { ' $fragmentRefs'?: { [key in TKey]: TType } }
      : never
    : never
  : never;

// return non-nullable if `fragmentType` is non-nullable
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>>
): TType;
// return nullable if `fragmentType` is undefined
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | undefined
): TType | undefined;
// return nullable if `fragmentType` is nullable
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | null
): TType | null;
// return nullable if `fragmentType` is nullable or undefined
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | null | undefined
): TType | null | undefined;
// return array of non-nullable if `fragmentType` is array of non-nullable
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: Array<FragmentType<DocumentTypeDecoration<TType, any>>>
): Array<TType>;
// return array of nullable if `fragmentType` is array of nullable
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: Array<FragmentType<DocumentTypeDecoration<TType, any>>> | null | undefined
): Array<TType> | null | undefined;
// return readonly array of non-nullable if `fragmentType` is array of non-nullable
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>>
): ReadonlyArray<TType>;
// return readonly array of nullable if `fragmentType` is array of nullable
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>> | null | undefined
): ReadonlyArray<TType> | null | undefined;
export function useFragment<TType>(
  _documentNode: DocumentTypeDecoration<TType, any>,
  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | Array<FragmentType<DocumentTypeDecoration<TType, any>>> | ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>> | null | undefined
): TType | Array<TType> | ReadonlyArray<TType> | null | undefined {
  return fragmentType as any;
}


export function makeFragmentData<
  F extends DocumentTypeDecoration<any, any>,
  FT extends ResultOf<F>
>(data: FT, _fragment: F): FragmentType<F> {
  return data as FragmentType<F>;
}
export function isFragmentReady<TQuery, TFrag>(
  queryNode: DocumentTypeDecoration<TQuery, any>,
  fragmentNode: TypedDocumentNode<TFrag>,
  data: FragmentType<TypedDocumentNode<Incremental<TFrag>, any>> | null | undefined
): data is FragmentType<typeof fragmentNode> {
  const deferredFields = (queryNode as { __meta__?: { deferredFields: Record<string, (keyof TFrag)[]> } }).__meta__
    ?.deferredFields;

  if (!deferredFields) return true;

  const fragDef = fragmentNode.definitions[0] as FragmentDefinitionNode | undefined;
  const fragName = fragDef?.name?.value;

  const fields = (fragName && deferredFields[fragName]) || [];
  return fields.length > 0 && fields.every(field => data && field in data);
}


================================================
File: frontend/src/gql/gql.ts
================================================
/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query BtcAddressBase($address: String!) {\n    btcAddress(address: $address) {\n      address\n      satoshi\n      pendingSatoshi\n      transactionsCount\n    }\n  }\n": types.BtcAddressBaseDocument,
    "\n  query CkbAddressBase($address: String!) {\n    ckbAddress(address: $address) {\n      address\n      shannon\n      balance {\n        total\n        available\n        occupied\n      }\n      transactionsCount\n    }\n  }\n": types.CkbAddressBaseDocument,
    "\n  query BtcTransactionByAddress($address: String!, $afterTxid: String) {\n    btcAddress(address: $address) {\n      transactions(afterTxid: $afterTxid) {\n        txid\n      }\n    }\n  }\n": types.BtcTransactionByAddressDocument,
    "\n  query CkbTransactionByAddress($address: String!, $page: Int!, $pageSize: Int!) {\n    ckbAddress(address: $address) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        hash\n      }\n    }\n  }\n": types.CkbTransactionByAddressDocument,
    "\n  query RgbppCoin($typeHash: String!) {\n    rgbppCoin(typeHash: $typeHash) {\n      name\n      symbol\n      icon\n    }\n  }\n": types.RgbppCoinDocument,
    "\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n": types.RgbppCoinTransactionsByTypeHashDocument,
    "\n  query RgbppCoins($page: Int!, $pageSize: Int!) {\n    rgbppCoins(page: $page, pageSize: $pageSize) {\n      total\n      pageSize\n      coins {\n        icon\n        name\n        symbol\n        l1HoldersCount: holdersCount(layer: L1)\n        l2HoldersCount: holdersCount(layer: L2)\n        h24CkbTransactionsCount\n        totalAmount\n        deployedAt\n        decimal\n        typeHash\n      }\n    }\n  }\n": types.RgbppCoinsDocument,
    "\n  query BtcBlock($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      id\n      height\n      version\n      timestamp\n      transactionsCount\n      confirmations\n      size\n      weight\n      bits\n      difficulty\n      totalFee\n      miner {\n        address\n        satoshi\n        pendingSatoshi\n        transactionsCount\n      }\n      feeRateRange {\n        min\n        max\n      }\n    }\n  }\n": types.BtcBlockDocument,
    "\n  query BtcBlockTransaction($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      timestamp\n      transactions {\n        txid\n      }\n    }\n  }\n": types.BtcBlockTransactionDocument,
    "\n  query CkbBlock($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      version\n      hash\n      number\n      timestamp\n      transactionsCount\n      totalFee\n      miner {\n        address\n        shannon\n        transactionsCount\n      }\n      reward\n      size\n      confirmations\n    }\n  }\n": types.CkbBlockDocument,
    "\n  query CkbBlockTransactions($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      timestamp\n      transactions {\n        hash\n      }\n    }\n  }\n": types.CkbBlockTransactionsDocument,
    "\n      query BtcChainInfo {\n        btcChainInfo {\n          tipBlockHeight\n          tipBlockHash\n          difficulty\n          transactionsCountIn24Hours\n          fees {\n            fastest\n            halfHour\n            hour\n            economy\n            minimum\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL1TransactionsCount\n          holdersCount(layer: L1)\n        }\n      }\n    ": types.BtcChainInfoDocument,
    "\n  query RgbppLatestL1Transactions($limit: Int!) {\n    rgbppLatestL1Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n": types.RgbppLatestL1TransactionsDocument,
    "\n      query CkbChainInfo {\n        ckbChainInfo {\n          tipBlockNumber\n          fees {\n            fast\n            slow\n            average\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL2TransactionsCount\n          holdersCount(layer: L2)\n        }\n      }\n    ": types.CkbChainInfoDocument,
    "\n  query RgbppLatestL2Transactions($limit: Int!) {\n    rgbppLatestL2Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        leapDirection\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n": types.RgbppLatestL2TransactionsDocument,
    "\n  query RgbppTransaction($txidOrTxHash: String!) {\n    rgbppTransaction(txidOrTxHash: $txidOrTxHash) {\n      ckbTxHash\n      btcTxid\n      leapDirection\n    }\n  }\n": types.RgbppTransactionDocument,
    "\n  query BtcTx($txid: String!) {\n    btcTransaction(txid: $txid) {\n      txid\n      blockHeight\n      blockHash\n      size\n      fee\n      feeRate\n      confirmed\n      confirmations\n      vin {\n        txid\n        vout\n        isCoinbase\n        prevout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        value\n        address {\n          address\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n": types.BtcTxDocument,
    "\n  query CkbTx($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      isCellbase\n      blockNumber\n      hash\n      fee\n      feeRate\n      outputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      inputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n        hash\n      }\n    }\n  }\n": types.CkbTxDocument,
    "\n  query BtcTransactionByTxId($txid: String!) {\n    btcTransaction(txid: $txid) {\n      txid\n      fee\n      feeRate\n      confirmations\n      transactionTime\n      vin {\n        txid\n        vout\n        isCoinbase\n        prevout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        value\n        address {\n          address\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n": types.BtcTransactionByTxIdDocument,
    "\n  query BtcRgbppTransactionByTxId($txid: String!) {\n    btcTransaction(txid: $txid) {\n      rgbppTransaction {\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          inputs {\n            txHash\n            index\n            capacity\n            cellType\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n    }\n  }\n": types.BtcRgbppTransactionByTxIdDocument,
    "\n  query CkbTransactionByHash($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      hash\n      isCellbase\n      blockNumber\n      fee\n      size\n      feeRate\n      confirmations\n      inputs {\n        cellType\n        status {\n          consumed\n          txHash\n          index\n        }\n        txHash\n        index\n        capacity\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      outputs {\n        txHash\n        cellType\n        index\n        capacity\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n      }\n    }\n  }\n": types.CkbTransactionByHashDocument,
    "\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      ": types.RgbppStatisticDocument,
    "\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n": types.RgbppLatestTransactionsDocument,
    "\n          query CkbAndBtcChainInfo {\n            ckbChainInfo {\n              tipBlockNumber\n              transactionsCountIn24Hours\n            }\n            btcChainInfo {\n              tipBlockHeight\n              transactionsCountIn24Hours\n            }\n          }\n        ": types.CkbAndBtcChainInfoDocument,
    "\n          query Search($keyword: String!) {\n            search(query: $keyword) {\n              query\n              btcBlock\n              btcTransaction\n              btcAddress\n              ckbBlock\n              ckbTransaction\n              ckbAddress\n              rgbppCoin\n            }\n          }\n        ": types.SearchDocument,
    "\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n": types.BtcAndCkbChainInfoDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcAddressBase($address: String!) {\n    btcAddress(address: $address) {\n      address\n      satoshi\n      pendingSatoshi\n      transactionsCount\n    }\n  }\n"): (typeof documents)["\n  query BtcAddressBase($address: String!) {\n    btcAddress(address: $address) {\n      address\n      satoshi\n      pendingSatoshi\n      transactionsCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbAddressBase($address: String!) {\n    ckbAddress(address: $address) {\n      address\n      shannon\n      balance {\n        total\n        available\n        occupied\n      }\n      transactionsCount\n    }\n  }\n"): (typeof documents)["\n  query CkbAddressBase($address: String!) {\n    ckbAddress(address: $address) {\n      address\n      shannon\n      balance {\n        total\n        available\n        occupied\n      }\n      transactionsCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcTransactionByAddress($address: String!, $afterTxid: String) {\n    btcAddress(address: $address) {\n      transactions(afterTxid: $afterTxid) {\n        txid\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcTransactionByAddress($address: String!, $afterTxid: String) {\n    btcAddress(address: $address) {\n      transactions(afterTxid: $afterTxid) {\n        txid\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbTransactionByAddress($address: String!, $page: Int!, $pageSize: Int!) {\n    ckbAddress(address: $address) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        hash\n      }\n    }\n  }\n"): (typeof documents)["\n  query CkbTransactionByAddress($address: String!, $page: Int!, $pageSize: Int!) {\n    ckbAddress(address: $address) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        hash\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppCoin($typeHash: String!) {\n    rgbppCoin(typeHash: $typeHash) {\n      name\n      symbol\n      icon\n    }\n  }\n"): (typeof documents)["\n  query RgbppCoin($typeHash: String!) {\n    rgbppCoin(typeHash: $typeHash) {\n      name\n      symbol\n      icon\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppCoins($page: Int!, $pageSize: Int!) {\n    rgbppCoins(page: $page, pageSize: $pageSize) {\n      total\n      pageSize\n      coins {\n        icon\n        name\n        symbol\n        l1HoldersCount: holdersCount(layer: L1)\n        l2HoldersCount: holdersCount(layer: L2)\n        h24CkbTransactionsCount\n        totalAmount\n        deployedAt\n        decimal\n        typeHash\n      }\n    }\n  }\n"): (typeof documents)["\n  query RgbppCoins($page: Int!, $pageSize: Int!) {\n    rgbppCoins(page: $page, pageSize: $pageSize) {\n      total\n      pageSize\n      coins {\n        icon\n        name\n        symbol\n        l1HoldersCount: holdersCount(layer: L1)\n        l2HoldersCount: holdersCount(layer: L2)\n        h24CkbTransactionsCount\n        totalAmount\n        deployedAt\n        decimal\n        typeHash\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcBlock($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      id\n      height\n      version\n      timestamp\n      transactionsCount\n      confirmations\n      size\n      weight\n      bits\n      difficulty\n      totalFee\n      miner {\n        address\n        satoshi\n        pendingSatoshi\n        transactionsCount\n      }\n      feeRateRange {\n        min\n        max\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcBlock($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      id\n      height\n      version\n      timestamp\n      transactionsCount\n      confirmations\n      size\n      weight\n      bits\n      difficulty\n      totalFee\n      miner {\n        address\n        satoshi\n        pendingSatoshi\n        transactionsCount\n      }\n      feeRateRange {\n        min\n        max\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcBlockTransaction($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      timestamp\n      transactions {\n        txid\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcBlockTransaction($hashOrHeight: String!) {\n    btcBlock(hashOrHeight: $hashOrHeight) {\n      timestamp\n      transactions {\n        txid\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbBlock($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      version\n      hash\n      number\n      timestamp\n      transactionsCount\n      totalFee\n      miner {\n        address\n        shannon\n        transactionsCount\n      }\n      reward\n      size\n      confirmations\n    }\n  }\n"): (typeof documents)["\n  query CkbBlock($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      version\n      hash\n      number\n      timestamp\n      transactionsCount\n      totalFee\n      miner {\n        address\n        shannon\n        transactionsCount\n      }\n      reward\n      size\n      confirmations\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbBlockTransactions($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      timestamp\n      transactions {\n        hash\n      }\n    }\n  }\n"): (typeof documents)["\n  query CkbBlockTransactions($hashOrHeight: String!) {\n    ckbBlock(heightOrHash: $hashOrHeight) {\n      timestamp\n      transactions {\n        hash\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query BtcChainInfo {\n        btcChainInfo {\n          tipBlockHeight\n          tipBlockHash\n          difficulty\n          transactionsCountIn24Hours\n          fees {\n            fastest\n            halfHour\n            hour\n            economy\n            minimum\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL1TransactionsCount\n          holdersCount(layer: L1)\n        }\n      }\n    "): (typeof documents)["\n      query BtcChainInfo {\n        btcChainInfo {\n          tipBlockHeight\n          tipBlockHash\n          difficulty\n          transactionsCountIn24Hours\n          fees {\n            fastest\n            halfHour\n            hour\n            economy\n            minimum\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL1TransactionsCount\n          holdersCount(layer: L1)\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppLatestL1Transactions($limit: Int!) {\n    rgbppLatestL1Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"): (typeof documents)["\n  query RgbppLatestL1Transactions($limit: Int!) {\n    rgbppLatestL1Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query CkbChainInfo {\n        ckbChainInfo {\n          tipBlockNumber\n          fees {\n            fast\n            slow\n            average\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL2TransactionsCount\n          holdersCount(layer: L2)\n        }\n      }\n    "): (typeof documents)["\n      query CkbChainInfo {\n        ckbChainInfo {\n          tipBlockNumber\n          fees {\n            fast\n            slow\n            average\n          }\n        }\n        rgbppStatistic {\n          latest24HoursL2TransactionsCount\n          holdersCount(layer: L2)\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppLatestL2Transactions($limit: Int!) {\n    rgbppLatestL2Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        leapDirection\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"): (typeof documents)["\n  query RgbppLatestL2Transactions($limit: Int!) {\n    rgbppLatestL2Transactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        leapDirection\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppTransaction($txidOrTxHash: String!) {\n    rgbppTransaction(txidOrTxHash: $txidOrTxHash) {\n      ckbTxHash\n      btcTxid\n      leapDirection\n    }\n  }\n"): (typeof documents)["\n  query RgbppTransaction($txidOrTxHash: String!) {\n    rgbppTransaction(txidOrTxHash: $txidOrTxHash) {\n      ckbTxHash\n      btcTxid\n      leapDirection\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcTx($txid: String!) {\n    btcTransaction(txid: $txid) {\n      txid\n      blockHeight\n      blockHash\n      size\n      fee\n      feeRate\n      confirmed\n      confirmations\n      vin {\n        txid\n        vout\n        isCoinbase\n        prevout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        value\n        address {\n          address\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcTx($txid: String!) {\n    btcTransaction(txid: $txid) {\n      txid\n      blockHeight\n      blockHash\n      size\n      fee\n      feeRate\n      confirmed\n      confirmations\n      vin {\n        txid\n        vout\n        isCoinbase\n        prevout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        value\n        address {\n          address\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbTx($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      isCellbase\n      blockNumber\n      hash\n      fee\n      feeRate\n      outputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      inputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n        hash\n      }\n    }\n  }\n"): (typeof documents)["\n  query CkbTx($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      isCellbase\n      blockNumber\n      hash\n      fee\n      feeRate\n      outputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      inputs {\n        txHash\n        index\n        capacity\n        cellType\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n        hash\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcTransactionByTxId($txid: String!) {\n    btcTransaction(txid: $txid) {\n      txid\n      fee\n      feeRate\n      confirmations\n      transactionTime\n      vin {\n        txid\n        vout\n        isCoinbase\n        prevout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        value\n        address {\n          address\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcTransactionByTxId($txid: String!) {\n    btcTransaction(txid: $txid) {\n      txid\n      fee\n      feeRate\n      confirmations\n      transactionTime\n      vin {\n        txid\n        vout\n        isCoinbase\n        prevout {\n          txid\n          vout\n          value\n          address {\n            address\n          }\n          status {\n            spent\n            txid\n            vin\n          }\n        }\n      }\n      vout {\n        txid\n        vout\n        value\n        address {\n          address\n        }\n        status {\n          spent\n          txid\n          vin\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcRgbppTransactionByTxId($txid: String!) {\n    btcTransaction(txid: $txid) {\n      rgbppTransaction {\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          inputs {\n            txHash\n            index\n            capacity\n            cellType\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query BtcRgbppTransactionByTxId($txid: String!) {\n    btcTransaction(txid: $txid) {\n      rgbppTransaction {\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          inputs {\n            txHash\n            index\n            capacity\n            cellType\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CkbTransactionByHash($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      hash\n      isCellbase\n      blockNumber\n      fee\n      size\n      feeRate\n      confirmations\n      inputs {\n        cellType\n        status {\n          consumed\n          txHash\n          index\n        }\n        txHash\n        index\n        capacity\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      outputs {\n        txHash\n        cellType\n        index\n        capacity\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n      }\n    }\n  }\n"): (typeof documents)["\n  query CkbTransactionByHash($hash: String!) {\n    ckbTransaction(txHash: $hash) {\n      hash\n      isCellbase\n      blockNumber\n      fee\n      size\n      feeRate\n      confirmations\n      inputs {\n        cellType\n        status {\n          consumed\n          txHash\n          index\n        }\n        txHash\n        index\n        capacity\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n      }\n      outputs {\n        txHash\n        cellType\n        index\n        capacity\n        type {\n          codeHash\n          hashType\n          args\n        }\n        lock {\n          codeHash\n          hashType\n          args\n        }\n        xudtInfo {\n          symbol\n          amount\n          decimal\n          typeHash\n        }\n        status {\n          consumed\n          txHash\n          index\n        }\n      }\n      block {\n        timestamp\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      "): (typeof documents)["\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"): (typeof documents)["\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query CkbAndBtcChainInfo {\n            ckbChainInfo {\n              tipBlockNumber\n              transactionsCountIn24Hours\n            }\n            btcChainInfo {\n              tipBlockHeight\n              transactionsCountIn24Hours\n            }\n          }\n        "): (typeof documents)["\n          query CkbAndBtcChainInfo {\n            ckbChainInfo {\n              tipBlockNumber\n              transactionsCountIn24Hours\n            }\n            btcChainInfo {\n              tipBlockHeight\n              transactionsCountIn24Hours\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Search($keyword: String!) {\n            search(query: $keyword) {\n              query\n              btcBlock\n              btcTransaction\n              btcAddress\n              ckbBlock\n              ckbTransaction\n              ckbAddress\n              rgbppCoin\n            }\n          }\n        "): (typeof documents)["\n          query Search($keyword: String!) {\n            search(query: $keyword) {\n              query\n              btcBlock\n              btcTransaction\n              btcAddress\n              ckbBlock\n              ckbTransaction\n              ckbAddress\n              rgbppCoin\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n"): (typeof documents)["\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;

================================================
File: frontend/src/gql/graphql.ts
================================================
/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** `Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch. */
  Timestamp: { input: any; output: any; }
};

/** Bitcoin Address */
export type BitcoinAddress = {
  __typename?: 'BitcoinAddress';
  address: Scalars['String']['output'];
  pendingSatoshi: Scalars['Float']['output'];
  rgbppAddress: RgbppAddress;
  satoshi: Scalars['Float']['output'];
  transactions?: Maybe<Array<BitcoinTransaction>>;
  transactionsCount?: Maybe<Scalars['Float']['output']>;
};


/** Bitcoin Address */
export type BitcoinAddressTransactionsArgs = {
  afterTxid?: InputMaybe<Scalars['String']['input']>;
};

/** Bitcoin Block */
export type BitcoinBlock = {
  __typename?: 'BitcoinBlock';
  bits: Scalars['Float']['output'];
  confirmations?: Maybe<Scalars['Float']['output']>;
  difficulty: Scalars['Float']['output'];
  feeRateRange?: Maybe<FeeRateRange>;
  height: Scalars['Float']['output'];
  id: Scalars['String']['output'];
  miner?: Maybe<BitcoinAddress>;
  reward?: Maybe<Scalars['Float']['output']>;
  size: Scalars['Float']['output'];
  timestamp: Scalars['Timestamp']['output'];
  totalFee?: Maybe<Scalars['Float']['output']>;
  transactions?: Maybe<Array<BitcoinTransaction>>;
  transactionsCount: Scalars['Float']['output'];
  version: Scalars['Int']['output'];
  weight: Scalars['Float']['output'];
};


/** Bitcoin Block */
export type BitcoinBlockTransactionsArgs = {
  startIndex?: InputMaybe<Scalars['Float']['input']>;
};

/** Bitcoin ChainInfo */
export type BitcoinChainInfo = {
  __typename?: 'BitcoinChainInfo';
  difficulty: Scalars['Float']['output'];
  fees: BitcoinFees;
  tipBlockHash: Scalars['String']['output'];
  tipBlockHeight: Scalars['Float']['output'];
  transactionsCountIn24Hours: Scalars['Float']['output'];
};

/** Bitcoin Fees */
export type BitcoinFees = {
  __typename?: 'BitcoinFees';
  economy: Scalars['Float']['output'];
  fastest: Scalars['Float']['output'];
  halfHour: Scalars['Float']['output'];
  hour: Scalars['Float']['output'];
  minimum: Scalars['Float']['output'];
};

/** Bitcoin Input */
export type BitcoinInput = {
  __typename?: 'BitcoinInput';
  isCoinbase: Scalars['Boolean']['output'];
  prevout?: Maybe<BitcoinOutput>;
  scriptsig: Scalars['String']['output'];
  scriptsigAsm: Scalars['String']['output'];
  sequence: Scalars['Float']['output'];
  txid: Scalars['String']['output'];
  vout: Scalars['Float']['output'];
};

/** Bitcoin Output */
export type BitcoinOutput = {
  __typename?: 'BitcoinOutput';
  address?: Maybe<BitcoinAddress>;
  scriptpubkey: Scalars['String']['output'];
  scriptpubkeyAddress?: Maybe<Scalars['String']['output']>;
  scriptpubkeyAsm: Scalars['String']['output'];
  scriptpubkeyType: Scalars['String']['output'];
  status?: Maybe<BitcoinOutputStatus>;
  txid: Scalars['String']['output'];
  value: Scalars['Float']['output'];
  vout: Scalars['Float']['output'];
};

/** Bitcoin Output Spend Status */
export type BitcoinOutputStatus = {
  __typename?: 'BitcoinOutputStatus';
  spent: Scalars['Boolean']['output'];
  txid?: Maybe<Scalars['String']['output']>;
  vin?: Maybe<Scalars['Float']['output']>;
};

/** Bitcoin Transaction */
export type BitcoinTransaction = {
  __typename?: 'BitcoinTransaction';
  block?: Maybe<BitcoinBlock>;
  blockHash?: Maybe<Scalars['String']['output']>;
  blockHeight?: Maybe<Scalars['Float']['output']>;
  blockTime?: Maybe<Scalars['Timestamp']['output']>;
  confirmations: Scalars['Float']['output'];
  confirmed: Scalars['Boolean']['output'];
  fee: Scalars['Float']['output'];
  feeRate: Scalars['Float']['output'];
  locktime: Scalars['Float']['output'];
  rgbppTransaction?: Maybe<RgbppTransaction>;
  size: Scalars['Float']['output'];
  transactionTime?: Maybe<Scalars['Timestamp']['output']>;
  txid: Scalars['String']['output'];
  version: Scalars['Int']['output'];
  vin?: Maybe<Array<BitcoinInput>>;
  vout: Array<BitcoinOutput>;
  weight: Scalars['Float']['output'];
};

export enum CacheControlScope {
  Private = 'PRIVATE',
  Public = 'PUBLIC'
}

/** Cell type (XUDT, SUDT, Dobs, mNFT) */
export enum CellType {
  Dob = 'DOB',
  Mnft = 'MNFT',
  Sudt = 'SUDT',
  Xudt = 'XUDT'
}

/** CKB Address */
export type CkbAddress = {
  __typename?: 'CkbAddress';
  address: Scalars['String']['output'];
  balance?: Maybe<CkbAddressBalance>;
  shannon?: Maybe<Scalars['Float']['output']>;
  transactions?: Maybe<Array<CkbTransaction>>;
  transactionsCount?: Maybe<Scalars['Float']['output']>;
};


/** CKB Address */
export type CkbAddressTransactionsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** CKB Address Balance */
export type CkbAddressBalance = {
  __typename?: 'CkbAddressBalance';
  available: Scalars['String']['output'];
  occupied: Scalars['String']['output'];
  total: Scalars['String']['output'];
};

/** CKB Block */
export type CkbBlock = {
  __typename?: 'CkbBlock';
  confirmations: Scalars['Float']['output'];
  hash: Scalars['String']['output'];
  miner?: Maybe<CkbAddress>;
  number: Scalars['Int']['output'];
  reward?: Maybe<Scalars['Float']['output']>;
  size: Scalars['Float']['output'];
  timestamp: Scalars['Timestamp']['output'];
  totalFee?: Maybe<Scalars['Float']['output']>;
  transactions?: Maybe<Array<CkbTransaction>>;
  transactionsCount: Scalars['Int']['output'];
  version: Scalars['Int']['output'];
};

/** CKB Cell */
export type CkbCell = {
  __typename?: 'CkbCell';
  capacity: Scalars['Float']['output'];
  cellType?: Maybe<CellType>;
  index: Scalars['Int']['output'];
  lock: CkbScript;
  status?: Maybe<CkbCellStatus>;
  txHash: Scalars['String']['output'];
  type?: Maybe<CkbScript>;
  xudtInfo?: Maybe<CkbXudtInfo>;
};

/** CKB Cell Status */
export type CkbCellStatus = {
  __typename?: 'CkbCellStatus';
  consumed: Scalars['Boolean']['output'];
  index?: Maybe<Scalars['Float']['output']>;
  txHash?: Maybe<Scalars['String']['output']>;
};

/** CKB ChainInfo */
export type CkbChainInfo = {
  __typename?: 'CkbChainInfo';
  fees: CkbFees;
  tipBlockNumber: Scalars['Float']['output'];
  transactionsCountIn24Hours: Scalars['Float']['output'];
};

/** CKB Fees */
export type CkbFees = {
  __typename?: 'CkbFees';
  average: Scalars['Float']['output'];
  fast: Scalars['Float']['output'];
  slow: Scalars['Float']['output'];
};

/** CKB Script */
export type CkbScript = {
  __typename?: 'CkbScript';
  args: Scalars['String']['output'];
  codeHash: Scalars['String']['output'];
  hashType: Scalars['String']['output'];
};

/** CKB Script */
export type CkbScriptInput = {
  args: Scalars['String']['input'];
  codeHash: Scalars['String']['input'];
  hashType: Scalars['String']['input'];
};

/** Search key for CKB transactions */
export type CkbSearchKeyInput = {
  script: CkbScriptInput;
  scriptType: Scalars['String']['input'];
};

/** CKB Transaction */
export type CkbTransaction = {
  __typename?: 'CkbTransaction';
  block?: Maybe<CkbBlock>;
  blockNumber: Scalars['Float']['output'];
  confirmations: Scalars['Float']['output'];
  confirmed: Scalars['Boolean']['output'];
  fee?: Maybe<Scalars['Float']['output']>;
  feeRate?: Maybe<Scalars['Float']['output']>;
  hash: Scalars['String']['output'];
  inputs?: Maybe<Array<CkbCell>>;
  isCellbase: Scalars['Boolean']['output'];
  outputs: Array<CkbCell>;
  size: Scalars['Float']['output'];
};

/** CKB XUDT Info */
export type CkbXudtInfo = {
  __typename?: 'CkbXUDTInfo';
  amount: Scalars['String']['output'];
  decimal: Scalars['Int']['output'];
  symbol: Scalars['String']['output'];
  typeHash: Scalars['String']['output'];
};

/** Fee Rate Range */
export type FeeRateRange = {
  __typename?: 'FeeRateRange';
  max: Scalars['Float']['output'];
  min: Scalars['Float']['output'];
};

export enum Layer {
  L1 = 'L1',
  L2 = 'L2'
}

export enum LeapDirection {
  LeapIn = 'LeapIn',
  LeapOut = 'LeapOut',
  Within = 'Within'
}

export enum OrderType {
  Asc = 'Asc',
  Desc = 'Desc'
}

export type Query = {
  __typename?: 'Query';
  btcAddress?: Maybe<BitcoinAddress>;
  btcBlock?: Maybe<BitcoinBlock>;
  btcChainInfo: BitcoinChainInfo;
  btcTransaction?: Maybe<BitcoinTransaction>;
  ckbAddress?: Maybe<CkbAddress>;
  ckbBlock?: Maybe<CkbBlock>;
  ckbChainInfo: CkbChainInfo;
  ckbTransaction?: Maybe<CkbTransaction>;
  ckbTransactions: Array<CkbTransaction>;
  rgbppAddress?: Maybe<RgbppAddress>;
  rgbppCoin?: Maybe<RgbppCoin>;
  rgbppCoins: RgbppCoinList;
  rgbppLatestL1Transactions: RgbppLatestTransactionList;
  rgbppLatestL2Transactions: RgbppLatestTransactionList;
  rgbppLatestTransactions: RgbppLatestTransactionList;
  rgbppStatistic: RgbppStatistic;
  rgbppTransaction?: Maybe<RgbppTransaction>;
  search: SearchResult;
};


export type QueryBtcAddressArgs = {
  address: Scalars['String']['input'];
};


export type QueryBtcBlockArgs = {
  hashOrHeight: Scalars['String']['input'];
};


export type QueryBtcTransactionArgs = {
  txid: Scalars['String']['input'];
};


export type QueryCkbAddressArgs = {
  address: Scalars['String']['input'];
};


export type QueryCkbBlockArgs = {
  heightOrHash: Scalars['String']['input'];
};


export type QueryCkbTransactionArgs = {
  txHash: Scalars['String']['input'];
};


export type QueryCkbTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  order?: InputMaybe<OrderType>;
  scriptKey?: InputMaybe<CkbSearchKeyInput>;
  types?: InputMaybe<Array<CellType>>;
};


export type QueryRgbppAddressArgs = {
  address: Scalars['String']['input'];
};


export type QueryRgbppCoinArgs = {
  typeHash: Scalars['String']['input'];
};


export type QueryRgbppCoinsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<TransactionListSortType>;
};


export type QueryRgbppLatestL1TransactionsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryRgbppLatestL2TransactionsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryRgbppLatestTransactionsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryRgbppTransactionArgs = {
  txidOrTxHash: Scalars['String']['input'];
};


export type QuerySearchArgs = {
  query: Scalars['String']['input'];
};

/** Rgbpp Address */
export type RgbppAddress = {
  __typename?: 'RgbppAddress';
  address: Scalars['String']['output'];
  assets: Array<RgbppAsset>;
  balances: Array<CkbXudtInfo>;
  utxosCount: Scalars['Float']['output'];
};

/** Rgbpp Asset */
export type RgbppAsset = {
  __typename?: 'RgbppAsset';
  cell: CkbCell;
  owner: Scalars['String']['output'];
  utxo?: Maybe<BitcoinOutput>;
};

/** RGB++ Coin */
export type RgbppCoin = {
  __typename?: 'RgbppCoin';
  amount: Scalars['String']['output'];
  decimal: Scalars['Float']['output'];
  deployedAt: Scalars['Timestamp']['output'];
  description?: Maybe<Scalars['String']['output']>;
  h24CkbTransactionsCount: Scalars['Int']['output'];
  holders?: Maybe<Array<RgbppHolder>>;
  holdersCount?: Maybe<Scalars['Float']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  issuer: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  symbol: Scalars['String']['output'];
  totalAmount: Scalars['Float']['output'];
  transactions?: Maybe<Array<RgbppTransaction>>;
  transactionsCount?: Maybe<Scalars['Float']['output']>;
  typeHash?: Maybe<Scalars['String']['output']>;
  typeScript?: Maybe<CkbScript>;
};


/** RGB++ Coin */
export type RgbppCoinAmountArgs = {
  layer?: InputMaybe<Layer>;
};


/** RGB++ Coin */
export type RgbppCoinHoldersArgs = {
  layer?: InputMaybe<Layer>;
  order?: InputMaybe<OrderType>;
  page?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


/** RGB++ Coin */
export type RgbppCoinHoldersCountArgs = {
  layer?: InputMaybe<Layer>;
};


/** RGB++ Coin */
export type RgbppCoinTransactionsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** RGB++ Coin List */
export type RgbppCoinList = {
  __typename?: 'RgbppCoinList';
  coins: Array<RgbppCoin>;
  pageSize: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

/** RGB++ Holder */
export type RgbppHolder = {
  __typename?: 'RgbppHolder';
  address: Scalars['String']['output'];
  assetAmount?: Maybe<Scalars['String']['output']>;
  assetCount: Scalars['Int']['output'];
};

/** RGB++ latest transaction list */
export type RgbppLatestTransactionList = {
  __typename?: 'RgbppLatestTransactionList';
  pageSize: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
  txs: Array<RgbppTransaction>;
};

/** RGB++ Statistic */
export type RgbppStatistic = {
  __typename?: 'RgbppStatistic';
  holders: Array<RgbppHolder>;
  holdersCount: Scalars['Float']['output'];
  latest24HoursL1TransactionsCount?: Maybe<Scalars['Float']['output']>;
  latest24HoursL2TransactionsCount?: Maybe<Scalars['Float']['output']>;
};


/** RGB++ Statistic */
export type RgbppStatisticHoldersArgs = {
  layer: Layer;
  order?: InputMaybe<OrderType>;
  page?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


/** RGB++ Statistic */
export type RgbppStatisticHoldersCountArgs = {
  layer: Layer;
};


/** RGB++ Statistic */
export type RgbppStatisticLatest24HoursL1TransactionsCountArgs = {
  leapDirection?: InputMaybe<LeapDirection>;
};

/** RGB++ Transaction */
export type RgbppTransaction = {
  __typename?: 'RgbppTransaction';
  blockNumber: Scalars['Int']['output'];
  blockTime?: Maybe<Scalars['Timestamp']['output']>;
  btcTransaction?: Maybe<BitcoinTransaction>;
  btcTxid?: Maybe<Scalars['String']['output']>;
  ckbTransaction?: Maybe<CkbTransaction>;
  ckbTxHash: Scalars['String']['output'];
  leapDirection?: Maybe<LeapDirection>;
  timestamp: Scalars['Timestamp']['output'];
};

/** Search Result (including address/tx/block) */
export type SearchResult = {
  __typename?: 'SearchResult';
  btcAddress?: Maybe<Scalars['String']['output']>;
  btcBlock?: Maybe<Scalars['String']['output']>;
  btcTransaction?: Maybe<Scalars['String']['output']>;
  ckbAddress?: Maybe<Scalars['String']['output']>;
  ckbBlock?: Maybe<Scalars['String']['output']>;
  ckbTransaction?: Maybe<Scalars['String']['output']>;
  query: Scalars['String']['output'];
  rgbppCoin?: Maybe<Scalars['String']['output']>;
};

export enum TransactionListSortType {
  AddressCountAsc = 'AddressCountAsc',
  AddressCountDesc = 'AddressCountDesc',
  CreatedTimeAsc = 'CreatedTimeAsc',
  CreatedTimeDesc = 'CreatedTimeDesc',
  TransactionsAsc = 'TransactionsAsc',
  TransactionsDesc = 'TransactionsDesc'
}

export type BtcAddressBaseQueryVariables = Exact<{
  address: Scalars['String']['input'];
}>;


export type BtcAddressBaseQuery = { __typename?: 'Query', btcAddress?: { __typename?: 'BitcoinAddress', address: string, satoshi: number, pendingSatoshi: number, transactionsCount?: number | null } | null };

export type CkbAddressBaseQueryVariables = Exact<{
  address: Scalars['String']['input'];
}>;


export type CkbAddressBaseQuery = { __typename?: 'Query', ckbAddress?: { __typename?: 'CkbAddress', address: string, shannon?: number | null, transactionsCount?: number | null, balance?: { __typename?: 'CkbAddressBalance', total: string, available: string, occupied: string } | null } | null };

export type BtcTransactionByAddressQueryVariables = Exact<{
  address: Scalars['String']['input'];
  afterTxid?: InputMaybe<Scalars['String']['input']>;
}>;


export type BtcTransactionByAddressQuery = { __typename?: 'Query', btcAddress?: { __typename?: 'BitcoinAddress', transactions?: Array<{ __typename?: 'BitcoinTransaction', txid: string }> | null } | null };

export type CkbTransactionByAddressQueryVariables = Exact<{
  address: Scalars['String']['input'];
  page: Scalars['Int']['input'];
  pageSize: Scalars['Int']['input'];
}>;


export type CkbTransactionByAddressQuery = { __typename?: 'Query', ckbAddress?: { __typename?: 'CkbAddress', transactionsCount?: number | null, transactions?: Array<{ __typename?: 'CkbTransaction', hash: string }> | null } | null };

export type RgbppCoinQueryVariables = Exact<{
  typeHash: Scalars['String']['input'];
}>;


export type RgbppCoinQuery = { __typename?: 'Query', rgbppCoin?: { __typename?: 'RgbppCoin', name?: string | null, symbol: string, icon?: string | null } | null };

export type RgbppCoinTransactionsByTypeHashQueryVariables = Exact<{
  typeHash: Scalars['String']['input'];
  page: Scalars['Int']['input'];
  pageSize: Scalars['Int']['input'];
}>;


export type RgbppCoinTransactionsByTypeHashQuery = { __typename?: 'Query', rgbppCoin?: { __typename?: 'RgbppCoin', transactionsCount?: number | null, transactions?: Array<{ __typename?: 'RgbppTransaction', ckbTxHash: string, btcTxid?: string | null, leapDirection?: LeapDirection | null, blockNumber: number, timestamp: any, ckbTransaction?: { __typename?: 'CkbTransaction', inputs?: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null, type?: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string } | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number, typeHash: string } | null }> | null, outputs: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null, type?: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string } | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number, typeHash: string } | null }> } | null }> | null } | null };

export type RgbppCoinsQueryVariables = Exact<{
  page: Scalars['Int']['input'];
  pageSize: Scalars['Int']['input'];
}>;


export type RgbppCoinsQuery = { __typename?: 'Query', rgbppCoins: { __typename?: 'RgbppCoinList', total: number, pageSize: number, coins: Array<{ __typename?: 'RgbppCoin', icon?: string | null, name?: string | null, symbol: string, h24CkbTransactionsCount: number, totalAmount: number, deployedAt: any, decimal: number, typeHash?: string | null, l1HoldersCount?: number | null, l2HoldersCount?: number | null }> } };

export type BtcBlockQueryVariables = Exact<{
  hashOrHeight: Scalars['String']['input'];
}>;


export type BtcBlockQuery = { __typename?: 'Query', btcBlock?: { __typename?: 'BitcoinBlock', id: string, height: number, version: number, timestamp: any, transactionsCount: number, confirmations?: number | null, size: number, weight: number, bits: number, difficulty: number, totalFee?: number | null, miner?: { __typename?: 'BitcoinAddress', address: string, satoshi: number, pendingSatoshi: number, transactionsCount?: number | null } | null, feeRateRange?: { __typename?: 'FeeRateRange', min: number, max: number } | null } | null };

export type BtcBlockTransactionQueryVariables = Exact<{
  hashOrHeight: Scalars['String']['input'];
}>;


export type BtcBlockTransactionQuery = { __typename?: 'Query', btcBlock?: { __typename?: 'BitcoinBlock', timestamp: any, transactions?: Array<{ __typename?: 'BitcoinTransaction', txid: string }> | null } | null };

export type CkbBlockQueryVariables = Exact<{
  hashOrHeight: Scalars['String']['input'];
}>;


export type CkbBlockQuery = { __typename?: 'Query', ckbBlock?: { __typename?: 'CkbBlock', version: number, hash: string, number: number, timestamp: any, transactionsCount: number, totalFee?: number | null, reward?: number | null, size: number, confirmations: number, miner?: { __typename?: 'CkbAddress', address: string, shannon?: number | null, transactionsCount?: number | null } | null } | null };

export type CkbBlockTransactionsQueryVariables = Exact<{
  hashOrHeight: Scalars['String']['input'];
}>;


export type CkbBlockTransactionsQuery = { __typename?: 'Query', ckbBlock?: { __typename?: 'CkbBlock', timestamp: any, transactions?: Array<{ __typename?: 'CkbTransaction', hash: string }> | null } | null };

export type BtcChainInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type BtcChainInfoQuery = { __typename?: 'Query', btcChainInfo: { __typename?: 'BitcoinChainInfo', tipBlockHeight: number, tipBlockHash: string, difficulty: number, transactionsCountIn24Hours: number, fees: { __typename?: 'BitcoinFees', fastest: number, halfHour: number, hour: number, economy: number, minimum: number } }, rgbppStatistic: { __typename?: 'RgbppStatistic', latest24HoursL1TransactionsCount?: number | null, holdersCount: number } };

export type RgbppLatestL1TransactionsQueryVariables = Exact<{
  limit: Scalars['Int']['input'];
}>;


export type RgbppLatestL1TransactionsQuery = { __typename?: 'Query', rgbppLatestL1Transactions: { __typename?: 'RgbppLatestTransactionList', total: number, pageSize: number, txs: Array<{ __typename?: 'RgbppTransaction', ckbTxHash: string, btcTxid?: string | null, leapDirection?: LeapDirection | null, blockNumber: number, timestamp: any, ckbTransaction?: { __typename?: 'CkbTransaction', outputs: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, cellType?: CellType | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number } | null, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null }> } | null }> } };

export type CkbChainInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type CkbChainInfoQuery = { __typename?: 'Query', ckbChainInfo: { __typename?: 'CkbChainInfo', tipBlockNumber: number, fees: { __typename?: 'CkbFees', fast: number, slow: number, average: number } }, rgbppStatistic: { __typename?: 'RgbppStatistic', latest24HoursL2TransactionsCount?: number | null, holdersCount: number } };

export type RgbppLatestL2TransactionsQueryVariables = Exact<{
  limit: Scalars['Int']['input'];
}>;


export type RgbppLatestL2TransactionsQuery = { __typename?: 'Query', rgbppLatestL2Transactions: { __typename?: 'RgbppLatestTransactionList', total: number, pageSize: number, txs: Array<{ __typename?: 'RgbppTransaction', ckbTxHash: string, leapDirection?: LeapDirection | null, timestamp: any, ckbTransaction?: { __typename?: 'CkbTransaction', outputs: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, cellType?: CellType | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number } | null, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null }> } | null }> } };

export type RgbppTransactionQueryVariables = Exact<{
  txidOrTxHash: Scalars['String']['input'];
}>;


export type RgbppTransactionQuery = { __typename?: 'Query', rgbppTransaction?: { __typename?: 'RgbppTransaction', ckbTxHash: string, btcTxid?: string | null, leapDirection?: LeapDirection | null } | null };

export type BtcTxQueryVariables = Exact<{
  txid: Scalars['String']['input'];
}>;


export type BtcTxQuery = { __typename?: 'Query', btcTransaction?: { __typename?: 'BitcoinTransaction', txid: string, blockHeight?: number | null, blockHash?: string | null, size: number, fee: number, feeRate: number, confirmed: boolean, confirmations: number, vin?: Array<{ __typename?: 'BitcoinInput', txid: string, vout: number, isCoinbase: boolean, prevout?: { __typename?: 'BitcoinOutput', txid: string, vout: number, value: number, address?: { __typename?: 'BitcoinAddress', address: string } | null, status?: { __typename?: 'BitcoinOutputStatus', spent: boolean, txid?: string | null, vin?: number | null } | null } | null }> | null, vout: Array<{ __typename?: 'BitcoinOutput', txid: string, vout: number, value: number, address?: { __typename?: 'BitcoinAddress', address: string } | null, status?: { __typename?: 'BitcoinOutputStatus', spent: boolean, txid?: string | null, vin?: number | null } | null }> } | null };

export type CkbTxQueryVariables = Exact<{
  hash: Scalars['String']['input'];
}>;


export type CkbTxQuery = { __typename?: 'Query', ckbTransaction?: { __typename?: 'CkbTransaction', isCellbase: boolean, blockNumber: number, hash: string, fee?: number | null, feeRate?: number | null, outputs: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, cellType?: CellType | null, type?: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string } | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number, typeHash: string } | null }>, inputs?: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, cellType?: CellType | null, type?: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string } | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number, typeHash: string } | null, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null }> | null, block?: { __typename?: 'CkbBlock', timestamp: any, hash: string } | null } | null };

export type BtcTransactionByTxIdQueryVariables = Exact<{
  txid: Scalars['String']['input'];
}>;


export type BtcTransactionByTxIdQuery = { __typename?: 'Query', btcTransaction?: { __typename?: 'BitcoinTransaction', txid: string, fee: number, feeRate: number, confirmations: number, transactionTime?: any | null, vin?: Array<{ __typename?: 'BitcoinInput', txid: string, vout: number, isCoinbase: boolean, prevout?: { __typename?: 'BitcoinOutput', txid: string, vout: number, value: number, address?: { __typename?: 'BitcoinAddress', address: string } | null, status?: { __typename?: 'BitcoinOutputStatus', spent: boolean, txid?: string | null, vin?: number | null } | null } | null }> | null, vout: Array<{ __typename?: 'BitcoinOutput', txid: string, vout: number, value: number, address?: { __typename?: 'BitcoinAddress', address: string } | null, status?: { __typename?: 'BitcoinOutputStatus', spent: boolean, txid?: string | null, vin?: number | null } | null }> } | null };

export type BtcRgbppTransactionByTxIdQueryVariables = Exact<{
  txid: Scalars['String']['input'];
}>;


export type BtcRgbppTransactionByTxIdQuery = { __typename?: 'Query', btcTransaction?: { __typename?: 'BitcoinTransaction', rgbppTransaction?: { __typename?: 'RgbppTransaction', ckbTransaction?: { __typename?: 'CkbTransaction', outputs: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, cellType?: CellType | null, type?: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string } | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number, typeHash: string } | null }>, inputs?: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, cellType?: CellType | null, type?: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string } | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number, typeHash: string } | null, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null }> | null } | null } | null } | null };

export type CkbTransactionByHashQueryVariables = Exact<{
  hash: Scalars['String']['input'];
}>;


export type CkbTransactionByHashQuery = { __typename?: 'Query', ckbTransaction?: { __typename?: 'CkbTransaction', hash: string, isCellbase: boolean, blockNumber: number, fee?: number | null, size: number, feeRate?: number | null, confirmations: number, inputs?: Array<{ __typename?: 'CkbCell', cellType?: CellType | null, txHash: string, index: number, capacity: number, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null, type?: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string } | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number, typeHash: string } | null }> | null, outputs: Array<{ __typename?: 'CkbCell', txHash: string, cellType?: CellType | null, index: number, capacity: number, type?: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string } | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number, typeHash: string } | null, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null }>, block?: { __typename?: 'CkbBlock', timestamp: any } | null } | null };

export type RgbppStatisticQueryVariables = Exact<{ [key: string]: never; }>;


export type RgbppStatisticQuery = { __typename?: 'Query', rgbppStatistic: { __typename?: 'RgbppStatistic', latest24HoursL2TransactionsCount?: number | null, l1HoldersCount: number, l2HoldersCount: number, latest24HoursL1TransactionsCountLeapIn?: number | null, latest24HoursL1TransactionsCountLeapOutput?: number | null, latest24HoursL1TransactionsCountLeapWithin?: number | null } };

export type RgbppLatestTransactionsQueryVariables = Exact<{
  limit: Scalars['Int']['input'];
}>;


export type RgbppLatestTransactionsQuery = { __typename?: 'Query', rgbppLatestTransactions: { __typename?: 'RgbppLatestTransactionList', total: number, pageSize: number, txs: Array<{ __typename?: 'RgbppTransaction', ckbTxHash: string, btcTxid?: string | null, leapDirection?: LeapDirection | null, blockNumber: number, timestamp: any, ckbTransaction?: { __typename?: 'CkbTransaction', outputs: Array<{ __typename?: 'CkbCell', txHash: string, index: number, capacity: number, cellType?: CellType | null, lock: { __typename?: 'CkbScript', codeHash: string, hashType: string, args: string }, xudtInfo?: { __typename?: 'CkbXUDTInfo', symbol: string, amount: string, decimal: number } | null, status?: { __typename?: 'CkbCellStatus', consumed: boolean, txHash?: string | null, index?: number | null } | null }> } | null }> } };

export type CkbAndBtcChainInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type CkbAndBtcChainInfoQuery = { __typename?: 'Query', ckbChainInfo: { __typename?: 'CkbChainInfo', tipBlockNumber: number, transactionsCountIn24Hours: number }, btcChainInfo: { __typename?: 'BitcoinChainInfo', tipBlockHeight: number, transactionsCountIn24Hours: number } };

export type SearchQueryVariables = Exact<{
  keyword: Scalars['String']['input'];
}>;


export type SearchQuery = { __typename?: 'Query', search: { __typename?: 'SearchResult', query: string, btcBlock?: string | null, btcTransaction?: string | null, btcAddress?: string | null, ckbBlock?: string | null, ckbTransaction?: string | null, ckbAddress?: string | null, rgbppCoin?: string | null } };

export type BtcAndCkbChainInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type BtcAndCkbChainInfoQuery = { __typename?: 'Query', ckbChainInfo: { __typename?: 'CkbChainInfo', tipBlockNumber: number }, btcChainInfo: { __typename?: 'BitcoinChainInfo', tipBlockHeight: number, transactionsCountIn24Hours: number } };


export const BtcAddressBaseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcAddressBase"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"address"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"btcAddress"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"address"},"value":{"kind":"Variable","name":{"kind":"Name","value":"address"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"satoshi"}},{"kind":"Field","name":{"kind":"Name","value":"pendingSatoshi"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCount"}}]}}]}}]} as unknown as DocumentNode<BtcAddressBaseQuery, BtcAddressBaseQueryVariables>;
export const CkbAddressBaseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CkbAddressBase"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"address"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbAddress"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"address"},"value":{"kind":"Variable","name":{"kind":"Name","value":"address"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"shannon"}},{"kind":"Field","name":{"kind":"Name","value":"balance"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"available"}},{"kind":"Field","name":{"kind":"Name","value":"occupied"}}]}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCount"}}]}}]}}]} as unknown as DocumentNode<CkbAddressBaseQuery, CkbAddressBaseQueryVariables>;
export const BtcTransactionByAddressDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcTransactionByAddress"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"address"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"afterTxid"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"btcAddress"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"address"},"value":{"kind":"Variable","name":{"kind":"Name","value":"address"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"transactions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"afterTxid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"afterTxid"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}}]}}]}}]}}]} as unknown as DocumentNode<BtcTransactionByAddressQuery, BtcTransactionByAddressQueryVariables>;
export const CkbTransactionByAddressDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CkbTransactionByAddress"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"address"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"page"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbAddress"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"address"},"value":{"kind":"Variable","name":{"kind":"Name","value":"address"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"transactionsCount"}},{"kind":"Field","name":{"kind":"Name","value":"transactions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"page"},"value":{"kind":"Variable","name":{"kind":"Name","value":"page"}}},{"kind":"Argument","name":{"kind":"Name","value":"pageSize"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hash"}}]}}]}}]}}]} as unknown as DocumentNode<CkbTransactionByAddressQuery, CkbTransactionByAddressQueryVariables>;
export const RgbppCoinDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RgbppCoin"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"typeHash"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppCoin"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"typeHash"},"value":{"kind":"Variable","name":{"kind":"Name","value":"typeHash"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"icon"}}]}}]}}]} as unknown as DocumentNode<RgbppCoinQuery, RgbppCoinQueryVariables>;
export const RgbppCoinTransactionsByTypeHashDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RgbppCoinTransactionsByTypeHash"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"typeHash"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"page"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppCoin"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"typeHash"},"value":{"kind":"Variable","name":{"kind":"Name","value":"typeHash"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"transactionsCount"}},{"kind":"Field","name":{"kind":"Name","value":"transactions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"page"},"value":{"kind":"Variable","name":{"kind":"Name","value":"page"}}},{"kind":"Argument","name":{"kind":"Name","value":"pageSize"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbTxHash"}},{"kind":"Field","name":{"kind":"Name","value":"btcTxid"}},{"kind":"Field","name":{"kind":"Name","value":"leapDirection"}},{"kind":"Field","name":{"kind":"Name","value":"blockNumber"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"ckbTransaction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"inputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}},{"kind":"Field","name":{"kind":"Name","value":"type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"outputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}},{"kind":"Field","name":{"kind":"Name","value":"type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<RgbppCoinTransactionsByTypeHashQuery, RgbppCoinTransactionsByTypeHashQueryVariables>;
export const RgbppCoinsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RgbppCoins"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"page"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppCoins"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"page"},"value":{"kind":"Variable","name":{"kind":"Name","value":"page"}}},{"kind":"Argument","name":{"kind":"Name","value":"pageSize"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"pageSize"}},{"kind":"Field","name":{"kind":"Name","value":"coins"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"icon"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","alias":{"kind":"Name","value":"l1HoldersCount"},"name":{"kind":"Name","value":"holdersCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"layer"},"value":{"kind":"EnumValue","value":"L1"}}]},{"kind":"Field","alias":{"kind":"Name","value":"l2HoldersCount"},"name":{"kind":"Name","value":"holdersCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"layer"},"value":{"kind":"EnumValue","value":"L2"}}]},{"kind":"Field","name":{"kind":"Name","value":"h24CkbTransactionsCount"}},{"kind":"Field","name":{"kind":"Name","value":"totalAmount"}},{"kind":"Field","name":{"kind":"Name","value":"deployedAt"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}}]}}]}}]} as unknown as DocumentNode<RgbppCoinsQuery, RgbppCoinsQueryVariables>;
export const BtcBlockDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcBlock"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hashOrHeight"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"btcBlock"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"hashOrHeight"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hashOrHeight"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCount"}},{"kind":"Field","name":{"kind":"Name","value":"confirmations"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"weight"}},{"kind":"Field","name":{"kind":"Name","value":"bits"}},{"kind":"Field","name":{"kind":"Name","value":"difficulty"}},{"kind":"Field","name":{"kind":"Name","value":"totalFee"}},{"kind":"Field","name":{"kind":"Name","value":"miner"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"satoshi"}},{"kind":"Field","name":{"kind":"Name","value":"pendingSatoshi"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"feeRateRange"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"min"}},{"kind":"Field","name":{"kind":"Name","value":"max"}}]}}]}}]}}]} as unknown as DocumentNode<BtcBlockQuery, BtcBlockQueryVariables>;
export const BtcBlockTransactionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcBlockTransaction"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hashOrHeight"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"btcBlock"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"hashOrHeight"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hashOrHeight"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"transactions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}}]}}]}}]}}]} as unknown as DocumentNode<BtcBlockTransactionQuery, BtcBlockTransactionQueryVariables>;
export const CkbBlockDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CkbBlock"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hashOrHeight"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbBlock"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"heightOrHash"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hashOrHeight"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"hash"}},{"kind":"Field","name":{"kind":"Name","value":"number"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCount"}},{"kind":"Field","name":{"kind":"Name","value":"totalFee"}},{"kind":"Field","name":{"kind":"Name","value":"miner"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"shannon"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"reward"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"confirmations"}}]}}]}}]} as unknown as DocumentNode<CkbBlockQuery, CkbBlockQueryVariables>;
export const CkbBlockTransactionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CkbBlockTransactions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hashOrHeight"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbBlock"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"heightOrHash"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hashOrHeight"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"transactions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hash"}}]}}]}}]}}]} as unknown as DocumentNode<CkbBlockTransactionsQuery, CkbBlockTransactionsQueryVariables>;
export const BtcChainInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"btcChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tipBlockHeight"}},{"kind":"Field","name":{"kind":"Name","value":"tipBlockHash"}},{"kind":"Field","name":{"kind":"Name","value":"difficulty"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCountIn24Hours"}},{"kind":"Field","name":{"kind":"Name","value":"fees"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fastest"}},{"kind":"Field","name":{"kind":"Name","value":"halfHour"}},{"kind":"Field","name":{"kind":"Name","value":"hour"}},{"kind":"Field","name":{"kind":"Name","value":"economy"}},{"kind":"Field","name":{"kind":"Name","value":"minimum"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"rgbppStatistic"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"latest24HoursL1TransactionsCount"}},{"kind":"Field","name":{"kind":"Name","value":"holdersCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"layer"},"value":{"kind":"EnumValue","value":"L1"}}]}]}}]}}]} as unknown as DocumentNode<BtcChainInfoQuery, BtcChainInfoQueryVariables>;
export const RgbppLatestL1TransactionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RgbppLatestL1Transactions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppLatestL1Transactions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbTxHash"}},{"kind":"Field","name":{"kind":"Name","value":"btcTxid"}},{"kind":"Field","name":{"kind":"Name","value":"leapDirection"}},{"kind":"Field","name":{"kind":"Name","value":"blockNumber"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"ckbTransaction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"outputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"pageSize"}}]}}]}}]} as unknown as DocumentNode<RgbppLatestL1TransactionsQuery, RgbppLatestL1TransactionsQueryVariables>;
export const CkbChainInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CkbChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tipBlockNumber"}},{"kind":"Field","name":{"kind":"Name","value":"fees"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fast"}},{"kind":"Field","name":{"kind":"Name","value":"slow"}},{"kind":"Field","name":{"kind":"Name","value":"average"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"rgbppStatistic"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"latest24HoursL2TransactionsCount"}},{"kind":"Field","name":{"kind":"Name","value":"holdersCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"layer"},"value":{"kind":"EnumValue","value":"L2"}}]}]}}]}}]} as unknown as DocumentNode<CkbChainInfoQuery, CkbChainInfoQueryVariables>;
export const RgbppLatestL2TransactionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RgbppLatestL2Transactions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppLatestL2Transactions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbTxHash"}},{"kind":"Field","name":{"kind":"Name","value":"leapDirection"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"ckbTransaction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"outputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"pageSize"}}]}}]}}]} as unknown as DocumentNode<RgbppLatestL2TransactionsQuery, RgbppLatestL2TransactionsQueryVariables>;
export const RgbppTransactionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RgbppTransaction"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"txidOrTxHash"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppTransaction"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"txidOrTxHash"},"value":{"kind":"Variable","name":{"kind":"Name","value":"txidOrTxHash"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbTxHash"}},{"kind":"Field","name":{"kind":"Name","value":"btcTxid"}},{"kind":"Field","name":{"kind":"Name","value":"leapDirection"}}]}}]}}]} as unknown as DocumentNode<RgbppTransactionQuery, RgbppTransactionQueryVariables>;
export const BtcTxDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcTx"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"txid"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"btcTransaction"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"txid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"txid"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"blockHeight"}},{"kind":"Field","name":{"kind":"Name","value":"blockHash"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"fee"}},{"kind":"Field","name":{"kind":"Name","value":"feeRate"}},{"kind":"Field","name":{"kind":"Name","value":"confirmed"}},{"kind":"Field","name":{"kind":"Name","value":"confirmations"}},{"kind":"Field","name":{"kind":"Name","value":"vin"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vout"}},{"kind":"Field","name":{"kind":"Name","value":"isCoinbase"}},{"kind":"Field","name":{"kind":"Name","value":"prevout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vout"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"address"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"spent"}},{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vin"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"vout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vout"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"address"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"spent"}},{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vin"}}]}}]}}]}}]}}]} as unknown as DocumentNode<BtcTxQuery, BtcTxQueryVariables>;
export const CkbTxDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CkbTx"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hash"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbTransaction"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"txHash"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hash"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"isCellbase"}},{"kind":"Field","name":{"kind":"Name","value":"blockNumber"}},{"kind":"Field","name":{"kind":"Name","value":"hash"}},{"kind":"Field","name":{"kind":"Name","value":"fee"}},{"kind":"Field","name":{"kind":"Name","value":"feeRate"}},{"kind":"Field","name":{"kind":"Name","value":"outputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"inputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"block"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"hash"}}]}}]}}]}}]} as unknown as DocumentNode<CkbTxQuery, CkbTxQueryVariables>;
export const BtcTransactionByTxIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcTransactionByTxId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"txid"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"btcTransaction"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"txid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"txid"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"fee"}},{"kind":"Field","name":{"kind":"Name","value":"feeRate"}},{"kind":"Field","name":{"kind":"Name","value":"confirmations"}},{"kind":"Field","name":{"kind":"Name","value":"transactionTime"}},{"kind":"Field","name":{"kind":"Name","value":"vin"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vout"}},{"kind":"Field","name":{"kind":"Name","value":"isCoinbase"}},{"kind":"Field","name":{"kind":"Name","value":"prevout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vout"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"address"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"spent"}},{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vin"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"vout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vout"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"address"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"spent"}},{"kind":"Field","name":{"kind":"Name","value":"txid"}},{"kind":"Field","name":{"kind":"Name","value":"vin"}}]}}]}}]}}]}}]} as unknown as DocumentNode<BtcTransactionByTxIdQuery, BtcTransactionByTxIdQueryVariables>;
export const BtcRgbppTransactionByTxIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcRgbppTransactionByTxId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"txid"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"btcTransaction"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"txid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"txid"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppTransaction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbTransaction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"outputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"inputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<BtcRgbppTransactionByTxIdQuery, BtcRgbppTransactionByTxIdQueryVariables>;
export const CkbTransactionByHashDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CkbTransactionByHash"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"hash"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbTransaction"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"txHash"},"value":{"kind":"Variable","name":{"kind":"Name","value":"hash"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hash"}},{"kind":"Field","name":{"kind":"Name","value":"isCellbase"}},{"kind":"Field","name":{"kind":"Name","value":"blockNumber"}},{"kind":"Field","name":{"kind":"Name","value":"fee"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"feeRate"}},{"kind":"Field","name":{"kind":"Name","value":"confirmations"}},{"kind":"Field","name":{"kind":"Name","value":"inputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"outputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}},{"kind":"Field","name":{"kind":"Name","value":"typeHash"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"block"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]}}]}}]} as unknown as DocumentNode<CkbTransactionByHashQuery, CkbTransactionByHashQueryVariables>;
export const RgbppStatisticDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RgbppStatistic"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppStatistic"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"l1HoldersCount"},"name":{"kind":"Name","value":"holdersCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"layer"},"value":{"kind":"EnumValue","value":"L1"}}]},{"kind":"Field","alias":{"kind":"Name","value":"l2HoldersCount"},"name":{"kind":"Name","value":"holdersCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"layer"},"value":{"kind":"EnumValue","value":"L2"}}]},{"kind":"Field","name":{"kind":"Name","value":"latest24HoursL2TransactionsCount"}},{"kind":"Field","alias":{"kind":"Name","value":"latest24HoursL1TransactionsCountLeapIn"},"name":{"kind":"Name","value":"latest24HoursL1TransactionsCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"leapDirection"},"value":{"kind":"EnumValue","value":"LeapIn"}}]},{"kind":"Field","alias":{"kind":"Name","value":"latest24HoursL1TransactionsCountLeapOutput"},"name":{"kind":"Name","value":"latest24HoursL1TransactionsCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"leapDirection"},"value":{"kind":"EnumValue","value":"LeapOut"}}]},{"kind":"Field","alias":{"kind":"Name","value":"latest24HoursL1TransactionsCountLeapWithin"},"name":{"kind":"Name","value":"latest24HoursL1TransactionsCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"leapDirection"},"value":{"kind":"EnumValue","value":"Within"}}]}]}}]}}]} as unknown as DocumentNode<RgbppStatisticQuery, RgbppStatisticQueryVariables>;
export const RgbppLatestTransactionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RgbppLatestTransactions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"limit"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rgbppLatestTransactions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"limit"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbTxHash"}},{"kind":"Field","name":{"kind":"Name","value":"btcTxid"}},{"kind":"Field","name":{"kind":"Name","value":"leapDirection"}},{"kind":"Field","name":{"kind":"Name","value":"blockNumber"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}},{"kind":"Field","name":{"kind":"Name","value":"ckbTransaction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"outputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"capacity"}},{"kind":"Field","name":{"kind":"Name","value":"cellType"}},{"kind":"Field","name":{"kind":"Name","value":"lock"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"codeHash"}},{"kind":"Field","name":{"kind":"Name","value":"hashType"}},{"kind":"Field","name":{"kind":"Name","value":"args"}}]}},{"kind":"Field","name":{"kind":"Name","value":"xudtInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"symbol"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"decimal"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"consumed"}},{"kind":"Field","name":{"kind":"Name","value":"txHash"}},{"kind":"Field","name":{"kind":"Name","value":"index"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"pageSize"}}]}}]}}]} as unknown as DocumentNode<RgbppLatestTransactionsQuery, RgbppLatestTransactionsQueryVariables>;
export const CkbAndBtcChainInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CkbAndBtcChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tipBlockNumber"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCountIn24Hours"}}]}},{"kind":"Field","name":{"kind":"Name","value":"btcChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tipBlockHeight"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCountIn24Hours"}}]}}]}}]} as unknown as DocumentNode<CkbAndBtcChainInfoQuery, CkbAndBtcChainInfoQueryVariables>;
export const SearchDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Search"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"keyword"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"search"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"keyword"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"query"}},{"kind":"Field","name":{"kind":"Name","value":"btcBlock"}},{"kind":"Field","name":{"kind":"Name","value":"btcTransaction"}},{"kind":"Field","name":{"kind":"Name","value":"btcAddress"}},{"kind":"Field","name":{"kind":"Name","value":"ckbBlock"}},{"kind":"Field","name":{"kind":"Name","value":"ckbTransaction"}},{"kind":"Field","name":{"kind":"Name","value":"ckbAddress"}},{"kind":"Field","name":{"kind":"Name","value":"rgbppCoin"}}]}}]}}]} as unknown as DocumentNode<SearchQuery, SearchQueryVariables>;
export const BtcAndCkbChainInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BtcAndCkbChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ckbChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tipBlockNumber"}}]}},{"kind":"Field","name":{"kind":"Name","value":"btcChainInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tipBlockHeight"}},{"kind":"Field","name":{"kind":"Name","value":"transactionsCountIn24Hours"}}]}}]}}]} as unknown as DocumentNode<BtcAndCkbChainInfoQuery, BtcAndCkbChainInfoQueryVariables>;

================================================
File: frontend/src/gql/index.ts
================================================
export * from "./fragment-masking";
export * from "./gql";

================================================
File: frontend/src/hooks/useBreakpoints.ts
================================================
import { useMediaQuery } from 'usehooks-ts'

const breakpoints = {
  sm: '40rem',
  md: '48rem',
  lg: '64rem',
  xl: '80rem',
  '2xl': '96rem',
} as const

export type Breakpoint = keyof typeof breakpoints

export function useBreakpoints(breakpoint: Breakpoint) {
  return useMediaQuery(`screen and (min-width: ${breakpoints[breakpoint]})`)
}


================================================
File: frontend/src/hooks/useDetectOverflow.ts
================================================
import { useCallback, useEffect, useRef, useState } from 'react'

export function useDetectOverflow<T extends HTMLDivElement>(): [overflow: boolean, ref: (element: T | null) => void] {
  const [isOverflow, setIsOverflow] = useState(false)
  const resizeObserver = useRef<ResizeObserver | null>(null)
  const ref = useCallback((element: T | null) => {
    if (!element) return
    setIsOverflow(element.offsetWidth !== element.scrollWidth)
    resizeObserver.current?.disconnect()
    resizeObserver.current = new ResizeObserver(() => {
      setIsOverflow(element.offsetWidth !== element.scrollWidth)
    })
    resizeObserver.current?.observe(element)
  }, [])

  useEffect(() => {
    return () => resizeObserver.current?.disconnect()
  }, [])

  return [isOverflow, ref]
}


================================================
File: frontend/src/lib/create-style-context.tsx
================================================
import {
  createContext,
  type ElementType,
  forwardRef,
  type ForwardRefExoticComponent,
  type PropsWithoutRef,
  type RefAttributes,
  useContext,
} from 'react'
import { cx } from 'styled-system/css'
import { styled } from 'styled-system/jsx'

type Props = Record<string, unknown>
type Recipe = {
  (props?: Props): Props
  splitVariantProps: (props: Props) => [Props, Props]
}
type Slot<R extends Recipe> = keyof ReturnType<R>

export const createStyleContext = <R extends Recipe>(recipe: R) => {
  const StyleContext = createContext<Record<Slot<R>, string> | null>(null)

  const withRootProvider = <P extends {}>(Component: ElementType) => {
    function StyledComponent(props: P) {
      const [variantProps, otherProps] = recipe.splitVariantProps(props)
      const slotStyles = recipe(variantProps) as Record<Slot<R>, string>

      return (
        <StyleContext.Provider value={slotStyles}>
          <Component {...otherProps} />
        </StyleContext.Provider>
      )
    }
    return StyledComponent
  }

  const withProvider = <T, P extends { className?: string | undefined }>(
    Component: ElementType,
    slot: Slot<R>,
  ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> => {
    const StyledComponent = styled(Component)
    const StyledSlotProvider = forwardRef<T, P>((props, ref) => {
      const [variantProps, otherProps] = recipe.splitVariantProps(props)
      const slotStyles = recipe(variantProps) as Record<Slot<R>, string>

      return (
        <StyleContext.Provider value={slotStyles}>
          <StyledComponent {...otherProps} ref={ref} className={cx(slotStyles?.[slot], props.className)} />
        </StyleContext.Provider>
      )
    })
    // @ts-expect-error
    StyledSlotProvider.displayName = Component.displayName || Component.name

    return StyledSlotProvider
  }

  const withContext = <T, P extends { className?: string | undefined }>(
    Component: ElementType,
    slot: Slot<R>,
  ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> => {
    const StyledComponent = styled(Component)
    const StyledSlotComponent = forwardRef<T, P>((props, ref) => {
      const slotStyles = useContext(StyleContext)
      return <StyledComponent {...props} ref={ref} className={cx(slotStyles?.[slot], props.className)} />
    })
    // @ts-expect-error
    StyledSlotComponent.displayName = Component.displayName || Component.name

    return StyledSlotComponent
  }

  return {
    withRootProvider,
    withProvider,
    withContext,
  }
}


================================================
File: frontend/src/lib/deepmerge.ts
================================================
type TAllKeys<T> = T extends any ? keyof T : never

type TIndexValue<T, K extends PropertyKey, D = never> = T extends any ? (K extends keyof T ? T[K] : D) : never

type TPartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>> extends infer O
  ? { [P in keyof O]: O[P] }
  : never

type TFunction = (...a: any[]) => any

type TPrimitives = string | number | boolean | bigint | symbol | Date | TFunction

type TMerged<T> = [T] extends [any[]]
  ? { [K in keyof T]: TMerged<T[K]> }
  : [T] extends [TPrimitives]
    ? T
    : [T] extends [object]
      ? TPartialKeys<{ [K in TAllKeys<T>]: TMerged<TIndexValue<T, K>> }, never>
      : T

// istanbul ignore next
const isObject = (obj: any) => {
  if (typeof obj === 'object' && obj !== null) {
    if (typeof Object.getPrototypeOf === 'function') {
      const prototype = Object.getPrototypeOf(obj)
      return prototype === Object.prototype || prototype === null
    }

    return Object.prototype.toString.call(obj) === '[object Object]'
  }

  return false
}

interface IObject {
  [key: string]: any
}

export const deepmerge = <T extends IObject[]>(...objects: T): TMerged<T[number]> =>
  objects.reduce((result, current) => {
    if (Array.isArray(current)) {
      throw new TypeError('Arguments provided to ts-deepmerge must be objects, not arrays.')
    }

    Object.keys(current).forEach((key) => {
      if (['__proto__', 'constructor', 'prototype'].includes(key)) {
        return
      }

      if (Array.isArray(result[key]) && Array.isArray(current[key])) {
        result[key] = deepmerge.options.mergeArrays
          ? deepmerge.options.uniqueArrayItems
            ? Array.from(new Set((result[key] as unknown[]).concat(current[key])))
            : [...result[key], ...current[key]]
          : current[key]
      } else if (isObject(result[key]) && isObject(current[key])) {
        result[key] = deepmerge(result[key] as IObject, current[key] as IObject)
      } else {
        result[key] =
          current[key] === undefined
            ? deepmerge.options.allowUndefinedOverrides
              ? current[key]
              : result[key]
            : current[key]
      }
    })

    return result
  }, {}) as any

interface IOptions {
  /**
   * When `true`, values explicitly provided as `undefined` will override existing values, though properties that are simply omitted won't affect anything.
   * When `false`, values explicitly provided as `undefined` won't override existing values.
   *
   * Default: `true`
   */
  allowUndefinedOverrides: boolean

  /**
   * When `true` it will deepmerge array properties.
   * When `false` it will replace array properties with the last instance entirely instead of merging their contents.
   *
   * Default: `true`
   */
  mergeArrays: boolean

  /**
   * When `true` it will ensure there are no duplicate array items.
   * When `false` it will allow duplicates when merging arrays.
   *
   * Default: `true`
   */
  uniqueArrayItems: boolean
}

const defaultOptions: IOptions = {
  allowUndefinedOverrides: true,
  mergeArrays: true,
  uniqueArrayItems: true,
}

deepmerge.options = defaultOptions

deepmerge.withOptions = <T extends IObject[]>(options: Partial<IOptions>, ...objects: T) => {
  deepmerge.options = {
    ...defaultOptions,
    ...options,
  }

  const result = deepmerge(...objects)

  deepmerge.options = defaultOptions

  return result
}


================================================
File: frontend/src/lib/delay.ts
================================================
export function delay(ms: number) {
  return new Promise<number>((resolve) => setTimeout(resolve, ms))
}


================================================
File: frontend/src/lib/get-locale-from-headers.ts
================================================
import linguiConfig from 'lingui.config.mjs'
import { headers } from 'next/headers'

export function getLocaleFromHeaders() {
  const headersList = headers()
  return headersList.get('locale') ?? linguiConfig.sourceLocale!
}


================================================
File: frontend/src/lib/get-pathname.ts
================================================
import { headers } from 'next/headers'

export function getPathnameFromHeaders() {
  const headersList = headers()
  return headersList.get('x-pathname') ?? ''
}


================================================
File: frontend/src/lib/get-url.ts
================================================
import { headers } from 'next/headers'

export function getUrl() {
  const headersList = headers()
  return new URL(headersList.get('x-url')!)
}


================================================
File: frontend/src/lib/graphql.ts
================================================
import { GraphQLClient } from 'graphql-request'

import { env } from '@/constants/env'

export const graphQLClient = new GraphQLClient(env.share.RGBPP_EXPLORER_API_URL, {
  fetch(input, init) {
    return fetch(input, {
      ...init,
    })
  },
})


================================================
File: frontend/src/lib/if-route-pathname.ts
================================================
export function isRoutePathname(pathname: string, routePathname: string, exact = false) {
  if (!pathname.startsWith('/') || !routePathname.startsWith('/')) return false
  const pathnameParts = pathname.replace(/\/$/, '').split('/')
  const routePathnameParts = routePathname.replace(/\/$/, '').split('/')
  if (exact && routePathnameParts.length !== pathnameParts.length) return false
  if (routePathnameParts.length > pathnameParts.length) return false
  for (let i = 0; i < routePathnameParts.length; i += 1) {
    const part = routePathnameParts[i]
    if (part.startsWith(':') && !!pathnameParts[i]) continue
    if (routePathnameParts[i] !== pathnameParts[i]) return false
  }
  return true
}


================================================
File: frontend/src/lib/iife.ts
================================================
export function iife<T>(callback: () => T): T {
  return callback()
}


================================================
File: frontend/src/lib/parseURL.ts
================================================
export function parseURL(str: string): URL | null {
  try {
    return new URL(str)
  } catch {
    return null
  }
}


================================================
File: frontend/src/lib/resolve-cell-diff.ts
================================================
import BigNumber from 'bignumber.js'

import { CkbTransaction } from '@/gql/graphql'
import { scriptToAddress } from '@/lib/ckb/script-to-address'

export function resolveCellDiff(tx?: Pick<CkbTransaction, 'inputs' | 'outputs'> | null) {
  const xudtInfo = tx?.inputs?.find((x) => x.xudtInfo)?.xudtInfo
  if (!xudtInfo) {
    return {
      value: BigNumber(0),
      symbol: 'xUDT',
    }
  }
  const symbol = xudtInfo.symbol
  const decimal = xudtInfo.decimal ?? 1
  const lockScript = tx?.inputs?.[0].lock ? scriptToAddress(tx?.inputs?.[0].lock) : undefined
  const inputValue = tx?.inputs
    ?.filter((input) => input.xudtInfo && input.xudtInfo.symbol === symbol)
    .reduce((acc, input) => acc.plus(input.xudtInfo!.amount), BigNumber(0))
  const outputValue = tx?.outputs
    .filter(
      (output) => output.xudtInfo && output.xudtInfo.symbol === symbol && scriptToAddress(output.lock) === lockScript,
    )
    .reduce((acc, output) => acc.plus(output.xudtInfo!.amount), BigNumber(0))
  return {
    value: inputValue?.minus(outputValue ?? 0).div(BigNumber(10).pow(decimal)) ?? BigNumber(0),
    symbol,
  }
}


================================================
File: frontend/src/lib/resolve-layer-type-from-rgbpp-transaction.ts
================================================
import { LeapDirection, RgbppTransaction } from '@/gql/graphql'

export function resolveLayerTypeFromRGBppTransaction(
  tx: Pick<RgbppTransaction, 'ckbTransaction' | 'btcTransaction' | 'leapDirection'>,
) {
  switch (tx.leapDirection) {
    case LeapDirection.LeapOut:
      return 'l1-l2'
    case LeapDirection.LeapIn:
      return 'l2-l1'
    case LeapDirection.Within:
      return 'l1'
    default:
      if (tx.btcTransaction) return 'l2-l1'
      return 'l2'
  }
}


================================================
File: frontend/src/lib/resolve-page.ts
================================================
import { notFound } from 'next/navigation'

export function resolvePage(str?: string) {
  const parsedInt = parseInt(str ?? '1', 10)
  if (isNaN(parsedInt) || parsedInt <= 0) {
    notFound()
  }
  return parsedInt
}


================================================
File: frontend/src/lib/resolve-rgbpp-tx-hash.ts
================================================
import { RgbppTransaction } from '@/gql/graphql'
import { resolveLayerTypeFromRGBppTransaction } from '@/lib/resolve-layer-type-from-rgbpp-transaction'

export function resolveRGBppTxHash(tx: Pick<RgbppTransaction, 'btcTxid' | 'ckbTxHash' | 'leapDirection'>) {
  const type = resolveLayerTypeFromRGBppTransaction(tx)
  if (!type) return tx.ckbTxHash
  switch (type) {
    case 'l1-l2':
    case 'l1':
      return tx.btcTxid ?? tx.ckbTxHash
    case 'l2':
    case 'l2-l1':
      return tx.ckbTxHash ?? tx.btcTxid
  }
}


================================================
File: frontend/src/lib/address/format-ckb-address.ts
================================================
import { truncateMiddle } from '@/lib/string/truncate-middle'

export function formatCkbAddress(ckbAddress: string) {
  return truncateMiddle(ckbAddress)
}


================================================
File: frontend/src/lib/address/format-ckb-tx-hash.ts
================================================
import { truncateMiddle } from '@/lib/string/truncate-middle'

export function formatCkbTxHash(txHash?: string) {
  return txHash ? truncateMiddle(txHash, 10, 8) : undefined
}


================================================
File: frontend/src/lib/btc/get-btc-address-type.ts
================================================
import * as bitcoin from 'bitcoinjs-lib'

import { env } from '@/constants/env'

type AddressType = 'P2PKH' | 'P2SH' | 'P2WPKH' | 'P2SH-P2WPKH' | 'P2TR'

export function getAddressType(address: string): AddressType | null {
  try {
    const network = env.public.IS_MAINNET ? bitcoin.networks.bitcoin : bitcoin.networks.testnet
    try {
      const bech32Decoded = bitcoin.address.fromBech32(address)
      const prefix = bech32Decoded.prefix
      const version = bech32Decoded.version

      if (prefix === (network === bitcoin.networks.testnet ? 'tb' : 'bc')) {
        if (version === 0) return 'P2WPKH'
        if (version === 1) return 'P2TR'
      }
    } catch {}

    const base58Decoded = bitcoin.address.fromBase58Check(address)
    const version = base58Decoded.version

    if (network === bitcoin.networks.testnet) {
      if (version === 0x6f) return 'P2PKH'
      if (version === 0xc4) return 'P2SH-P2WPKH'
      if (version === 0xc4) return 'P2SH'
    } else {
      if (version === 0x00) return 'P2PKH'
      if (version === 0x05) return 'P2SH-P2WPKH'
      if (version === 0x05) return 'P2SH'
    }
  } catch {}

  return null
}


================================================
File: frontend/src/lib/btc/is-valid-btc-address.ts
================================================
import ecc from '@bitcoinerlab/secp256k1'
import * as bitcoin from 'bitcoinjs-lib'

import { env } from '@/constants/env'

bitcoin.initEccLib(ecc)

export function isValidBTCAddress(address: string) {
  try {
    bitcoin.address.toOutputScript(address, env.public.IS_MAINNET ? bitcoin.networks.bitcoin : bitcoin.networks.testnet)
    return true
  } catch (e) {
    return false
  }
}


================================================
File: frontend/src/lib/btc/resolve-btc-time.ts
================================================
export function resolveBtcTime(sTimestamp: number) {
  return Number(sTimestamp.toString().padEnd(13, '0'))
}


================================================
File: frontend/src/lib/btc/resolve-mempool.ts
================================================
import { env } from '@/constants/env'

export function resolveMempool(key: string, type: 'tx') {
  return `${env.public.MEMPOOL_URL}/${type}/${key}`
}


================================================
File: frontend/src/lib/btc/sats-to-btc.ts
================================================
import BigNumber from 'bignumber.js'

export function satsToBtc(sats?: BigNumber.Value | null) {
  return BigNumber(sats ?? 0).div(BigNumber(10).pow(8))
}


================================================
File: frontend/src/lib/ckb/is-rgbpp-lock-cell.ts
================================================
import type { Script } from '@ckb-lumos/lumos'
import { isRgbppLockCell as isRgbppLockCellRaw } from '@rgbpp-sdk/ckb'

import { env } from '@/constants/env'
import { CkbCell } from '@/gql/graphql'

export function isRgbppLockCell(ckbCell: CkbCell) {
  return isRgbppLockCellRaw(
    {
      capacity: `${ckbCell.capacity}`,
      lock: ckbCell.lock as Script,
      type: ckbCell.type as Script,
    },
    env.public.IS_MAINNET,
  )
}


================================================
File: frontend/src/lib/ckb/is-valid-ckb-address.ts
================================================
import { parseAddress } from '@nervosnetwork/ckb-sdk-utils'

export function isValidCkbAddress(address: string) {
  try {
    parseAddress(address)
    return true
  } catch {
    return false
  }
}


================================================
File: frontend/src/lib/ckb/resolve-ckb-explorer-url.ts
================================================
import { env } from '@/constants/env'

export function resolveCkbExplorerUrl(key: string, type: 'transaction' | 'address' | 'block') {
  return `${env.public.CKB_EXPLORER_URL}/${type}/${key}`
}


================================================
File: frontend/src/lib/ckb/script-to-address.ts
================================================
import { scriptToAddress as lockToAddress } from '@nervosnetwork/ckb-sdk-utils'

import { env } from '@/constants/env'
import type { CkbScript } from '@/gql/graphql'

export function scriptToAddress(script: CKBComponents.Script | CkbScript) {
  return lockToAddress(script as CKBComponents.Script, env.public.IS_MAINNET)
}


================================================
File: frontend/src/lib/ckb/shannon-to-ckb.ts
================================================
import BigNumber from 'bignumber.js'

export function shannonToCKB(shannon?: BigNumber.Value | null) {
  return BigNumber(shannon ?? 0).div(BigNumber(10).pow(8))
}


================================================
File: frontend/src/lib/string/format-number.ts
================================================
import BigNumber from 'bignumber.js'
import { isNaN, isNull, isUndefined } from 'lodash-es'

export function formatNumber(value?: BigNumber.Value | null, decimal?: number) {
  if (isUndefined(value) || isNull(value) || isNaN(value)) return '-'
  const val = BigNumber(value)
  if (decimal) {
    return val.div(BigNumber(10).pow(decimal)).toFormat()
  }
  return val?.toFormat() ?? '-'
}


================================================
File: frontend/src/lib/string/truncate-middle.ts
================================================
export function truncateMiddle(str = '', takeLength = 6, tailLength = takeLength, pad = '...'): string {
  if (takeLength + tailLength >= str.length) return str
  return `${str.slice(0, takeLength)}${pad}${str.slice(-tailLength)}`
}


================================================
File: frontend/src/lib/types/BaseAppRouterProps.ts
================================================
import type { PropsWithChildren } from 'react'

export interface BaseAppRouterProps {
  params: {
    lang: string
  }
}

export interface BaseAppRouterPropsWithChildren extends PropsWithChildren, BaseAppRouterProps {
  params: {
    lang: string
  }
}


================================================
File: frontend/src/lib/types/address.ts
================================================
export type CkbAddress = `${'ckb' | 'ckt'}${string}`


================================================
File: frontend/src/locales/en/messages.po
================================================
msgid ""
msgstr ""
"POT-Creation-Date: 2024-07-11 18:38+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: @lingui/cli\n"
"Language: en\n"
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Plural-Forms: \n"

#: src/components/latest-tx-list/amount.tsx:10
#: src/components/latest-tx-list/amount.tsx:29
msgid "-"
msgstr "-"

#: src/components/ckb/ckb-outputs-sum.tsx:27
msgid "{0} {1}"
msgstr "{0} {1}"

#: src/components/btc/btc-diff-tags.tsx:106
#: src/components/btc/btc-outputs-sum.tsx:19
msgid "{0} BTC"
msgstr "{0} BTC"

#: src/components/ckb/ckb-outputs-sum.tsx:43
msgid "{0} CKB"
msgstr "{0} CKB"

#: src/components/utxo-or-cell-footer.tsx:79
msgid "{0} confirmed"
msgstr "{0} confirmed"

#: src/components/btc/btc-diff-tags.tsx:121
#: src/components/ckb/ckb-diff-tags.tsx:107
#: src/components/ckb/ckb-outputs-sum.tsx:50
msgid "{0} DOB"
msgstr "{0} DOB"

#: src/components/btc/btc-block-overview.tsx:65
msgid "{0} sats/VB ~ {1} sats/VB"
msgstr "{0} sats/VB ~ {1} sats/VB"

#: src/components/btc/btc-diff-tags.tsx:72
#: src/components/ckb/ckb-diff-tags.tsx:57
msgid "{0}{1} {2}"
msgstr "{0}{1} {2}"

#: src/components/ckb/ckb-diff-tags.tsx:89
msgid "{0}{1} CKB"
msgstr "{0}{1} CKB"

#: src/components/ckb/ckb-address-overview.tsx:32
#~ msgid "{0}} CKB"
#~ msgstr "{0}} CKB"

#: src/components/ago-time-formatter.tsx:37
msgid "{hoursDiff}h {remainingMinutes}m ago"
msgstr "{hoursDiff}h {remainingMinutes}m ago"

#: src/components/ago-time-formatter.tsx:39
msgid "{hoursDiff}h ago"
msgstr "{hoursDiff}h ago"

#: src/components/ago-time-formatter.tsx:30
msgid "{minutesDiff}m {remainingSeconds}s ago"
msgstr "{minutesDiff}m {remainingSeconds}s ago"

#: src/components/ago-time-formatter.tsx:32
msgid "{minutesDiff}m ago"
msgstr "{minutesDiff}m ago"

#: src/components/ago-time-formatter.tsx:26
msgid "{secondsDiff}s ago"
msgstr "{secondsDiff}s ago"

#: src/components/last-rgbpp-txns-table/amount.tsx:19
#: src/components/last-rgbpp-txns-table/amount.tsx:30
#~ msgid "<0>{0}</0> DOB"
#~ msgstr "<0>{0}</0> DOB"

#: src/components/latest-tx-list/amount.tsx:17
msgid "<0>{0}</0><1>DOB</1>"
msgstr "<0>{0}</0><1>DOB</1>"

#: src/components/home-title.tsx:43
msgid "<0>Explore the<1><2/></1></0><3>Ecosystem</3>"
msgstr "<0>Explore the<1><2/></1></0><3>Ecosystem</3>"

#: src/app/[lang]/explorer/btc/page.tsx:157
#: src/app/[lang]/explorer/ckb/page.tsx:158
#~ msgid "🔥 Popular RGB++ Assets"
#~ msgstr "🔥 Popular RGB++ Assets"

#: src/app/[lang]/address/[address]/layout.tsx:83
msgid "Address"
msgstr "Address"

#: src/components/latest-tx-list/ui.tsx:81
msgid "Amount"
msgstr "Amount"

#: src/components/ckb/ckb-address-overview.tsx:41
msgid "Available"
msgstr "Available"

#: src/app/[lang]/address/[address]/transactions/page.tsx:265
#~ msgid "Back to first page"
#~ msgstr "Back to first page"

#: src/app/not-found.tsx:19
msgid "Back to Home"
msgstr "Back to Home"

#: src/app/[lang]/explorer/btc/info.tsx:50
#: src/components/footer.tsx:91
#: src/components/navbar/index.tsx:34
#: src/components/network-cards.tsx:74
msgid "Bitcoin"
msgstr "Bitcoin"

#: src/components/block-header.tsx:40
msgid "Block {0}"
msgstr "Block {0}"

#: src/app/[lang]/explorer/btc/info.tsx:54
#: src/app/[lang]/explorer/ckb/info.tsx:42
#: src/components/btc/btc-transaction-overview.tsx:42
#: src/components/ckb/ckb-transaction-overview.tsx:40
#: src/components/network-cards.tsx:81
#: src/components/network-cards.tsx:114
msgid "Block Height"
msgstr "Block Height"

#: src/components/btc/btc-transaction-overview.tsx:42
#: src/components/ckb/ckb-transaction-overview.tsx:40
#~ msgid "Block Height(i18n)"
#~ msgstr "Block Height(i18n)"

#: src/components/btc/btc-block-overview.tsx:53
#: src/components/ckb/ckb-block-overview.tsx:40
msgid "Block size"
msgstr "Block size"

#: src/components/btc/btc-address-overview.tsx:39
#: src/components/btc/btc-address-overview.tsx:44
#: src/components/btc/btc-address-overview.tsx:48
#: src/components/btc/btc-utxo-tables.tsx:150
#: src/components/btc/btc-utxo-tables.tsx:230
msgid "BTC"
msgstr "BTC"

#: src/components/btc/btc-address-overview.tsx:38
msgid "BTC Balance"
msgstr "BTC Balance"

#: src/components/btc/btc-utxos.tsx:52
msgid "BTC Txn"
msgstr "BTC Txn"

#: src/components/btc/btc-block-overview.tsx:54
#: src/components/btc/btc-transaction-overview.tsx:52
#: src/components/ckb/ckb-block-overview.tsx:41
#: src/components/ckb/ckb-transaction-overview.tsx:49
msgid "bytes"
msgstr "bytes"

#: src/app/[lang]/explorer/ckb/info.tsx:38
#: src/components/ckb/ckb-address-overview.tsx:39
#: src/components/ckb/ckb-address-overview.tsx:42
#: src/components/ckb/ckb-address-overview.tsx:45
#: src/components/ckb/ckb-block-overview.tsx:66
#: src/components/ckb/ckb-cell-tables.tsx:131
#: src/components/ckb/ckb-transaction-overview.tsx:55
#: src/components/footer.tsx:94
#: src/components/navbar/index.tsx:39
#: src/components/network-cards.tsx:107
msgid "CKB"
msgstr "CKB"

#: src/components/ckb/ckb-address-overview.tsx:38
msgid "CKB Balance"
msgstr "CKB Balance"

#: src/components/ckb/ckb-cells.tsx:55
msgid "CKB Txn"
msgstr "CKB Txn"

#: src/components/coin-list.tsx:37
msgid "Coin"
msgstr "Coin"

#: src/components/btc/btc-utxo-tables.tsx:105
#: src/components/ckb/ckb-cell-tables.tsx:61
msgid "Coinbase"
msgstr "Coinbase"

#: src/app/[lang]/assets/layout.tsx:21
msgid "Coins"
msgstr "Coins"

#: src/components/network-cards.tsx:148
msgid "Coming"
msgstr "Coming"

#: src/components/coming-soon-text.tsx:6
msgid "Coming Soon"
msgstr "Coming Soon"

#: src/app/[lang]/assets/coins/[typeHash]/holders/page.tsx:14
#: src/components/coming-soon.tsx:14
msgid "Coming soon, please stay tuned"
msgstr "Coming soon, please stay tuned"

#: src/app/[lang]/block/btc/[hashOrHeight]/layout.tsx:53
#: src/app/[lang]/block/ckb/[hashOrHeight]/layout.tsx:53
#: src/app/[lang]/transaction/[tx]/btc.tsx:48
#: src/app/[lang]/transaction/[tx]/ckb.tsx:49
#~ msgid "confirmations"
#~ msgstr "confirmations"

#: src/components/block-header.tsx:69
#: src/components/transaction-header.tsx:72
msgid "Confirmations"
msgstr "Confirmations"

#: src/components/btc/btc-address-overview.tsx:41
msgid "Confirmed"
msgstr "Confirmed"

#: src/components/copier.tsx:53
#: src/components/copier.tsx:92
msgid "Copied"
msgstr "Copied"

#: src/components/copier.tsx:53
#: src/components/copier.tsx:92
msgid "Copy"
msgstr "Copy"

#: src/components/coin-list.tsx:49
#: src/components/coin-list.tsx:136
msgid "Deploy Time"
msgstr "Deploy Time"

#: src/components/btc/btc-utxo-tables.tsx:167
#: src/components/btc/btc-utxo-tables.tsx:247
#: src/components/ckb/ckb-cell-tables.tsx:146
msgid "DOB"
msgstr "DOB"

#: src/app/[lang]/assets/layout.tsx:25
msgid "DOBs"
msgstr "DOBs"

#: src/app/[lang]/explorer/btc/info.tsx:123
msgid "Drop"
msgstr "Drop"

#: src/app/[lang]/page.tsx:21
#~ msgid "Explore the BTC Ecosystem"
#~ msgstr "Explore the BTC Ecosystem"

#: src/components/home-title.tsx:40
#~ msgid "Explore the<0><1/></0>Ecosystem"
#~ msgstr "Explore the<0><1/></0>Ecosystem"

#: src/components/home-title.tsx:10
#~ msgid "Explore the<0>BTC</0>Ecosystem"
#~ msgstr "Explore the<0>BTC</0>Ecosystem"

#: src/components/footer.tsx:88
#: src/components/navbar/index.tsx:113
msgid "Explorer"
msgstr "Explorer"

#: src/app/[lang]/explorer/ckb/info.tsx:68
#~ msgid "Fast"
#~ msgstr "Fast"

#: src/components/btc/btc-transaction-overview.tsx:56
#: src/components/ckb/ckb-transaction-overview.tsx:54
msgid "Fee"
msgstr "Fee"

#: src/components/btc/btc-transaction-overview.tsx:59
msgid "Fee rate"
msgstr "Fee rate"

#: src/components/btc/btc-block-overview.tsx:61
msgid "Fee rate span"
msgstr "Fee rate span"

#: src/app/[lang]/block/btc/[hashOrHeight]/transactions/page.tsx:123
#: src/app/[lang]/block/ckb/[hashOrHeight]/transactions/page.tsx:130
#~ msgid "Fee rate:"
#~ msgstr "Fee rate:"

#: src/components/utxo-or-cell-footer.tsx:58
#~ msgid "Fee rate:<0>{0}</0>{feeUnit}"
#~ msgstr "Fee rate:<0>{0}</0>{feeUnit}"

#: src/components/utxo-or-cell-footer.tsx:65
msgid "Fee rate:<0>{0}</0>{feeUnit}/vB"
msgstr "Fee rate:<0>{0}</0>{feeUnit}/vB"

#: src/components/utxo-or-cell-footer.tsx:43
#~ msgid "Fee rate:<0>{0}</0>sats/vB"
#~ msgstr "Fee rate:<0>{0}</0>sats/vB"

#: src/components/pagination-searchparams.tsx:43
msgid "Go"
msgstr "Go"

#: src/app/[lang]/explorer/btc/info.tsx:87
#: src/app/[lang]/explorer/ckb/info.tsx:58
msgid "High"
msgstr "High"

#: src/app/[lang]/assets/coins/[typeHash]/layout.tsx:72
msgid "Holders"
msgstr "Holders"

#: src/components/btc/btc-utxo-tables.tsx:48
#: src/components/ckb/ckb-cell-tables.tsx:47
msgid "Inputs ({0})"
msgstr "Inputs ({0})"

#: src/app/[lang]/address/[address]/layout.tsx:24
#~ msgid "Invalid address \"{address}\""
#~ msgstr "Invalid address \"{address}\""

#: src/components/layer-type.tsx:26
#: src/components/layer-type.tsx:44
#: src/components/layer-type.tsx:63
msgid "L1"
msgstr "L1"

#: src/components/coin-list.tsx:40
#: src/components/coin-list.tsx:124
msgid "L1 and L2 Holders"
msgstr "L1 and L2 Holders"

#: src/components/btc/btc-address-overview.tsx:55
msgid "L1 RGB++ Assets"
msgstr "L1 RGB++ Assets"

#: src/app/[lang]/explorer/btc/info.tsx:57
msgid "L1 RGB++ Txns(24H)"
msgstr "L1 RGB++ Txns(24H)"

#: src/components/layer-type.tsx:35
#: src/components/layer-type.tsx:49
#: src/components/layer-type.tsx:58
msgid "L2"
msgstr "L2"

#: src/components/ckb/ckb-address-overview.tsx:52
msgid "L2 RGB++ Assets"
msgstr "L2 RGB++ Assets"

#: src/app/[lang]/explorer/ckb/info.tsx:45
msgid "L2 RGB++ Txns(24H)"
msgstr "L2 RGB++ Txns(24H)"

#: src/app/[lang]/explorer/btc/page.tsx:62
msgid "Latest L1 RGB++ transaction"
msgstr "Latest L1 RGB++ transaction"

#: src/app/[lang]/explorer/ckb/page.tsx:60
msgid "Latest L2 RGB++ transaction"
msgstr "Latest L2 RGB++ transaction"

#: src/app/[lang]/page.tsx:53
msgid "Latest RGB++ Txns"
msgstr "Latest RGB++ Txns"

#: src/components/last-rgbpp-txns-table/index.tsx:19
#~ msgid "Layer"
#~ msgstr "Layer"

#: src/components/failed-fallback.tsx:14
msgid "Load failed, Please wait a moment"
msgstr "Load failed, Please wait a moment"

#: src/components/failed-fallback.tsx:14
#~ msgid "Loading failed, please wait"
#~ msgstr "Loading failed, please wait"

#: src/app/[lang]/explorer/btc/info.tsx:111
#: src/app/[lang]/explorer/ckb/info.tsx:80
msgid "Low"
msgstr "Low"

#: src/components/network-switcher.tsx:34
msgid "Mainnet"
msgstr "Mainnet"

#: src/app/[lang]/explorer/btc/info.tsx:99
#: src/app/[lang]/explorer/ckb/info.tsx:69
msgid "Medium"
msgstr "Medium"

#: src/components/btc/btc-block-overview.tsx:94
#: src/components/ckb/ckb-block-overview.tsx:48
msgid "Miner"
msgstr "Miner"

#: src/components/ckb/ckb-block-overview.tsx:65
msgid "Miner Reward"
msgstr "Miner Reward"

#: src/components/btc/btc-block-overview.tsx:90
#~ msgid "Minter"
#~ msgstr "Minter"

#: src/components/ckb/ckb-block-overview.tsx:66
#~ msgid "Minter Reward"
#~ msgstr "Minter Reward"

#: src/components/footer.tsx:113
msgid "More Info"
msgstr "More Info"

#: src/components/footer.tsx:116
msgid "Nervos CKB"
msgstr "Nervos CKB"

#: src/app/[lang]/address/[address]/transactions/page.tsx:277
#~ msgid "Next"
#~ msgstr "Next"

#: src/components/no-data.tsx:14
msgid "No Data"
msgstr "No Data"

#: src/components/infinite-list-bottom.tsx:29
msgid "No More"
msgstr "No More"

#: src/app/[lang]/address/[address]/transactions/btc-tx-list.tsx:55
#: src/app/[lang]/address/[address]/transactions/ckb-tx-list.tsx:57
msgid "No Transaction"
msgstr "No Transaction"

#: src/components/ckb/ckb-address-overview.tsx:44
msgid "Occupied"
msgstr "Occupied"

#: src/components/search-bar.tsx:49
msgid "Oops! Your search did not match any record."
msgstr "Oops! Your search did not match any record."

#: src/components/btc/btc-utxo-tables.tsx:211
msgid "OP_RETURN"
msgstr "OP_RETURN"

#: src/components/btc/btc-utxo-tables.tsx:69
#: src/components/ckb/ckb-cell-tables.tsx:80
msgid "Outputs ({0})"
msgstr "Outputs ({0})"

#: src/components/btc/btc-address-overview.tsx:17
#: src/components/btc/btc-block-overview.tsx:25
#: src/components/btc/btc-transaction-overview.tsx:18
#: src/components/ckb/ckb-address-overview.tsx:17
#: src/components/ckb/ckb-block-overview.tsx:23
#: src/components/ckb/ckb-transaction-overview.tsx:18
#~ msgid "Overflow"
#~ msgstr "Overflow"

#: src/components/btc/btc-address-overview.tsx:26
#: src/components/btc/btc-block-overview.tsx:40
#: src/components/btc/btc-transaction-overview.tsx:27
#: src/components/ckb/ckb-address-overview.tsx:26
#: src/components/ckb/ckb-block-overview.tsx:27
#: src/components/ckb/ckb-transaction-overview.tsx:27
msgid "Overview"
msgstr "Overview"

#: src/components/footer.tsx:99
msgid "RGB++"
msgstr "RGB++"

#: src/app/[lang]/address/[address]/layout.tsx:107
#: src/components/navbar/index.tsx:136
#: src/components/navbar/index.tsx:196
msgid "RGB++ Assets"
msgstr "RGB++ Assets"

#: src/app/[lang]/explorer/btc/info.tsx:60
#: src/app/[lang]/explorer/ckb/info.tsx:48
msgid "RGB++ Assets Holders"
msgstr "RGB++ Assets Holders"

#: src/components/btc/btc-utxos.tsx:37
msgid "RGB++ Binding Txn on BTC"
msgstr "RGB++ Binding Txn on BTC"

#: src/components/ckb/ckb-cells.tsx:39
msgid "RGB++ Binding Txn on CKB"
msgstr "RGB++ Binding Txn on CKB"

#: src/components/footer.tsx:54
#: src/components/navbar/index.tsx:94
msgid "RGB++ Explorer"
msgstr "RGB++ Explorer"

#: src/components/home-quick-info.tsx:74
msgid "RGB++ Holders"
msgstr "RGB++ Holders"

#: src/app/[lang]/page.tsx:46
msgid "RGB++ Networks"
msgstr "RGB++ Networks"

#: src/components/home-quick-info.tsx:63
msgid "RGB++ Txns"
msgstr "RGB++ Txns"

#: src/components/btc/btc-transaction-overview.tsx:60
msgid "sat/VB"
msgstr "sat/VB"

#: src/components/btc/btc-transaction-card-in-address.tsx:35
#: src/components/btc/btc-transaction-card-with-query-in-block.tsx:20
#: src/components/btc/btc-transaction-overview.tsx:57
#: src/components/ckb/ckb-transaction-card-with-query-in-block.tsx:20
msgid "sats"
msgstr "sats"

#: src/app/[lang]/explorer/btc/info.tsx:83
#: src/app/[lang]/explorer/btc/info.tsx:96
#: src/app/[lang]/explorer/btc/info.tsx:107
#: src/app/[lang]/explorer/btc/info.tsx:119
msgid "sats/kB"
msgstr "sats/kB"

#: src/app/[lang]/block/btc/[hashOrHeight]/transactions/page.tsx:127
#~ msgid "sats/vB"
#~ msgstr "sats/vB"

#: src/components/btc/btc-block-overview.tsx:84
#: src/components/btc/btc-block-overview.tsx:89
msgid "sats/VB"
msgstr "sats/VB"

#: src/components/footer.tsx:105
msgid "Script"
msgstr "Script"

#: src/components/footer.tsx:108
msgid "SDK"
msgstr "SDK"

#: src/components/search-bar.tsx:93
#: src/components/search-bar.tsx:129
#~ msgid "Search by Address/Tx Hash/Block Hash"
#~ msgstr "Search by Address/Tx Hash/Block Hash"

#: src/components/search-bar.tsx:128
#: src/components/search-bar.tsx:173
msgid "Search by Address/Tx Hash/Block Hash/AssetID"
msgstr "Search by Address/Tx Hash/Block Hash/AssetID"

#: src/components/ckb/ckb-transaction-card-with-query-in-address.tsx:24
msgid "shannons"
msgstr "shannons"

#: src/app/[lang]/explorer/ckb/info.tsx:55
#: src/app/[lang]/explorer/ckb/info.tsx:66
#: src/app/[lang]/explorer/ckb/info.tsx:77
#: src/components/ckb/ckb-transaction-overview.tsx:58
msgid "shannons/kB"
msgstr "shannons/kB"

#: src/components/btc/btc-transaction-overview.tsx:51
#: src/components/ckb/ckb-transaction-overview.tsx:49
#: src/components/ckb/ckb-transaction-overview.tsx:57
msgid "Size"
msgstr "Size"

#: src/app/error.tsx:31
#~ msgid "Something wrong，Please reload"
#~ msgstr "Something wrong，Please reload"

#: src/app/error.tsx:29
msgid "Something wrong. Error code: {0}"
msgstr "Something wrong. Error code: {0}"

#: src/app/not-found.tsx:15
msgid "Sorry, the page you visited does not exist"
msgstr "Sorry, the page you visited does not exist"

#: src/components/coin-list.tsx:46
#: src/components/coin-list.tsx:132
msgid "Supply"
msgstr "Supply"

#: src/app/[lang]/layout.tsx:19
#~ msgid "Test"
#~ msgstr "Test"

#: src/components/network-switcher.tsx:39
msgid "Testnet"
msgstr "Testnet"

#: src/app/[lang]/address/[address]/layout.tsx:62
#~ msgid "The address \"{address}\" not found"
#~ msgstr "The address \"{address}\" not found"

#: src/app/[lang]/block/btc/[hashOrHeight]/layout.tsx:53
#~ msgid "The block {hashOrHeight} not found"
#~ msgstr "The block {hashOrHeight} not found"

#: src/app/[lang]/transaction/[tx]/page.tsx:198
#~ msgid "The transaction \"{tx}\" not found"
#~ msgstr "The transaction \"{tx}\" not found"

#: src/components/latest-tx-list/ui.tsx:84
msgid "Time"
msgstr "Time"

#: src/app/[lang]/assets/coins/[typeHash]/transactions/page.tsx:106
#: src/app/[lang]/assets/coins/page.tsx:54
msgid "Total {0} Items"
msgstr "Total {0} Items"

#: src/components/btc/btc-block-overview.tsx:56
#: src/components/ckb/ckb-block-overview.tsx:43
msgid "Transaction"
msgstr "Transaction"

#: src/app/[lang]/address/[address]/layout.tsx:103
#: src/app/[lang]/assets/coins/[typeHash]/layout.tsx:76
#: src/app/[lang]/block/btc/[hashOrHeight]/layout.tsx:67
#: src/app/[lang]/block/ckb/[hashOrHeight]/layout.tsx:59
#: src/components/transaction-header.tsx:45
msgid "Transactions"
msgstr "Transactions"

#: src/app/error.tsx:32
msgid "Try again"
msgstr "Try again"

#: src/components/latest-tx-list/ui.tsx:75
msgid "Tx hash"
msgstr "Tx hash"

#: src/app/[lang]/block/btc/[hashOrHeight]/transactions/page.tsx:116
#: src/app/[lang]/block/ckb/[hashOrHeight]/transactions/page.tsx:123
#~ msgid "Txn fee:"
#~ msgstr "Txn fee:"

#: src/components/utxo-or-cell-footer.tsx:54
msgid "Txn fee:<0>{0} </0>{feeUnit}"
msgstr "Txn fee:<0>{0} </0>{feeUnit}"

#: src/components/utxo-or-cell-footer.tsx:32
#~ msgid "Txn fee:<0>{0} </0>sats"
#~ msgstr "Txn fee:<0>{0} </0>sats"

#: src/components/btc/btc-address-overview.tsx:52
#: src/components/ckb/ckb-address-overview.tsx:49
msgid "Txns"
msgstr "Txns"

#: src/components/coin-list.tsx:43
#: src/components/coin-list.tsx:128
#: src/components/network-cards.tsx:85
#: src/components/network-cards.tsx:118
msgid "Txns(24H)"
msgstr "Txns(24H)"

#: src/components/latest-tx-list/ui.tsx:78
msgid "Type"
msgstr "Type"

#: src/components/btc/btc-address-overview.tsx:47
msgid "Unconfirmed"
msgstr "Unconfirmed"

#: src/components/footer.tsx:119
msgid "UTXO Stack"
msgstr "UTXO Stack"

#: src/components/view-ckb-explorer.tsx:27
msgid "View Details in CKB"
msgstr "View Details in CKB"

#: src/components/view-mempool.tsx:27
msgid "View Details in Mempool"
msgstr "View Details in Mempool"

#: src/components/footer.tsx:102
msgid "Whitepaper"
msgstr "Whitepaper"


================================================
File: frontend/src/styles/globals.css
================================================
@layer reset, base, tokens, recipes, utilities;


================================================
File: frontend/src/types/graphql.ts
================================================
export enum ScriptpubkeyType {
  OpReturn = 'op_return',
  P2wpkh = 'v0_p2wpkh',
}


================================================
File: frontend/src/types/route.ts
================================================
import type { ReactNode } from 'react'

export interface LayoutProps<P = Record<string, string>, S = Record<string, string>> {
  children: ReactNode
  params: { lang: string } & P
  searchParams: S
}


================================================
File: frontend/src/types/svgr.d.ts
================================================
declare module '*.svg' {
  import type { Assign } from '@ark-ui/react'
  import type { ComponentType, SVGProps } from 'react'
  import type { JsxStyleProps } from 'styled-system/types'

  const content: ComponentType<Assign<JsxStyleProps, SVGProps<SVGSVGElement>>>
  export default content
}


================================================
File: .github/PULL_REQUEST_TEMPLATE.md
================================================
<!-- PULL REQUEST TEMPLATE -->
<!-- (Update "[ ]" to "[x]" to check a box) -->

**What kind of change does this PR introduce?** (check at least one)

- [ ] Bugfix
- [ ] Feature
- [ ] Code style update
- [ ] Refactor
- [ ] Build-related changes
- [ ] Other, please describe:

**The PR fulfills these requirements:**

- [ ] It's submitted to the `develop` branch(or to a previous version branch), _not_ the `main` branch
- [ ] All tests are passing
- [ ] Build success

If adding a **new feature**, the PR's description includes:
- [ ] A convincing reason for adding this feature

**Other information:**

================================================
File: .github/workflows/backend-deploy.yml
================================================
name: Backend Deploy

on:
  push:
    branches: [develop]
    paths:
      - backend/**
  workflow_dispatch:

jobs:
  deploy-testnet:
    environment:
      name: testnet
      url: https://testnet-api.explorer.rgbpp.io/graphql
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to testnet
        uses: appleboy/ssh-action@v1.0.3
        env:
          # GIT_BRANCH is used as a part of cache key prefix
          GIT_BRANCH: 'develop'
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.SSH_WORK_DIR }}
            git status
            git fetch origin
            git checkout ${{ github.sha }}
            git status
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker compose ps
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker image prune -f
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker compose build
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker compose up -d
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker compose ps


================================================
File: .github/workflows/backend-test.yml
================================================
name: Backend Test

on:
  pull_request:
    paths:
      - backend/**
  push:
    branches: [main, develop]
    paths:
      - backend/**

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      redis-cache:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      redis-queue:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Install PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'
          cache: 'pnpm'

      - uses: pnpm/action-setup@v4
      - name: Install dependency
        run: pnpm install

      - name: Run Build
        run: pnpm run build
        working-directory: backend

      - name: Run Test
        run: |
          touch .env
          echo BITCOIN_PRIMARY_DATA_PROVIDER="${{ secrets.BITCOIN_PRIMARY_DATA_PROVIDER }}" >> .env
          echo BITCOIN_MEMPOOL_SPACE_API_URL="${{ secrets.BITCOIN_MEMPOOL_SPACE_API_URL }}" >> .env
          echo BITCOIN_ELECTRS_API_URL="{{ secrets.BITCOIN_ELECTRS_API_URL }}" >> .env
          echo CKB_EXPLORER_API_URL="${{ secrets.CKB_EXPLORER_API_URL }}" >> .env
          echo CKB_RPC_WEBSOCKET_URL="${{ secrets.CKB_RPC_WEBSOCKET_URL }}" >> .env
          echo REDIS_CACHE_URL="redis://localhost:6379" >> .env
          echo REDIS_QUEUE_URL="redis://localhost:6380" >> .env
          echo DATABASE_URL="postgres://postgres:postgres@postgres:5432/explorer?sslmode=disable" >> .env
          cat .env
          pnpm run test
        working-directory: backend

      - name: Docker Build Test
        run: docker compose build


================================================
File: .github/workflows/frontend-lint.yml
================================================
name: Frontend Linter

on:
  pull_request:
    paths:
      - frontend/**
  push:
    paths:
      - frontend/**

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-node@v2
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v4
      - name: Install dependency
        run: pnpm install

      - name: Run Lint
        run: npm run lint
        working-directory: frontend


================================================
File: .github/workflows/frontend-spell-check.yml
================================================
name: Frontend Spell Check

on:
  push:
    paths:
      - frontend/**

jobs:
  spellcheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install

      - name: Run Check
        run: npx cspell "**/*"
        working-directory: frontend


